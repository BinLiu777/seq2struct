{"beams": [{"choice_history": [121, 198, "Acidic", "Swamp", "Ooze", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 274, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Destroy", "<EOS>", "Weapon", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-3.4332275390625e-05, -5.340576171875e-05, -0.005135800689458847, -0.16366074979305267, -0.009060001000761986, -0.00018130417447537184, -4.600969987222925e-05, -4.410743713378906e-06, -2.0265579223632812e-05, -0.0006923675537109375, -0.00213623046875, -0.23095035552978516, -0.001198185607790947, -0.00014925003051757812, -0.0004158932133577764, -5.7220458984375e-05, -0.00021004522568546236, 0.0, -0.00018084049224853516, -1.1920922133867862e-06, -0.0232694149017334, 0.0, -0.0008622173336334527, -0.0008629633230157197, -0.0361272469162941, -1.3709068298339844e-05, 0.0, -4.1961669921875e-05, -0.001194000244140625, 0.0, -0.002355333883315325, -4.649161837733118e-06, -5.91278076171875e-05, -7.62939453125e-05, -1.9073486328125e-06, -1.3709068298339844e-05, 0.0, -7.82012939453125e-05, -0.0001087188720703125, -9.5367431640625e-06, -1.5616416931152344e-05, 0.0, -0.0001834630675148219, -1.71661376953125e-05], "score": -0.47948309759408403, "model_output": {"hole4": "player", "hole0": "AcidicSwampOoze", "hole1": "MinionCard", "hole2": [{"hole0": "Acidic Swamp Ooze", "hole6": [{"_type": "Template46", "hole0": "EnemyPlayer"}], "hole1": 2, "hole2": "COMMON", "_type": "Template6", "hole3": "Destroy", "hole5": "WeaponSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(),\n            WeaponSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Acidic", "<UNK>", "Ooze", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 274, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Destroy", "<EOS>", "Weapon", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-3.4332275390625e-05, -5.340576171875e-05, -0.005135800689458847, -1.8911956548690796, -0.009060001000761986, -0.00018130417447537184, -4.600969987222925e-05, -4.410743713378906e-06, -2.0265579223632812e-05, -0.0006923675537109375, -0.00213623046875, -0.23095035552978516, -0.001198185607790947, -0.00014925003051757812, -0.0004158932133577764, -5.7220458984375e-05, -0.00021004522568546236, 0.0, -0.00018084049224853516, -1.1920922133867862e-06, -0.0232694149017334, 0.0, -0.0008622173336334527, -0.0008629633230157197, -0.0361272469162941, -1.3709068298339844e-05, 0.0, -4.1961669921875e-05, -0.001194000244140625, 0.0, -0.002355333883315325, -4.649161837733118e-06, -5.91278076171875e-05, -7.62939453125e-05, -1.9073486328125e-06, -1.3709068298339844e-05, 0.0, -7.82012939453125e-05, -0.0001087188720703125, -9.5367431640625e-06, -1.5616416931152344e-05, 0.0, -0.0001834630675148219, -1.71661376953125e-05], "score": -2.207018002670111, "model_output": {"hole4": "player", "hole0": "Acidic<UNK>Ooze", "hole1": "MinionCard", "hole2": [{"hole0": "Acidic Swamp Ooze", "hole6": [{"_type": "Template46", "hole0": "EnemyPlayer"}], "hole1": 2, "hole2": "COMMON", "_type": "Template6", "hole3": "Destroy", "hole5": "WeaponSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class Acidic<UNK>Ooze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(),\n            WeaponSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Acidic", "Swamp", "Ooze", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 274, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Destroy", "<EOS>", "Destroy", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-3.4332275390625e-05, -5.340576171875e-05, -0.005135800689458847, -0.16366074979305267, -0.009060001000761986, -0.00018130417447537184, -4.600969987222925e-05, -4.410743713378906e-06, -2.0265579223632812e-05, -0.0006923675537109375, -0.00213623046875, -0.23095035552978516, -0.001198185607790947, -0.00014925003051757812, -0.0004158932133577764, -5.7220458984375e-05, -0.00021004522568546236, 0.0, -0.00018084049224853516, -1.1920922133867862e-06, -0.0232694149017334, 0.0, -0.0008622173336334527, -0.0008629633230157197, -3.8163273334503174, -0.07850431650876999, -1.71661376953125e-05, -0.014731407165527344, 0.0, -0.029027005657553673, -4.410743713378906e-06, -8.96453857421875e-05, -8.392333984375e-05, -1.9073486328125e-06, -1.3589859008789062e-05, 0.0, -8.96453857421875e-05, -0.00014495849609375, -1.1444091796875e-05, -1.3828277587890625e-05, 0.0, -0.0001909732527565211, -1.71661376953125e-05], "score": -4.378451177187571, "model_output": {"hole4": "player", "hole0": "AcidicSwampOoze", "hole1": "MinionCard", "hole2": [{"hole0": "Acidic Swamp Ooze", "hole6": [{"_type": "Template46", "hole0": "EnemyPlayer"}], "hole1": 2, "hole2": "COMMON", "_type": "Template6", "hole3": "Destroy", "hole5": "Destroy"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(), Destroy(\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Acidic", "Swamp", "Ooze", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "<UNK>", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Destroy", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-3.4332275390625e-05, -5.340576171875e-05, -0.005135800689458847, -0.16366074979305267, -0.009060001000761986, -0.00018130417447537184, -4.600969987222925e-05, -4.410743713378906e-06, -2.0265579223632812e-05, -0.0006923675537109375, -0.00213623046875, -3.4806222915649414, -0.0937749594449997, -7.259845733642578e-05, -0.040306512266397476, -0.0004655122756958008, -0.0007224004366435111, -3.933906555175781e-06, -0.00017631053924560547, -8.821448318485636e-06, -0.006653175689280033, 0.0, -0.07693988084793091, -0.2479388415813446, 0.0, -0.41796016693115234, -0.01717829704284668, -1.2516951755969785e-05, -1.1920928244535389e-07, -0.00022351741790771484, -1.9073486328125e-06, -5.4835974879097193e-05, 0.0, -5.91278076171875e-05, -0.0001888275146484375, -3.814697265625e-06, -1.537799835205078e-05, -2.3841855067985307e-07, -5.1379196520429105e-05, -1.71661376953125e-05], "score": -4.564477408845924, "model_output": {"hole4": "player", "hole0": "AcidicSwampOoze", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template63"}], "hole0": "<UNK> Swamp Ooze", "hole1": 2, "hole2": "COMMON", "_type": "Template6", "hole3": "Destroy", "hole5": "HeroSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(4), HeroSelector())\n            )\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Acidic", "Swamp", "Ooze", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Destroy", "<EOS>", 320, 104, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-3.4332275390625e-05, -5.340576171875e-05, -0.005135800689458847, -0.16366074979305267, -0.009060001000761986, -0.00018130417447537184, -4.600969987222925e-05, -4.410743713378906e-06, -2.0265579223632812e-05, -0.0006923675537109375, -0.00213623046875, -2.5009336471557617, -0.0009801201522350311, -0.00010156631469726562, -0.0005517147947102785, -0.0001926422119140625, -0.001121334033086896, 0.0, -0.0003898104769177735, 0.0, -0.003956198692321777, 0.0, -0.06911227107048035, -0.008415537886321545, -9.5367431640625e-06, -1.4584779739379883, -0.040904879570007324, -1.9550323486328125e-05, 0.0, -7.05718994140625e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.0004291534423828125, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -0.3683816194534302, -5.7220458984375e-06, -3.814697265625e-06, -0.0011196136474609375, -5.340576171875e-05, -0.12227463722229004, -1.71661376953125e-05, -0.0027008056640625, -3.814697265625e-06, -0.08981406688690186, -0.0002613067626953125, -2.288818359375e-05, -0.0066683292388916016, -1.9073486328125e-06, -2.1457672119140625e-05, 0.0, -3.0517578125e-05, -0.0002460479736328125, -7.62939453125e-06, -4.220008850097656e-05, 0.0, -0.00020766249508596957, -1.52587890625e-05], "score": -4.858631312505167, "model_output": {"hole4": "player", "hole0": "AcidicSwampOoze", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template61"}], "hole0": "Acidic Swamp Ooze", "hole7": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 2, "hole2": "COMMON", "_type": "Template6", "hole3": "Destroy", "hole5": "CharacterSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(3),\n            CharacterSelector(players=EnemyPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Acidic", "Swamp", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 274, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Destroy", "<EOS>", "Weapon", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-3.4332275390625e-05, -5.340576171875e-05, -0.005135800689458847, -0.16366074979305267, -4.854550361633301, -1.394745322613744e-05, -3.457058028288884e-06, -4.172325134277344e-06, -3.290176027803682e-05, -0.0003986358642578125, -0.001598358154296875, -0.23581409454345703, -0.001244621118530631, -0.0001989603042602539, -0.0002825066912919283, -3.814697265625e-05, -0.00013387121725827456, -1.9073486328125e-06, -0.00018835067749023438, -9.536738616588991e-07, -0.015987515449523926, 0.0, -0.0008556682732887566, -0.0009083542972803116, -0.03599001467227936, -1.5616416931152344e-05, 0.0, -4.38690185546875e-05, -0.0011348724365234375, 0.0, -0.002344128442928195, -4.649161837733118e-06, -6.103515625e-05, -7.43865966796875e-05, -1.9073486328125e-06, -1.3709068298339844e-05, 0.0, -8.0108642578125e-05, -0.0001068115234375, -9.5367431640625e-06, -1.5616416931152344e-05, 0.0, -0.00018167492817156017, -1.71661376953125e-05], "score": -5.321236176046568, "model_output": {"hole4": "player", "hole0": "AcidicSwamp<UNK>", "hole1": "MinionCard", "hole2": [{"hole0": "Acidic Swamp Ooze", "hole6": [{"_type": "Template46", "hole0": "EnemyPlayer"}], "hole1": 2, "hole2": "COMMON", "_type": "Template6", "hole3": "Destroy", "hole5": "WeaponSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class AcidicSwamp<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(),\n            WeaponSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Acidic", "Swamp", "Ooze", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Destroy", "<EOS>", 320, 104, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-3.4332275390625e-05, -5.340576171875e-05, -0.005135800689458847, -0.16366074979305267, -0.009060001000761986, -0.00018130417447537184, -4.600969987222925e-05, -4.410743713378906e-06, -2.0265579223632812e-05, -0.0006923675537109375, -0.00213623046875, -2.5009336471557617, -0.0009801201522350311, -0.00010156631469726562, -0.0005517147947102785, -0.0001926422119140625, -0.001121334033086896, 0.0, -0.0003898104769177735, 0.0, -0.003956198692321777, 0.0, -0.06911227107048035, -0.008415537886321545, -9.5367431640625e-06, -1.4584779739379883, -0.040904879570007324, -1.9550323486328125e-05, 0.0, -7.05718994140625e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.0004291534423828125, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.1819411516189575, -2.0265579223632812e-06, -1.1444091796875e-05, -0.0016040802001953125, -7.82012939453125e-05, -0.0304872989654541, -1.71661376953125e-05, -0.0014057159423828125, -3.814697265625e-06, -0.03694045543670654, -0.0001659393310546875, -1.71661376953125e-05, -0.0062754154205322266, 0.0, -2.1338462829589844e-05, 0.0, -3.24249267578125e-05, -0.0002155303955078125, -7.62939453125e-06, -3.838539123535156e-05, 0.0, -0.00020563593716360629, -1.52587890625e-05], "score": -5.526217519894999, "model_output": {"hole4": "player", "hole0": "AcidicSwampOoze", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template61"}], "hole0": "Acidic Swamp Ooze", "hole7": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 2, "hole2": "COMMON", "_type": "Template6", "hole3": "Destroy", "hole5": "CharacterSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Acidic", "Swamp", "Ooze", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 274, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "LEGENDARY", "<EOS>", "Destroy", "<EOS>", "Weapon", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-3.4332275390625e-05, -5.340576171875e-05, -0.005135800689458847, -0.16366074979305267, -0.009060001000761986, -0.00018130417447537184, -4.600969987222925e-05, -4.410743713378906e-06, -2.0265579223632812e-05, -0.0006923675537109375, -0.00213623046875, -0.23095035552978516, -0.001198185607790947, -0.00014925003051757812, -0.0004158932133577764, -5.7220458984375e-05, -0.00021004522568546236, 0.0, -0.00018084049224853516, -1.1920922133867862e-06, -5.024979114532471, -1.9073486328125e-06, -0.05894731357693672, -0.0018177785677835345, -0.10309708118438721, -3.4809112548828125e-05, 0.0, -3.62396240234375e-05, -0.0009860992431640625, 0.0, -0.0024137457367032766, -4.649161837733118e-06, -7.2479248046875e-05, -5.53131103515625e-05, -1.9073486328125e-06, -1.5616416931152344e-05, 0.0, -8.392333984375e-05, -0.0001087188720703125, -9.5367431640625e-06, -1.3828277587890625e-05, 0.0, -0.00017786023090593517, -1.71661376953125e-05], "score": -5.60706294820443, "model_output": {"hole4": "player", "hole0": "AcidicSwampOoze", "hole1": "MinionCard", "hole2": [{"hole0": "Acidic Swamp Ooze", "hole6": [{"_type": "Template46", "hole0": "EnemyPlayer"}], "hole1": 2, "hole2": "LEGENDARY", "_type": "Template6", "hole3": "Destroy", "hole5": "WeaponSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Destroy(),\n            WeaponSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "<UNK>", "Swamp", "Ooze", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 274, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Destroy", "<EOS>", "Weapon", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-3.4332275390625e-05, -5.340576171875e-05, -5.295984745025635, -0.16366074979305267, -0.009060001000761986, -0.00018130417447537184, -4.600969987222925e-05, -4.410743713378906e-06, -2.0265579223632812e-05, -0.0006923675537109375, -0.00213623046875, -0.23095035552978516, -0.001198185607790947, -0.00014925003051757812, -0.0004158932133577764, -5.7220458984375e-05, -0.00021004522568546236, 0.0, -0.00018084049224853516, -1.1920922133867862e-06, -0.0232694149017334, 0.0, -0.0008622173336334527, -0.0008629633230157197, -0.0361272469162941, -1.3709068298339844e-05, 0.0, -4.1961669921875e-05, -0.001194000244140625, 0.0, -0.002355333883315325, -4.649161837733118e-06, -5.91278076171875e-05, -7.62939453125e-05, -1.9073486328125e-06, -1.3709068298339844e-05, 0.0, -7.82012939453125e-05, -0.0001087188720703125, -9.5367431640625e-06, -1.5616416931152344e-05, 0.0, -0.0001834630675148219, -1.71661376953125e-05], "score": -5.77033204193026, "model_output": {"hole4": "player", "hole0": "<UNK>SwampOoze", "hole1": "MinionCard", "hole2": [{"hole0": "Acidic Swamp Ooze", "hole6": [{"_type": "Template46", "hole0": "EnemyPlayer"}], "hole1": 2, "hole2": "COMMON", "_type": "Template6", "hole3": "Destroy", "hole5": "WeaponSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class <UNK>SwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(),\n            WeaponSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Acidic", "Swamp", "Ooze", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 274, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "Destroy", "<EOS>", "Weapon", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-3.4332275390625e-05, -5.340576171875e-05, -0.005135800689458847, -0.16366074979305267, -0.009060001000761986, -0.00018130417447537184, -4.600969987222925e-05, -4.410743713378906e-06, -2.0265579223632812e-05, -0.0006923675537109375, -0.00213623046875, -0.23095035552978516, -0.001198185607790947, -0.00014925003051757812, -0.0004158932133577764, -5.7220458984375e-05, -0.00021004522568546236, 0.0, -0.00018084049224853516, -1.1920922133867862e-06, -5.525478839874268, -2.3841830625315197e-06, -0.001312377629801631, -0.00047913071466609836, -0.08730734884738922, -3.4689903259277344e-05, 0.0, -4.1961669921875e-05, -0.001247406005859375, 0.0, -0.0023038345389068127, -4.5299530029296875e-06, -5.7220458984375e-05, -8.0108642578125e-05, -1.9073486328125e-06, -1.3709068298339844e-05, 0.0, -7.82012939453125e-05, -0.00011444091796875, -9.5367431640625e-06, -1.5616416931152344e-05, 0.0, -0.0001834630675148219, -1.71661376953125e-05], "score": -6.032971733806562, "model_output": {"hole4": "player", "hole0": "AcidicSwampOoze", "hole1": "MinionCard", "hole2": [{"hole0": "Acidic Swamp Ooze", "hole6": [{"_type": "Template46", "hole0": "EnemyPlayer"}], "hole1": 2, "hole2": "FREE", "_type": "Template6", "hole3": "Destroy", "hole5": "WeaponSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, battlecry=Battlecry(Destroy(), WeaponSelector\n            (EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Acidic", "Swamp", "Ooze", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "<UNK>", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Destroy", "Destroy", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-3.4332275390625e-05, -5.340576171875e-05, -0.005135800689458847, -0.16366074979305267, -0.009060001000761986, -0.00018130417447537184, -4.600969987222925e-05, -4.410743713378906e-06, -2.0265579223632812e-05, -0.0006923675537109375, -0.00213623046875, -3.4806222915649414, -0.0937749594449997, -7.259845733642578e-05, -0.040306512266397476, -0.0004655122756958008, -0.0007224004366435111, -3.933906555175781e-06, -0.00017631053924560547, -8.821448318485636e-06, -0.006653175689280033, 0.0, -0.07693988084793091, -1.6037291288375854, -0.0010585633572191, -1.9073486328125e-06, -0.5391092300415039, -0.02760457992553711, -1.9073397197644226e-05, -1.1920928244535389e-07, -0.0003554821014404297, -1.9073486328125e-06, -5.376307308324613e-05, 0.0, -5.7220458984375e-05, -0.000179290771484375, -3.814697265625e-06, -1.537799835205078e-05, -2.3841855067985307e-07, -4.732608067570254e-05, -1.52587890625e-05], "score": -6.053023556471963, "model_output": {"hole4": "player", "hole0": "AcidicSwampOoze", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template63"}], "hole0": "<UNK> Swamp Ooze", "hole1": 2, "hole2": "COMMON", "_type": "Template6", "hole3": "DestroyDestroy", "hole5": "HeroSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(DestroyDestroy(4),\n            HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Acidic", "Swamp", "Ooze", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Destroy", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 321, 86, 244, "2", "<EOS>", 93, 255, "Weapon", "Selector", "<EOS>", "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-3.4332275390625e-05, -5.340576171875e-05, -0.005135800689458847, -0.16366074979305267, -0.009060001000761986, -0.00018130417447537184, -4.600969987222925e-05, -4.410743713378906e-06, -2.0265579223632812e-05, -0.0006923675537109375, -0.00213623046875, -2.5009336471557617, -0.0009801201522350311, -0.00010156631469726562, -0.0005517147947102785, -0.0001926422119140625, -0.001121334033086896, 0.0, -0.0003898104769177735, 0.0, -0.003956198692321777, 0.0, -0.06911227107048035, -0.008415537886321545, -9.5367431640625e-06, -0.3955955505371094, -0.0008869171142578125, -3.62396240234375e-05, -2.86102294921875e-05, -0.2520148754119873, -0.001177668571472168, -0.0007109642028808594, -0.16794681549072266, -0.747370719909668, -0.001026153564453125, -0.3161506950855255, -0.00011134147644042969, -0.02154541015625, -5.7220458984375e-06, -1.1704729795455933, -0.0002057552192127332, -2.1457672119140625e-06, -0.5835558176040649, 0.0, 0.0, -0.000698089599609375, -9.5367431640625e-06, -7.62939453125e-06, -0.03301429748535156, -7.62939453125e-06, -1.9073486328125e-05, 0.0, -0.004369974136352539, -1.33514404296875e-05, -2.47955322265625e-05, -0.000133514404296875, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.0002765655517578125, -0.000164031982421875, -1.33514404296875e-05, -1.5735626220703125e-05, 0.0, -0.00019443030760157853, -7.62939453125e-06], "score": -6.46461853353685, "model_output": {"hole4": "player", "hole0": "AcidicSwampOoze", "hole1": "MinionCard", "hole2": [{"hole4": [{"func": {"_type": "Name", "id": "AuraUntil"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": 2}, {"_type": "Template46", "hole0": "WeaponSelector"}]}], "hole0": "Acidic Swamp Ooze", "hole7": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "players", "_type": "keyword"}], "hole1": 2, "hole2": "COMMON", "_type": "Template6", "hole3": "Destroy", "hole5": "PlayerSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(AuraUntil(\n            ChangeAttack(2), WeaponSelector())), PlayerSelector(players=\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Acidic", "Swamp", "Ooze", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Destroy", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 321, 86, 244, "2", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-3.4332275390625e-05, -5.340576171875e-05, -0.005135800689458847, -0.16366074979305267, -0.009060001000761986, -0.00018130417447537184, -4.600969987222925e-05, -4.410743713378906e-06, -2.0265579223632812e-05, -0.0006923675537109375, -0.00213623046875, -2.5009336471557617, -0.0009801201522350311, -0.00010156631469726562, -0.0005517147947102785, -0.0001926422119140625, -0.001121334033086896, 0.0, -0.0003898104769177735, 0.0, -0.003956198692321777, 0.0, -0.06911227107048035, -0.008415537886321545, -9.5367431640625e-06, -0.3955955505371094, -0.0008869171142578125, -3.62396240234375e-05, -2.86102294921875e-05, -0.2520148754119873, -0.001177668571472168, -0.0007109642028808594, -0.16794681549072266, -0.747370719909668, -0.001026153564453125, -0.3161506950855255, -0.00011134147644042969, -0.02154541015625, -5.7220458984375e-06, -1.4733742475509644, -2.0265473722247407e-05, 0.0, -0.31281936168670654, 0.0, 0.0, -0.011049270629882812, -9.5367431640625e-06, -7.62939453125e-06, -0.1302633285522461, -1.1444091796875e-05, -1.52587890625e-05, 0.0, -0.0037033557891845703, -2.110004425048828e-05, -2.288818359375e-05, -0.0002079010009765625, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.0002765655517578125, -0.000823974609375, -1.33514404296875e-05, -1.3828277587890625e-05, 0.0, -0.00019538398191798478, -7.62939453125e-06], "score": -6.604266613318032, "model_output": {"hole4": "player", "hole0": "AcidicSwampOoze", "hole1": "MinionCard", "hole2": [{"hole4": [{"func": {"_type": "Name", "id": "AuraUntil"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": 2}, {"_type": "Template46", "hole0": "PlayerSelector"}]}], "hole0": "Acidic Swamp Ooze", "hole7": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "players", "_type": "keyword"}], "hole1": 2, "hole2": "COMMON", "_type": "Template6", "hole3": "Destroy", "hole5": "MinionSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(AuraUntil(\n            ChangeAttack(2), PlayerSelector())), MinionSelector(players=\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Acidic", "Swamp", "Ooze", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Destroy", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 321, 86, 244, "2", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-3.4332275390625e-05, -5.340576171875e-05, -0.005135800689458847, -0.16366074979305267, -0.009060001000761986, -0.00018130417447537184, -4.600969987222925e-05, -4.410743713378906e-06, -2.0265579223632812e-05, -0.0006923675537109375, -0.00213623046875, -2.5009336471557617, -0.0009801201522350311, -0.00010156631469726562, -0.0005517147947102785, -0.0001926422119140625, -0.001121334033086896, 0.0, -0.0003898104769177735, 0.0, -0.003956198692321777, 0.0, -0.06911227107048035, -0.008415537886321545, -9.5367431640625e-06, -0.3955955505371094, -0.0008869171142578125, -3.62396240234375e-05, -2.86102294921875e-05, -0.2520148754119873, -0.001177668571472168, -0.0007109642028808594, -0.16794681549072266, -0.747370719909668, -0.001026153564453125, -0.3161506950855255, -0.00011134147644042969, -0.02154541015625, -5.7220458984375e-06, -1.4424570798873901, -5.423930997494608e-05, -5.841255187988281e-06, -0.4465146064758301, 0.0, 0.0, -0.0037784576416015625, -1.52587890625e-05, -7.62939453125e-06, -0.3386192321777344, -1.71661376953125e-05, -2.6702880859375e-05, 0.0, -0.00342404842376709, -1.537799835205078e-05, -2.09808349609375e-05, -0.0001506805419921875, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.000293731689453125, -0.0042095184326171875, -1.33514404296875e-05, -1.3828277587890625e-05, 0.0, -0.0002043246931862086, -7.62939453125e-06], "score": -6.911259977809095, "model_output": {"hole4": "player", "hole0": "AcidicSwampOoze", "hole1": "MinionCard", "hole2": [{"hole4": [{"func": {"_type": "Name", "id": "AuraUntil"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": 2}, {"_type": "Template46", "hole0": "SelfSelector"}]}], "hole0": "Acidic Swamp Ooze", "hole7": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "players", "_type": "keyword"}], "hole1": 2, "hole2": "COMMON", "_type": "Template6", "hole3": "Destroy", "hole5": "MinionSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(AuraUntil(\n            ChangeAttack(2), SelfSelector())), MinionSelector(players=\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Acidic", "Swamp", "Ooze", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Destroy", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 322, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 46, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-3.4332275390625e-05, -5.340576171875e-05, -0.005135800689458847, -0.16366074979305267, -0.009060001000761986, -0.00018130417447537184, -4.600969987222925e-05, -4.410743713378906e-06, -2.0265579223632812e-05, -0.0006923675537109375, -0.00213623046875, -2.5009336471557617, -0.0009801201522350311, -0.00010156631469726562, -0.0005517147947102785, -0.0001926422119140625, -0.001121334033086896, 0.0, -0.0003898104769177735, 0.0, -0.003956198692321777, 0.0, -0.06911227107048035, -0.008415537886321545, -9.5367431640625e-06, -0.3955955505371094, -0.0008869171142578125, -3.62396240234375e-05, -2.86102294921875e-05, -0.2520148754119873, -0.001177668571472168, -0.0007109642028808594, -2.0996599197387695, -0.09717941284179688, -0.0001125335693359375, -5.7220458984375e-06, -7.62939453125e-06, -0.40132153034210205, -0.016060374677181244, -2.956390380859375e-05, -1.9073486328125e-06, -0.06752681732177734, -0.0009975433349609375, -0.003993988037109375, -0.021544456481933594, -0.008832931518554688, -0.000186920166015625, -7.62939453125e-06, -9.5367431640625e-06, -0.0004863739013671875, -0.00099945068359375, 0.0, -0.0048198699951171875, -9.918212890625e-05, -9.5367431640625e-05, -0.0063266754150390625, -3.62396240234375e-05, -0.006712913513183594, -0.0005817413330078125, 0.0, -9.5367431640625e-06, -0.05354809761047363, -0.00027024743030779064, -1.1920928244535389e-07, -7.62939453125e-06, -0.012609481811523438, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.015662193298339844, 0.0, -0.18049728870391846, -0.0015716552734375, -0.0030269622802734375, 0.0, -0.6612178087234497, -3.814697265625e-06, 0.0, -0.6257156133651733, 0.0, 0.0, -0.008022308349609375, -7.62939453125e-06, -7.62939453125e-06, -0.10851669311523438, -2.86102294921875e-05, -2.47955322265625e-05, 0.0, -0.031113743782043457, -4.589557647705078e-05, -3.24249267578125e-05, -0.0002765655517578125, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.0002841949462890625, -0.000152587890625, -1.33514404296875e-05, -1.5735626220703125e-05, 0.0, -0.00018692012235987931, -7.62939453125e-06], "score": -7.857774458498163, "model_output": {"hole4": "player", "hole0": "AcidicSwampOoze", "hole1": "MinionCard", "hole2": [{"hole4": [{"func": {"_type": "Name", "id": "AuraUntil"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ManaChange"}, "_type": "Call", "args": [{"_type": "UnaryOp", "operand": {"_type": "Template60"}, "op": {"_type": "USub"}}]}, {"func": {"_type": "Name", "id": "CardSelector"}, "_type": "Call", "keywords": [{"value": {"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "arg": "condition", "_type": "keyword"}]}, {"_type": "Template46", "hole0": "PlayerSelector"}]}], "hole0": "Acidic Swamp Ooze", "hole7": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "players", "_type": "keyword"}], "hole1": 2, "hole2": "COMMON", "_type": "Template6", "hole3": "Destroy", "hole5": "MinionSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(AuraUntil(\n            ManaChange(-1), CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON)), PlayerSelector())), MinionSelector(players=\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}], "index": 0}
{"beams": [{"choice_history": [121, 200, "Ancestral", "Healing", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Ancestral", " ", "Healing", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "taunt", "<EOS>", 62], "score_history": [-0.11480712890625, -0.0001277923583984375, -3.576278118089249e-07, -4.0172799344873056e-05, -3.3020849514286965e-05, -8.342613000422716e-07, -1.537799835205078e-05, -1.2040138244628906e-05, -0.0007839202880859375, -0.0004405975341796875, -5.7220458984375e-06, -0.0002899169921875, -0.0001697540283203125, -2.6702880859375e-05, -0.000385284423828125, -7.62939453125e-06, -8.96453857421875e-05, -0.00010609064338495955, -0.00011420249938964844, -0.0003664468531496823, -0.00054168701171875, -0.001323699951171875, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0003223419189453125, -1.9073486328125e-05, -0.009366989135742188, -7.62939453125e-06, -0.00028228759765625, -0.0005092620849609375, -3.4332275390625e-05, -9.1552734375e-05, -5.7220458984375e-05, -2.47955322265625e-05, -0.015056610107421875, -3.814697265625e-06, 0.0, -0.00029599666595458984, 0.0, -3.814697265625e-06, -0.0002593994140625, -0.000171661376953125, -0.0016433000564575195, -5.7220458984375e-06, -0.009669303894042969, -0.000156402587890625, -0.000194549560546875, -8.96453857421875e-05, -0.0057392120361328125, -0.022773941978812218, -3.814697265625e-06, -0.00018310546875, -0.0036773681640625, -0.00020599365234375, -0.0008020401000976562, -1.9073486328125e-06, -7.05718994140625e-05, -0.011492484249174595, -3.218649908376392e-06, -1.52587890625e-05, -0.0024738311767578125, -0.000385284423828125, -0.012706756591796875, -0.015820860862731934, -5.7220458984375e-06, -0.013228416442871094, -0.0002841949462890625, -0.0001621246337890625, -2.86102294921875e-05, -0.00135040283203125, -4.38690185546875e-05, -7.43865966796875e-05, -0.038636207580566406, 0.0, -0.0001678466796875], "score": -0.2883312153962265, "model_output": {"hole4": "player", "hole0": "AncestralHealing", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"_type": "Template79"}, "targets": [{"attr": "taunt", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Ancestral Healing", "_type": "Str"}, {"_type": "Template76"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.taunt = True\n"}, {"choice_history": [121, 200, "Ancestral", "Healing", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Ancestral", " ", "Healing", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "taunt", "<EOS>", 62], "score_history": [-0.11480712890625, -0.0001277923583984375, -3.576278118089249e-07, -4.0172799344873056e-05, -3.3020849514286965e-05, -8.342613000422716e-07, -1.537799835205078e-05, -1.2040138244628906e-05, -0.0007839202880859375, -0.0004405975341796875, -5.7220458984375e-06, -0.0002899169921875, -0.0001697540283203125, -2.6702880859375e-05, -0.000385284423828125, -7.62939453125e-06, -8.96453857421875e-05, -0.00010609064338495955, -0.00011420249938964844, -0.0003664468531496823, -0.00054168701171875, -0.001323699951171875, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0003223419189453125, -1.9073486328125e-05, -0.009366989135742188, -7.62939453125e-06, -0.00028228759765625, -0.0005092620849609375, -3.4332275390625e-05, -9.1552734375e-05, -5.7220458984375e-05, -2.47955322265625e-05, -4.324976921081543, -2.86102294921875e-05, -0.00031280517578125, -0.07074356079101562, -6.103515625e-05, -1.33514404296875e-05, 0.0, -9.012222290039062e-05, 0.0, -5.7220458984375e-06, -0.0001392364501953125, -0.0001354217529296875, -0.0011311769485473633, -3.814697265625e-06, -0.011890411376953125, -9.34600830078125e-05, -0.000209808349609375, -0.0001087188720703125, -0.0049991607666015625, -0.032782092690467834, -1.9073486328125e-06, -0.00012969970703125, -0.00385284423828125, -0.0002422332763671875, -0.0010967254638671875, -1.9073486328125e-06, -7.62939453125e-05, -0.011408465914428234, -3.3378591979271732e-06, -1.52587890625e-05, -0.0024671554565429688, -0.0003566741943359375, -0.012152671813964844, -0.018291831016540527, -5.7220458984375e-06, -0.013734817504882812, -0.0002918243408203125, -0.000171661376953125, -2.86102294921875e-05, -0.0013141632080078125, -4.38690185546875e-05, -7.2479248046875e-05, -0.03941917419433594, 0.0, -0.0001678466796875], "score": -4.68351616816193, "model_output": {"hole4": "player", "hole0": "AncestralHealing", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"_type": "Template79"}, "targets": [{"attr": "taunt", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Ancestral Healing", "_type": "Str"}, {"_type": "Template76"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.taunt = True\n"}, {"choice_history": [120, 185, 333, 129, 165, "Ancestral", "Healing", "<EOS>", 320, 108, 333, 136, 197, "Ancestral", " ", "Healing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 37, 249, 25, 186, "target", "<EOS>", "calculate_attack", "<EOS>", 317, 15, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-2.244479179382324, -3.0517578125e-05, -9.5367431640625e-06, -0.000579833984375, -6.103515625e-05, -4.172316494077677e-06, -1.585470999998506e-05, -0.00047122352407313883, -1.33514404296875e-05, -0.0020885467529296875, -5.7220458984375e-06, -0.0003681182861328125, -0.0003337860107421875, -0.00036149643710814416, -0.0012500282609835267, -0.16713052988052368, -0.017403602600097656, -0.11319156736135483, -1.9073486328125e-06, -0.17318248748779297, -3.24249267578125e-05, -0.567718505859375, 0.0, -0.0039806365966796875, 0.0, -0.000919342041015625, -0.5276174545288086, -2.6702880859375e-05, -0.0008068084716796875, 0.0, -0.0018377304077148438, -0.0023031234741210938, -0.0009059906005859375, -9.72747802734375e-05, -0.016063332557678223, -3.814697265625e-06, -0.12035179138183594, -6.866455078125e-05, -0.0030918121337890625, -0.000415802001953125, -0.0016345977783203125, -0.000446319580078125, -0.14525222778320312, -0.002918243408203125, -2.288818359375e-05, -1.52587890625e-05, -0.00022995471954345703, -7.62939453125e-06, -0.021997570991516113, -1.52587890625e-05, -0.0001087188720703125, -0.22050094604492188, -2.288818359375e-05, -0.8459768295288086, -1.1444091796875e-05, -0.002063751220703125, -1.9073486328125e-05, -0.0004558563232421875, -1.1444091796875e-05, -0.02291738986968994, -5.7220458984375e-06, -0.009096145629882812, -0.00011444091796875, -0.0001926422119140625, -5.7220458984375e-06, -0.0034875869750976562, -1.9073486328125e-06, -0.001990079879760742, -0.00032901763916015625, -0.0005931854248046875, -0.0001220703125, -1.52587890625e-05, -1.9073486328125e-06, -0.000156402587890625, -0.0060024261474609375, -0.024967193603515625, -2.47955322265625e-05, -0.0001239776611328125, -6.4849853515625e-05, -0.12496189773082733, -2.09808349609375e-05, -9.34600830078125e-05, -0.0021905899047851562, -3.814697265625e-05], "score": -5.406452407809866, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "LtE"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Ancestral Healing", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 0, "hole2": "PRIEST", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "AncestralHealing"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() <= target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [121, 200, "Ancestral", "Healing", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Ancestral", " ", "Healing", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "Ancestral", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>", 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "score_history": [-0.11480712890625, -0.0001277923583984375, -3.576278118089249e-07, -4.0172799344873056e-05, -3.3020849514286965e-05, -8.342613000422716e-07, -1.537799835205078e-05, -1.2040138244628906e-05, -0.0007839202880859375, -0.0004405975341796875, -5.7220458984375e-06, -0.0002899169921875, -0.0001697540283203125, -2.6702880859375e-05, -0.000385284423828125, -7.62939453125e-06, -8.96453857421875e-05, -0.00010609064338495955, -0.00011420249938964844, -0.0003664468531496823, -0.00054168701171875, -0.001323699951171875, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0003223419189453125, -1.9073486328125e-05, -0.009366989135742188, -7.62939453125e-06, -0.00028228759765625, -0.0005092620849609375, -3.4332275390625e-05, -9.1552734375e-05, -5.7220458984375e-05, -2.47955322265625e-05, -0.015056610107421875, -3.814697265625e-06, 0.0, -0.00029599666595458984, 0.0, -3.814697265625e-06, -0.0002593994140625, -0.000171661376953125, -0.0016433000564575195, -5.7220458984375e-06, -0.009669303894042969, -0.000156402587890625, -0.000194549560546875, -8.96453857421875e-05, -0.0057392120361328125, -4.100207805633545, -4.57763671875e-05, -0.009763717651367188, -0.5967340469360352, -0.00093841552734375, -0.21552124619483948, -0.0062062740325927734, -0.16338539123535156, -4.9591064453125e-05, -0.0010356903076171875, -0.07439267635345459, -0.000141143798828125, -5.53131103515625e-05, -0.02847576141357422, -0.013571739196777344, -0.0011320114135742188, 0.0, -0.00020599365234375, -0.01531487051397562, -6.675716122117592e-06, -1.52587890625e-05, -0.0038366317749023438, -0.0006809234619140625, -0.04032325744628906, -0.05363595485687256, -9.5367431640625e-06, -0.023713111877441406], "score": -5.5131318114067085, "model_output": {"hole4": "player", "hole0": "AncestralHealing", "hole6": [{"_type": "Template19"}, {"hole1": "Ancestral", "hole2": [{"_type": "Template30", "hole0": "<UNK>"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Ancestral Healing", "_type": "Str"}, {"_type": "Template76"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.Ancestral(Buff(<UNK>()))\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n"}, {"choice_history": [121, 200, "Ancestral", "Healing", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Ancestral", " ", "Healing", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "spell_targetable", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "taunt", "<EOS>", 62], "score_history": [-0.11480712890625, -0.0001277923583984375, -3.576278118089249e-07, -4.0172799344873056e-05, -3.3020849514286965e-05, -8.342613000422716e-07, -1.537799835205078e-05, -1.2040138244628906e-05, -0.0007839202880859375, -0.0004405975341796875, -5.7220458984375e-06, -0.0002899169921875, -0.0001697540283203125, -2.6702880859375e-05, -0.000385284423828125, -7.62939453125e-06, -8.96453857421875e-05, -0.00010609064338495955, -0.00011420249938964844, -0.0003664468531496823, -0.00054168701171875, -0.001323699951171875, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0003223419189453125, -1.9073486328125e-05, -0.009366989135742188, -7.62939453125e-06, -0.00028228759765625, -0.0005092620849609375, -3.4332275390625e-05, -9.1552734375e-05, -5.7220458984375e-05, -2.47955322265625e-05, -0.015056610107421875, -3.814697265625e-06, 0.0, -0.00029599666595458984, 0.0, -3.814697265625e-06, -0.0002593994140625, -0.000171661376953125, -0.0016433000564575195, -5.7220458984375e-06, -0.009669303894042969, -0.000156402587890625, -0.000194549560546875, -8.96453857421875e-05, -0.0057392120361328125, -0.022773941978812218, -3.814697265625e-06, -0.00018310546875, -0.0036773681640625, -0.00020599365234375, -0.0008020401000976562, -1.9073486328125e-06, -7.05718994140625e-05, -0.011492484249174595, -3.218649908376392e-06, -1.52587890625e-05, -0.0024738311767578125, -0.000385284423828125, -0.012706756591796875, -5.273396015167236, -2.47955322265625e-05, -0.008435249328613281, -0.0012683868408203125, -0.0001678466796875, -1.52587890625e-05, -0.001377105712890625, -4.00543212890625e-05, -4.57763671875e-05, -0.04188835620880127, 0.0, -0.0001811981201171875], "score": -5.545368616595567, "model_output": {"hole4": "player", "hole0": "AncestralHealing", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"_type": "Template79"}, "targets": [{"attr": "taunt", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Ancestral Healing", "_type": "Str"}, {"_type": "Template76"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            spell_targetable()), self)\n        self.target.taunt = True\n"}, {"choice_history": [121, 200, "Ancestral", "Healing", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Ancestral", " ", "Healing", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "taunt", "<EOS>", 62], "score_history": [-0.11480712890625, -0.0001277923583984375, -3.576278118089249e-07, -4.0172799344873056e-05, -3.3020849514286965e-05, -8.342613000422716e-07, -1.537799835205078e-05, -1.2040138244628906e-05, -0.0007839202880859375, -0.0004405975341796875, -5.7220458984375e-06, -0.0002899169921875, -0.0001697540283203125, -2.6702880859375e-05, -0.000385284423828125, -7.62939453125e-06, -8.96453857421875e-05, -0.00010609064338495955, -0.00011420249938964844, -0.0003664468531496823, -0.00054168701171875, -0.001323699951171875, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0003223419189453125, -1.9073486328125e-05, -5.3010663986206055, -3.814697265625e-06, -0.0002899169921875, -0.000888824462890625, -0.0001087188720703125, -6.67572021484375e-05, -3.24249267578125e-05, -1.9073486328125e-05, -0.0255279541015625, -3.814697265625e-06, 0.0, -0.00019490718841552734, 0.0, -3.814697265625e-06, -0.0002841949462890625, -0.000171661376953125, -0.0016957521438598633, -5.7220458984375e-06, -0.009427070617675781, -0.0001659393310546875, -0.0001983642578125, -8.96453857421875e-05, -0.0055389404296875, -0.022984428331255913, -3.814697265625e-06, -0.0001811981201171875, -0.00377655029296875, -0.000213623046875, -0.0008058547973632812, -1.9073486328125e-06, -7.2479248046875e-05, -0.011504865251481533, -3.218649908376392e-06, -1.52587890625e-05, -0.00247955322265625, -0.0003795623779296875, -0.012848854064941406, -0.016102194786071777, -5.7220458984375e-06, -0.013277053833007812, -0.00028228759765625, -0.0001621246337890625, -2.86102294921875e-05, -0.0013408660888671875, -4.38690185546875e-05, -7.43865966796875e-05, -0.0387115478515625, 0.0, -0.0001697540283203125], "score": -5.591322790026368, "model_output": {"hole4": "player", "hole0": "AncestralHealing", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"_type": "Template79"}, "targets": [{"attr": "taunt", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Ancestral Healing", "_type": "Str"}, {"_type": "Template76"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.taunt = True\n"}, {"choice_history": [121, 200, "Ancestral", "Healing", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Ancestral", " ", "Healing", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "taunt", "<EOS>", 62], "score_history": [-0.11480712890625, -0.0001277923583984375, -3.576278118089249e-07, -4.0172799344873056e-05, -3.3020849514286965e-05, -8.342613000422716e-07, -1.537799835205078e-05, -1.2040138244628906e-05, -0.0007839202880859375, -0.0004405975341796875, -5.7220458984375e-06, -0.0002899169921875, -0.0001697540283203125, -2.6702880859375e-05, -0.000385284423828125, -7.62939453125e-06, -8.96453857421875e-05, -0.00010609064338495955, -0.00011420249938964844, -0.0003664468531496823, -0.00054168701171875, -0.001323699951171875, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0003223419189453125, -1.9073486328125e-05, -0.009366989135742188, -7.62939453125e-06, -0.00028228759765625, -0.0005092620849609375, -3.4332275390625e-05, -9.1552734375e-05, -5.7220458984375e-05, -2.47955322265625e-05, -0.015056610107421875, -3.814697265625e-06, 0.0, -0.00029599666595458984, 0.0, -3.814697265625e-06, -0.0002593994140625, -0.000171661376953125, -0.0016433000564575195, -5.7220458984375e-06, -0.009669303894042969, -0.000156402587890625, -0.000194549560546875, -8.96453857421875e-05, -0.0057392120361328125, -0.022773941978812218, -3.814697265625e-06, -0.00018310546875, -0.0036773681640625, -0.00020599365234375, -0.0008020401000976562, -1.9073486328125e-06, -7.05718994140625e-05, -0.011492484249174595, -3.218649908376392e-06, -1.52587890625e-05, -0.0024738311767578125, -0.000385284423828125, -0.012706756591796875, -5.386732578277588, -1.9073486328125e-06, -0.010569572448730469, -0.00070953369140625, -0.0001678466796875, -3.24249267578125e-05, -0.0013294219970703125, -5.91278076171875e-05, -5.53131103515625e-05, -0.04912281036376953, 0.0, -0.000217437744140625], "score": -5.667526547923387, "model_output": {"hole4": "player", "hole0": "AncestralHealing", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"_type": "Template79"}, "targets": [{"attr": "taunt", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Ancestral Healing", "_type": "Str"}, {"_type": "Template76"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_attack()), self)\n        self.target.taunt = True\n"}, {"choice_history": [121, 200, "Ancestral", "Healing", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Ancestral", " ", "Healing", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "draw", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "taunt", "<EOS>", 62], "score_history": [-0.11480712890625, -0.0001277923583984375, -3.576278118089249e-07, -4.0172799344873056e-05, -3.3020849514286965e-05, -8.342613000422716e-07, -1.537799835205078e-05, -1.2040138244628906e-05, -0.0007839202880859375, -0.0004405975341796875, -5.7220458984375e-06, -0.0002899169921875, -0.0001697540283203125, -2.6702880859375e-05, -0.000385284423828125, -7.62939453125e-06, -8.96453857421875e-05, -0.00010609064338495955, -0.00011420249938964844, -0.0003664468531496823, -0.00054168701171875, -0.001323699951171875, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0003223419189453125, -1.9073486328125e-05, -0.009366989135742188, -7.62939453125e-06, -0.00028228759765625, -0.0005092620849609375, -3.4332275390625e-05, -9.1552734375e-05, -5.7220458984375e-05, -2.47955322265625e-05, -0.015056610107421875, -3.814697265625e-06, 0.0, -0.00029599666595458984, 0.0, -3.814697265625e-06, -0.0002593994140625, -0.000171661376953125, -0.0016433000564575195, -5.7220458984375e-06, -0.009669303894042969, -0.000156402587890625, -0.000194549560546875, -8.96453857421875e-05, -0.0057392120361328125, -0.022773941978812218, -3.814697265625e-06, -0.00018310546875, -0.0036773681640625, -0.00020599365234375, -0.0008020401000976562, -1.9073486328125e-06, -7.05718994140625e-05, -5.429195880889893, -5.841255187988281e-06, -4.57763671875e-05, -0.007159233093261719, -0.000232696533203125, -0.0191497802734375, -0.029662370681762695, -7.62939453125e-06, -0.018320083618164062, -0.0003681182861328125, -0.000152587890625, -2.86102294921875e-05, -0.00157928466796875, -3.4332275390625e-05, -7.43865966796875e-05, -0.035854339599609375, 0.0, -0.00016021728515625], "score": -5.73348290858479, "model_output": {"hole4": "player", "hole0": "AncestralHealing", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "draw", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"_type": "Template79"}, "targets": [{"attr": "taunt", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Ancestral Healing", "_type": "Str"}, {"_type": "Template76"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.draw(self.target.calculate_max_health()), self)\n        self.target.taunt = True\n"}, {"choice_history": [121, 200, "Ancestral", "Healing", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Ancestral", " ", "Healing", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "player", "<EOS>", 26, 187, "Null", "<EOS>"], "score_history": [-0.11480712890625, -0.0001277923583984375, -3.576278118089249e-07, -4.0172799344873056e-05, -3.3020849514286965e-05, -8.342613000422716e-07, -1.537799835205078e-05, -1.2040138244628906e-05, -0.0007839202880859375, -0.0004405975341796875, -5.7220458984375e-06, -0.0002899169921875, -0.0001697540283203125, -2.6702880859375e-05, -0.000385284423828125, -7.62939453125e-06, -8.96453857421875e-05, -0.00010609064338495955, -0.00011420249938964844, -0.0003664468531496823, -0.00054168701171875, -0.001323699951171875, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0003223419189453125, -1.9073486328125e-05, -0.009366989135742188, -7.62939453125e-06, -0.00028228759765625, -0.0005092620849609375, -3.4332275390625e-05, -9.1552734375e-05, -5.7220458984375e-05, -2.47955322265625e-05, -0.015056610107421875, -3.814697265625e-06, 0.0, -0.00029599666595458984, 0.0, -3.814697265625e-06, -0.0002593994140625, -0.000171661376953125, -0.0016433000564575195, -5.7220458984375e-06, -0.009669303894042969, -0.000156402587890625, -0.000194549560546875, -8.96453857421875e-05, -0.0057392120361328125, -0.022773941978812218, -3.814697265625e-06, -0.00018310546875, -0.0036773681640625, -0.00020599365234375, -0.0008020401000976562, -1.9073486328125e-06, -7.05718994140625e-05, -0.011492484249174595, -3.218649908376392e-06, -1.52587890625e-05, -0.0024738311767578125, -0.000385284423828125, -0.012706756591796875, -0.015820860862731934, -5.7220458984375e-06, -0.013228416442871094, -0.0002841949462890625, -0.0001621246337890625, -2.86102294921875e-05, -0.00135040283203125, -4.38690185546875e-05, -7.43865966796875e-05, -5.108993053436279, 0.0, -0.4367341995239258, -0.000354766845703125, -3.814697265625e-06, -1.9073486328125e-06], "score": -5.795614902987779, "model_output": {"hole4": "player", "hole0": "AncestralHealing", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"value": "Null", "_type": "NameConstant"}, "targets": [{"attr": "player", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Ancestral Healing", "_type": "Str"}, {"_type": "Template76"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.player = Null\n"}, {"choice_history": [121, 200, "Ancestral", "Healing", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Ancestral", " ", "Healing", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "deathrattle", "<EOS>", 26, 187, "Null", "<EOS>"], "score_history": [-0.11480712890625, -0.0001277923583984375, -3.576278118089249e-07, -4.0172799344873056e-05, -3.3020849514286965e-05, -8.342613000422716e-07, -1.537799835205078e-05, -1.2040138244628906e-05, -0.0007839202880859375, -0.0004405975341796875, -5.7220458984375e-06, -0.0002899169921875, -0.0001697540283203125, -2.6702880859375e-05, -0.000385284423828125, -7.62939453125e-06, -8.96453857421875e-05, -0.00010609064338495955, -0.00011420249938964844, -0.0003664468531496823, -0.00054168701171875, -0.001323699951171875, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0003223419189453125, -1.9073486328125e-05, -0.009366989135742188, -7.62939453125e-06, -0.00028228759765625, -0.0005092620849609375, -3.4332275390625e-05, -9.1552734375e-05, -5.7220458984375e-05, -2.47955322265625e-05, -0.015056610107421875, -3.814697265625e-06, 0.0, -0.00029599666595458984, 0.0, -3.814697265625e-06, -0.0002593994140625, -0.000171661376953125, -0.0016433000564575195, -5.7220458984375e-06, -0.009669303894042969, -0.000156402587890625, -0.000194549560546875, -8.96453857421875e-05, -0.0057392120361328125, -0.022773941978812218, -3.814697265625e-06, -0.00018310546875, -0.0036773681640625, -0.00020599365234375, -0.0008020401000976562, -1.9073486328125e-06, -7.05718994140625e-05, -0.011492484249174595, -3.218649908376392e-06, -1.52587890625e-05, -0.0024738311767578125, -0.000385284423828125, -0.012706756591796875, -0.015820860862731934, -5.7220458984375e-06, -0.013228416442871094, -0.0002841949462890625, -0.0001621246337890625, -2.86102294921875e-05, -0.00135040283203125, -4.38690185546875e-05, -7.43865966796875e-05, -4.60671854019165, -5.7220458984375e-06, -0.939204216003418, -0.000858306884765625, -7.62939453125e-06, 0.0], "score": -5.796321575656236, "model_output": {"hole4": "player", "hole0": "AncestralHealing", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"value": "Null", "_type": "NameConstant"}, "targets": [{"attr": "deathrattle", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Ancestral Healing", "_type": "Str"}, {"_type": "Template76"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.deathrattle = Null\n"}, {"choice_history": [120, 185, 333, 129, 165, "Ancestral", "Healing", "<EOS>", 320, 108, 333, 136, 197, "Ancestral", " ", "Healing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 37, 249, 25, 186, "target", "<EOS>", "calculate_attack", "<EOS>", 317, 15, 320, 104, 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-2.244479179382324, -3.0517578125e-05, -9.5367431640625e-06, -0.000579833984375, -6.103515625e-05, -4.172316494077677e-06, -1.585470999998506e-05, -0.00047122352407313883, -1.33514404296875e-05, -0.0020885467529296875, -5.7220458984375e-06, -0.0003681182861328125, -0.0003337860107421875, -0.00036149643710814416, -0.0012500282609835267, -0.16713052988052368, -0.017403602600097656, -0.11319156736135483, -1.9073486328125e-06, -0.17318248748779297, -3.24249267578125e-05, -0.567718505859375, 0.0, -0.0039806365966796875, 0.0, -0.000919342041015625, -0.5276174545288086, -2.6702880859375e-05, -0.0008068084716796875, 0.0, -0.0018377304077148438, -0.0023031234741210938, -0.0009059906005859375, -9.72747802734375e-05, -0.016063332557678223, -3.814697265625e-06, -0.12035179138183594, -6.866455078125e-05, -0.0030918121337890625, -0.000415802001953125, -0.0016345977783203125, -0.000446319580078125, -0.14525222778320312, -0.002918243408203125, -2.288818359375e-05, -1.52587890625e-05, -0.00022995471954345703, -7.62939453125e-06, -0.021997570991516113, -1.52587890625e-05, -0.0001087188720703125, -0.22050094604492188, -2.288818359375e-05, -0.7072439193725586, -0.0034437179565429688, -0.0002460479736328125, -0.00058746337890625, -3.814697265625e-06, -0.00026702880859375, -5.7220458984375e-06, -0.6090832948684692, -5.14984130859375e-05, -0.0013523101806640625, -0.000518798828125, -1.9073486328125e-06, -1.9073486328125e-06, -9.918212890625e-05, -0.0021915435791015625, -0.030237197875976562, -2.09808349609375e-05, -0.00019073486328125, -8.392333984375e-05, -0.09197643399238586, -2.86102294921875e-05, -8.392333984375e-05, -0.002201080322265625, -4.1961669921875e-05], "score": -5.810359215113294, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "LtE"}], "comparators": [{"_type": "Template61"}], "_type": "Compare", "left": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Ancestral Healing", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 0, "hole2": "PRIEST", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "AncestralHealing"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() <= 3 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [121, 200, "Ancestral", "Healing", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Ancestral", " ", "Healing", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "deathrattle", "<EOS>", 62], "score_history": [-0.11480712890625, -0.0001277923583984375, -3.576278118089249e-07, -4.0172799344873056e-05, -3.3020849514286965e-05, -8.342613000422716e-07, -1.537799835205078e-05, -1.2040138244628906e-05, -0.0007839202880859375, -0.0004405975341796875, -5.7220458984375e-06, -0.0002899169921875, -0.0001697540283203125, -2.6702880859375e-05, -0.000385284423828125, -7.62939453125e-06, -8.96453857421875e-05, -0.00010609064338495955, -0.00011420249938964844, -0.0003664468531496823, -0.00054168701171875, -0.001323699951171875, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0003223419189453125, -1.9073486328125e-05, -0.009366989135742188, -7.62939453125e-06, -0.00028228759765625, -0.0005092620849609375, -3.4332275390625e-05, -9.1552734375e-05, -5.7220458984375e-05, -2.47955322265625e-05, -0.015056610107421875, -3.814697265625e-06, 0.0, -0.00029599666595458984, 0.0, -3.814697265625e-06, -0.0002593994140625, -0.000171661376953125, -0.0016433000564575195, -5.7220458984375e-06, -0.009669303894042969, -0.000156402587890625, -0.000194549560546875, -8.96453857421875e-05, -0.0057392120361328125, -0.022773941978812218, -3.814697265625e-06, -0.00018310546875, -0.0036773681640625, -0.00020599365234375, -0.0008020401000976562, -1.9073486328125e-06, -7.05718994140625e-05, -0.011492484249174595, -3.218649908376392e-06, -1.52587890625e-05, -0.0024738311767578125, -0.000385284423828125, -0.012706756591796875, -0.015820860862731934, -5.7220458984375e-06, -0.013228416442871094, -0.0002841949462890625, -0.0001621246337890625, -2.86102294921875e-05, -0.00135040283203125, -4.38690185546875e-05, -7.43865966796875e-05, -4.60671854019165, -5.7220458984375e-06, -1.082737922668457], "score": -5.9389893460419785, "model_output": {"hole4": "player", "hole0": "AncestralHealing", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"_type": "Template79"}, "targets": [{"attr": "deathrattle", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Ancestral Healing", "_type": "Str"}, {"_type": "Template76"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.deathrattle = True\n"}, {"choice_history": [121, 200, "Ancestral", "Healing", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Ancestral", " ", "Healing", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 17, 156, 50, "hero", "<EOS>", "calculate_attack", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "taunt", "<EOS>", 62], "score_history": [-0.11480712890625, -0.0001277923583984375, -3.576278118089249e-07, -4.0172799344873056e-05, -3.3020849514286965e-05, -8.342613000422716e-07, -1.537799835205078e-05, -1.2040138244628906e-05, -0.0007839202880859375, -0.0004405975341796875, -5.7220458984375e-06, -0.0002899169921875, -0.0001697540283203125, -2.6702880859375e-05, -0.000385284423828125, -7.62939453125e-06, -8.96453857421875e-05, -0.00010609064338495955, -0.00011420249938964844, -0.0003664468531496823, -0.00054168701171875, -0.001323699951171875, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0003223419189453125, -1.9073486328125e-05, -0.009366989135742188, -7.62939453125e-06, -0.00028228759765625, -0.0005092620849609375, -3.4332275390625e-05, -9.1552734375e-05, -5.7220458984375e-05, -2.47955322265625e-05, -0.015056610107421875, -3.814697265625e-06, 0.0, -0.00029599666595458984, 0.0, -3.814697265625e-06, -0.0002593994140625, -0.000171661376953125, -0.0016433000564575195, -5.7220458984375e-06, -0.009669303894042969, -0.000156402587890625, -0.000194549560546875, -8.96453857421875e-05, -0.0057392120361328125, -0.022773941978812218, -3.814697265625e-06, -0.00018310546875, -0.0036773681640625, -0.00020599365234375, -0.0008020401000976562, -1.9073486328125e-06, -7.05718994140625e-05, -0.011492484249174595, -3.218649908376392e-06, -1.52587890625e-05, -0.0024738311767578125, -0.000385284423828125, -4.914059638977051, 0.0, -0.7353830337524414, -0.04862391948699951, -5.7220458984375e-06, -0.0974736213684082, 0.0, -0.0058574676513671875, -0.0009403228759765625, -1.71661376953125e-05, -2.47955322265625e-05, -0.0002460479736328125, -4.76837158203125e-05, -8.7738037109375e-05, -0.08732414245605469, 0.0, -0.000164031982421875], "score": -6.096077148928941, "model_output": {"hole4": "player", "hole0": "AncestralHealing", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_attack", "_type": "Template43", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"_type": "Template79"}, "targets": [{"attr": "taunt", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Ancestral Healing", "_type": "Str"}, {"_type": "Template76"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(player.hero.\n            calculate_attack()), self)\n        self.target.taunt = True\n"}, {"choice_history": [121, 200, "Ancestral", "Healing", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Ancestral", " ", "Healing", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "card", "<EOS>", 62], "score_history": [-0.11480712890625, -0.0001277923583984375, -3.576278118089249e-07, -4.0172799344873056e-05, -3.3020849514286965e-05, -8.342613000422716e-07, -1.537799835205078e-05, -1.2040138244628906e-05, -0.0007839202880859375, -0.0004405975341796875, -5.7220458984375e-06, -0.0002899169921875, -0.0001697540283203125, -2.6702880859375e-05, -0.000385284423828125, -7.62939453125e-06, -8.96453857421875e-05, -0.00010609064338495955, -0.00011420249938964844, -0.0003664468531496823, -0.00054168701171875, -0.001323699951171875, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0003223419189453125, -1.9073486328125e-05, -0.009366989135742188, -7.62939453125e-06, -0.00028228759765625, -0.0005092620849609375, -3.4332275390625e-05, -9.1552734375e-05, -5.7220458984375e-05, -2.47955322265625e-05, -0.015056610107421875, -3.814697265625e-06, 0.0, -0.00029599666595458984, 0.0, -3.814697265625e-06, -0.0002593994140625, -0.000171661376953125, -0.0016433000564575195, -5.7220458984375e-06, -0.009669303894042969, -0.000156402587890625, -0.000194549560546875, -8.96453857421875e-05, -0.0057392120361328125, -0.022773941978812218, -3.814697265625e-06, -0.00018310546875, -0.0036773681640625, -0.00020599365234375, -0.0008020401000976562, -1.9073486328125e-06, -7.05718994140625e-05, -0.011492484249174595, -3.218649908376392e-06, -1.52587890625e-05, -0.0024738311767578125, -0.000385284423828125, -0.012706756591796875, -0.015820860862731934, -5.7220458984375e-06, -0.013228416442871094, -0.0002841949462890625, -0.0001621246337890625, -2.86102294921875e-05, -0.00135040283203125, -4.38690185546875e-05, -7.43865966796875e-05, -5.320102691650391, 0.0, -0.7050161361694336], "score": -6.274645988955797, "model_output": {"hole4": "player", "hole0": "AncestralHealing", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"_type": "Template79"}, "targets": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Ancestral Healing", "_type": "Str"}, {"_type": "Template76"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.card = True\n"}, {"choice_history": [120, 185, 333, 129, 165, "Ancestral", "Healing", "<EOS>", 320, 108, 333, 136, 197, "Ancestral", " ", "Healing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 37, 249, 25, 186, "target", "<EOS>", "calculate_attack", "<EOS>", 317, 15, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-2.244479179382324, -3.0517578125e-05, -9.5367431640625e-06, -0.000579833984375, -6.103515625e-05, -4.172316494077677e-06, -1.585470999998506e-05, -0.00047122352407313883, -1.33514404296875e-05, -0.0020885467529296875, -5.7220458984375e-06, -0.0003681182861328125, -0.0003337860107421875, -0.00036149643710814416, -0.0012500282609835267, -0.16713052988052368, -0.017403602600097656, -0.11319156736135483, -1.9073486328125e-06, -0.17318248748779297, -3.24249267578125e-05, -1.5152254104614258, 0.0, -0.006277203559875488, 0.0, -0.00075531005859375, -0.5004377365112305, -3.4332275390625e-05, -0.000823974609375, -1.9073486328125e-06, -0.0018939971923828125, -0.00235748291015625, -0.00087738037109375, -0.0001049041748046875, -0.015332578681409359, -3.814697265625e-06, -0.12613296508789062, -6.67572021484375e-05, -0.002960205078125, -0.0004177093505859375, -0.001766204833984375, -0.0004520416259765625, -0.14453125, -0.00289154052734375, -2.09808349609375e-05, -1.52587890625e-05, -0.00022804737091064453, -7.62939453125e-06, -0.021900057792663574, -1.52587890625e-05, -0.0001068115234375, -0.2204303741455078, -2.47955322265625e-05, -0.834965705871582, -1.1444091796875e-05, -0.001918792724609375, -1.9073486328125e-05, -0.00043773651123046875, -1.1444091796875e-05, -0.023349285125732422, -5.7220458984375e-06, -0.009128570556640625, -0.00011444091796875, -0.0001888275146484375, -5.7220458984375e-06, -0.0035142898559570312, -1.9073486328125e-06, -0.001990079879760742, -0.00032711029052734375, -0.000591278076171875, -0.0001220703125, -1.52587890625e-05, -1.9073486328125e-06, -0.000156402587890625, -0.0060214996337890625, -0.0249786376953125, -2.47955322265625e-05, -0.0001239776611328125, -6.4849853515625e-05, -0.12605342268943787, -2.09808349609375e-05, -9.34600830078125e-05, -0.002193450927734375, -3.814697265625e-05], "score": -6.3235991343212845, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "LtE"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Ancestral Healing", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 0, "hole2": "PRIEST", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "AncestralHealing"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() <= target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}], "index": 1}
{"beams": [{"choice_history": [121, 201, "Animal", "Companion", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 23, 181, 323, 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Leokk", "<EOS>", 105, 126, 155, 320, 73, 186, "card", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 111], "score_history": [-2.09808349609375e-05, -0.014146804809570312, -0.00027021096320822835, -7.629378160345368e-06, -0.0003668637073133141, 0.0, -2.3126602172851562e-05, -4.0531158447265625e-06, -1.33514404296875e-05, -0.0045642852783203125, -7.2479248046875e-05, -8.511180931236595e-05, -3.600116178859025e-05, -6.198883056640625e-06, 0.0, -8.344646857949556e-07, 0.0, -0.0071260929107666016, 0.0, -0.0002613067626953125, 0.0, -0.00010037422180175781, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -8.118152618408203e-05, 0.0, -0.0055027008056640625, -0.0005397796630859375, -0.007096290588378906, -7.62939453125e-06, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000704646110534668, -2.3841855067985307e-07, -0.02173614501953125, -0.000659942626953125, -0.016611099243164062, -0.0028400421142578125, -2.288818359375e-05, -0.002376556396484375, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.1471710205078125, -1.33514404296875e-05, -0.020325660705566406, -0.002390742301940918, -0.0004119873046875, -0.0009404420852661133, -7.62939453125e-06, -0.004546165466308594, -3.814697265625e-06, -0.2891206741333008, -1.1444091796875e-05, -0.0034666061401367188, -1.71661376953125e-05, -0.0003509521484375, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -0.45298099517822266, -5.7220458984375e-06, -0.008358955383300781, -0.001508949906565249, -0.00020599365234375, -0.0002866983413696289, -3.814697265625e-06, -0.00682818703353405, -1.1920928244535389e-07, -0.7210012078285217, -0.000244140625, -0.05063152313232422, -1.71661376953125e-05, -0.0011310577392578125, -1.9073486328125e-06, -0.000530242919921875, -5.7220458984375e-06, -0.2567710876464844, -0.0014952417695894837, -0.0001068115234375, -0.004508376121520996, -1.9073486328125e-06, -1.0993237495422363, -6.103515625e-05, -0.025146484375, -0.0020751953125, 0.0, -3.814697265625e-06, -0.0002231597900390625, -1.9073486328125e-06, -0.001232743263244629, -5.6028297876764555e-06, -8.392333984375e-05, -3.24249267578125e-05, -3.814697265625e-06, 0.0, -0.00511932373046875, -1.9073486328125e-06, -0.00014197824930306524, -2.0265558760002023e-06, -0.004611372947692871, -1.1920922133867862e-06, -1.33514404296875e-05, -0.000415802001953125, -3.814697265625e-06, -0.004222869873046875, -5.960462772236497e-07, -0.07546234130859375, -0.0005207061767578125, -0.0030364990234375, -3.814697265625e-06, -0.006894111633300781, -2.2649765014648438e-06, -0.000951169291511178, 0.0, -4.76837158203125e-05, -0.0004825592041015625, -0.00074005126953125, 0.0, -0.000377655029296875, -0.0009098052978515625, 0.0, -7.2479248046875e-05, -7.05718994140625e-05, -1.9073486328125e-06, 0.0, -0.00029027462005615234, 0.0, -3.814697265625e-06, -9.918212890625e-05, -1.9073486328125e-06, -8.20159912109375e-05, -4.8279751354129985e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.001819610595703125, -1.1444091796875e-05, -0.00024259058409370482, -1.33514404296875e-05, -0.000713348388671875, -7.43865966796875e-05, -0.00048828125, -8.58306884765625e-05, -0.0002231597900390625, -0.000164031982421875, -0.0010585784912109375, -0.006161689758300781, -5.7220458984375e-05, -1.1444091796875e-05, -1.9073486328125e-05, -0.0001373291015625, -0.0002319812774658203, -9.655952453613281e-06, -6.783008575439453e-05, 0.0, -0.000118255615234375, 0.0, -0.0003681182861328125, 0.0, -0.00231170654296875, -4.9591064453125e-05, -0.0007801055908203125, -7.05718994140625e-05, 0.0, 0.0, -0.00014150142669677734, 0.0, -7.62939453125e-06, -0.000110626220703125, 0.0, -0.0004215240478515625, -0.00022280198754742742, -1.9073486328125e-06, -5.7220458984375e-06, -0.001064300537109375, -9.5367431640625e-06, -0.0011444091796875], "score": -3.312403868599084, "model_output": {"hole4": "player", "hole0": "AnimalCompanion", "hole7": [{"body": [{"value": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use", "args": {"_type": "Template17"}}], "hole6": [{"_type": "Template19"}, {"value": {"_type": "List", "elts": [{"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Misha", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Leokk", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"_type": "Template62_expr_seq"}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "<UNK>"}]}, "targets": [{"_type": "Name", "id": "card"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "card"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template14", "hole0": "Animal Companion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Misha(), hearthbreaker.cards.minions.Leokk()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n"}, {"choice_history": [121, 201, "Animal", "Companion", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 23, 181, 323, 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Leokk", "<EOS>", 105, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "<UNK>", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 111], "score_history": [-2.09808349609375e-05, -0.014146804809570312, -0.00027021096320822835, -7.629378160345368e-06, -0.0003668637073133141, 0.0, -2.3126602172851562e-05, -4.0531158447265625e-06, -1.33514404296875e-05, -0.0045642852783203125, -7.2479248046875e-05, -8.511180931236595e-05, -3.600116178859025e-05, -6.198883056640625e-06, 0.0, -8.344646857949556e-07, 0.0, -0.0071260929107666016, 0.0, -0.0002613067626953125, 0.0, -0.00010037422180175781, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -8.118152618408203e-05, 0.0, -0.0055027008056640625, -0.0005397796630859375, -0.007096290588378906, -7.62939453125e-06, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000704646110534668, -2.3841855067985307e-07, -0.02173614501953125, -0.000659942626953125, -0.016611099243164062, -0.0028400421142578125, -2.288818359375e-05, -0.002376556396484375, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.1471710205078125, -1.33514404296875e-05, -0.020325660705566406, -0.002390742301940918, -0.0004119873046875, -0.0009404420852661133, -7.62939453125e-06, -0.004546165466308594, -3.814697265625e-06, -0.2891206741333008, -1.1444091796875e-05, -0.0034666061401367188, -1.71661376953125e-05, -0.0003509521484375, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -0.45298099517822266, -5.7220458984375e-06, -0.008358955383300781, -0.001508949906565249, -0.00020599365234375, -0.0002866983413696289, -3.814697265625e-06, -0.00682818703353405, -1.1920928244535389e-07, -0.9321065545082092, -0.000102996826171875, -0.008100509643554688, -0.6337041854858398, -1.9073486328125e-06, -0.17239093780517578, -1.9073486328125e-06, -0.1664133071899414, -3.24249267578125e-05, -0.002484440803527832, -5.960462772236497e-07, -0.09486459940671921, -3.4927710657939315e-05, -0.10938199609518051, 0.0, -0.00020599365234375, 0.0, -0.017425537109375, 0.0, -0.24308645725250244, -1.5497195136049413e-06, -0.004014849662780762, 0.0, -8.20159912109375e-05, -0.00095367431640625, -0.007373809814453125, 0.0, -0.0004119873046875, -0.0005276203155517578, 0.0, -7.62939453125e-05, -0.0001010894775390625, -5.7220458984375e-06, 0.0, -0.0002714395523071289, -1.1920928244535389e-07, -1.1444091796875e-05, -7.43865966796875e-05, 0.0, -0.0003871917724609375, -0.00010037420724984258, -1.9073486328125e-06, -0.10321426391601562, 0.0, -0.28377723693847656, 0.0, -0.08980035781860352, -3.814697265625e-06, -0.012943029403686523, 0.0, -6.67572021484375e-05, -0.000499725341796875, -0.007986068725585938, -1.9073486328125e-06, -0.0003910064697265625, -0.00032520294189453125, 0.0, -6.103515625e-05, -0.00012969970703125, -5.7220458984375e-06, 0.0, -0.0003496408462524414, 0.0, -1.1444091796875e-05, -7.62939453125e-05, 0.0, -0.0002002716064453125, -0.00018763540720101446, -1.9073486328125e-06, -6.29425048828125e-05, -0.0023479461669921875, -1.33514404296875e-05, -0.0005444270209409297, -1.1444091796875e-05, -0.00496673583984375, -5.7220458984375e-05, -0.000476837158203125, -0.00011444091796875, -0.000179290771484375, -0.0001354217529296875, -0.00080108642578125, -0.005970001220703125, -6.4849853515625e-05, -1.1444091796875e-05, -1.9073486328125e-05, -0.000118255615234375, -0.00023365020751953125, -1.1563301086425781e-05, -6.794929504394531e-05, 0.0, -0.000156402587890625, 0.0, -0.000316619873046875, 0.0, -0.002452850341796875, -6.103515625e-05, -0.0007114410400390625, -6.103515625e-05, 0.0, 0.0, -0.00014352798461914062, 0.0, -7.62939453125e-06, -0.0001087188720703125, 0.0, -0.0001621246337890625, -0.00039684755029156804, -1.9073486328125e-06, -3.814697265625e-06, -0.00098419189453125, -9.5367431640625e-06, -0.001186370849609375], "score": -3.9423536319045667, "model_output": {"hole4": "player", "hole0": "AnimalCompanion", "hole7": [{"body": [{"value": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use", "args": {"_type": "Template17"}}], "hole6": [{"_type": "Template19"}, {"value": {"_type": "List", "elts": [{"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Leokk", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"_type": "Template62_expr_seq"}, {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "<UNK>"}}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "card"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template14", "hole0": "Animal Companion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Leokk(), game.other_player.minions]\n        <UNK>.summon(player, player.game, len(player.minions))\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n"}, {"choice_history": [121, 201, "Animal", "Companion", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 23, 181, 323, 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Leokk", "<EOS>", 105, 126, 155, 320, 73, 186, "card", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 111], "score_history": [-2.09808349609375e-05, -0.014146804809570312, -0.00027021096320822835, -7.629378160345368e-06, -0.0003668637073133141, 0.0, -2.3126602172851562e-05, -4.0531158447265625e-06, -1.33514404296875e-05, -0.0045642852783203125, -7.2479248046875e-05, -8.511180931236595e-05, -3.600116178859025e-05, -6.198883056640625e-06, 0.0, -8.344646857949556e-07, 0.0, -0.0071260929107666016, 0.0, -0.0002613067626953125, 0.0, -0.00010037422180175781, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -8.118152618408203e-05, 0.0, -0.0055027008056640625, -0.0005397796630859375, -0.007096290588378906, -7.62939453125e-06, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000704646110534668, -2.3841855067985307e-07, -0.02173614501953125, -0.000659942626953125, -0.016611099243164062, -0.0028400421142578125, -2.288818359375e-05, -0.002376556396484375, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.1471710205078125, -1.33514404296875e-05, -0.020325660705566406, -0.002390742301940918, -0.0004119873046875, -0.0009404420852661133, -7.62939453125e-06, -0.004546165466308594, -3.814697265625e-06, -0.2891206741333008, -1.1444091796875e-05, -0.0034666061401367188, -1.71661376953125e-05, -0.0003509521484375, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -0.45298099517822266, -5.7220458984375e-06, -0.008358955383300781, -0.001508949906565249, -0.00020599365234375, -0.0002866983413696289, -3.814697265625e-06, -0.00682818703353405, -1.1920928244535389e-07, -0.7210012078285217, -0.000244140625, -0.05063152313232422, -1.71661376953125e-05, -0.0011310577392578125, -1.9073486328125e-06, -0.000530242919921875, -5.7220458984375e-06, -1.5887937545776367, -5.7220458984375e-06, -0.011836051940917969, -0.0018694349564611912, -0.0003376007080078125, -0.0003809928894042969, -5.7220458984375e-06, -0.009871110320091248, -2.3841855067985307e-07, -0.8303291201591492, -6.4849853515625e-05, -0.005267143249511719, -0.001041412353515625, 0.0, -1.9073486328125e-06, -8.392333984375e-05, -1.9073486328125e-06, -0.0010222196578979492, -7.867804924899247e-06, -0.0001068115234375, -4.00543212890625e-05, -3.814697265625e-06, 0.0, -0.0057353973388671875, -1.9073486328125e-06, -0.00012540817260742188, -1.9073468138230965e-06, -0.0051048994064331055, -1.311301275563892e-06, -1.33514404296875e-05, -0.0003509521484375, -1.9073486328125e-06, -0.0047359466552734375, -4.768370445162873e-07, -0.07773208618164062, -0.0005207061767578125, -0.0029544830322265625, -3.814697265625e-06, -0.0069293975830078125, -2.2649765014648438e-06, -0.0009671433363109827, 0.0, -4.76837158203125e-05, -0.0004863739013671875, -0.000728607177734375, 0.0, -0.000377655029296875, -0.00091552734375, 0.0, -7.2479248046875e-05, -7.2479248046875e-05, -1.9073486328125e-06, 0.0, -0.00028455257415771484, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -1.9073486328125e-06, -8.392333984375e-05, -4.8279751354129985e-05, -1.9073486328125e-06, -9.34600830078125e-05, -0.0018215179443359375, -1.1444091796875e-05, -0.0002446171420160681, -1.33514404296875e-05, -0.000720977783203125, -7.43865966796875e-05, -0.00048828125, -8.58306884765625e-05, -0.00022125244140625, -0.0001621246337890625, -0.001056671142578125, -0.006169319152832031, -5.7220458984375e-05, -1.1444091796875e-05, -1.9073486328125e-05, -0.0001373291015625, -0.0002319812774658203, -9.655952453613281e-06, -6.783008575439453e-05, 0.0, -0.000118255615234375, 0.0, -0.0003662109375, 0.0, -0.0023326873779296875, -5.14984130859375e-05, -0.00077056884765625, -7.05718994140625e-05, 0.0, 0.0, -0.00014150142669677734, 0.0, -7.62939453125e-06, -0.000110626220703125, 0.0, -0.0004177093505859375, -0.0002267358941026032, -1.9073486328125e-06, -5.7220458984375e-06, -0.001064300537109375, -9.5367431640625e-06, -0.0011444091796875], "score": -4.376190057567719, "model_output": {"hole4": "player", "hole0": "AnimalCompanion", "hole7": [{"body": [{"value": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use", "args": {"_type": "Template17"}}], "hole6": [{"_type": "Template19"}, {"value": {"_type": "List", "elts": [{"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Misha", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Leokk", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"_type": "Template62_expr_seq"}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "<UNK>"}]}, "targets": [{"_type": "Name", "id": "card"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "card"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template14", "hole0": "Animal Companion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Misha(), hearthbreaker.cards.minions.\n            hunter.Leokk()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n"}, {"choice_history": [121, 201, "Animal", "Companion", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 23, 181, 323, 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Misha", "<EOS>", 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Leokk", "<EOS>", 105, 126, 155, 320, 73, 186, "card", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 111], "score_history": [-2.09808349609375e-05, -0.014146804809570312, -0.00027021096320822835, -7.629378160345368e-06, -0.0003668637073133141, 0.0, -2.3126602172851562e-05, -4.0531158447265625e-06, -1.33514404296875e-05, -0.0045642852783203125, -7.2479248046875e-05, -8.511180931236595e-05, -3.600116178859025e-05, -6.198883056640625e-06, 0.0, -8.344646857949556e-07, 0.0, -0.0071260929107666016, 0.0, -0.0002613067626953125, 0.0, -0.00010037422180175781, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -8.118152618408203e-05, 0.0, -0.0055027008056640625, -0.0005397796630859375, -0.007096290588378906, -7.62939453125e-06, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000704646110534668, -2.3841855067985307e-07, -0.02173614501953125, -0.000659942626953125, -0.016611099243164062, -0.0028400421142578125, -2.288818359375e-05, -0.002376556396484375, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.1471710205078125, -1.33514404296875e-05, -0.020325660705566406, -0.002390742301940918, -0.0004119873046875, -0.0009404420852661133, -7.62939453125e-06, -0.004546165466308594, -3.814697265625e-06, -0.2891206741333008, -1.1444091796875e-05, -0.0034666061401367188, -1.71661376953125e-05, -0.0003509521484375, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -1.031214714050293, -0.001394748454913497, -6.866455078125e-05, -0.008479595184326172, 0.0, -1.0290772914886475, -0.00022220611572265625, -0.1511240005493164, -1.9073486328125e-05, -0.000843048095703125, -1.9073486328125e-06, -0.0005397796630859375, -5.7220458984375e-06, -0.34862613677978516, -0.00144708133302629, -0.000110626220703125, -0.006568551063537598, -1.9073486328125e-06, -1.1087195873260498, -6.29425048828125e-05, -0.02276325225830078, -0.0022678375244140625, 0.0, -3.814697265625e-06, -0.0002269744873046875, -1.9073486328125e-06, -0.001274704933166504, -5.364412118069595e-06, -8.0108642578125e-05, -3.24249267578125e-05, -3.814697265625e-06, 0.0, -0.005401611328125, -1.9073486328125e-06, -0.00013804434274788946, -2.0265558760002023e-06, -0.0045948028564453125, -1.1920922133867862e-06, -1.33514404296875e-05, -0.0004119873046875, -3.814697265625e-06, -0.0041942596435546875, -5.960462772236497e-07, -0.07506179809570312, -0.000514984130859375, -0.00301361083984375, -3.814697265625e-06, -0.006923675537109375, -2.2649765014648438e-06, -0.000951169291511178, 0.0, -4.76837158203125e-05, -0.0004825592041015625, -0.000743865966796875, 0.0, -0.0003757476806640625, -0.0009099245071411133, 0.0, -7.2479248046875e-05, -7.05718994140625e-05, -1.9073486328125e-06, 0.0, -0.00029027462005615234, 0.0, -3.814697265625e-06, -9.918212890625e-05, -1.9073486328125e-06, -8.20159912109375e-05, -4.8279751354129985e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.0018177032470703125, -1.1444091796875e-05, -0.0002427097933832556, -1.33514404296875e-05, -0.0007152557373046875, -7.43865966796875e-05, -0.0004863739013671875, -8.58306884765625e-05, -0.0002231597900390625, -0.000164031982421875, -0.00106048583984375, -0.0061511993408203125, -5.7220458984375e-05, -1.1444091796875e-05, -1.9073486328125e-05, -0.0001373291015625, -0.0002319812774658203, -9.655952453613281e-06, -6.783008575439453e-05, 0.0, -0.0001163482666015625, 0.0, -0.0003681182861328125, 0.0, -0.0023040771484375, -4.9591064453125e-05, -0.0007839202880859375, -7.2479248046875e-05, 0.0, 0.0, -0.00014150142669677734, 0.0, -7.62939453125e-06, -0.000110626220703125, 0.0, -0.000423431396484375, -0.00022280198754742742, -1.9073486328125e-06, -5.7220458984375e-06, -0.001064300537109375, -9.5367431640625e-06, -0.0011425018310546875], "score": -4.3925895830106185, "model_output": {"hole4": "player", "hole0": "AnimalCompanion", "hole7": [{"body": [{"value": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use", "args": {"_type": "Template17"}}], "hole6": [{"_type": "Template19"}, {"value": {"_type": "List", "elts": [{"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Misha", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Leokk", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"_type": "Template62_expr_seq"}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "<UNK>"}]}, "targets": [{"_type": "Name", "id": "card"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "card"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template14", "hole0": "Animal Companion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.Misha(), hearthbreaker.cards.minions.Leokk()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n"}, {"choice_history": [121, 201, "Animal", "Companion", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 23, 181, 323, 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Leokk", "<EOS>", 105, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "<UNK>", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 111], "score_history": [-2.09808349609375e-05, -0.014146804809570312, -0.00027021096320822835, -7.629378160345368e-06, -0.0003668637073133141, 0.0, -2.3126602172851562e-05, -4.0531158447265625e-06, -1.33514404296875e-05, -0.0045642852783203125, -7.2479248046875e-05, -8.511180931236595e-05, -3.600116178859025e-05, -6.198883056640625e-06, 0.0, -8.344646857949556e-07, 0.0, -0.0071260929107666016, 0.0, -0.0002613067626953125, 0.0, -0.00010037422180175781, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -8.118152618408203e-05, 0.0, -0.0055027008056640625, -0.0005397796630859375, -0.007096290588378906, -7.62939453125e-06, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000704646110534668, -2.3841855067985307e-07, -0.02173614501953125, -0.000659942626953125, -0.016611099243164062, -0.0028400421142578125, -2.288818359375e-05, -0.002376556396484375, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.1471710205078125, -1.33514404296875e-05, -0.020325660705566406, -0.002390742301940918, -0.0004119873046875, -0.0009404420852661133, -7.62939453125e-06, -0.004546165466308594, -3.814697265625e-06, -0.2891206741333008, -1.1444091796875e-05, -0.0034666061401367188, -1.71661376953125e-05, -0.0003509521484375, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -1.031214714050293, -0.001394748454913497, -6.866455078125e-05, -0.008479595184326172, 0.0, -1.2011258602142334, -7.2479248046875e-05, -0.041344642639160156, -0.518707275390625, -1.9073486328125e-06, -0.11872291564941406, 0.0, -0.2837982177734375, -4.38690185546875e-05, -0.0026404857635498047, -4.768370445162873e-07, -0.10593760013580322, -2.6464111215318553e-05, -0.10522966831922531, 0.0, -0.000225067138671875, 0.0, -0.015070915222167969, 0.0, -0.21372711658477783, -1.4305104514278355e-06, -0.003816962242126465, 0.0, -8.20159912109375e-05, -0.0009517669677734375, -0.007755279541015625, 0.0, -0.000423431396484375, -0.0005332231521606445, 0.0, -7.62939453125e-05, -0.000102996826171875, -5.7220458984375e-06, 0.0, -0.0002695322036743164, -1.1920928244535389e-07, -1.1444091796875e-05, -7.62939453125e-05, 0.0, -0.0003871917724609375, -0.00010228155588265508, -1.9073486328125e-06, -0.10482501983642578, 0.0, -0.2848844528198242, 0.0, -0.09090137481689453, -3.814697265625e-06, -0.013003110885620117, 0.0, -6.67572021484375e-05, -0.000499725341796875, -0.007930755615234375, -1.9073486328125e-06, -0.000408172607421875, -0.0003211498260498047, 0.0, -6.29425048828125e-05, -0.0001277923583984375, -5.7220458984375e-06, 0.0, -0.0003572702407836914, 0.0, -1.1444091796875e-05, -8.0108642578125e-05, 0.0, -0.000186920166015625, -0.00018215177988167852, -1.9073486328125e-06, -6.29425048828125e-05, -0.0023136138916015625, -1.33514404296875e-05, -0.0005193931865505874, -1.33514404296875e-05, -0.003055572509765625, -6.103515625e-05, -0.000469207763671875, -0.0001049041748046875, -0.0001850128173828125, -0.0001354217529296875, -0.000865936279296875, -0.005925178527832031, -6.29425048828125e-05, -1.1444091796875e-05, -1.9073486328125e-05, -0.0001220703125, -0.00022792816162109375, -9.655952453613281e-06, -6.604194641113281e-05, 0.0, -0.0001506805419921875, 0.0, -0.0003223419189453125, 0.0, -0.0024566650390625, -5.91278076171875e-05, -0.000705718994140625, -6.103515625e-05, 0.0, 0.0, -0.00014352798461914062, 0.0, -7.62939453125e-06, -0.0001087188720703125, 0.0, -0.000186920166015625, -0.0003621576470322907, -1.9073486328125e-06, -3.814697265625e-06, -0.0009975433349609375, -9.5367431640625e-06, -0.0011806488037109375], "score": -4.741729564130161, "model_output": {"hole4": "player", "hole0": "AnimalCompanion", "hole7": [{"body": [{"value": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use", "args": {"_type": "Template17"}}], "hole6": [{"_type": "Template19"}, {"value": {"_type": "List", "elts": [{"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Leokk", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"_type": "Template62_expr_seq"}, {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "<UNK>"}}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "card"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template14", "hole0": "Animal Companion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.Leokk(), game.other_player.minions]\n        <UNK>.summon(player, player.game, len(player.minions))\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n"}, {"choice_history": [121, 201, "Animal", "Companion", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 23, 181, 323, 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Misha", "<EOS>", 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Leokk", "<EOS>", 105, 126, 155, 320, 73, 186, "card", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 111], "score_history": [-2.09808349609375e-05, -0.014146804809570312, -0.00027021096320822835, -7.629378160345368e-06, -0.0003668637073133141, 0.0, -2.3126602172851562e-05, -4.0531158447265625e-06, -1.33514404296875e-05, -0.0045642852783203125, -7.2479248046875e-05, -8.511180931236595e-05, -3.600116178859025e-05, -6.198883056640625e-06, 0.0, -8.344646857949556e-07, 0.0, -0.0071260929107666016, 0.0, -0.0002613067626953125, 0.0, -0.00010037422180175781, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -8.118152618408203e-05, 0.0, -0.0055027008056640625, -0.0005397796630859375, -0.007096290588378906, -7.62939453125e-06, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000704646110534668, -2.3841855067985307e-07, -0.02173614501953125, -0.000659942626953125, -0.016611099243164062, -0.0028400421142578125, -2.288818359375e-05, -0.002376556396484375, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.1471710205078125, -1.33514404296875e-05, -0.020325660705566406, -0.002390742301940918, -0.0004119873046875, -0.0009404420852661133, -7.62939453125e-06, -0.004546165466308594, -3.814697265625e-06, -0.2891206741333008, -1.1444091796875e-05, -0.0034666061401367188, -1.71661376953125e-05, -0.0003509521484375, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -1.031214714050293, -0.001394748454913497, -6.866455078125e-05, -0.008479595184326172, 0.0, -1.0290772914886475, -0.00022220611572265625, -0.1511240005493164, -1.9073486328125e-05, -0.000843048095703125, -1.9073486328125e-06, -0.0005397796630859375, -5.7220458984375e-06, -1.3197708129882812, -7.62939453125e-06, -0.010684967041015625, -0.0017964808503165841, -0.0003490447998046875, -0.00033485889434814453, -5.7220458984375e-06, -0.007648815866559744, -2.3841855067985307e-07, -0.8490888476371765, -8.0108642578125e-05, -0.004498481750488281, -0.0010013580322265625, 0.0, -1.9073486328125e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.0010896921157836914, -7.629387255292386e-06, -9.72747802734375e-05, -4.00543212890625e-05, -3.814697265625e-06, 0.0, -0.006167411804199219, -1.9073486328125e-06, -0.00012147425877628848, -1.9073468138230965e-06, -0.005090475082397461, -1.311301275563892e-06, -1.33514404296875e-05, -0.0003490447998046875, -1.9073486328125e-06, -0.004588127136230469, -4.768370445162873e-07, -0.07751846313476562, -0.0005130767822265625, -0.002925872802734375, -3.814697265625e-06, -0.0069817304611206055, -2.2649765014648438e-06, -0.0009661896619945765, 0.0, -4.76837158203125e-05, -0.0004863739013671875, -0.000732421875, 0.0, -0.000377655029296875, -0.00091552734375, 0.0, -7.2479248046875e-05, -7.05718994140625e-05, -1.9073486328125e-06, 0.0, -0.00028455257415771484, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -1.9073486328125e-06, -8.392333984375e-05, -4.8279751354129985e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.001819610595703125, -1.1444091796875e-05, -0.0002446171420160681, -1.33514404296875e-05, -0.000720977783203125, -7.43865966796875e-05, -0.00048828125, -8.58306884765625e-05, -0.00022125244140625, -0.0001621246337890625, -0.0010585784912109375, -0.006159782409667969, -5.7220458984375e-05, -1.1444091796875e-05, -1.9073486328125e-05, -0.0001373291015625, -0.0002319812774658203, -9.655952453613281e-06, -6.783008575439453e-05, 0.0, -0.000118255615234375, 0.0, -0.0003662109375, 0.0, -0.00232696533203125, -4.9591064453125e-05, -0.0007724761962890625, -7.05718994140625e-05, 0.0, 0.0, -0.00014150142669677734, 0.0, -7.62939453125e-06, -0.000110626220703125, 0.0, -0.0004177093505859375, -0.0002248285454697907, -1.9073486328125e-06, -5.7220458984375e-06, -0.001064300537109375, -9.5367431640625e-06, -0.0011444091796875], "score": -5.101018132014758, "model_output": {"hole4": "player", "hole0": "AnimalCompanion", "hole7": [{"body": [{"value": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use", "args": {"_type": "Template17"}}], "hole6": [{"_type": "Template19"}, {"value": {"_type": "List", "elts": [{"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Misha", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Leokk", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"_type": "Template62_expr_seq"}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "<UNK>"}]}, "targets": [{"_type": "Name", "id": "card"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "card"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template14", "hole0": "Animal Companion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.Misha(), hearthbreaker.cards.minions.hunter.Leokk()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n"}, {"choice_history": [121, 201, "Animal", "Companion", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 23, 181, 323, 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Leokk", "<EOS>", 105, 126, 155, 320, 73, 186, "card", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 111], "score_history": [-2.09808349609375e-05, -0.014146804809570312, -0.00027021096320822835, -7.629378160345368e-06, -0.0003668637073133141, 0.0, -2.3126602172851562e-05, -4.0531158447265625e-06, -1.33514404296875e-05, -0.0045642852783203125, -7.2479248046875e-05, -8.511180931236595e-05, -3.600116178859025e-05, -6.198883056640625e-06, 0.0, -8.344646857949556e-07, 0.0, -0.0071260929107666016, 0.0, -0.0002613067626953125, 0.0, -0.00010037422180175781, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -8.118152618408203e-05, 0.0, -0.0055027008056640625, -0.0005397796630859375, -0.007096290588378906, -7.62939453125e-06, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000704646110534668, -2.3841855067985307e-07, -0.02173614501953125, -0.000659942626953125, -0.016611099243164062, -0.0028400421142578125, -2.288818359375e-05, -0.002376556396484375, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.1471710205078125, -1.33514404296875e-05, -0.020325660705566406, -0.002390742301940918, -0.0004119873046875, -0.0009404420852661133, -7.62939453125e-06, -0.004546165466308594, -3.814697265625e-06, -0.2891206741333008, -1.1444091796875e-05, -0.0034666061401367188, -1.71661376953125e-05, -0.0003509521484375, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -1.031214714050293, -0.001394748454913497, -6.866455078125e-05, -0.008479595184326172, 0.0, -1.8213565349578857, -0.000339508056640625, -0.1939554214477539, -1.52587890625e-05, -0.0021305084228515625, 0.0, -0.0003204345703125, -5.7220458984375e-06, -0.2585763931274414, -0.0014146562898531556, -8.7738037109375e-05, -0.011023283004760742, -1.9073486328125e-06, -1.1050783395767212, -6.866455078125e-05, -0.02584075927734375, -0.0025691986083984375, 0.0, -3.814697265625e-06, -0.0002231597900390625, -1.9073486328125e-06, -0.0011955499649047852, -5.483620952873025e-06, -8.392333984375e-05, -3.0517578125e-05, -3.814697265625e-06, 0.0, -0.00542449951171875, -1.9073486328125e-06, -0.00014173983072396368, -2.0265558760002023e-06, -0.0045850276947021484, -1.1920922133867862e-06, -1.33514404296875e-05, -0.0004119873046875, -3.814697265625e-06, -0.0042972564697265625, -5.960462772236497e-07, -0.07469558715820312, -0.000514984130859375, -0.0030193328857421875, -3.814697265625e-06, -0.0069217681884765625, -2.2649765014648438e-06, -0.0009521229658275843, 0.0, -4.76837158203125e-05, -0.000484466552734375, -0.0007476806640625, 0.0, -0.000377655029296875, -0.0009080171585083008, 0.0, -7.2479248046875e-05, -7.05718994140625e-05, -1.9073486328125e-06, 0.0, -0.00029027462005615234, 0.0, -3.814697265625e-06, -9.918212890625e-05, -1.9073486328125e-06, -8.20159912109375e-05, -4.8279751354129985e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.0018177032470703125, -1.1444091796875e-05, -0.00024282900267280638, -1.33514404296875e-05, -0.0007152557373046875, -7.43865966796875e-05, -0.0004863739013671875, -8.58306884765625e-05, -0.0002231597900390625, -0.000164031982421875, -0.00106048583984375, -0.006146430969238281, -5.7220458984375e-05, -1.1444091796875e-05, -1.9073486328125e-05, -0.0001373291015625, -0.0002319812774658203, -9.655952453613281e-06, -6.783008575439453e-05, 0.0, -0.000118255615234375, 0.0, -0.0003681182861328125, 0.0, -0.0023059844970703125, -4.9591064453125e-05, -0.000782012939453125, -7.2479248046875e-05, 0.0, 0.0, -0.00014150142669677734, 0.0, -7.62939453125e-06, -0.000110626220703125, 0.0, -0.000423431396484375, -0.00022280198754742742, -1.9073486328125e-06, -5.7220458984375e-06, -0.001064300537109375, -9.5367431640625e-06, -0.0011425018310546875], "score": -5.142653359863658, "model_output": {"hole4": "player", "hole0": "AnimalCompanion", "hole7": [{"body": [{"value": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use", "args": {"_type": "Template17"}}], "hole6": [{"_type": "Template19"}, {"value": {"_type": "List", "elts": [{"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Leokk", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"_type": "Template62_expr_seq"}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "<UNK>"}]}, "targets": [{"_type": "Name", "id": "card"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "card"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template14", "hole0": "Animal Companion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.Huffer(), hearthbreaker.cards.minions.Leokk()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n"}, {"choice_history": [121, 201, "Animal", "Companion", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 23, 181, 323, 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Leokk", "<EOS>", 105, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "<UNK>", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 111], "score_history": [-2.09808349609375e-05, -0.014146804809570312, -0.00027021096320822835, -7.629378160345368e-06, -0.0003668637073133141, 0.0, -2.3126602172851562e-05, -4.0531158447265625e-06, -1.33514404296875e-05, -0.0045642852783203125, -7.2479248046875e-05, -8.511180931236595e-05, -3.600116178859025e-05, -6.198883056640625e-06, 0.0, -8.344646857949556e-07, 0.0, -0.0071260929107666016, 0.0, -0.0002613067626953125, 0.0, -0.00010037422180175781, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -8.118152618408203e-05, 0.0, -0.0055027008056640625, -0.0005397796630859375, -0.007096290588378906, -7.62939453125e-06, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000704646110534668, -2.3841855067985307e-07, -0.02173614501953125, -0.000659942626953125, -0.016611099243164062, -0.0028400421142578125, -2.288818359375e-05, -0.002376556396484375, 0.0, -0.000118255615234375, -1.9073486328125e-06, -2.0185108184814453, -0.010493278503417969, -0.00011444091796875, -0.04299294948577881, -1.9073486328125e-06, -0.4479358196258545, -5.53131103515625e-05, -0.0038785934448242188, -5.7220458984375e-06, -0.0016078948974609375, 0.0, -6.866455078125e-05, -1.9073486328125e-06, -0.1928882598876953, -9.5367431640625e-06, -0.006392478942871094, -0.0015819063410162926, -0.0002918243408203125, -0.0003324747085571289, -5.7220458984375e-06, -0.005495904479175806, -1.1920928244535389e-07, -1.006482720375061, -7.43865966796875e-05, -0.007984161376953125, -0.5916233062744141, -1.9073486328125e-06, -0.19775772094726562, -1.9073486328125e-06, -0.13637161254882812, -3.24249267578125e-05, -0.0029593706130981445, -4.768370445162873e-07, -0.09208523482084274, -3.158996332786046e-05, -0.09657517075538635, 0.0, -0.000213623046875, 0.0, -0.016927719116210938, 0.0, -0.23877978324890137, -1.5497195136049413e-06, -0.004000425338745117, 0.0, -8.392333984375e-05, -0.0009708404541015625, -0.00750732421875, 0.0, -0.0004177093505859375, -0.0005314350128173828, 0.0, -7.62939453125e-05, -0.0001010894775390625, -5.7220458984375e-06, 0.0, -0.0002695322036743164, -1.1920928244535389e-07, -1.1444091796875e-05, -7.43865966796875e-05, 0.0, -0.0003871917724609375, -0.00010037420724984258, -1.9073486328125e-06, -0.10387134552001953, 0.0, -0.28436756134033203, 0.0, -0.09009838104248047, -3.814697265625e-06, -0.012953519821166992, 0.0, -6.67572021484375e-05, -0.000499725341796875, -0.007909774780273438, -1.9073486328125e-06, -0.000396728515625, -0.00032317638397216797, 0.0, -6.103515625e-05, -0.0001277923583984375, -5.7220458984375e-06, 0.0, -0.0003515481948852539, 0.0, -1.1444091796875e-05, -7.43865966796875e-05, 0.0, -0.0001983642578125, -0.00018572805856820196, -1.9073486328125e-06, -6.29425048828125e-05, -0.0023365020751953125, -1.33514404296875e-05, -0.0005357248010113835, -1.33514404296875e-05, -0.0041294097900390625, -5.91278076171875e-05, -0.0004730224609375, -0.000110626220703125, -0.0001811981201171875, -0.000133514404296875, -0.000827789306640625, -0.005927085876464844, -6.29425048828125e-05, -1.1444091796875e-05, -1.9073486328125e-05, -0.000118255615234375, -0.00023174285888671875, -1.1563301086425781e-05, -6.794929504394531e-05, 0.0, -0.0001544952392578125, 0.0, -0.0003185272216796875, 0.0, -0.002452850341796875, -5.91278076171875e-05, -0.0007076263427734375, -6.103515625e-05, 0.0, 0.0, -0.00014352798461914062, 0.0, -7.62939453125e-06, -0.0001087188720703125, 0.0, -0.0001697540283203125, -0.0003856418770737946, -1.9073486328125e-06, -3.814697265625e-06, -0.000988006591796875, -9.5367431640625e-06, -0.0011844635009765625], "score": -5.744284306310945, "model_output": {"hole4": "player", "hole0": "AnimalCompanion", "hole7": [{"body": [{"value": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use", "args": {"_type": "Template17"}}], "hole6": [{"_type": "Template19"}, {"value": {"_type": "List", "elts": [{"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Leokk", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"_type": "Template62_expr_seq"}, {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "<UNK>"}}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "card"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template14", "hole0": "Animal Companion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.Huffer(), hearthbreaker.cards.\n            minions.hunter.Leokk(), game.other_player.minions]\n        <UNK>.summon(player, player.game, len(player.minions))\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n"}, {"choice_history": [121, 201, "Animal", "Companion", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 23, 181, 323, 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Misha", "<EOS>", 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Leokk", "<EOS>", 126, 155, 320, 73, 186, "card", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 111], "score_history": [-2.09808349609375e-05, -0.014146804809570312, -0.00027021096320822835, -7.629378160345368e-06, -0.0003668637073133141, 0.0, -2.3126602172851562e-05, -4.0531158447265625e-06, -1.33514404296875e-05, -0.0045642852783203125, -7.2479248046875e-05, -8.511180931236595e-05, -3.600116178859025e-05, -6.198883056640625e-06, 0.0, -8.344646857949556e-07, 0.0, -0.0071260929107666016, 0.0, -0.0002613067626953125, 0.0, -0.00010037422180175781, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -8.118152618408203e-05, 0.0, -0.0055027008056640625, -0.0005397796630859375, -0.007096290588378906, -7.62939453125e-06, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000704646110534668, -2.3841855067985307e-07, -0.02173614501953125, -0.000659942626953125, -0.016611099243164062, -0.0028400421142578125, -2.288818359375e-05, -0.002376556396484375, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.1471710205078125, -1.33514404296875e-05, -0.020325660705566406, -0.002390742301940918, -0.0004119873046875, -0.0009404420852661133, -7.62939453125e-06, -0.004546165466308594, -3.814697265625e-06, -0.2891206741333008, -1.1444091796875e-05, -0.0034666061401367188, -1.71661376953125e-05, -0.0003509521484375, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -0.45298099517822266, -5.7220458984375e-06, -0.008358955383300781, -0.001508949906565249, -0.00020599365234375, -0.0002866983413696289, -3.814697265625e-06, -0.00682818703353405, -1.1920928244535389e-07, -0.7210012078285217, -0.000244140625, -0.05063152313232422, -1.71661376953125e-05, -0.0011310577392578125, -1.9073486328125e-06, -0.000530242919921875, -5.7220458984375e-06, -0.2567710876464844, -0.0014952417695894837, -0.0001068115234375, -0.004508376121520996, -1.9073486328125e-06, -1.0175061225891113, -0.00019741058349609375, -0.15219688415527344, -1.71661376953125e-05, -0.0021800994873046875, -1.9073486328125e-06, -0.0006313323974609375, -3.814697265625e-06, -1.3388805389404297, -7.62939453125e-06, -0.009565353393554688, -0.0018421380082145333, -0.0003509521484375, -0.00032150745391845703, -5.7220458984375e-06, -0.008465874008834362, -2.3841855067985307e-07, -0.8077520132064819, -8.392333984375e-05, -0.2686595916748047, -1.9073486328125e-06, -3.814697265625e-06, -0.0006008148193359375, -3.814697265625e-06, -0.0008908510208129883, -1.2040087312925607e-05, -0.0001125335693359375, -3.0517578125e-05, -0.000141143798828125, 0.0, -0.0022401809692382812, -1.9073486328125e-06, -0.0001645088050281629, -2.145764938177308e-06, -0.00551152229309082, -1.1920922133867862e-06, -1.1444091796875e-05, -0.0003452301025390625, -3.814697265625e-06, -0.0045795440673828125, -5.960462772236497e-07, -0.0688323974609375, -0.00051116943359375, -0.0029773712158203125, -3.814697265625e-06, -0.0064727067947387695, -2.2649765014648438e-06, -0.0009726269636303186, 0.0, -4.76837158203125e-05, -0.000484466552734375, -0.000732421875, 0.0, -0.0003814697265625, -0.0008983612060546875, 0.0, -7.2479248046875e-05, -7.2479248046875e-05, -1.9073486328125e-06, 0.0, -0.00027883052825927734, 0.0, -3.814697265625e-06, -9.1552734375e-05, -1.9073486328125e-06, -8.392333984375e-05, -4.8279751354129985e-05, -1.9073486328125e-06, -9.34600830078125e-05, -0.0018138885498046875, -1.1444091796875e-05, -0.0002465244906488806, -1.33514404296875e-05, -0.0007266998291015625, -7.43865966796875e-05, -0.000492095947265625, -8.58306884765625e-05, -0.00022125244140625, -0.0001621246337890625, -0.0010585784912109375, -0.006194114685058594, -5.7220458984375e-05, -1.1444091796875e-05, -1.9073486328125e-05, -0.0001373291015625, -0.0002319812774658203, -9.655952453613281e-06, -6.783008575439453e-05, 0.0, -0.000118255615234375, 0.0, -0.0003719329833984375, 0.0, -0.0022487640380859375, -4.9591064453125e-05, -0.0008068084716796875, -7.43865966796875e-05, 0.0, 0.0, -0.00014150142669677734, 0.0, -7.62939453125e-06, -0.000110626220703125, 0.0, -0.000431060791015625, -0.00021898729028180242, -1.9073486328125e-06, -5.7220458984375e-06, -0.001064300537109375, -9.5367431640625e-06, -0.001140594482421875], "score": -5.785893733866139, "model_output": {"hole4": "player", "hole0": "AnimalCompanion", "hole7": [{"body": [{"value": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use", "args": {"_type": "Template17"}}], "hole6": [{"_type": "Template19"}, {"value": {"_type": "List", "elts": [{"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Misha", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Misha", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Leokk", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "<UNK>"}]}, "targets": [{"_type": "Name", "id": "card"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "card"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template14", "hole0": "Animal Companion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Misha(), hearthbreaker.cards.minions.\n            Misha(), hearthbreaker.cards.minions.hunter.Leokk()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n"}, {"choice_history": [121, 201, "Animal", "Companion", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 23, 181, 323, 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Misha", "<EOS>", 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Misha", "<EOS>", 145, 250, 25, 186, "<UNK>", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 111], "score_history": [-2.09808349609375e-05, -0.014146804809570312, -0.00027021096320822835, -7.629378160345368e-06, -0.0003668637073133141, 0.0, -2.3126602172851562e-05, -4.0531158447265625e-06, -1.33514404296875e-05, -0.0045642852783203125, -7.2479248046875e-05, -8.511180931236595e-05, -3.600116178859025e-05, -6.198883056640625e-06, 0.0, -8.344646857949556e-07, 0.0, -0.0071260929107666016, 0.0, -0.0002613067626953125, 0.0, -0.00010037422180175781, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -8.118152618408203e-05, 0.0, -0.0055027008056640625, -0.0005397796630859375, -0.007096290588378906, -7.62939453125e-06, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000704646110534668, -2.3841855067985307e-07, -0.02173614501953125, -0.000659942626953125, -0.016611099243164062, -0.0028400421142578125, -2.288818359375e-05, -0.002376556396484375, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.1471710205078125, -1.33514404296875e-05, -0.020325660705566406, -0.002390742301940918, -0.0004119873046875, -0.0009404420852661133, -7.62939453125e-06, -0.004546165466308594, -3.814697265625e-06, -0.2891206741333008, -1.1444091796875e-05, -0.0034666061401367188, -1.71661376953125e-05, -0.0003509521484375, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -0.45298099517822266, -5.7220458984375e-06, -0.008358955383300781, -0.001508949906565249, -0.00020599365234375, -0.0002866983413696289, -3.814697265625e-06, -0.00682818703353405, -1.1920928244535389e-07, -0.7210012078285217, -0.000244140625, -0.05063152313232422, -1.71661376953125e-05, -0.0011310577392578125, -1.9073486328125e-06, -0.000530242919921875, -5.7220458984375e-06, -0.2567710876464844, -0.0014952417695894837, -0.0001068115234375, -0.004508376121520996, -1.9073486328125e-06, -1.0175061225891113, -0.00019741058349609375, -0.15219688415527344, -1.71661376953125e-05, -0.0021800994873046875, -1.9073486328125e-06, -0.0006313323974609375, -3.814697265625e-06, -0.34505176544189453, -0.001456856494769454, -0.0001068115234375, -0.0043343305587768555, -1.9073486328125e-06, -0.9873218536376953, -0.0001659393310546875, -0.22920799255371094, 0.0, -0.5325717926025391, -1.9073486328125e-06, -0.059928178787231445, -2.0265558760002023e-06, -0.0008929967298172414, -1.9073486328125e-06, -5.340576171875e-05, -0.005306243896484375, -0.01172637939453125, -1.9073486328125e-06, -0.0010051727294921875, -0.0007901191711425781, 0.0, -6.29425048828125e-05, -0.0001544952392578125, -3.814697265625e-06, 0.0, -0.00022363662719726562, 0.0, -1.1444091796875e-05, -7.43865966796875e-05, 0.0, -0.0003376007080078125, -0.0001136064383899793, -1.9073486328125e-06, -0.11159992218017578, 0.0, -0.31122589111328125, 0.0, -0.1016092300415039, -3.814697265625e-06, -0.013283491134643555, 0.0, -7.05718994140625e-05, -0.0007152557373046875, -0.0041370391845703125, -1.9073486328125e-06, -0.000553131103515625, -0.00035178661346435547, 0.0, -6.4849853515625e-05, -8.7738037109375e-05, -3.814697265625e-06, 0.0, -0.0003095865249633789, 0.0, -7.62939453125e-06, -3.0517578125e-05, 0.0, -0.0001468658447265625, -0.00010585783456917852, -1.9073486328125e-06, -7.43865966796875e-05, -0.0019969940185546875, -1.33514404296875e-05, -0.0004422653291840106, -1.71661376953125e-05, -0.0013141632080078125, -7.05718994140625e-05, -0.0004749298095703125, -9.72747802734375e-05, -0.0001964569091796875, -0.0001354217529296875, -0.0009899139404296875, -0.005963325500488281, -6.103515625e-05, -1.1444091796875e-05, -1.9073486328125e-05, -0.000125885009765625, -0.00022614002227783203, -9.655952453613281e-06, -6.783008575439453e-05, 0.0, -0.0001430511474609375, 0.0, -0.0003833770751953125, 0.0, -0.0022869110107421875, -5.340576171875e-05, -0.0007610321044921875, -6.866455078125e-05, 0.0, 0.0, -0.00014340877532958984, 0.0, -7.62939453125e-06, -0.000110626220703125, 0.0, -0.0004119873046875, -0.0002267358941026032, -1.9073486328125e-06, -5.7220458984375e-06, -0.0010528564453125, -9.5367431640625e-06, -0.001129150390625], "score": -5.978122424577428, "model_output": {"hole4": "player", "hole0": "AnimalCompanion", "hole7": [{"body": [{"value": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use", "args": {"_type": "Template17"}}], "hole6": [{"_type": "Template19"}, {"value": {"_type": "List", "elts": [{"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Misha", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Misha", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Misha", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "<UNK>"}}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "card"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template14", "hole0": "Animal Companion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Misha(), hearthbreaker.cards.minions.\n            Misha(), hearthbreaker.cards.minions.Misha()]\n        <UNK>.summon(player, player.game, len(player.minions))\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n"}, {"choice_history": [121, 201, "Animal", "Companion", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 23, 181, 323, 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Misha", "<EOS>", 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Leokk", "<EOS>", 145, 250, 25, 186, "<UNK>", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 111], "score_history": [-2.09808349609375e-05, -0.014146804809570312, -0.00027021096320822835, -7.629378160345368e-06, -0.0003668637073133141, 0.0, -2.3126602172851562e-05, -4.0531158447265625e-06, -1.33514404296875e-05, -0.0045642852783203125, -7.2479248046875e-05, -8.511180931236595e-05, -3.600116178859025e-05, -6.198883056640625e-06, 0.0, -8.344646857949556e-07, 0.0, -0.0071260929107666016, 0.0, -0.0002613067626953125, 0.0, -0.00010037422180175781, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -8.118152618408203e-05, 0.0, -0.0055027008056640625, -0.0005397796630859375, -0.007096290588378906, -7.62939453125e-06, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000704646110534668, -2.3841855067985307e-07, -0.02173614501953125, -0.000659942626953125, -0.016611099243164062, -0.0028400421142578125, -2.288818359375e-05, -0.002376556396484375, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.1471710205078125, -1.33514404296875e-05, -0.020325660705566406, -0.002390742301940918, -0.0004119873046875, -0.0009404420852661133, -7.62939453125e-06, -0.004546165466308594, -3.814697265625e-06, -0.2891206741333008, -1.1444091796875e-05, -0.0034666061401367188, -1.71661376953125e-05, -0.0003509521484375, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -0.45298099517822266, -5.7220458984375e-06, -0.008358955383300781, -0.001508949906565249, -0.00020599365234375, -0.0002866983413696289, -3.814697265625e-06, -0.00682818703353405, -1.1920928244535389e-07, -0.7210012078285217, -0.000244140625, -0.05063152313232422, -1.71661376953125e-05, -0.0011310577392578125, -1.9073486328125e-06, -0.000530242919921875, -5.7220458984375e-06, -0.2567710876464844, -0.0014952417695894837, -0.0001068115234375, -0.004508376121520996, -1.9073486328125e-06, -1.0175061225891113, -0.00019741058349609375, -0.15219688415527344, -1.71661376953125e-05, -0.0021800994873046875, -1.9073486328125e-06, -0.0006313323974609375, -3.814697265625e-06, -0.34505176544189453, -0.001456856494769454, -0.0001068115234375, -0.0043343305587768555, -1.9073486328125e-06, -1.0589971542358398, -7.43865966796875e-05, -0.3546104431152344, 0.0, -0.3369922637939453, 0.0, -0.27436840534210205, -2.3841830625315197e-06, -0.0008229015511460602, -1.9073486328125e-06, -8.96453857421875e-05, -0.007071495056152344, -0.010263442993164062, -5.7220458984375e-06, -0.0025167465209960938, -0.001316666603088379, -1.1920928244535389e-07, -6.103515625e-05, -0.000164031982421875, -5.7220458984375e-06, 0.0, -0.0002180337905883789, 0.0, -1.1444091796875e-05, -6.103515625e-05, 0.0, -0.000347137451171875, -0.0001174211356556043, -1.9073486328125e-06, -0.10764503479003906, 0.0, -0.3181886672973633, 0.0, -0.1029667854309082, -3.814697265625e-06, -0.013335943222045898, 0.0, -7.05718994140625e-05, -0.0005092620849609375, -0.0077972412109375, -1.9073486328125e-06, -0.0004367828369140625, -0.00032079219818115234, 0.0, -6.67572021484375e-05, -0.00012969970703125, -5.7220458984375e-06, 0.0, -0.0003839731216430664, 0.0, -9.5367431640625e-06, -0.0001049041748046875, 0.0, -0.0001659393310546875, -0.0001841783378040418, -1.9073486328125e-06, -6.29425048828125e-05, -0.0022678375244140625, -1.33514404296875e-05, -0.0004918558988720179, -1.52587890625e-05, -0.0023250579833984375, -6.103515625e-05, -0.0004749298095703125, -0.000102996826171875, -0.000186920166015625, -0.0001354217529296875, -0.0008907318115234375, -0.0060329437255859375, -6.29425048828125e-05, -1.1444091796875e-05, -1.9073486328125e-05, -0.0001239776611328125, -0.00022232532501220703, -9.655952453613281e-06, -6.604194641113281e-05, 0.0, -0.0001506805419921875, 0.0, -0.0003871917724609375, 0.0, -0.0022792816162109375, -5.53131103515625e-05, -0.0007762908935546875, -6.866455078125e-05, 0.0, 0.0, -0.00014340877532958984, 0.0, -7.62939453125e-06, -0.000110626220703125, 0.0, -0.0004119873046875, -0.00022661668481305242, -1.9073486328125e-06, -5.7220458984375e-06, -0.0010471343994140625, -9.5367431640625e-06, -0.0011234283447265625], "score": -6.205579708892927, "model_output": {"hole4": "player", "hole0": "AnimalCompanion", "hole7": [{"body": [{"value": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use", "args": {"_type": "Template17"}}], "hole6": [{"_type": "Template19"}, {"value": {"_type": "List", "elts": [{"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Misha", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Misha", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Leokk", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "<UNK>"}}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "card"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template14", "hole0": "Animal Companion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Misha(), hearthbreaker.cards.minions.\n            Misha(), hearthbreaker.cards.minions.Leokk()]\n        <UNK>.summon(player, player.game, len(player.minions))\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n"}, {"choice_history": [121, 201, "Animal", "Companion", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 23, 181, 323, 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Leokk", "<EOS>", 105, 126, 155, 320, 73, 186, "card", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>", 126, 155, 320, 73, 186, "card", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>", 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 111], "score_history": [-2.09808349609375e-05, -0.014146804809570312, -0.00027021096320822835, -7.629378160345368e-06, -0.0003668637073133141, 0.0, -2.3126602172851562e-05, -4.0531158447265625e-06, -1.33514404296875e-05, -0.0045642852783203125, -7.2479248046875e-05, -8.511180931236595e-05, -3.600116178859025e-05, -6.198883056640625e-06, 0.0, -8.344646857949556e-07, 0.0, -0.0071260929107666016, 0.0, -0.0002613067626953125, 0.0, -0.00010037422180175781, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -8.118152618408203e-05, 0.0, -0.0055027008056640625, -0.0005397796630859375, -0.007096290588378906, -7.62939453125e-06, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000704646110534668, -2.3841855067985307e-07, -0.02173614501953125, -0.000659942626953125, -0.016611099243164062, -0.0028400421142578125, -2.288818359375e-05, -0.002376556396484375, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.1471710205078125, -1.33514404296875e-05, -0.020325660705566406, -0.002390742301940918, -0.0004119873046875, -0.0009404420852661133, -7.62939453125e-06, -0.004546165466308594, -3.814697265625e-06, -0.2891206741333008, -1.1444091796875e-05, -0.0034666061401367188, -1.71661376953125e-05, -0.0003509521484375, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -0.45298099517822266, -5.7220458984375e-06, -0.008358955383300781, -0.001508949906565249, -0.00020599365234375, -0.0002866983413696289, -3.814697265625e-06, -0.00682818703353405, -1.1920928244535389e-07, -0.7210012078285217, -0.000244140625, -0.05063152313232422, -1.71661376953125e-05, -0.0011310577392578125, -1.9073486328125e-06, -0.000530242919921875, -5.7220458984375e-06, -0.2567710876464844, -0.0014952417695894837, -0.0001068115234375, -0.004508376121520996, -1.9073486328125e-06, -1.0993237495422363, -6.103515625e-05, -0.025146484375, -0.0020751953125, 0.0, -3.814697265625e-06, -0.0002231597900390625, -1.9073486328125e-06, -0.001232743263244629, -5.6028297876764555e-06, -8.392333984375e-05, -3.24249267578125e-05, -3.814697265625e-06, 0.0, -0.00511932373046875, -1.9073486328125e-06, -0.00014197824930306524, -2.0265558760002023e-06, -0.004611372947692871, -1.1920922133867862e-06, -1.33514404296875e-05, -0.000415802001953125, -3.814697265625e-06, -0.004222869873046875, -5.960462772236497e-07, -2.6833724975585938, -9.5367431640625e-06, -3.4332275390625e-05, -0.0041961669921875, -1.9073486328125e-06, -0.011821985244750977, -5.245203283266164e-06, -0.0021944046020507812, -4.1961669921875e-05, -0.0034618377685546875, 0.0, -0.000492095947265625, -1.9073486328125e-06, -0.0001651048514759168, -2.264974000354414e-06, -0.004638195037841797, -9.536738616588991e-07, -1.1444091796875e-05, -0.00029754638671875, -3.814697265625e-06, -0.004269599914550781, -4.768370445162873e-07, -0.001781463623046875, -0.5431423187255859, -9.5367431640625e-06, -0.06426787376403809, -3.814697265625e-06, -0.0038394927978515625, -2.6702880859375e-05, -0.001354217529296875, -0.00016021728515625, -0.0005054473876953125, -0.001018524169921875, -0.0002498626708984375, -0.004138946533203125, -9.34600830078125e-05, -1.33514404296875e-05, -4.38690185546875e-05, -7.05718994140625e-05, -0.00014436243509408087, -5.841255187988281e-06, -9.644030797062442e-05, 0.0, -9.739398956298828e-05, 0.0, -0.0005817413330078125, 0.0, -0.001499176025390625, -5.14984130859375e-05, -0.0016460418701171875, -8.392333984375e-05, 0.0, 0.0, -0.0001417398452758789, 0.0, -7.62939453125e-06, -0.0001163482666015625, 0.0, -0.000446319580078125, -0.000273704354185611, -1.9073486328125e-06, -5.7220458984375e-06, -0.00101470947265625, -9.5367431640625e-06, -0.001079559326171875], "score": -6.546834898881137, "model_output": {"hole4": "player", "hole0": "AnimalCompanion", "hole7": [{"body": [{"value": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use", "args": {"_type": "Template17"}}], "hole6": [{"_type": "Template19"}, {"value": {"_type": "List", "elts": [{"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Misha", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Leokk", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"_type": "Template62_expr_seq"}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "<UNK>"}]}, "targets": [{"_type": "Name", "id": "card"}], "_type": "Assign"}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "<UNK>"}]}, "targets": [{"_type": "Name", "id": "card"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template14", "hole0": "Animal Companion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Misha(), hearthbreaker.cards.minions.Leokk()]\n        card = game.random_choice(<UNK>)\n        card = game.random_choice(<UNK>)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n"}, {"choice_history": [121, 201, "Animal", "Companion", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 23, 181, 323, 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Leokk", "<EOS>", 105, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "<UNK>", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 145, 250, 17, 156, 50, "opponent", "<EOS>", "append", "<EOS>", 320, 73, 186, "card", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 111, 335, 126, 155, 320, 73, 186, "card", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 130, 168, 34, 243, 25, 186, "target", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>"], "score_history": [-2.09808349609375e-05, -0.014146804809570312, -0.00027021096320822835, -7.629378160345368e-06, -0.0003668637073133141, 0.0, -2.3126602172851562e-05, -4.0531158447265625e-06, -1.33514404296875e-05, -0.0045642852783203125, -7.2479248046875e-05, -8.511180931236595e-05, -3.600116178859025e-05, -6.198883056640625e-06, 0.0, -8.344646857949556e-07, 0.0, -0.0071260929107666016, 0.0, -0.0002613067626953125, 0.0, -0.00010037422180175781, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -8.118152618408203e-05, 0.0, -0.0055027008056640625, -0.0005397796630859375, -0.007096290588378906, -7.62939453125e-06, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000704646110534668, -2.3841855067985307e-07, -0.02173614501953125, -0.000659942626953125, -0.016611099243164062, -0.0028400421142578125, -2.288818359375e-05, -0.002376556396484375, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.1471710205078125, -1.33514404296875e-05, -0.020325660705566406, -0.002390742301940918, -0.0004119873046875, -0.0009404420852661133, -7.62939453125e-06, -0.004546165466308594, -3.814697265625e-06, -0.2891206741333008, -1.1444091796875e-05, -0.0034666061401367188, -1.71661376953125e-05, -0.0003509521484375, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -0.45298099517822266, -5.7220458984375e-06, -0.008358955383300781, -0.001508949906565249, -0.00020599365234375, -0.0002866983413696289, -3.814697265625e-06, -0.00682818703353405, -1.1920928244535389e-07, -0.9321065545082092, -0.000102996826171875, -0.008100509643554688, -0.6337041854858398, -1.9073486328125e-06, -0.17239093780517578, -1.9073486328125e-06, -0.1664133071899414, -3.24249267578125e-05, -0.002484440803527832, -5.960462772236497e-07, -0.09486459940671921, -3.4927710657939315e-05, -0.10938199609518051, 0.0, -0.00020599365234375, 0.0, -0.017425537109375, 0.0, -0.24308645725250244, -1.5497195136049413e-06, -0.004014849662780762, 0.0, -8.20159912109375e-05, -0.00095367431640625, -0.007373809814453125, 0.0, -0.0004119873046875, -0.0005276203155517578, 0.0, -7.62939453125e-05, -0.0001010894775390625, -5.7220458984375e-06, 0.0, -0.0002714395523071289, -1.1920928244535389e-07, -1.1444091796875e-05, -7.43865966796875e-05, 0.0, -0.0003871917724609375, -0.00010037420724984258, -1.9073486328125e-06, -0.10321426391601562, 0.0, -1.4079151153564453, 0.0, -0.027782440185546875, -0.17548403143882751, -1.9073486328125e-06, -0.07045161724090576, -1.9073486328125e-06, -9.5367431640625e-05, -0.09865856170654297, -5.53131103515625e-05, -0.6551319360733032, -3.814697265625e-06, -0.07101249694824219, -0.21881866455078125, -7.62939453125e-06, -0.19736576080322266, -0.000286102294921875, -0.0003070831298828125, -0.009707450866699219, -0.2924518585205078, -0.0019168853759765625, -0.0931692123413086, -1.9073486328125e-05, -0.2669583559036255, -7.748596544843167e-06, -0.0005885358550585806, 0.0, -5.14984130859375e-05, 0.0, -0.0003261566162109375, 0.0, -0.0024852752685546875, -1.1444091796875e-05, -0.000278472900390625, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, -0.00012338155647739768, 0.0, -7.62939453125e-06, -0.0001850128173828125, 0.0, -8.0108642578125e-05, -0.0021719930227845907, -1.9073486328125e-06, -1.9073486328125e-06, -0.0010395050048828125, -2.09808349609375e-05, -0.0022945404052734375, -0.9461355209350586, -0.0004482269287109375, -1.1444091796875e-05, -3.4332275390625e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.34198641777038574, -6.31808916295995e-06, -0.0011072158813476562, -3.4332275390625e-05, -3.62396240234375e-05, -5.340576171875e-05, -0.006249427795410156, 0.0, -0.0002362727973377332, -1.9073468138230965e-06, -0.00421595573425293, -3.576278118089249e-07, -1.1444091796875e-05, -0.0006504058837890625, -3.814697265625e-06, -0.0047141313552856445, -7.152555099310121e-07, -0.03336906433105469, -0.001041412353515625, -0.0285491943359375, -3.814697265625e-06, -0.013630986213684082, -2.741813204920618e-06, -0.0008410198497585952, 0.0, -3.24249267578125e-05, -0.000461578369140625, -0.00125885009765625, 0.0, -0.0004177093505859375, -0.0008119344711303711, 0.0, -6.29425048828125e-05, -5.7220458984375e-05, -1.9073486328125e-06, 0.0, -0.00029027462005615234, 0.0, -3.814697265625e-06, -7.43865966796875e-05, 0.0, -8.58306884765625e-05, -5.054472785559483e-05, -1.9073486328125e-06, -0.04764270782470703, -1.1444091796875e-05, -0.0819091796875, -0.0002346038818359375, -0.000110626220703125, 0.0, -0.03842926025390625, 0.0, -0.5337810516357422, 0.0, -0.011005637235939503, 0.0, -0.018354415893554688, -1.9073486328125e-05, -0.8597412109375, -0.0013713836669921875, -0.02968120574951172, -1.1444091796875e-05, -0.00017201885930262506, -4.0650345908943564e-05, -0.0022089481353759766, -1.33514404296875e-05], "score": -10.131618730659923, "model_output": {"hole4": "player", "hole0": "AnimalCompanion", "hole7": [{"test": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "body": [{"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "<UNK>"}]}, "targets": [{"_type": "Name", "id": "card"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "card"}}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Name", "id": "target"}}, "_type": "Expr"}, {"value": {"hole1": "reveal", "_type": "Template43", "hole0": {"_type": "Template46", "hole0": "super"}}, "_type": "Expr"}], "_type": "If"}], "hole6": [{"_type": "Template19"}, {"value": {"_type": "List", "elts": [{"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Leokk", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"_type": "Template62_expr_seq"}, {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "<UNK>"}}, {"hole1": "append", "hole2": [{"_type": "Name", "id": "card"}], "_type": "Template44", "hole0": {"attr": "opponent", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template14", "hole0": "Animal Companion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Leokk(), game.other_player.minions]\n        <UNK>.summon(player, player.game, len(player.minions))\n        player.opponent.append(card)\n    if super().can_use(player, game) and len(player.minions) < 7:\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n        target.change_temp_attack(2)\n        super().reveal()\n"}, {"choice_history": [121, 201, "Animal", "Companion", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 23, 181, 323, 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Leokk", "<EOS>", 105, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "<UNK>", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 145, 250, 17, 156, 50, "opponent", "<EOS>", "append", "<EOS>", 320, 73, 186, "card", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 111, 334, 126, 155, 320, 73, 186, "card", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>"], "score_history": [-2.09808349609375e-05, -0.014146804809570312, -0.00027021096320822835, -7.629378160345368e-06, -0.0003668637073133141, 0.0, -2.3126602172851562e-05, -4.0531158447265625e-06, -1.33514404296875e-05, -0.0045642852783203125, -7.2479248046875e-05, -8.511180931236595e-05, -3.600116178859025e-05, -6.198883056640625e-06, 0.0, -8.344646857949556e-07, 0.0, -0.0071260929107666016, 0.0, -0.0002613067626953125, 0.0, -0.00010037422180175781, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -8.118152618408203e-05, 0.0, -0.0055027008056640625, -0.0005397796630859375, -0.007096290588378906, -7.62939453125e-06, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000704646110534668, -2.3841855067985307e-07, -0.02173614501953125, -0.000659942626953125, -0.016611099243164062, -0.0028400421142578125, -2.288818359375e-05, -0.002376556396484375, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.1471710205078125, -1.33514404296875e-05, -0.020325660705566406, -0.002390742301940918, -0.0004119873046875, -0.0009404420852661133, -7.62939453125e-06, -0.004546165466308594, -3.814697265625e-06, -0.2891206741333008, -1.1444091796875e-05, -0.0034666061401367188, -1.71661376953125e-05, -0.0003509521484375, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -0.45298099517822266, -5.7220458984375e-06, -0.008358955383300781, -0.001508949906565249, -0.00020599365234375, -0.0002866983413696289, -3.814697265625e-06, -0.00682818703353405, -1.1920928244535389e-07, -0.9321065545082092, -0.000102996826171875, -0.008100509643554688, -0.6337041854858398, -1.9073486328125e-06, -0.17239093780517578, -1.9073486328125e-06, -0.1664133071899414, -3.24249267578125e-05, -0.002484440803527832, -5.960462772236497e-07, -0.09486459940671921, -3.4927710657939315e-05, -0.10938199609518051, 0.0, -0.00020599365234375, 0.0, -0.017425537109375, 0.0, -0.24308645725250244, -1.5497195136049413e-06, -0.004014849662780762, 0.0, -8.20159912109375e-05, -0.00095367431640625, -0.007373809814453125, 0.0, -0.0004119873046875, -0.0005276203155517578, 0.0, -7.62939453125e-05, -0.0001010894775390625, -5.7220458984375e-06, 0.0, -0.0002714395523071289, -1.1920928244535389e-07, -1.1444091796875e-05, -7.43865966796875e-05, 0.0, -0.0003871917724609375, -0.00010037420724984258, -1.9073486328125e-06, -0.10321426391601562, 0.0, -1.4079151153564453, 0.0, -0.027782440185546875, -0.17548403143882751, -1.9073486328125e-06, -0.07045161724090576, -1.9073486328125e-06, -9.5367431640625e-05, -0.09865856170654297, -5.53131103515625e-05, -0.6551319360733032, -3.814697265625e-06, -0.07101249694824219, -0.21881866455078125, -7.62939453125e-06, -0.19736576080322266, -0.000286102294921875, -0.0003070831298828125, -0.009707450866699219, -0.2924518585205078, -0.0019168853759765625, -0.0931692123413086, -1.9073486328125e-05, -0.2669583559036255, -7.748596544843167e-06, -0.0005885358550585806, 0.0, -5.14984130859375e-05, 0.0, -0.0003261566162109375, 0.0, -0.0024852752685546875, -1.1444091796875e-05, -0.000278472900390625, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, -0.00012338155647739768, 0.0, -7.62939453125e-06, -0.0001850128173828125, 0.0, -8.0108642578125e-05, -0.0021719930227845907, -1.9073486328125e-06, -1.9073486328125e-06, -0.0010395050048828125, -2.09808349609375e-05, -0.0022945404052734375, -1.2809486389160156, -0.0001850128173828125, -3.814697265625e-06, -7.62939453125e-06, -3.4332275390625e-05, 0.0, -0.15845131874084473, -1.1324837942083832e-05, -0.0006046295166015625, -6.4849853515625e-05, -0.000202178955078125, -0.0001010894775390625, -0.013026237487792969, 0.0, -0.0002577304549049586, -2.9802276912960224e-06, -0.002997159957885742, -4.768370445162873e-07, -1.33514404296875e-05, -0.0009365081787109375, -3.814697265625e-06, -0.0072290897369384766, -8.344646857949556e-07, -0.21669769287109375, -0.0001659393310546875, -0.04939842224121094, -9.5367431640625e-06, -0.01841854862868786, -4.768367489305092e-06, -0.0008616436389274895, 0.0, -3.62396240234375e-05, -0.0005397796630859375, -0.00090789794921875, -1.9073486328125e-06, -0.0005817413330078125, -0.0012540817260742188, 0.0, -7.05718994140625e-05, -6.67572021484375e-05, -1.9073486328125e-06, 0.0, -0.00041043758392333984, 0.0, -3.814697265625e-06, -0.00018310546875, -1.9073486328125e-06, -0.0001049041748046875, -4.7683708544354886e-05, -1.9073486328125e-06, -0.36886119842529297, -3.814697265625e-06, -0.04820537567138672, 0.0, -0.23450183868408203, 0.0, -0.24730980396270752, -3.62396240234375e-05, -0.027259230613708496, 0.0, -0.18615448474884033, -2.3484230041503906e-05, -0.00296783447265625, -0.0017414093017578125, -0.000980377197265625, -0.15310001373291016, -5.7220458984375e-06, -0.0005664825439453125, -0.0003681182861328125, -0.3945884704589844, -1.1920928244535389e-07], "score": -10.541388863392974, "model_output": {"hole4": "player", "hole0": "AnimalCompanion", "hole7": [{"test": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "body": [{"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "<UNK>"}]}, "targets": [{"_type": "Name", "id": "card"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "card"}}, {"hole1": "trigger", "hole2": [{"s": "<UNK>", "_type": "Str"}, {"_type": "Name", "id": "mirror"}], "_type": "Template44", "hole0": {"attr": "player", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}}], "_type": "If"}], "hole6": [{"_type": "Template19"}, {"value": {"_type": "List", "elts": [{"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Leokk", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"_type": "Template62_expr_seq"}, {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "<UNK>"}}, {"hole1": "append", "hole2": [{"_type": "Name", "id": "card"}], "_type": "Template44", "hole0": {"attr": "opponent", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template14", "hole0": "Animal Companion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Leokk(), game.other_player.minions]\n        <UNK>.summon(player, player.game, len(player.minions))\n        player.opponent.append(card)\n    if super().can_use(player, game) and len(player.minions) < 7:\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n        minion.player.trigger('<UNK>', mirror)\n"}, {"choice_history": [121, 201, "Animal", "Companion", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 23, 181, 323, 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 90, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Leokk", "<EOS>", 105, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "<UNK>", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 145, 250, 17, 156, 50, "opponent", "<EOS>", "append", "<EOS>", 320, 73, 186, "card", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 111, 335, 126, 155, 320, 73, 186, "card", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 130, 168, 34, 243, 25, 186, "target", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 25, 186, "target", "<EOS>", "player", "<EOS>", "2", "<EOS>"], "score_history": [-2.09808349609375e-05, -0.014146804809570312, -0.00027021096320822835, -7.629378160345368e-06, -0.0003668637073133141, 0.0, -2.3126602172851562e-05, -4.0531158447265625e-06, -1.33514404296875e-05, -0.0045642852783203125, -7.2479248046875e-05, -8.511180931236595e-05, -3.600116178859025e-05, -6.198883056640625e-06, 0.0, -8.344646857949556e-07, 0.0, -0.0071260929107666016, 0.0, -0.0002613067626953125, 0.0, -0.00010037422180175781, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -8.118152618408203e-05, 0.0, -0.0055027008056640625, -0.0005397796630859375, -0.007096290588378906, -7.62939453125e-06, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000704646110534668, -2.3841855067985307e-07, -0.02173614501953125, -0.000659942626953125, -0.016611099243164062, -0.0028400421142578125, -2.288818359375e-05, -0.002376556396484375, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.1471710205078125, -1.33514404296875e-05, -0.020325660705566406, -0.002390742301940918, -0.0004119873046875, -0.0009404420852661133, -7.62939453125e-06, -0.004546165466308594, -3.814697265625e-06, -0.2891206741333008, -1.1444091796875e-05, -0.0034666061401367188, -1.71661376953125e-05, -0.0003509521484375, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -0.45298099517822266, -5.7220458984375e-06, -0.008358955383300781, -0.001508949906565249, -0.00020599365234375, -0.0002866983413696289, -3.814697265625e-06, -0.00682818703353405, -1.1920928244535389e-07, -0.9321065545082092, -0.000102996826171875, -0.008100509643554688, -0.6337041854858398, -1.9073486328125e-06, -0.17239093780517578, -1.9073486328125e-06, -0.1664133071899414, -3.24249267578125e-05, -0.002484440803527832, -5.960462772236497e-07, -0.09486459940671921, -3.4927710657939315e-05, -0.10938199609518051, 0.0, -0.00020599365234375, 0.0, -0.017425537109375, 0.0, -0.24308645725250244, -1.5497195136049413e-06, -0.004014849662780762, 0.0, -8.20159912109375e-05, -0.00095367431640625, -0.007373809814453125, 0.0, -0.0004119873046875, -0.0005276203155517578, 0.0, -7.62939453125e-05, -0.0001010894775390625, -5.7220458984375e-06, 0.0, -0.0002714395523071289, -1.1920928244535389e-07, -1.1444091796875e-05, -7.43865966796875e-05, 0.0, -0.0003871917724609375, -0.00010037420724984258, -1.9073486328125e-06, -0.10321426391601562, 0.0, -1.4079151153564453, 0.0, -0.027782440185546875, -0.17548403143882751, -1.9073486328125e-06, -0.07045161724090576, -1.9073486328125e-06, -9.5367431640625e-05, -0.09865856170654297, -5.53131103515625e-05, -0.6551319360733032, -3.814697265625e-06, -0.07101249694824219, -0.21881866455078125, -7.62939453125e-06, -0.19736576080322266, -0.000286102294921875, -0.0003070831298828125, -0.009707450866699219, -0.2924518585205078, -0.0019168853759765625, -0.0931692123413086, -1.9073486328125e-05, -0.2669583559036255, -7.748596544843167e-06, -0.0005885358550585806, 0.0, -5.14984130859375e-05, 0.0, -0.0003261566162109375, 0.0, -0.0024852752685546875, -1.1444091796875e-05, -0.000278472900390625, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, -0.00012338155647739768, 0.0, -7.62939453125e-06, -0.0001850128173828125, 0.0, -8.0108642578125e-05, -0.0021719930227845907, -1.9073486328125e-06, -1.9073486328125e-06, -0.0010395050048828125, -2.09808349609375e-05, -0.0022945404052734375, -0.9461355209350586, -0.0004482269287109375, -1.1444091796875e-05, -3.4332275390625e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.34198641777038574, -6.31808916295995e-06, -0.0011072158813476562, -3.4332275390625e-05, -3.62396240234375e-05, -5.340576171875e-05, -0.006249427795410156, 0.0, -0.0002362727973377332, -1.9073468138230965e-06, -0.00421595573425293, -3.576278118089249e-07, -1.1444091796875e-05, -0.0006504058837890625, -3.814697265625e-06, -0.0047141313552856445, -7.152555099310121e-07, -0.03336906433105469, -0.001041412353515625, -0.0285491943359375, -3.814697265625e-06, -0.013630986213684082, -2.741813204920618e-06, -0.0008410198497585952, 0.0, -3.24249267578125e-05, -0.000461578369140625, -0.00125885009765625, 0.0, -0.0004177093505859375, -0.0008119344711303711, 0.0, -6.29425048828125e-05, -5.7220458984375e-05, -1.9073486328125e-06, 0.0, -0.00029027462005615234, 0.0, -3.814697265625e-06, -7.43865966796875e-05, 0.0, -8.58306884765625e-05, -5.054472785559483e-05, -1.9073486328125e-06, -0.04764270782470703, -1.1444091796875e-05, -0.0819091796875, -0.0002346038818359375, -0.000110626220703125, 0.0, -0.03842926025390625, 0.0, -0.5337810516357422, 0.0, -0.011005637235939503, 0.0, -0.018354415893554688, -1.9073486328125e-05, -0.5509281158447266, -1.33514404296875e-05, -0.6939535140991211, 0.0, -0.015387535095214844, 0.0, -0.7807979583740234, 0.0, -0.005366247147321701, 0.0], "score": -11.284825239433943, "model_output": {"hole4": "player", "hole0": "AnimalCompanion", "hole7": [{"test": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "body": [{"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "<UNK>"}]}, "targets": [{"_type": "Name", "id": "card"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "card"}}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Name", "id": "target"}}, "_type": "Expr"}, {"value": {"hole1": "player", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Name", "id": "target"}}, "_type": "Expr"}], "_type": "If"}], "hole6": [{"_type": "Template19"}, {"value": {"_type": "List", "elts": [{"hole1": "Huffer", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "Leokk", "_type": "Template43", "hole0": {"attr": "hunter", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"_type": "Template62_expr_seq"}, {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Name", "id": "<UNK>"}}, {"hole1": "append", "hole2": [{"_type": "Name", "id": "card"}], "_type": "Template44", "hole0": {"attr": "opponent", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template14", "hole0": "Animal Companion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Leokk(), game.other_player.minions]\n        <UNK>.summon(player, player.game, len(player.minions))\n        player.opponent.append(card)\n    if super().can_use(player, game) and len(player.minions) < 7:\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n        target.change_temp_attack(2)\n        target.player(2)\n"}], "index": 2}
{"beams": [{"choice_history": [121, 200, "Arcane", "Explosion", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-5.14984130859375e-05, -0.0001125335693359375, -4.768370445162873e-07, -4.649158654501662e-06, -2.503394853192731e-06, -2.145752659998834e-06, -0.00015079975128173828, -0.0001214742660522461, -0.003284454345703125, -0.0005702972412109375, -0.0003185272216796875, -2.145764938177308e-06, -7.95125961303711e-05, -7.748603820800781e-06, 0.0, -2.980193130497355e-06, 0.0, -0.003711700439453125, -7.62939453125e-06, -0.00106048583984375, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.0371204552939162e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-05, -3.62396240234375e-05, -0.000110626220703125, 0.0, -0.009765625, -0.000316619873046875, -0.000274658203125, -0.0001678466796875, -0.0006561279296875, -2.288818359375e-05, -0.00023363465152215213, -2.264974000354414e-06, -0.0001125335693359375, -5.7220458984375e-05, -2.09808349609375e-05, 0.0, -2.09808349609375e-05, 0.0, -0.0002344846143387258, -0.0001678466796875, -0.0002565380127634853, 0.0, -0.0002574920654296875, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -7.82012939453125e-05, -1.1920922133867862e-06, -0.005622148513793945, 0.0, -0.00024270080029964447, -9.5367431640625e-06, -0.000217437744140625, -5.7220458984375e-06, -9.72747802734375e-05, -0.0001010894775390625, -1.9073486328125e-06, -0.0001776218123268336, -4.565611743601039e-05, -0.00027450211928226054, -2.3841855067985307e-07, -4.9591064453125e-05, -0.003231048583984375, -0.0001392364501953125, -3.24249267578125e-05, -2.372264498262666e-05, -1.2636104656849056e-05, -0.0001974105543922633, -1.1920928244535389e-07, -4.57763671875e-05], "score": -0.033010657777218455, "model_output": {"hole4": "player", "hole0": "ArcaneExplosion", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Explosion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Arcane", "Explosion", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-5.14984130859375e-05, -0.0001125335693359375, -4.768370445162873e-07, -4.649158654501662e-06, -2.503394853192731e-06, -2.145752659998834e-06, -0.00015079975128173828, -0.0001214742660522461, -0.003284454345703125, -0.0005702972412109375, -0.0003185272216796875, -2.145764938177308e-06, -7.95125961303711e-05, -7.748603820800781e-06, 0.0, -2.980193130497355e-06, 0.0, -0.003711700439453125, -7.62939453125e-06, -0.00106048583984375, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.0371204552939162e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-05, -3.62396240234375e-05, -0.000110626220703125, 0.0, -0.009765625, -0.000316619873046875, -0.000274658203125, -0.0001678466796875, -0.0006561279296875, -2.288818359375e-05, -0.00023363465152215213, -2.264974000354414e-06, -0.0001125335693359375, -5.7220458984375e-05, -2.09808349609375e-05, 0.0, -2.09808349609375e-05, 0.0, -0.0002344846143387258, -0.0001678466796875, -0.0002565380127634853, 0.0, -0.0002574920654296875, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -7.82012939453125e-05, -1.1920922133867862e-06, -5.365411758422852, -8.58306884765625e-05, -0.0002623790060169995, -3.814697265625e-06, -0.000225067138671875, -1.71661376953125e-05, -9.72747802734375e-05, -8.58306884765625e-05, -1.9073486328125e-06, -0.0001434087462257594, -3.886147169396281e-05, -0.0002697350282687694, -2.3841855067985307e-07, -4.76837158203125e-05, -0.0025615692138671875, -0.0001354217529296875, -2.86102294921875e-05, -2.3841854272177443e-05, -1.2993727978027891e-05, -0.0001935958571266383, -1.1920928244535389e-07, -4.57763671875e-05], "score": -5.392175740451044, "model_output": {"hole4": "player", "hole0": "ArcaneExplosion", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Explosion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.current_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Arcane", "Explosion", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-5.14984130859375e-05, -0.0001125335693359375, -4.768370445162873e-07, -4.649158654501662e-06, -2.503394853192731e-06, -2.145752659998834e-06, -0.00015079975128173828, -0.0001214742660522461, -0.003284454345703125, -0.0005702972412109375, -0.0003185272216796875, -2.145764938177308e-06, -7.95125961303711e-05, -7.748603820800781e-06, 0.0, -2.980193130497355e-06, 0.0, -6.17111873626709, -1.1444091796875e-05, -0.001628875732421875, -1.9073486328125e-06, -4.76837158203125e-05, 0.0, -9.894361937767826e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-05, -2.86102294921875e-05, -0.0001239776611328125, 0.0, -0.012508392333984375, -0.00041961669921875, -0.000244140625, -0.0002002716064453125, -0.0005321502685546875, -2.09808349609375e-05, -0.00025985611137002707, -2.264974000354414e-06, -0.0001220703125, -6.103515625e-05, -1.9073486328125e-05, 0.0, -2.09808349609375e-05, 0.0, -0.00024449819466099143, -0.0001735687255859375, -0.0002611870877444744, 0.0, -0.000274658203125, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.82012939453125e-05, -1.1920922133867862e-06, -0.005841612815856934, 0.0, -0.00024162806221283972, -9.5367431640625e-06, -0.000217437744140625, -7.62939453125e-06, -0.0001010894775390625, -0.000102996826171875, -1.9073486328125e-06, -0.00017845627735368907, -4.482168878894299e-05, -0.00027628979296423495, -2.3841855067985307e-07, -4.9591064453125e-05, -0.0031375885009765625, -0.0001392364501953125, -3.0517578125e-05, -2.372264498262666e-05, -1.2755313036905136e-05, -0.00019752974912989885, -1.1920928244535389e-07, -4.57763671875e-05], "score": -6.203917196533062, "model_output": {"hole4": "player", "hole0": "ArcaneExplosion", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Explosion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Arcane", "Explosion", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-5.14984130859375e-05, -0.0001125335693359375, -4.768370445162873e-07, -4.649158654501662e-06, -2.503394853192731e-06, -2.145752659998834e-06, -0.00015079975128173828, -0.0001214742660522461, -0.003284454345703125, -0.0005702972412109375, -0.0003185272216796875, -2.145764938177308e-06, -7.95125961303711e-05, -7.748603820800781e-06, 0.0, -2.980193130497355e-06, 0.0, -0.003711700439453125, -7.62939453125e-06, -0.00106048583984375, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.0371204552939162e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-05, -3.62396240234375e-05, -0.000110626220703125, 0.0, -5.389209747314453, -0.0004711151123046875, -0.001674652099609375, -0.00017547607421875, -0.0013294219970703125, -8.20159912109375e-05, -0.00017058310913853347, -4.649158654501662e-06, -0.000209808349609375, -3.24249267578125e-05, -3.4332275390625e-05, 0.0, -2.6702880859375e-05, 0.0, -0.0003054141707252711, -0.000133514404296875, -0.00024569008382968605, 0.0, -0.0001964569091796875, -2.47955322265625e-05, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -7.43865966796875e-05, -1.0728830375228426e-06, -0.005310654640197754, 0.0, -0.00025926719536073506, -9.5367431640625e-06, -0.0001850128173828125, -5.7220458984375e-06, -7.82012939453125e-05, -9.72747802734375e-05, -1.9073486328125e-06, -0.00016796585987322032, -4.911301948595792e-05, -0.0002924975997302681, -2.3841855067985307e-07, -4.57763671875e-05, -0.00298309326171875, -0.0001354217529296875, -3.0517578125e-05, -2.360343569307588e-05, -1.2040065485052764e-05, -0.0001996755163418129, -1.1920928244535389e-07, -4.38690185546875e-05, -0.013461112976074219, -0.001483917236328125, -0.0004673004150390625, -1.9073486328125e-06, -2.5033950805664062e-05, -3.814697265625e-06, -0.1351165771484375, -1.9073486328125e-06, -0.08831024169921875, -9.5367431640625e-06, -6.866455078125e-05, 0.0, -0.0002747774124145508, 0.0, -0.6459140777587891, -3.4332275390625e-05, -0.0005521686398424208, 0.0, -0.0002498626708984375, -3.62396240234375e-05, -0.00035858154296875, -0.001979827880859375, -3.814697265625e-06, -3.0279157726909034e-05, -7.033342626527883e-06, -0.024486852809786797, 0.0, -6.67572021484375e-05, -0.000888824462890625, -0.0001316070556640625, -1.9073486328125e-05, -2.3365017113974318e-05, -1.4662635294371285e-05, -0.00020861618395429105, -1.1920928244535389e-07, -2.47955322265625e-05], "score": -6.3284041897126855, "model_output": {"hole4": "player", "hole0": "ArcaneExplosion", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Explosion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n        for minion in game.current_player.minions:\n            minion.damage(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Arcane", "Explosion", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-5.14984130859375e-05, -0.0001125335693359375, -4.768370445162873e-07, -4.649158654501662e-06, -2.503394853192731e-06, -2.145752659998834e-06, -0.00015079975128173828, -0.0001214742660522461, -0.003284454345703125, -0.0005702972412109375, -0.0003185272216796875, -2.145764938177308e-06, -7.95125961303711e-05, -7.748603820800781e-06, 0.0, -2.980193130497355e-06, 0.0, -0.003711700439453125, -7.62939453125e-06, -0.00106048583984375, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.0371204552939162e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-05, -3.62396240234375e-05, -0.000110626220703125, 0.0, -5.389209747314453, -0.0004711151123046875, -0.001674652099609375, -0.00017547607421875, -0.0013294219970703125, -8.20159912109375e-05, -0.00017058310913853347, -4.649158654501662e-06, -0.000209808349609375, -3.24249267578125e-05, -3.4332275390625e-05, 0.0, -2.6702880859375e-05, 0.0, -0.0003054141707252711, -0.000133514404296875, -0.00024569008382968605, 0.0, -0.0001964569091796875, -2.47955322265625e-05, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -7.43865966796875e-05, -1.0728830375228426e-06, -0.005310654640197754, 0.0, -0.00025926719536073506, -9.5367431640625e-06, -0.0001850128173828125, -5.7220458984375e-06, -7.82012939453125e-05, -9.72747802734375e-05, -1.9073486328125e-06, -0.00016796585987322032, -4.911301948595792e-05, -0.0002924975997302681, -2.3841855067985307e-07, -4.57763671875e-05, -0.00298309326171875, -0.0001354217529296875, -3.0517578125e-05, -2.360343569307588e-05, -1.2040065485052764e-05, -0.0001996755163418129, -1.1920928244535389e-07, -4.38690185546875e-05, -0.013461112976074219, -0.001483917236328125, -0.0004673004150390625, -1.9073486328125e-06, -2.5033950805664062e-05, -3.814697265625e-06, -0.1351165771484375, -1.9073486328125e-06, -0.08831024169921875, -9.5367431640625e-06, -6.866455078125e-05, 0.0, -0.0002747774124145508, 0.0, -0.7777910232543945, -1.1920928244535389e-07, -0.012772037647664547, -1.9073486328125e-06, -0.000278472900390625, -3.814697265625e-06, -0.0003147125244140625, -0.002197265625, -3.814697265625e-06, -3.802776336669922e-05, -8.344639354618266e-06, -0.025590065866708755, 0.0, -7.2479248046875e-05, -0.000804901123046875, -0.00012969970703125, -1.9073486328125e-05, -2.3365017113974318e-05, -1.4305012882687151e-05, -0.00020432464953046292, -1.1920928244535389e-07, -2.47955322265625e-05], "score": -6.473665967686834, "model_output": {"hole4": "player", "hole0": "ArcaneExplosion", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Explosion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n        for minion in game.other_player.minions:\n            minion.damage(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Arcane", "Explosion", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>"], "score_history": [-5.14984130859375e-05, -0.0001125335693359375, -4.768370445162873e-07, -4.649158654501662e-06, -2.503394853192731e-06, -2.145752659998834e-06, -0.00015079975128173828, -0.0001214742660522461, -0.003284454345703125, -0.0005702972412109375, -0.0003185272216796875, -2.145764938177308e-06, -7.95125961303711e-05, -7.748603820800781e-06, 0.0, -2.980193130497355e-06, 0.0, -0.003711700439453125, -7.62939453125e-06, -0.00106048583984375, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.0371204552939162e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-05, -3.62396240234375e-05, -0.000110626220703125, 0.0, -5.411083221435547, -0.0001087188720703125, -0.0013942718505859375, -1.52587890625e-05, -4.00543212890625e-05, -0.0037469863891601562, -2.47955322265625e-05, -0.003207801142707467, -0.0003930330276489258, -3.0517578125e-05, -0.0003871917724609375, -5.7220458984375e-06, 0.0, -9.5367431640625e-05, -1.9073486328125e-06, -0.00020170211791992188, -0.0002671480178833008, -0.00020408039563335478, -1.9073486328125e-06, -0.0004520416259765625, -4.38690185546875e-05, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -2.6702880859375e-05, -1.1920922133867862e-06, -0.004263401031494141, 0.0, -0.0001145592104876414, -5.7220458984375e-06, -9.1552734375e-05, -2.288818359375e-05, -1.33514404296875e-05, 0.0, -0.00046443939208984375, -1.9073486328125e-05, -0.032407522201538086, -1.71661376953125e-05, -0.0001468658447265625, -2.288818359375e-05, -1.1444091796875e-05, -7.2479248046875e-05, -0.0001544952392578125, -1.9073486328125e-06, 0.0, -0.0003566741943359375, 0.0, -0.0074089765548706055, -8.20159912109375e-05, -0.003212571144104004, -5.7220458984375e-06, -0.3368186950683594, -0.0001888275146484375, -1.71661376953125e-05, -1.9073486328125e-06, -0.0078029632568359375, -5.7220458984375e-06, -0.05809663608670235, 0.0, -3.814697265625e-05, -0.0034656524658203125, -1.9073486328125e-06, -6.103515625e-05, -1.9073486328125e-05, -7.05718994140625e-05, 0.0, -0.000835418701171875, 0.0, -0.038710594177246094, -1.33514404296875e-05, -0.6469266414642334, -5.7220458984375e-06], "score": -6.573514441822567, "model_output": {"hole4": "player", "hole0": "ArcaneExplosion", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"hole1": "append", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Explosion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.current_player.minions)\n"}, {"choice_history": [121, 200, "Arcane", "Explosion", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-5.14984130859375e-05, -0.0001125335693359375, -4.768370445162873e-07, -4.649158654501662e-06, -2.503394853192731e-06, -2.145752659998834e-06, -0.00015079975128173828, -0.0001214742660522461, -0.003284454345703125, -0.0005702972412109375, -0.0003185272216796875, -2.145764938177308e-06, -7.95125961303711e-05, -7.748603820800781e-06, 0.0, -2.980193130497355e-06, 0.0, -6.797679901123047, -1.9073486328125e-06, -0.00492095947265625, 0.0, -4.00543212890625e-05, 0.0, -8.463855920126662e-06, 0.0, -2.09808349609375e-05, -7.43865966796875e-05, -4.1961669921875e-05, -0.0001201629638671875, 0.0, -0.01226806640625, -0.0003452301025390625, -0.0002536773681640625, -0.000209808349609375, -0.00054168701171875, -2.288818359375e-05, -0.00024734120233915746, -2.264974000354414e-06, -0.0001239776611328125, -5.91278076171875e-05, -1.9073486328125e-05, 0.0, -2.09808349609375e-05, 0.0, -0.0002374648320255801, -0.0001735687255859375, -0.00026059107040055096, 0.0, -0.0002727508544921875, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.82012939453125e-05, -1.1920922133867862e-06, -0.005817532539367676, 0.0, -0.0002411512832622975, -9.5367431640625e-06, -0.000217437744140625, -7.62939453125e-06, -9.918212890625e-05, -0.000102996826171875, -1.9073486328125e-06, -0.00017750260303728282, -4.5298504119273275e-05, -0.00027628979296423495, -2.3841855067985307e-07, -4.9591064453125e-05, -0.0031671524047851562, -0.0001392364501953125, -3.0517578125e-05, -2.372264498262666e-05, -1.2755313036905136e-05, -0.00019752974912989885, -1.1920928244535389e-07, -4.57763671875e-05], "score": -6.8334806494691165, "model_output": {"hole4": "player", "hole0": "ArcaneExplosion", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Explosion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Arcane", "Explosion", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-5.14984130859375e-05, -0.0001125335693359375, -4.768370445162873e-07, -4.649158654501662e-06, -2.503394853192731e-06, -2.145752659998834e-06, -0.00015079975128173828, -0.0001214742660522461, -0.003284454345703125, -0.0005702972412109375, -0.0003185272216796875, -2.145764938177308e-06, -7.95125961303711e-05, -7.748603820800781e-06, 0.0, -2.980193130497355e-06, 0.0, -0.003711700439453125, -7.62939453125e-06, -7.167716979980469, 0.0, -0.0001049041748046875, 0.0, -1.0371204552939162e-05, 0.0, -3.24249267578125e-05, -7.43865966796875e-05, -2.288818359375e-05, -8.594989776611328e-05, 0.0, -0.008150100708007812, -0.0003299713134765625, -0.00031280517578125, -0.0001544952392578125, -0.0006694793701171875, -2.288818359375e-05, -0.0002590221702121198, -2.622600959512056e-06, -0.000110626220703125, -4.57763671875e-05, -1.9073486328125e-05, 0.0, -2.09808349609375e-05, 0.0, -0.00025641912361606956, -0.0001659393310546875, -0.0002642865583766252, 0.0, -0.0002651214599609375, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.82012939453125e-05, -1.1920922133867862e-06, -0.005751967430114746, 0.0, -0.0002424623817205429, -9.5367431640625e-06, -0.000217437744140625, -5.7220458984375e-06, -9.72747802734375e-05, -0.0001010894775390625, -1.9073486328125e-06, -0.00017666813801042736, -4.577531944960356e-05, -0.0002750979911070317, -2.3841855067985307e-07, -4.9591064453125e-05, -0.0033168792724609375, -0.0001392364501953125, -3.24249267578125e-05, -2.372264498262666e-05, -1.2636104656849056e-05, -0.00019752974912989885, -1.1920928244535389e-07, -4.57763671875e-05], "score": -7.198410204853268, "model_output": {"hole4": "player", "hole0": "ArcaneExplosion", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template15", "hole3": "EPIC", "hole0": "Arcane Explosion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Arcane", "Explosion", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 110, 110], "score_history": [-5.14984130859375e-05, -0.0001125335693359375, -4.768370445162873e-07, -4.649158654501662e-06, -2.503394853192731e-06, -2.145752659998834e-06, -0.00015079975128173828, -0.0001214742660522461, -0.003284454345703125, -0.0005702972412109375, -0.0003185272216796875, -2.145764938177308e-06, -7.95125961303711e-05, -7.748603820800781e-06, 0.0, -2.980193130497355e-06, 0.0, -0.003711700439453125, -7.62939453125e-06, -0.00106048583984375, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.0371204552939162e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-05, -3.62396240234375e-05, -0.000110626220703125, 0.0, -0.009765625, -0.000316619873046875, -0.000274658203125, -0.0001678466796875, -0.0006561279296875, -2.288818359375e-05, -0.00023363465152215213, -2.264974000354414e-06, -0.0001125335693359375, -5.7220458984375e-05, -2.09808349609375e-05, 0.0, -2.09808349609375e-05, 0.0, -0.0002344846143387258, -0.0001678466796875, -0.0002565380127634853, 0.0, -0.0002574920654296875, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -7.82012939453125e-05, -1.1920922133867862e-06, -0.005622148513793945, 0.0, -0.00024270080029964447, -9.5367431640625e-06, -0.000217437744140625, -5.7220458984375e-06, -9.72747802734375e-05, -0.0001010894775390625, -1.9073486328125e-06, -0.0001776218123268336, -4.565611743601039e-05, -0.00027450211928226054, -2.3841855067985307e-07, -4.9591064453125e-05, -5.972548484802246, -0.000659942626953125, -0.00103759765625, -3.814697265625e-06, -0.0006008148193359375, -0.0050346823409199715, -2.622604142743512e-06, -4.76837158203125e-05, -2.04738712310791, -0.0024127960205078125], "score": -8.059063845327131, "model_output": {"hole4": "player", "hole0": "ArcaneExplosion", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"func": {"attr": "effective_spell_damage", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Template68"}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Explosion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(self), self)\n"}, {"choice_history": [121, 200, "Arcane", "Explosion", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 321, 102, 104, 110], "score_history": [-5.14984130859375e-05, -0.0001125335693359375, -4.768370445162873e-07, -4.649158654501662e-06, -2.503394853192731e-06, -2.145752659998834e-06, -0.00015079975128173828, -0.0001214742660522461, -0.003284454345703125, -0.0005702972412109375, -0.0003185272216796875, -2.145764938177308e-06, -7.95125961303711e-05, -7.748603820800781e-06, 0.0, -2.980193130497355e-06, 0.0, -0.003711700439453125, -7.62939453125e-06, -0.00106048583984375, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.0371204552939162e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-05, -3.62396240234375e-05, -0.000110626220703125, 0.0, -0.009765625, -0.000316619873046875, -0.000274658203125, -0.0001678466796875, -0.0006561279296875, -2.288818359375e-05, -0.00023363465152215213, -2.264974000354414e-06, -0.0001125335693359375, -5.7220458984375e-05, -2.09808349609375e-05, 0.0, -2.09808349609375e-05, 0.0, -0.0002344846143387258, -0.0001678466796875, -0.0002565380127634853, 0.0, -0.0002574920654296875, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -7.82012939453125e-05, -1.1920922133867862e-06, -0.005622148513793945, 0.0, -0.00024270080029964447, -9.5367431640625e-06, -0.000217437744140625, -5.7220458984375e-06, -9.72747802734375e-05, -0.0001010894775390625, -1.9073486328125e-06, -0.0001776218123268336, -4.565611743601039e-05, -0.00027450211928226054, -2.3841855067985307e-07, -4.9591064453125e-05, -5.972548484802246, -0.000659942626953125, -0.00103759765625, -3.814697265625e-06, -0.0006008148193359375, -0.0050346823409199715, -2.622604142743512e-06, -4.76837158203125e-05, -0.9213247299194336, -0.00072479248046875, -0.000530242919921875, -3.814697265625e-06, -0.0041065216064453125, -1.9073486328125e-06, -0.004220247268676758, -9.179073458653875e-06, -0.01056389044970274, -8.344646857949556e-07, -0.4966564178466797, -0.607670783996582, -0.009319305419921875, -0.004024505615234375], "score": -8.068421099305823, "model_output": {"hole4": "player", "hole0": "ArcaneExplosion", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"func": {"attr": "effective_spell_damage", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"func": {"attr": "<UNK>", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Template59"}, {"_type": "Template61"}]}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Explosion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(game.<UNK>(2, 3)), self\n                )\n"}, {"choice_history": [121, 200, "Arcane", "Explosion", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "HUNTER", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-5.14984130859375e-05, -0.0001125335693359375, -4.768370445162873e-07, -4.649158654501662e-06, -2.503394853192731e-06, -2.145752659998834e-06, -0.00015079975128173828, -0.0001214742660522461, -0.003284454345703125, -0.0005702972412109375, -0.0003185272216796875, -2.145764938177308e-06, -7.95125961303711e-05, -7.748603820800781e-06, 0.0, -2.980193130497355e-06, 0.0, -0.003711700439453125, -7.62939453125e-06, -0.00106048583984375, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.0371204552939162e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-05, -3.62396240234375e-05, -0.000110626220703125, 0.0, -0.009765625, -0.000316619873046875, -0.000274658203125, -0.0001678466796875, -0.0006561279296875, -2.288818359375e-05, -0.00023363465152215213, -2.264974000354414e-06, -0.0001125335693359375, -5.7220458984375e-05, -2.09808349609375e-05, 0.0, -2.09808349609375e-05, 0.0, -0.0002344846143387258, -0.0001678466796875, -0.0002565380127634853, 0.0, -0.0002574920654296875, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -7.82012939453125e-05, -1.1920922133867862e-06, -8.069766998291016, 0.0, -0.0007564843399450183, -1.9073486328125e-06, -0.000156402587890625, -3.814697265625e-06, -8.58306884765625e-05, -9.918212890625e-05, -3.814697265625e-06, -0.00013959403440821916, -4.017272294731811e-05, -0.00025316933169960976, -2.3841855067985307e-07, -5.7220458984375e-05, -0.0027322769165039062, -0.0001354217529296875, -3.0517578125e-05, -2.4557106371503323e-05, -1.537788011773955e-05, -0.00018119809101335704, -1.1920928244535389e-07, -6.103515625e-05], "score": -8.09702818938657, "model_output": {"hole4": "player", "hole0": "ArcaneExplosion", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "HUNTER", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Explosion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.HUNTER.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Arcane", "Explosion", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-5.14984130859375e-05, -0.0001125335693359375, -4.768370445162873e-07, -4.649158654501662e-06, -2.503394853192731e-06, -2.145752659998834e-06, -0.00015079975128173828, -0.0001214742660522461, -0.003284454345703125, -0.0005702972412109375, -0.0003185272216796875, -2.145764938177308e-06, -7.95125961303711e-05, -7.748603820800781e-06, 0.0, -2.980193130497355e-06, 0.0, -0.003711700439453125, -7.62939453125e-06, -0.00106048583984375, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.0371204552939162e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-05, -3.62396240234375e-05, -0.000110626220703125, 0.0, -0.009765625, -0.000316619873046875, -0.000274658203125, -0.0001678466796875, -0.0006561279296875, -2.288818359375e-05, -0.00023363465152215213, -2.264974000354414e-06, -0.0001125335693359375, -5.7220458984375e-05, -2.09808349609375e-05, 0.0, -2.09808349609375e-05, 0.0, -0.0002344846143387258, -0.0001678466796875, -0.0002565380127634853, 0.0, -0.0002574920654296875, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -7.82012939453125e-05, -1.1920922133867862e-06, -0.005622148513793945, 0.0, -0.00024270080029964447, -9.5367431640625e-06, -0.000217437744140625, -5.7220458984375e-06, -9.72747802734375e-05, -0.0001010894775390625, -1.9073486328125e-06, -0.0001776218123268336, -4.565611743601039e-05, -8.589127540588379, -1.0728830375228426e-06, -4.1961669921875e-05, -0.0012950897216796875, -0.0001659393310546875, -6.866455078125e-05, -0.000639796257019043, -3.2186455882765586e-06, -0.00031864616903476417, 0.0, -7.62939453125e-05], "score": -8.620742175095302, "model_output": {"hole4": "player", "hole0": "ArcaneExplosion", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Explosion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.heal(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Arcane", "Explosion", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-5.14984130859375e-05, -0.0001125335693359375, -4.768370445162873e-07, -4.649158654501662e-06, -2.503394853192731e-06, -2.145752659998834e-06, -0.00015079975128173828, -0.0001214742660522461, -0.003284454345703125, -0.0005702972412109375, -0.0003185272216796875, -2.145764938177308e-06, -7.95125961303711e-05, -7.748603820800781e-06, 0.0, -2.980193130497355e-06, 0.0, -8.611251831054688, -5.7220458984375e-06, -0.0071163177490234375, 0.0, -4.38690185546875e-05, 0.0, -9.059900548891164e-06, 0.0, -2.09808349609375e-05, -9.34600830078125e-05, -3.62396240234375e-05, -0.0001220703125, 0.0, -0.014293670654296875, -0.00045013427734375, -0.00020599365234375, -0.000217437744140625, -0.00052642822265625, -2.47955322265625e-05, -0.00024912937078624964, -2.264974000354414e-06, -0.000125885009765625, -6.29425048828125e-05, -1.9073486328125e-05, 0.0, -2.09808349609375e-05, 0.0, -0.00024437898537144065, -0.0001735687255859375, -0.0002595182158984244, 0.0, -0.0002689361572265625, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.82012939453125e-05, -1.1920922133867862e-06, -0.005722165107727051, 0.0, -0.00024174724239856005, -9.5367431640625e-06, -0.000217437744140625, -7.62939453125e-06, -9.918212890625e-05, -0.0001049041748046875, -1.9073486328125e-06, -0.00017845627735368907, -4.470248313737102e-05, -0.0002754555316641927, -2.3841855067985307e-07, -4.9591064453125e-05, -0.003143310546875, -0.0001392364501953125, -3.0517578125e-05, -2.372264498262666e-05, -1.2755313036905136e-05, -0.00019752974912989885, -1.1920928244535389e-07, -4.57763671875e-05], "score": -8.651240878792656, "model_output": {"hole4": "player", "hole0": "ArcaneExplosion", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "ROGUE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Explosion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Arcane", "Explosion", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "damage", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-5.14984130859375e-05, -0.0001125335693359375, -4.768370445162873e-07, -4.649158654501662e-06, -2.503394853192731e-06, -2.145752659998834e-06, -0.00015079975128173828, -0.0001214742660522461, -0.003284454345703125, -0.0005702972412109375, -0.0003185272216796875, -2.145764938177308e-06, -7.95125961303711e-05, -7.748603820800781e-06, 0.0, -2.980193130497355e-06, 0.0, -0.003711700439453125, -7.62939453125e-06, -0.00106048583984375, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.0371204552939162e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-05, -3.62396240234375e-05, -0.000110626220703125, 0.0, -0.009765625, -0.000316619873046875, -0.000274658203125, -0.0001678466796875, -0.0006561279296875, -2.288818359375e-05, -8.643660545349121, -1.1920928244535389e-07, -0.0001277923583984375, -1.1444091796875e-05, -0.0006160736083984375, 0.0, -2.47955322265625e-05, 0.0, -0.0015941858291625977, -9.34600830078125e-05, -0.00034105771919712424, 0.0, -0.00020599365234375, -2.86102294921875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -7.43865966796875e-05, -1.311301275563892e-06, -0.004293203353881836, -1.1920928244535389e-07, -0.0002425815910100937, -9.5367431640625e-06, -0.000217437744140625, -5.7220458984375e-06, -9.72747802734375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.00018167492817156017, -4.851700214203447e-05, -0.00027986508212052286, -2.3841855067985307e-07, -4.76837158203125e-05, -0.0029773712158203125, -0.000141143798828125, -3.0517578125e-05, -2.372264498262666e-05, -1.2397689715726301e-05, -0.00019562240049708635, -1.1920928244535389e-07, -4.57763671875e-05], "score": -8.676747988241068, "model_output": {"hole4": "player", "hole0": "ArcaneExplosion", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "damage"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Explosion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for damage in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Arcane", "Explosion", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 110, 110], "score_history": [-5.14984130859375e-05, -0.0001125335693359375, -4.768370445162873e-07, -4.649158654501662e-06, -2.503394853192731e-06, -2.145752659998834e-06, -0.00015079975128173828, -0.0001214742660522461, -0.003284454345703125, -0.0005702972412109375, -0.0003185272216796875, -2.145764938177308e-06, -7.95125961303711e-05, -7.748603820800781e-06, 0.0, -2.980193130497355e-06, 0.0, -0.003711700439453125, -7.62939453125e-06, -0.00106048583984375, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.0371204552939162e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-05, -3.62396240234375e-05, -0.000110626220703125, 0.0, -0.009765625, -0.000316619873046875, -0.000274658203125, -0.0001678466796875, -0.0006561279296875, -2.288818359375e-05, -0.00023363465152215213, -2.264974000354414e-06, -0.0001125335693359375, -5.7220458984375e-05, -2.09808349609375e-05, 0.0, -2.09808349609375e-05, 0.0, -0.0002344846143387258, -0.0001678466796875, -0.0002565380127634853, 0.0, -0.0002574920654296875, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -7.82012939453125e-05, -1.1920922133867862e-06, -0.005622148513793945, 0.0, -0.00024270080029964447, -9.5367431640625e-06, -0.000217437744140625, -5.7220458984375e-06, -9.72747802734375e-05, -0.0001010894775390625, -1.9073486328125e-06, -0.0001776218123268336, -4.565611743601039e-05, -0.00027450211928226054, -2.3841855067985307e-07, -4.9591064453125e-05, -8.585959434509277, -0.07379531860351562], "score": -8.689083036048572, "model_output": {"hole4": "player", "hole0": "ArcaneExplosion", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"_type": "Template68"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Explosion"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(self, self)\n"}], "index": 3}
{"beams": [{"choice_history": [121, 200, "Arcane", "Intellect", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "c", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 332, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0024166107177734375, -0.000156402587890625, -5.483612312673358e-06, -6.437280717364047e-06, -2.384185791015625e-06, -3.218574420316145e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0001354217529296875, -0.0077304840087890625, -3.814697265625e-05, -3.6954811548639555e-06, -8.678436279296875e-05, -4.1723224057932384e-06, 0.0, -2.622600959512056e-06, 0.0, -0.02858734130859375, -1.9073486328125e-06, -0.0005913972854614258, -1.1444091796875e-05, -0.0001621246337890625, 0.0, -5.030570537201129e-05, 0.0, -1.1444091796875e-05, -1.33514404296875e-05, -9.5367431640625e-05, -3.0517576306010596e-05, -1.1920928244535389e-07, -0.0007305145263671875, -0.001102447509765625, -0.00020599365234375, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.007070179563015699, -1.1920928244535389e-07, -3.4332275390625e-05, -0.000732421875, -0.0004329681396484375, 0.0, -0.005514340475201607, -3.4450891689630225e-05, -0.0001678466796875, -0.0001201629638671875, -0.0029096603393554688, -0.0001277923583984375, -0.011293411254882812, -1.52587890625e-05, -0.000614166259765625, -2.6702880859375e-05, -6.4849853515625e-05, -0.00029659271240234375, -1.9073486328125e-06], "score": -0.07175011566526734, "model_output": {"hole4": "player", "hole0": "ArcaneIntellect", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "c"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Intellect"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 2):\n            player.draw()\n"}, {"choice_history": [121, 200, "Arcane", "Intellect", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "c", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 332, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0024166107177734375, -0.000156402587890625, -5.483612312673358e-06, -6.437280717364047e-06, -2.384185791015625e-06, -3.218574420316145e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0001354217529296875, -0.0077304840087890625, -3.814697265625e-05, -3.6954811548639555e-06, -8.678436279296875e-05, -4.1723224057932384e-06, 0.0, -2.622600959512056e-06, 0.0, -4.127571105957031, -3.814697265625e-06, -0.0003032684326171875, -7.62939453125e-06, -0.0001354217529296875, 0.0, -3.492812902550213e-05, 0.0, -9.5367431640625e-06, -1.33514404296875e-05, -0.0001010894775390625, -3.2067298889160156e-05, -1.1920928244535389e-07, -0.000743865966796875, -0.0010223388671875, -0.00022125244140625, -6.103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.007132168393582106, -1.1920928244535389e-07, -3.24249267578125e-05, -0.0007572174072265625, -0.0003871917724609375, 0.0, -0.005131236277520657, -3.325883881188929e-05, -0.0001678466796875, -0.0001163482666015625, -0.0028829574584960938, -0.00012969970703125, -0.011074066162109375, -1.52587890625e-05, -0.00060272216796875, -2.6702880859375e-05, -6.4849853515625e-05, -0.00029659271240234375, -1.9073486328125e-06], "score": -4.169749127295503, "model_output": {"hole4": "player", "hole0": "ArcaneIntellect", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "c"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "HUNTER", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Intellect"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 2):\n            player.draw()\n"}, {"choice_history": [121, 200, "Arcane", "Intellect", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "c", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 332, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0024166107177734375, -0.000156402587890625, -5.483612312673358e-06, -6.437280717364047e-06, -2.384185791015625e-06, -3.218574420316145e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0001354217529296875, -0.0077304840087890625, -3.814697265625e-05, -3.6954811548639555e-06, -8.678436279296875e-05, -4.1723224057932384e-06, 0.0, -2.622600959512056e-06, 0.0, -5.254661560058594, 0.0, -0.0023328065872192383, -3.814697265625e-06, -0.0002288818359375, 0.0, -5.042484190198593e-05, 0.0, -9.5367431640625e-06, -7.62939453125e-06, -8.58306884765625e-05, -2.8729431505780667e-05, -1.1920928244535389e-07, -0.00072479248046875, -0.0010776519775390625, -0.0002155303955078125, -6.866455078125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0071135712787508965, -1.1920928244535389e-07, -3.4332275390625e-05, -0.0007381439208984375, -0.0004119873046875, 0.0, -0.005288442596793175, -3.40932747349143e-05, -0.0001678466796875, -0.000118255615234375, -0.0029058456420898438, -0.0001277923583984375, -0.011003494262695312, -1.52587890625e-05, -0.0006122589111328125, -2.6702880859375e-05, -6.4849853515625e-05, -0.00029647350311279297, -1.9073486328125e-06], "score": -5.299093082076283, "model_output": {"hole4": "player", "hole0": "ArcaneIntellect", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "c"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Intellect"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 2):\n            player.draw()\n"}, {"choice_history": [121, 200, "Arcane", "Intellect", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 332, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0024166107177734375, -0.000156402587890625, -5.483612312673358e-06, -6.437280717364047e-06, -2.384185791015625e-06, -3.218574420316145e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0001354217529296875, -0.0077304840087890625, -3.814697265625e-05, -3.6954811548639555e-06, -8.678436279296875e-05, -4.1723224057932384e-06, 0.0, -2.622600959512056e-06, 0.0, -0.02858734130859375, -1.9073486328125e-06, -0.0005913972854614258, -1.1444091796875e-05, -0.0001621246337890625, 0.0, -5.030570537201129e-05, 0.0, -1.1444091796875e-05, -1.33514404296875e-05, -9.5367431640625e-05, -3.0517576306010596e-05, -1.1920928244535389e-07, -0.0007305145263671875, -0.001102447509765625, -0.00020599365234375, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -5.500987529754639, -9.5367431640625e-06, -2.47955322265625e-05, -0.0001850128173828125, -5.14984130859375e-05, 0.0, -0.003636050270870328, -3.2305197237292305e-05, -0.0001010894775390625, -0.000102996826171875, -0.0031156539916992188, -0.0001049041748046875, -0.01682281494140625, -1.52587890625e-05, -0.00055694580078125, -2.47955322265625e-05, -7.2479248046875e-05, -0.00028324127197265625, -1.9073486328125e-06], "score": -5.568421767926559, "model_output": {"hole4": "player", "hole0": "ArcaneIntellect", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Intellect"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            player.draw()\n"}, {"choice_history": [121, 200, "Arcane", "Intellect", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "c", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 332, 145, 250, 39, 255, "Arcane", "Intellect", "<EOS>", "summon", "<EOS>", 322, 107, 73, 186, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>"], "score_history": [-0.0024166107177734375, -0.000156402587890625, -5.483612312673358e-06, -6.437280717364047e-06, -2.384185791015625e-06, -3.218574420316145e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0001354217529296875, -0.0077304840087890625, -3.814697265625e-05, -3.6954811548639555e-06, -8.678436279296875e-05, -4.1723224057932384e-06, 0.0, -2.622600959512056e-06, 0.0, -0.02858734130859375, -1.9073486328125e-06, -0.0005913972854614258, -1.1444091796875e-05, -0.0001621246337890625, 0.0, -5.030570537201129e-05, 0.0, -1.1444091796875e-05, -1.33514404296875e-05, -9.5367431640625e-05, -3.0517576306010596e-05, -1.1920928244535389e-07, -0.0007305145263671875, -0.001102447509765625, -0.00020599365234375, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.007070179563015699, -1.1920928244535389e-07, -3.4332275390625e-05, -0.000732421875, -0.0004329681396484375, 0.0, -0.005514340475201607, -3.4450891689630225e-05, -0.0001678466796875, -0.0001201629638671875, -0.0029096603393554688, -0.0001277923583984375, -4.693085670471191, -5.7220458984375e-06, -0.16063404083251953, -9.34600830078125e-05, -0.00018203225044999272, -0.2213962972164154, -4.5537301048170775e-05, -0.030010787770152092, -4.1961669921875e-05, -0.020994186401367188, -0.0107269287109375, -0.29187870025634766, -0.0001850128173828125, -0.06470298767089844, 0.0, -0.032797813415527344, -4.1961669921875e-05, -4.00543212890625e-05, 0.0, -0.00029659271240234375, 0.0, -2.86102294921875e-05, -3.814697265625e-06, 0.0, -0.0038127899169921875, -0.00031435489654541016, 0.0], "score": -5.590756543923121, "model_output": {"hole4": "player", "hole0": "ArcaneIntellect", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "summon", "hole2": [{"_type": "Template64"}, {"_type": "Name", "id": "game"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Template46", "hole0": "ArcaneIntellect"}}], "_type": "For", "target": {"_type": "Name", "id": "c"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Intellect"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 2):\n            ArcaneIntellect().summon(player, game, len(player.minions))\n"}, {"choice_history": [121, 200, "Arcane", "Intellect", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "WARLOCK", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "c", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 332, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0024166107177734375, -0.000156402587890625, -5.483612312673358e-06, -6.437280717364047e-06, -2.384185791015625e-06, -3.218574420316145e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0001354217529296875, -0.0077304840087890625, -3.814697265625e-05, -3.6954811548639555e-06, -8.678436279296875e-05, -4.1723224057932384e-06, 0.0, -2.622600959512056e-06, 0.0, -6.245882987976074, -1.9073486328125e-06, -0.0012784004211425781, -5.7220458984375e-06, -0.000240325927734375, 0.0, -3.71930145774968e-05, 0.0, -7.62939453125e-06, -7.62939453125e-06, -8.392333984375e-05, -3.087520235567354e-05, -1.1920928244535389e-07, -0.0007343292236328125, -0.0010623931884765625, -0.0002193450927734375, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.006952162366360426, -1.1920928244535389e-07, -3.24249267578125e-05, -0.0007266998291015625, -0.00038909912109375, 0.0, -0.0052344645373523235, -3.2066785934148356e-05, -0.000164031982421875, -0.0001163482666015625, -0.0029211044311523438, -0.0001277923583984375, -0.011522293090820312, -1.52587890625e-05, -0.0006122589111328125, -2.6702880859375e-05, -6.4849853515625e-05, -0.00029659271240234375, -1.9073486328125e-06], "score": -6.289527634164401, "model_output": {"hole4": "player", "hole0": "ArcaneIntellect", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "c"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "WARLOCK", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Intellect"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 2):\n            player.draw()\n"}, {"choice_history": [121, 200, "Arcane", "Intellect", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "target", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "c", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 332, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0024166107177734375, -0.000156402587890625, -5.483612312673358e-06, -6.437280717364047e-06, -2.384185791015625e-06, -3.218574420316145e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0001354217529296875, -0.0077304840087890625, -3.814697265625e-05, -3.6954811548639555e-06, -8.678436279296875e-05, -4.1723224057932384e-06, 0.0, -2.622600959512056e-06, 0.0, -6.519295692443848, 0.0, -0.0006219148635864258, -1.9073486328125e-06, -0.000110626220703125, 0.0, -3.4332057111896574e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -8.20159912109375e-05, -3.24249267578125e-05, -1.1920928244535389e-07, -0.000736236572265625, -0.0010776519775390625, -0.0002269744873046875, -6.866455078125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.006925459951162338, 0.0, -3.4332275390625e-05, -0.00075531005859375, -0.00048065185546875, 0.0, -0.005536389071494341, -3.635817120084539e-05, -0.0001697540283203125, -0.0001201629638671875, -0.0029268264770507812, -0.00012969970703125, -0.01079559326171875, -1.52587890625e-05, -0.000606536865234375, -2.6702880859375e-05, -6.29425048828125e-05, -0.00029659271240234375, -1.9073486328125e-06], "score": -6.561863846536873, "model_output": {"hole4": "player", "hole0": "ArcaneIntellect", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "c"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "target", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Intellect"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.target,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 2):\n            player.draw()\n"}, {"choice_history": [121, 200, "Arcane", "Intellect", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "c", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 106, 332, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0024166107177734375, -0.000156402587890625, -5.483612312673358e-06, -6.437280717364047e-06, -2.384185791015625e-06, -3.218574420316145e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0001354217529296875, -0.0077304840087890625, -3.814697265625e-05, -3.6954811548639555e-06, -8.678436279296875e-05, -4.1723224057932384e-06, 0.0, -2.622600959512056e-06, 0.0, -0.02858734130859375, -1.9073486328125e-06, -0.0005913972854614258, -1.1444091796875e-05, -0.0001621246337890625, 0.0, -5.030570537201129e-05, 0.0, -1.1444091796875e-05, -1.33514404296875e-05, -9.5367431640625e-05, -3.0517576306010596e-05, -1.1920928244535389e-07, -0.0007305145263671875, -0.001102447509765625, -0.00020599365234375, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.007070179563015699, -1.1920928244535389e-07, -3.4332275390625e-05, -0.000732421875, -0.0004329681396484375, 0.0, -0.005514340475201607, -3.4450891689630225e-05, -0.0001678466796875, -0.0001201629638671875, -6.538934707641602, -0.0002079010009765625, -0.00417327880859375, -1.9073486328125e-05, -0.0014820098876953125, -1.33514404296875e-05, -9.5367431640625e-05, -0.00024259090423583984, -1.9073486328125e-06], "score": -6.601569961818527, "model_output": {"hole4": "player", "hole0": "ArcaneIntellect", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "c"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template63"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Intellect"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 4):\n            player.draw()\n"}, {"choice_history": [121, 200, "Arcane", "Intellect", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "c", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 332, 145, 250, 39, 255, "Arcane", "Intellect", "<EOS>", "summon", "<EOS>", 322, 107, 65, 156, 50, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>"], "score_history": [-0.0024166107177734375, -0.000156402587890625, -5.483612312673358e-06, -6.437280717364047e-06, -2.384185791015625e-06, -3.218574420316145e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0001354217529296875, -0.0077304840087890625, -3.814697265625e-05, -3.6954811548639555e-06, -8.678436279296875e-05, -4.1723224057932384e-06, 0.0, -2.622600959512056e-06, 0.0, -0.02858734130859375, -1.9073486328125e-06, -0.0005913972854614258, -1.1444091796875e-05, -0.0001621246337890625, 0.0, -5.030570537201129e-05, 0.0, -1.1444091796875e-05, -1.33514404296875e-05, -9.5367431640625e-05, -3.0517576306010596e-05, -1.1920928244535389e-07, -0.0007305145263671875, -0.001102447509765625, -0.00020599365234375, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.007070179563015699, -1.1920928244535389e-07, -3.4332275390625e-05, -0.000732421875, -0.0004329681396484375, 0.0, -0.005514340475201607, -3.4450891689630225e-05, -0.0001678466796875, -0.0001201629638671875, -0.0029096603393554688, -0.0001277923583984375, -4.693085670471191, -5.7220458984375e-06, -0.16063404083251953, -9.34600830078125e-05, -0.00018203225044999272, -0.2213962972164154, -4.5537301048170775e-05, -0.030010787770152092, -4.1961669921875e-05, -0.020994186401367188, -0.0107269287109375, -1.3832855224609375, -0.00032806396484375, -0.008015632629394531, -0.04439651966094971, 0.0, -0.0043773651123046875, -0.0002593994140625, -2.47955322265625e-05, 0.0, -0.00021469593048095703, 0.0, -1.33514404296875e-05, -1.1444091796875e-05, 0.0, -0.001140594482421875, -0.002358555793762207, 0.0], "score": -6.6410797918326665, "model_output": {"hole4": "player", "hole0": "ArcaneIntellect", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "summon", "hole2": [{"_type": "Template64"}, {"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}], "_type": "Template44", "hole0": {"_type": "Template46", "hole0": "ArcaneIntellect"}}], "_type": "For", "target": {"_type": "Name", "id": "c"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Intellect"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 2):\n            ArcaneIntellect().summon(player, player.game, len(player.minions))\n"}, {"choice_history": [121, 200, "Arcane", "Intellect", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Arcane", " ", "Intellect", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "c", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 332, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0024166107177734375, -0.000156402587890625, -5.483612312673358e-06, -6.437280717364047e-06, -2.384185791015625e-06, -3.218574420316145e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0001354217529296875, -4.886471748352051, -6.4849853515625e-05, -9.5367431640625e-06, -4.57763671875e-05, -9.5367431640625e-06, -0.0001773834228515625, -7.62939453125e-06, -5.14984130859375e-05, -1.168244216387393e-05, -7.45057623134926e-05, -4.601425098371692e-05, -9.5367431640625e-06, -0.3011035919189453, -2.86102294921875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.9073486328125e-06, -1.7762184143066406e-05, -1.9073486328125e-06, -0.4801063537597656, 0.0, -0.0352020263671875, -1.9073486328125e-05, -0.0008182525634765625, -2.6702880859375e-05, -0.008953094482421875, 0.0, -0.0007839202880859375, -0.000736236572265625, -0.0007619857788085938, -0.025679707527160645, 0.0, -2.6702880859375e-05, 0.0, -2.2649737729807384e-05, 0.0, -1.52587890625e-05, -1.71661376953125e-05, -0.00052642822265625, -5.185603367863223e-05, -1.1920928244535389e-07, -0.000118255615234375, -9.34600830078125e-05, -0.897247314453125, -2.86102294921875e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.01587963104248047, 0.0, -0.0001773834228515625, -0.000301361083984375, -0.0006465911865234375, 0.0, -0.009797891601920128, -8.046303264563903e-05, -0.000209808349609375, -0.0001068115234375, -0.0027332305908203125, -0.000286102294921875, -0.03432464599609375, -2.288818359375e-05, -0.00046539306640625, -3.0517578125e-05, -6.67572021484375e-05, -0.00029206275939941406, -1.9073486328125e-06], "score": -6.707584814793783, "model_output": {"hole4": "player", "hole0": "ArcaneIntellect", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "c"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Arcane Intellect", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 2):\n            player.draw()\n"}, {"choice_history": [121, 200, "Arcane", "Intellect", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "c", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 332, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0024166107177734375, -0.000156402587890625, -5.483612312673358e-06, -6.437280717364047e-06, -2.384185791015625e-06, -3.218574420316145e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0001354217529296875, -0.0077304840087890625, -3.814697265625e-05, -3.6954811548639555e-06, -8.678436279296875e-05, -4.1723224057932384e-06, 0.0, -2.622600959512056e-06, 0.0, -6.682584762573242, 0.0, -0.0034161806106567383, -1.9073486328125e-06, -0.000164031982421875, 0.0, -4.029242700198665e-05, 0.0, -7.62939453125e-06, -9.5367431640625e-06, -9.1552734375e-05, -3.0517576306010596e-05, -1.1920928244535389e-07, -0.0007381439208984375, -0.001026153564453125, -0.0002193450927734375, -6.67572021484375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.007092590443789959, -1.1920928244535389e-07, -3.24249267578125e-05, -0.0007457733154296875, -0.0004024505615234375, 0.0, -0.005205605179071426, -3.40932747349143e-05, -0.0001678466796875, -0.0001201629638671875, -0.0028781890869140625, -0.0001316070556640625, -0.010967254638671875, -1.52587890625e-05, -0.0006084442138671875, -2.6702880859375e-05, -6.4849853515625e-05, -0.00029468536376953125, -1.9073486328125e-06], "score": -6.7278226296441375, "model_output": {"hole4": "player", "hole0": "ArcaneIntellect", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "c"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "WARRIOR", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Intellect"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 2):\n            player.draw()\n"}, {"choice_history": [121, 200, "Arcane", "Intellect", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "c", "<EOS>", 20, 163, 25, 186, "Aura", "<EOS>", 321, 113, 102, 332, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0024166107177734375, -0.000156402587890625, -5.483612312673358e-06, -6.437280717364047e-06, -2.384185791015625e-06, -3.218574420316145e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0001354217529296875, -0.0077304840087890625, -3.814697265625e-05, -3.6954811548639555e-06, -8.678436279296875e-05, -4.1723224057932384e-06, 0.0, -2.622600959512056e-06, 0.0, -0.02858734130859375, -1.9073486328125e-06, -0.0005913972854614258, -1.1444091796875e-05, -0.0001621246337890625, 0.0, -5.030570537201129e-05, 0.0, -1.1444091796875e-05, -1.33514404296875e-05, -9.5367431640625e-05, -3.0517576306010596e-05, -1.1920928244535389e-07, -0.0007305145263671875, -0.001102447509765625, -0.00020599365234375, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.007070179563015699, -1.1920928244535389e-07, -3.4332275390625e-05, -0.000732421875, -0.0004329681396484375, 0.0, -6.88678503036499, -0.0001227854663738981, -0.0015506744384765625, -0.0048980712890625, -0.0028219223022460938, -0.000457763671875, -0.011150360107421875, -1.33514404296875e-05, -0.000244140625, -6.4849853515625e-05, -6.103515625e-05, -0.00029861927032470703, -1.9073486328125e-06], "score": -6.959033484192545, "model_output": {"hole4": "player", "hole0": "ArcaneIntellect", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "c"}, "iter": {"func": {"_type": "Name", "id": "Aura"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Intellect"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in Aura(0, 2):\n            player.draw()\n"}, {"choice_history": [121, 200, "Arcane", "Intellect", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Arcane", " ", "Intellect", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "3", "<EOS>", 110], "score_history": [-0.0024166107177734375, -0.000156402587890625, -5.483612312673358e-06, -6.437280717364047e-06, -2.384185791015625e-06, -3.218574420316145e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0001354217529296875, -4.886471748352051, -6.4849853515625e-05, -9.5367431640625e-06, -4.57763671875e-05, -9.5367431640625e-06, -0.0001773834228515625, -7.62939453125e-06, -5.14984130859375e-05, -1.168244216387393e-05, -7.45057623134926e-05, -4.601425098371692e-05, -9.5367431640625e-06, -0.3011035919189453, -2.86102294921875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.9073486328125e-06, -1.7762184143066406e-05, -1.9073486328125e-06, -0.4801063537597656, 0.0, -0.0352020263671875, -1.9073486328125e-05, -0.0008182525634765625, -2.6702880859375e-05, -0.008953094482421875, 0.0, -0.0007839202880859375, -0.000736236572265625, -0.0007619857788085938, -0.025679707527160645, 0.0, -2.6702880859375e-05, 0.0, -2.2649737729807384e-05, 0.0, -1.52587890625e-05, -1.71661376953125e-05, -0.00052642822265625, -5.185603367863223e-05, -1.1920928244535389e-07, -0.000118255615234375, -9.34600830078125e-05, -0.5422878265380859, -7.43865966796875e-05, -0.00136566162109375, -0.1950451135635376, -3.0517578125e-05, -0.0312042236328125, -0.3672637939453125, -8.20159912109375e-05, -0.00018310546875, -0.03299522399902344, -2.0265579223632812e-06, -0.6229950189590454, -1.7642974853515625e-05, -0.0005359649658203125], "score": -7.538954614799415, "model_output": {"hole4": "player", "hole0": "ArcaneIntellect", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Arcane Intellect", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(3), self)\n"}, {"choice_history": [121, 200, "Arcane", "Intellect", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "c", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 332, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 37, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Arcane", "<EOS>"], "score_history": [-0.0024166107177734375, -0.000156402587890625, -5.483612312673358e-06, -6.437280717364047e-06, -2.384185791015625e-06, -3.218574420316145e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0001354217529296875, -0.0077304840087890625, -3.814697265625e-05, -3.6954811548639555e-06, -8.678436279296875e-05, -4.1723224057932384e-06, 0.0, -2.622600959512056e-06, 0.0, -0.02858734130859375, -1.9073486328125e-06, -0.0005913972854614258, -1.1444091796875e-05, -0.0001621246337890625, 0.0, -5.030570537201129e-05, 0.0, -1.1444091796875e-05, -1.33514404296875e-05, -9.5367431640625e-05, -3.0517576306010596e-05, -1.1920928244535389e-07, -0.0007305145263671875, -0.001102447509765625, -0.00020599365234375, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.007070179563015699, -1.1920928244535389e-07, -3.4332275390625e-05, -0.000732421875, -0.0004329681396484375, 0.0, -0.005514340475201607, -3.4450891689630225e-05, -0.0001678466796875, -0.0001201629638671875, -0.0029096603393554688, -0.0001277923583984375, -6.745240211486816, -0.000751495361328125, -7.62939453125e-06, -0.0009708404541015625, -4.9591064453125e-05, -0.2128211259841919, 0.0, -0.16534996032714844, -8.392333984375e-05, -0.0054798126220703125, -4.38690185546875e-05, -0.0006580352783203125, -3.814697265625e-06, -0.0083465576171875, -0.005905032157897949, 0.0, -0.04364108294248581, 0.0, -0.7049998044967651, -0.1836796998977661], "score": -8.137469712706874, "model_output": {"hole4": "player", "hole0": "ArcaneIntellect", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "Arcane", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}], "_type": "For", "target": {"_type": "Name", "id": "c"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Intellect"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 2):\n            <UNK> = hearthbreaker.cards.minions.Arcane()\n"}, {"choice_history": [121, 200, "Arcane", "Intellect", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "c", "<EOS>", 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 49], "score_history": [-0.0024166107177734375, -0.000156402587890625, -5.483612312673358e-06, -6.437280717364047e-06, -2.384185791015625e-06, -3.218574420316145e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0001354217529296875, -0.0077304840087890625, -3.814697265625e-05, -3.6954811548639555e-06, -8.678436279296875e-05, -4.1723224057932384e-06, 0.0, -2.622600959512056e-06, 0.0, -0.02858734130859375, -1.9073486328125e-06, -0.0005913972854614258, -1.1444091796875e-05, -0.0001621246337890625, 0.0, -5.030570537201129e-05, 0.0, -1.1444091796875e-05, -1.33514404296875e-05, -9.5367431640625e-05, -3.0517576306010596e-05, -1.1920928244535389e-07, -0.0007305145263671875, -0.001102447509765625, -0.00020599365234375, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.007070179563015699, -1.1920928244535389e-07, -3.4332275390625e-05, -0.000732421875, -0.0004329681396484375, 0.0, -6.93402099609375, -1.1920922133867862e-06, -0.0003681182861328125, -0.0002765655517578125, 0.0, -0.14641952514648438, -2.09808349609375e-05, -0.005108833312988281, -1.9073486328125e-06, -0.0008363723754882812, 0.0, -0.0019628999289125204, 0.0, -0.2914310097694397, 0.0, -0.0001239776611328125, -0.05462932586669922, 0.0, -0.08646297454833984, 0.0, -0.13345026969909668, 0.0, -0.5778560042381287, 0.0, -5.7220458984375e-06, -0.02381134033203125, -0.1658487319946289, -0.040671467781066895, -0.0091782808303833, -0.000156402587890625, -1.1444091796875e-05, -0.010511398315429688, -0.0007171630859375, -0.004360198974609375, -0.3558673858642578], "score": -8.894673461516035, "model_output": {"hole4": "player", "hole0": "ArcaneIntellect", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "add_buff", "hole2": [{"hole1": [{"_type": "UnaryOp", "operand": {"_type": "Template63"}, "op": {"_type": "USub"}}], "_type": "Template30", "hole0": "ManaChange"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "c"}, "iter": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Intellect"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in len(game.other_player.minions):\n            minion.add_buff(Buff(ManaChange(-4)))\n"}], "index": 4}
{"beams": [{"choice_history": [121, 200, "Arcane", "Missiles", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 335, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 126, 155, 320, 73, 186, "target", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "target", "<EOS>", "damage", "<EOS>", 321, 103, 110], "score_history": [-6.103515625e-05, -0.001071929931640625, -1.1920928244535389e-07, -5.245207830739673e-06, -4.52994936495088e-06, -5.84125473324093e-06, -2.6702880859375e-05, -5.5551525292685255e-05, -0.0029315948486328125, -0.0012340545654296875, -4.76837158203125e-05, -5.483612312673358e-06, -0.0001609325408935547, -2.0265579223632812e-06, 0.0, -4.66107958345674e-05, 0.0, -0.002239227294921875, -5.14984130859375e-05, -0.0004901885986328125, -2.86102294921875e-05, -0.0007402896881103516, 0.0, -5.078230606159195e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -7.62939453125e-06, -6.115436553955078e-05, 0.0, -0.00121307373046875, -0.000118255615234375, -0.0003662109375, -1.71661376953125e-05, -9.918212890625e-05, -1.71661376953125e-05, -0.007904887199401855, -5.14984130859375e-05, -1.52587890625e-05, -1.71661376953125e-05, -0.0002155303955078125, -1.9073486328125e-06, -0.00034344062441959977, -7.867794920457527e-06, -0.0009479522705078125, -0.0005550384521484375, -0.003566741943359375, -3.814697265625e-05, -4.76837158203125e-05, -0.00047707516932860017, -8.344646857949556e-07, -0.0012951752869412303, 0.0, -0.0026063919067382812, -0.0006961822509765625, -7.62939453125e-06, -7.2479248046875e-05, -0.0005168914794921875, -9.5367431640625e-06, -0.003197908401489258, -0.0001373291015625, -3.62396240234375e-05, -2.09808349609375e-05, -0.000110626220703125, -9.5367431640625e-06, -0.000377655029296875, 0.0, -0.024120807647705078, -1.0967253729177173e-05, -0.0005869861925020814, 0.0, -4.1961669921875e-05, -0.0004329681396484375, -5.7220458984375e-06, -2.86102294921875e-05, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -1.52587890625e-05, -1.311301275563892e-06, -0.00022351737425196916, -4.768370445162873e-07, -0.0006326246657408774, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.0001430511474609375, 0.0, -0.0008058547973632812, -3.814697265625e-06, -0.007606041617691517, 0.0, -1.9073486328125e-06, -0.000606536865234375, -1.9073486328125e-06, -0.0003814697265625, -0.0001087188720703125, -5.7220458984375e-06, 0.0, -0.0010623931884765625, 0.0, -0.007931351661682129, -4.768370445162873e-07, -0.0026940139941871166, -9.655950634623878e-06, -0.0024242401123046875, -3.814697265625e-06, -7.62939453125e-06, -0.000179290771484375, -1.9073486328125e-06, -0.00018525123596191406, -2.9802317840221804e-06, -5.340576171875e-05, -7.05718994140625e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.000942230224609375, 0.0, -0.0002565383620094508, -1.5735502529423684e-05, -0.008662819862365723, -1.1920928244535389e-07, -0.000141143798828125, -0.00252532958984375, -7.62939453125e-06, -0.0023775100708007812, -1.549720582261216e-05, -0.0002002716064453125, -2.288818359375e-05, -0.0011882781982421875, -1.9073486328125e-06, -0.00021922588348388672, -9.894321920000948e-06, -0.00030262928339652717, 0.0, -0.000179290771484375, -0.00324249267578125, -0.000606536865234375], "score": -0.10584620212908646, "model_output": {"hole4": "player", "hole0": "ArcaneMissiles", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "append", "hole2": [{"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "target"}], "_type": "Assign"}, {"hole1": "damage", "hole2": [{"_type": "Template60"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "target"}}], "_type": "For", "target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Missiles"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, player.effective_spell_damage(3)):\n            targets = copy.copy(game.other_player.minions)\n            targets.append(game.other_player.hero)\n            target = game.random_choice(targets)\n            target.damage(1, self)\n"}, {"choice_history": [121, 200, "Arcane", "Missiles", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 335, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "hero", "<EOS>", 126, 155, 320, 73, 186, "target", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "target", "<EOS>", "damage", "<EOS>", 321, 103, 110], "score_history": [-6.103515625e-05, -0.001071929931640625, -1.1920928244535389e-07, -5.245207830739673e-06, -4.52994936495088e-06, -5.84125473324093e-06, -2.6702880859375e-05, -5.5551525292685255e-05, -0.0029315948486328125, -0.0012340545654296875, -4.76837158203125e-05, -5.483612312673358e-06, -0.0001609325408935547, -2.0265579223632812e-06, 0.0, -4.66107958345674e-05, 0.0, -0.002239227294921875, -5.14984130859375e-05, -0.0004901885986328125, -2.86102294921875e-05, -0.0007402896881103516, 0.0, -5.078230606159195e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -7.62939453125e-06, -6.115436553955078e-05, 0.0, -0.00121307373046875, -0.000118255615234375, -0.0003662109375, -1.71661376953125e-05, -9.918212890625e-05, -1.71661376953125e-05, -0.007904887199401855, -5.14984130859375e-05, -1.52587890625e-05, -1.71661376953125e-05, -0.0002155303955078125, -1.9073486328125e-06, -0.00034344062441959977, -7.867794920457527e-06, -0.0009479522705078125, -0.0005550384521484375, -0.003566741943359375, -3.814697265625e-05, -4.76837158203125e-05, -0.00047707516932860017, -8.344646857949556e-07, -0.0012951752869412303, 0.0, -0.0026063919067382812, -0.0006961822509765625, -7.62939453125e-06, -7.2479248046875e-05, -0.0005168914794921875, -9.5367431640625e-06, -0.003197908401489258, -0.0001373291015625, -3.62396240234375e-05, -2.09808349609375e-05, -0.000110626220703125, -9.5367431640625e-06, -0.000377655029296875, 0.0, -0.024120807647705078, -1.0967253729177173e-05, -0.0005869861925020814, 0.0, -4.1961669921875e-05, -0.0004329681396484375, -5.7220458984375e-06, -2.86102294921875e-05, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -1.52587890625e-05, -1.311301275563892e-06, -0.00022351737425196916, -4.768370445162873e-07, -0.0006326246657408774, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.0001430511474609375, 0.0, -0.0008058547973632812, -3.814697265625e-06, -0.007606041617691517, 0.0, -1.9073486328125e-06, -0.000606536865234375, -1.9073486328125e-06, -0.0003814697265625, -0.0001087188720703125, -5.7220458984375e-06, 0.0, -0.0010623931884765625, 0.0, -4.926936626434326, 0.0, -0.021116018295288086, -7.152555099310121e-07, -0.00041961669921875, -3.814697265625e-06, -1.71661376953125e-05, -0.0004405975341796875, -1.9073486328125e-06, -0.00017571449279785156, -3.099440846199286e-06, -5.53131103515625e-05, -7.43865966796875e-05, -1.1444091796875e-05, -7.62939453125e-06, -0.001377105712890625, 0.0, -0.0002826451964210719, -1.4662635294371285e-05, -0.007940173149108887, -1.1920928244535389e-07, -0.00012969970703125, -0.0023632049560546875, -7.62939453125e-06, -0.0023164749145507812, -1.561641511216294e-05, -0.00020599365234375, -2.288818359375e-05, -0.001064300537109375, -1.9073486328125e-06, -0.00020968914031982422, -9.894321920000948e-06, -0.0002947637694887817, 0.0, -0.0001811981201171875, -0.0032825469970703125, -0.000614166259765625], "score": -5.040947114234299, "model_output": {"hole4": "player", "hole0": "ArcaneMissiles", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "append", "hole2": [{"attr": "hero", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "target"}], "_type": "Assign"}, {"hole1": "damage", "hole2": [{"_type": "Template60"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "target"}}], "_type": "For", "target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Missiles"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, player.effective_spell_damage(3)):\n            targets = copy.copy(game.other_player.minions)\n            targets.append(game.current_player.hero)\n            target = game.random_choice(targets)\n            target.damage(1, self)\n"}, {"choice_history": [121, 200, "Arcane", "Missiles", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 103, 110], "score_history": [-6.103515625e-05, -0.001071929931640625, -1.1920928244535389e-07, -5.245207830739673e-06, -4.52994936495088e-06, -5.84125473324093e-06, -2.6702880859375e-05, -5.5551525292685255e-05, -0.0029315948486328125, -0.0012340545654296875, -4.76837158203125e-05, -5.483612312673358e-06, -0.0001609325408935547, -2.0265579223632812e-06, 0.0, -4.66107958345674e-05, 0.0, -0.002239227294921875, -5.14984130859375e-05, -0.0004901885986328125, -2.86102294921875e-05, -0.0007402896881103516, 0.0, -5.078230606159195e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -7.62939453125e-06, -6.115436553955078e-05, 0.0, -0.00121307373046875, -0.000118255615234375, -0.0003662109375, -1.71661376953125e-05, -9.918212890625e-05, -1.71661376953125e-05, -5.254152297973633, -9.536738616588991e-07, -0.000339508056640625, -0.000751495361328125, -0.020936965942382812, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.006470441818237305, -1.9073486328125e-06, -0.00024390210455749184, 0.0, -2.6702880859375e-05, -5.14984130859375e-05, -7.62939453125e-06, -2.47955322265625e-05, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -4.76837158203125e-05, -1.1920928244535389e-07, -0.0003938674635719508, -2.3841855067985307e-07, -0.0013927562395110726, -1.9073486328125e-06, -0.0011444091796875, -5.7220458984375e-06, -3.814697265625e-06, -0.000377655029296875, 0.0, -0.012907862663269043, -1.3112935448589269e-05, -7.808065129211172e-05, 0.0, -0.000110626220703125, -0.4969367980957031, -0.0001544952392578125], "score": -5.807843835906581, "model_output": {"hole4": "player", "hole0": "ArcaneMissiles", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"_type": "Template60"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Missiles"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(1, self)\n"}, {"choice_history": [121, 200, "Arcane", "Missiles", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 335, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "target", "<EOS>", "damage", "<EOS>", 321, 103, 110, 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "target", "<EOS>", "damage", "<EOS>", 321, 103, 110], "score_history": [-6.103515625e-05, -0.001071929931640625, -1.1920928244535389e-07, -5.245207830739673e-06, -4.52994936495088e-06, -5.84125473324093e-06, -2.6702880859375e-05, -5.5551525292685255e-05, -0.0029315948486328125, -0.0012340545654296875, -4.76837158203125e-05, -5.483612312673358e-06, -0.0001609325408935547, -2.0265579223632812e-06, 0.0, -4.66107958345674e-05, 0.0, -0.002239227294921875, -5.14984130859375e-05, -0.0004901885986328125, -2.86102294921875e-05, -0.0007402896881103516, 0.0, -5.078230606159195e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -7.62939453125e-06, -6.115436553955078e-05, 0.0, -0.00121307373046875, -0.000118255615234375, -0.0003662109375, -1.71661376953125e-05, -9.918212890625e-05, -1.71661376953125e-05, -0.007904887199401855, -5.14984130859375e-05, -1.52587890625e-05, -1.71661376953125e-05, -0.0002155303955078125, -1.9073486328125e-06, -0.00034344062441959977, -7.867794920457527e-06, -0.0009479522705078125, -0.0005550384521484375, -0.003566741943359375, -3.814697265625e-05, -4.76837158203125e-05, -0.00047707516932860017, -8.344646857949556e-07, -0.0012951752869412303, 0.0, -0.0026063919067382812, -0.0006961822509765625, -7.62939453125e-06, -7.2479248046875e-05, -0.0005168914794921875, -9.5367431640625e-06, -0.003197908401489258, -0.0001373291015625, -3.62396240234375e-05, -2.09808349609375e-05, -0.000110626220703125, -9.5367431640625e-06, -0.000377655029296875, 0.0, -3.7746357917785645, -1.7165990357170813e-05, -0.01077341940253973, -1.1920928244535389e-07, -7.43865966796875e-05, -0.05370521545410156, -1.9073486328125e-06, -0.004030704498291016, -8.344650268554688e-06, -0.0007572174072265625, -9.5367431640625e-06, -0.023894309997558594, 0.0, -0.0004094839096069336, -2.3126376618165523e-05, -0.00012957477883901447, 0.0, -0.000316619873046875, -0.008991241455078125, -0.0001049041748046875, -0.7653436660766602, -2.288818359375e-05, -1.9073486328125e-06, -0.2015514373779297, -1.33514404296875e-05, -0.8406378030776978, -1.311301275563892e-06, -0.0007104873657226562, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -0.0037326812744140625, 0.0, -0.21513581275939941, -1.6569954823353328e-05, -0.009267807006835938, -2.3841855067985307e-07, -1.33514404296875e-05, -0.013822555541992188, -3.814697265625e-06, -0.0031905174255371094, -1.0371208190917969e-05, -0.000614166259765625, -9.5367431640625e-06, -0.017313003540039062, -1.9073486328125e-06, -0.0005234479904174805, -2.3126376618165523e-05, -0.00013660755939781666, 0.0, -0.0003223419189453125, -0.009608268737792969, -0.0001220703125], "score": -5.994569132403356, "model_output": {"hole4": "player", "hole0": "ArcaneMissiles", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "damage", "hole2": [{"_type": "Template60"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "target"}}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign"}, {"hole1": "damage", "hole2": [{"_type": "Template60"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "target"}}], "_type": "For", "target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Missiles"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, player.effective_spell_damage(3)):\n            targets = game.random_choice(targets)\n            target.damage(1, self)\n            minion = game.random_choice(targets)\n            target.damage(1, self)\n"}, {"choice_history": [121, 200, "Arcane", "Missiles", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 335, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 126, 155, 320, 73, 186, "target", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "target", "<EOS>", "damage", "<EOS>", 321, 103, 110], "score_history": [-6.103515625e-05, -0.001071929931640625, -1.1920928244535389e-07, -5.245207830739673e-06, -4.52994936495088e-06, -5.84125473324093e-06, -2.6702880859375e-05, -5.5551525292685255e-05, -0.0029315948486328125, -0.0012340545654296875, -4.76837158203125e-05, -5.483612312673358e-06, -0.0001609325408935547, -2.0265579223632812e-06, 0.0, -4.66107958345674e-05, 0.0, -0.002239227294921875, -5.14984130859375e-05, -0.0004901885986328125, -2.86102294921875e-05, -0.0007402896881103516, 0.0, -5.078230606159195e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -7.62939453125e-06, -6.115436553955078e-05, 0.0, -0.00121307373046875, -0.000118255615234375, -0.0003662109375, -1.71661376953125e-05, -9.918212890625e-05, -1.71661376953125e-05, -0.007904887199401855, -5.14984130859375e-05, -1.52587890625e-05, -1.71661376953125e-05, -0.0002155303955078125, -1.9073486328125e-06, -0.00034344062441959977, -7.867794920457527e-06, -0.0009479522705078125, -0.0005550384521484375, -0.003566741943359375, -3.814697265625e-05, -4.76837158203125e-05, -0.00047707516932860017, -8.344646857949556e-07, -0.0012951752869412303, 0.0, -0.0026063919067382812, -0.0006961822509765625, -7.62939453125e-06, -7.2479248046875e-05, -0.0005168914794921875, -9.5367431640625e-06, -5.893399715423584, -2.0265579223632812e-06, -0.007793426513671875, -3.24249267578125e-05, -5.340576171875e-05, -6.866455078125e-05, -0.0022220611572265625, 0.0, -0.046742796897888184, -4.768371127283899e-06, -0.00041031758883036673, 0.0, -2.47955322265625e-05, -0.000335693359375, -7.62939453125e-06, -2.09808349609375e-05, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -1.33514404296875e-05, -1.4305104514278355e-06, -0.0002298354374943301, -5.960462772236497e-07, -0.0010092935990542173, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.00017547607421875, 0.0, -0.000797271728515625, -3.814697265625e-06, -0.007502939086407423, 0.0, -1.9073486328125e-06, -0.000591278076171875, -1.9073486328125e-06, -0.0004024505615234375, -0.000110626220703125, -5.7220458984375e-06, 0.0, -0.001102447509765625, 0.0, -0.008183121681213379, -4.768370445162873e-07, -0.002760171890258789, -9.655950634623878e-06, -0.0024433135986328125, -3.814697265625e-06, -7.62939453125e-06, -0.000179290771484375, -1.9073486328125e-06, -0.00018334388732910156, -2.9802317840221804e-06, -5.340576171875e-05, -7.05718994140625e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.000904083251953125, 0.0, -0.0002470016188453883, -1.5735502529423684e-05, -0.008866071701049805, -1.1920928244535389e-07, -0.0001430511474609375, -0.002582550048828125, -7.62939453125e-06, -0.0023746490478515625, -1.549720582261216e-05, -0.0002002716064453125, -2.288818359375e-05, -0.0012359619140625, -1.9073486328125e-06, -0.00022125244140625, -9.894321920000948e-06, -0.0003028676437679678, 0.0, -0.000179290771484375, -0.0032396316528320312, -0.0006046295166015625], "score": -6.028790367546364, "model_output": {"hole4": "player", "hole0": "ArcaneMissiles", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"hole1": "append", "hole2": [{"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "target"}], "_type": "Assign"}, {"hole1": "damage", "hole2": [{"_type": "Template60"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "target"}}], "_type": "For", "target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Missiles"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, player.effective_spell_damage(3)):\n            <UNK> = copy.copy(game.other_player.minions)\n            targets.append(game.other_player.hero)\n            target = game.random_choice(targets)\n            target.damage(1, self)\n"}, {"choice_history": [121, 200, "Arcane", "Missiles", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 335, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 126, 155, 320, 73, 186, "target", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>"], "score_history": [-6.103515625e-05, -0.001071929931640625, -1.1920928244535389e-07, -5.245207830739673e-06, -4.52994936495088e-06, -5.84125473324093e-06, -2.6702880859375e-05, -5.5551525292685255e-05, -0.0029315948486328125, -0.0012340545654296875, -4.76837158203125e-05, -5.483612312673358e-06, -0.0001609325408935547, -2.0265579223632812e-06, 0.0, -4.66107958345674e-05, 0.0, -0.002239227294921875, -5.14984130859375e-05, -0.0004901885986328125, -2.86102294921875e-05, -0.0007402896881103516, 0.0, -5.078230606159195e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -7.62939453125e-06, -6.115436553955078e-05, 0.0, -0.00121307373046875, -0.000118255615234375, -0.0003662109375, -1.71661376953125e-05, -9.918212890625e-05, -1.71661376953125e-05, -0.007904887199401855, -5.14984130859375e-05, -1.52587890625e-05, -1.71661376953125e-05, -0.0002155303955078125, -1.9073486328125e-06, -0.00034344062441959977, -7.867794920457527e-06, -0.0009479522705078125, -0.0005550384521484375, -0.003566741943359375, -3.814697265625e-05, -4.76837158203125e-05, -0.00047707516932860017, -8.344646857949556e-07, -0.0012951752869412303, 0.0, -0.0026063919067382812, -0.0006961822509765625, -7.62939453125e-06, -7.2479248046875e-05, -0.0005168914794921875, -9.5367431640625e-06, -0.003197908401489258, -0.0001373291015625, -3.62396240234375e-05, -2.09808349609375e-05, -0.000110626220703125, -9.5367431640625e-06, -0.000377655029296875, 0.0, -0.024120807647705078, -1.0967253729177173e-05, -0.0005869861925020814, 0.0, -4.1961669921875e-05, -0.0004329681396484375, -5.7220458984375e-06, -2.86102294921875e-05, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -1.52587890625e-05, -1.311301275563892e-06, -0.00022351737425196916, -4.768370445162873e-07, -0.0006326246657408774, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.0001430511474609375, 0.0, -0.0008058547973632812, -3.814697265625e-06, -0.007606041617691517, 0.0, -1.9073486328125e-06, -0.000606536865234375, -1.9073486328125e-06, -0.0003814697265625, -0.0001087188720703125, -5.7220458984375e-06, 0.0, -0.0010623931884765625, 0.0, -0.007931351661682129, -4.768370445162873e-07, -0.0026940139941871166, -9.655950634623878e-06, -6.051694869995117, -1.52587890625e-05, -0.023244857788085938, 0.0, -0.05831336975097656, -3.62396240234375e-05, -0.004495443310588598, 0.0, -5.7220458984375e-06, -0.0009069442749023438, -9.5367431640625e-06, -0.0001583099365234375, -0.000164031982421875, -1.1444091796875e-05, -1.9073486328125e-06, -0.0010890960693359375, -1.1920928244535389e-07, -0.014027953147888184, -3.576278118089249e-07, -0.002130611799657345, -1.0967253729177173e-05, -0.00244903564453125, -3.814697265625e-06, -7.62939453125e-06, -0.0001888275146484375, -1.9073486328125e-06, -0.00018715858459472656, -2.9802317840221804e-06, -5.53131103515625e-05, -6.67572021484375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0012454986572265625, 0.0, -0.00017321105406153947, -1.7046782886609435e-05, -0.010395407676696777, -1.1920928244535389e-07, -0.000118255615234375, -0.002288818359375, -7.62939453125e-06, -0.0024576187133789062, -1.561641511216294e-05], "score": -6.258000736060957, "model_output": {"hole4": "player", "hole0": "ArcaneMissiles", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "append", "hole2": [{"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"hole1": "append", "hole2": [{"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "target"}], "_type": "Assign"}], "_type": "For", "target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Missiles"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, player.effective_spell_damage(3)):\n            targets = copy.copy(game.other_player.minions)\n            targets.append(game.other_player.hero)\n            targets.append(game.other_player.hero)\n            target = game.random_choice(targets)\n"}, {"choice_history": [121, 200, "Arcane", "Missiles", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 335, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "target", "<EOS>", "damage", "<EOS>", 321, 103, 110, 126, 155, 320, 73, 186, "target", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "target", "<EOS>", "damage", "<EOS>", 321, 103, 110], "score_history": [-6.103515625e-05, -0.001071929931640625, -1.1920928244535389e-07, -5.245207830739673e-06, -4.52994936495088e-06, -5.84125473324093e-06, -2.6702880859375e-05, -5.5551525292685255e-05, -0.0029315948486328125, -0.0012340545654296875, -4.76837158203125e-05, -5.483612312673358e-06, -0.0001609325408935547, -2.0265579223632812e-06, 0.0, -4.66107958345674e-05, 0.0, -0.002239227294921875, -5.14984130859375e-05, -0.0004901885986328125, -2.86102294921875e-05, -0.0007402896881103516, 0.0, -5.078230606159195e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -7.62939453125e-06, -6.115436553955078e-05, 0.0, -0.00121307373046875, -0.000118255615234375, -0.0003662109375, -1.71661376953125e-05, -9.918212890625e-05, -1.71661376953125e-05, -0.007904887199401855, -5.14984130859375e-05, -1.52587890625e-05, -1.71661376953125e-05, -0.0002155303955078125, -1.9073486328125e-06, -0.00034344062441959977, -7.867794920457527e-06, -0.0009479522705078125, -0.0005550384521484375, -0.003566741943359375, -3.814697265625e-05, -4.76837158203125e-05, -0.00047707516932860017, -8.344646857949556e-07, -0.0012951752869412303, 0.0, -0.0026063919067382812, -0.0006961822509765625, -7.62939453125e-06, -7.2479248046875e-05, -0.0005168914794921875, -9.5367431640625e-06, -0.003197908401489258, -0.0001373291015625, -3.62396240234375e-05, -2.09808349609375e-05, -0.000110626220703125, -9.5367431640625e-06, -0.000377655029296875, 0.0, -3.7746357917785645, -1.7165990357170813e-05, -0.01077341940253973, -1.1920928244535389e-07, -7.43865966796875e-05, -0.05370521545410156, -1.9073486328125e-06, -0.004030704498291016, -8.344650268554688e-06, -0.0007572174072265625, -9.5367431640625e-06, -0.023894309997558594, 0.0, -0.0004094839096069336, -2.3126376618165523e-05, -0.00012957477883901447, 0.0, -0.000316619873046875, -0.008991241455078125, -0.0001049041748046875, -0.7653436660766602, -2.288818359375e-05, -1.9073486328125e-06, -0.2015514373779297, -1.33514404296875e-05, -0.7322155237197876, -6.318092346191406e-06, -7.43865966796875e-05, -3.4332275390625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.010938644409179688, -1.9073486328125e-06, -0.5875693559646606, -1.9788545614574105e-05, -0.008711457252502441, -1.1920928244535389e-07, -1.1444091796875e-05, -0.03730487823486328, -3.814697265625e-06, -0.0024771690368652344, -1.060962586052483e-05, -0.000518798828125, -9.5367431640625e-06, -0.027530670166015625, -1.9073486328125e-06, -0.0005844831466674805, -2.5510509658488445e-05, -0.00013040936028119177, 0.0, -0.0003147125244140625, -0.009894371032714844, -0.00011444091796875], "score": -6.297810147455131, "model_output": {"hole4": "player", "hole0": "ArcaneMissiles", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "damage", "hole2": [{"_type": "Template60"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "target"}}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "target"}], "_type": "Assign"}, {"hole1": "damage", "hole2": [{"_type": "Template60"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "target"}}], "_type": "For", "target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Missiles"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, player.effective_spell_damage(3)):\n            targets = game.random_choice(targets)\n            target.damage(1, self)\n            target = game.random_choice(targets)\n            target.damage(1, self)\n"}, {"choice_history": [121, 200, "Arcane", "Missiles", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 335, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 126, 155, 320, 73, 186, "target", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "target", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score_history": [-6.103515625e-05, -0.001071929931640625, -1.1920928244535389e-07, -5.245207830739673e-06, -4.52994936495088e-06, -5.84125473324093e-06, -2.6702880859375e-05, -5.5551525292685255e-05, -0.0029315948486328125, -0.0012340545654296875, -4.76837158203125e-05, -5.483612312673358e-06, -0.0001609325408935547, -2.0265579223632812e-06, 0.0, -4.66107958345674e-05, 0.0, -0.002239227294921875, -5.14984130859375e-05, -0.0004901885986328125, -2.86102294921875e-05, -0.0007402896881103516, 0.0, -5.078230606159195e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -7.62939453125e-06, -6.115436553955078e-05, 0.0, -0.00121307373046875, -0.000118255615234375, -0.0003662109375, -1.71661376953125e-05, -9.918212890625e-05, -1.71661376953125e-05, -0.007904887199401855, -5.14984130859375e-05, -1.52587890625e-05, -1.71661376953125e-05, -0.0002155303955078125, -1.9073486328125e-06, -0.00034344062441959977, -7.867794920457527e-06, -0.0009479522705078125, -0.0005550384521484375, -0.003566741943359375, -3.814697265625e-05, -4.76837158203125e-05, -0.00047707516932860017, -8.344646857949556e-07, -0.0012951752869412303, 0.0, -0.0026063919067382812, -0.0006961822509765625, -7.62939453125e-06, -7.2479248046875e-05, -0.0005168914794921875, -9.5367431640625e-06, -0.003197908401489258, -0.0001373291015625, -3.62396240234375e-05, -2.09808349609375e-05, -0.000110626220703125, -9.5367431640625e-06, -0.000377655029296875, 0.0, -0.024120807647705078, -1.0967253729177173e-05, -0.0005869861925020814, 0.0, -4.1961669921875e-05, -0.0004329681396484375, -5.7220458984375e-06, -2.86102294921875e-05, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -1.52587890625e-05, -1.311301275563892e-06, -0.00022351737425196916, -4.768370445162873e-07, -0.0006326246657408774, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.0001430511474609375, 0.0, -0.0008058547973632812, -3.814697265625e-06, -0.007606041617691517, 0.0, -1.9073486328125e-06, -0.000606536865234375, -1.9073486328125e-06, -0.0003814697265625, -0.0001087188720703125, -5.7220458984375e-06, 0.0, -0.0010623931884765625, 0.0, -0.007931351661682129, -4.768370445162873e-07, -0.0026940139941871166, -9.655950634623878e-06, -0.0024242401123046875, -3.814697265625e-06, -7.62939453125e-06, -0.000179290771484375, -1.9073486328125e-06, -0.00018525123596191406, -2.9802317840221804e-06, -5.340576171875e-05, -7.05718994140625e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.000942230224609375, 0.0, -0.0002565383620094508, -1.5735502529423684e-05, -0.008662819862365723, -1.1920928244535389e-07, -0.000141143798828125, -0.00252532958984375, -7.62939453125e-06, -0.0023775100708007812, -1.549720582261216e-05, -0.0002002716064453125, -2.288818359375e-05, -0.0011882781982421875, -1.9073486328125e-06, -0.00021922588348388672, -9.894321920000948e-06, -0.00030262928339652717, 0.0, -0.000179290771484375, -6.640802383422852, -1.52587890625e-05, -0.0001773834228515625, -0.0017508268356323242, -1.1920928244535389e-07, -0.0012351530604064465, 0.0, -0.000179290771484375], "score": -6.746157588099642, "model_output": {"hole4": "player", "hole0": "ArcaneMissiles", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "append", "hole2": [{"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "target"}], "_type": "Assign"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "target"}}], "_type": "For", "target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Missiles"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, player.effective_spell_damage(3)):\n            targets = copy.copy(game.other_player.minions)\n            targets.append(game.other_player.hero)\n            target = game.random_choice(targets)\n            target.damage(player.effective_spell_damage(3), self)\n"}, {"choice_history": [121, 200, "Arcane", "Missiles", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 106, 110], "score_history": [-6.103515625e-05, -0.001071929931640625, -1.1920928244535389e-07, -5.245207830739673e-06, -4.52994936495088e-06, -5.84125473324093e-06, -2.6702880859375e-05, -5.5551525292685255e-05, -0.0029315948486328125, -0.0012340545654296875, -4.76837158203125e-05, -5.483612312673358e-06, -0.0001609325408935547, -2.0265579223632812e-06, 0.0, -4.66107958345674e-05, 0.0, -0.002239227294921875, -5.14984130859375e-05, -0.0004901885986328125, -2.86102294921875e-05, -0.0007402896881103516, 0.0, -5.078230606159195e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -7.62939453125e-06, -6.115436553955078e-05, 0.0, -0.00121307373046875, -0.000118255615234375, -0.0003662109375, -1.71661376953125e-05, -9.918212890625e-05, -1.71661376953125e-05, -5.254152297973633, -9.536738616588991e-07, -0.000339508056640625, -0.000751495361328125, -0.020936965942382812, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.006470441818237305, -1.9073486328125e-06, -0.00024390210455749184, 0.0, -2.6702880859375e-05, -5.14984130859375e-05, -7.62939453125e-06, -2.47955322265625e-05, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -4.76837158203125e-05, -1.1920928244535389e-07, -0.0003938674635719508, -2.3841855067985307e-07, -0.0013927562395110726, -1.9073486328125e-06, -0.0011444091796875, -5.7220458984375e-06, -3.814697265625e-06, -0.000377655029296875, 0.0, -0.012907862663269043, -1.3112935448589269e-05, -7.808065129211172e-05, 0.0, -0.000110626220703125, -1.6578807830810547, -0.025526046752929688], "score": -6.994159372405605, "model_output": {"hole4": "player", "hole0": "ArcaneMissiles", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Missiles"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(4, self)\n"}, {"choice_history": [121, 200, "Arcane", "Missiles", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 110, 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score_history": [-6.103515625e-05, -0.001071929931640625, -1.1920928244535389e-07, -5.245207830739673e-06, -4.52994936495088e-06, -5.84125473324093e-06, -2.6702880859375e-05, -5.5551525292685255e-05, -0.0029315948486328125, -0.0012340545654296875, -4.76837158203125e-05, -5.483612312673358e-06, -0.0001609325408935547, -2.0265579223632812e-06, 0.0, -4.66107958345674e-05, 0.0, -0.002239227294921875, -5.14984130859375e-05, -0.0004901885986328125, -2.86102294921875e-05, -0.0007402896881103516, 0.0, -5.078230606159195e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -7.62939453125e-06, -6.115436553955078e-05, 0.0, -0.00121307373046875, -0.000118255615234375, -0.0003662109375, -1.71661376953125e-05, -9.918212890625e-05, -1.71661376953125e-05, -0.007904887199401855, -5.14984130859375e-05, -1.52587890625e-05, -1.71661376953125e-05, -0.0002155303955078125, -1.9073486328125e-06, -0.00034344062441959977, -7.867794920457527e-06, -0.0009479522705078125, -0.0005550384521484375, -6.914593696594238, -0.0037384033203125, -3.24249267578125e-05, -1.9073486328125e-06, -0.018362045288085938, -7.62939453125e-06, -0.0003510464448481798, -0.00012790386972483248, -6.878287240397185e-05, 0.0, -0.0001506805419921875, -0.27428150177001953, -2.09808349609375e-05, -0.000286102294921875, -0.0001943111274158582, -1.7881377516459906e-06, -0.0008376825135201216, -2.1457672119140625e-06, -4.1961669921875e-05], "score": -7.234357558496633, "model_output": {"hole4": "player", "hole0": "ArcaneMissiles", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template68"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Missiles"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, self):\n            minion.damage(player.effective_spell_damage(3), self)\n"}, {"choice_history": [121, 200, "Arcane", "Missiles", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score_history": [-6.103515625e-05, -0.001071929931640625, -1.1920928244535389e-07, -5.245207830739673e-06, -4.52994936495088e-06, -5.84125473324093e-06, -2.6702880859375e-05, -5.5551525292685255e-05, -0.0029315948486328125, -0.0012340545654296875, -4.76837158203125e-05, -5.483612312673358e-06, -0.0001609325408935547, -2.0265579223632812e-06, 0.0, -4.66107958345674e-05, 0.0, -0.002239227294921875, -5.14984130859375e-05, -0.0004901885986328125, -2.86102294921875e-05, -0.0007402896881103516, 0.0, -5.078230606159195e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -7.62939453125e-06, -6.115436553955078e-05, 0.0, -0.00121307373046875, -0.000118255615234375, -0.0003662109375, -1.71661376953125e-05, -9.918212890625e-05, -1.71661376953125e-05, -5.254152297973633, -9.536738616588991e-07, -0.000339508056640625, -0.000751495361328125, -0.020936965942382812, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.006470441818237305, -1.9073486328125e-06, -0.00024390210455749184, 0.0, -2.6702880859375e-05, -5.14984130859375e-05, -7.62939453125e-06, -2.47955322265625e-05, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -4.76837158203125e-05, -1.1920928244535389e-07, -0.0003938674635719508, -2.3841855067985307e-07, -0.0013927562395110726, -1.9073486328125e-06, -0.0011444091796875, -5.7220458984375e-06, -3.814697265625e-06, -0.000377655029296875, 0.0, -0.012907862663269043, -1.3112935448589269e-05, -7.808065129211172e-05, 0.0, -0.000110626220703125, -1.9534177780151367, -0.000102996826171875, -0.0001430511474609375, -0.0003412961959838867, -1.1920922133867862e-06, -0.0010141131933778524, -2.2649765014648438e-06, -5.14984130859375e-05], "score": -7.2658267334315525, "model_output": {"hole4": "player", "hole0": "ArcaneMissiles", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Missiles"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(3), self)\n"}, {"choice_history": [121, 200, "Arcane", "Missiles", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 335, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 126, 155, 320, 73, 186, "target", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "target", "<EOS>", "damage", "<EOS>", 321, 106, 110], "score_history": [-6.103515625e-05, -0.001071929931640625, -1.1920928244535389e-07, -5.245207830739673e-06, -4.52994936495088e-06, -5.84125473324093e-06, -2.6702880859375e-05, -5.5551525292685255e-05, -0.0029315948486328125, -0.0012340545654296875, -4.76837158203125e-05, -5.483612312673358e-06, -0.0001609325408935547, -2.0265579223632812e-06, 0.0, -4.66107958345674e-05, 0.0, -0.002239227294921875, -5.14984130859375e-05, -0.0004901885986328125, -2.86102294921875e-05, -0.0007402896881103516, 0.0, -5.078230606159195e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -7.62939453125e-06, -6.115436553955078e-05, 0.0, -0.00121307373046875, -0.000118255615234375, -0.0003662109375, -1.71661376953125e-05, -9.918212890625e-05, -1.71661376953125e-05, -0.007904887199401855, -5.14984130859375e-05, -1.52587890625e-05, -1.71661376953125e-05, -0.0002155303955078125, -1.9073486328125e-06, -0.00034344062441959977, -7.867794920457527e-06, -0.0009479522705078125, -0.0005550384521484375, -0.003566741943359375, -3.814697265625e-05, -4.76837158203125e-05, -0.00047707516932860017, -8.344646857949556e-07, -0.0012951752869412303, 0.0, -0.0026063919067382812, -0.0006961822509765625, -7.62939453125e-06, -7.2479248046875e-05, -0.0005168914794921875, -9.5367431640625e-06, -0.003197908401489258, -0.0001373291015625, -3.62396240234375e-05, -2.09808349609375e-05, -0.000110626220703125, -9.5367431640625e-06, -0.000377655029296875, 0.0, -0.024120807647705078, -1.0967253729177173e-05, -0.0005869861925020814, 0.0, -4.1961669921875e-05, -0.0004329681396484375, -5.7220458984375e-06, -2.86102294921875e-05, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -1.52587890625e-05, -1.311301275563892e-06, -0.00022351737425196916, -4.768370445162873e-07, -0.0006326246657408774, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.0001430511474609375, 0.0, -0.0008058547973632812, -3.814697265625e-06, -0.007606041617691517, 0.0, -1.9073486328125e-06, -0.000606536865234375, -1.9073486328125e-06, -0.0003814697265625, -0.0001087188720703125, -5.7220458984375e-06, 0.0, -0.0010623931884765625, 0.0, -0.007931351661682129, -4.768370445162873e-07, -0.0026940139941871166, -9.655950634623878e-06, -0.0024242401123046875, -3.814697265625e-06, -7.62939453125e-06, -0.000179290771484375, -1.9073486328125e-06, -0.00018525123596191406, -2.9802317840221804e-06, -5.340576171875e-05, -7.05718994140625e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.000942230224609375, 0.0, -0.0002565383620094508, -1.5735502529423684e-05, -0.008662819862365723, -1.1920928244535389e-07, -0.000141143798828125, -0.00252532958984375, -7.62939453125e-06, -0.0023775100708007812, -1.549720582261216e-05, -0.0002002716064453125, -2.288818359375e-05, -0.0011882781982421875, -1.9073486328125e-06, -0.00021922588348388672, -9.894321920000948e-06, -0.00030262928339652717, 0.0, -0.000179290771484375, -7.052406311035156, -0.1594858169555664], "score": -7.3138893005787935, "model_output": {"hole4": "player", "hole0": "ArcaneMissiles", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "append", "hole2": [{"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "target"}], "_type": "Assign"}, {"hole1": "damage", "hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "target"}}], "_type": "For", "target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Missiles"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, player.effective_spell_damage(3)):\n            targets = copy.copy(game.other_player.minions)\n            targets.append(game.other_player.hero)\n            target = game.random_choice(targets)\n            target.damage(4, self)\n"}, {"choice_history": [121, 200, "Arcane", "Missiles", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "target", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 103, 110], "score_history": [-6.103515625e-05, -0.001071929931640625, -1.1920928244535389e-07, -5.245207830739673e-06, -4.52994936495088e-06, -5.84125473324093e-06, -2.6702880859375e-05, -5.5551525292685255e-05, -0.0029315948486328125, -0.0012340545654296875, -4.76837158203125e-05, -5.483612312673358e-06, -0.0001609325408935547, -2.0265579223632812e-06, 0.0, -4.66107958345674e-05, 0.0, -0.002239227294921875, -5.14984130859375e-05, -0.0004901885986328125, -2.86102294921875e-05, -0.0007402896881103516, 0.0, -5.078230606159195e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -7.62939453125e-06, -6.115436553955078e-05, 0.0, -0.00121307373046875, -0.000118255615234375, -0.0003662109375, -1.71661376953125e-05, -9.918212890625e-05, -1.71661376953125e-05, -6.687908172607422, -8.344646857949556e-07, -0.0002841949462890625, -0.0001850128173828125, -0.08812904357910156, -1.9073486328125e-06, -0.000640869140625, 0.0, -0.1564863920211792, -1.9073486328125e-06, -0.0005600450676865876, 0.0, -0.000152587890625, -0.0001239776611328125, -7.62939453125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -7.62939453125e-06, 0.0, -5.53131103515625e-05, -1.1920928244535389e-07, -0.000392675370676443, -2.3841855067985307e-07, -0.001662230002693832, -1.9073486328125e-06, -0.001285552978515625, -5.7220458984375e-06, -3.814697265625e-06, -0.0005168914794921875, 0.0, -0.016893506050109863, -1.3112935448589269e-05, -8.058390812948346e-05, 0.0, -0.0001087188720703125, -0.4950599670410156, -0.000164031982421875], "score": -7.461972567156934, "model_output": {"hole4": "player", "hole0": "ArcaneMissiles", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"_type": "Template60"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "target"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Missiles"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for target in copy.copy(game.other_player.minions):\n            minion.damage(1, self)\n"}, {"choice_history": [121, 200, "Arcane", "Missiles", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Arcane", " ", "Missiles", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 103, 110], "score_history": [-6.103515625e-05, -0.001071929931640625, -1.1920928244535389e-07, -5.245207830739673e-06, -4.52994936495088e-06, -5.84125473324093e-06, -2.6702880859375e-05, -5.5551525292685255e-05, -0.0029315948486328125, -6.903705596923828, -0.00016021728515625, -1.33514404296875e-05, -9.72747802734375e-05, -5.7220458984375e-06, -5.340576171875e-05, -3.24249267578125e-05, -4.76837158203125e-05, -1.4305104514278355e-06, -7.951119914650917e-05, -3.8504600524902344e-05, 0.0, -0.002552032470703125, -0.001922607421875, -7.62939453125e-06, -4.57763671875e-05, -1.9073486328125e-06, -2.872943878173828e-05, -1.9073486328125e-06, -0.08891689777374268, -5.7220458984375e-06, -0.21905136108398438, -1.71661376953125e-05, -0.0001239776611328125, -1.1444091796875e-05, -0.015899658203125, 0.0, -0.000469207763671875, -5.7220458984375e-06, -4.57763671875e-05, -0.05619621276855469, 0.0, -5.364418029785156e-05, 0.0, -0.00039260703488253057, 0.0, -0.0003795623779296875, -1.9073486328125e-06, -0.0010929107666015625, -0.0004181861877441406, 0.0, -0.0003986358642578125, -5.91278076171875e-05, -0.10280990600585938, -0.0001697540283203125, -0.0019092559814453125, -6.925857451278716e-05, -2.3841855067985307e-07, -0.0006847381591796875, -0.1812276840209961, -0.0004062652587890625], "score": -7.583775090902542, "model_output": {"hole4": "player", "hole0": "ArcaneMissiles", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"_type": "Template60"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Arcane Missiles", "_type": "Str"}, {"_type": "Template60"}, {"attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(1, self)\n"}, {"choice_history": [121, 200, "Arcane", "Missiles", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 106, 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score_history": [-6.103515625e-05, -0.001071929931640625, -1.1920928244535389e-07, -5.245207830739673e-06, -4.52994936495088e-06, -5.84125473324093e-06, -2.6702880859375e-05, -5.5551525292685255e-05, -0.0029315948486328125, -0.0012340545654296875, -4.76837158203125e-05, -5.483612312673358e-06, -0.0001609325408935547, -2.0265579223632812e-06, 0.0, -4.66107958345674e-05, 0.0, -0.002239227294921875, -5.14984130859375e-05, -0.0004901885986328125, -2.86102294921875e-05, -0.0007402896881103516, 0.0, -5.078230606159195e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -7.62939453125e-06, -6.115436553955078e-05, 0.0, -0.00121307373046875, -0.000118255615234375, -0.0003662109375, -1.71661376953125e-05, -9.918212890625e-05, -1.71661376953125e-05, -0.007904887199401855, -5.14984130859375e-05, -1.52587890625e-05, -1.71661376953125e-05, -0.0002155303955078125, -1.9073486328125e-06, -0.00034344062441959977, -7.867794920457527e-06, -0.0009479522705078125, -0.0005550384521484375, -8.00706672668457, -0.0059185028076171875, -0.0001068115234375, -7.62939453125e-06, -0.005886077880859375, -3.814697265625e-06, -0.0004281779401935637, -0.00010954754543490708, -9.310133464168757e-05, 0.0, -0.00014495849609375, -0.18767642974853516, -2.288818359375e-05, -0.000270843505859375, -0.00020217894052620977, -2.861018856492592e-06, -0.0009036051342263818, -2.1457672119140625e-06, -4.76837158203125e-05], "score": -8.230150548098656, "model_output": {"hole4": "player", "hole0": "ArcaneMissiles", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template63"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Arcane Missiles"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 4):\n            minion.damage(player.effective_spell_damage(3), self)\n"}], "index": 5}
{"beams": [{"choice_history": [121, 200, "Arcane", "Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Arcane", " ", "Shot", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.019374847412109375, -0.000225067138671875, -1.1920928244535389e-07, -0.0001070497528417036, -2.694129761948716e-05, -1.868000254034996e-05, -5.53131103515625e-05, -1.1563301086425781e-05, -0.0001468658447265625, -0.0001125335693359375, -1.9073486328125e-06, -0.0001583099365234375, -4.38690185546875e-05, -7.62939453125e-06, -0.0001201629638671875, -9.5367431640625e-06, -1.1444091796875e-05, -1.1920928244535389e-07, -3.3855299989227206e-05, -0.00019097326730843633, 0.0, -0.00035858154296875, -3.814697265625e-05, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -0.000507354736328125, -3.814697265625e-06, -0.09651768207550049, 0.0, -0.000385284423828125, -1.1444091796875e-05, -0.000202178955078125, -8.7738037109375e-05, -3.24249267578125e-05, 0.0, -1.52587890625e-05, -3.0517578125e-05, -0.0001010894775390625, -0.000141143798828125, 0.0, -1.52587890625e-05, 0.0, -1.0967253729177173e-05, 0.0, -0.0004119873046875, -5.340576171875e-05, -0.0001277923583984375, -0.00022351741790771484, 0.0, -0.000911712646484375, -1.9073486328125e-05, -6.866455078125e-05, -7.62939453125e-06, -4.1961669921875e-05, -4.410743713378906e-06, -1.2874520507466514e-05, -3.24249267578125e-05, -0.0002880096435546875, -1.1444091796875e-05, -7.43865966796875e-05, -9.429454075871035e-05, -1.1920928244535389e-07, -0.0024269791319966316, 0.0, -1.52587890625e-05], "score": -0.12397976781537778, "model_output": {"hole4": "player", "hole0": "ArcaneShot", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Arcane Shot", "_type": "Str"}, {"_type": "Template60"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Arcane", "Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Arcane", " ", "Shot", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.019374847412109375, -0.000225067138671875, -1.1920928244535389e-07, -0.0001070497528417036, -2.694129761948716e-05, -1.868000254034996e-05, -5.53131103515625e-05, -1.1563301086425781e-05, -0.0001468658447265625, -0.0001125335693359375, -1.9073486328125e-06, -0.0001583099365234375, -4.38690185546875e-05, -7.62939453125e-06, -0.0001201629638671875, -9.5367431640625e-06, -1.1444091796875e-05, -1.1920928244535389e-07, -3.3855299989227206e-05, -0.00019097326730843633, 0.0, -0.00035858154296875, -3.814697265625e-05, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -0.000507354736328125, -3.814697265625e-06, -2.5181140899658203, 0.0, -6.4849853515625e-05, -7.62939453125e-06, -0.000141143798828125, -5.7220458984375e-05, -3.0517578125e-05, 0.0, -1.71661376953125e-05, -3.62396240234375e-05, -0.0001010894775390625, -0.000133514404296875, 0.0, -7.62939453125e-06, 0.0, -1.0848044439626392e-05, 0.0, -0.000396728515625, -4.9591064453125e-05, -0.00012969970703125, -0.0002446174621582031, 0.0, -0.000885009765625, -1.9073486328125e-05, -9.1552734375e-05, -7.62939453125e-06, -4.00543212890625e-05, -4.410743713378906e-06, -1.3112935448589269e-05, -3.4332275390625e-05, -0.0003070831298828125, -1.1444091796875e-05, -7.05718994140625e-05, -9.822844731388614e-05, -1.1920928244535389e-07, -0.0024034949019551277, 0.0, -1.52587890625e-05], "score": -2.5451467838410977, "model_output": {"hole4": "player", "hole0": "ArcaneShot", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Arcane Shot", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Arcane", "Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Arcane", " ", "Shot", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.019374847412109375, -0.000225067138671875, -1.1920928244535389e-07, -0.0001070497528417036, -2.694129761948716e-05, -1.868000254034996e-05, -5.53131103515625e-05, -1.1563301086425781e-05, -0.0001468658447265625, -0.0001125335693359375, -1.9073486328125e-06, -0.0001583099365234375, -4.38690185546875e-05, -7.62939453125e-06, -0.0001201629638671875, -9.5367431640625e-06, -1.1444091796875e-05, -1.1920928244535389e-07, -3.3855299989227206e-05, -0.00019097326730843633, 0.0, -0.00035858154296875, -3.814697265625e-05, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -0.000507354736328125, -3.814697265625e-06, -5.26828670501709, -1.9073486328125e-06, -0.0002956390380859375, -7.62939453125e-06, -0.0001316070556640625, -3.62396240234375e-05, -2.86102294921875e-05, 0.0, -2.288818359375e-05, -5.7220458984375e-05, -0.000125885009765625, -0.0001659393310546875, 0.0, -1.1444091796875e-05, 0.0, -8.940695806813892e-06, 0.0, -0.00032806396484375, -4.76837158203125e-05, -0.0001373291015625, -0.00024271011352539062, 0.0, -0.000865936279296875, -1.9073486328125e-05, -6.4849853515625e-05, -5.7220458984375e-06, -4.1961669921875e-05, -4.410743713378906e-06, -1.2516897186287679e-05, -3.24249267578125e-05, -0.00028228759765625, -1.1444091796875e-05, -7.2479248046875e-05, -9.429454075871035e-05, -1.1920928244535389e-07, -0.002425309969112277, 0.0, -1.52587890625e-05], "score": -5.295487364556699, "model_output": {"hole4": "player", "hole0": "ArcaneShot", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Arcane Shot", "_type": "Str"}, {"_type": "Template60"}, {"attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Arcane", "Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Arcane", " ", "Shot", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-0.019374847412109375, -0.000225067138671875, -1.1920928244535389e-07, -0.0001070497528417036, -2.694129761948716e-05, -1.868000254034996e-05, -5.53131103515625e-05, -1.1563301086425781e-05, -0.0001468658447265625, -0.0001125335693359375, -1.9073486328125e-06, -0.0001583099365234375, -4.38690185546875e-05, -7.62939453125e-06, -0.0001201629638671875, -9.5367431640625e-06, -1.1444091796875e-05, -1.1920928244535389e-07, -3.3855299989227206e-05, -0.00019097326730843633, 0.0, -0.00035858154296875, -3.814697265625e-05, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -0.000507354736328125, -3.814697265625e-06, -0.09651768207550049, 0.0, -0.000385284423828125, -1.1444091796875e-05, -0.000202178955078125, -8.7738037109375e-05, -3.24249267578125e-05, 0.0, -1.52587890625e-05, -3.0517578125e-05, -0.0001010894775390625, -0.000141143798828125, 0.0, -1.52587890625e-05, 0.0, -1.0967253729177173e-05, 0.0, -0.0004119873046875, -5.340576171875e-05, -0.0001277923583984375, -0.00022351741790771484, 0.0, -0.000911712646484375, -1.9073486328125e-05, -6.866455078125e-05, -7.62939453125e-06, -4.1961669921875e-05, -4.410743713378906e-06, -1.2874520507466514e-05, -3.24249267578125e-05, -0.0002880096435546875, -1.1444091796875e-05, -7.43865966796875e-05, -9.429454075871035e-05, -1.1920928244535389e-07, -6.031099319458008, -1.1920928244535389e-07, -4.00543212890625e-05], "score": -6.152677022882898, "model_output": {"hole4": "player", "hole0": "ArcaneShot", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Arcane Shot", "_type": "Str"}, {"_type": "Template60"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Arcane", "Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Arcane", " ", "Shot", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.019374847412109375, -0.000225067138671875, -1.1920928244535389e-07, -0.0001070497528417036, -2.694129761948716e-05, -1.868000254034996e-05, -5.53131103515625e-05, -1.1563301086425781e-05, -0.0001468658447265625, -0.0001125335693359375, -1.9073486328125e-06, -0.0001583099365234375, -4.38690185546875e-05, -7.62939453125e-06, -0.0001201629638671875, -9.5367431640625e-06, -1.1444091796875e-05, -1.1920928244535389e-07, -3.3855299989227206e-05, -0.00019097326730843633, 0.0, -0.00035858154296875, -3.814697265625e-05, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -0.000507354736328125, -3.814697265625e-06, -6.272956848144531, 0.0, -5.340576171875e-05, -3.62396240234375e-05, -0.0001735687255859375, -3.0517578125e-05, -1.919269561767578e-05, 0.0, -1.52587890625e-05, -2.86102294921875e-05, -8.392333984375e-05, -0.000118255615234375, 0.0, -9.5367431640625e-06, 0.0, -1.072883515007561e-05, 0.0, -0.0004138946533203125, -4.76837158203125e-05, -0.0001277923583984375, -0.0002598762512207031, 0.0, -0.0008792877197265625, -1.9073486328125e-05, -0.0001163482666015625, -7.62939453125e-06, -4.00543212890625e-05, -4.410743713378906e-06, -1.3112935448589269e-05, -3.62396240234375e-05, -0.0003147125244140625, -1.1444091796875e-05, -7.05718994140625e-05, -0.00010204314457951114, -1.1920928244535389e-07, -0.0023916931822896004, 0.0, -1.52587890625e-05], "score": -6.300010165226901, "model_output": {"hole4": "player", "hole0": "ArcaneShot", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Arcane Shot", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Arcane", "Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Arcane", " ", "Shot", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.019374847412109375, -0.000225067138671875, -1.1920928244535389e-07, -0.0001070497528417036, -2.694129761948716e-05, -1.868000254034996e-05, -5.53131103515625e-05, -1.1563301086425781e-05, -0.0001468658447265625, -0.0001125335693359375, -1.9073486328125e-06, -0.0001583099365234375, -4.38690185546875e-05, -7.62939453125e-06, -0.0001201629638671875, -9.5367431640625e-06, -1.1444091796875e-05, -1.1920928244535389e-07, -3.3855299989227206e-05, -0.00019097326730843633, 0.0, -0.00035858154296875, -3.814697265625e-05, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -0.000507354736328125, -3.814697265625e-06, -6.462820053100586, 0.0, -0.0005950927734375, -9.5367431640625e-06, -0.0001888275146484375, -6.29425048828125e-05, -3.4332275390625e-05, 0.0, -1.33514404296875e-05, -2.288818359375e-05, -0.0001010894775390625, -0.000141143798828125, 0.0, -1.33514404296875e-05, 0.0, -1.060962586052483e-05, 0.0, -0.0003147125244140625, -4.76837158203125e-05, -0.00012969970703125, -0.0002446174621582031, 0.0, -0.0008869171142578125, -1.9073486328125e-05, -8.96453857421875e-05, -7.62939453125e-06, -4.00543212890625e-05, -4.410743713378906e-06, -1.2993727978027891e-05, -3.4332275390625e-05, -0.000301361083984375, -1.1444091796875e-05, -7.2479248046875e-05, -9.822844731388614e-05, -1.1920928244535389e-07, -0.00240540225058794, 0.0, -1.52587890625e-05], "score": -6.4903521146916106, "model_output": {"hole4": "player", "hole0": "ArcaneShot", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Arcane Shot", "_type": "Str"}, {"_type": "Template60"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Arcane", "Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Arcane", " ", "Shot", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.019374847412109375, -0.000225067138671875, -1.1920928244535389e-07, -0.0001070497528417036, -2.694129761948716e-05, -1.868000254034996e-05, -5.53131103515625e-05, -1.1563301086425781e-05, -0.0001468658447265625, -0.0001125335693359375, -1.9073486328125e-06, -0.0001583099365234375, -4.38690185546875e-05, -7.62939453125e-06, -0.0001201629638671875, -9.5367431640625e-06, -1.1444091796875e-05, -1.1920928244535389e-07, -3.3855299989227206e-05, -0.00019097326730843633, 0.0, -0.00035858154296875, -3.814697265625e-05, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -0.000507354736328125, -3.814697265625e-06, -7.125979423522949, 0.0, -0.0001506805419921875, -1.52587890625e-05, -0.0001583099365234375, -4.00543212890625e-05, -2.86102294921875e-05, 0.0, -1.71661376953125e-05, -3.62396240234375e-05, -9.34600830078125e-05, -0.0001277923583984375, 0.0, -7.62939453125e-06, 0.0, -1.0848044439626392e-05, 0.0, -0.000438690185546875, -4.9591064453125e-05, -0.0001239776611328125, -0.00023698806762695312, 0.0, -0.00091552734375, -1.9073486328125e-05, -0.0001125335693359375, -7.62939453125e-06, -4.00543212890625e-05, -4.410743713378906e-06, -1.3589766240329482e-05, -3.4332275390625e-05, -0.000316619873046875, -1.1444091796875e-05, -6.866455078125e-05, -0.00010013579594669864, -1.1920928244535389e-07, -0.002401229925453663, 0.0, -1.52587890625e-05], "score": -7.153178175932204, "model_output": {"hole4": "player", "hole0": "ArcaneShot", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Arcane Shot", "_type": "Str"}, {"_type": "Template60"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Arcane", "Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Arcane", " ", "Shot", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.019374847412109375, -0.000225067138671875, -1.1920928244535389e-07, -0.0001070497528417036, -2.694129761948716e-05, -1.868000254034996e-05, -5.53131103515625e-05, -1.1563301086425781e-05, -0.0001468658447265625, -0.0001125335693359375, -1.9073486328125e-06, -0.0001583099365234375, -4.38690185546875e-05, -7.62939453125e-06, -0.0001201629638671875, -9.5367431640625e-06, -1.1444091796875e-05, -1.1920928244535389e-07, -3.3855299989227206e-05, -0.00019097326730843633, 0.0, -0.00035858154296875, -3.814697265625e-05, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -0.000507354736328125, -3.814697265625e-06, -7.232844352722168, 0.0, -0.0001010894775390625, -9.5367431640625e-06, -0.0001010894775390625, -4.38690185546875e-05, -3.24249267578125e-05, 0.0, -1.33514404296875e-05, -4.76837158203125e-05, -8.96453857421875e-05, -0.0001316070556640625, 0.0, -9.5367431640625e-06, 0.0, -1.0848044439626392e-05, 0.0, -0.0003871917724609375, -4.9591064453125e-05, -0.0001277923583984375, -0.0002465248107910156, 0.0, -0.000888824462890625, -1.9073486328125e-05, -8.96453857421875e-05, -7.62939453125e-06, -4.00543212890625e-05, -4.410743713378906e-06, -1.2874520507466514e-05, -3.4332275390625e-05, -0.0002994537353515625, -1.1444091796875e-05, -7.05718994140625e-05, -9.822844731388614e-05, -1.1920928244535389e-07, -0.0024073095992207527, 0.0, -1.52587890625e-05], "score": -7.259848197953012, "model_output": {"hole4": "player", "hole0": "ArcaneShot", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Arcane Shot", "_type": "Str"}, {"_type": "Template60"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Arcane", "Shot", "<EOS>", 320, 108, 333, 136, 197, "Arcane", " ", "Shot", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 69, 166, 41, 317, 11, 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-3.9836816787719727, -4.57763671875e-05, -3.4332275390625e-05, -0.0004138946533203125, -1.33514404296875e-05, -3.576272320060525e-06, -0.00021468581689987332, -4.374974378151819e-05, -1.1444091796875e-05, -0.004360198974609375, -3.814697265625e-06, -0.0020008087158203125, -0.0003566741943359375, -2.288792165927589e-05, -0.0011234283447265625, -0.00048494277871213853, -3.814697265625e-06, -0.0014906892320141196, 0.0, -0.6675758361816406, -0.0007648468017578125, -0.00196075439453125, -1.9073486328125e-06, -0.0006413459777832031, 0.0, -0.02365398406982422, -0.1272411346435547, 0.0, -0.004811286926269531, -2.09808349609375e-05, -0.04126167297363281, -0.011994361877441406, -0.17047595977783203, -0.002849578857421875, -0.037867069244384766, 0.0, -0.039839744567871094, -0.0008544921875, -0.0010833740234375, -0.0009670257568359375, -0.00130462646484375, -0.0009918212890625, -9.5367431640625e-05, 0.0, -0.06129264831542969, -5.7220458984375e-06, -0.0035219192504882812, -9.5367431640625e-06, -0.6910848617553711, -2.09808349609375e-05, -0.018650412559509277, -1.9073486328125e-06, -0.032434333115816116, 0.0, -0.013886451721191406, -0.7469825744628906, -7.43865966796875e-05, -0.0006046295166015625, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -0.0001239776611328125, 0.0, -0.08253002166748047, -7.62939453125e-06, -0.011058807373046875, -0.000652313232421875, -0.12568092346191406, -2.86102294921875e-05, -0.05403423309326172, -0.0004596710205078125, -0.4659090042114258, -5.7220458984375e-06, -0.018637776374816895, -1.9073486328125e-05, -0.9062185287475586, -0.000148773193359375, -0.0030231475830078125, -1.9073486328125e-06, -0.010948177427053452, -0.00010430288239149377, -3.671643935376778e-05, 0.0, -8.20159912109375e-05, -0.0002460479736328125, -9.5367431640625e-05, -8.20159912109375e-05, -3.8623809814453125e-05, 0.0, -0.002601844957098365, 0.0, -3.62396240234375e-05, -3.0517578125e-05], "score": -8.381992626557803, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "Is"}], "comparators": [{"attr": "DEMON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Compare", "left": {"attr": "minion_type", "value": {"attr": "card", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"ops": [{"_type": "In"}], "comparators": [{"_type": "Name", "id": "targets"}], "_type": "Compare", "left": {"_type": "Template52"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Arcane Shot", "hole7": "filter_func", "hole6": "find_spell_target", "hole1": 1, "hole2": "PRIEST", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "ArcaneShot"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target, filter_func=lambda target: minion.card.\n            minion_type is MINION_TYPE.DEMON and self.target in targets)\n    minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Arcane", "Shot", "<EOS>", 320, 108, 333, 136, 197, "Arcane", " ", "Shot", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 13, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 69, 166, 41, 317, 11, 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-3.9836816787719727, -4.57763671875e-05, -3.4332275390625e-05, -0.0004138946533203125, -1.33514404296875e-05, -3.576272320060525e-06, -0.00021468581689987332, -4.374974378151819e-05, -1.1444091796875e-05, -0.004360198974609375, -3.814697265625e-06, -0.0020008087158203125, -0.0003566741943359375, -2.288792165927589e-05, -0.0011234283447265625, -0.00048494277871213853, -3.814697265625e-06, -0.0014906892320141196, 0.0, -0.6675758361816406, -0.0007648468017578125, -0.00196075439453125, -1.9073486328125e-06, -0.0006413459777832031, 0.0, -0.02365398406982422, -0.1272411346435547, 0.0, -0.004811286926269531, -2.09808349609375e-05, -0.04126167297363281, -0.011994361877441406, -0.17047595977783203, -0.002849578857421875, -0.037867069244384766, 0.0, -0.039839744567871094, -0.0008544921875, -0.0010833740234375, -0.0009670257568359375, -0.00130462646484375, -0.0009918212890625, -9.5367431640625e-05, 0.0, -0.06129264831542969, -5.7220458984375e-06, -0.0035219192504882812, -9.5367431640625e-06, -0.6910848617553711, -2.09808349609375e-05, -0.018650412559509277, -1.9073486328125e-06, -0.032434333115816116, 0.0, -0.013886451721191406, -1.3519001007080078, -3.814697265625e-06, -0.013795852661132812, -1.9073486328125e-06, -4.00543212890625e-05, -1.9073486328125e-06, -6.866455078125e-05, 0.0, -0.04451560974121094, -3.814697265625e-06, -0.011302947998046875, -0.00040435791015625, -0.1373910903930664, -4.00543212890625e-05, -0.06435012817382812, -0.0005207061767578125, -0.38535118103027344, -5.7220458984375e-06, -0.014223217964172363, -1.71661376953125e-05, -0.7184028625488281, -0.0001316070556640625, -0.0020732879638671875, -1.9073486328125e-06, -0.007170077878981829, -0.00010358769941376522, -3.8862206565681845e-05, 0.0, -8.20159912109375e-05, -0.000278472900390625, -0.000110626220703125, -8.0108642578125e-05, -3.8623809814453125e-05, 0.0, -0.0026124888099730015, 0.0, -4.00543212890625e-05, -3.4332275390625e-05], "score": -8.706612908209536, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "IsNot"}], "comparators": [{"attr": "DEMON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Compare", "left": {"attr": "minion_type", "value": {"attr": "card", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"ops": [{"_type": "In"}], "comparators": [{"_type": "Name", "id": "targets"}], "_type": "Compare", "left": {"_type": "Template52"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Arcane Shot", "hole7": "filter_func", "hole6": "find_spell_target", "hole1": 1, "hole2": "PRIEST", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "ArcaneShot"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target, filter_func=lambda target: minion.card.\n            minion_type is not MINION_TYPE.DEMON and self.target in targets)\n    minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Arcane", "Shot", "<EOS>", 320, 108, 333, 136, 197, "Arcane", " ", "Shot", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 69, 166, 41, 317, 11, 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-3.9836816787719727, -4.57763671875e-05, -3.4332275390625e-05, -0.0004138946533203125, -1.33514404296875e-05, -3.576272320060525e-06, -0.00021468581689987332, -4.374974378151819e-05, -1.1444091796875e-05, -0.004360198974609375, -3.814697265625e-06, -0.0020008087158203125, -0.0003566741943359375, -2.288792165927589e-05, -0.0011234283447265625, -0.00048494277871213853, -3.814697265625e-06, -0.0014906892320141196, 0.0, -1.0826730728149414, -1.9073486328125e-06, -0.0036450624465942383, -5.7220458984375e-06, -0.0015149116516113281, 0.0, -0.016783714294433594, -0.13930130004882812, 0.0, -0.0043315887451171875, -2.09808349609375e-05, -0.037367820739746094, -0.011808395385742188, -0.17865848541259766, -0.0031375885009765625, -0.04527437686920166, 0.0, -0.04189777374267578, -0.0008487701416015625, -0.0011081695556640625, -0.00092315673828125, -0.0012798309326171875, -0.000988006591796875, -9.34600830078125e-05, 0.0, -0.0655975341796875, -5.7220458984375e-06, -0.0034513473510742188, -9.5367431640625e-06, -0.6660737991333008, -2.288818359375e-05, -0.018309950828552246, -1.9073486328125e-06, -0.033082474023103714, 0.0, -0.013743400573730469, -0.7458181381225586, -7.43865966796875e-05, -0.0006198883056640625, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -0.0001239776611328125, 0.0, -0.08290672302246094, -7.62939453125e-06, -0.010784149169921875, -0.00064849853515625, -0.12669658660888672, -2.86102294921875e-05, -0.054076194763183594, -0.0004634857177734375, -0.46160125732421875, -5.7220458984375e-06, -0.018889546394348145, -1.9073486328125e-05, -0.9126758575439453, -0.0001506805419921875, -0.003070831298828125, -1.9073486328125e-06, -0.01088463980704546, -0.00010442208440508693, -3.480909072095528e-05, 0.0, -8.20159912109375e-05, -0.0002460479736328125, -9.5367431640625e-05, -8.392333984375e-05, -3.8623809814453125e-05, 0.0, -0.0025998251512646675, 0.0, -3.62396240234375e-05, -3.0517578125e-05], "score": -8.799185331758963, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "Is"}], "comparators": [{"attr": "DEMON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Compare", "left": {"attr": "minion_type", "value": {"attr": "card", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"ops": [{"_type": "In"}], "comparators": [{"_type": "Name", "id": "targets"}], "_type": "Compare", "left": {"_type": "Template52"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Arcane Shot", "hole7": "filter_func", "hole6": "find_spell_target", "hole1": 1, "hole2": "MAGE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "ArcaneShot"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target, filter_func=lambda target: minion.card.\n            minion_type is MINION_TYPE.DEMON and self.target in targets)\n    minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Arcane", "Shot", "<EOS>", 320, 108, 333, 136, 197, "Arcane", " ", "Shot", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 13, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 69, 166, 41, 317, 11, 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-3.9836816787719727, -4.57763671875e-05, -3.4332275390625e-05, -0.0004138946533203125, -1.33514404296875e-05, -3.576272320060525e-06, -0.00021468581689987332, -4.374974378151819e-05, -1.1444091796875e-05, -0.004360198974609375, -3.814697265625e-06, -0.0020008087158203125, -0.0003566741943359375, -2.288792165927589e-05, -0.0011234283447265625, -0.00048494277871213853, -3.814697265625e-06, -0.0014906892320141196, 0.0, -1.0826730728149414, -1.9073486328125e-06, -0.0036450624465942383, -5.7220458984375e-06, -0.0015149116516113281, 0.0, -0.016783714294433594, -0.13930130004882812, 0.0, -0.0043315887451171875, -2.09808349609375e-05, -0.037367820739746094, -0.011808395385742188, -0.17865848541259766, -0.0031375885009765625, -0.04527437686920166, 0.0, -0.04189777374267578, -0.0008487701416015625, -0.0011081695556640625, -0.00092315673828125, -0.0012798309326171875, -0.000988006591796875, -9.34600830078125e-05, 0.0, -0.0655975341796875, -5.7220458984375e-06, -0.0034513473510742188, -9.5367431640625e-06, -0.6660737991333008, -2.288818359375e-05, -0.018309950828552246, -1.9073486328125e-06, -0.033082474023103714, 0.0, -0.013743400573730469, -1.3510675430297852, -3.814697265625e-06, -0.014715194702148438, -1.9073486328125e-06, -4.00543212890625e-05, -1.9073486328125e-06, -7.05718994140625e-05, 0.0, -0.0446624755859375, -3.814697265625e-06, -0.010987281799316406, -0.00040435791015625, -0.13787174224853516, -4.1961669921875e-05, -0.06452465057373047, -0.0005245208740234375, -0.3843221664428711, -5.7220458984375e-06, -0.014447331428527832, -1.71661376953125e-05, -0.7252340316772461, -0.0001316070556640625, -0.0021152496337890625, -1.9073486328125e-06, -0.00717484625056386, -0.00010358769941376522, -3.8862206565681845e-05, 0.0, -8.20159912109375e-05, -0.0002765655517578125, -0.000110626220703125, -8.0108642578125e-05, -3.8623809814453125e-05, 0.0, -0.002610703930258751, 0.0, -4.00543212890625e-05, -3.4332275390625e-05], "score": -9.128059711701098, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "IsNot"}], "comparators": [{"attr": "DEMON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Compare", "left": {"attr": "minion_type", "value": {"attr": "card", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"ops": [{"_type": "In"}], "comparators": [{"_type": "Name", "id": "targets"}], "_type": "Compare", "left": {"_type": "Template52"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Arcane Shot", "hole7": "filter_func", "hole6": "find_spell_target", "hole1": 1, "hole2": "MAGE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "ArcaneShot"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target, filter_func=lambda target: minion.card.\n            minion_type is not MINION_TYPE.DEMON and self.target in targets)\n    minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Arcane", "Shot", "<EOS>", 320, 108, 333, 136, 197, "Arcane", " ", "Shot", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 69, 166, 41, 317, 11, 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-3.9836816787719727, -4.57763671875e-05, -3.4332275390625e-05, -0.0004138946533203125, -1.33514404296875e-05, -3.576272320060525e-06, -0.00021468581689987332, -4.374974378151819e-05, -1.1444091796875e-05, -0.004360198974609375, -3.814697265625e-06, -0.0020008087158203125, -0.0003566741943359375, -2.288792165927589e-05, -0.0011234283447265625, -0.00048494277871213853, -3.814697265625e-06, -0.0014906892320141196, 0.0, -0.6675758361816406, -0.0007648468017578125, -0.00196075439453125, -1.9073486328125e-06, -0.0006413459777832031, 0.0, -0.02365398406982422, -0.1272411346435547, 0.0, -0.004811286926269531, -2.09808349609375e-05, -0.04126167297363281, -0.011994361877441406, -0.17047595977783203, -0.002849578857421875, -0.037867069244384766, 0.0, -0.039839744567871094, -0.0008544921875, -0.0010833740234375, -0.0009670257568359375, -0.00130462646484375, -0.0009918212890625, -9.5367431640625e-05, 0.0, -0.06129264831542969, -5.7220458984375e-06, -0.0035219192504882812, -9.5367431640625e-06, -0.8312492370605469, -9.5367431640625e-06, -0.03613853454589844, -1.9073486328125e-06, -0.6757270097732544, 0.0, -0.0059375762939453125, -0.7647848129272461, -4.1961669921875e-05, -0.0004367828369140625, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.0002040863037109375, 0.0, -0.08612930774688721, -7.62939453125e-06, -0.009982109069824219, -0.000713348388671875, -0.1291360855102539, -4.57763671875e-05, -0.0512847900390625, -0.0005283355712890625, -0.4321479797363281, -5.7220458984375e-06, -0.01703178882598877, -2.09808349609375e-05, -0.9422874450683594, -0.000152587890625, -0.0035228729248046875, -1.9073486328125e-06, -0.01155757624655962, -0.00010930914868367836, -3.647802441264503e-05, 0.0, -8.58306884765625e-05, -0.0002422332763671875, -8.96453857421875e-05, -8.20159912109375e-05, -3.8623809814453125e-05, 0.0, -0.0025825630873441696, 0.0, -3.62396240234375e-05, -3.0517578125e-05], "score": -9.19788655665343, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "Is"}], "comparators": [{"attr": "DEMON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Compare", "left": {"attr": "minion_type", "value": {"attr": "card", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"ops": [{"_type": "In"}], "comparators": [{"_type": "Name", "id": "targets"}], "_type": "Compare", "left": {"_type": "Template52"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Arcane Shot", "hole7": "filter_func", "hole6": "find_spell_target", "hole1": 1, "hole2": "PRIEST", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "ArcaneShot"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target, filter_func=lambda target: target.card.\n            minion_type is MINION_TYPE.DEMON and self.target in targets)\n    minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Arcane", "Shot", "<EOS>", 320, 108, 333, 136, 197, "Arcane", " ", "Shot", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 69, 166, 41, 317, 11, 320, 74, 187, "Null", "<EOS>", 126, 155, 320, 73, 186, "target", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-3.9836816787719727, -4.57763671875e-05, -3.4332275390625e-05, -0.0004138946533203125, -1.33514404296875e-05, -3.576272320060525e-06, -0.00021468581689987332, -4.374974378151819e-05, -1.1444091796875e-05, -0.004360198974609375, -3.814697265625e-06, -0.0020008087158203125, -0.0003566741943359375, -2.288792165927589e-05, -0.0011234283447265625, -0.00048494277871213853, -3.814697265625e-06, -0.0014906892320141196, 0.0, -0.6675758361816406, -0.0007648468017578125, -0.00196075439453125, -1.9073486328125e-06, -0.0006413459777832031, 0.0, -0.02365398406982422, -0.1272411346435547, 0.0, -0.004811286926269531, -2.09808349609375e-05, -0.04126167297363281, -0.011994361877441406, -0.17047595977783203, -0.002849578857421875, -0.037867069244384766, 0.0, -0.039839744567871094, -0.0008544921875, -0.0010833740234375, -0.0009670257568359375, -0.00130462646484375, -0.0009918212890625, -9.5367431640625e-05, 0.0, -0.06129264831542969, -5.7220458984375e-06, -0.0035219192504882812, -9.5367431640625e-06, -0.6910848617553711, -2.09808349609375e-05, -0.018650412559509277, -1.9073486328125e-06, -0.032434333115816116, 0.0, -0.013886451721191406, -0.7469825744628906, -7.43865966796875e-05, -0.0006046295166015625, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -0.0001239776611328125, 0.0, -0.08253002166748047, -7.62939453125e-06, -0.011058807373046875, -0.000652313232421875, -0.12568092346191406, -2.86102294921875e-05, -0.05403423309326172, -0.0004596710205078125, -1.3771638870239258, -0.0011272430419921875, -0.0001837015151977539, -2.0265579223632812e-06, -0.1446208953857422, -2.288818359375e-05, -2.47955322265625e-05, -0.0049610137939453125, 0.0, -0.8227030038833618, -4.29153169534402e-06, -0.000736236572265625, -0.000118255615234375, -3.62396240234375e-05, 0.0, -0.00173187255859375, -1.9073486328125e-06, -0.007395027671009302, -2.3841855067985307e-07, -0.009396195411682129, 0.0, -1.9073486328125e-06, -5.53131103515625e-05, 0.0, -0.38922321796417236, -2.0265579223632812e-06, -0.032853126525878906, -0.0010528564453125, -0.08557319641113281, -5.7220458984375e-06, -0.10778450965881348, -0.0007208371534943581, -5.376337139750831e-05, 0.0, -2.47955322265625e-05, -0.0009765625, -3.24249267578125e-05, -5.340576171875e-05, -0.0001207590103149414, 0.0, -0.001266281120479107, 0.0, -5.7220458984375e-05], "score": -9.963814469034304, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "Is"}], "comparators": [{"attr": "DEMON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Compare", "left": {"attr": "minion_type", "value": {"attr": "card", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"ops": [{"_type": "In"}], "comparators": [{"value": "Null", "_type": "NameConstant"}], "_type": "Compare", "left": {"_type": "Template52"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Arcane Shot", "hole7": "filter_func", "hole6": "find_spell_target", "hole1": 1, "hole2": "PRIEST", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "target"}], "_type": "Assign"}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "ArcaneShot"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "Module"}, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target, filter_func=lambda target: minion.card.\n            minion_type is MINION_TYPE.DEMON and self.target in Null)\n    target = game.random_choice(targets)\n\n\nminion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Arcane", "Shot", "<EOS>", 320, 108, 333, 136, 197, "Arcane", " ", "Shot", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 69, 166, 41, 317, 11, 320, 74, 187, "Null", "<EOS>", 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-3.9836816787719727, -4.57763671875e-05, -3.4332275390625e-05, -0.0004138946533203125, -1.33514404296875e-05, -3.576272320060525e-06, -0.00021468581689987332, -4.374974378151819e-05, -1.1444091796875e-05, -0.004360198974609375, -3.814697265625e-06, -0.0020008087158203125, -0.0003566741943359375, -2.288792165927589e-05, -0.0011234283447265625, -0.00048494277871213853, -3.814697265625e-06, -0.0014906892320141196, 0.0, -0.6675758361816406, -0.0007648468017578125, -0.00196075439453125, -1.9073486328125e-06, -0.0006413459777832031, 0.0, -0.02365398406982422, -0.1272411346435547, 0.0, -0.004811286926269531, -2.09808349609375e-05, -0.04126167297363281, -0.011994361877441406, -0.17047595977783203, -0.002849578857421875, -0.037867069244384766, 0.0, -0.039839744567871094, -0.0008544921875, -0.0010833740234375, -0.0009670257568359375, -0.00130462646484375, -0.0009918212890625, -9.5367431640625e-05, 0.0, -0.06129264831542969, -5.7220458984375e-06, -0.0035219192504882812, -9.5367431640625e-06, -0.6910848617553711, -2.09808349609375e-05, -0.018650412559509277, -1.9073486328125e-06, -0.032434333115816116, 0.0, -0.013886451721191406, -0.7469825744628906, -7.43865966796875e-05, -0.0006046295166015625, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -0.0001239776611328125, 0.0, -0.08253002166748047, -7.62939453125e-06, -0.011058807373046875, -0.000652313232421875, -0.12568092346191406, -2.86102294921875e-05, -0.05403423309326172, -0.0004596710205078125, -1.3771638870239258, -0.0011272430419921875, -0.0001837015151977539, -2.0265579223632812e-06, -0.1446208953857422, -2.288818359375e-05, -2.47955322265625e-05, -0.0049610137939453125, 0.0, -0.6297193765640259, -2.002696055569686e-05, -0.011240005493164062, -0.000316619873046875, -9.34600830078125e-05, -1.9073486328125e-06, -0.000946044921875, -1.9073486328125e-06, -0.022323131561279297, -2.3841855067985307e-07, -0.009357333183288574, 0.0, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.6313974857330322, -4.0531158447265625e-06, -0.034008026123046875, -0.0011081695556640625, -0.09184837341308594, -5.7220458984375e-06, -0.0959780216217041, -0.0008248264202848077, -5.149839853402227e-05, 0.0, -2.47955322265625e-05, -0.0009174346923828125, -3.24249267578125e-05, -5.340576171875e-05, -0.00012063980102539062, 0.0, -0.0012449522037059069, 0.0, -5.53131103515625e-05], "score": -10.033578059771543, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "Is"}], "comparators": [{"attr": "DEMON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Compare", "left": {"attr": "minion_type", "value": {"attr": "card", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"ops": [{"_type": "In"}], "comparators": [{"value": "Null", "_type": "NameConstant"}], "_type": "Compare", "left": {"_type": "Template52"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Arcane Shot", "hole7": "filter_func", "hole6": "find_spell_target", "hole1": 1, "hole2": "PRIEST", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign"}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "ArcaneShot"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "Module"}, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target, filter_func=lambda target: minion.card.\n            minion_type is MINION_TYPE.DEMON and self.target in Null)\n    minion = game.random_choice(targets)\n\n\nminion.damage(player.effective_spell_damage(2), self)\n"}], "index": 6}
{"beams": [{"choice_history": [121, 198, "Arcanite", "Reaper", "<EOS>", "Weapon", "Card", "<EOS>", 332, 139, 204, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "5", "<EOS>", "2", "<EOS>"], "score_history": [-1.1444091796875e-05, -7.2479248046875e-05, -0.00010239553375868127, -3.576214658096433e-05, -4.613332566805184e-05, -1.4424300388782285e-05, -1.692770456429571e-05, -7.665147859370336e-05, -8.58306884765625e-05, -0.0058994293212890625, -0.0001735687255859375, -1.9073468138230965e-06, -9.775161743164062e-06, -3.576278118089249e-07, 0.0, -2.4199245672207326e-05, 0.0, -0.03292393684387207, 0.0, -0.003502433653920889, 0.0, -0.0002700089826248586, 0.0, -8.392333984375e-05, -0.0002956390380859375, -0.000629425048828125, -1.4305104514278355e-06, -0.0004082918167114258, -1.4305104514278355e-06, 0.0, -0.0023653507232666016, 0.0], "score": -0.04705315641484731, "model_output": {"hole4": "player", "hole0": "ArcaniteReaper", "hole1": "WeaponCard", "hole2": [{"hole1": 5, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Arcanite Reaper"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 5, "hole2": 2, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(5, 2)\n"}, {"choice_history": [121, 198, "Arcanite", "Reaper", "<EOS>", "Weapon", "Card", "<EOS>", 332, 139, 204, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "5", "<EOS>", "2", "<EOS>"], "score_history": [-1.1444091796875e-05, -7.2479248046875e-05, -0.00010239553375868127, -3.576214658096433e-05, -4.613332566805184e-05, -1.4424300388782285e-05, -1.692770456429571e-05, -7.665147859370336e-05, -8.58306884765625e-05, -0.0058994293212890625, -0.0001735687255859375, -1.9073468138230965e-06, -9.775161743164062e-06, -3.576278118089249e-07, 0.0, -2.4199245672207326e-05, 0.0, -3.9407999515533447, -1.9073486328125e-06, -0.0038685458712279797, 0.0, -0.00023972959024831653, 0.0, -0.0002346038818359375, -0.0006771087646484375, -0.0011425018310546875, -9.536738616588991e-07, -0.0003337860107421875, -2.3841830625315197e-06, 0.0, -0.002108931541442871, 0.0], "score": -3.955981690196893, "model_output": {"hole4": "player", "hole0": "ArcaniteReaper", "hole1": "WeaponCard", "hole2": [{"hole1": 5, "hole2": "PALADIN", "_type": "Template14", "hole0": "Arcanite Reaper"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 5, "hole2": 2, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(5, 2)\n"}, {"choice_history": [121, 198, "Arcanite", "Reaper", "<EOS>", "Weapon", "Card", "<EOS>", 332, 139, 204, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "5", "<EOS>", "2", "<EOS>"], "score_history": [-1.1444091796875e-05, -7.2479248046875e-05, -0.00010239553375868127, -3.576214658096433e-05, -4.613332566805184e-05, -1.4424300388782285e-05, -1.692770456429571e-05, -7.665147859370336e-05, -8.58306884765625e-05, -0.0058994293212890625, -0.0001735687255859375, -1.9073468138230965e-06, -9.775161743164062e-06, -3.576278118089249e-07, 0.0, -2.4199245672207326e-05, 0.0, -4.850676536560059, 0.0, -0.2057589292526245, 0.0, -0.0006517171859741211, 0.0, -2.6702880859375e-05, -0.5392913818359375, -0.0041942596435546875, -3.576272320060525e-06, -0.00015652179718017578, -1.9073468138230965e-06, 0.0, -0.0020775794982910156, 0.0], "score": -5.609410398220405, "model_output": {"hole4": "player", "hole0": "ArcaniteReaper", "hole1": "WeaponCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Arcanite Reaper"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": 2, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Weapon(5, 2)\n"}, {"choice_history": [121, 198, "Arcanite", "Reaper", "<EOS>", "Weapon", "Card", "<EOS>", 332, 139, 204, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "5", "<EOS>", "5", "<EOS>"], "score_history": [-1.1444091796875e-05, -7.2479248046875e-05, -0.00010239553375868127, -3.576214658096433e-05, -4.613332566805184e-05, -1.4424300388782285e-05, -1.692770456429571e-05, -7.665147859370336e-05, -8.58306884765625e-05, -0.0058994293212890625, -0.0001735687255859375, -1.9073468138230965e-06, -9.775161743164062e-06, -3.576278118089249e-07, 0.0, -2.4199245672207326e-05, 0.0, -0.03292393684387207, 0.0, -0.003502433653920889, 0.0, -0.0002700089826248586, 0.0, -8.392333984375e-05, -0.0002956390380859375, -0.000629425048828125, -1.4305104514278355e-06, -0.0004082918167114258, -1.4305104514278355e-06, 0.0, -6.075094699859619, -2.3841855067985307e-07], "score": -6.1197827439697505, "model_output": {"hole4": "player", "hole0": "ArcaniteReaper", "hole1": "WeaponCard", "hole2": [{"hole1": 5, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Arcanite Reaper"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 5, "hole2": 5, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(5, 5)\n"}, {"choice_history": [121, 198, "Arcanite", "Reaper", "<EOS>", "Weapon", "Card", "<EOS>", 332, 139, 204, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "5", "<EOS>", "2", "<EOS>"], "score_history": [-1.1444091796875e-05, -7.2479248046875e-05, -0.00010239553375868127, -3.576214658096433e-05, -4.613332566805184e-05, -1.4424300388782285e-05, -1.692770456429571e-05, -7.665147859370336e-05, -8.58306884765625e-05, -0.0058994293212890625, -0.0001735687255859375, -1.9073468138230965e-06, -9.775161743164062e-06, -3.576278118089249e-07, 0.0, -2.4199245672207326e-05, 0.0, -5.4065399169921875, 0.0, -0.8463882207870483, 0.0, -0.00016140853404067457, 0.0, -0.0003986358642578125, -0.0006084442138671875, -0.0006351470947265625, -1.1920922133867862e-06, -0.0004063844680786133, -1.4305104514278355e-06, -1.1920928244535389e-07, -0.002478957176208496, 0.0], "score": -6.264191142889153, "model_output": {"hole4": "player", "hole0": "ArcaniteReaper", "hole1": "WeaponCard", "hole2": [{"hole1": 5, "hole2": "ROGUE", "_type": "Template14", "hole0": "Arcanite Reaper"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 5, "hole2": 2, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(5, 2)\n"}, {"choice_history": [121, 198, "Arcanite", "Reaper", "<EOS>", "Weapon", "Card", "<EOS>", 332, 139, 204, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", "2", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "5", "<EOS>", "2", "<EOS>"], "score_history": [-1.1444091796875e-05, -7.2479248046875e-05, -0.00010239553375868127, -3.576214658096433e-05, -4.613332566805184e-05, -1.4424300388782285e-05, -1.692770456429571e-05, -7.665147859370336e-05, -8.58306884765625e-05, -0.0058994293212890625, -0.0001735687255859375, -1.9073468138230965e-06, -9.775161743164062e-06, -3.576278118089249e-07, 0.0, -2.4199245672207326e-05, 0.0, -0.03292393684387207, 0.0, -6.3039751052856445, 0.0, -0.004735350608825684, 0.0, -0.0002689361572265625, -0.00079345703125, -0.00159454345703125, -2.264974000354414e-06, -0.0004169940948486328, -1.311301275563892e-06, 0.0, -0.0024793148040771484, 0.0], "score": -6.353762500504843, "model_output": {"hole4": "player", "hole0": "ArcaniteReaper", "hole1": "WeaponCard", "hole2": [{"hole1": 5, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Arcanite Reaper"}], "_type": "Template1", "hole3": "2", "hole6": [{"hole1": 5, "hole2": 2, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def 2(self, player):\n        return Weapon(5, 2)\n"}, {"choice_history": [121, 198, "Arcanite", "Reaper", "<EOS>", "Weapon", "Card", "<EOS>", 332, 139, 204, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "2", "<EOS>"], "score_history": [-1.1444091796875e-05, -7.2479248046875e-05, -0.00010239553375868127, -3.576214658096433e-05, -4.613332566805184e-05, -1.4424300388782285e-05, -1.692770456429571e-05, -7.665147859370336e-05, -8.58306884765625e-05, -0.0058994293212890625, -0.0001735687255859375, -1.9073468138230965e-06, -9.775161743164062e-06, -3.576278118089249e-07, 0.0, -2.4199245672207326e-05, 0.0, -4.850676536560059, 0.0, -0.2057589292526245, 0.0, -0.0006517171859741211, 0.0, -2.6702880859375e-05, -1.3056344985961914, -1.33514404296875e-05, -8.344646857949556e-07, -9.5367431640625e-06, -0.02572941780090332, 0.0], "score": -6.395072810871682, "model_output": {"hole4": "player", "hole0": "ArcaniteReaper", "hole1": "WeaponCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Arcanite Reaper"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(5, 2)\n"}, {"choice_history": [121, 198, "Arcanite", "Reaper", "<EOS>", "Weapon", "Card", "<EOS>", 332, 139, 204, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "5", "<EOS>", "2", "<EOS>"], "score_history": [-1.1444091796875e-05, -7.2479248046875e-05, -0.00010239553375868127, -3.576214658096433e-05, -4.613332566805184e-05, -1.4424300388782285e-05, -1.692770456429571e-05, -7.665147859370336e-05, -8.58306884765625e-05, -0.0058994293212890625, -0.0001735687255859375, -1.9073468138230965e-06, -9.775161743164062e-06, -3.576278118089249e-07, 0.0, -2.4199245672207326e-05, 0.0, -4.850676536560059, 0.0, -1.693510890007019, 0.0, -0.0001643895811866969, 0.0, -8.392333984375e-05, -0.0008182525634765625, -0.0005474090576171875, -2.0265558760002023e-06, -0.0005284547805786133, -8.344646857949556e-07, -1.1920928244535389e-07, -0.0027916431427001953, 0.0], "score": -6.555695765209116, "model_output": {"hole4": "player", "hole0": "ArcaniteReaper", "hole1": "WeaponCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Arcanite Reaper"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 5, "hole2": 2, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(5, 2)\n"}, {"choice_history": [121, 198, "Arcanite", "Reaper", "<EOS>", "Weapon", "Card", "<EOS>", 332, 139, 204, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "2", "<EOS>"], "score_history": [-1.1444091796875e-05, -7.2479248046875e-05, -0.00010239553375868127, -3.576214658096433e-05, -4.613332566805184e-05, -1.4424300388782285e-05, -1.692770456429571e-05, -7.665147859370336e-05, -8.58306884765625e-05, -0.0058994293212890625, -0.0001735687255859375, -1.9073468138230965e-06, -9.775161743164062e-06, -3.576278118089249e-07, 0.0, -2.4199245672207326e-05, 0.0, -5.4065399169921875, 0.0, -0.5617870092391968, 0.0, -0.00020432470773812383, 0.0, -0.0001087188720703125, -0.6838893890380859, -9.5367431640625e-06, -9.536738616588991e-07, -7.62939453125e-06, -0.018982289358973503, 0.0], "score": -6.6781010539666, "model_output": {"hole4": "player", "hole0": "ArcaniteReaper", "hole1": "WeaponCard", "hole2": [{"hole1": 5, "hole2": "ROGUE", "_type": "Template14", "hole0": "Arcanite Reaper"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(5, 2)\n"}, {"choice_history": [121, 198, "Arcanite", "Reaper", "<EOS>", "Weapon", "Card", "<EOS>", 332, 139, 204, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "5", "<EOS>", "2", "<EOS>"], "score_history": [-1.1444091796875e-05, -7.2479248046875e-05, -0.00010239553375868127, -3.576214658096433e-05, -4.613332566805184e-05, -1.4424300388782285e-05, -1.692770456429571e-05, -7.665147859370336e-05, -8.58306884765625e-05, -0.0058994293212890625, -0.0001735687255859375, -1.9073468138230965e-06, -9.775161743164062e-06, -3.576278118089249e-07, 0.0, -2.4199245672207326e-05, 0.0, -5.4065399169921875, 0.0, -0.5617870092391968, 0.0, -0.00020432470773812383, 0.0, -0.0001087188720703125, -0.9832515716552734, -0.0078029632568359375, -2.145764938177308e-06, -0.00016224384307861328, -3.099436753473128e-06, 0.0, -0.0018537042196840048, 0.0], "score": -6.968286983934547, "model_output": {"hole4": "player", "hole0": "ArcaniteReaper", "hole1": "WeaponCard", "hole2": [{"hole1": 5, "hole2": "ROGUE", "_type": "Template14", "hole0": "Arcanite Reaper"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": 2, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Weapon(5, 2)\n"}, {"choice_history": [121, 198, "Arcanite", "Reaper", "<EOS>", "Weapon", "Card", "<EOS>", 332, 139, 204, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", "Weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "5", "<EOS>", "2", "<EOS>"], "score_history": [-1.1444091796875e-05, -7.2479248046875e-05, -0.00010239553375868127, -3.576214658096433e-05, -4.613332566805184e-05, -1.4424300388782285e-05, -1.692770456429571e-05, -7.665147859370336e-05, -8.58306884765625e-05, -0.0058994293212890625, -0.0001735687255859375, -1.9073468138230965e-06, -9.775161743164062e-06, -3.576278118089249e-07, 0.0, -2.4199245672207326e-05, 0.0, -0.03292393684387207, 0.0, -7.159389495849609, -0.006320953369140625, -0.0005120037822052836, 0.0, -5.14984130859375e-05, -0.0050106048583984375, -0.00101470947265625, -1.5497195136049413e-06, -0.0002480745315551758, -1.7881377516459906e-06, 0.0, -0.0019372700480744243, 0.0], "score": -7.213983170972654, "model_output": {"hole4": "player", "hole0": "ArcaniteReaper", "hole1": "WeaponCard", "hole2": [{"hole1": 5, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Arcanite Reaper"}], "_type": "Template1", "hole3": "Weapon", "hole6": [{"hole1": 5, "hole2": 2, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def Weapon(self, player):\n        return Weapon(5, 2)\n"}, {"choice_history": [121, 198, "Arcanite", "Reaper", "<EOS>", "Weapon", "Card", "<EOS>", 332, 138, 203, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 93, 255, "Weapon", "<EOS>", "Minion", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "2", "<EOS>"], "score_history": [-1.1444091796875e-05, -7.2479248046875e-05, -0.00010239553375868127, -3.576214658096433e-05, -4.613332566805184e-05, -1.4424300388782285e-05, -1.692770456429571e-05, -7.665147859370336e-05, -8.58306884765625e-05, -5.300695419311523, -0.0002040863037109375, -1.1920928244535389e-07, -1.919269561767578e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.935001586796716e-06, -9.5367431640625e-06, -0.5011066198348999, 0.0, -0.07090091705322266, 0.0, -1.279007911682129, -0.14087486267089844, -0.4924342632293701, -0.0004796981520485133, -5.7220458984375e-06, -0.0023899078369140625, -5.7220458984375e-06, -0.05590022727847099, -0.343936562538147, -0.2629564702510834, -5.7220458984375e-06, 0.0, -0.029972434043884277, -1.9073486328125e-06, -5.3405579819809645e-05, 0.0, -8.7738037109375e-05, -7.62939453125e-06, -9.5367431640625e-06, -1.1444026313256472e-05, -3.62396240234375e-05, -0.02002154290676117, -3.814697265625e-06], "score": -8.50160845154641, "model_output": {"hole4": "player", "hole0": "ArcaniteReaper", "hole1": "WeaponCard", "hole2": [{"hole4": {"hole1": [{"_type": "Template46", "hole0": "Weapon"}], "hole2": "MinionSelector", "_type": "Template22", "hole0": "Give"}, "hole0": "Arcanite Reaper", "hole1": 5, "hole2": "WARRIOR", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(Weapon()),\n            MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 2)\n"}, {"choice_history": [121, 198, "Arcanite", "Reaper", "<EOS>", "Weapon", "Card", "<EOS>", 332, 138, 203, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 105, 93, 255, "Weapon", "Selector", "<EOS>", 68, 163, 56, 320, 105, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "2", "<EOS>"], "score_history": [-1.1444091796875e-05, -7.2479248046875e-05, -0.00010239553375868127, -3.576214658096433e-05, -4.613332566805184e-05, -1.4424300388782285e-05, -1.692770456429571e-05, -7.665147859370336e-05, -8.58306884765625e-05, -5.300695419311523, -0.0002040863037109375, -1.1920928244535389e-07, -1.919269561767578e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.935001586796716e-06, -9.5367431640625e-06, -0.5011066198348999, 0.0, -0.07090091705322266, 0.0, -0.33466625213623047, -3.4332275390625e-05, -0.00029754638671875, -0.377288818359375, -0.4105987548828125, -1.1444091796875e-05, -0.049945831298828125, -0.00011444091796875, -0.5134201049804688, -0.011005401611328125, -4.76837158203125e-05, -0.7869206666946411, -0.001995682716369629, 0.0, -0.00301361083984375, -0.0023136138916015625, -0.36852359771728516, -5.7220458984375e-05, -0.012139320373535156, -0.42106831073760986, 0.0, -0.0001436422171536833, 0.0, -0.0001735687255859375, -1.33514404296875e-05, -7.62939453125e-06, -2.2649508537142538e-05, -1.71661376953125e-05, -0.008846511133015156, -1.9073486328125e-06], "score": -9.176094749360338, "model_output": {"hole4": "player", "hole0": "ArcaniteReaper", "hole1": "WeaponCard", "hole2": [{"hole4": {"func": {"_type": "Template66"}, "_type": "Call", "args": [{"func": {"_type": "Template73"}, "_type": "Call", "args": [{"_type": "Template62_expr_seq"}]}, {"_type": "Template46", "hole0": "WeaponSelector"}, {"func": {"_type": "Template73"}, "_type": "Call", "args": [{"_type": "Template62_expr_seq"}]}]}, "hole0": "Arcanite Reaper", "hole1": 5, "hole2": "WARRIOR", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(), WeaponSelector(\n            ), Give()))\n\n    def create_minion(self, player):\n        return Minion(5, 2)\n"}, {"choice_history": [121, 198, "Arcanite", "Reaper", "<EOS>", "Weapon", "Card", "<EOS>", 332, 139, 204, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "2", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "2", "<EOS>", 68, 163, 57, 321, 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-1.1444091796875e-05, -7.2479248046875e-05, -0.00010239553375868127, -3.576214658096433e-05, -4.613332566805184e-05, -1.4424300388782285e-05, -1.692770456429571e-05, -7.665147859370336e-05, -8.58306884765625e-05, -0.0058994293212890625, -0.0001735687255859375, -1.9073468138230965e-06, -9.775161743164062e-06, -3.576278118089249e-07, 0.0, -2.4199245672207326e-05, 0.0, -4.850676536560059, 0.0, -0.2057589292526245, 0.0, -0.0006517171859741211, 0.0, -2.6702880859375e-05, -1.9690170288085938, -0.0008335113525390625, -5.483612312673358e-06, -4.768370445162873e-07, -0.005912184715270996, 0.0, -0.21105444431304932, 0.0, -0.000637054443359375, -0.0001964569091796875, -0.0003477334976196289, -0.0001735687255859375, -0.029285430908203125, -0.001712799072265625, -9.72747802734375e-05, -0.17889755964279175, -0.0032695531845092773, -0.3068275451660156, -0.0668487548828125, -0.00479888916015625, -0.013236045837402344, -0.32712268829345703, -0.000675201416015625, -0.3007785975933075, -0.24591636657714844, 0.0, -0.03399944305419922, -3.814697265625e-05, -0.0055615901947021484, -0.0008170604705810547, -1.9073486328125e-06, -7.62939453125e-06, -0.0007038116455078125, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -5.14984130859375e-05, -0.18625926971435547, -4.38690185546875e-05, -0.04416084289550781, -1.33514404296875e-05, -0.004802703857421875, -2.384185791015625e-06, -2.09808349609375e-05, -2.6702880859375e-05, -0.6781253814697266], "score": -9.685998820273483, "model_output": {"hole4": "player", "hole0": "ArcaniteReaper", "hole1": "WeaponCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Arcanite Reaper"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 2}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"hole1": {"_type": "Name", "id": "IsType"}, "hole2": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Template35", "hole0": "MinionSelector"}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 5}]}, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(5, 2, auras=[Aura(ChangeAttack(2), MinionSelector(\n            MinionSelector(IsType(MINION_TYPE.BEAST)), BothPlayer()))])\n"}, {"choice_history": [121, 198, "Arcanite", "Reaper", "<EOS>", "Weapon", "Card", "<EOS>", 332, 139, 204, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "2", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "2", "<EOS>", 68, 163, 57, 321, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-1.1444091796875e-05, -7.2479248046875e-05, -0.00010239553375868127, -3.576214658096433e-05, -4.613332566805184e-05, -1.4424300388782285e-05, -1.692770456429571e-05, -7.665147859370336e-05, -8.58306884765625e-05, -0.0058994293212890625, -0.0001735687255859375, -1.9073468138230965e-06, -9.775161743164062e-06, -3.576278118089249e-07, 0.0, -2.4199245672207326e-05, 0.0, -4.850676536560059, 0.0, -0.2057589292526245, 0.0, -0.0006517171859741211, 0.0, -2.6702880859375e-05, -1.9690170288085938, -0.0008335113525390625, -5.483612312673358e-06, -4.768370445162873e-07, -0.005912184715270996, 0.0, -0.21105444431304932, 0.0, -0.000637054443359375, -0.0001964569091796875, -0.0003477334976196289, -0.0001735687255859375, -0.029285430908203125, -0.001712799072265625, -9.72747802734375e-05, -0.17889755964279175, -0.0032695531845092773, -0.3068275451660156, -0.0668487548828125, -0.00479888916015625, -0.013236045837402344, -1.3344860076904297, -0.020203590393066406, -0.000171661376953125, -1.9073486328125e-06, -0.002105548046529293, -0.003208665642887354, -1.311301275563892e-06, -7.62939453125e-06, -0.0002422332763671875, -0.0002040863037109375, -3.814697265625e-06, -1.33514404296875e-05, -0.00014352798461914062, -9.5367431640625e-05, -0.6225411891937256, -8.7738037109375e-05, -0.0013751983642578125, -1.9073486328125e-05, -0.0003415333922021091, -7.390960945485858e-06, -1.1444091796875e-05, -1.1444091796875e-05, -0.4078197479248047], "score": -10.249940429546598, "model_output": {"hole4": "player", "hole0": "ArcaniteReaper", "hole1": "WeaponCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Arcanite Reaper"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 2}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 5}]}, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(5, 2, auras=[Aura(ChangeAttack(2), MinionSelector(\n            IsType(MINION_TYPE.MURLOC), BothPlayer()))])\n"}], "index": 7}
{"beams": [{"choice_history": [121, 200, "Assassinate", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Assassinate", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110], "score_history": [-0.0001163482666015625, -6.29425048828125e-05, -3.3378546504536644e-06, -7.271765298355604e-06, -1.1920201359316707e-07, -4.57763671875e-05, -3.063678741455078e-05, -0.0013103485107421875, -0.0001773834228515625, -7.62939453125e-06, -3.4332275390625e-05, -0.0002231597900390625, -3.0517578125e-05, -7.82012939453125e-05, -6.103515625e-05, -0.0002288818359375, -3.790783375734463e-05, -2.0265579223632812e-06, -0.017927169799804688, -0.0003204345703125, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.0010318756103515625, -7.62939453125e-06, -0.0009508132934570312, 0.0, -0.0019922256469726562, -4.1961669921875e-05, -0.0006313323974609375, -0.000392913818359375, -0.00014495849609375, 0.0, -0.0001316070556640625, -5.7220458984375e-05, -0.0006923675537109375, -0.016180038452148438, 0.0, -4.017353057861328e-05, 0.0, -2.4676293833181262e-05, 0.0, -7.62939453125e-06, -0.0001125335693359375, -0.0005359649658203125, -9.655952453613281e-06, 0.0, -0.0026340484619140625, -1.52587890625e-05, -0.0002346038818359375, -0.000682830810546875, -0.000522613525390625, -0.025482619181275368, -0.0001811981201171875, -3.814697265625e-05, -0.0011157989501953125], "score": -0.07464584073068181, "model_output": {"hole4": "player", "hole0": "Assassinate", "hole6": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Assassinate", "_type": "Str"}, {"_type": "Template67"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [121, 200, "Assassinate", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Assassinate", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110], "score_history": [-0.0001163482666015625, -6.29425048828125e-05, -3.3378546504536644e-06, -7.271765298355604e-06, -1.1920201359316707e-07, -4.57763671875e-05, -3.063678741455078e-05, -0.0013103485107421875, -0.0001773834228515625, -7.62939453125e-06, -3.4332275390625e-05, -0.0002231597900390625, -3.0517578125e-05, -7.82012939453125e-05, -6.103515625e-05, -0.0002288818359375, -3.790783375734463e-05, -2.0265579223632812e-06, -4.394704818725586, -7.62939453125e-06, -1.1444091796875e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.0020360946655273438, -5.7220458984375e-06, -0.0025272369384765625, 0.0, -0.0016269683837890625, -4.57763671875e-05, -0.0004673004150390625, -0.000453948974609375, -0.0001926422119140625, 0.0, -9.72747802734375e-05, -4.1961669921875e-05, -0.0007305145263671875, -0.0161285400390625, 0.0, -4.017353057861328e-05, 0.0, -2.551075340306852e-05, 0.0, -7.62939453125e-06, -0.0001068115234375, -0.0005397796630859375, -9.655952453613281e-06, 0.0, -0.002674102783203125, -1.52587890625e-05, -0.000244140625, -0.0006847381591796875, -0.000530242919921875, -0.025782907381653786, -0.00018310546875, -3.814697265625e-05, -0.0011072158813476562], "score": -4.453551852306646, "model_output": {"hole4": "player", "hole0": "Assassinate", "hole6": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Assassinate", "_type": "Str"}, {"_type": "Template59"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [121, 200, "Assassinate", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Assassinate", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110], "score_history": [-0.0001163482666015625, -6.29425048828125e-05, -3.3378546504536644e-06, -7.271765298355604e-06, -1.1920201359316707e-07, -4.57763671875e-05, -3.063678741455078e-05, -0.0013103485107421875, -0.0001773834228515625, -7.62939453125e-06, -3.4332275390625e-05, -0.0002231597900390625, -3.0517578125e-05, -7.82012939453125e-05, -6.103515625e-05, -0.0002288818359375, -3.790783375734463e-05, -2.0265579223632812e-06, -0.017927169799804688, -0.0003204345703125, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.0010318756103515625, -7.62939453125e-06, -0.0009508132934570312, 0.0, -0.0019922256469726562, -4.1961669921875e-05, -0.0006313323974609375, -0.000392913818359375, -0.00014495849609375, 0.0, -0.0001316070556640625, -5.7220458984375e-05, -0.0006923675537109375, -4.600144386291504, -3.62396240234375e-05, -4.291534423828125e-05, 0.0, -2.0503972336882725e-05, 0.0, -5.7220458984375e-06, -9.34600830078125e-05, -0.0004940032958984375, -7.62939453125e-06, 0.0, -0.002819061279296875, -1.33514404296875e-05, -0.0002899169921875, -0.0006465911865234375, -0.00045013427734375, -0.0173164252191782, -0.0001983642578125, -4.00543212890625e-05, -0.001201629638671875], "score": -4.650648438543158, "model_output": {"hole4": "player", "hole0": "Assassinate", "hole6": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Assassinate", "_type": "Str"}, {"_type": "Template67"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [121, 200, "Assassinate", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Assassinate", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "PRIEST", "<EOS>", 320, 110], "score_history": [-0.0001163482666015625, -6.29425048828125e-05, -3.3378546504536644e-06, -7.271765298355604e-06, -1.1920201359316707e-07, -4.57763671875e-05, -3.063678741455078e-05, -0.0013103485107421875, -0.0001773834228515625, -7.62939453125e-06, -3.4332275390625e-05, -0.0002231597900390625, -3.0517578125e-05, -7.82012939453125e-05, -6.103515625e-05, -0.0002288818359375, -3.790783375734463e-05, -2.0265579223632812e-06, -0.017927169799804688, -0.0003204345703125, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.0010318756103515625, -7.62939453125e-06, -0.0009508132934570312, 0.0, -0.0019922256469726562, -4.1961669921875e-05, -0.0006313323974609375, -0.000392913818359375, -0.00014495849609375, 0.0, -0.0001316070556640625, -5.7220458984375e-05, -0.0006923675537109375, -0.016180038452148438, 0.0, -4.017353057861328e-05, 0.0, -2.4676293833181262e-05, 0.0, -7.62939453125e-06, -0.0001125335693359375, -0.0005359649658203125, -9.655952453613281e-06, 0.0, -0.0026340484619140625, -1.52587890625e-05, -0.0002346038818359375, -0.000682830810546875, -0.000522613525390625, -5.162411212921143, -0.0013294219970703125, -6.866455078125e-05, -0.22751522064208984], "score": -5.439152597617522, "model_output": {"hole4": "player", "hole0": "Assassinate", "hole6": [{"_type": "Template19"}, {"hole1": "PRIEST", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Assassinate", "_type": "Str"}, {"_type": "Template67"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.PRIEST(self)\n"}, {"choice_history": [121, 200, "Assassinate", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Assassinate", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110], "score_history": [-0.0001163482666015625, -6.29425048828125e-05, -3.3378546504536644e-06, -7.271765298355604e-06, -1.1920201359316707e-07, -4.57763671875e-05, -3.063678741455078e-05, -0.0013103485107421875, -0.0001773834228515625, -7.62939453125e-06, -3.4332275390625e-05, -0.0002231597900390625, -3.0517578125e-05, -7.82012939453125e-05, -6.103515625e-05, -0.0002288818359375, -3.790783375734463e-05, -2.0265579223632812e-06, -0.017927169799804688, -0.0003204345703125, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.0010318756103515625, -7.62939453125e-06, -0.0009508132934570312, 0.0, -0.0019922256469726562, -4.1961669921875e-05, -0.0006313323974609375, -0.000392913818359375, -0.00014495849609375, 0.0, -0.0001316070556640625, -5.7220458984375e-05, -0.0006923675537109375, -5.845390319824219, -7.62939453125e-06, -0.00019776812405325472, 0.0, -2.4795466742943972e-05, 0.0, -9.5367431640625e-06, -0.000179290771484375, -0.00118255615234375, -9.5367431640625e-06, 0.0, -0.0026416778564453125, -1.52587890625e-05, -0.0001983642578125, -0.0007171630859375, -0.000476837158203125, -0.027816493064165115, -0.0001888275146484375, -3.814697265625e-05, -0.001514434814453125], "score": -5.907436686612073, "model_output": {"hole4": "player", "hole0": "Assassinate", "hole6": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Assassinate", "_type": "Str"}, {"_type": "Template67"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [121, 200, "Assassinate", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Assassinate", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110], "score_history": [-0.0001163482666015625, -6.29425048828125e-05, -3.3378546504536644e-06, -7.271765298355604e-06, -1.1920201359316707e-07, -4.57763671875e-05, -3.063678741455078e-05, -0.0013103485107421875, -0.0001773834228515625, -7.62939453125e-06, -3.4332275390625e-05, -0.0002231597900390625, -3.0517578125e-05, -7.82012939453125e-05, -6.103515625e-05, -0.0002288818359375, -3.790783375734463e-05, -2.0265579223632812e-06, -5.346048355102539, -0.0005207061767578125, -0.005712955258786678, -0.00011456012725830078, -0.5132455825805664, -0.000225067138671875, -0.006960868835449219, 0.0, -0.0018310546875, -0.0002288818359375, -0.0049571990966796875, 0.0, -0.000568389892578125, -4.57763671875e-05, -0.000492095947265625, -0.000316619873046875, -0.0001068115234375, 0.0, -8.392333984375e-05, -3.0517578125e-05, -0.000675201416015625, -0.016923904418945312, 0.0, -3.445148468017578e-05, 0.0, -2.2649737729807384e-05, 0.0, -7.62939453125e-06, -0.0001163482666015625, -0.000537872314453125, -9.655952453613281e-06, 0.0, -0.0025844573974609375, -1.52587890625e-05, -0.0002346038818359375, -0.00066375732421875, -0.0005245208740234375, -0.026787009090185165, -0.0001773834228515625, -3.814697265625e-05, -0.001117706298828125], "score": -5.934417778795705, "model_output": {"hole4": "player", "hole0": "Assassinate", "hole6": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Assassinate", "_type": "Str"}, {"_type": "Num", "n": 5}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [121, 200, "Assassinate", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Assassinate", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 320, 110], "score_history": [-0.0001163482666015625, -6.29425048828125e-05, -3.3378546504536644e-06, -7.271765298355604e-06, -1.1920201359316707e-07, -4.57763671875e-05, -3.063678741455078e-05, -0.0013103485107421875, -0.0001773834228515625, -7.62939453125e-06, -3.4332275390625e-05, -0.0002231597900390625, -3.0517578125e-05, -7.82012939453125e-05, -6.103515625e-05, -0.0002288818359375, -3.790783375734463e-05, -2.0265579223632812e-06, -0.017927169799804688, -0.0003204345703125, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.0010318756103515625, -7.62939453125e-06, -0.0009508132934570312, 0.0, -0.0019922256469726562, -4.1961669921875e-05, -0.0006313323974609375, -0.000392913818359375, -0.00014495849609375, 0.0, -0.0001316070556640625, -5.7220458984375e-05, -0.0006923675537109375, -0.016180038452148438, 0.0, -4.017353057861328e-05, 0.0, -2.4676293833181262e-05, 0.0, -7.62939453125e-06, -0.0001125335693359375, -0.0005359649658203125, -9.655952453613281e-06, 0.0, -0.0026340484619140625, -1.52587890625e-05, -0.0002346038818359375, -0.000682830810546875, -0.000522613525390625, -4.3560261726379395, -8.58306884765625e-05, -1.8093652725219727, -0.09998893737792969], "score": -6.313294290732756, "model_output": {"hole4": "player", "hole0": "Assassinate", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Assassinate", "_type": "Str"}, {"_type": "Template67"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(self)\n"}, {"choice_history": [121, 200, "Assassinate", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Assassinate", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "score_history": [-0.0001163482666015625, -6.29425048828125e-05, -3.3378546504536644e-06, -7.271765298355604e-06, -1.1920201359316707e-07, -4.57763671875e-05, -3.063678741455078e-05, -0.0013103485107421875, -0.0001773834228515625, -7.62939453125e-06, -3.4332275390625e-05, -0.0002231597900390625, -3.0517578125e-05, -7.82012939453125e-05, -6.103515625e-05, -0.0002288818359375, -3.790783375734463e-05, -2.0265579223632812e-06, -0.017927169799804688, -0.0003204345703125, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.0010318756103515625, -7.62939453125e-06, -0.0009508132934570312, 0.0, -0.0019922256469726562, -4.1961669921875e-05, -0.0006313323974609375, -0.000392913818359375, -0.00014495849609375, 0.0, -0.0001316070556640625, -5.7220458984375e-05, -0.0006923675537109375, -0.016180038452148438, 0.0, -4.017353057861328e-05, 0.0, -2.4676293833181262e-05, 0.0, -7.62939453125e-06, -0.0001125335693359375, -0.0005359649658203125, -9.655952453613281e-06, 0.0, -0.0026340484619140625, -1.52587890625e-05, -0.0002346038818359375, -0.000682830810546875, -0.000522613525390625, -4.3560261726379395, -8.58306884765625e-05, -0.18085289001464844, -0.07889556884765625, -0.0004062652587890625, -0.000518798828125, -0.0002613067626953125, -0.0003108978271484375, -1.1460461616516113, -1.0013571227318607e-05, -5.7220458984375e-06, -0.3067007064819336, -0.0004596710205078125, -0.2384014129638672, -0.06773388385772705, -7.05718994140625e-05, -0.0037450790405273438], "score": -6.42835903090463, "model_output": {"hole4": "player", "hole0": "Assassinate", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Assassinate", "_type": "Str"}, {"_type": "Template67"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n"}, {"choice_history": [121, 200, "Assassinate", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Assassinate", "<EOS>", 75, 190, "5", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110], "score_history": [-0.0001163482666015625, -6.29425048828125e-05, -3.3378546504536644e-06, -7.271765298355604e-06, -1.1920201359316707e-07, -4.57763671875e-05, -3.063678741455078e-05, -0.0013103485107421875, -0.0001773834228515625, -7.62939453125e-06, -3.4332275390625e-05, -0.0002231597900390625, -3.0517578125e-05, -7.82012939453125e-05, -6.103515625e-05, -0.0002288818359375, -3.790783375734463e-05, -2.0265579223632812e-06, -5.346048355102539, -0.0005207061767578125, -0.005712955258786678, -0.00011456012725830078, -1.1347484588623047, -0.0003948211669921875, -1.52587890625e-05, -0.010326385498046875, 0.0, -0.001434326171875, -0.000324249267578125, -0.010214805603027344, 0.0, -0.001129150390625, -0.0008449554443359375, -0.0003204345703125, -0.0011587142944335938, 0.0, -0.0037326812744140625, -7.2479248046875e-05, -0.000263214111328125, -0.039859771728515625, -1.1920928244535389e-07, -6.699562072753906e-05, 0.0, -6.914071855135262e-05, 0.0, -9.5367431640625e-06, -8.58306884765625e-05, -0.000743865966796875, -1.1563301086425781e-05, 0.0, -0.0047512054443359375, -2.288818359375e-05, -0.000446319580078125, -0.0006961822509765625, -0.00064849853515625, -0.028118228539824486, -0.0001506805419921875, -3.814697265625e-05, -0.0011615753173828125], "score": -6.596714917097863, "model_output": {"hole4": "player", "hole0": "Assassinate", "hole6": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Assassinate", "_type": "Str"}, {"_type": "Num", "n": 5}, {"_type": "Template59"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, 2, CHARACTER_CLASS.ROGUE,\n            target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [121, 200, "Assassinate", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Assassinate", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110], "score_history": [-0.0001163482666015625, -6.29425048828125e-05, -3.3378546504536644e-06, -7.271765298355604e-06, -1.1920201359316707e-07, -4.57763671875e-05, -3.063678741455078e-05, -0.0013103485107421875, -0.0001773834228515625, -7.62939453125e-06, -3.4332275390625e-05, -0.0002231597900390625, -3.0517578125e-05, -7.82012939453125e-05, -6.103515625e-05, -0.0002288818359375, -3.790783375734463e-05, -2.0265579223632812e-06, -0.017927169799804688, -0.0003204345703125, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.0010318756103515625, -7.62939453125e-06, -0.0009508132934570312, 0.0, -0.0019922256469726562, -4.1961669921875e-05, -0.0006313323974609375, -0.000392913818359375, -0.00014495849609375, 0.0, -0.0001316070556640625, -5.7220458984375e-05, -0.0006923675537109375, -6.666104316711426, -5.7220458984375e-06, -7.82012939453125e-05, 0.0, -2.2649737729807384e-05, 0.0, -7.62939453125e-06, -7.82012939453125e-05, -0.00037384033203125, -9.5367431640625e-06, 0.0, -0.0015773773193359375, -1.33514404296875e-05, -0.0003871917724609375, -0.0005664825439453125, -0.00055694580078125, -0.023132415488362312, -0.000164031982421875, -3.814697265625e-05, -0.0011568069458007812], "score": -6.721100897697852, "model_output": {"hole4": "player", "hole0": "Assassinate", "hole6": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Assassinate", "_type": "Str"}, {"_type": "Template67"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [121, 200, "Assassinate", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Assassinate", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 110, 110], "score_history": [-0.0001163482666015625, -6.29425048828125e-05, -3.3378546504536644e-06, -7.271765298355604e-06, -1.1920201359316707e-07, -4.57763671875e-05, -3.063678741455078e-05, -0.0013103485107421875, -0.0001773834228515625, -7.62939453125e-06, -3.4332275390625e-05, -0.0002231597900390625, -3.0517578125e-05, -7.82012939453125e-05, -6.103515625e-05, -0.0002288818359375, -3.790783375734463e-05, -2.0265579223632812e-06, -0.017927169799804688, -0.0003204345703125, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.0010318756103515625, -7.62939453125e-06, -0.0009508132934570312, 0.0, -0.0019922256469726562, -4.1961669921875e-05, -0.0006313323974609375, -0.000392913818359375, -0.00014495849609375, 0.0, -0.0001316070556640625, -5.7220458984375e-05, -0.0006923675537109375, -0.016180038452148438, 0.0, -4.017353057861328e-05, 0.0, -2.4676293833181262e-05, 0.0, -7.62939453125e-06, -0.0001125335693359375, -0.0005359649658203125, -9.655952453613281e-06, 0.0, -0.0026340484619140625, -1.52587890625e-05, -0.0002346038818359375, -0.000682830810546875, -0.000522613525390625, -4.3560261726379395, -8.58306884765625e-05, -0.18085289001464844, -0.07889556884765625, -0.0004062652587890625, -0.000518798828125, -0.0002613067626953125, -0.0003108978271484375, -0.4784855544567108, -8.118139521684498e-05, -3.814697265625e-06, -1.6009864807128906, -0.007144927978515625], "score": -6.751887767612516, "model_output": {"hole4": "player", "hole0": "Assassinate", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_spell_damage", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Template68"}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Assassinate", "_type": "Str"}, {"_type": "Template67"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(self), self)\n"}, {"choice_history": [121, 200, "Assassinate", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Assassinate", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "increase_health", "<EOS>", 320, 110], "score_history": [-0.0001163482666015625, -6.29425048828125e-05, -3.3378546504536644e-06, -7.271765298355604e-06, -1.1920201359316707e-07, -4.57763671875e-05, -3.063678741455078e-05, -0.0013103485107421875, -0.0001773834228515625, -7.62939453125e-06, -3.4332275390625e-05, -0.0002231597900390625, -3.0517578125e-05, -7.82012939453125e-05, -6.103515625e-05, -0.0002288818359375, -3.790783375734463e-05, -2.0265579223632812e-06, -0.017927169799804688, -0.0003204345703125, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.0010318756103515625, -7.62939453125e-06, -0.0009508132934570312, 0.0, -0.0019922256469726562, -4.1961669921875e-05, -0.0006313323974609375, -0.000392913818359375, -0.00014495849609375, 0.0, -0.0001316070556640625, -5.7220458984375e-05, -0.0006923675537109375, -0.016180038452148438, 0.0, -4.017353057861328e-05, 0.0, -2.4676293833181262e-05, 0.0, -7.62939453125e-06, -0.0001125335693359375, -0.0005359649658203125, -9.655952453613281e-06, 0.0, -0.0026340484619140625, -1.52587890625e-05, -0.0002346038818359375, -0.000682830810546875, -0.000522613525390625, -6.740306854248047, 0.0, -2.09808349609375e-05, -0.10326766967773438], "score": -6.89142358226718, "model_output": {"hole4": "player", "hole0": "Assassinate", "hole6": [{"_type": "Template19"}, {"hole1": "increase_health", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Assassinate", "_type": "Str"}, {"_type": "Template67"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(self)\n"}, {"choice_history": [121, 200, "Assassinate", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Assassinate", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "calculate_attack", "<EOS>", 320, 110], "score_history": [-0.0001163482666015625, -6.29425048828125e-05, -3.3378546504536644e-06, -7.271765298355604e-06, -1.1920201359316707e-07, -4.57763671875e-05, -3.063678741455078e-05, -0.0013103485107421875, -0.0001773834228515625, -7.62939453125e-06, -3.4332275390625e-05, -0.0002231597900390625, -3.0517578125e-05, -7.82012939453125e-05, -6.103515625e-05, -0.0002288818359375, -3.790783375734463e-05, -2.0265579223632812e-06, -0.017927169799804688, -0.0003204345703125, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.0010318756103515625, -7.62939453125e-06, -0.0009508132934570312, 0.0, -0.0019922256469726562, -4.1961669921875e-05, -0.0006313323974609375, -0.000392913818359375, -0.00014495849609375, 0.0, -0.0001316070556640625, -5.7220458984375e-05, -0.0006923675537109375, -0.016180038452148438, 0.0, -4.017353057861328e-05, 0.0, -2.4676293833181262e-05, 0.0, -7.62939453125e-06, -0.0001125335693359375, -0.0005359649658203125, -9.655952453613281e-06, 0.0, -0.0026340484619140625, -1.52587890625e-05, -0.0002346038818359375, -0.000682830810546875, -0.000522613525390625, -7.205239772796631, -2.09808349609375e-05, -0.000217437744140625, -0.03036975860595703], "score": -7.283676027488127, "model_output": {"hole4": "player", "hole0": "Assassinate", "hole6": [{"_type": "Template19"}, {"hole1": "calculate_attack", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Assassinate", "_type": "Str"}, {"_type": "Template67"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.calculate_attack(self)\n"}, {"choice_history": [121, 200, "Assassinate", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Assassinate", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 90, 249, 17, 156, 50, "hero", "<EOS>", "<UNK>", "<EOS>", 110], "score_history": [-0.0001163482666015625, -6.29425048828125e-05, -3.3378546504536644e-06, -7.271765298355604e-06, -1.1920201359316707e-07, -4.57763671875e-05, -3.063678741455078e-05, -0.0013103485107421875, -0.0001773834228515625, -7.62939453125e-06, -3.4332275390625e-05, -0.0002231597900390625, -3.0517578125e-05, -7.82012939453125e-05, -6.103515625e-05, -0.0002288818359375, -3.790783375734463e-05, -2.0265579223632812e-06, -0.017927169799804688, -0.0003204345703125, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.0010318756103515625, -7.62939453125e-06, -0.0009508132934570312, 0.0, -0.0019922256469726562, -4.1961669921875e-05, -0.0006313323974609375, -0.000392913818359375, -0.00014495849609375, 0.0, -0.0001316070556640625, -5.7220458984375e-05, -0.0006923675537109375, -0.016180038452148438, 0.0, -4.017353057861328e-05, 0.0, -2.4676293833181262e-05, 0.0, -7.62939453125e-06, -0.0001125335693359375, -0.0005359649658203125, -9.655952453613281e-06, 0.0, -0.0026340484619140625, -1.52587890625e-05, -0.0002346038818359375, -0.000682830810546875, -0.000522613525390625, -4.3560261726379395, -8.58306884765625e-05, -0.18085289001464844, -0.07889556884765625, -0.0004062652587890625, -0.000518798828125, -0.0002613067626953125, -0.0003108978271484375, -0.4784855544567108, -8.118139521684498e-05, -3.814697265625e-06, -0.7377004623413086, -0.0004100799560546875, -1.1944150924682617, -1.9073486328125e-06, -0.135162353515625, -0.027671081945300102, -0.0002576112747192383, -0.1589224487543106, -5.841253368998878e-06, -0.008123397827148438], "score": -7.40642663560584, "model_output": {"hole4": "player", "hole0": "Assassinate", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_spell_damage", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "<UNK>", "_type": "Template43", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Assassinate", "_type": "Str"}, {"_type": "Template67"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(player.hero.<UNK>()),\n            self)\n"}, {"choice_history": [121, 200, "Assassinate", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Assassinate", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 90, 249, 25, 186, "minion", "<EOS>", "calculate_attack", "<EOS>", 110], "score_history": [-0.0001163482666015625, -6.29425048828125e-05, -3.3378546504536644e-06, -7.271765298355604e-06, -1.1920201359316707e-07, -4.57763671875e-05, -3.063678741455078e-05, -0.0013103485107421875, -0.0001773834228515625, -7.62939453125e-06, -3.4332275390625e-05, -0.0002231597900390625, -3.0517578125e-05, -7.82012939453125e-05, -6.103515625e-05, -0.0002288818359375, -3.790783375734463e-05, -2.0265579223632812e-06, -0.017927169799804688, -0.0003204345703125, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.0010318756103515625, -7.62939453125e-06, -0.0009508132934570312, 0.0, -0.0019922256469726562, -4.1961669921875e-05, -0.0006313323974609375, -0.000392913818359375, -0.00014495849609375, 0.0, -0.0001316070556640625, -5.7220458984375e-05, -0.0006923675537109375, -0.016180038452148438, 0.0, -4.017353057861328e-05, 0.0, -2.4676293833181262e-05, 0.0, -7.62939453125e-06, -0.0001125335693359375, -0.0005359649658203125, -9.655952453613281e-06, 0.0, -0.0026340484619140625, -1.52587890625e-05, -0.0002346038818359375, -0.000682830810546875, -0.000522613525390625, -4.3560261726379395, -8.58306884765625e-05, -0.18085289001464844, -0.07889556884765625, -0.0004062652587890625, -0.000518798828125, -0.0002613067626953125, -0.0003108978271484375, -0.4784855544567108, -8.118139521684498e-05, -3.814697265625e-06, -0.7377004623413086, -0.0004100799560546875, -0.8840608596801758, -9.5367431640625e-06, -0.039999961853027344, -3.814697265625e-06, -0.9721765518188477, 0.0, -0.0009975433349609375], "score": -7.779115169345914, "model_output": {"hole4": "player", "hole0": "Assassinate", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_spell_damage", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Name", "id": "minion"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Assassinate", "_type": "Str"}, {"_type": "Template67"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(minion.\n            calculate_attack()), self)\n"}], "index": 8}
{"beams": [{"choice_history": [120, 185, 333, 129, 165, "Backstab", "<EOS>", 320, 108, 333, 136, 197, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 8, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-0.005316734313964844, -0.000247955322265625, -0.000110626220703125, -0.00084686279296875, -7.43865966796875e-05, -0.00023209804203361273, -0.00043836544500663877, -3.814697265625e-06, -0.001033782958984375, -0.00022125244140625, -0.0010833740234375, -0.0001735687255859375, -0.009675383567810059, -1.4066675248614047e-05, -0.0002459285024087876, -2.7418097943154862e-06, -0.0038410425186157227, -8.7738037109375e-05, -0.0022430419921875, 0.0, -0.001261114957742393, 0.0, -0.017145156860351562, -0.10313034057617188, -2.09808349609375e-05, -0.00824880599975586, -1.9073486328125e-05, -0.0012836456298828125, -0.000392913818359375, -0.00049591064453125, -0.00019073486328125, -0.0029261112213134766, -1.1444091796875e-05, -0.01239013671875, -0.0003204345703125, -0.0007495880126953125, -0.0001621246337890625, -0.000507354736328125, -0.00042724609375, -0.24199962615966797, 0.0, -0.000408172607421875, 0.0, -0.0038585662841796875, -2.2649765014648438e-06, -0.002308829454705119, 0.0, -0.006411552429199219, -0.06890583038330078, -3.814697265625e-06, -0.01673412322998047, -3.814697265625e-06, -9.1552734375e-05, -5.7220458984375e-06, -0.0009002685546875, -9.5367431640625e-06, -0.0012592070270329714, -3.24249267578125e-05, -0.033423423767089844, -0.000507354736328125, -0.0001049041748046875, -3.814697265625e-06, -0.005129814147949219, -3.814697265625e-06, -0.003832101821899414, -0.0010318756103515625, -0.0011119842529296875, -0.0005550384521484375, -2.47955322265625e-05, -1.9073486328125e-06, -0.001148223876953125, -0.0025196075439453125, -0.00023651123046875, -4.57763671875e-05, -1.1444091796875e-05, -0.000255584716796875, -0.0037542323116213083, 0.0, -6.4849853515625e-05, -0.0003814697265625, -4.9591064453125e-05, -1.33514404296875e-05, -6.651866715401411e-05, -2.3841855067985307e-07, -0.001431107404641807, 0.0, -1.71661376953125e-05, -3.62396240234375e-05], "score": -0.5742739310996683, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "Eq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Backstab", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 0, "hole2": "ROGUE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Backstab"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health == target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Backstab", "<EOS>", 320, 108, 333, 136, 197, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 8, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-0.005316734313964844, -0.000247955322265625, -0.000110626220703125, -0.00084686279296875, -7.43865966796875e-05, -0.00023209804203361273, -0.00043836544500663877, -3.814697265625e-06, -0.001033782958984375, -0.00022125244140625, -0.0010833740234375, -0.0001735687255859375, -0.009675383567810059, -1.4066675248614047e-05, -0.0002459285024087876, -2.7418097943154862e-06, -0.0038410425186157227, -8.7738037109375e-05, -0.0022430419921875, 0.0, -0.001261114957742393, 0.0, -0.017145156860351562, -2.478425979614258, -1.9073486328125e-06, -0.006264209747314453, -7.62939453125e-06, -0.001438140869140625, -0.000453948974609375, -0.0005474090576171875, -0.0002155303955078125, -0.002596139907836914, -1.52587890625e-05, -0.014635086059570312, -0.0002689361572265625, -0.000701904296875, -0.0001506805419921875, -0.00043487548828125, -0.000431060791015625, -0.21024322509765625, 0.0, -0.000415802001953125, 0.0, -0.004096031188964844, -2.2649765014648438e-06, -0.002349122427403927, 0.0, -0.006278038024902344, -0.06617927551269531, -3.814697265625e-06, -0.016844749450683594, -3.814697265625e-06, -8.58306884765625e-05, -5.7220458984375e-06, -0.000865936279296875, -9.5367431640625e-06, -0.001278518931940198, -3.4332275390625e-05, -0.0343170166015625, -0.0005130767822265625, -0.000102996826171875, -3.814697265625e-06, -0.0051288604736328125, -3.814697265625e-06, -0.0038570165634155273, -0.0010318756103515625, -0.0011157989501953125, -0.0005550384521484375, -2.47955322265625e-05, -1.9073486328125e-06, -0.001148223876953125, -0.002513885498046875, -0.00023651123046875, -4.57763671875e-05, -1.1444091796875e-05, -0.000255584716796875, -0.0037542323116213083, 0.0, -6.4849853515625e-05, -0.0003814697265625, -4.9591064453125e-05, -1.33514404296875e-05, -6.651866715401411e-05, -2.3841855067985307e-07, -0.001431107404641807, 0.0, -1.71661376953125e-05, -3.62396240234375e-05], "score": -2.9162659519394936, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "Eq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Backstab", "hole7": "filter_func", "hole6": "find_enemy_minion_spell_target", "hole1": 0, "hole2": "ROGUE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Backstab"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.health == target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Backstab", "<EOS>", 320, 108, 333, 136, 197, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 37, 249, 25, 186, "target", "<EOS>", "calculate_attack", "<EOS>", 317, 15, 320, 104, 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-0.005316734313964844, -0.000247955322265625, -0.000110626220703125, -0.00084686279296875, -7.43865966796875e-05, -0.00023209804203361273, -0.00043836544500663877, -3.814697265625e-06, -0.001033782958984375, -0.00022125244140625, -0.0010833740234375, -0.0001735687255859375, -0.009675383567810059, -1.4066675248614047e-05, -0.0002459285024087876, -2.7418097943154862e-06, -0.0038410425186157227, -8.7738037109375e-05, -0.0022430419921875, 0.0, -0.001261114957742393, 0.0, -0.017145156860351562, -0.10313034057617188, -2.09808349609375e-05, -0.00824880599975586, -1.9073486328125e-05, -0.0012836456298828125, -0.000392913818359375, -0.00049591064453125, -0.00019073486328125, -0.0029261112213134766, -1.1444091796875e-05, -0.01239013671875, -0.0003204345703125, -0.0007495880126953125, -0.0001621246337890625, -0.000507354736328125, -0.00042724609375, -1.5523309707641602, -3.814697265625e-05, -4.76837158203125e-05, -1.9073486328125e-06, -0.00015556812286376953, -1.9073486328125e-06, -0.04341495782136917, -0.0002422332763671875, -4.76837158203125e-05, -1.2073516845703125, -8.58306884765625e-05, -0.010528564453125, -0.025007247924804688, -0.00034332275390625, -6.866455078125e-05, -3.814697265625e-06, -0.0010957717895507812, -1.33514404296875e-05, -0.008368730545043945, -0.00047969818115234375, -0.0016727447509765625, -0.000308990478515625, -1.52587890625e-05, -3.814697265625e-06, -0.0007686614990234375, -0.0018863677978515625, -0.0001697540283203125, -5.14984130859375e-05, -1.1444091796875e-05, -0.000209808349609375, -0.004060355015099049, 0.0, -6.866455078125e-05, -0.0003662109375, -4.57763671875e-05, -1.52587890625e-05, -8.380398503504694e-05, -3.576278118089249e-07, -0.0014209746150299907, 0.0, -1.71661376953125e-05, -3.814697265625e-05], "score": -3.036418681008115, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "LtE"}], "comparators": [{"_type": "Template61"}], "_type": "Compare", "left": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Backstab", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 0, "hole2": "ROGUE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Backstab"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() <= 3 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Backstab", "<EOS>", 320, 108, 333, 136, 197, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 37, 249, 25, 186, "target", "<EOS>", "calculate_attack", "<EOS>", 317, 8, 320, 104, 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-0.005316734313964844, -0.000247955322265625, -0.000110626220703125, -0.00084686279296875, -7.43865966796875e-05, -0.00023209804203361273, -0.00043836544500663877, -3.814697265625e-06, -0.001033782958984375, -0.00022125244140625, -0.0010833740234375, -0.0001735687255859375, -0.009675383567810059, -1.4066675248614047e-05, -0.0002459285024087876, -2.7418097943154862e-06, -0.0038410425186157227, -8.7738037109375e-05, -0.0022430419921875, 0.0, -0.001261114957742393, 0.0, -0.017145156860351562, -0.10313034057617188, -2.09808349609375e-05, -0.00824880599975586, -1.9073486328125e-05, -0.0012836456298828125, -0.000392913818359375, -0.00049591064453125, -0.00019073486328125, -0.0029261112213134766, -1.1444091796875e-05, -0.01239013671875, -0.0003204345703125, -0.0007495880126953125, -0.0001621246337890625, -0.000507354736328125, -0.00042724609375, -1.5523309707641602, -3.814697265625e-05, -4.76837158203125e-05, -1.9073486328125e-06, -0.00015556812286376953, -1.9073486328125e-06, -0.04341495782136917, -0.0002422332763671875, -4.76837158203125e-05, -0.7671689987182617, -3.24249267578125e-05, -0.6905155181884766, -0.009421348571777344, -0.0001888275146484375, -8.20159912109375e-05, -3.814697265625e-06, -0.0012035369873046875, -3.814697265625e-06, -0.01921975612640381, -0.00023174285888671875, -0.0011043548583984375, -0.000247955322265625, -1.1444091796875e-05, -3.814697265625e-06, -0.000732421875, -0.002552032470703125, -0.0002079010009765625, -5.91278076171875e-05, -1.1444091796875e-05, -0.000286102294921875, -0.003208726644515991, 0.0, -6.866455078125e-05, -0.000316619873046875, -5.14984130859375e-05, -1.52587890625e-05, -9.024124301504344e-05, -3.576278118089249e-07, -0.0014303921489045024, 0.0, -1.71661376953125e-05, -3.814697265625e-05], "score": -3.270382411709477, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "Eq"}], "comparators": [{"_type": "Template61"}], "_type": "Compare", "left": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Backstab", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 0, "hole2": "ROGUE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Backstab"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() == 3 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Backstab", "<EOS>", 320, 108, 333, 136, 197, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 16, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-0.005316734313964844, -0.000247955322265625, -0.000110626220703125, -0.00084686279296875, -7.43865966796875e-05, -0.00023209804203361273, -0.00043836544500663877, -3.814697265625e-06, -0.001033782958984375, -0.00022125244140625, -0.0010833740234375, -0.0001735687255859375, -0.009675383567810059, -1.4066675248614047e-05, -0.0002459285024087876, -2.7418097943154862e-06, -0.0038410425186157227, -8.7738037109375e-05, -0.0022430419921875, 0.0, -0.001261114957742393, 0.0, -0.017145156860351562, -0.10313034057617188, -2.09808349609375e-05, -0.00824880599975586, -1.9073486328125e-05, -0.0012836456298828125, -0.000392913818359375, -0.00049591064453125, -0.00019073486328125, -0.0029261112213134766, -1.1444091796875e-05, -0.01239013671875, -0.0003204345703125, -0.0007495880126953125, -0.0001621246337890625, -0.000507354736328125, -0.00042724609375, -0.24199962615966797, 0.0, -0.000408172607421875, 0.0, -0.0038585662841796875, -2.2649765014648438e-06, -0.002308829454705119, 0.0, -0.006411552429199219, -3.2601795196533203, -3.4332275390625e-05, -0.00658416748046875, -1.1444091796875e-05, -6.4849853515625e-05, -5.7220458984375e-06, -0.00044918060302734375, -2.6702880859375e-05, -0.001259445445612073, -6.67572021484375e-05, -0.027167320251464844, -0.0004634857177734375, -0.0001049041748046875, -3.814697265625e-06, -0.00494384765625, -3.814697265625e-06, -0.003710627555847168, -0.0009765625, -0.0010204315185546875, -0.00051116943359375, -2.288818359375e-05, -1.9073486328125e-06, -0.0011920928955078125, -0.0025482177734375, -0.000244140625, -4.57763671875e-05, -1.33514404296875e-05, -0.0002498626708984375, -0.00363819464109838, 0.0, -6.67572021484375e-05, -0.000385284423828125, -4.9591064453125e-05, -1.33514404296875e-05, -6.806839519413188e-05, -2.3841855067985307e-07, -0.0014275311259552836, 0.0, -1.71661376953125e-05, -3.62396240234375e-05], "score": -3.7481736538581742, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "NotEq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Backstab", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 0, "hole2": "ROGUE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Backstab"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Backstab", "<EOS>", 320, 108, 333, 136, 197, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 37, 249, 25, 186, "target", "<EOS>", "calculate_attack", "<EOS>", 317, 8, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-0.005316734313964844, -0.000247955322265625, -0.000110626220703125, -0.00084686279296875, -7.43865966796875e-05, -0.00023209804203361273, -0.00043836544500663877, -3.814697265625e-06, -0.001033782958984375, -0.00022125244140625, -0.0010833740234375, -0.0001735687255859375, -0.009675383567810059, -1.4066675248614047e-05, -0.0002459285024087876, -2.7418097943154862e-06, -0.0038410425186157227, -8.7738037109375e-05, -0.0022430419921875, 0.0, -0.001261114957742393, 0.0, -0.017145156860351562, -0.10313034057617188, -2.09808349609375e-05, -0.00824880599975586, -1.9073486328125e-05, -0.0012836456298828125, -0.000392913818359375, -0.00049591064453125, -0.00019073486328125, -0.0029261112213134766, -1.1444091796875e-05, -0.01239013671875, -0.0003204345703125, -0.0007495880126953125, -0.0001621246337890625, -0.000507354736328125, -0.00042724609375, -1.5523309707641602, -3.814697265625e-05, -4.76837158203125e-05, -1.9073486328125e-06, -0.00015556812286376953, -1.9073486328125e-06, -0.04341495782136917, -0.0002422332763671875, -4.76837158203125e-05, -0.7671689987182617, -3.24249267578125e-05, -1.2760591506958008, -2.47955322265625e-05, -6.103515625e-05, -1.33514404296875e-05, -0.00043487548828125, -3.814697265625e-06, -0.007728219032287598, -1.9073486328125e-05, -0.09534072875976562, -0.000476837158203125, -0.00026702880859375, -5.7220458984375e-06, -0.003467559814453125, -3.814697265625e-06, -0.004215717315673828, -0.0011205673217773438, -0.0017032623291015625, -0.0004425048828125, -2.86102294921875e-05, -1.9073486328125e-06, -0.001079559326171875, -0.002696990966796875, -0.000247955322265625, -4.1961669921875e-05, -5.7220458984375e-06, -0.0004558563232421875, -0.003205161541700363, -1.9073486328125e-06, -5.53131103515625e-05, -0.00029754638671875, -3.814697265625e-05, -2.09808349609375e-05, -8.702270133653656e-05, -2.3841855067985307e-07, -0.0013574360636994243, 0.0, -1.71661376953125e-05, -3.62396240234375e-05], "score": -3.940122146200082, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "Eq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Backstab", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 0, "hole2": "ROGUE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Backstab"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() == target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Backstab", "<EOS>", 320, 108, 333, 136, 197, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 8, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 8, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-0.005316734313964844, -0.000247955322265625, -0.000110626220703125, -0.00084686279296875, -7.43865966796875e-05, -0.00023209804203361273, -0.00043836544500663877, -3.814697265625e-06, -0.001033782958984375, -0.00022125244140625, -0.0010833740234375, -0.0001735687255859375, -0.009675383567810059, -1.4066675248614047e-05, -0.0002459285024087876, -2.7418097943154862e-06, -0.0038410425186157227, -8.7738037109375e-05, -0.0022430419921875, 0.0, -0.001261114957742393, 0.0, -0.017145156860351562, -0.10313034057617188, -2.09808349609375e-05, -0.00824880599975586, -1.9073486328125e-05, -0.0012836456298828125, -0.000392913818359375, -0.00049591064453125, -0.00019073486328125, -0.0029261112213134766, -1.1444091796875e-05, -0.01239013671875, -0.0003204345703125, -0.0007495880126953125, -0.0001621246337890625, -0.000507354736328125, -0.00042724609375, -0.24199962615966797, 0.0, -0.000408172607421875, 0.0, -0.0038585662841796875, -2.2649765014648438e-06, -0.002308829454705119, 0.0, -0.006411552429199219, -0.06890583038330078, -3.814697265625e-06, -0.01673412322998047, -3.814697265625e-06, -9.1552734375e-05, -5.7220458984375e-06, -0.0009002685546875, -9.5367431640625e-06, -0.0012592070270329714, -3.24249267578125e-05, -3.4859066009521484, -8.58306884765625e-05, -0.049709320068359375, 0.0, -0.009446144104003906, 0.0, -0.02011704444885254, -1.1920928244535389e-07, -0.030830375850200653, 0.0, -0.010437965393066406, -0.19652748107910156, -5.7220458984375e-06, -0.08839702606201172, -3.814697265625e-06, -7.62939453125e-05, -3.814697265625e-06, -0.0016546249389648438, -5.7220458984375e-06, -0.0011612155940383673, -1.33514404296875e-05, -0.0004062652587890625, -0.000385284423828125, -2.47955322265625e-05, -1.9073486328125e-06, -0.0017833709716796875, -0.00156402587890625, -0.0002956390380859375, -0.000102996826171875, -1.71661376953125e-05, -0.0005950927734375, -0.0008641319000162184, -1.1920928244535389e-07, -6.29425048828125e-05, -0.0004558563232421875, -4.9591064453125e-05, -1.71661376953125e-05, -0.00012957953731529415, -3.576278118089249e-07, -0.0015715359477326274, 0.0, -1.52587890625e-05, -3.24249267578125e-05], "score": -4.421269164803263, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "Eq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"ops": [{"_type": "Eq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Backstab", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 0, "hole2": "ROGUE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Backstab"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health == target.calculate_max_health() and target.health ==\n            target.calculate_max_health())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Backstab", "<EOS>", 320, 108, 333, 136, 197, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 37, 249, 25, 186, "target", "<EOS>", "calculate_attack", "<EOS>", 317, 8, 320, 98, 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-0.005316734313964844, -0.000247955322265625, -0.000110626220703125, -0.00084686279296875, -7.43865966796875e-05, -0.00023209804203361273, -0.00043836544500663877, -3.814697265625e-06, -0.001033782958984375, -0.00022125244140625, -0.0010833740234375, -0.0001735687255859375, -0.009675383567810059, -1.4066675248614047e-05, -0.0002459285024087876, -2.7418097943154862e-06, -0.0038410425186157227, -8.7738037109375e-05, -0.0022430419921875, 0.0, -0.001261114957742393, 0.0, -0.017145156860351562, -0.10313034057617188, -2.09808349609375e-05, -0.00824880599975586, -1.9073486328125e-05, -0.0012836456298828125, -0.000392913818359375, -0.00049591064453125, -0.00019073486328125, -0.0029261112213134766, -1.1444091796875e-05, -0.01239013671875, -0.0003204345703125, -0.0007495880126953125, -0.0001621246337890625, -0.000507354736328125, -0.00042724609375, -1.5523309707641602, -3.814697265625e-05, -4.76837158203125e-05, -1.9073486328125e-06, -0.00015556812286376953, -1.9073486328125e-06, -0.04341495782136917, -0.0002422332763671875, -4.76837158203125e-05, -0.7671689987182617, -3.24249267578125e-05, -2.579533100128174, -0.004164695739746094, -4.00543212890625e-05, -5.53131103515625e-05, -1.1444091796875e-05, -0.0009326934814453125, -3.814697265625e-06, -0.04911673069000244, -0.00019741058349609375, -0.0012111663818359375, -0.0006046295166015625, -1.1444091796875e-05, -3.814697265625e-06, -0.0008792877197265625, -0.00241851806640625, -0.000186920166015625, -6.4849853515625e-05, -1.1444091796875e-05, -0.0003490447998046875, -0.002833399921655655, 0.0, -6.4849853515625e-05, -0.0003223419189453125, -4.76837158203125e-05, -1.52587890625e-05, -9.047969069797546e-05, -3.576278118089249e-07, -0.0014110802439972758, 0.0, -1.71661376953125e-05, -3.814697265625e-05], "score": -5.18369550626511, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "Eq"}], "comparators": [{"_type": "Template52"}], "_type": "Compare", "left": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Backstab", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 0, "hole2": "ROGUE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Backstab"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() == self.target and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Backstab", "<EOS>", 320, 108, 333, 136, 197, "damage", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 8, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-0.005316734313964844, -0.000247955322265625, -0.000110626220703125, -0.00084686279296875, -7.43865966796875e-05, -0.00023209804203361273, -0.00043836544500663877, -3.814697265625e-06, -0.001033782958984375, -0.00022125244140625, -0.0010833740234375, -0.0001735687255859375, -4.64445161819458, -0.00011908545275218785, -0.00039398425724357367, -2.2291887944447808e-05, -0.02672266960144043, -5.14984130859375e-05, -0.0037480592727661133, 0.0, -0.0010291336802765727, 0.0, -0.015729904174804688, -0.10018634796142578, -2.288818359375e-05, -0.008221149444580078, -2.09808349609375e-05, -0.0012950897216796875, -0.0003986358642578125, -0.0004940032958984375, -0.0001964569091796875, -0.002539992332458496, -1.1444091796875e-05, -0.012796401977539062, -0.00028228759765625, -0.0007762908935546875, -0.0001468658447265625, -0.0004787445068359375, -0.00041961669921875, -0.23236942291259766, 0.0, -0.00042724609375, 0.0, -0.0038843154907226562, -2.2649765014648438e-06, -0.0022719940170645714, 0.0, -0.006604194641113281, -0.06995010375976562, -3.814697265625e-06, -0.016655921936035156, -3.814697265625e-06, -9.1552734375e-05, -5.7220458984375e-06, -0.00090789794921875, -9.5367431640625e-06, -0.0012636177707463503, -3.24249267578125e-05, -0.03460884094238281, -0.0005035400390625, -0.000102996826171875, -3.814697265625e-06, -0.005131721496582031, -3.814697265625e-06, -0.003851175308227539, -0.0010290145874023438, -0.0011081695556640625, -0.00055694580078125, -2.47955322265625e-05, -1.9073486328125e-06, -0.001148223876953125, -0.0025196075439453125, -0.00023651123046875, -4.57763671875e-05, -1.1444091796875e-05, -0.000255584716796875, -0.003750669537112117, 0.0, -6.4849853515625e-05, -0.0003814697265625, -4.9591064453125e-05, -1.33514404296875e-05, -6.663787644356489e-05, -2.3841855067985307e-07, -0.0014312266139313579, 0.0, -1.71661376953125e-05, -3.62396240234375e-05], "score": -5.221777433018332, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "Eq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "damage", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 0, "hole2": "ROGUE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Backstab"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('damage', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health == target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Backstab", "<EOS>", 320, 108, 333, 136, 197, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 8, 320, 98, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-0.005316734313964844, -0.000247955322265625, -0.000110626220703125, -0.00084686279296875, -7.43865966796875e-05, -0.00023209804203361273, -0.00043836544500663877, -3.814697265625e-06, -0.001033782958984375, -0.00022125244140625, -0.0010833740234375, -0.0001735687255859375, -0.009675383567810059, -1.4066675248614047e-05, -0.0002459285024087876, -2.7418097943154862e-06, -0.0038410425186157227, -8.7738037109375e-05, -0.0022430419921875, 0.0, -0.001261114957742393, 0.0, -0.017145156860351562, -0.10313034057617188, -2.09808349609375e-05, -0.00824880599975586, -1.9073486328125e-05, -0.0012836456298828125, -0.000392913818359375, -0.00049591064453125, -0.00019073486328125, -0.0029261112213134766, -1.1444091796875e-05, -0.01239013671875, -0.0003204345703125, -0.0007495880126953125, -0.0001621246337890625, -0.000507354736328125, -0.00042724609375, -0.24199962615966797, 0.0, -0.000408172607421875, 0.0, -0.0038585662841796875, -2.2649765014648438e-06, -0.002308829454705119, 0.0, -0.006411552429199219, -0.06890583038330078, -3.814697265625e-06, -4.695981979370117, -0.006257057189941406, -1.52587890625e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.001323699951171875, -7.62939453125e-06, -0.04461348056793213, -6.4849853515625e-05, -0.0013217926025390625, -0.0017242431640625, -1.71661376953125e-05, -3.814697265625e-06, -0.0010318756103515625, -0.00194549560546875, -0.00023651123046875, -5.7220458984375e-05, -1.71661376953125e-05, -0.0004405975341796875, -0.0016072004800662398, -1.1920928244535389e-07, -7.82012939453125e-05, -0.0004558563232421875, -5.14984130859375e-05, -1.71661376953125e-05, -0.00012946056085638702, -3.576278118089249e-07, -0.001579880598001182, 0.0, -1.52587890625e-05, -3.24249267578125e-05], "score": -5.258593354814984, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "Eq"}], "comparators": [{"_type": "Template52"}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Backstab", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 0, "hole2": "ROGUE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Backstab"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health == self.target and target.calculate_max_health())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Backstab", "<EOS>", 320, 108, 333, 136, 197, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 37, 249, 25, 186, "target", "<EOS>", "calculate_attack", "<EOS>", 317, 13, 320, 98, 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-0.005316734313964844, -0.000247955322265625, -0.000110626220703125, -0.00084686279296875, -7.43865966796875e-05, -0.00023209804203361273, -0.00043836544500663877, -3.814697265625e-06, -0.001033782958984375, -0.00022125244140625, -0.0010833740234375, -0.0001735687255859375, -0.009675383567810059, -1.4066675248614047e-05, -0.0002459285024087876, -2.7418097943154862e-06, -0.0038410425186157227, -8.7738037109375e-05, -0.0022430419921875, 0.0, -0.001261114957742393, 0.0, -0.017145156860351562, -0.10313034057617188, -2.09808349609375e-05, -0.00824880599975586, -1.9073486328125e-05, -0.0012836456298828125, -0.000392913818359375, -0.00049591064453125, -0.00019073486328125, -0.0029261112213134766, -1.1444091796875e-05, -0.01239013671875, -0.0003204345703125, -0.0007495880126953125, -0.0001621246337890625, -0.000507354736328125, -0.00042724609375, -1.5523309707641602, -3.814697265625e-05, -4.76837158203125e-05, -1.9073486328125e-06, -0.00015556812286376953, -1.9073486328125e-06, -0.04341495782136917, -0.0002422332763671875, -4.76837158203125e-05, -2.490218162536621, -0.000125885009765625, -0.9680881500244141, -0.0061817169189453125, -7.62939453125e-05, -7.2479248046875e-05, -7.62939453125e-06, -0.0017194747924804688, -5.7220458984375e-06, -0.013165950775146484, -0.0005359649658203125, -0.001529693603515625, -0.00057220458984375, -1.52587890625e-05, -3.814697265625e-06, -0.000885009765625, -0.0022945404052734375, -0.000202178955078125, -6.103515625e-05, -1.1444091796875e-05, -0.00029754638671875, -0.003115205094218254, -1.9073486328125e-06, -6.4849853515625e-05, -0.000339508056640625, -4.76837158203125e-05, -1.52587890625e-05, -8.714185241842642e-05, -3.576278118089249e-07, -0.001410961034707725, 0.0, -1.71661376953125e-05, -3.814697265625e-05], "score": -5.263065284100492, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "IsNot"}], "comparators": [{"_type": "Template52"}], "_type": "Compare", "left": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Backstab", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 0, "hole2": "ROGUE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Backstab"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() is not self.target and target.spell_targetable()\n            )\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Backstab", "<EOS>", 320, 108, 333, 136, 197, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 13, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-0.005316734313964844, -0.000247955322265625, -0.000110626220703125, -0.00084686279296875, -7.43865966796875e-05, -0.00023209804203361273, -0.00043836544500663877, -3.814697265625e-06, -0.001033782958984375, -0.00022125244140625, -0.0010833740234375, -0.0001735687255859375, -0.009675383567810059, -1.4066675248614047e-05, -0.0002459285024087876, -2.7418097943154862e-06, -0.0038410425186157227, -8.7738037109375e-05, -0.0022430419921875, 0.0, -0.001261114957742393, 0.0, -0.017145156860351562, -0.10313034057617188, -2.09808349609375e-05, -0.00824880599975586, -1.9073486328125e-05, -0.0012836456298828125, -0.000392913818359375, -0.00049591064453125, -0.00019073486328125, -0.0029261112213134766, -1.1444091796875e-05, -0.01239013671875, -0.0003204345703125, -0.0007495880126953125, -0.0001621246337890625, -0.000507354736328125, -0.00042724609375, -0.24199962615966797, 0.0, -0.000408172607421875, 0.0, -0.0038585662841796875, -2.2649765014648438e-06, -0.002308829454705119, 0.0, -0.006411552429199219, -4.750905990600586, -9.5367431640625e-06, -0.06067466735839844, -7.62939453125e-06, -7.05718994140625e-05, -3.814697265625e-06, -0.001316070556640625, -1.1444091796875e-05, -0.001817702897824347, -4.9591064453125e-05, -0.037845611572265625, -0.0005054473876953125, -0.0001239776611328125, -3.814697265625e-06, -0.0049114227294921875, -3.814697265625e-06, -0.003849506378173828, -0.001148223876953125, -0.0010852813720703125, -0.0005397796630859375, -2.6702880859375e-05, -1.9073486328125e-06, -0.0011539459228515625, -0.002437591552734375, -0.0002384185791015625, -4.38690185546875e-05, -1.1444091796875e-05, -0.0002803802490234375, -0.0037332111969590187, 0.0, -6.29425048828125e-05, -0.00037384033203125, -4.76837158203125e-05, -1.1444091796875e-05, -6.341921834973618e-05, -2.3841855067985307e-07, -0.0014423130778595805, 0.0, -1.9073486328125e-05, -3.62396240234375e-05], "score": -5.305433458994884, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "IsNot"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Backstab", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 0, "hole2": "ROGUE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Backstab"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health is not target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Backstab", "<EOS>", 320, 108, 333, 136, 197, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 37, 249, 25, 186, "target", "<EOS>", "calculate_attack", "<EOS>", 317, 15, 320, 104, 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-0.005316734313964844, -0.000247955322265625, -0.000110626220703125, -0.00084686279296875, -7.43865966796875e-05, -0.00023209804203361273, -0.00043836544500663877, -3.814697265625e-06, -0.001033782958984375, -0.00022125244140625, -0.0010833740234375, -0.0001735687255859375, -0.009675383567810059, -1.4066675248614047e-05, -0.0002459285024087876, -2.7418097943154862e-06, -0.0038410425186157227, -8.7738037109375e-05, -0.0022430419921875, 0.0, -0.001261114957742393, 0.0, -0.017145156860351562, -2.478425979614258, -1.9073486328125e-06, -0.006264209747314453, -7.62939453125e-06, -0.001438140869140625, -0.000453948974609375, -0.0005474090576171875, -0.0002155303955078125, -0.002596139907836914, -1.52587890625e-05, -0.014635086059570312, -0.0002689361572265625, -0.000701904296875, -0.0001506805419921875, -0.00043487548828125, -0.000431060791015625, -1.6785669326782227, -3.814697265625e-05, -4.9591064453125e-05, -1.9073486328125e-06, -0.00016129016876220703, -1.9073486328125e-06, -0.04393420368432999, -0.000240325927734375, -4.76837158203125e-05, -1.1999988555908203, -8.7738037109375e-05, -0.010044097900390625, -0.02416706085205078, -0.0003490447998046875, -6.866455078125e-05, -3.814697265625e-06, -0.0011053085327148438, -1.52587890625e-05, -0.008484125137329102, -0.00048065185546875, -0.001678466796875, -0.00031280517578125, -1.52587890625e-05, -3.814697265625e-06, -0.00077056884765625, -0.001903533935546875, -0.0001697540283203125, -5.14984130859375e-05, -1.1444091796875e-05, -0.0002079010009765625, -0.0040857624262571335, 0.0, -6.866455078125e-05, -0.0003662109375, -4.57763671875e-05, -1.52587890625e-05, -8.380398503504694e-05, -3.576278118089249e-07, -0.001423001172952354, 0.0, -1.71661376953125e-05, -3.814697265625e-05], "score": -5.530003538330391, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "LtE"}], "comparators": [{"_type": "Template61"}], "_type": "Compare", "left": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Backstab", "hole7": "filter_func", "hole6": "find_enemy_minion_spell_target", "hole1": 0, "hole2": "ROGUE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Backstab"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.calculate_attack() <= 3 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Backstab", "<EOS>", 320, 108, 333, 136, 197, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 8, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-0.005316734313964844, -0.000247955322265625, -0.000110626220703125, -0.00084686279296875, -7.43865966796875e-05, -0.00023209804203361273, -0.00043836544500663877, -3.814697265625e-06, -0.001033782958984375, -0.00022125244140625, -0.0010833740234375, -0.0001735687255859375, -0.009675383567810059, -1.4066675248614047e-05, -0.0002459285024087876, -2.7418097943154862e-06, -0.0038410425186157227, -8.7738037109375e-05, -0.0022430419921875, 0.0, -0.001261114957742393, 0.0, -0.017145156860351562, -0.10313034057617188, -2.09808349609375e-05, -0.00824880599975586, -1.9073486328125e-05, -0.0012836456298828125, -0.000392913818359375, -0.00049591064453125, -0.00019073486328125, -0.0029261112213134766, -1.1444091796875e-05, -0.01239013671875, -0.0003204345703125, -0.0007495880126953125, -0.0001621246337890625, -0.000507354736328125, -0.00042724609375, -0.24199962615966797, 0.0, -0.000408172607421875, 0.0, -0.0038585662841796875, -2.2649765014648438e-06, -0.002308829454705119, 0.0, -0.006411552429199219, -0.06890583038330078, -3.814697265625e-06, -0.01673412322998047, -3.814697265625e-06, -9.1552734375e-05, -5.7220458984375e-06, -0.0009002685546875, -9.5367431640625e-06, -0.0012592070270329714, -3.24249267578125e-05, -0.033423423767089844, -0.000507354736328125, -0.0001049041748046875, -3.814697265625e-06, -0.005129814147949219, -3.814697265625e-06, -0.003832101821899414, -0.0010318756103515625, -0.0011119842529296875, -0.0005550384521484375, -2.47955322265625e-05, -1.9073486328125e-06, -0.001148223876953125, -0.0025196075439453125, -0.00023651123046875, -4.57763671875e-05, -1.1444091796875e-05, -0.000255584716796875, -5.587981700897217, -5.543231964111328e-05, -4.76837158203125e-05, -8.96453857421875e-05, -0.001983642578125], "score": -6.158617271347566, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "Eq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Backstab", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 0, "hole2": "ROGUE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Backstab"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health == target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [120, 185, 331], "score_history": [-0.005316734313964844, -0.000247955322265625, -19.388282775878906], "score": -19.393847465515137, "model_output": {"body": [], "_type": "Module"}, "inferred_code": ""}], "index": 9}
{"beams": [{"choice_history": [121, 200, "Blessing", "Of", "Kings", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "4", "<EOS>", 130, 168, 34, 243, 41, "increase_health", "<EOS>", "4", "<EOS>"], "score_history": [-0.000911712646484375, -0.000118255615234375, -0.0001817776501411572, -5.435943239717744e-05, -0.00030703714583069086, -4.863739013671875e-05, -2.8552021831274033e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0003643035888671875, -0.000560760498046875, -0.0006084442138671875, -1.168244216387393e-05, -8.034706115722656e-05, -0.0006047487258911133, -4.00543212890625e-05, -0.00020742416381835938, -5.7220458984375e-06, -2.9801929485984147e-05, -3.814697265625e-06, -0.02201080322265625, 0.0, -0.0002980232238769531, 0.0, -0.0004425048828125, -7.62939453125e-06, 0.0, -0.00015163329953793436, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -8.427952707279474e-05, -0.0006618499755859375, -0.06449317932128906, -0.0019207000732421875, -0.1817169189453125, -1.71661376953125e-05, -4.57763671875e-05, -5.7220458984375e-06, -0.006954193115234375, -0.004837632179260254, -2.09808349609375e-05, -0.005429625511169434, -1.52587890625e-05, -0.0022029876708984375, 0.0, -5.7220458984375e-06, -0.000141143798828125, -0.0006389617919921875, -0.0005379915237426758, -1.9073486328125e-06, -0.002374783158302307, -3.814697265625e-06], "score": -0.29920298197339434, "model_output": {"hole4": "player", "hole0": "BlessingOfKings", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"value": {"hole1": "increase_health", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Blessing of Kings", "hole1": 4, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Kings", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "card", "<EOS>", 62], "score_history": [-0.000911712646484375, -0.000118255615234375, -0.0001817776501411572, -5.435943239717744e-05, -0.00030703714583069086, -4.863739013671875e-05, -2.8552021831274033e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0003643035888671875, -0.000560760498046875, -0.0006084442138671875, -1.168244216387393e-05, -8.034706115722656e-05, -0.0006047487258911133, -4.00543212890625e-05, -0.00020742416381835938, -5.7220458984375e-06, -2.9801929485984147e-05, -3.814697265625e-06, -0.02201080322265625, 0.0, -0.0002980232238769531, 0.0, -0.0004425048828125, -7.62939453125e-06, 0.0, -0.00015163329953793436, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -8.427952707279474e-05, -0.0006618499755859375, -0.06449317932128906, -0.0019207000732421875, -1.9436063766479492, -1.71661376953125e-05, -0.002178192138671875, -0.011833574622869492, 0.0, -0.0004177093505859375, -0.3405475616455078, -0.0005626678466796875, -0.0204925537109375, 0.0, -0.0001506805419921875, -0.009965110570192337, -0.00017427133570890874, -9.5367431640625e-06, -0.03453826904296875, -0.0017147064208984375, -0.04361152648925781, -0.07804441452026367, -1.9073486328125e-06, -0.01091766357421875, -0.06416130065917969, -3.0517578125e-05, -1.9073486328125e-06, -0.00379180908203125, -5.7220458984375e-06, -0.0046939849853515625, -0.2921299934387207, -5.7220458984375e-06, -0.9946012496948242], "score": -3.952458491578909, "model_output": {"hole4": "player", "hole0": "BlessingOfKings", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"_type": "Template79"}, "targets": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Blessing of Kings", "hole1": 4, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.card = True\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Kings", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "card", "<EOS>", 37, 249, 41, "calculate_attack", "<EOS>"], "score_history": [-0.000911712646484375, -0.000118255615234375, -0.0001817776501411572, -5.435943239717744e-05, -0.00030703714583069086, -4.863739013671875e-05, -2.8552021831274033e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0003643035888671875, -0.000560760498046875, -0.0006084442138671875, -1.168244216387393e-05, -8.034706115722656e-05, -0.0006047487258911133, -4.00543212890625e-05, -0.00020742416381835938, -5.7220458984375e-06, -2.9801929485984147e-05, -3.814697265625e-06, -0.02201080322265625, 0.0, -0.0002980232238769531, 0.0, -0.0004425048828125, -7.62939453125e-06, 0.0, -0.00015163329953793436, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -8.427952707279474e-05, -0.0006618499755859375, -0.06449317932128906, -0.0019207000732421875, -1.9436063766479492, -1.71661376953125e-05, -0.002178192138671875, -0.011833574622869492, 0.0, -0.0004177093505859375, -0.3405475616455078, -0.0005626678466796875, -0.0204925537109375, 0.0, -0.0001506805419921875, -0.009965110570192337, -0.00017427133570890874, -9.5367431640625e-06, -0.03453826904296875, -0.0017147064208984375, -0.04361152648925781, -0.07804441452026367, -1.9073486328125e-06, -0.01091766357421875, -0.06416130065917969, -3.0517578125e-05, -1.9073486328125e-06, -0.00379180908203125, -5.7220458984375e-06, -0.0046939849853515625, -0.2921299934387207, -5.7220458984375e-06, -1.4676761627197266, -2.09808349609375e-05, -0.013080596923828125, -0.014275193214416504, 0.0], "score": -4.452910175577017, "model_output": {"hole4": "player", "hole0": "BlessingOfKings", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}, "targets": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Blessing of Kings", "hole1": 4, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.card = self.target.calculate_attack()\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Kings", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "card", "<EOS>", 26, 187, "Null", "<EOS>"], "score_history": [-0.000911712646484375, -0.000118255615234375, -0.0001817776501411572, -5.435943239717744e-05, -0.00030703714583069086, -4.863739013671875e-05, -2.8552021831274033e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0003643035888671875, -0.000560760498046875, -0.0006084442138671875, -1.168244216387393e-05, -8.034706115722656e-05, -0.0006047487258911133, -4.00543212890625e-05, -0.00020742416381835938, -5.7220458984375e-06, -2.9801929485984147e-05, -3.814697265625e-06, -0.02201080322265625, 0.0, -0.0002980232238769531, 0.0, -0.0004425048828125, -7.62939453125e-06, 0.0, -0.00015163329953793436, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -8.427952707279474e-05, -0.0006618499755859375, -0.06449317932128906, -0.0019207000732421875, -1.9436063766479492, -1.71661376953125e-05, -0.002178192138671875, -0.011833574622869492, 0.0, -0.0004177093505859375, -0.3405475616455078, -0.0005626678466796875, -0.0204925537109375, 0.0, -0.0001506805419921875, -0.009965110570192337, -0.00017427133570890874, -9.5367431640625e-06, -0.03453826904296875, -0.0017147064208984375, -0.04361152648925781, -0.07804441452026367, -1.9073486328125e-06, -0.01091766357421875, -0.06416130065917969, -3.0517578125e-05, -1.9073486328125e-06, -0.00379180908203125, -5.7220458984375e-06, -0.0046939849853515625, -0.2921299934387207, -5.7220458984375e-06, -1.6110649108886719, -0.0004177093505859375, -6.198883056640625e-06, -9.5367431640625e-06], "score": -4.5693555977495635, "model_output": {"hole4": "player", "hole0": "BlessingOfKings", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"value": "Null", "_type": "NameConstant"}, "targets": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Blessing of Kings", "hole1": 4, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.card = Null\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Kings", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "cards_played", "<EOS>", 317, 9, 320, 113, 332, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "4", "<EOS>", 332, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "4", "<EOS>"], "score_history": [-0.000911712646484375, -0.000118255615234375, -0.0001817776501411572, -5.435943239717744e-05, -0.00030703714583069086, -4.863739013671875e-05, -2.8552021831274033e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0003643035888671875, -0.000560760498046875, -0.0006084442138671875, -1.168244216387393e-05, -8.034706115722656e-05, -0.0006047487258911133, -4.00543212890625e-05, -0.00020742416381835938, -5.7220458984375e-06, -2.9801929485984147e-05, -3.814697265625e-06, -0.02201080322265625, 0.0, -0.0002980232238769531, 0.0, -0.0004425048828125, -7.62939453125e-06, 0.0, -0.00015163329953793436, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -8.427952707279474e-05, -0.0006618499755859375, -3.0565853118896484, -0.0001659393310546875, -0.25827503204345703, -0.0041446685791015625, -0.0025587081909179688, -0.0019378662109375, -0.05730438232421875, 0.0, -0.0360565185546875, -0.46964749693870544, -0.0016489028930664062, -0.0006084442138671875, -0.032708168029785156, -1.9073486328125e-06, -0.000102996826171875, -0.0027933120727539062, -0.00437164306640625, -7.62939453125e-06, -8.7738037109375e-05, -0.000102996826171875, -0.0005321502685546875, -0.03219723701477051, -0.0057659149169921875, -0.0018255709437653422, -1.52587890625e-05, -0.00162506103515625, -0.2591381072998047, -2.288818359375e-05, -1.52587890625e-05, -3.814697265625e-06, -6.866455078125e-05, -0.4856218099594116, -3.62396240234375e-05, -0.0019218926317989826, -3.814697265625e-06], "score": -4.745741862790055, "model_output": {"hole4": "player", "hole0": "BlessingOfKings", "hole6": [{"_type": "Template19"}, {"orelse": [{"value": {"hole1": "change_attack", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "test": {"ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare", "left": {"attr": "cards_played", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "body": [{"value": {"hole1": "change_attack", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Blessing of Kings", "hole1": 4, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.cards_played > 0:\n            self.target.change_attack(4)\n        else:\n            self.target.change_attack(4)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Kings", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "4", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.000911712646484375, -0.000118255615234375, -0.0001817776501411572, -5.435943239717744e-05, -0.00030703714583069086, -4.863739013671875e-05, -2.8552021831274033e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0003643035888671875, -0.000560760498046875, -0.0006084442138671875, -1.168244216387393e-05, -8.034706115722656e-05, -0.0006047487258911133, -4.00543212890625e-05, -0.00020742416381835938, -5.7220458984375e-06, -2.9801929485984147e-05, -3.814697265625e-06, -0.02201080322265625, 0.0, -0.0002980232238769531, 0.0, -0.0004425048828125, -7.62939453125e-06, 0.0, -0.00015163329953793436, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -8.427952707279474e-05, -0.0006618499755859375, -0.06449317932128906, -0.0019207000732421875, -1.9436063766479492, -1.71661376953125e-05, -0.002178192138671875, -0.011833574622869492, 0.0, -0.0004177093505859375, -1.2647457122802734, -3.814697265625e-06, -0.0015316009521484375, -0.003575921058654785, -4.410743713378906e-06, -0.04332590103149414, -1.728534698486328e-05, -0.0003223419189453125, -0.0058155059814453125, -1.52587890625e-05, -1.4798698425292969, -1.9073486328125e-06, -0.0036029815673828125, -0.0025272369384765625, -9.5367431640625e-06], "score": -4.857674672836765, "model_output": {"hole4": "player", "hole0": "BlessingOfKings", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Blessing of Kings", "hole1": 4, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(4), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Kings", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "DRUID", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "4", "<EOS>", 130, 168, 34, 243, 41, "increase_health", "<EOS>", "4", "<EOS>"], "score_history": [-0.000911712646484375, -0.000118255615234375, -0.0001817776501411572, -5.435943239717744e-05, -0.00030703714583069086, -4.863739013671875e-05, -2.8552021831274033e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0003643035888671875, -0.000560760498046875, -0.0006084442138671875, -1.168244216387393e-05, -8.034706115722656e-05, -0.0006047487258911133, -4.00543212890625e-05, -0.00020742416381835938, -5.7220458984375e-06, -2.9801929485984147e-05, -3.814697265625e-06, -4.627042770385742, 0.0, -0.001604318618774414, 0.0, -0.00030517578125, -7.62939453125e-06, 0.0, -0.00013887803652323782, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -8.404121763305739e-05, -0.0006561279296875, -0.06577301025390625, -0.00189208984375, -0.19032859802246094, -1.52587890625e-05, -4.38690185546875e-05, -7.62939453125e-06, -0.0075359344482421875, -0.004839420318603516, -2.288818359375e-05, -0.005545228719711304, -1.71661376953125e-05, -0.0021762847900390625, 0.0, -5.7220458984375e-06, -0.00014495849609375, -0.0006351470947265625, -0.0005379915237426758, -1.9073486328125e-06, -0.0023956745862960815, -3.814697265625e-06], "score": -4.915943328168396, "model_output": {"hole4": "player", "hole0": "BlessingOfKings", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"value": {"hole1": "increase_health", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Blessing of Kings", "hole1": 4, "hole2": "DRUID", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Kings", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "4", "<EOS>", 110, 130, 168, 34, 243, 41, "increase_health", "<EOS>", "4", "<EOS>"], "score_history": [-0.000911712646484375, -0.000118255615234375, -0.0001817776501411572, -5.435943239717744e-05, -0.00030703714583069086, -4.863739013671875e-05, -2.8552021831274033e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0003643035888671875, -0.000560760498046875, -0.0006084442138671875, -1.168244216387393e-05, -8.034706115722656e-05, -0.0006047487258911133, -4.00543212890625e-05, -0.00020742416381835938, -5.7220458984375e-06, -2.9801929485984147e-05, -3.814697265625e-06, -0.02201080322265625, 0.0, -0.0002980232238769531, 0.0, -0.0004425048828125, -7.62939453125e-06, 0.0, -0.00015163329953793436, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -8.427952707279474e-05, -0.0006618499755859375, -0.06449317932128906, -0.0019207000732421875, -1.9436063766479492, -1.71661376953125e-05, -0.002178192138671875, -0.011833574622869492, 0.0, -0.0004177093505859375, -1.2647457122802734, -3.814697265625e-06, -0.0015316009521484375, -0.003575921058654785, -4.410743713378906e-06, -0.04332590103149414, -1.728534698486328e-05, -0.0003223419189453125, -0.0058155059814453125, -1.52587890625e-05, -0.25849342346191406, -1.9073486328125e-06, -0.6603717803955078, -0.6552848815917969, 0.0, -0.018486343324184418, -1.9073486328125e-06], "score": -4.964303411180481, "model_output": {"hole4": "player", "hole0": "BlessingOfKings", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "increase_health", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Blessing of Kings", "hole1": 4, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(4), self)\n        self.target.increase_health(4)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Kings", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "4", "<EOS>", 130, 168, 34, 243, 41, "increase_health", "<EOS>", "4", "<EOS>"], "score_history": [-0.000911712646484375, -0.000118255615234375, -0.0001817776501411572, -5.435943239717744e-05, -0.00030703714583069086, -4.863739013671875e-05, -2.8552021831274033e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0003643035888671875, -0.000560760498046875, -0.0006084442138671875, -1.168244216387393e-05, -8.034706115722656e-05, -0.0006047487258911133, -4.00543212890625e-05, -0.00020742416381835938, -5.7220458984375e-06, -2.9801929485984147e-05, -3.814697265625e-06, -4.728514671325684, -4.00543212890625e-05, -0.0038633346557617188, 0.0, -0.000286102294921875, -5.7220458984375e-06, 0.0, -0.00011968561739195138, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -6.353794015012681e-05, -0.0005893707275390625, -0.062335968017578125, -0.001888275146484375, -0.20870685577392578, -1.33514404296875e-05, -3.62396240234375e-05, -7.62939453125e-06, -0.006679534912109375, -0.005174040794372559, -2.288818359375e-05, -0.005625277757644653, -1.33514404296875e-05, -0.0023212432861328125, -1.9073486328125e-06, -5.7220458984375e-06, -0.0001392364501953125, -0.0006542205810546875, -0.0005284547805786133, -1.9073486328125e-06, -0.00228998064994812, -3.814697265625e-06], "score": -5.034114171693545, "model_output": {"hole4": "player", "hole0": "BlessingOfKings", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"value": {"hole1": "increase_health", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Blessing of Kings", "hole1": 4, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Kings", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "4", "<EOS>", 110, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "4", "<EOS>"], "score_history": [-0.000911712646484375, -0.000118255615234375, -0.0001817776501411572, -5.435943239717744e-05, -0.00030703714583069086, -4.863739013671875e-05, -2.8552021831274033e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0003643035888671875, -0.000560760498046875, -0.0006084442138671875, -1.168244216387393e-05, -8.034706115722656e-05, -0.0006047487258911133, -4.00543212890625e-05, -0.00020742416381835938, -5.7220458984375e-06, -2.9801929485984147e-05, -3.814697265625e-06, -0.02201080322265625, 0.0, -0.0002980232238769531, 0.0, -0.0004425048828125, -7.62939453125e-06, 0.0, -0.00015163329953793436, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -8.427952707279474e-05, -0.0006618499755859375, -0.06449317932128906, -0.0019207000732421875, -1.9436063766479492, -1.71661376953125e-05, -0.002178192138671875, -0.011833574622869492, 0.0, -0.0004177093505859375, -1.2647457122802734, -3.814697265625e-06, -0.0015316009521484375, -0.003575921058654785, -4.410743713378906e-06, -0.04332590103149414, -1.728534698486328e-05, -0.0003223419189453125, -0.0058155059814453125, -1.52587890625e-05, -0.25849342346191406, -1.9073486328125e-06, -0.6603717803955078, -0.747960090637207, -3.814697265625e-06, -0.002515416592359543, -3.814697265625e-06], "score": -5.041013415539965, "model_output": {"hole4": "player", "hole0": "BlessingOfKings", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "change_attack", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Blessing of Kings", "hole1": 4, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(4), self)\n        self.target.change_attack(4)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Kings", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "cards_played", "<EOS>", 317, 9, 320, 113, 332, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "4", "<EOS>", 332, 130, 168, 34, 243, 41, "increase_health", "<EOS>", "4", "<EOS>"], "score_history": [-0.000911712646484375, -0.000118255615234375, -0.0001817776501411572, -5.435943239717744e-05, -0.00030703714583069086, -4.863739013671875e-05, -2.8552021831274033e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0003643035888671875, -0.000560760498046875, -0.0006084442138671875, -1.168244216387393e-05, -8.034706115722656e-05, -0.0006047487258911133, -4.00543212890625e-05, -0.00020742416381835938, -5.7220458984375e-06, -2.9801929485984147e-05, -3.814697265625e-06, -0.02201080322265625, 0.0, -0.0002980232238769531, 0.0, -0.0004425048828125, -7.62939453125e-06, 0.0, -0.00015163329953793436, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -8.427952707279474e-05, -0.0006618499755859375, -3.0565853118896484, -0.0001659393310546875, -0.25827503204345703, -0.0041446685791015625, -0.0025587081909179688, -0.0019378662109375, -0.05730438232421875, 0.0, -0.0360565185546875, -0.46964749693870544, -0.0016489028930664062, -0.0006084442138671875, -0.032708168029785156, -1.9073486328125e-06, -0.000102996826171875, -0.0027933120727539062, -0.00437164306640625, -7.62939453125e-06, -8.7738037109375e-05, -0.000102996826171875, -0.0005321502685546875, -0.03219723701477051, -0.0057659149169921875, -0.0018255709437653422, -1.52587890625e-05, -0.00162506103515625, -0.2591381072998047, -2.288818359375e-05, -1.52587890625e-05, -3.814697265625e-06, -6.866455078125e-05, -0.9669212102890015, -3.814697265625e-06, -0.0037330398336052895, -3.814697265625e-06], "score": -5.2288199853946935, "model_output": {"hole4": "player", "hole0": "BlessingOfKings", "hole6": [{"_type": "Template19"}, {"orelse": [{"value": {"hole1": "increase_health", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "test": {"ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare", "left": {"attr": "cards_played", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "body": [{"value": {"hole1": "change_attack", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Blessing of Kings", "hole1": 4, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.cards_played > 0:\n            self.target.change_attack(4)\n        else:\n            self.target.increase_health(4)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Kings", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "4", "<EOS>", 110, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "4", "<EOS>"], "score_history": [-0.000911712646484375, -0.000118255615234375, -0.0001817776501411572, -5.435943239717744e-05, -0.00030703714583069086, -4.863739013671875e-05, -2.8552021831274033e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0003643035888671875, -0.000560760498046875, -0.0006084442138671875, -1.168244216387393e-05, -8.034706115722656e-05, -0.0006047487258911133, -4.00543212890625e-05, -0.00020742416381835938, -5.7220458984375e-06, -2.9801929485984147e-05, -3.814697265625e-06, -0.02201080322265625, 0.0, -0.0002980232238769531, 0.0, -0.0004425048828125, -7.62939453125e-06, 0.0, -0.00015163329953793436, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -8.427952707279474e-05, -0.0006618499755859375, -0.06449317932128906, -0.0019207000732421875, -1.9436063766479492, -1.71661376953125e-05, -0.002178192138671875, -0.011833574622869492, 0.0, -0.0004177093505859375, -1.2647457122802734, -3.814697265625e-06, -0.0015316009521484375, -0.003575921058654785, -4.410743713378906e-06, -0.04332590103149414, -1.728534698486328e-05, -0.0003223419189453125, -0.0058155059814453125, -1.52587890625e-05, -0.25849342346191406, -1.9073486328125e-06, -0.7698202133178711, -7.43865966796875e-05, -0.03486156463623047, -0.0013099908828735352, 0.0, -0.4096146821975708, 0.0, -0.4502757489681244, 0.0], "score": -5.296115085119709, "model_output": {"hole4": "player", "hole0": "BlessingOfKings", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "change_temp_attack", "hole2": 4, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Blessing of Kings", "hole1": 4, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(4), self)\n        player.hero.change_temp_attack(4)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Kings", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "taunt", "<EOS>", 62], "score_history": [-0.000911712646484375, -0.000118255615234375, -0.0001817776501411572, -5.435943239717744e-05, -0.00030703714583069086, -4.863739013671875e-05, -2.8552021831274033e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0003643035888671875, -0.000560760498046875, -0.0006084442138671875, -1.168244216387393e-05, -8.034706115722656e-05, -0.0006047487258911133, -4.00543212890625e-05, -0.00020742416381835938, -5.7220458984375e-06, -2.9801929485984147e-05, -3.814697265625e-06, -0.02201080322265625, 0.0, -0.0002980232238769531, 0.0, -0.0004425048828125, -7.62939453125e-06, 0.0, -0.00015163329953793436, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -8.427952707279474e-05, -0.0006618499755859375, -0.06449317932128906, -0.0019207000732421875, -1.9436063766479492, -1.71661376953125e-05, -0.002178192138671875, -0.011833574622869492, 0.0, -0.0004177093505859375, -0.3405475616455078, -0.0005626678466796875, -0.0204925537109375, 0.0, -0.0001506805419921875, -0.009965110570192337, -0.00017427133570890874, -9.5367431640625e-06, -0.03453826904296875, -0.0017147064208984375, -0.04361152648925781, -0.07804441452026367, -1.9073486328125e-06, -0.01091766357421875, -0.06416130065917969, -3.0517578125e-05, -1.9073486328125e-06, -0.00379180908203125, -5.7220458984375e-06, -0.0046939849853515625, -2.9590067863464355, 0.0, -0.000629425048828125], "score": -5.6253577377947295, "model_output": {"hole4": "player", "hole0": "BlessingOfKings", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"_type": "Template79"}, "targets": [{"attr": "taunt", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Blessing of Kings", "hole1": 4, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.taunt = True\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Kings", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "4", "<EOS>", 110], "score_history": [-0.000911712646484375, -0.000118255615234375, -0.0001817776501411572, -5.435943239717744e-05, -0.00030703714583069086, -4.863739013671875e-05, -2.8552021831274033e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0003643035888671875, -0.000560760498046875, -0.0006084442138671875, -1.168244216387393e-05, -8.034706115722656e-05, -0.0006047487258911133, -4.00543212890625e-05, -0.00020742416381835938, -5.7220458984375e-06, -2.9801929485984147e-05, -3.814697265625e-06, -0.02201080322265625, 0.0, -0.0002980232238769531, 0.0, -0.0004425048828125, -7.62939453125e-06, 0.0, -0.00015163329953793436, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -8.427952707279474e-05, -0.0006618499755859375, -3.0565853118896484, -0.0001659393310546875, -2.194967269897461, -0.00125885009765625, -0.003673553466796875, -0.11491042375564575, -1.9311904907226562e-05, -0.0001392364501953125, -0.19155311584472656, -1.9073486328125e-06, -0.000835418701171875, -0.01678466796875, -5.364416665543104e-06, -0.03712332248687744, -1.919269561767578e-05, -0.0005435943603515625], "score": -5.64642499723368, "model_output": {"hole4": "player", "hole0": "BlessingOfKings", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Blessing of Kings", "hole1": 4, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(4), self)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Kings", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "4", "<EOS>", 110, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000911712646484375, -0.000118255615234375, -0.0001817776501411572, -5.435943239717744e-05, -0.00030703714583069086, -4.863739013671875e-05, -2.8552021831274033e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0003643035888671875, -0.000560760498046875, -0.0006084442138671875, -1.168244216387393e-05, -8.034706115722656e-05, -0.0006047487258911133, -4.00543212890625e-05, -0.00020742416381835938, -5.7220458984375e-06, -2.9801929485984147e-05, -3.814697265625e-06, -0.02201080322265625, 0.0, -0.0002980232238769531, 0.0, -0.0004425048828125, -7.62939453125e-06, 0.0, -0.00015163329953793436, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -8.427952707279474e-05, -0.0006618499755859375, -0.06449317932128906, -0.0019207000732421875, -1.9436063766479492, -1.71661376953125e-05, -0.002178192138671875, -0.011833574622869492, 0.0, -0.0004177093505859375, -1.2647457122802734, -3.814697265625e-06, -0.0015316009521484375, -0.003575921058654785, -4.410743713378906e-06, -0.04332590103149414, -1.728534698486328e-05, -0.0003223419189453125, -0.0058155059814453125, -1.52587890625e-05, -0.25849342346191406, -1.9073486328125e-06, -0.7698202133178711, -7.43865966796875e-05, -0.03486156463623047, -0.0013099908828735352, 0.0, -0.4096146821975708, 0.0, -1.0384541749954224, 0.0], "score": -5.884293511147007, "model_output": {"hole4": "player", "hole0": "BlessingOfKings", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "change_temp_attack", "hole2": 3, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Blessing of Kings", "hole1": 4, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(4), self)\n        player.hero.change_temp_attack(3)\n"}], "index": 10}
{"beams": [{"choice_history": [121, 200, "Blessing", "Of", "Might", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessing", " ", "of", " ", "Might", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000606536865234375, -0.0001678466796875, -7.903263758635148e-05, -5.3643991122953594e-05, -0.00018904806347563863, -3.814697265625e-06, -4.528352292254567e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.0002269744873046875, -4.00543212890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.0008716583251953125, -0.0001068115234375, -0.0001010894775390625, -0.0001220703125, -0.0011196136474609375, -6.079655122448457e-06, -0.0011365681421011686, -0.00011157965491292998, -0.00014221668243408203, -0.000740981544367969, -1.9073486328125e-06, -0.000156402587890625, -0.0003814697265625, -3.814697265625e-06, -0.0035066604614257812, -1.9073486328125e-06, -0.00010049335105577484, -1.9073486328125e-06, -0.024119993671774864, 0.0, -1.9073486328125e-05, -8.96453857421875e-05, -0.0002307891845703125, -3.62396240234375e-05, -0.000354766845703125, 0.0, -0.03444099426269531, -0.0001583099365234375, 0.0, -0.0007536407210864127, 0.0, -2.09808349609375e-05, -0.0003204345703125, -1.52587890625e-05, -2.2768930648453534e-05, -2.0265579223632812e-06, -0.0001010894775390625, -0.000881195068359375, -0.07552146911621094, -0.0001430511474609375, -9.5367431640625e-06, -0.000820159912109375, -9.34600830078125e-05, -0.02400684356689453, -4.57763671875e-05, -0.011530807241797447, -3.814697265625e-06], "score": -0.18391566566742767, "model_output": {"hole4": "player", "hole0": "BlessingOfMight", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Blessing of Might", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Might", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessing", " ", "of", " ", "Might", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000606536865234375, -0.0001678466796875, -7.903263758635148e-05, -5.3643991122953594e-05, -0.00018904806347563863, -3.814697265625e-06, -4.528352292254567e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.0002269744873046875, -4.00543212890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.0008716583251953125, -0.0001068115234375, -0.0001010894775390625, -0.0001220703125, -0.0011196136474609375, -6.079655122448457e-06, -0.0011365681421011686, -0.00011157965491292998, -0.00014221668243408203, -0.000740981544367969, -1.9073486328125e-06, -0.000156402587890625, -0.0003814697265625, -3.814697265625e-06, -0.0035066604614257812, -1.9073486328125e-06, -0.00010049335105577484, -1.9073486328125e-06, -0.024119993671774864, 0.0, -1.9073486328125e-05, -8.96453857421875e-05, -0.0002307891845703125, -3.62396240234375e-05, -0.000354766845703125, 0.0, -3.484292984008789, -3.814697265625e-06, -0.0002765655517578125, -0.07515549659729004, -1.9073486328125e-06, -0.0003317594528198242, 0.0, -0.0014986969763413072, 0.0, -5.91278076171875e-05, -4.9591064453125e-05, -2.09808349609375e-05, -2.753724402282387e-05, -3.814697265625e-06, -0.0001316070556640625, -0.0009403228759765625, -0.1593465805053711, -0.0017032623291015625, -2.09808349609375e-05, -0.00196075439453125, -0.000194549560546875, -0.023394346237182617, -4.57763671875e-05, -0.010965758934617043, -1.9073486328125e-06], "score": -3.7954521703682076, "model_output": {"hole4": "player", "hole0": "BlessingOfMight", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Blessing of Might", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Might", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessing", " ", "of", " ", "Might", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110], "score_history": [-0.000606536865234375, -0.0001678466796875, -7.903263758635148e-05, -5.3643991122953594e-05, -0.00018904806347563863, -3.814697265625e-06, -4.528352292254567e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.0002269744873046875, -4.00543212890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.0008716583251953125, -0.0001068115234375, -0.0001010894775390625, -0.0001220703125, -0.0011196136474609375, -6.079655122448457e-06, -0.0011365681421011686, -0.00011157965491292998, -0.00014221668243408203, -0.000740981544367969, -1.9073486328125e-06, -0.000156402587890625, -0.0003814697265625, -3.814697265625e-06, -0.0035066604614257812, -1.9073486328125e-06, -0.00010049335105577484, -1.9073486328125e-06, -0.024119993671774864, 0.0, -1.9073486328125e-05, -8.96453857421875e-05, -0.0002307891845703125, -3.62396240234375e-05, -0.000354766845703125, 0.0, -0.03444099426269531, -0.0001583099365234375, 0.0, -0.0007536407210864127, 0.0, -2.09808349609375e-05, -0.0003204345703125, -1.52587890625e-05, -2.2768930648453534e-05, -2.0265579223632812e-06, -0.0001010894775390625, -0.000881195068359375, -3.0921125411987305, -0.0006732940673828125, -0.000423431396484375, -0.01390448771417141, -1.9073486328125e-06, -0.0010280609130859375, -0.044411659240722656, -0.000774383544921875, -0.06885719299316406, 0.0, -6.29425048828125e-05, -0.05399060621857643, -0.0003881922457367182, -7.62939453125e-06, -0.03382396697998047, -0.00301361083984375, -0.03161334991455078, -0.6772912740707397, -1.1444091796875e-05, -0.0032196044921875], "score": -4.097350325962452, "model_output": {"hole4": "player", "hole0": "BlessingOfMight", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Blessing of Might", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_attack()), self)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Might", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessing", " ", "of", " ", "Might", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000606536865234375, -0.0001678466796875, -7.903263758635148e-05, -5.3643991122953594e-05, -0.00018904806347563863, -3.814697265625e-06, -4.528352292254567e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.0002269744873046875, -4.00543212890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.0008716583251953125, -0.0001068115234375, -0.0001010894775390625, -0.0001220703125, -0.0011196136474609375, -6.079655122448457e-06, -0.0011365681421011686, -0.00011157965491292998, -0.00014221668243408203, -0.000740981544367969, -1.9073486328125e-06, -0.000156402587890625, -0.0003814697265625, -3.814697265625e-06, -0.0035066604614257812, -1.9073486328125e-06, -0.00010049335105577484, -1.9073486328125e-06, -4.520832538604736, -1.9073486328125e-06, -0.0008678436279296875, -0.0001049041748046875, -2.288818359375e-05, -1.71661376953125e-05, -0.0002899169921875, 0.0, -0.051405906677246094, -0.000148773193359375, 0.0, -0.001090764650143683, 0.0, -2.47955322265625e-05, -0.00042724609375, -1.71661376953125e-05, -2.1576848666882142e-05, -2.0265579223632812e-06, -0.0001049041748046875, -0.0008983612060546875, -0.067291259765625, -9.5367431640625e-05, -9.5367431640625e-06, -0.000701904296875, -9.1552734375e-05, -0.02775287628173828, -4.38690185546875e-05, -0.013291800394654274, -1.9073486328125e-06], "score": -4.6957322996017865, "model_output": {"hole4": "player", "hole0": "BlessingOfMight", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Blessing of Might", "_type": "Str"}, {"_type": "Template60"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Might", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessing", " ", "of", " ", "Might", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "change_temp_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000606536865234375, -0.0001678466796875, -7.903263758635148e-05, -5.3643991122953594e-05, -0.00018904806347563863, -3.814697265625e-06, -4.528352292254567e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.0002269744873046875, -4.00543212890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.0008716583251953125, -0.0001068115234375, -0.0001010894775390625, -0.0001220703125, -0.0011196136474609375, -6.079655122448457e-06, -0.0011365681421011686, -0.00011157965491292998, -0.00014221668243408203, -0.000740981544367969, -1.9073486328125e-06, -0.000156402587890625, -0.0003814697265625, -3.814697265625e-06, -0.0035066604614257812, -1.9073486328125e-06, -0.00010049335105577484, -1.9073486328125e-06, -0.024119993671774864, 0.0, -1.9073486328125e-05, -8.96453857421875e-05, -0.0002307891845703125, -3.62396240234375e-05, -0.000354766845703125, 0.0, -0.03444099426269531, -0.0001583099365234375, 0.0, -0.0007536407210864127, 0.0, -2.09808349609375e-05, -0.0003204345703125, -1.52587890625e-05, -2.2768930648453534e-05, -2.0265579223632812e-06, -0.0001010894775390625, -0.000881195068359375, -0.07552146911621094, -0.0001430511474609375, -9.5367431640625e-06, -0.000820159912109375, -9.34600830078125e-05, -4.73948335647583, -0.00046443939208984375, -0.08637437969446182, -3.814697265625e-06], "score": -4.97465441405393, "model_output": {"hole4": "player", "hole0": "BlessingOfMight", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_temp_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Blessing of Might", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_temp_attack(3)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Might", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessing", " ", "of", " ", "Might", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000606536865234375, -0.0001678466796875, -7.903263758635148e-05, -5.3643991122953594e-05, -0.00018904806347563863, -3.814697265625e-06, -4.528352292254567e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.0002269744873046875, -4.00543212890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.0008716583251953125, -0.0001068115234375, -0.0001010894775390625, -0.0001220703125, -0.0011196136474609375, -6.079655122448457e-06, -0.0011365681421011686, -0.00011157965491292998, -0.00014221668243408203, -0.000740981544367969, -1.9073486328125e-06, -0.000156402587890625, -0.0003814697265625, -3.814697265625e-06, -0.0035066604614257812, -1.9073486328125e-06, -0.00010049335105577484, -1.9073486328125e-06, -4.93706750869751, -1.9073486328125e-06, -0.0001125335693359375, -0.0009136199951171875, -4.00543212890625e-05, -1.1444091796875e-05, -0.0009555816650390625, 0.0, -0.013451576232910156, -0.000110626220703125, 0.0, -0.001059532049112022, 0.0, -2.09808349609375e-05, -0.000396728515625, -1.52587890625e-05, -2.0503972336882725e-05, -2.0265579223632812e-06, -0.0001068115234375, -0.0009555816650390625, -0.06659698486328125, -8.58306884765625e-05, -9.5367431640625e-06, -0.00069427490234375, -8.392333984375e-05, -0.02819514274597168, -5.53131103515625e-05, -0.014481127262115479, -3.814697265625e-06], "score": -5.075621763847721, "model_output": {"hole4": "player", "hole0": "BlessingOfMight", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Blessing of Might", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Might", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessing", " ", "of", " ", "Might", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "score_history": [-0.000606536865234375, -0.0001678466796875, -7.903263758635148e-05, -5.3643991122953594e-05, -0.00018904806347563863, -3.814697265625e-06, -4.528352292254567e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.0002269744873046875, -4.00543212890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.0008716583251953125, -0.0001068115234375, -0.0001010894775390625, -0.0001220703125, -0.0011196136474609375, -6.079655122448457e-06, -0.0011365681421011686, -0.00011157965491292998, -0.00014221668243408203, -0.000740981544367969, -1.9073486328125e-06, -0.000156402587890625, -0.0003814697265625, -3.814697265625e-06, -0.0035066604614257812, -1.9073486328125e-06, -0.00010049335105577484, -1.9073486328125e-06, -0.024119993671774864, 0.0, -1.9073486328125e-05, -8.96453857421875e-05, -0.0002307891845703125, -3.62396240234375e-05, -0.000354766845703125, 0.0, -0.03444099426269531, -0.0001583099365234375, 0.0, -0.0007536407210864127, 0.0, -2.09808349609375e-05, -0.0003204345703125, -1.52587890625e-05, -2.2768930648453534e-05, -2.0265579223632812e-06, -0.0001010894775390625, -0.000881195068359375, -3.0921125411987305, -0.0006732940673828125, -0.000423431396484375, -0.01390448771417141, -1.9073486328125e-06, -0.0010280609130859375, -0.044411659240722656, -0.000774383544921875, -0.06885719299316406, 0.0, -6.29425048828125e-05, -0.05399060621857643, -0.0003881922457367182, -7.62939453125e-06, -0.03382396697998047, -0.00301361083984375, -0.03161334991455078, -1.9043515920639038, -1.9073486328125e-05, -0.0017986297607421875], "score": -5.322997298618702, "model_output": {"hole4": "player", "hole0": "BlessingOfMight", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Blessing of Might", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Might", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessing", " ", "of", " ", "Might", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "change_temp_attack", "<EOS>", 110], "score_history": [-0.000606536865234375, -0.0001678466796875, -7.903263758635148e-05, -5.3643991122953594e-05, -0.00018904806347563863, -3.814697265625e-06, -4.528352292254567e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.0002269744873046875, -4.00543212890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.0008716583251953125, -0.0001068115234375, -0.0001010894775390625, -0.0001220703125, -0.0011196136474609375, -6.079655122448457e-06, -0.0011365681421011686, -0.00011157965491292998, -0.00014221668243408203, -0.000740981544367969, -1.9073486328125e-06, -0.000156402587890625, -0.0003814697265625, -3.814697265625e-06, -0.0035066604614257812, -1.9073486328125e-06, -0.00010049335105577484, -1.9073486328125e-06, -0.024119993671774864, 0.0, -1.9073486328125e-05, -8.96453857421875e-05, -0.0002307891845703125, -3.62396240234375e-05, -0.000354766845703125, 0.0, -0.03444099426269531, -0.0001583099365234375, 0.0, -0.0007536407210864127, 0.0, -2.09808349609375e-05, -0.0003204345703125, -1.52587890625e-05, -2.2768930648453534e-05, -2.0265579223632812e-06, -0.0001010894775390625, -0.000881195068359375, -3.0921125411987305, -0.0006732940673828125, -0.000423431396484375, -0.01390448771417141, -1.9073486328125e-06, -0.0010280609130859375, -0.044411659240722656, -0.000774383544921875, -0.06885719299316406, 0.0, -6.29425048828125e-05, -0.05399060621857643, -0.0003881922457367182, -7.62939453125e-06, -0.03382396697998047, -0.00301361083984375, -0.03161334991455078, -1.930630087852478, -7.987022399902344e-06, -0.021181106567382812], "score": -5.368647184749989, "model_output": {"hole4": "player", "hole0": "BlessingOfMight", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "change_temp_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Blessing of Might", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            change_temp_attack()), self)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Might", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessing", " ", "of", " ", "Might", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "4", "<EOS>"], "score_history": [-0.000606536865234375, -0.0001678466796875, -7.903263758635148e-05, -5.3643991122953594e-05, -0.00018904806347563863, -3.814697265625e-06, -4.528352292254567e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.0002269744873046875, -4.00543212890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.0008716583251953125, -0.0001068115234375, -0.0001010894775390625, -0.0001220703125, -0.0011196136474609375, -6.079655122448457e-06, -0.0011365681421011686, -0.00011157965491292998, -0.00014221668243408203, -0.000740981544367969, -1.9073486328125e-06, -0.000156402587890625, -0.0003814697265625, -3.814697265625e-06, -0.0035066604614257812, -1.9073486328125e-06, -0.00010049335105577484, -1.9073486328125e-06, -0.024119993671774864, 0.0, -1.9073486328125e-05, -8.96453857421875e-05, -0.0002307891845703125, -3.62396240234375e-05, -0.000354766845703125, 0.0, -0.03444099426269531, -0.0001583099365234375, 0.0, -0.0007536407210864127, 0.0, -2.09808349609375e-05, -0.0003204345703125, -1.52587890625e-05, -2.2768930648453534e-05, -2.0265579223632812e-06, -0.0001010894775390625, -0.000881195068359375, -0.07552146911621094, -0.0001430511474609375, -9.5367431640625e-06, -0.000820159912109375, -9.34600830078125e-05, -0.02400684356689453, -4.57763671875e-05, -5.231533050537109, -1.9073486328125e-06], "score": -5.403916001614107, "model_output": {"hole4": "player", "hole0": "BlessingOfMight", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Blessing of Might", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Might", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessing", " ", "of", " ", "Might", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "1", "<EOS>"], "score_history": [-0.000606536865234375, -0.0001678466796875, -7.903263758635148e-05, -5.3643991122953594e-05, -0.00018904806347563863, -3.814697265625e-06, -4.528352292254567e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.0002269744873046875, -4.00543212890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.0008716583251953125, -0.0001068115234375, -0.0001010894775390625, -0.0001220703125, -0.0011196136474609375, -6.079655122448457e-06, -0.0011365681421011686, -0.00011157965491292998, -0.00014221668243408203, -0.000740981544367969, -1.9073486328125e-06, -0.000156402587890625, -0.0003814697265625, -3.814697265625e-06, -0.0035066604614257812, -1.9073486328125e-06, -0.00010049335105577484, -1.9073486328125e-06, -0.024119993671774864, 0.0, -1.9073486328125e-05, -8.96453857421875e-05, -0.0002307891845703125, -3.62396240234375e-05, -0.000354766845703125, 0.0, -0.03444099426269531, -0.0001583099365234375, 0.0, -0.0007536407210864127, 0.0, -2.09808349609375e-05, -0.0003204345703125, -1.52587890625e-05, -2.2768930648453534e-05, -2.0265579223632812e-06, -0.0001010894775390625, -0.000881195068359375, -0.07552146911621094, -0.0001430511474609375, -9.5367431640625e-06, -0.000820159912109375, -9.34600830078125e-05, -0.02400684356689453, -4.57763671875e-05, -5.232825756072998, -1.9073486328125e-06], "score": -5.4052087071499955, "model_output": {"hole4": "player", "hole0": "BlessingOfMight", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Blessing of Might", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Might", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessing", " ", "of", " ", "Might", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "set_health_to", "<EOS>", "1", "<EOS>"], "score_history": [-0.000606536865234375, -0.0001678466796875, -7.903263758635148e-05, -5.3643991122953594e-05, -0.00018904806347563863, -3.814697265625e-06, -4.528352292254567e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.0002269744873046875, -4.00543212890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.0008716583251953125, -0.0001068115234375, -0.0001010894775390625, -0.0001220703125, -0.0011196136474609375, -6.079655122448457e-06, -0.0011365681421011686, -0.00011157965491292998, -0.00014221668243408203, -0.000740981544367969, -1.9073486328125e-06, -0.000156402587890625, -0.0003814697265625, -3.814697265625e-06, -0.0035066604614257812, -1.9073486328125e-06, -0.00010049335105577484, -1.9073486328125e-06, -0.024119993671774864, 0.0, -1.9073486328125e-05, -8.96453857421875e-05, -0.0002307891845703125, -3.62396240234375e-05, -0.000354766845703125, 0.0, -0.03444099426269531, -0.0001583099365234375, 0.0, -0.0007536407210864127, 0.0, -2.09808349609375e-05, -0.0003204345703125, -1.52587890625e-05, -2.2768930648453534e-05, -2.0265579223632812e-06, -0.0001010894775390625, -0.000881195068359375, -0.07552146911621094, -0.0001430511474609375, -9.5367431640625e-06, -0.000820159912109375, -9.34600830078125e-05, -5.1684794425964355, -0.0001201629638671875, -0.12108445912599564, 0.0], "score": -5.438012488480581, "model_output": {"hole4": "player", "hole0": "BlessingOfMight", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "set_health_to", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Blessing of Might", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Might", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessing", " ", "of", " ", "Might", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000606536865234375, -0.0001678466796875, -7.903263758635148e-05, -5.3643991122953594e-05, -0.00018904806347563863, -3.814697265625e-06, -4.528352292254567e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.0002269744873046875, -4.00543212890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.0008716583251953125, -0.0001068115234375, -0.0001010894775390625, -0.0001220703125, -0.0011196136474609375, -6.079655122448457e-06, -0.0011365681421011686, -0.00011157965491292998, -0.00014221668243408203, -0.000740981544367969, -1.9073486328125e-06, -0.000156402587890625, -0.0003814697265625, -3.814697265625e-06, -0.0035066604614257812, -1.9073486328125e-06, -0.00010049335105577484, -1.9073486328125e-06, -5.601159572601318, 0.0, -0.000125885009765625, -0.000560760498046875, -0.000274658203125, -9.5367431640625e-06, -0.0011997222900390625, 0.0, -0.022619247436523438, -0.000110626220703125, 0.0, -0.0011237856233492494, 0.0, -2.288818359375e-05, -0.000308990478515625, -1.33514404296875e-05, -2.2888118110131472e-05, -2.0265579223632812e-06, -0.000102996826171875, -0.000949859619140625, -0.0630331039428711, -0.00011444091796875, -9.5367431640625e-06, -0.000736236572265625, -8.7738037109375e-05, -0.02607119083404541, -5.91278076171875e-05, -0.012655043974518776, -3.814697265625e-06], "score": -5.741550568821822, "model_output": {"hole4": "player", "hole0": "BlessingOfMight", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Blessing of Might", "_type": "Str"}, {"_type": "Template60"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Might", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessing", " ", "of", " ", "Might", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 126, 155, 320, 65, 156, 41, "divine_shield", "<EOS>", 62], "score_history": [-0.000606536865234375, -0.0001678466796875, -7.903263758635148e-05, -5.3643991122953594e-05, -0.00018904806347563863, -3.814697265625e-06, -4.528352292254567e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.0002269744873046875, -4.00543212890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.0008716583251953125, -0.0001068115234375, -0.0001010894775390625, -0.0001220703125, -0.0011196136474609375, -6.079655122448457e-06, -0.0011365681421011686, -0.00011157965491292998, -0.00014221668243408203, -0.000740981544367969, -1.9073486328125e-06, -0.000156402587890625, -0.0003814697265625, -3.814697265625e-06, -0.0035066604614257812, -1.9073486328125e-06, -0.00010049335105577484, -1.9073486328125e-06, -0.024119993671774864, 0.0, -1.9073486328125e-05, -8.96453857421875e-05, -0.0002307891845703125, -3.62396240234375e-05, -0.000354766845703125, 0.0, -0.03444099426269531, -0.0001583099365234375, 0.0, -0.0007536407210864127, 0.0, -2.09808349609375e-05, -0.0003204345703125, -1.52587890625e-05, -2.2768930648453534e-05, -2.0265579223632812e-06, -0.0001010894775390625, -0.000881195068359375, -4.971891403198242, -2.09808349609375e-05, -2.09808349609375e-05, -0.3668203353881836, 0.0, -4.9591064453125e-05, -0.6738955974578857, -1.9073486328125e-06, -0.018770217895507812], "score": -6.103211760815157, "model_output": {"hole4": "player", "hole0": "BlessingOfMight", "hole6": [{"_type": "Template19"}, {"value": {"_type": "Template79"}, "targets": [{"attr": "divine_shield", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Blessing of Might", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.divine_shield = True\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Might", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessing", " ", "of", " ", "Might", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "increase_health", "<EOS>", "3", "<EOS>"], "score_history": [-0.000606536865234375, -0.0001678466796875, -7.903263758635148e-05, -5.3643991122953594e-05, -0.00018904806347563863, -3.814697265625e-06, -4.528352292254567e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.0002269744873046875, -4.00543212890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.0008716583251953125, -0.0001068115234375, -0.0001010894775390625, -0.0001220703125, -0.0011196136474609375, -6.079655122448457e-06, -0.0011365681421011686, -0.00011157965491292998, -0.00014221668243408203, -0.000740981544367969, -1.9073486328125e-06, -0.000156402587890625, -0.0003814697265625, -3.814697265625e-06, -0.0035066604614257812, -1.9073486328125e-06, -0.00010049335105577484, -1.9073486328125e-06, -0.024119993671774864, 0.0, -1.9073486328125e-05, -8.96453857421875e-05, -0.0002307891845703125, -3.62396240234375e-05, -0.000354766845703125, 0.0, -0.03444099426269531, -0.0001583099365234375, 0.0, -0.0007536407210864127, 0.0, -2.09808349609375e-05, -0.0003204345703125, -1.52587890625e-05, -2.2768930648453534e-05, -2.0265579223632812e-06, -0.0001010894775390625, -0.000881195068359375, -0.07552146911621094, -0.0001430511474609375, -9.5367431640625e-06, -0.000820159912109375, -9.34600830078125e-05, -5.867468357086182, -3.814697265625e-06, -0.1789461076259613, -1.9073486328125e-06], "score": -6.194748610552324, "model_output": {"hole4": "player", "hole0": "BlessingOfMight", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "increase_health", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Blessing of Might", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(3)\n"}, {"choice_history": [121, 200, "Blessing", "Of", "Might", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessing", " ", "of", " ", "Might", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 173, 21, 166, 17, 156, 50, "cards_played", "<EOS>", 317, 9, 320, 113, 333, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 40, "<UNK>", "<EOS>", 321, 65, 156, 50, "game", "<EOS>", 70, 180, 4, 229, "x", "<EOS>", 25, 186, "x", "<EOS>", 133, 173, 21, 166, 25, 186, "targets", "<EOS>", 317, 13, 320, 74, 187, "Null", "<EOS>", 333, 126, 155, 320, 73, 186, "target", "<EOS>", 20, 163, 17, 156, 17, 156, 50, "agent", "<EOS>", "<UNK>", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "target", "<EOS>", "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 25, 186, "minion", "<EOS>", "calculate_attack", "<EOS>", 110], "score_history": [-0.000606536865234375, -0.0001678466796875, -7.903263758635148e-05, -5.3643991122953594e-05, -0.00018904806347563863, -3.814697265625e-06, -4.528352292254567e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.0002269744873046875, -4.00543212890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.0008716583251953125, -0.0001068115234375, -0.0001010894775390625, -0.0001220703125, -0.0011196136474609375, -6.079655122448457e-06, -0.0011365681421011686, -0.00011157965491292998, -0.00014221668243408203, -0.000740981544367969, -1.9073486328125e-06, -0.000156402587890625, -0.0003814697265625, -3.814697265625e-06, -0.0035066604614257812, -1.9073486328125e-06, -0.00010049335105577484, -1.9073486328125e-06, -0.024119993671774864, 0.0, -1.9073486328125e-05, -8.96453857421875e-05, -0.0002307891845703125, -3.62396240234375e-05, -0.000354766845703125, 0.0, -0.03444099426269531, -0.0001583099365234375, 0.0, -0.0007536407210864127, 0.0, -2.09808349609375e-05, -0.0003204345703125, -1.52587890625e-05, -2.2768930648453534e-05, -2.0265579223632812e-06, -0.0001010894775390625, -0.000881195068359375, -4.018274307250977, -0.3457794189453125, -0.000942230224609375, -8.0108642578125e-05, -0.005017280578613281, 0.0, -0.10822200775146484, -0.6044472455978394, -6.4849853515625e-05, -0.0011005401611328125, -0.38891029357910156, -1.9073486328125e-06, -0.0003070831298828125, -0.05169677734375, -0.0005950927734375, -6.4849853515625e-05, -9.5367431640625e-06, -0.0001926422119140625, -1.1444091796875e-05, -0.28379058837890625, -9.5367431640625e-05, -0.0670766830444336, -0.0003719329833984375, -0.15750789642333984, -1.9073486328125e-05, -0.020363807678222656, -0.08738231658935547, -4.374980926513672e-05, -0.009122848510742188, -0.10590171813964844, -1.33514404296875e-05, -0.0010242462158203125, -0.007359445560723543, -3.576278118089249e-07, -0.14468669891357422, -0.000820159912109375, -0.000659942626953125, -0.0020198822021484375, -0.0012638568878173828, -3.814697265625e-06, -0.06368732452392578, -3.814697265625e-06, -0.004046794958412647, 0.0, -0.04135894775390625, -0.000446319580078125, -0.00617218017578125, -0.000316619873046875, -0.11744403839111328, 0.0, -0.32306039333343506, -3.933906555175781e-06, -0.0003204345703125, -0.6077613830566406, -1.9073486328125e-06, -8.58306884765625e-05, -0.0011768341064453125, -0.00026857852935791016, -7.62939453125e-06, -0.1652212142944336, -0.024351119995117188, -1.52587890625e-05, 0.0, -0.0012912750244140625, 0.0, -0.043300509452819824, 0.0, -0.002750396728515625, -0.0013141632080078125, -2.288818359375e-05, -1.52587890625e-05, -0.07082462310791016, 0.0, -0.09533309936523438, -0.5209721922874451, 0.0, -0.04744994267821312, -2.622604142743512e-06, -0.000133514404296875, -0.04988288879394531, -5.7220458984375e-06, -0.36155617237091064, 0.0, -0.0033817291259765625, -1.33514404296875e-05, -0.0005207061767578125, -1.1444091796875e-05, -0.007146954536437988, 0.0, -0.4393271803855896, 0.0, -0.003498077392578125, -0.9709568023681641, -0.0025730133056640625, -0.28813934326171875, 0.0, -0.0023469924926757812, -0.21818296611309052, -0.0001597282971488312, -7.62939453125e-06, -0.060863494873046875, -0.0010242462158203125, -0.0030498504638671875, -1.1444091796875e-05, -0.0024319887161254883, -1.9073486328125e-06, -1.1145139932632446, 0.0, -0.0003814697265625], "score": -12.156136241526099, "model_output": {"hole4": "player", "hole0": "BlessingOfMight", "hole6": [{"_type": "Template19"}, {"test": {"ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare", "left": {"attr": "cards_played", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "body": [{"value": {"func": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"body": {"_type": "Name", "id": "x"}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "x"}}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"test": {"ops": [{"_type": "IsNot"}], "comparators": [{"value": "Null", "_type": "NameConstant"}], "_type": "Compare", "left": {"_type": "Name", "id": "targets"}}, "body": [{"value": {"func": {"attr": "<UNK>", "value": {"attr": "agent", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "target"}], "_type": "Assign"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Name", "id": "minion"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "target"}}], "_type": "If"}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Blessing of Might", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.cards_played > 0:\n            targets = hearthbreaker.targeting.<UNK>(player.game, lambda x: x)\n            if targets is not Null:\n                target = player.agent.<UNK>(targets)\n                target.heal(player.effective_heal_power(minion.\n                    calculate_attack()), self)\n"}], "index": 11}
{"beams": [{"choice_history": [121, 198, "Bloodfen", "Raptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -0.007739320397377014, -0.004328066948801279, -1.1920928244535389e-07, -1.4304987416835502e-06, -3.933906555175781e-06, -8.988380432128906e-05, -0.000110626220703125, -0.0019378662109375, -0.00020599365234375, -0.0005162813467904925, -3.230565198464319e-05, -2.2649765014648438e-06, 0.0, -0.00030136111308820546, 0.0, -0.0009002685546875, -1.9073486328125e-06, -0.00012230873107910156, 0.0, -0.0001697540283203125, -0.0002918243408203125, -0.0002651214599609375, 0.0, -1.33514404296875e-05, 0.0, -0.0004998445510864258, 0.0, -3.62396240234375e-05, 0.0, -7.641315460205078e-05, 0.0, -3.0517578125e-05, -0.0021457672119140625, -9.5367431640625e-06, -1.8000580894295126e-05, 0.0, -7.843970524845645e-05, 0.0], "score": -0.019961173917174335, "model_output": {"hole4": "player", "hole0": "BloodfenRaptor", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bloodfen Raptor", "hole1": 2, "hole2": "FREE", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "<UNK>", "Raptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -4.869809150695801, -0.004328066948801279, -1.1920928244535389e-07, -1.4304987416835502e-06, -3.933906555175781e-06, -8.988380432128906e-05, -0.000110626220703125, -0.0019378662109375, -0.00020599365234375, -0.0005162813467904925, -3.230565198464319e-05, -2.2649765014648438e-06, 0.0, -0.00030136111308820546, 0.0, -0.0009002685546875, -1.9073486328125e-06, -0.00012230873107910156, 0.0, -0.0001697540283203125, -0.0002918243408203125, -0.0002651214599609375, 0.0, -1.33514404296875e-05, 0.0, -0.0004998445510864258, 0.0, -3.62396240234375e-05, 0.0, -7.641315460205078e-05, 0.0, -3.0517578125e-05, -0.0021457672119140625, -9.5367431640625e-06, -1.8000580894295126e-05, 0.0, -7.843970524845645e-05, 0.0], "score": -4.882031004215598, "model_output": {"hole4": "player", "hole0": "<UNK>Raptor", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bloodfen Raptor", "hole1": 2, "hole2": "FREE", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class <UNK>Raptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Bloodfen", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -0.007739320397377014, -5.459131717681885, -1.1920928244535389e-07, -1.4304987416835502e-06, -3.933906555175781e-06, -8.988380432128906e-05, -0.000110626220703125, -0.0019378662109375, -0.00020599365234375, -0.0005162813467904925, -3.230565198464319e-05, -2.2649765014648438e-06, 0.0, -0.00030136111308820546, 0.0, -0.0009002685546875, -1.9073486328125e-06, -0.00012230873107910156, 0.0, -0.0001697540283203125, -0.0002918243408203125, -0.0002651214599609375, 0.0, -1.33514404296875e-05, 0.0, -0.0004998445510864258, 0.0, -3.62396240234375e-05, 0.0, -7.641315460205078e-05, 0.0, -3.0517578125e-05, -0.0021457672119140625, -9.5367431640625e-06, -1.8000580894295126e-05, 0.0, -7.843970524845645e-05, 0.0], "score": -5.474764824650258, "model_output": {"hole4": "player", "hole0": "Bloodfen<UNK>", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bloodfen Raptor", "hole1": 2, "hole2": "FREE", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class Bloodfen<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Bloodfen", "Raptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -0.007739320397377014, -0.004328066948801279, -1.1920928244535389e-07, -1.4304987416835502e-06, -3.933906555175781e-06, -8.988380432128906e-05, -0.000110626220703125, -0.0019378662109375, -0.00020599365234375, -0.0005162813467904925, -3.230565198464319e-05, -2.2649765014648438e-06, 0.0, -0.00030136111308820546, 0.0, -7.481744766235352, 0.0, -0.00016415119171142578, 0.0, -0.000339508056640625, -0.0004673004150390625, -0.0002803802490234375, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.000446319580078125, 0.0, -4.1961669921875e-05, 0.0, -7.641315460205078e-05, 0.0, -2.6702880859375e-05, -0.001598358154296875, -7.62939453125e-06, -1.8119790183845907e-05, 0.0, -8.404254185734317e-05, -1.9073486328125e-06], "score": -7.500612790967345, "model_output": {"hole4": "player", "hole0": "BloodfenRaptor", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bloodfen Raptor", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Bloodfen", "Raptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -0.007739320397377014, -0.004328066948801279, -1.1920928244535389e-07, -1.4304987416835502e-06, -3.933906555175781e-06, -8.988380432128906e-05, -0.000110626220703125, -0.0019378662109375, -0.00020599365234375, -7.585515975952148, -3.230565198464319e-05, -2.2649765014648438e-06, 0.0, -0.00030136111308820546, 0.0, -0.0009002685546875, -1.9073486328125e-06, -0.00012230873107910156, 0.0, -0.0001697540283203125, -0.0002918243408203125, -0.0002651214599609375, 0.0, -1.33514404296875e-05, 0.0, -0.0004998445510864258, 0.0, -3.62396240234375e-05, 0.0, -7.641315460205078e-05, 0.0, -3.0517578125e-05, -0.0021457672119140625, -9.5367431640625e-06, -1.8000580894295126e-05, 0.0, -7.843970524845645e-05, 0.0], "score": -7.604960868522532, "model_output": {"hole4": "player", "hole0": "BloodfenRaptor", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "<UNK> Raptor", "hole1": 2, "hole2": "FREE", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Bloodfen", "Raptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "2", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -0.007739320397377014, -0.004328066948801279, -1.1920928244535389e-07, -1.4304987416835502e-06, -3.933906555175781e-06, -8.988380432128906e-05, -0.000110626220703125, -0.0019378662109375, -0.00020599365234375, -0.0005162813467904925, -3.230565198464319e-05, -2.2649765014648438e-06, 0.0, -0.00030136111308820546, 0.0, -0.0009002685546875, -1.9073486328125e-06, -0.00012230873107910156, 0.0, -0.0001697540283203125, -0.0002918243408203125, -0.0002651214599609375, 0.0, -1.33514404296875e-05, 0.0, -0.0004998445510864258, 0.0, -3.62396240234375e-05, 0.0, -7.641315460205078e-05, 0.0, -3.0517578125e-05, -6.234810829162598, -9.918212890625e-05, -7.152555099310121e-07, -5.960462772236497e-07, -2.9681843443540856e-05, -2.0265579223632812e-06, -0.0897209644317627, 0.0, -0.0080413818359375, -4.1961669921875e-05, -0.000713348388671875, -1.1444091796875e-05, -0.001434326171875, -0.0005435943603515625, -0.0008907318115234375, -0.289445698261261, -9.5367431640625e-06, -0.3611946105957031, -0.001007080078125, -0.00021529232617467642, -4.184246063232422e-05, -1.1563301086425781e-05, -6.4849853515625e-05, -1.9073486328125e-06, -0.00021183490753173828, -0.0005593299865722656, -3.814697265625e-06, -1.1444091796875e-05, -0.006011962890625, -9.1552734375e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.11272048950195312, -1.9073486328125e-06, -7.62939453125e-06, -0.8968429565429688], "score": -8.02252649733196, "model_output": {"hole4": "player", "hole0": "BloodfenRaptor", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bloodfen Raptor", "hole1": 2, "hole2": "FREE", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"hole1": {"_type": "Name", "id": "IsType"}, "hole2": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Template35", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 3}]}, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.BEAST)))])\n"}, {"choice_history": [121, 198, "Bloodfen", "Raptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bloodfen", " ", "Raptor", "<EOS>", "3", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -0.007739320397377014, -0.004328066948801279, -1.1920928244535389e-07, -1.4304987416835502e-06, -3.933906555175781e-06, -8.988380432128906e-05, -0.000110626220703125, -0.0019378662109375, -0.00020599365234375, -0.0005162813467904925, -3.230565198464319e-05, -2.2649765014648438e-06, 0.0, -8.112130165100098, 0.0, -0.0045108795166015625, 0.0, -0.0002671480178833008, 0.0, -0.0001316070556640625, -0.0003910064697265625, -0.0002613067626953125, 0.0, -1.52587890625e-05, 0.0, -0.0006638765335083008, 0.0, -4.1961669921875e-05, 0.0, -6.878376007080078e-05, 0.0, -3.0517578125e-05, -0.0023632049560546875, -7.62939453125e-06, -1.7762164134182967e-05, 0.0, -7.450579869328067e-05, 0.0], "score": -8.135976131317868, "model_output": {"hole4": "player", "hole0": "BloodfenRaptor", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bloodfen Raptor", "hole1": 3, "hole2": "FREE", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Bloodfen", "Raptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -0.007739320397377014, -0.004328066948801279, -1.1920928244535389e-07, -1.4304987416835502e-06, -3.933906555175781e-06, -8.988380432128906e-05, -0.000110626220703125, -0.0019378662109375, -0.00020599365234375, -0.0005162813467904925, -3.230565198464319e-05, -2.2649765014648438e-06, 0.0, -0.00030136111308820546, 0.0, -0.0009002685546875, -1.9073486328125e-06, -0.00012230873107910156, 0.0, -0.0001697540283203125, -0.0002918243408203125, -0.0002651214599609375, 0.0, -1.33514404296875e-05, 0.0, -8.142940521240234, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -2.682209014892578e-05, 0.0, -2.6702880859375e-05, -0.0011310577392578125, -9.5367431640625e-06, -1.561638418934308e-05, 0.0, -6.413458322640508e-05, 0.0], "score": -8.161305601961423, "model_output": {"hole4": "player", "hole0": "BloodfenRaptor", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bloodfen Raptor", "hole1": 2, "hole2": "FREE", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Bloodfen", "Raptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "2", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 320, 92, 254, "Aura", "<EOS>", 321, 88, 246, "1", "<EOS>", 68, 163, 57, 321, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -0.007739320397377014, -0.004328066948801279, -1.1920928244535389e-07, -1.4304987416835502e-06, -3.933906555175781e-06, -8.988380432128906e-05, -0.000110626220703125, -0.0019378662109375, -0.00020599365234375, -0.0005162813467904925, -3.230565198464319e-05, -2.2649765014648438e-06, 0.0, -0.00030136111308820546, 0.0, -0.0009002685546875, -1.9073486328125e-06, -0.00012230873107910156, 0.0, -0.0001697540283203125, -0.0002918243408203125, -0.0002651214599609375, 0.0, -1.33514404296875e-05, 0.0, -0.0004998445510864258, 0.0, -3.62396240234375e-05, 0.0, -7.641315460205078e-05, 0.0, -3.0517578125e-05, -6.234810829162598, -9.918212890625e-05, -7.152555099310121e-07, -5.960462772236497e-07, -2.9681843443540856e-05, -2.0265579223632812e-06, -0.0897209644317627, 0.0, -0.0080413818359375, -4.1961669921875e-05, -0.000713348388671875, -1.1444091796875e-05, -0.001434326171875, -0.0005435943603515625, -0.0008907318115234375, -0.289445698261261, -9.5367431640625e-06, -0.3611946105957031, -0.001007080078125, -0.00021529232617467642, -4.184246063232422e-05, -1.1563301086425781e-05, -6.4849853515625e-05, -1.9073486328125e-06, -0.00021183490753173828, -0.0005593299865722656, -3.814697265625e-06, -1.1444091796875e-05, -0.006011962890625, -9.1552734375e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.11272048950195312, -1.9073486328125e-06, -7.62939453125e-06, -0.5260009765625, -0.0004940032958984375, -0.09892749786376953, 0.0, -0.00545501708984375, -0.25421142578125, -0.002346038818359375, -0.02269887924194336, -1.1444091796875e-05, -0.32489585876464844, -0.0024127960205078125, -0.030500411987304688, -0.001773834228515625, -0.002140045166015625, -0.01526641845703125, -0.00023651123046875, -3.814697265625e-06, -0.009070632979273796, -0.0025092249270528555, -2.3841855067985307e-07, -2.09808349609375e-05, -0.008777618408203125, -2.47955322265625e-05, -8.96453857421875e-05, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -0.41307926177978516, -7.62939453125e-06, -0.006913185119628906, -2.6702880859375e-05, -0.0047607421875, -1.9073486328125e-06, -3.0517578125e-05, -3.814697265625e-06, -4.76837158203125e-05], "score": -8.858529906797706, "model_output": {"hole4": "player", "hole0": "BloodfenRaptor", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bloodfen Raptor", "hole1": 2, "hole2": "FREE", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"hole1": {"_type": "Name", "id": "IsType"}, "hole2": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Template35", "hole0": "MinionSelector"}], "hole2": [{"hole1": [{"_type": "Template40", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45_expr_seq", "hole0": "Aura"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 3}]}, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.BEAST))), Aura(ChangeHealth(1),\n            MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer()))])\n"}, {"choice_history": [121, 198, "Bloodfen", "Raptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "2", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 68, 163, 57, 321, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -0.007739320397377014, -0.004328066948801279, -1.1920928244535389e-07, -1.4304987416835502e-06, -3.933906555175781e-06, -8.988380432128906e-05, -0.000110626220703125, -0.0019378662109375, -0.00020599365234375, -0.0005162813467904925, -3.230565198464319e-05, -2.2649765014648438e-06, 0.0, -0.00030136111308820546, 0.0, -0.0009002685546875, -1.9073486328125e-06, -0.00012230873107910156, 0.0, -0.0001697540283203125, -0.0002918243408203125, -0.0002651214599609375, 0.0, -1.33514404296875e-05, 0.0, -0.0004998445510864258, 0.0, -3.62396240234375e-05, 0.0, -7.641315460205078e-05, 0.0, -3.0517578125e-05, -6.234810829162598, -9.918212890625e-05, -7.152555099310121e-07, -5.960462772236497e-07, -2.9681843443540856e-05, -2.0265579223632812e-06, -0.0897209644317627, 0.0, -0.0080413818359375, -4.1961669921875e-05, -0.000713348388671875, -1.1444091796875e-05, -0.001434326171875, -0.0005435943603515625, -0.0008907318115234375, -0.289445698261261, -9.5367431640625e-06, -1.3904485702514648, -0.0540618896484375, -0.0046634674072265625, -0.007427215576171875, -0.009551048278808594, -0.012250900268554688, -0.0002269744873046875, -3.814697265625e-06, -0.0005570573848672211, -0.004824675153940916, -1.5497195136049413e-06, -7.82012939453125e-05, -0.020374298095703125, -6.67572021484375e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.000293731689453125, -9.5367431640625e-06, -0.08323705196380615, -7.62939453125e-06, -0.00251007080078125, -4.9591064453125e-05, -0.0006453990936279297, -5.7220458984375e-06, -1.52587890625e-05, -1.33514404296875e-05, -0.9370613098144531], "score": -9.17191722362275, "model_output": {"hole4": "player", "hole0": "BloodfenRaptor", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bloodfen Raptor", "hole1": 2, "hole2": "FREE", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 3}]}, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MURLOC), BothPlayer()))])\n"}, {"choice_history": [121, 198, "Bloodfen", "Raptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "FREE", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -0.007739320397377014, -0.004328066948801279, -1.1920928244535389e-07, -1.4304987416835502e-06, -3.933906555175781e-06, -8.988380432128906e-05, -0.000110626220703125, -0.0019378662109375, -0.00020599365234375, -0.0005162813467904925, -3.230565198464319e-05, -2.2649765014648438e-06, 0.0, -0.00030136111308820546, 0.0, -0.0009002685546875, -1.9073486328125e-06, -9.16922664642334, -3.814697265625e-06, -0.0001583099365234375, -0.0002117156982421875, -0.005658149719238281, 0.0, -4.57763671875e-05, 0.0, -0.0004254579544067383, 0.0, -2.09808349609375e-05, 0.0, -5.364418029785156e-05, 0.0, -4.38690185546875e-05, -0.00244903564453125, -9.5367431640625e-06, -1.8596623704070225e-05, 0.0, -8.594989049015567e-05, 0.0], "score": -9.194615538499413, "model_output": {"hole4": "player", "hole0": "BloodfenRaptor", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bloodfen Raptor", "hole1": 2, "hole2": "FREE", "_type": "Template10", "hole3": "FREE"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, FREE=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Bloodfen", "Raptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -0.007739320397377014, -0.004328066948801279, -1.1920928244535389e-07, -1.4304987416835502e-06, -3.933906555175781e-06, -8.988380432128906e-05, -0.000110626220703125, -0.0019378662109375, -0.00020599365234375, -0.0005162813467904925, -3.230565198464319e-05, -2.2649765014648438e-06, 0.0, -0.00030136111308820546, 0.0, -0.0009002685546875, -1.9073486328125e-06, -0.00012230873107910156, 0.0, -9.176488876342773, -0.0013942718505859375, -1.9073486328125e-06, -1.77621805050876e-05, 0.0, -0.0005092620849609375, -0.012556076049804688, -9.5367431640625e-06, -6.675716122117592e-06, 0.0, -4.017351966467686e-05, 0.0], "score": -9.207350905334799, "model_output": {"hole4": "player", "hole0": "BloodfenRaptor", "hole1": "MinionCard", "hole2": [{"hole4": {"_type": "Template53"}, "hole0": "Bloodfen Raptor", "hole1": 2, "hole2": "FREE", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Bloodfen", "Raptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "2", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 68, 163, 57, 321, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 92, 254, "Aura", "<EOS>", 321, 88, 246, "1", "<EOS>", 68, 163, 57, 321, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -0.007739320397377014, -0.004328066948801279, -1.1920928244535389e-07, -1.4304987416835502e-06, -3.933906555175781e-06, -8.988380432128906e-05, -0.000110626220703125, -0.0019378662109375, -0.00020599365234375, -0.0005162813467904925, -3.230565198464319e-05, -2.2649765014648438e-06, 0.0, -0.00030136111308820546, 0.0, -0.0009002685546875, -1.9073486328125e-06, -0.00012230873107910156, 0.0, -0.0001697540283203125, -0.0002918243408203125, -0.0002651214599609375, 0.0, -1.33514404296875e-05, 0.0, -0.0004998445510864258, 0.0, -3.62396240234375e-05, 0.0, -7.641315460205078e-05, 0.0, -3.0517578125e-05, -6.234810829162598, -9.918212890625e-05, -7.152555099310121e-07, -5.960462772236497e-07, -2.9681843443540856e-05, -2.0265579223632812e-06, -0.0897209644317627, 0.0, -0.0080413818359375, -4.1961669921875e-05, -0.000713348388671875, -1.1444091796875e-05, -0.001434326171875, -0.0005435943603515625, -0.0008907318115234375, -0.289445698261261, -9.5367431640625e-06, -1.3904485702514648, -0.0540618896484375, -0.0046634674072265625, -0.007427215576171875, -0.009551048278808594, -0.012250900268554688, -0.0002269744873046875, -3.814697265625e-06, -0.0005570573848672211, -0.004824675153940916, -1.5497195136049413e-06, -7.82012939453125e-05, -0.020374298095703125, -6.67572021484375e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.000293731689453125, -9.5367431640625e-06, -0.08323705196380615, -7.62939453125e-06, -0.00251007080078125, -4.9591064453125e-05, -0.0006453990936279297, -5.7220458984375e-06, -1.52587890625e-05, -1.33514404296875e-05, -0.5020265579223633, -0.000316619873046875, -0.03108036518096924, -3.814697265625e-06, -0.0011196136474609375, -0.25267791748046875, -0.0047512054443359375, -0.013368605636060238, -6.103515625e-05, -0.009416580200195312, -0.0244140625, -0.018278121948242188, -0.0057201385498046875, -0.000415802001953125, -0.026433944702148438, -0.000476837158203125, -1.9073486328125e-06, -0.001018999028019607, -0.0018139841267839074, -2.3841855067985307e-07, -2.288818359375e-05, -0.010347366333007812, -2.86102294921875e-05, -6.103515625e-05, -1.9073486328125e-06, -0.0003910064697265625, -1.9073486328125e-06, -0.08580899238586426, -9.5367431640625e-06, -0.001834869384765625, -2.6702880859375e-05, -0.0008642673492431641, -3.814697265625e-06, -1.9073486328125e-05, -1.9073486328125e-06, -5.14984130859375e-05], "score": -9.227727648587596, "model_output": {"hole4": "player", "hole0": "BloodfenRaptor", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bloodfen Raptor", "hole1": 2, "hole2": "FREE", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"hole1": [{"_type": "Template40", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45_expr_seq", "hole0": "Aura"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 3}]}, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MURLOC), BothPlayer())), Aura(ChangeHealth(1\n            ), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer()))])\n"}, {"choice_history": [121, 198, "Bloodfen", "Raptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bloodfen", " ", "Raptor", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 97, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "2", "<EOS>"], "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -0.007739320397377014, -0.004328066948801279, -1.1920928244535389e-07, -1.4304987416835502e-06, -3.933906555175781e-06, -8.988380432128906e-05, -0.000110626220703125, -6.269244194030762, -0.0001316070556640625, -5.7220458984375e-06, -0.0653076171875, -9.918212890625e-05, -0.0003814697265625, -7.62939453125e-06, -2.288818359375e-05, -0.00010430288239149377, -1.7881393432617188e-05, -0.0018441422143951058, 0.0, -0.41991710662841797, -0.00084686279296875, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -5.14984130859375e-05, 0.0, -0.7790290117263794, 0.0, -1.0899991989135742, -6.4849853515625e-05, -0.7215890884399414, -0.0009765625, -0.0005016326904296875, 0.0, -4.1961669921875e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0001678466796875, -0.009975433349609375, -1.33514404296875e-05, -1.1086437552876305e-05, 0.0, -5.25712821399793e-05, 0.0], "score": -9.372727671111527, "model_output": {"hole4": "player", "hole0": "BloodfenRaptor", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Bloodfen Raptor", "_type": "Str"}, {"_type": "Template67"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}, {"choice_history": [121, 198, "Bloodfen", "Raptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -0.007739320397377014, -0.004328066948801279, -1.1920928244535389e-07, -1.4304987416835502e-06, -3.933906555175781e-06, -8.988380432128906e-05, -0.000110626220703125, -0.0019378662109375, -0.00020599365234375, -0.0005162813467904925, -3.230565198464319e-05, -2.2649765014648438e-06, 0.0, -0.00030136111308820546, 0.0, -0.0009002685546875, -1.9073486328125e-06, -0.00012230873107910156, 0.0, -0.0001697540283203125, -0.0002918243408203125, -0.0002651214599609375, 0.0, -1.33514404296875e-05, 0.0, -0.0004998445510864258, 0.0, -3.62396240234375e-05, 0.0, -7.641315460205078e-05, 0.0, -3.0517578125e-05, -0.0021457672119140625, -9.5367431640625e-06, -1.8000580894295126e-05, 0.0, -9.512751579284668, 0.0], "score": -9.532634313496594, "model_output": {"hole4": "player", "hole0": "BloodfenRaptor", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bloodfen Raptor", "hole1": 2, "hole2": "FREE", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "_type": "Template32", "hole0": 3}]}, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n"}], "index": 12}
{"beams": [{"choice_history": [121, 200, "Bloodlust", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000240325927734375, -0.0001163482666015625, -0.00038211196078918874, -1.3232229321147315e-05, -2.0965933799743652e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.000385284423828125, -0.0007915496826171875, -0.0009288447326980531, -8.20159912109375e-05, -0.0004213159263599664, -7.05718994140625e-05, -0.020303726196289062, -3.814697265625e-06, -0.001003265380859375, 0.0, -0.00042736477917060256, 0.0, -0.0003452301025390625, -0.000133514404296875, -0.000213623046875, -0.00011813575110863894, -1.9073486328125e-06, -0.00372314453125, -0.0021877288818359375, -0.0007419586181640625, -1.33514404296875e-05, -0.00019073486328125, -3.814697265625e-06, -0.00021779535745736212, -2.0265579223632812e-06, -0.0006542205810546875, -1.33514404296875e-05, -0.00116729736328125, -0.002779960399493575, -3.814697265625e-06, -3.24249267578125e-05, -0.0006465911865234375, -9.918212890625e-05, -0.000179290771484375, -0.000743865966796875, -9.5367431640625e-06, -7.62939453125e-06, -0.0026750564575195312, -5.7220458984375e-06, -0.014490127563476562, 0.0, -0.0006051063537597656, -2.6702880859375e-05], "score": -0.05728652703510306, "model_output": {"hole4": "player", "hole0": "Bloodlust", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "change_temp_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "SHAMAN", "_type": "Template14", "hole0": "Bloodlust"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n"}, {"choice_history": [121, 200, "Bloodlust", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Bloodlust", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000240325927734375, -0.0001163482666015625, -0.00038211196078918874, -1.3232229321147315e-05, -2.0965933799743652e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.000385284423828125, -0.0007915496826171875, -0.0009288447326980531, -8.20159912109375e-05, -0.0004213159263599664, -7.05718994140625e-05, -4.372869491577148, 0.0, -0.0006103515625, 0.0, -0.0001834630238590762, 0.0, -0.0001983642578125, -9.1552734375e-05, -0.000156402587890625, -6.318069790722802e-05, -1.9073486328125e-06, -0.0063724517822265625, -0.00353240966796875, -0.0010051727294921875, -1.33514404296875e-05, -0.0001354217529296875, -3.814697265625e-06, -0.00031924244831316173, -2.0265579223632812e-06, -0.0005474090576171875, -1.33514404296875e-05, -0.0012454986572265625, -0.0037553308065980673, -1.9073486328125e-06, -3.814697265625e-05, -0.000652313232421875, -0.0001087188720703125, -0.0001926422119140625, -0.0007190704345703125, -9.5367431640625e-06, -7.62939453125e-06, -0.0026264190673828125, -5.7220458984375e-06, -0.013644218444824219, 0.0, -0.0005968809127807617, -2.6702880859375e-05], "score": -4.413265612869509, "model_output": {"hole4": "player", "hole0": "Bloodlust", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "change_temp_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "DRUID", "_type": "Template14", "hole0": "Bloodlust"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.DRUID, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n"}, {"choice_history": [121, 200, "Bloodlust", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "set_health_to", "<EOS>", "3", "<EOS>"], "score_history": [-0.000240325927734375, -0.0001163482666015625, -0.00038211196078918874, -1.3232229321147315e-05, -2.0965933799743652e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.000385284423828125, -0.0007915496826171875, -0.0009288447326980531, -8.20159912109375e-05, -0.0004213159263599664, -7.05718994140625e-05, -0.020303726196289062, -3.814697265625e-06, -0.001003265380859375, 0.0, -0.00042736477917060256, 0.0, -0.0003452301025390625, -0.000133514404296875, -0.000213623046875, -0.00011813575110863894, -1.9073486328125e-06, -0.00372314453125, -0.0021877288818359375, -0.0007419586181640625, -1.33514404296875e-05, -0.00019073486328125, -3.814697265625e-06, -0.00021779535745736212, -2.0265579223632812e-06, -0.0006542205810546875, -1.33514404296875e-05, -0.00116729736328125, -0.002779960399493575, -3.814697265625e-06, -3.24249267578125e-05, -0.0006465911865234375, -9.918212890625e-05, -0.000179290771484375, -0.000743865966796875, -9.5367431640625e-06, -7.62939453125e-06, -0.0026750564575195312, -5.7220458984375e-06, -5.844278335571289, 0.0, -0.009287189692258835, -1.9073486328125e-05], "score": -5.895749188986883, "model_output": {"hole4": "player", "hole0": "Bloodlust", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "set_health_to", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "SHAMAN", "_type": "Template14", "hole0": "Bloodlust"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.set_health_to(3)\n"}, {"choice_history": [121, 200, "Bloodlust", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Bloodlust", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000240325927734375, -0.0001163482666015625, -0.00038211196078918874, -1.3232229321147315e-05, -2.0965933799743652e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.000385284423828125, -0.0007915496826171875, -0.0009288447326980531, -8.20159912109375e-05, -0.0004213159263599664, -7.05718994140625e-05, -5.949323654174805, -9.5367431640625e-06, -0.000179290771484375, 0.0, -0.00022399333829525858, 0.0, -0.000335693359375, -0.0001678466796875, -0.0002803802490234375, -8.845324191497639e-05, -1.9073486328125e-06, -0.0062694549560546875, -0.0030689239501953125, -0.0008907318115234375, -1.33514404296875e-05, -0.00017547607421875, -5.7220458984375e-06, -0.00026893612812273204, -2.0265579223632812e-06, -0.0005855560302734375, -1.33514404296875e-05, -0.000965118408203125, -0.0034116501919925213, -1.9073486328125e-06, -3.62396240234375e-05, -0.000640869140625, -8.20159912109375e-05, -0.000179290771484375, -0.0006961822509765625, -1.1444091796875e-05, -7.62939453125e-06, -0.0026960372924804688, -5.7220458984375e-06, -0.013823509216308594, 0.0, -0.0006052255630493164, -2.6702880859375e-05], "score": -5.988609340032781, "model_output": {"hole4": "player", "hole0": "Bloodlust", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "change_temp_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "ROGUE", "_type": "Template14", "hole0": "Bloodlust"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n"}, {"choice_history": [121, 200, "Bloodlust", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "hero", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000240325927734375, -0.0001163482666015625, -0.00038211196078918874, -1.3232229321147315e-05, -2.0965933799743652e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.000385284423828125, -0.0007915496826171875, -0.0009288447326980531, -8.20159912109375e-05, -0.0004213159263599664, -7.05718994140625e-05, -0.020303726196289062, -3.814697265625e-06, -0.001003265380859375, 0.0, -0.00042736477917060256, 0.0, -0.0003452301025390625, -0.000133514404296875, -0.000213623046875, -0.00011813575110863894, -1.9073486328125e-06, -0.00372314453125, -0.0021877288818359375, -0.0007419586181640625, -1.33514404296875e-05, -0.00019073486328125, -3.814697265625e-06, -0.00021779535745736212, -2.0265579223632812e-06, -0.0006542205810546875, -1.33514404296875e-05, -0.00116729736328125, -5.950985908508301, -5.7220458984375e-06, -0.00383758544921875, -0.013163566589355469, -4.38690185546875e-05, -0.012703895568847656, -0.000232696533203125, -1.52587890625e-05, -5.7220458984375e-06, -0.0008945465087890625, -1.52587890625e-05, -0.0065593719482421875, 0.0, -0.0006204843521118164, -2.09808349609375e-05], "score": -6.0240863825001725, "model_output": {"hole4": "player", "hole0": "Bloodlust", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "change_temp_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "SHAMAN", "_type": "Template14", "hole0": "Bloodlust"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.hero:\n            minion.change_temp_attack(3)\n"}, {"choice_history": [121, 200, "Bloodlust", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Bloodlust", "<EOS>", "5", "<EOS>", "TOTEM", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000240325927734375, -0.0001163482666015625, -0.00038211196078918874, -1.3232229321147315e-05, -2.0965933799743652e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.000385284423828125, -0.0007915496826171875, -0.0009288447326980531, -8.20159912109375e-05, -0.0004213159263599664, -7.05718994140625e-05, -6.391084671020508, -1.9073486328125e-06, -0.00081634521484375, 0.0, -0.00025105432723648846, 0.0, -0.0004367828369140625, -0.0002193450927734375, -0.0003261566162109375, -8.749940025154501e-05, -1.9073486328125e-06, -0.004497528076171875, -0.002307891845703125, -0.0006885528564453125, -1.1444091796875e-05, -0.0001087188720703125, -5.7220458984375e-06, -0.00034022328327409923, -2.0265579223632812e-06, -0.0006389617919921875, -1.33514404296875e-05, -0.0009975433349609375, -0.0024824137799441814, -1.9073486328125e-06, -3.24249267578125e-05, -0.0006866455078125, -8.96453857421875e-05, -0.000179290771484375, -0.0007114410400390625, -1.1444091796875e-05, -7.62939453125e-06, -0.0027217864990234375, -5.7220458984375e-06, -0.014308929443359375, 0.0, -0.0006033182144165039, -2.6702880859375e-05], "score": -6.428222444212224, "model_output": {"hole4": "player", "hole0": "Bloodlust", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "change_temp_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "TOTEM", "_type": "Template14", "hole0": "Bloodlust"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.TOTEM, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n"}, {"choice_history": [121, 200, "Bloodlust", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Bloodlust", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000240325927734375, -0.0001163482666015625, -0.00038211196078918874, -1.3232229321147315e-05, -2.0965933799743652e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.000385284423828125, -0.0007915496826171875, -0.0009288447326980531, -8.20159912109375e-05, -0.0004213159263599664, -7.05718994140625e-05, -6.417093276977539, -2.6702880859375e-05, -0.001220703125, 0.0, -0.0005880593089386821, 0.0, -0.00012969970703125, -8.96453857421875e-05, -0.0001506805419921875, -0.00014841453230474144, -1.9073486328125e-06, -0.007503509521484375, -0.008092880249023438, -0.001007080078125, -2.09808349609375e-05, -0.0001201629638671875, -9.5367431640625e-06, -0.00041759011219255626, -2.0265579223632812e-06, -0.00058746337890625, -1.33514404296875e-05, -0.00086212158203125, -0.0034980769269168377, -1.9073486328125e-06, -3.814697265625e-05, -0.0006542205810546875, -8.7738037109375e-05, -0.00018310546875, -0.0006847381591796875, -9.5367431640625e-06, -7.62939453125e-06, -0.0027618408203125, -5.7220458984375e-06, -0.013897895812988281, 0.0, -0.000601649284362793, -2.6702880859375e-05], "score": -6.464060213225821, "model_output": {"hole4": "player", "hole0": "Bloodlust", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "change_temp_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "PALADIN", "_type": "Template14", "hole0": "Bloodlust"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n"}, {"choice_history": [121, 200, "Bloodlust", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "heal", "<EOS>", "3", "<EOS>"], "score_history": [-0.000240325927734375, -0.0001163482666015625, -0.00038211196078918874, -1.3232229321147315e-05, -2.0965933799743652e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.000385284423828125, -0.0007915496826171875, -0.0009288447326980531, -8.20159912109375e-05, -0.0004213159263599664, -7.05718994140625e-05, -0.020303726196289062, -3.814697265625e-06, -0.001003265380859375, 0.0, -0.00042736477917060256, 0.0, -0.0003452301025390625, -0.000133514404296875, -0.000213623046875, -0.00011813575110863894, -1.9073486328125e-06, -0.00372314453125, -0.0021877288818359375, -0.0007419586181640625, -1.33514404296875e-05, -0.00019073486328125, -3.814697265625e-06, -0.00021779535745736212, -2.0265579223632812e-06, -0.0006542205810546875, -1.33514404296875e-05, -0.00116729736328125, -0.002779960399493575, -3.814697265625e-06, -3.24249267578125e-05, -0.0006465911865234375, -9.918212890625e-05, -0.000179290771484375, -0.000743865966796875, -9.5367431640625e-06, -7.62939453125e-06, -0.0026750564575195312, -5.7220458984375e-06, -6.537320613861084, -2.288818359375e-05, -0.0068361759185791016, -1.33514404296875e-05], "score": -6.586357619640694, "model_output": {"hole4": "player", "hole0": "Bloodlust", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "heal", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "SHAMAN", "_type": "Template14", "hole0": "Bloodlust"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.heal(3)\n"}, {"choice_history": [121, 200, "Bloodlust", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "i", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000240325927734375, -0.0001163482666015625, -0.00038211196078918874, -1.3232229321147315e-05, -2.0965933799743652e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.000385284423828125, -0.0007915496826171875, -0.0009288447326980531, -8.20159912109375e-05, -0.0004213159263599664, -7.05718994140625e-05, -0.020303726196289062, -3.814697265625e-06, -0.001003265380859375, 0.0, -0.00042736477917060256, 0.0, -0.0003452301025390625, -0.000133514404296875, -0.000213623046875, -0.00011813575110863894, -1.9073486328125e-06, -0.00372314453125, -0.0021877288818359375, -0.0007419586181640625, -1.33514404296875e-05, -0.00019073486328125, -3.814697265625e-06, -0.00021779535745736212, -2.0265579223632812e-06, -0.0006542205810546875, -1.33514404296875e-05, -0.00116729736328125, -0.002779960399493575, -3.814697265625e-06, -3.24249267578125e-05, -0.0006465911865234375, -9.918212890625e-05, -0.000179290771484375, -0.000743865966796875, -9.5367431640625e-06, -7.62939453125e-06, -6.540857315063477, -0.001026153564453125, -0.020391464233398438, -1.9073486328125e-06, -0.0014356374740600586, -2.47955322265625e-05], "score": -6.603221084949837, "model_output": {"hole4": "player", "hole0": "Bloodlust", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "change_temp_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "i"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "SHAMAN", "_type": "Template14", "hole0": "Bloodlust"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            i.change_temp_attack(3)\n"}, {"choice_history": [121, 200, "Bloodlust", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "enrage", "<EOS>", "3", "<EOS>"], "score_history": [-0.000240325927734375, -0.0001163482666015625, -0.00038211196078918874, -1.3232229321147315e-05, -2.0965933799743652e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.000385284423828125, -0.0007915496826171875, -0.0009288447326980531, -8.20159912109375e-05, -0.0004213159263599664, -7.05718994140625e-05, -0.020303726196289062, -3.814697265625e-06, -0.001003265380859375, 0.0, -0.00042736477917060256, 0.0, -0.0003452301025390625, -0.000133514404296875, -0.000213623046875, -0.00011813575110863894, -1.9073486328125e-06, -0.00372314453125, -0.0021877288818359375, -0.0007419586181640625, -1.33514404296875e-05, -0.00019073486328125, -3.814697265625e-06, -0.00021779535745736212, -2.0265579223632812e-06, -0.0006542205810546875, -1.33514404296875e-05, -0.00116729736328125, -0.002779960399493575, -3.814697265625e-06, -3.24249267578125e-05, -0.0006465911865234375, -9.918212890625e-05, -0.000179290771484375, -0.000743865966796875, -9.5367431640625e-06, -7.62939453125e-06, -0.0026750564575195312, -5.7220458984375e-06, -6.813815116882324, -7.62939453125e-06, -0.003616451984271407, -1.9073486328125e-05], "score": -6.859622861984462, "model_output": {"hole4": "player", "hole0": "Bloodlust", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "enrage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "SHAMAN", "_type": "Template14", "hole0": "Bloodlust"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.enrage(3)\n"}, {"choice_history": [121, 200, "Bloodlust", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>", 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000240325927734375, -0.0001163482666015625, -0.00038211196078918874, -1.3232229321147315e-05, -2.0965933799743652e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.000385284423828125, -0.0007915496826171875, -0.0009288447326980531, -8.20159912109375e-05, -0.0004213159263599664, -7.05718994140625e-05, -0.020303726196289062, -3.814697265625e-06, -0.001003265380859375, 0.0, -0.00042736477917060256, 0.0, -0.0003452301025390625, -0.000133514404296875, -0.000213623046875, -0.00011813575110863894, -1.9073486328125e-06, -6.602242469787598, -0.014460563659667969, -0.005311012268066406, -4.9591064453125e-05, -0.00070953369140625, -1.9073486328125e-06, -4.720687138615176e-05, -7.748603820800781e-06, -0.000667572021484375, -7.62939453125e-06, -0.000957489013671875, -0.003103493480011821, -3.814697265625e-06, -3.4332275390625e-05, -0.0006465911865234375, -0.0002841949462890625, -0.0004119873046875, -0.0006732940673828125, -2.47955322265625e-05, -5.7220458984375e-06, -0.000621795654296875, -1.71661376953125e-05, -0.009889602661132812, 0.0, -0.0007528066635131836, -2.6702880859375e-05, -0.06171131134033203, -0.0006732940673828125, -0.0001354217529296875, -9.5367431640625e-05, -0.18949413299560547, 0.0, -0.009833335876464844, -1.9073486328125e-06, -0.021303176879882812, 0.0, -0.0014986991882324219, -2.09808349609375e-05], "score": -6.951792742160251, "model_output": {"hole4": "player", "hole0": "Bloodlust", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "change_temp_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"value": {"hole1": "change_temp_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "SHAMAN", "_type": "Template14", "hole0": "Bloodlust"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n        minion.change_temp_attack(3)\n"}, {"choice_history": [121, 200, "Bloodlust", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "increase_armor", "<EOS>", "3", "<EOS>"], "score_history": [-0.000240325927734375, -0.0001163482666015625, -0.00038211196078918874, -1.3232229321147315e-05, -2.0965933799743652e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.000385284423828125, -0.0007915496826171875, -0.0009288447326980531, -8.20159912109375e-05, -0.0004213159263599664, -7.05718994140625e-05, -0.020303726196289062, -3.814697265625e-06, -0.001003265380859375, 0.0, -0.00042736477917060256, 0.0, -0.0003452301025390625, -0.000133514404296875, -0.000213623046875, -0.00011813575110863894, -1.9073486328125e-06, -0.00372314453125, -0.0021877288818359375, -0.0007419586181640625, -1.33514404296875e-05, -0.00019073486328125, -3.814697265625e-06, -0.00021779535745736212, -2.0265579223632812e-06, -0.0006542205810546875, -1.33514404296875e-05, -0.00116729736328125, -0.002779960399493575, -3.814697265625e-06, -3.24249267578125e-05, -0.0006465911865234375, -9.918212890625e-05, -0.000179290771484375, -0.000743865966796875, -9.5367431640625e-06, -7.62939453125e-06, -0.0026750564575195312, -5.7220458984375e-06, -6.9209113121032715, 0.0, -0.014149075374007225, -1.71661376953125e-05], "score": -6.977242143851981, "model_output": {"hole4": "player", "hole0": "Bloodlust", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "increase_armor", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "SHAMAN", "_type": "Template14", "hole0": "Bloodlust"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.increase_armor(3)\n"}, {"choice_history": [121, 200, "Bloodlust", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "deathrattle", "<EOS>", "3", "<EOS>"], "score_history": [-0.000240325927734375, -0.0001163482666015625, -0.00038211196078918874, -1.3232229321147315e-05, -2.0965933799743652e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.000385284423828125, -0.0007915496826171875, -0.0009288447326980531, -8.20159912109375e-05, -0.0004213159263599664, -7.05718994140625e-05, -0.020303726196289062, -3.814697265625e-06, -0.001003265380859375, 0.0, -0.00042736477917060256, 0.0, -0.0003452301025390625, -0.000133514404296875, -0.000213623046875, -0.00011813575110863894, -1.9073486328125e-06, -0.00372314453125, -0.0021877288818359375, -0.0007419586181640625, -1.33514404296875e-05, -0.00019073486328125, -3.814697265625e-06, -0.00021779535745736212, -2.0265579223632812e-06, -0.0006542205810546875, -1.33514404296875e-05, -0.00116729736328125, -0.002779960399493575, -3.814697265625e-06, -3.24249267578125e-05, -0.0006465911865234375, -9.918212890625e-05, -0.000179290771484375, -0.000743865966796875, -9.5367431640625e-06, -7.62939453125e-06, -0.0026750564575195312, -5.7220458984375e-06, -7.037888050079346, -0.00473785400390625, -0.00811755657196045, -2.47955322265625e-05], "score": -7.092932846424446, "model_output": {"hole4": "player", "hole0": "Bloodlust", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "deathrattle", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "SHAMAN", "_type": "Template14", "hole0": "Bloodlust"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.deathrattle(3)\n"}, {"choice_history": [121, 200, "Bloodlust", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "<UNK>", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000240325927734375, -0.0001163482666015625, -0.00038211196078918874, -1.3232229321147315e-05, -2.0965933799743652e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.000385284423828125, -0.0007915496826171875, -7.127391815185547, -8.20159912109375e-05, -0.0004213159263599664, -7.05718994140625e-05, -0.020303726196289062, -3.814697265625e-06, -0.001003265380859375, 0.0, -0.00042736477917060256, 0.0, -0.0003452301025390625, -0.000133514404296875, -0.000213623046875, -0.00011813575110863894, -1.9073486328125e-06, -0.00372314453125, -0.0021877288818359375, -0.0007419586181640625, -1.33514404296875e-05, -0.00019073486328125, -3.814697265625e-06, -0.00021779535745736212, -2.0265579223632812e-06, -0.0006542205810546875, -1.33514404296875e-05, -0.00116729736328125, -0.002779960399493575, -3.814697265625e-06, -3.24249267578125e-05, -0.0006465911865234375, -9.918212890625e-05, -0.000179290771484375, -0.000743865966796875, -9.5367431640625e-06, -7.62939453125e-06, -0.0026750564575195312, -5.7220458984375e-06, -0.014490127563476562, 0.0, -0.0006051063537597656, -2.6702880859375e-05], "score": -7.183749497487952, "model_output": {"hole4": "player", "hole0": "Bloodlust", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "change_temp_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "SHAMAN", "_type": "Template14", "hole0": "<UNK>"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK>', 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON\n            )\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n"}, {"choice_history": [121, 200, "Bloodlust", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>", 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>", 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.000240325927734375, -0.0001163482666015625, -0.00038211196078918874, -1.3232229321147315e-05, -2.0965933799743652e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.000385284423828125, -0.0007915496826171875, -0.0009288447326980531, -8.20159912109375e-05, -0.0004213159263599664, -7.05718994140625e-05, -0.020303726196289062, -3.814697265625e-06, -0.001003265380859375, 0.0, -0.00042736477917060256, 0.0, -0.0003452301025390625, -0.000133514404296875, -0.000213623046875, -0.00011813575110863894, -1.9073486328125e-06, -6.704566955566406, -0.0002651214599609375, -0.0627603530883789, -0.000274658203125, -0.000255584716796875, -1.9073486328125e-06, -8.845329284667969e-05, -1.33514404296875e-05, -0.000156402587890625, -1.1444091796875e-05, -0.0016574859619140625, -0.002013562712818384, -3.814697265625e-06, -1.52587890625e-05, -0.000720977783203125, -0.0002574920654296875, -0.000286102294921875, -0.0008029937744140625, -3.0517578125e-05, -5.7220458984375e-06, -0.0008783340454101562, -1.33514404296875e-05, -0.011137962341308594, 0.0, -0.0008192062377929688, -2.09808349609375e-05, -0.12475967407226562, -0.008571624755859375, -0.00012969970703125, -8.392333984375e-05, -0.0002918243408203125, 0.0, -0.010042190551757812, -1.9073486328125e-06, -0.03101825714111328, 0.0, -0.001274704933166504, -1.71661376953125e-05, -0.05529975891113281, -0.0010166168212890625, -0.0001621246337890625, -0.0001697540283203125, -0.03580760955810547, -1.9073486328125e-06, -0.19380760192871094, -1.9073486328125e-06, -0.03933143615722656, 0.0, -0.002136826515197754, -1.1444091796875e-05], "score": -7.3170620452565345, "model_output": {"hole4": "player", "hole0": "Bloodlust", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole1": "change_temp_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"value": {"hole1": "change_temp_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}, {"value": {"hole1": "change_temp_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "SHAMAN", "_type": "Template14", "hole0": "Bloodlust"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n        minion.change_temp_attack(3)\n        minion.change_temp_attack(3)\n"}], "index": 13}
{"beams": [{"choice_history": [121, 198, "Bluegill", "Warrior", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.00011085860023740679, -5.722038622479886e-06, -2.2649765014648438e-06, -1.192074705613777e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.000396728515625, -0.0010662078857421875, -0.0001888275146484375, -4.9947491788771003e-05, -2.6702880859375e-05, -1.5377996533061378e-05, -9.5367431640625e-06, -0.00017104788275901228, 0.0, -0.010150909423828125, 0.0, -0.0001316070556640625, -9.5367431640625e-06, -0.0047760009765625, -0.03938484191894531, -0.000133514404296875, -5.7220458984375e-06, -0.0067903995513916016, -3.4332275390625e-05, -0.008159518241882324, -8.20159912109375e-05, -7.069110870361328e-05, 0.0, -1.7642974853515625e-05, 0.0, -0.0004253387451171875, -0.000331878662109375, -0.000141143798828125, -2.622604142743512e-06, -7.152555099310121e-07, -5.50746735825669e-05, -2.3841855067985307e-07, -0.005177735351026058, -5.7220458984375e-06, -0.0013275146484375], "score": -0.0793019276675011, "model_output": {"hole4": "player", "hole0": "BluegillWarrior", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bluegill Warrior", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n"}, {"choice_history": [121, 198, "Bluegill", "Warrior", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.00011085860023740679, -5.722038622479886e-06, -2.2649765014648438e-06, -1.192074705613777e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.000396728515625, -0.0010662078857421875, -0.0001888275146484375, -4.9947491788771003e-05, -2.6702880859375e-05, -1.5377996533061378e-05, -9.5367431640625e-06, -0.00017104788275901228, 0.0, -4.648987770080566, -3.814697265625e-06, -0.0003625154495239258, -1.33514404296875e-05, -0.0031585693359375, -0.005588531494140625, -7.05718994140625e-05, -3.814697265625e-06, -0.00047135353088378906, -3.0517578125e-05, -0.007047176361083984, -6.4849853515625e-05, -6.306171417236328e-05, 0.0, -1.7404556274414062e-05, 0.0, -0.00046539306640625, -0.00037384033203125, -0.00014495849609375, -2.741813204920618e-06, -8.344646857949556e-07, -6.258486246224493e-05, -2.3841855067985307e-07, -0.0051884641870856285, -5.7220458984375e-06, -0.00136566162109375], "score": -4.675580952748618, "model_output": {"hole4": "player", "hole0": "BluegillWarrior", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bluegill Warrior", "hole1": 2, "hole2": "FREE", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n"}, {"choice_history": [121, 198, "Bluegill", "Warrior", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "Character", "Selector", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.00011085860023740679, -5.722038622479886e-06, -2.2649765014648438e-06, -1.192074705613777e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.000396728515625, -0.0010662078857421875, -0.0001888275146484375, -4.9947491788771003e-05, -2.6702880859375e-05, -1.5377996533061378e-05, -9.5367431640625e-06, -0.00017104788275901228, 0.0, -0.010150909423828125, 0.0, -0.0001316070556640625, -9.5367431640625e-06, -0.0047760009765625, -0.03938484191894531, -0.000133514404296875, -5.7220458984375e-06, -5.0198211669921875, -0.0039032697677612305, 0.0, -0.047908902168273926, -2.47955322265625e-05, -4.76837158203125e-05, 0.0, -5.173683166503906e-05, 0.0, -0.000720977783203125, -0.000240325927734375, -0.0001316070556640625, -3.099440846199286e-06, -7.152555099310121e-07, -5.2213646995369345e-05, -2.3841855067985307e-07, -0.004771827720105648, -5.7220458984375e-06, -0.001171112060546875], "score": -5.135534737683855, "model_output": {"hole4": "player", "hole0": "BluegillWarrior", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "CharacterSelector"}, "_type": "Attribute"}, "hole0": "Bluegill Warrior", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=CharacterSelector.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n"}, {"choice_history": [121, 198, "Bluegill", "Warrior", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.00011085860023740679, -5.722038622479886e-06, -2.2649765014648438e-06, -1.192074705613777e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.000396728515625, -0.0010662078857421875, -0.0001888275146484375, -4.9947491788771003e-05, -2.6702880859375e-05, -1.5377996533061378e-05, -9.5367431640625e-06, -0.00017104788275901228, 0.0, -0.010150909423828125, 0.0, -0.0001316070556640625, -9.5367431640625e-06, -5.373247146606445, -9.34600830078125e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.0020351409912109375, -0.003475189208984375, -1.9073486328125e-05, -1.5854835510253906e-05, -5.960462772236497e-07, -4.5061107812216505e-05, -2.3841855067985307e-07, -0.003379699308425188, 0.0, -0.0007266998291015625], "score": -5.395438404731777, "model_output": {"hole4": "player", "hole0": "BluegillWarrior", "hole1": "MinionCard", "hole2": [{"hole4": {"_type": "Template53"}, "hole0": "Bluegill Warrior", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n"}, {"choice_history": [121, 198, "Bluegill", "Warrior", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.00011085860023740679, -5.722038622479886e-06, -2.2649765014648438e-06, -1.192074705613777e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.000396728515625, -0.0010662078857421875, -0.0001888275146484375, -4.9947491788771003e-05, -2.6702880859375e-05, -1.5377996533061378e-05, -9.5367431640625e-06, -0.00017104788275901228, 0.0, -0.010150909423828125, 0.0, -0.0001316070556640625, -9.5367431640625e-06, -0.0047760009765625, -0.03938484191894531, -0.000133514404296875, -5.7220458984375e-06, -0.0067903995513916016, -3.4332275390625e-05, -5.492327690124512, -9.942054748535156e-05, -2.1338462829589844e-05, 0.0, -3.2782554626464844e-05, 0.0, -0.0001659393310546875, -0.000774383544921875, -0.000133514404296875, -2.622604142743512e-06, -7.152555099310121e-07, -5.1498394896043465e-05, -2.3841855067985307e-07, -0.005641578696668148, -5.7220458984375e-06, -0.0014591217041015625], "score": -5.564220641237142, "model_output": {"hole4": "player", "hole0": "BluegillWarrior", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bluegill Warrior", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n"}, {"choice_history": [121, 198, "Bluegill", "Warrior", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.00011085860023740679, -5.722038622479886e-06, -2.2649765014648438e-06, -1.192074705613777e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.000396728515625, -0.0010662078857421875, -0.0001888275146484375, -4.9947491788771003e-05, -2.6702880859375e-05, -1.5377996533061378e-05, -9.5367431640625e-06, -0.00017104788275901228, 0.0, -0.010150909423828125, 0.0, -0.0001316070556640625, -9.5367431640625e-06, -0.0047760009765625, -0.03938484191894531, -0.000133514404296875, -5.7220458984375e-06, -0.0067903995513916016, -3.4332275390625e-05, -6.917502403259277, -1.71661376953125e-05, -4.9591064453125e-05, 0.0, -2.300739288330078e-05, 0.0, -0.0001735687255859375, -0.0010776519775390625, -0.0001506805419921875, -2.861022494471399e-06, -5.960462772236497e-07, -5.75780650251545e-05, -2.3841855067985307e-07, -0.005223273299634457, -5.7220458984375e-06, -0.001583099365234375], "score": -6.989371512510189, "model_output": {"hole4": "player", "hole0": "BluegillWarrior", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bluegill Warrior", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n"}, {"choice_history": [121, 198, "Bluegill", "Warrior", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.00011085860023740679, -5.722038622479886e-06, -2.2649765014648438e-06, -1.192074705613777e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.000396728515625, -0.0010662078857421875, -0.0001888275146484375, -4.9947491788771003e-05, -2.6702880859375e-05, -1.5377996533061378e-05, -9.5367431640625e-06, -0.00017104788275901228, 0.0, -0.010150909423828125, 0.0, -0.0001316070556640625, -9.5367431640625e-06, -0.0047760009765625, -0.03938484191894531, -0.000133514404296875, -5.7220458984375e-06, -0.0067903995513916016, -3.4332275390625e-05, -0.008159518241882324, -8.20159912109375e-05, -7.069110870361328e-05, 0.0, -1.7642974853515625e-05, 0.0, -0.0004253387451171875, -0.000331878662109375, -0.000141143798828125, -2.622604142743512e-06, -7.152555099310121e-07, -5.50746735825669e-05, -2.3841855067985307e-07, -6.968541145324707, -1.9073486328125e-06, -0.0011692047119140625], "score": -7.042503213007393, "model_output": {"hole4": "player", "hole0": "BluegillWarrior", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bluegill Warrior", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 1, taunt=True)\n"}, {"choice_history": [121, 198, "Bluegill", "Warrior", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "taunt", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.00011085860023740679, -5.722038622479886e-06, -2.2649765014648438e-06, -1.192074705613777e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.000396728515625, -0.0010662078857421875, -0.0001888275146484375, -4.9947491788771003e-05, -2.6702880859375e-05, -1.5377996533061378e-05, -9.5367431640625e-06, -0.00017104788275901228, 0.0, -0.010150909423828125, 0.0, -0.0001316070556640625, -9.5367431640625e-06, -0.0047760009765625, -0.03938484191894531, -0.000133514404296875, -5.7220458984375e-06, -0.0067903995513916016, -3.4332275390625e-05, -7.306643486022949, 0.0, -0.00022554397583007812, 0.0, -9.655952453613281e-06, 0.0, -0.00020599365234375, -0.0004024505615234375, -0.0001125335693359375, -5.960462772236497e-07, -4.768370445162873e-07, -5.3524952818406746e-05, -2.3841855067985307e-07, -0.005241989623755217, -5.7220458984375e-06, -0.00118255615234375], "score": -7.377588842958772, "model_output": {"hole4": "player", "hole0": "BluegillWarrior", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "taunt", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bluegill Warrior", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.taunt)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n"}, {"choice_history": [121, 198, "Bluegill", "Warrior", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "Character", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.00011085860023740679, -5.722038622479886e-06, -2.2649765014648438e-06, -1.192074705613777e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.000396728515625, -0.0010662078857421875, -0.0001888275146484375, -4.9947491788771003e-05, -2.6702880859375e-05, -1.5377996533061378e-05, -9.5367431640625e-06, -0.00017104788275901228, 0.0, -0.010150909423828125, 0.0, -0.0001316070556640625, -9.5367431640625e-06, -0.0047760009765625, -0.03938484191894531, -0.000133514404296875, -5.7220458984375e-06, -0.0067903995513916016, -3.4332275390625e-05, -7.1841888427734375, -0.304268479347229, -1.1444091796875e-05, 0.0, -3.2782554626464844e-05, 0.0, -0.0001621246337890625, -0.0007381439208984375, -0.0001544952392578125, -2.503394853192731e-06, -5.960462772236497e-07, -5.877016519661993e-05, -3.576278118089249e-07, -0.004895208403468132, -3.814697265625e-06, -0.0015888214111328125], "score": -7.559610459454689, "model_output": {"hole4": "player", "hole0": "BluegillWarrior", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "Character", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bluegill Warrior", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.Character)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n"}, {"choice_history": [121, 198, "Bluegill", "Warrior", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.00011085860023740679, -5.722038622479886e-06, -2.2649765014648438e-06, -1.192074705613777e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.000396728515625, -0.0010662078857421875, -0.0001888275146484375, -4.9947491788771003e-05, -2.6702880859375e-05, -1.5377996533061378e-05, -9.5367431640625e-06, -0.00017104788275901228, 0.0, -0.010150909423828125, 0.0, -0.0001316070556640625, -9.5367431640625e-06, -0.0047760009765625, -0.03938484191894531, -0.000133514404296875, -5.7220458984375e-06, -0.0067903995513916016, -3.4332275390625e-05, -0.008159518241882324, -8.20159912109375e-05, -7.069110870361328e-05, 0.0, -1.7642974853515625e-05, 0.0, -0.0004253387451171875, -0.000331878662109375, -0.000141143798828125, -2.622604142743512e-06, -7.152555099310121e-07, -5.50746735825669e-05, -2.3841855067985307e-07, -7.599911689758301, -1.9073486328125e-06, -0.0017375946044921875], "score": -7.674442147333565, "model_output": {"hole4": "player", "hole0": "BluegillWarrior", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bluegill Warrior", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "stealth", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n"}, {"choice_history": [121, 198, "Bluegill", "Warrior", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.00011085860023740679, -5.722038622479886e-06, -2.2649765014648438e-06, -1.192074705613777e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.000396728515625, -0.0010662078857421875, -0.0001888275146484375, -4.9947491788771003e-05, -2.6702880859375e-05, -1.5377996533061378e-05, -9.5367431640625e-06, -0.00017104788275901228, 0.0, -0.010150909423828125, 0.0, -0.0001316070556640625, -9.5367431640625e-06, -0.0047760009765625, -0.03938484191894531, -0.000133514404296875, -5.7220458984375e-06, -0.0067903995513916016, -3.4332275390625e-05, -7.8905253410339355, -4.291534423828125e-06, -4.780292510986328e-05, 0.0, -1.7642974853515625e-05, 0.0, -0.0005283355712890625, -0.0006504058837890625, -0.0001239776611328125, -2.503394853192731e-06, -4.768370445162873e-07, -5.555150710279122e-05, -2.3841855067985307e-07, -0.005465626250952482, -5.7220458984375e-06, -0.0013141632080078125], "score": -7.962246154394592, "model_output": {"hole4": "player", "hole0": "BluegillWarrior", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bluegill Warrior", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n"}, {"choice_history": [121, 198, "Bluegill", "Warrior", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "divine_shield", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.00011085860023740679, -5.722038622479886e-06, -2.2649765014648438e-06, -1.192074705613777e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.000396728515625, -0.0010662078857421875, -0.0001888275146484375, -4.9947491788771003e-05, -2.6702880859375e-05, -1.5377996533061378e-05, -9.5367431640625e-06, -0.00017104788275901228, 0.0, -0.010150909423828125, 0.0, -0.0001316070556640625, -9.5367431640625e-06, -0.0047760009765625, -0.03938484191894531, -0.000133514404296875, -5.7220458984375e-06, -0.0067903995513916016, -3.4332275390625e-05, -0.008159518241882324, -8.20159912109375e-05, -7.069110870361328e-05, 0.0, -1.7642974853515625e-05, 0.0, -0.0004253387451171875, -0.000331878662109375, -0.000141143798828125, -2.622604142743512e-06, -7.152555099310121e-07, -5.50746735825669e-05, -2.3841855067985307e-07, -7.885442733764648, -3.4332275390625e-05, -0.00433349609375], "score": -7.962601517755928, "model_output": {"hole4": "player", "hole0": "BluegillWarrior", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bluegill Warrior", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "divine_shield", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 1, divine_shield=True)\n"}, {"choice_history": [121, 198, "Bluegill", "Warrior", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "1", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.00011085860023740679, -5.722038622479886e-06, -2.2649765014648438e-06, -1.192074705613777e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.000396728515625, -0.0010662078857421875, -0.0001888275146484375, -4.9947491788771003e-05, -2.6702880859375e-05, -1.5377996533061378e-05, -9.5367431640625e-06, -0.00017104788275901228, 0.0, -0.010150909423828125, 0.0, -0.0001316070556640625, -9.5367431640625e-06, -0.0047760009765625, -0.03938484191894531, -0.000133514404296875, -5.7220458984375e-06, -0.0067903995513916016, -3.4332275390625e-05, -0.008159518241882324, -8.20159912109375e-05, -7.069110870361328e-05, 0.0, -1.7642974853515625e-05, 0.0, -0.0004253387451171875, -0.000331878662109375, -0.000141143798828125, -2.622604142743512e-06, -7.152555099310121e-07, -5.50746735825669e-05, -2.3841855067985307e-07, -7.954808235168457, 0.0, -0.002552032470703125], "score": -8.0301512232613, "model_output": {"hole4": "player", "hole0": "BluegillWarrior", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bluegill Warrior", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "1", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 1, 1=True)\n"}, {"choice_history": [121, 198, "Bluegill", "Warrior", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "buffs", "<EOS>", 23, 181, 321, 81, 232, "Cant", "Attack", "<EOS>", 105], "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.00011085860023740679, -5.722038622479886e-06, -2.2649765014648438e-06, -1.192074705613777e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.000396728515625, -0.0010662078857421875, -0.0001888275146484375, -4.9947491788771003e-05, -2.6702880859375e-05, -1.5377996533061378e-05, -9.5367431640625e-06, -0.00017104788275901228, 0.0, -0.010150909423828125, 0.0, -0.0001316070556640625, -9.5367431640625e-06, -0.0047760009765625, -0.03938484191894531, -0.000133514404296875, -5.7220458984375e-06, -0.0067903995513916016, -3.4332275390625e-05, -0.008159518241882324, -8.20159912109375e-05, -7.069110870361328e-05, 0.0, -1.7642974853515625e-05, 0.0, -0.0004253387451171875, -0.000331878662109375, -0.000141143798828125, -2.622604142743512e-06, -7.152555099310121e-07, -5.50746735825669e-05, -2.3841855067985307e-07, -6.616951942443848, -0.014332771301269531, -0.6212587356567383, -0.043987274169921875, -0.0032024383544921875, -0.22121524810791016, -0.016668319702148438, -0.494191974401474, -0.01656831055879593, -5.91278076171875e-05, -0.0064983367919921875], "score": -8.127725434918347, "model_output": {"hole4": "player", "hole0": "BluegillWarrior", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bluegill Warrior", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "buffs", "_type": "Template27", "hole3": {"_type": "List", "elts": [{"_type": "Template30", "hole0": "CantAttack"}, {"_type": "Template62_expr_seq"}]}, "hole0": 2}]}, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 1, buffs=[Buff(CantAttack())])\n"}, {"choice_history": [121, 198, "Bluegill", "Warrior", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "Character", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.00011085860023740679, -5.722038622479886e-06, -2.2649765014648438e-06, -1.192074705613777e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.000396728515625, -0.0010662078857421875, -0.0001888275146484375, -4.9947491788771003e-05, -2.6702880859375e-05, -1.5377996533061378e-05, -9.5367431640625e-06, -0.00017104788275901228, 0.0, -0.010150909423828125, 0.0, -0.0001316070556640625, -9.5367431640625e-06, -0.0047760009765625, -0.03938484191894531, -0.000133514404296875, -5.7220458984375e-06, -0.0067903995513916016, -3.4332275390625e-05, -7.1841888427734375, -1.3536344766616821, 0.0, -3.814697265625e-05, 0.0, -1.7404556274414062e-05, 0.0, -0.0007648468017578125, -0.0006198883056640625, -0.000133514404296875, -4.29153169534402e-06, -9.536738616588991e-07, -6.139274773886427e-05, -3.576278118089249e-07, -0.004915474448353052, -5.7220458984375e-06, -0.00147247314453125], "score": -8.609361860843308, "model_output": {"hole4": "player", "hole0": "BluegillWarrior", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "CharacterSelector", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Bluegill Warrior", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.CharacterSelector)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n"}], "index": 14}
{"beams": [{"choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Boar", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000141143798828125, -0.000324249267578125, -6.6756979322235566e-06, -6.937813304830343e-05, -9.175186278298497e-06, -3.933906555175781e-06, -0.0001703500747680664, -0.000194549560546875, -0.0006694793701171875, -3.4332275390625e-05, -0.0001697540283203125, -0.016641616821289062, -0.000354766845703125, -0.00095367431640625, -4.00543212890625e-05, -0.0001621246337890625, -1.1920928244535389e-07, -3.4332275390625e-05, -0.0008411407470703125, -5.53131103515625e-05, -0.001346588134765625, -2.288818359375e-05, -0.000213623046875, -0.000339508056640625, -0.0003108978271484375, -0.011766433715820312, -2.86102294921875e-05, -1.52587890625e-05, 0.0, -0.00013363361358642578, 0.0, -1.9073486328125e-05, -4.57763671875e-05, -3.24249267578125e-05, -4.363059997558594e-05, 0.0, -5.724083166569471e-06, 0.0], "score": -0.03520023464033528, "model_output": {"hole4": "player", "hole0": "Boar", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Boar", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000141143798828125, -0.000324249267578125, -6.6756979322235566e-06, -6.937813304830343e-05, -9.175186278298497e-06, -3.933906555175781e-06, -0.0001703500747680664, -0.000194549560546875, -0.0006694793701171875, -3.4332275390625e-05, -0.0001697540283203125, -0.016641616821289062, -0.000354766845703125, -0.00095367431640625, -4.00543212890625e-05, -0.0001621246337890625, -1.1920928244535389e-07, -3.4332275390625e-05, -0.0008411407470703125, -5.53131103515625e-05, -0.001346588134765625, -2.288818359375e-05, -0.000213623046875, -0.000339508056640625, -0.0003108978271484375, -4.590161323547363, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -3.063678741455078e-05, 0.0, -2.288818359375e-05, -4.57763671875e-05, -2.86102294921875e-05, -4.744529724121094e-05, 0.0, -5.723806680180132e-06, 0.0], "score": -4.613463517139728, "model_output": {"hole4": "player", "hole0": "Boar", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "DRAGON"}], "_type": "Call", "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Boar", "<EOS>", 103, 95, 94, 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000141143798828125, -0.000324249267578125, -6.6756979322235566e-06, -6.937813304830343e-05, -9.175186278298497e-06, -3.933906555175781e-06, -0.0001703500747680664, -0.000194549560546875, -0.0006694793701171875, -3.4332275390625e-05, -0.0001697540283203125, -4.160257339477539, -0.002044677734375, -0.4275064468383789, -0.0022029876708984375, -0.0002079010009765625, -4.768370445162873e-07, -1.9073486328125e-06, -0.0017757415771484375, -8.392333984375e-05, -0.0006122589111328125, -1.52587890625e-05, -0.0006812810897827148, -3.814697265625e-06, -0.12759137153625488, 0.0, -5.14984130859375e-05, -2.6702880859375e-05, -2.47955322265625e-05, -2.574915015429724e-05, -1.1920928244535389e-07, -7.629867468494922e-06, 0.0], "score": -4.7249149032007765, "model_output": {"hole4": "player", "hole0": "Boar", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Boar", "<EOS>", 103, 95, 94, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000141143798828125, -0.000324249267578125, -6.6756979322235566e-06, -6.937813304830343e-05, -9.175186278298497e-06, -3.933906555175781e-06, -0.0001703500747680664, -0.000194549560546875, -0.0006694793701171875, -3.4332275390625e-05, -0.0001697540283203125, -4.160257339477539, -0.002044677734375, -1.0745086669921875, -0.00180816650390625, -0.0003032684326171875, -2.3841830625315197e-06, -1.9073486328125e-06, -0.051639556884765625, -0.0005893707275390625, -0.0029850006103515625, -5.14984130859375e-05, -0.0010662078857421875, -8.58306884765625e-05, -8.20159912109375e-05, -1.9073486328125e-06, -0.0005321502685546875, -0.0001087188720703125, -0.012588858604431152, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -0.0019210577011108398, -2.09808349609375e-05, -4.38690185546875e-05, -0.0004100799560546875, -1.1444091796875e-05, -4.410742621985264e-05, -1.1920928244535389e-07, -2.467738522682339e-05, 0.0], "score": -5.3129441692367365, "model_output": {"hole4": "p", "hole0": "Boar", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}, {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Boar", "<EOS>", 103, 95, 94, 112, "create_minion", "<EOS>", "p", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000141143798828125, -0.000324249267578125, -6.6756979322235566e-06, -6.937813304830343e-05, -9.175186278298497e-06, -3.933906555175781e-06, -0.0001703500747680664, -0.000194549560546875, -0.0006694793701171875, -3.4332275390625e-05, -0.0001697540283203125, -4.160257339477539, -0.002044677734375, -0.4275064468383789, -0.0022029876708984375, -0.0002079010009765625, -4.768370445162873e-07, -1.9073486328125e-06, -0.0017757415771484375, -8.392333984375e-05, -0.0006122589111328125, -1.52587890625e-05, -0.0006812810897827148, -3.814697265625e-06, -2.1245672702789307, -0.0001049041748046875, -5.14984130859375e-05, -1.71661376953125e-05, -1.33514404296875e-05, -0.00017964723519980907, -2.3841855067985307e-07, -1.6927753677009605e-05, 0.0], "score": -6.722138040463818, "model_output": {"hole4": "p", "hole0": "Boar", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False)\n\n    def create_minion(self, p):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Boar", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000141143798828125, -0.000324249267578125, -6.6756979322235566e-06, -6.937813304830343e-05, -9.175186278298497e-06, -3.933906555175781e-06, -0.0001703500747680664, -0.000194549560546875, -0.0006694793701171875, -3.4332275390625e-05, -0.0001697540283203125, -0.016641616821289062, -0.000354766845703125, -0.00095367431640625, -4.00543212890625e-05, -0.0001621246337890625, -1.1920928244535389e-07, -3.4332275390625e-05, -0.0008411407470703125, -5.53131103515625e-05, -0.001346588134765625, -2.288818359375e-05, -0.000213623046875, -0.000339508056640625, -0.0003108978271484375, -7.1680707931518555, -0.0001735687255859375, -6.29425048828125e-05, 0.0, -5.7220458984375e-05, 0.0, -2.288818359375e-05, -3.62396240234375e-05, -2.86102294921875e-05, -4.9233436584472656e-05, 0.0, -5.723723006667569e-06, 0.0], "score": -7.191616888866967, "model_output": {"hole4": "player", "hole0": "Boar", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "DEMON"}], "_type": "Call", "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Boar", "<EOS>", 113, 95, 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000141143798828125, -0.000324249267578125, -6.6756979322235566e-06, -6.937813304830343e-05, -9.175186278298497e-06, -3.933906555175781e-06, -0.0001703500747680664, -0.000194549560546875, -0.0006694793701171875, -3.4332275390625e-05, -0.0001697540283203125, -0.016641616821289062, -0.000354766845703125, -0.00095367431640625, -4.00543212890625e-05, -0.0001621246337890625, -1.1920928244535389e-07, -3.4332275390625e-05, -7.443000793457031, -0.018833160400390625, -0.00217437744140625, -1.71661376953125e-05, -0.0001354217529296875, -0.00063323974609375, -0.00025177001953125, -0.009398460388183594, -1.33514404296875e-05, -5.53131103515625e-05, 0.0, -0.00011670589447021484, 0.0, -1.9073486328125e-05, -5.14984130859375e-05, -3.62396240234375e-05, -3.790855407714844e-05, 0.0, -5.366462573874742e-06, 0.0], "score": -7.494759556051115, "model_output": {"hole4": "player", "hole0": "Boar", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Boar", "<EOS>", 103, 95, 96, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000141143798828125, -0.000324249267578125, -6.6756979322235566e-06, -6.937813304830343e-05, -9.175186278298497e-06, -3.933906555175781e-06, -0.0001703500747680664, -0.000194549560546875, -0.0006694793701171875, -3.4332275390625e-05, -0.0001697540283203125, -0.016641616821289062, -0.000354766845703125, -0.00095367431640625, -4.00543212890625e-05, -0.0001621246337890625, -1.1920928244535389e-07, -3.4332275390625e-05, -0.0008411407470703125, -5.53131103515625e-05, -7.348093032836914, -4.57763671875e-05, -0.0001544952392578125, -0.0007534027099609375, -0.000339508056640625, -0.18671512603759766, -7.62939453125e-06, -7.62939453125e-06, 0.0, -0.00015842914581298828, 0.0, -1.71661376953125e-05, -4.57763671875e-05, -2.86102294921875e-05, -4.935264587402344e-05, 0.0, -4.532019374892116e-06, 0.0], "score": -7.557296630161993, "model_output": {"hole4": "player", "hole0": "Boar", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Boar", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000141143798828125, -0.000324249267578125, -6.6756979322235566e-06, -6.937813304830343e-05, -9.175186278298497e-06, -3.933906555175781e-06, -0.0001703500747680664, -0.000194549560546875, -0.0006694793701171875, -3.4332275390625e-05, -0.0001697540283203125, -0.016641616821289062, -0.000354766845703125, -0.00095367431640625, -4.00543212890625e-05, -0.0001621246337890625, -1.1920928244535389e-07, -3.4332275390625e-05, -0.0008411407470703125, -5.53131103515625e-05, -0.001346588134765625, -2.288818359375e-05, -0.000213623046875, -0.000339508056640625, -0.0003108978271484375, -8.435606002807617, -0.0001659393310546875, -3.0517578125e-05, 0.0, -3.445148468017578e-05, 0.0, -2.288818359375e-05, -3.814697265625e-05, -2.86102294921875e-05, -4.9114227294921875e-05, 0.0, -6.438844138756394e-06, 0.0], "score": -8.459091778487611, "model_output": {"hole4": "player", "hole0": "Boar", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "MURLOC"}], "_type": "Call", "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Boar", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000141143798828125, -0.000324249267578125, -6.6756979322235566e-06, -6.937813304830343e-05, -9.175186278298497e-06, -3.933906555175781e-06, -0.0001703500747680664, -0.000194549560546875, -8.078003883361816, -0.011697769165039062, -3.373566141817719e-05, -8.106231689453125e-06, -1.6093215890577994e-05, -1.1920928244535389e-07, -0.15918731689453125, 0.0, -0.0004152059555053711, -1.9073486328125e-06, -0.011766433715820312, -0.0002689361572265625, -1.9073486328125e-05, -1.9073486328125e-06, -0.0011959075927734375, -0.00014495849609375, -0.3108692169189453, -9.5367431640625e-06, -9.72747802734375e-05, -1.9073486328125e-06, -0.0002269744873046875, 0.0, -3.814697265625e-05, -0.0009288787841796875, -4.76837158203125e-05, -1.20401346066501e-05, 0.0, -7.990100129973143e-06, 0.0], "score": -8.575920459451929, "model_output": {"hole4": "player", "hole0": "Boar", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Boar", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Boar", "<EOS>", 103, 95, 65, 156, 43, "LEGENDARY", "<EOS>", 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000141143798828125, -0.000324249267578125, -6.6756979322235566e-06, -6.937813304830343e-05, -9.175186278298497e-06, -3.933906555175781e-06, -0.0001703500747680664, -0.000194549560546875, -0.0006694793701171875, -3.4332275390625e-05, -0.0001697540283203125, -0.016641616821289062, -0.000354766845703125, -0.00095367431640625, -4.00543212890625e-05, -0.0001621246337890625, -1.1920928244535389e-07, -3.4332275390625e-05, -0.0008411407470703125, -5.53131103515625e-05, -8.568929672241211, -0.00038909912109375, -0.026597976684570312, -0.09599244594573975, -3.814697265625e-06, -0.008200645446777344, -0.0010013580322265625, -0.05372047424316406, -0.000377655029296875, -0.001224517822265625, -0.0001010894775390625, -1.52587890625e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-05, -4.57763671875e-05, -3.0517578125e-05, -3.0398367016459815e-05, 0.0, -6.2012404669076204e-06, 0.0], "score": -8.777579304286967, "model_output": {"hole4": "player", "hole0": "Boar", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"attr": "LEGENDARY", "value": {"_type": "Template56"}, "_type": "Attribute"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Boar", "<EOS>", 113, 95, 94, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000141143798828125, -0.000324249267578125, -6.6756979322235566e-06, -6.937813304830343e-05, -9.175186278298497e-06, -3.933906555175781e-06, -0.0001703500747680664, -0.000194549560546875, -0.0006694793701171875, -3.4332275390625e-05, -0.0001697540283203125, -4.160257339477539, -0.002044677734375, -1.0745086669921875, -0.00180816650390625, -0.0003032684326171875, -2.3841830625315197e-06, -1.9073486328125e-06, -3.563436508178711, -0.00058746337890625, -0.0002079010009765625, -4.00543212890625e-05, -0.0014743804931640625, -3.0517578125e-05, -0.0001506805419921875, 0.0, -0.0005877017974853516, -1.537799835205078e-05, -0.0066841840744018555, -1.9073486328125e-06, -1.5854835510253906e-05, -5.7220458984375e-06, -0.0010362863540649414, -3.4332275390625e-05, -4.38690185546875e-05, -0.000385284423828125, -1.33514404296875e-05, -4.851816629525274e-05, -1.1920928244535389e-07, -2.77765684586484e-05, 0.0], "score": -8.815547223021433, "model_output": {"hole4": "p", "hole0": "Boar", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}, {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Boar", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000141143798828125, -0.000324249267578125, -6.6756979322235566e-06, -6.937813304830343e-05, -9.175186278298497e-06, -3.933906555175781e-06, -0.0001703500747680664, -0.000194549560546875, -0.0006694793701171875, -3.4332275390625e-05, -0.0001697540283203125, -0.016641616821289062, -0.000354766845703125, -0.00095367431640625, -4.00543212890625e-05, -0.0001621246337890625, -1.1920928244535389e-07, -3.4332275390625e-05, -0.0008411407470703125, -5.53131103515625e-05, -0.001346588134765625, -2.288818359375e-05, -0.000213623046875, -0.000339508056640625, -0.0003108978271484375, -8.893193244934082, -8.0108642578125e-05, -1.9073486328125e-05, 0.0, -0.0001583099365234375, 0.0, -2.47955322265625e-05, -4.1961669921875e-05, -3.62396240234375e-05, -4.3511390686035156e-05, 0.0, -6.677517376374453e-06, 0.0], "score": -8.916713591562704, "model_output": {"hole4": "player", "hole0": "Boar", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "MECH"}], "_type": "Call", "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Boar", "<EOS>", 103, 95, 110, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000141143798828125, -0.000324249267578125, -6.6756979322235566e-06, -6.937813304830343e-05, -9.175186278298497e-06, -3.933906555175781e-06, -0.0001703500747680664, -0.000194549560546875, -0.0006694793701171875, -3.4332275390625e-05, -0.0001697540283203125, -0.016641616821289062, -0.000354766845703125, -0.00095367431640625, -4.00543212890625e-05, -0.0001621246337890625, -1.1920928244535389e-07, -3.4332275390625e-05, -0.0008411407470703125, -5.53131103515625e-05, -8.820114135742188, -0.09419059753417969, -0.000270843505859375, -0.000530242919921875, -0.000125885009765625, -0.0543060302734375, -7.62939453125e-06, -1.1444091796875e-05, 0.0, -0.00012600421905517578, 0.0, -1.52587890625e-05, -3.0517578125e-05, -2.86102294921875e-05, -5.6862831115722656e-05, 0.0, -4.770379746332765e-06, 0.0], "score": -8.990694996078211, "model_output": {"hole4": "player", "hole0": "Boar", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template68"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, self, False,\n            minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>", "player", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000141143798828125, -0.000324249267578125, -6.6756979322235566e-06, -6.937813304830343e-05, -9.175186278298497e-06, -3.933906555175781e-06, -0.0001703500747680664, -0.000194549560546875, -8.696295738220215, -0.0029277801513671875, -0.0002446174621582031, -2.3841855067985307e-07, -3.528597881086171e-05, 0.0, -0.3397100567817688, 0.0, -0.009091018699109554, 0.0, -0.0010776519775390625, -0.005725860595703125, -3.62396240234375e-05, -1.58548318722751e-05, 0.0, -2.0386072719702497e-05, -1.9073486328125e-06], "score": -9.056102091788006, "model_output": {"hole4": "player", "hole0": "Boar", "hole1": "MinionCard", "hole2": [{"hole1": 1, "_type": "Template32", "hole0": 1}], "_type": "Template1", "hole3": "player", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        return Minion(1, 1)\n\n    def player(self, player):\n        return Minion(1, 1)\n"}], "index": 15}
{"beams": [{"choice_history": [121, 200, "Charge", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Charge", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "2", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "score_history": [-0.0042858123779296875, -7.2479248046875e-05, -5.483612312673358e-06, -5.4597840062342584e-05, -6.555812433362007e-06, -6.29425048828125e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.0001430511474609375, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -1.71661376953125e-05, -9.918212890625e-05, -2.288818359375e-05, -1.1444091796875e-05, -8.344646857949556e-07, -1.1920928244535389e-07, -0.020483970642089844, -2.6702880859375e-05, 0.0, 0.0, 0.0, -8.368489216081798e-05, 0.0, -0.010283231735229492, 0.0, -0.001617431640625, -0.0001373291015625, -6.29425048828125e-05, -4.1961669921875e-05, -0.0006237030029296875, 0.0, -7.82012939453125e-05, -1.33514404296875e-05, -0.000225067138671875, -0.0052967071533203125, -2.0265579223632812e-06, -6.508827209472656e-05, 0.0, -5.507469177246094e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.647804260253906e-05, 0.0, -0.0049304962158203125, -0.0045566558837890625, -0.04171562194824219, -1.1444091796875e-05, -4.57763671875e-05, -3.4332275390625e-05, -0.0003681182861328125, -0.017724156379699707, 0.0, -0.004670342430472374, -1.9073486328125e-06, -0.0043392181396484375, -0.00043487548828125, -9.72747802734375e-05, -0.12460446357727051, -5.7220458984375e-06, -7.43865966796875e-05, -0.036698341369628906, -0.00028228759765625, -0.01632511429488659, -4.935264587402344e-05], "score": -0.3010837614411841, "model_output": {"hole4": "player", "hole0": "Charge", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "<UNK>"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Charge", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.add_buff(Buff(<UNK>()))\n"}, {"choice_history": [121, 200, "Charge", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Charge", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "2", "<EOS>", 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "Charge", "<EOS>", 110], "score_history": [-0.0042858123779296875, -7.2479248046875e-05, -5.483612312673358e-06, -5.4597840062342584e-05, -6.555812433362007e-06, -6.29425048828125e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.0001430511474609375, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -1.71661376953125e-05, -9.918212890625e-05, -2.288818359375e-05, -1.1444091796875e-05, -8.344646857949556e-07, -1.1920928244535389e-07, -0.020483970642089844, -2.6702880859375e-05, 0.0, 0.0, 0.0, -8.368489216081798e-05, 0.0, -0.010283231735229492, 0.0, -0.001617431640625, -0.0001373291015625, -6.29425048828125e-05, -4.1961669921875e-05, -0.0006237030029296875, 0.0, -7.82012939453125e-05, -1.33514404296875e-05, -0.000225067138671875, -0.0052967071533203125, -2.0265579223632812e-06, -6.508827209472656e-05, 0.0, -5.507469177246094e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.647804260253906e-05, 0.0, -0.0049304962158203125, -0.0045566558837890625, -0.04171562194824219, -1.1444091796875e-05, -4.57763671875e-05, -3.4332275390625e-05, -0.0003681182861328125, -0.017724156379699707, 0.0, -0.004670342430472374, -1.9073486328125e-06, -0.0043392181396484375, -0.00043487548828125, -9.72747802734375e-05, -3.3853209018707275, 0.0, -8.0108642578125e-05, -0.6333456039428711, -1.1444091796875e-05, -7.2479248046875e-05, -0.008594512939453125, 0.0, -0.1317666918039322, -1.33514404296875e-05, -4.00543212890625e-05], "score": -4.282289241614414, "model_output": {"hole4": "player", "hole0": "Charge", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Charge", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.damage(player.effective_spell_damage(0), self)\n"}, {"choice_history": [121, 200, "Charge", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Charge", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "2", "<EOS>", 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "Charge", "<EOS>", 110], "score_history": [-0.0042858123779296875, -7.2479248046875e-05, -5.483612312673358e-06, -5.4597840062342584e-05, -6.555812433362007e-06, -6.29425048828125e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.0001430511474609375, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -1.71661376953125e-05, -9.918212890625e-05, -2.288818359375e-05, -1.1444091796875e-05, -8.344646857949556e-07, -1.1920928244535389e-07, -0.020483970642089844, -2.6702880859375e-05, 0.0, 0.0, 0.0, -8.368489216081798e-05, 0.0, -0.010283231735229492, 0.0, -0.001617431640625, -0.0001373291015625, -6.29425048828125e-05, -4.1961669921875e-05, -0.0006237030029296875, 0.0, -7.82012939453125e-05, -1.33514404296875e-05, -0.000225067138671875, -0.0052967071533203125, -2.0265579223632812e-06, -6.508827209472656e-05, 0.0, -5.507469177246094e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.647804260253906e-05, 0.0, -0.0049304962158203125, -0.0045566558837890625, -0.04171562194824219, -1.1444091796875e-05, -4.57763671875e-05, -3.4332275390625e-05, -0.0003681182861328125, -0.017724156379699707, 0.0, -0.004670342430472374, -1.9073486328125e-06, -0.0043392181396484375, -0.00043487548828125, -9.72747802734375e-05, -2.687612771987915, -9.5367431640625e-06, -3.0517578125e-05, -0.8372106552124023, -2.47955322265625e-05, -6.67572021484375e-05, -0.6114139556884766, 0.0, -0.058402951806783676, -3.24249267578125e-05, -7.62939453125e-05], "score": -4.317924753936602, "model_output": {"hole4": "player", "hole0": "Charge", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Charge", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.heal(player.effective_heal_power(0), self)\n"}, {"choice_history": [121, 200, "Charge", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Charge", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "2", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>"], "score_history": [-0.0042858123779296875, -7.2479248046875e-05, -5.483612312673358e-06, -5.4597840062342584e-05, -6.555812433362007e-06, -6.29425048828125e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.0001430511474609375, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -1.71661376953125e-05, -9.918212890625e-05, -2.288818359375e-05, -1.1444091796875e-05, -8.344646857949556e-07, -1.1920928244535389e-07, -0.020483970642089844, -2.6702880859375e-05, 0.0, 0.0, 0.0, -8.368489216081798e-05, 0.0, -0.010283231735229492, 0.0, -0.001617431640625, -0.0001373291015625, -6.29425048828125e-05, -4.1961669921875e-05, -0.0006237030029296875, 0.0, -7.82012939453125e-05, -1.33514404296875e-05, -0.000225067138671875, -0.0052967071533203125, -2.0265579223632812e-06, -6.508827209472656e-05, 0.0, -5.507469177246094e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.647804260253906e-05, 0.0, -0.0049304962158203125, -0.0045566558837890625, -0.04171562194824219, -1.1444091796875e-05, -4.57763671875e-05, -3.4332275390625e-05, -0.0003681182861328125, -0.017724156379699707, 0.0, -0.004670342430472374, -1.9073486328125e-06, -0.0043392181396484375, -0.00043487548828125, -9.72747802734375e-05, -0.12460446357727051, -5.7220458984375e-06, -7.43865966796875e-05, -3.375615119934082, -0.0004520416259765625, -0.00034618377685546875, 0.0, -0.22397381067276, -0.006670236587524414, 0.0, -0.5112520456314087, -5.7220458984375e-06], "score": -4.366043825807644, "model_output": {"hole4": "player", "hole0": "Charge", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"hole1": "add_buff", "hole2": [{"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Charge", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.add_buff(Buff(ChangeAttack(2)))\n"}, {"choice_history": [121, 200, "Charge", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Charge", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "2", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "score_history": [-0.0042858123779296875, -7.2479248046875e-05, -5.483612312673358e-06, -5.4597840062342584e-05, -6.555812433362007e-06, -6.29425048828125e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.0001430511474609375, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -1.71661376953125e-05, -9.918212890625e-05, -2.288818359375e-05, -1.1444091796875e-05, -8.344646857949556e-07, -1.1920928244535389e-07, -4.1289777755737305, -0.0008544921875, 0.0, 0.0, 0.0, -7.915496826171875e-05, 0.0, -0.0263047032058239, 0.0, -0.0018939971923828125, -0.0002193450927734375, -4.57763671875e-05, -1.71661376953125e-05, -0.000728607177734375, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -0.00022125244140625, -0.007160186767578125, 0.0, -5.733966827392578e-05, 0.0, -5.1140785217285156e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.838539123535156e-05, 0.0, -0.004528045654296875, -0.0052165985107421875, -0.03817176818847656, -1.1444091796875e-05, -4.76837158203125e-05, -3.4332275390625e-05, -0.00037384033203125, -0.017208218574523926, 0.0, -0.0047194259241223335, -1.9073486328125e-06, -0.0043506622314453125, -0.00043487548828125, -9.72747802734375e-05, -0.12301290035247803, -5.7220458984375e-06, -7.2479248046875e-05, -0.036163330078125, -0.0002803802490234375, -0.01593792252242565, -4.935264587402344e-05], "score": -4.422388462552696, "model_output": {"hole4": "player", "hole0": "Charge", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "<UNK>"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Charge", "_type": "Str"}, {"_type": "Template67"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.add_buff(Buff(<UNK>()))\n"}, {"choice_history": [121, 200, "Charge", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Charge", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "2", "<EOS>", 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "Charge", "<EOS>", 110], "score_history": [-0.0042858123779296875, -7.2479248046875e-05, -5.483612312673358e-06, -5.4597840062342584e-05, -6.555812433362007e-06, -6.29425048828125e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.0001430511474609375, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -1.71661376953125e-05, -9.918212890625e-05, -2.288818359375e-05, -1.1444091796875e-05, -8.344646857949556e-07, -1.1920928244535389e-07, -0.020483970642089844, -2.6702880859375e-05, 0.0, 0.0, 0.0, -8.368489216081798e-05, 0.0, -0.010283231735229492, 0.0, -0.001617431640625, -0.0001373291015625, -6.29425048828125e-05, -4.1961669921875e-05, -0.0006237030029296875, 0.0, -7.82012939453125e-05, -1.33514404296875e-05, -0.000225067138671875, -0.0052967071533203125, -2.0265579223632812e-06, -6.508827209472656e-05, 0.0, -5.507469177246094e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.647804260253906e-05, 0.0, -0.0049304962158203125, -0.0045566558837890625, -0.04171562194824219, -1.1444091796875e-05, -4.57763671875e-05, -3.4332275390625e-05, -0.0003681182861328125, -0.017724156379699707, 0.0, -0.004670342430472374, -1.9073486328125e-06, -0.0043392181396484375, -0.00043487548828125, -9.72747802734375e-05, -2.687612771987915, -9.5367431640625e-06, -3.0517578125e-05, -0.8372106552124023, -2.47955322265625e-05, -6.67572021484375e-05, -0.8168601989746094, 0.0, -0.10429537296295166, -2.09808349609375e-05, -8.0108642578125e-05], "score": -4.569255788984371, "model_output": {"hole4": "player", "hole0": "Charge", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"hole1": "heal", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Charge", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.heal(player.effective_spell_damage(0), self)\n"}, {"choice_history": [121, 200, "Charge", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Charge", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "2", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.0042858123779296875, -7.2479248046875e-05, -5.483612312673358e-06, -5.4597840062342584e-05, -6.555812433362007e-06, -6.29425048828125e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.0001430511474609375, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -1.71661376953125e-05, -9.918212890625e-05, -2.288818359375e-05, -1.1444091796875e-05, -8.344646857949556e-07, -1.1920928244535389e-07, -0.020483970642089844, -2.6702880859375e-05, 0.0, 0.0, 0.0, -8.368489216081798e-05, 0.0, -0.010283231735229492, 0.0, -0.001617431640625, -0.0001373291015625, -6.29425048828125e-05, -4.1961669921875e-05, -0.0006237030029296875, 0.0, -7.82012939453125e-05, -1.33514404296875e-05, -0.000225067138671875, -0.0052967071533203125, -2.0265579223632812e-06, -6.508827209472656e-05, 0.0, -5.507469177246094e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.647804260253906e-05, 0.0, -0.0049304962158203125, -0.0045566558837890625, -0.04171562194824219, -1.1444091796875e-05, -4.57763671875e-05, -3.4332275390625e-05, -0.0003681182861328125, -0.017724156379699707, 0.0, -0.004670342430472374, -1.9073486328125e-06, -0.0043392181396484375, -0.00043487548828125, -9.72747802734375e-05, -0.12460446357727051, -5.7220458984375e-06, -7.43865966796875e-05, -0.036698341369628906, -0.00028228759765625, -4.469553470611572, -1.1920928244535389e-07], "score": -4.754262884321278, "model_output": {"hole4": "player", "hole0": "Charge", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Charge", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Charge", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Charge", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 41, "change_temp_attack", "<EOS>", "2", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "score_history": [-0.0042858123779296875, -7.2479248046875e-05, -5.483612312673358e-06, -5.4597840062342584e-05, -6.555812433362007e-06, -6.29425048828125e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.0001430511474609375, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -1.71661376953125e-05, -9.918212890625e-05, -2.288818359375e-05, -1.1444091796875e-05, -8.344646857949556e-07, -1.1920928244535389e-07, -0.020483970642089844, -2.6702880859375e-05, 0.0, 0.0, 0.0, -8.368489216081798e-05, 0.0, -0.010283231735229492, 0.0, -0.001617431640625, -0.0001373291015625, -6.29425048828125e-05, -4.1961669921875e-05, -0.0006237030029296875, 0.0, -7.82012939453125e-05, -1.33514404296875e-05, -0.000225067138671875, -0.0052967071533203125, -2.0265579223632812e-06, -6.508827209472656e-05, 0.0, -5.507469177246094e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.647804260253906e-05, 0.0, -0.0049304962158203125, -0.0045566558837890625, -0.04171562194824219, -1.1444091796875e-05, -4.57763671875e-05, -3.4332275390625e-05, -0.0003681182861328125, -4.500703811645508, -3.814697265625e-06, -0.023254182189702988, -1.9073486328125e-06, -0.001110076904296875, -0.0002040863037109375, -0.0001201629638671875, -0.13595187664031982, -3.814697265625e-06, -6.103515625e-05, -0.06656837463378906, -0.000324249267578125, -0.022966861724853516, -5.8770179748535156e-05], "score": -4.847109343099071, "model_output": {"hole4": "player", "hole0": "Charge", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "<UNK>"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Charge", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_temp_attack(2)\n        self.target.add_buff(Buff(<UNK>()))\n"}, {"choice_history": [121, 200, "Charge", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Charge", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "2", "<EOS>", 145, 250, 41, "heal", "<EOS>", 321, 89, 247, "Attack", "<UNK>", "<EOS>", "Charge", "<EOS>", 110], "score_history": [-0.0042858123779296875, -7.2479248046875e-05, -5.483612312673358e-06, -5.4597840062342584e-05, -6.555812433362007e-06, -6.29425048828125e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.0001430511474609375, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -1.71661376953125e-05, -9.918212890625e-05, -2.288818359375e-05, -1.1444091796875e-05, -8.344646857949556e-07, -1.1920928244535389e-07, -0.020483970642089844, -2.6702880859375e-05, 0.0, 0.0, 0.0, -8.368489216081798e-05, 0.0, -0.010283231735229492, 0.0, -0.001617431640625, -0.0001373291015625, -6.29425048828125e-05, -4.1961669921875e-05, -0.0006237030029296875, 0.0, -7.82012939453125e-05, -1.33514404296875e-05, -0.000225067138671875, -0.0052967071533203125, -2.0265579223632812e-06, -6.508827209472656e-05, 0.0, -5.507469177246094e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.647804260253906e-05, 0.0, -0.0049304962158203125, -0.0045566558837890625, -0.04171562194824219, -1.1444091796875e-05, -4.57763671875e-05, -3.4332275390625e-05, -0.0003681182861328125, -0.017724156379699707, 0.0, -0.004670342430472374, -1.9073486328125e-06, -0.0043392181396484375, -0.00043487548828125, -9.72747802734375e-05, -2.687612771987915, -9.5367431640625e-06, -3.0517578125e-05, -2.07680606842041, -0.13504600524902344, -0.31857025623321533, -0.028971314430236816, -0.006245017051696777, -0.0853198766708374, -5.7220458984375e-06, -0.02354717254638672], "score": -5.485208352270199, "model_output": {"hole4": "player", "hole0": "Charge", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"hole1": "heal", "hole2": [{"hole1": 0, "_type": "Template41", "hole0": "Attack<UNK>"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Charge", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.heal(Attack<UNK>(0), self)\n"}, {"choice_history": [121, 200, "Charge", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Charge", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "2", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "5", "<EOS>"], "score_history": [-0.0042858123779296875, -7.2479248046875e-05, -5.483612312673358e-06, -5.4597840062342584e-05, -6.555812433362007e-06, -6.29425048828125e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.0001430511474609375, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -1.71661376953125e-05, -9.918212890625e-05, -2.288818359375e-05, -1.1444091796875e-05, -8.344646857949556e-07, -1.1920928244535389e-07, -0.020483970642089844, -2.6702880859375e-05, 0.0, 0.0, 0.0, -8.368489216081798e-05, 0.0, -0.010283231735229492, 0.0, -0.001617431640625, -0.0001373291015625, -6.29425048828125e-05, -4.1961669921875e-05, -0.0006237030029296875, 0.0, -7.82012939453125e-05, -1.33514404296875e-05, -0.000225067138671875, -0.0052967071533203125, -2.0265579223632812e-06, -6.508827209472656e-05, 0.0, -5.507469177246094e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.647804260253906e-05, 0.0, -0.0049304962158203125, -0.0045566558837890625, -0.04171562194824219, -1.1444091796875e-05, -4.57763671875e-05, -3.4332275390625e-05, -0.0003681182861328125, -0.017724156379699707, 0.0, -0.004670342430472374, -1.9073486328125e-06, -0.0043392181396484375, -0.00043487548828125, -9.72747802734375e-05, -0.12460446357727051, -5.7220458984375e-06, -7.43865966796875e-05, -3.375615119934082, -0.0004520416259765625, -0.00034618377685546875, 0.0, -0.22397381067276, -0.006670236587524414, 0.0, -1.8072267770767212, -2.47955322265625e-05], "score": -5.662037630739285, "model_output": {"hole4": "player", "hole0": "Charge", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"hole1": "add_buff", "hole2": [{"hole1": "ChangeAttack", "hole2": 5, "_type": "Template28", "hole0": "Buff"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Charge", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.add_buff(Buff(ChangeAttack(5)))\n"}, {"choice_history": [121, 200, "Charge", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Charge", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 41, "increase_health", "<EOS>", "2", "<EOS>"], "score_history": [-0.0042858123779296875, -7.2479248046875e-05, -5.483612312673358e-06, -5.4597840062342584e-05, -6.555812433362007e-06, -6.29425048828125e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.0001430511474609375, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -1.71661376953125e-05, -9.918212890625e-05, -2.288818359375e-05, -1.1444091796875e-05, -8.344646857949556e-07, -1.1920928244535389e-07, -0.020483970642089844, -2.6702880859375e-05, 0.0, 0.0, 0.0, -8.368489216081798e-05, 0.0, -0.010283231735229492, 0.0, -0.001617431640625, -0.0001373291015625, -6.29425048828125e-05, -4.1961669921875e-05, -0.0006237030029296875, 0.0, -7.82012939453125e-05, -1.33514404296875e-05, -0.000225067138671875, -0.0052967071533203125, -2.0265579223632812e-06, -6.508827209472656e-05, 0.0, -5.507469177246094e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.647804260253906e-05, 0.0, -0.0049304962158203125, -0.0045566558837890625, -0.04171562194824219, -1.1444091796875e-05, -4.57763671875e-05, -3.4332275390625e-05, -0.0003681182861328125, -0.017724156379699707, 0.0, -0.004670342430472374, -1.9073486328125e-06, -5.74553108215332, -1.71661376953125e-05, -2.6702880859375e-05, -1.9073486328125e-06, -8.392333984375e-05, -0.024778366088867188, 0.0, -0.026025008410215378, -1.9073486328125e-06], "score": -5.9146387886131535, "model_output": {"hole4": "player", "hole0": "Charge", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"value": {"hole1": "increase_health", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Charge", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n"}, {"choice_history": [121, 200, "Charge", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Charge", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "card", "<EOS>", 26, 187, "Null", "<EOS>"], "score_history": [-0.0042858123779296875, -7.2479248046875e-05, -5.483612312673358e-06, -5.4597840062342584e-05, -6.555812433362007e-06, -6.29425048828125e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.0001430511474609375, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -1.71661376953125e-05, -9.918212890625e-05, -2.288818359375e-05, -1.1444091796875e-05, -8.344646857949556e-07, -1.1920928244535389e-07, -0.020483970642089844, -2.6702880859375e-05, 0.0, 0.0, 0.0, -8.368489216081798e-05, 0.0, -0.010283231735229492, 0.0, -0.001617431640625, -0.0001373291015625, -6.29425048828125e-05, -4.1961669921875e-05, -0.0006237030029296875, 0.0, -7.82012939453125e-05, -1.33514404296875e-05, -0.000225067138671875, -0.0052967071533203125, -2.0265579223632812e-06, -6.508827209472656e-05, 0.0, -5.507469177246094e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.647804260253906e-05, 0.0, -0.0049304962158203125, -0.0045566558837890625, -3.266918182373047, -6.29425048828125e-05, -0.0002689361572265625, -0.044221192598342896, -1.9073486328125e-06, -0.0001811981201171875, -0.22402000427246094, -0.0010013580322265625, -0.0073032379150390625, -7.62939453125e-06, -7.82012939453125e-05, -0.44063544273376465, -4.529942543740617e-06, -3.814697265625e-06, -0.17931747436523438, -0.000392913818359375, -0.008392333984375, -0.3873879909515381, 0.0, -0.00112152099609375, -0.036429405212402344, -0.00055694580078125, -1.1444091796875e-05, -0.3150453567504883, -1.9073486328125e-06, -0.0024051666259765625, -0.6004365682601929, 0.0, -1.4172468185424805, -0.000148773193359375, -4.1961669921875e-05, 0.0], "score": -6.987246184773191, "model_output": {"hole4": "player", "hole0": "Charge", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"value": "Null", "_type": "NameConstant"}, "targets": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Charge", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_attack()), self)\n        self.target.card = Null\n"}, {"choice_history": [121, 200, "Charge", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Charge", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "card", "<EOS>", 37, 249, 41, "calculate_attack", "<EOS>"], "score_history": [-0.0042858123779296875, -7.2479248046875e-05, -5.483612312673358e-06, -5.4597840062342584e-05, -6.555812433362007e-06, -6.29425048828125e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.0001430511474609375, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -1.71661376953125e-05, -9.918212890625e-05, -2.288818359375e-05, -1.1444091796875e-05, -8.344646857949556e-07, -1.1920928244535389e-07, -0.020483970642089844, -2.6702880859375e-05, 0.0, 0.0, 0.0, -8.368489216081798e-05, 0.0, -0.010283231735229492, 0.0, -0.001617431640625, -0.0001373291015625, -6.29425048828125e-05, -4.1961669921875e-05, -0.0006237030029296875, 0.0, -7.82012939453125e-05, -1.33514404296875e-05, -0.000225067138671875, -0.0052967071533203125, -2.0265579223632812e-06, -6.508827209472656e-05, 0.0, -5.507469177246094e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.647804260253906e-05, 0.0, -0.0049304962158203125, -0.0045566558837890625, -3.266918182373047, -6.29425048828125e-05, -0.0002689361572265625, -0.044221192598342896, -1.9073486328125e-06, -0.0001811981201171875, -0.22402000427246094, -0.0010013580322265625, -0.0073032379150390625, -7.62939453125e-06, -7.82012939453125e-05, -1.0843942165374756, -0.00014316037413664162, -5.7220458984375e-06, -0.12709903717041016, -0.00020599365234375, -0.013933181762695312, -0.163405179977417, 0.0, -0.001468658447265625, -0.048293113708496094, -0.0007839202880859375, -3.0517578125e-05, -0.03747367858886719, -1.9073486328125e-06, -0.0054149627685546875, -0.721713662147522, 0.0, -0.8763275146484375, -0.0002689361572265625, -0.11166763305664062, -0.25631532073020935, 0.0], "score": -7.046612132776424, "model_output": {"hole4": "player", "hole0": "Charge", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_spell_damage", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}, "targets": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Charge", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(self.target.\n            calculate_attack()), self)\n        self.target.card = self.target.calculate_attack()\n"}, {"choice_history": [121, 200, "Charge", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Charge", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "card", "<EOS>", 37, 249, 41, "calculate_attack", "<EOS>"], "score_history": [-0.0042858123779296875, -7.2479248046875e-05, -5.483612312673358e-06, -5.4597840062342584e-05, -6.555812433362007e-06, -6.29425048828125e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.0001430511474609375, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -1.71661376953125e-05, -9.918212890625e-05, -2.288818359375e-05, -1.1444091796875e-05, -8.344646857949556e-07, -1.1920928244535389e-07, -0.020483970642089844, -2.6702880859375e-05, 0.0, 0.0, 0.0, -8.368489216081798e-05, 0.0, -0.010283231735229492, 0.0, -0.001617431640625, -0.0001373291015625, -6.29425048828125e-05, -4.1961669921875e-05, -0.0006237030029296875, 0.0, -7.82012939453125e-05, -1.33514404296875e-05, -0.000225067138671875, -0.0052967071533203125, -2.0265579223632812e-06, -6.508827209472656e-05, 0.0, -5.507469177246094e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.647804260253906e-05, 0.0, -0.0049304962158203125, -0.0045566558837890625, -3.266918182373047, -6.29425048828125e-05, -0.0002689361572265625, -0.044221192598342896, -1.9073486328125e-06, -0.0001811981201171875, -0.22402000427246094, -0.0010013580322265625, -0.0073032379150390625, -7.62939453125e-06, -7.82012939453125e-05, -0.44063544273376465, -4.529942543740617e-06, -3.814697265625e-06, -0.17931747436523438, -0.000392913818359375, -0.008392333984375, -0.3873879909515381, 0.0, -0.00112152099609375, -0.036429405212402344, -0.00055694580078125, -1.1444091796875e-05, -0.3150453567504883, -1.9073486328125e-06, -0.0024051666259765625, -0.6004365682601929, 0.0, -1.2549676895141602, -0.000247955322265625, -0.06354713439941406, -0.3153770864009857, 0.0], "score": -7.203948497004255, "model_output": {"hole4": "player", "hole0": "Charge", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}, "targets": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Charge", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_attack()), self)\n        self.target.card = self.target.calculate_attack()\n"}, {"choice_history": [121, 200, "Charge", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Charge", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 17, 156, 41, "health", "<EOS>"], "score_history": [-0.0042858123779296875, -7.2479248046875e-05, -5.483612312673358e-06, -5.4597840062342584e-05, -6.555812433362007e-06, -6.29425048828125e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.0001430511474609375, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -1.71661376953125e-05, -9.918212890625e-05, -2.288818359375e-05, -1.1444091796875e-05, -8.344646857949556e-07, -1.1920928244535389e-07, -0.020483970642089844, -2.6702880859375e-05, 0.0, 0.0, 0.0, -8.368489216081798e-05, 0.0, -0.010283231735229492, 0.0, -0.001617431640625, -0.0001373291015625, -6.29425048828125e-05, -4.1961669921875e-05, -0.0006237030029296875, 0.0, -7.82012939453125e-05, -1.33514404296875e-05, -0.000225067138671875, -0.0052967071533203125, -2.0265579223632812e-06, -6.508827209472656e-05, 0.0, -5.507469177246094e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.647804260253906e-05, 0.0, -0.0049304962158203125, -0.0045566558837890625, -3.266918182373047, -6.29425048828125e-05, -0.0002689361572265625, -0.044221192598342896, -1.9073486328125e-06, -0.0001811981201171875, -0.22402000427246094, -0.0010013580322265625, -0.0073032379150390625, -7.62939453125e-06, -7.82012939453125e-05, -0.44063544273376465, -4.529942543740617e-06, -3.814697265625e-06, -0.17931747436523438, -0.000392913818359375, -0.008392333984375, -0.3873879909515381, 0.0, -0.00112152099609375, -0.036429405212402344, -0.00055694580078125, -1.1444091796875e-05, -1.3231449127197266, -0.000385284423828125, -0.24903082847595215, 0.0, -0.7245998382568359, -1.33514404296875e-05, -0.0001354217529296875, -0.3830658197402954, 0.0], "score": -7.332295089192137, "model_output": {"hole4": "player", "hole0": "Charge", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"attr": "health", "value": {"_type": "Template52"}, "_type": "Attribute"}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Charge", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_attack()), self)\n        <UNK> = self.target.health\n"}], "index": 16}
{"beams": [{"choice_history": [121, 198, "<UNK>", "Yeti", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score_history": [-6.4849853515625e-05, -2.47955322265625e-05, -0.15789195895195007, -0.003576907329261303, -1.6689286894688848e-06, -3.576233211788349e-07, -4.649158654501662e-06, -2.193449836340733e-05, -9.34600830078125e-05, -0.008679389953613281, -0.00063323974609375, -0.0001264730526600033, -1.3709068298339844e-05, -7.152555099310121e-07, 0.0, -0.001414658036082983, 0.0, -0.00611722469329834, 0.0, -1.9788742065429688e-05, 0.0, -0.0002463854616507888, 0.0, -3.62396240234375e-05, -0.0003719329833984375, -3.814697265625e-06, -1.192074705613777e-07, 0.0, -7.24771452951245e-05, -2.0265579223632812e-06], "score": -0.17941877618363833, "model_output": {"hole4": "player", "hole0": "<UNK>Yeti", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "ALL", "_type": "Template14", "hole0": "Chillwind Yeti"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 4}]}, "inferred_code": "class <UNK>Yeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}, {"choice_history": [121, 198, "Chillwind", "Yeti", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score_history": [-6.4849853515625e-05, -2.47955322265625e-05, -1.9649044275283813, -0.003576907329261303, -1.6689286894688848e-06, -3.576233211788349e-07, -4.649158654501662e-06, -2.193449836340733e-05, -9.34600830078125e-05, -0.008679389953613281, -0.00063323974609375, -0.0001264730526600033, -1.3709068298339844e-05, -7.152555099310121e-07, 0.0, -0.001414658036082983, 0.0, -0.00611722469329834, 0.0, -1.9788742065429688e-05, 0.0, -0.0002463854616507888, 0.0, -3.62396240234375e-05, -0.0003719329833984375, -3.814697265625e-06, -1.192074705613777e-07, 0.0, -7.24771452951245e-05, -2.0265579223632812e-06], "score": -1.9864312447600696, "model_output": {"hole4": "player", "hole0": "ChillwindYeti", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "ALL", "_type": "Template14", "hole0": "Chillwind Yeti"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 4}]}, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}, {"choice_history": [121, 198, "<UNK>", "Yeti", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score_history": [-6.4849853515625e-05, -2.47955322265625e-05, -0.15789195895195007, -0.003576907329261303, -1.6689286894688848e-06, -3.576233211788349e-07, -4.649158654501662e-06, -2.193449836340733e-05, -9.34600830078125e-05, -5.353203773498535, -0.0009756088256835938, -0.00018952481332235038, -9.250616858480498e-05, -2.3841855067985307e-07, 0.0, -0.007977484725415707, 0.0, -0.0009212493896484375, 0.0, -7.05718994140625e-05, 0.0, -0.002307891845703125, -5.91278076171875e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -1.33514404296875e-05, -0.2462921142578125, -9.5367431640625e-06, -1.1444091796875e-05, 0.0, -3.8623809814453125e-05, 0.0, -1.9073486328125e-05, -0.00020599365234375, -3.0517578125e-05, 0.0, 0.0, -0.0004663598374463618, -4.208087921142578e-05], "score": -5.774626728614265, "model_output": {"hole4": "player", "hole0": "<UNK>Yeti", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Chillwind Yeti", "hole1": 4, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 4}]}, "inferred_code": "class <UNK>Yeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}, {"choice_history": [121, 198, "<UNK>", "Yeti", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score_history": [-6.4849853515625e-05, -2.47955322265625e-05, -0.15789195895195007, -0.003576907329261303, -1.6689286894688848e-06, -3.576233211788349e-07, -4.649158654501662e-06, -2.193449836340733e-05, -9.34600830078125e-05, -0.008679389953613281, -0.00063323974609375, -0.0001264730526600033, -1.3709068298339844e-05, -7.152555099310121e-07, 0.0, -0.001414658036082983, 0.0, -5.694571018218994, -1.9073486328125e-06, -1.8954275219584815e-05, 0.0, -0.002575372811406851, 0.0, -6.4849853515625e-05, -0.000133514404296875, -3.814697265625e-06, -1.192074705613777e-07, 0.0, -0.00010156172356801108, -3.814697265625e-06], "score": -5.870023694308884, "model_output": {"hole4": "player", "hole0": "<UNK>Yeti", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "MAGE", "_type": "Template14", "hole0": "Chillwind Yeti"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 4}]}, "inferred_code": "class <UNK>Yeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}, {"choice_history": [121, 198, "<UNK>", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score_history": [-6.4849853515625e-05, -2.47955322265625e-05, -0.15789195895195007, -5.701880931854248, -5.602820692729438e-06, -1.1920906217710581e-07, -2.503394853192731e-06, -1.7881382518680766e-05, -0.000118255615234375, -0.006581306457519531, -0.0004062652587890625, -0.00015579440514557064, -1.1801719665527344e-05, -7.152555099310121e-07, 0.0, -0.0013816362479701638, 0.0, -0.007152915000915527, 0.0, -1.9788742065429688e-05, 0.0, -0.0002296990278409794, 0.0, -3.62396240234375e-05, -0.0003871917724609375, -3.814697265625e-06, 0.0, 0.0, -7.200033724075183e-05, -2.0265579223632812e-06], "score": -5.876448093718636, "model_output": {"hole4": "player", "hole0": "<UNK><UNK>", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "ALL", "_type": "Template14", "hole0": "Chillwind Yeti"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 4}]}, "inferred_code": "class <UNK><UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}, {"choice_history": [121, 198, "<UNK>", "Yeti", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score_history": [-6.4849853515625e-05, -2.47955322265625e-05, -0.15789195895195007, -0.003576907329261303, -1.6689286894688848e-06, -3.576233211788349e-07, -4.649158654501662e-06, -2.193449836340733e-05, -9.34600830078125e-05, -0.008679389953613281, -0.00063323974609375, -0.0001264730526600033, -1.3709068298339844e-05, -7.152555099310121e-07, 0.0, -0.001414658036082983, 0.0, -5.982740879058838, 0.0, -0.00026035308837890625, 0.0, -0.0012117825681343675, 0.0, -6.4849853515625e-05, -0.0001430511474609375, -5.7220458984375e-06, 0.0, 0.0, -7.974813343025744e-05, -3.814697265625e-06], "score": -6.15705896766417, "model_output": {"hole4": "player", "hole0": "<UNK>Yeti", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Chillwind Yeti"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 4}]}, "inferred_code": "class <UNK>Yeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}, {"choice_history": [121, 198, "Force", "Yeti", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score_history": [-6.4849853515625e-05, -2.47955322265625e-05, -5.380622863769531, -0.7520483732223511, -0.00035529976594261825, -2.384149411227554e-07, -2.741813204920618e-06, -1.7642965758568607e-05, -8.58306884765625e-05, -0.025072097778320312, -0.00058746337890625, -0.0001776060671545565, -1.7404556274414062e-05, -9.536738616588991e-07, 0.0, -0.0014456517528742552, 0.0, -0.0051882266998291016, 0.0, -1.9669532775878906e-05, 0.0, -0.0001913194719236344, 0.0, -3.814697265625e-05, -0.000392913818359375, -3.814697265625e-06, -1.192074705613777e-07, 0.0, -7.17619332135655e-05, -2.0265579223632812e-06], "score": -6.166431812124756, "model_output": {"hole4": "player", "hole0": "ForceYeti", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "ALL", "_type": "Template14", "hole0": "Chillwind Yeti"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 4}]}, "inferred_code": "class ForceYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}, {"choice_history": [121, 198, "Force", "Tank", "Yeti", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score_history": [-6.4849853515625e-05, -2.47955322265625e-05, -5.380622863769531, -0.8395872116088867, -0.08444403856992722, -5.960462203802308e-06, -4.768298822455108e-07, -5.6028297876764555e-06, -2.0384788513183594e-05, -5.340576171875e-05, -0.090057373046875, -0.0008296966552734375, -0.00023529145983047783, -1.3589859008789062e-05, -8.344646857949556e-07, 0.0, -0.0012741173850372434, 0.0, -0.005705118179321289, 0.0, -1.7881393432617188e-05, 0.0, -0.00021944988111499697, 0.0, -3.814697265625e-05, -0.0003566741943359375, -3.814697265625e-06, -1.192074705613777e-07, 0.0, -7.533797906944528e-05, -2.0265579223632812e-06], "score": -6.403659061939493, "model_output": {"hole4": "player", "hole0": "ForceTankYeti", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "ALL", "_type": "Template14", "hole0": "Chillwind Yeti"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 4}]}, "inferred_code": "class ForceTankYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}, {"choice_history": [121, 198, "<UNK>", "Yeti", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Chillwind", " ", "Yeti", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score_history": [-6.4849853515625e-05, -2.47955322265625e-05, -0.15789195895195007, -0.003576907329261303, -1.6689286894688848e-06, -3.576233211788349e-07, -4.649158654501662e-06, -2.193449836340733e-05, -9.34600830078125e-05, -0.008679389953613281, -0.00063323974609375, -0.0001264730526600033, -1.3709068298339844e-05, -7.152555099310121e-07, 0.0, -6.608440399169922, 0.0, -0.019353270530700684, 0.0, -2.9087066650390625e-05, 0.0, -0.00026306742802262306, 0.0, -3.4332275390625e-05, -0.0003223419189453125, -3.814697265625e-06, -1.192074705613777e-07, 0.0, -6.830508209532127e-05, -2.0265579223632812e-06], "score": -6.799650872969551, "model_output": {"hole4": "player", "hole0": "<UNK>Yeti", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Chillwind Yeti"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 4}]}, "inferred_code": "class <UNK>Yeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}, {"choice_history": [121, 198, "<UNK>", "Yeti", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score_history": [-6.4849853515625e-05, -2.47955322265625e-05, -0.15789195895195007, -0.003576907329261303, -1.6689286894688848e-06, -3.576233211788349e-07, -4.649158654501662e-06, -2.193449836340733e-05, -9.34600830078125e-05, -6.52316951751709, -0.00064849853515625, -5.483612312673358e-06, -1.239776611328125e-05, -2.7418097943154862e-06, 0.0, -0.0030232658609747887, 0.0, -0.0059661865234375, -3.814697265625e-06, -0.10966014862060547, 0.0, -0.00010502338409423828, 0.0, -7.259786070790142e-05, 0.0, -3.4332275390625e-05, -0.28108787536621094, -1.1444091796875e-05, 0.0, 0.0, -3.4927896194858477e-05, -3.814697265625e-06], "score": -7.085522652473401, "model_output": {"hole4": "player", "hole0": "<UNK>Yeti", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "ALL", "_type": "Template15", "hole3": "FREE", "hole0": "Chillwind Yeti"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 4}]}, "inferred_code": "class <UNK>Yeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}, {"choice_history": [121, 198, "Chillwind", "Yeti", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score_history": [-6.4849853515625e-05, -2.47955322265625e-05, -1.9649044275283813, -0.003576907329261303, -1.6689286894688848e-06, -3.576233211788349e-07, -4.649158654501662e-06, -2.193449836340733e-05, -9.34600830078125e-05, -5.353203773498535, -0.0009756088256835938, -0.00018952481332235038, -9.250616858480498e-05, -2.3841855067985307e-07, 0.0, -0.007977484725415707, 0.0, -0.0009212493896484375, 0.0, -7.05718994140625e-05, 0.0, -0.002307891845703125, -5.91278076171875e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -1.33514404296875e-05, -0.2462921142578125, -9.5367431640625e-06, -1.1444091796875e-05, 0.0, -3.8623809814453125e-05, 0.0, -1.9073486328125e-05, -0.00020599365234375, -3.0517578125e-05, 0.0, 0.0, -0.0004663598374463618, -4.208087921142578e-05], "score": -7.581639197190697, "model_output": {"hole4": "player", "hole0": "ChillwindYeti", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Chillwind Yeti", "hole1": 4, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 4}]}, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}, {"choice_history": [121, 198, "Chillwind", "Yeti", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score_history": [-6.4849853515625e-05, -2.47955322265625e-05, -1.9649044275283813, -0.003576907329261303, -1.6689286894688848e-06, -3.576233211788349e-07, -4.649158654501662e-06, -2.193449836340733e-05, -9.34600830078125e-05, -0.008679389953613281, -0.00063323974609375, -0.0001264730526600033, -1.3709068298339844e-05, -7.152555099310121e-07, 0.0, -0.001414658036082983, 0.0, -5.694571018218994, -1.9073486328125e-06, -1.8954275219584815e-05, 0.0, -0.002575372811406851, 0.0, -6.4849853515625e-05, -0.000133514404296875, -3.814697265625e-06, -1.192074705613777e-07, 0.0, -0.00010156172356801108, -3.814697265625e-06], "score": -7.677036162885315, "model_output": {"hole4": "player", "hole0": "ChillwindYeti", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "MAGE", "_type": "Template14", "hole0": "Chillwind Yeti"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 4}]}, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}, {"choice_history": [121, 198, "Chillwind", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score_history": [-6.4849853515625e-05, -2.47955322265625e-05, -1.9649044275283813, -5.701880931854248, -5.602820692729438e-06, -1.1920906217710581e-07, -2.503394853192731e-06, -1.7881382518680766e-05, -0.000118255615234375, -0.006581306457519531, -0.0004062652587890625, -0.00015579440514557064, -1.1801719665527344e-05, -7.152555099310121e-07, 0.0, -0.0013816362479701638, 0.0, -0.007152915000915527, 0.0, -1.9788742065429688e-05, 0.0, -0.0002296990278409794, 0.0, -3.62396240234375e-05, -0.0003871917724609375, -3.814697265625e-06, 0.0, 0.0, -7.200033724075183e-05, -2.0265579223632812e-06], "score": -7.683460562295068, "model_output": {"hole4": "player", "hole0": "Chillwind<UNK>", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "ALL", "_type": "Template14", "hole0": "Chillwind Yeti"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 4}]}, "inferred_code": "class Chillwind<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}, {"choice_history": [121, 198, "<UNK>", "Yeti", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score_history": [-6.4849853515625e-05, -2.47955322265625e-05, -0.15789195895195007, -0.003576907329261303, -1.6689286894688848e-06, -3.576233211788349e-07, -4.649158654501662e-06, -2.193449836340733e-05, -9.34600830078125e-05, -5.353203773498535, -0.0009756088256835938, -0.00018952481332235038, -9.250616858480498e-05, -2.3841855067985307e-07, 0.0, -0.007977484725415707, 0.0, -0.0009212493896484375, 0.0, -7.05718994140625e-05, 0.0, -0.002307891845703125, -5.91278076171875e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -1.33514404296875e-05, -2.192045211791992, -5.7220458984375e-06, -9.5367431640625e-06, 0.0, -1.1444089977885596e-05, 0.0, -2.86102294921875e-05, -0.0001659393310546875, -3.24249267578125e-05, 0.0, 0.0, -0.0004315661499276757, -4.398822784423828e-05], "score": -7.720285427814332, "model_output": {"hole4": "player", "hole0": "<UNK>Yeti", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Chillwind Yeti", "hole1": 4, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 4}]}, "inferred_code": "class <UNK>Yeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}, {"choice_history": [121, 198, "<UNK>", "Yeti", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score_history": [-6.4849853515625e-05, -2.47955322265625e-05, -0.15789195895195007, -0.003576907329261303, -1.6689286894688848e-06, -3.576233211788349e-07, -4.649158654501662e-06, -2.193449836340733e-05, -9.34600830078125e-05, -5.353203773498535, -0.0009756088256835938, -0.00018952481332235038, -9.250616858480498e-05, -2.3841855067985307e-07, 0.0, -0.007977484725415707, 0.0, -0.0009212493896484375, 0.0, -7.05718994140625e-05, 0.0, -0.002307891845703125, -5.91278076171875e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -1.33514404296875e-05, -2.4244470596313477, -2.288818359375e-05, -7.62939453125e-06, 0.0, -1.621246337890625e-05, 0.0, -2.09808349609375e-05, -0.00016021728515625, -3.24249267578125e-05, 0.0, 0.0, -0.0004797041474375874, -4.589557647705078e-05], "score": -7.952743996721864, "model_output": {"hole4": "player", "hole0": "<UNK>Yeti", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Chillwind Yeti", "hole1": 4, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 4}]}, "inferred_code": "class <UNK>Yeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}], "index": 17}
{"beams": [{"choice_history": [121, 200, "Claw", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "score_history": [-0.0001983642578125, -5.53131103515625e-05, -1.2516897186287679e-05, -0.00020466548448894173, -2.3364671505987644e-05, -0.000102996826171875, -3.814697265625e-05, -0.0001049041748046875, -0.0047054290771484375, -8.96453857421875e-05, -8.463859558105469e-06, -3.814697265625e-06, -0.00015962112229317427, 0.0, -0.0011944770812988281, 0.0, -0.0018856525421142578, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.00013089146523270756, 0.0, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.255703970557079e-05, -2.0265579223632812e-06, -0.0004520416259765625, -0.0057315826416015625, -0.00090789794921875, -9.5367431640625e-06, -3.814697265625e-05, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.000141143798828125, -0.00035511344322003424, 0.0, -0.004672050476074219, 0.0, -0.0002846393035724759, 0.0, -0.008040428161621094, 0.0, -9.1552734375e-05, -1.1444091796875e-05, -0.000164031982421875, -1.9073486328125e-06, -0.0001125335693359375, -0.00031149378628470004, 0.0, -0.4839209318161011, 0.0, -0.0004434549482539296, 0.0], "score": -0.5148301660392463, "model_output": {"hole4": "player", "hole0": "Claw", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"hole1": "increase_armor", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "Claw"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n"}, {"choice_history": [121, 200, "Claw", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "score_history": [-0.0001983642578125, -5.53131103515625e-05, -1.2516897186287679e-05, -0.00020466548448894173, -2.3364671505987644e-05, -0.000102996826171875, -3.814697265625e-05, -0.0001049041748046875, -0.0047054290771484375, -8.96453857421875e-05, -8.463859558105469e-06, -3.814697265625e-06, -0.00015962112229317427, 0.0, -0.0011944770812988281, 0.0, -0.0018856525421142578, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.00013089146523270756, 0.0, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.255703970557079e-05, -2.0265579223632812e-06, -0.0004520416259765625, -0.0057315826416015625, -0.00090789794921875, -9.5367431640625e-06, -3.814697265625e-05, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.000141143798828125, -0.00035511344322003424, 0.0, -0.004672050476074219, 0.0, -0.0002846393035724759, 0.0, -0.008040428161621094, 0.0, -9.1552734375e-05, -1.1444091796875e-05, -0.000164031982421875, -1.9073486328125e-06, -0.0001125335693359375, -0.00031149378628470004, 0.0, -1.0010040998458862, 0.0, -0.0019327495247125626, 0.0], "score": -1.03340262864549, "model_output": {"hole4": "player", "hole0": "Claw", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "Claw"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.change_temp_attack(2)\n"}, {"choice_history": [121, 200, "Claw", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", "2", "<EOS>"], "score_history": [-0.0001983642578125, -5.53131103515625e-05, -1.2516897186287679e-05, -0.00020466548448894173, -2.3364671505987644e-05, -0.000102996826171875, -3.814697265625e-05, -0.0001049041748046875, -0.0047054290771484375, -8.96453857421875e-05, -8.463859558105469e-06, -3.814697265625e-06, -0.00015962112229317427, 0.0, -0.0011944770812988281, 0.0, -0.0018856525421142578, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.00013089146523270756, 0.0, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.255703970557079e-05, -2.0265579223632812e-06, -0.0004520416259765625, -0.0057315826416015625, -0.00090789794921875, -9.5367431640625e-06, -3.814697265625e-05, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.000141143798828125, -0.00035511344322003424, 0.0, -0.004672050476074219, 0.0, -0.0002846393035724759, 0.0, -0.008040428161621094, 0.0, -9.1552734375e-05, -1.1444091796875e-05, -0.000164031982421875, -1.9073486328125e-06, -0.0001125335693359375, -0.00031149378628470004, 0.0, -5.3371124267578125, 0.0, -0.000667237676680088, 0.0], "score": -5.368245443709384, "model_output": {"hole4": "player", "hole0": "Claw", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"hole1": "heal", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "Claw"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.heal(2)\n"}, {"choice_history": [121, 200, "Claw", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0001983642578125, -5.53131103515625e-05, -1.2516897186287679e-05, -0.00020466548448894173, -2.3364671505987644e-05, -0.000102996826171875, -3.814697265625e-05, -0.0001049041748046875, -0.0047054290771484375, -8.96453857421875e-05, -8.463859558105469e-06, -3.814697265625e-06, -0.00015962112229317427, 0.0, -0.0011944770812988281, 0.0, -0.0018856525421142578, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.00013089146523270756, 0.0, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.255703970557079e-05, -2.0265579223632812e-06, -0.0004520416259765625, -0.0057315826416015625, -0.00090789794921875, -9.5367431640625e-06, -3.814697265625e-05, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.000141143798828125, -0.00035511344322003424, 0.0, -0.004672050476074219, 0.0, -0.0002846393035724759, 0.0, -5.765552520751953, -4.00543212890625e-05, -0.009617805480957031, 0.0, -0.0001621246337890625, -0.0013010501861572266, -2.0265579223632812e-06, -0.04282544180750847, -1.9073486328125e-06, -0.00069427490234375, -0.009217262268066406, -2.288818359375e-05, -0.00012969970703125, -0.006501555442810059, -4.0531158447265625e-06, -0.0003762243431992829, -1.9073486328125e-06, -0.000644683837890625], "score": -5.858827867838045, "model_output": {"hole4": "player", "hole0": "Claw", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "Claw"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Claw", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "set_health_to", "<EOS>", "2", "<EOS>"], "score_history": [-0.0001983642578125, -5.53131103515625e-05, -1.2516897186287679e-05, -0.00020466548448894173, -2.3364671505987644e-05, -0.000102996826171875, -3.814697265625e-05, -0.0001049041748046875, -0.0047054290771484375, -8.96453857421875e-05, -8.463859558105469e-06, -3.814697265625e-06, -0.00015962112229317427, 0.0, -0.0011944770812988281, 0.0, -0.0018856525421142578, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.00013089146523270756, 0.0, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.255703970557079e-05, -2.0265579223632812e-06, -0.0004520416259765625, -0.0057315826416015625, -0.00090789794921875, -9.5367431640625e-06, -3.814697265625e-05, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.000141143798828125, -0.00035511344322003424, 0.0, -0.004672050476074219, 0.0, -0.0002846393035724759, 0.0, -0.008040428161621094, 0.0, -9.1552734375e-05, -1.1444091796875e-05, -0.000164031982421875, -1.9073486328125e-06, -0.0001125335693359375, -0.00031149378628470004, 0.0, -6.740240573883057, 0.0, -0.00032563897548243403, 0.0], "score": -6.77103199213343, "model_output": {"hole4": "player", "hole0": "Claw", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"hole1": "set_health_to", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "Claw"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.set_health_to(2)\n"}, {"choice_history": [121, 200, "Claw", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "score_history": [-0.0001983642578125, -5.53131103515625e-05, -1.2516897186287679e-05, -0.00020466548448894173, -2.3364671505987644e-05, -0.000102996826171875, -3.814697265625e-05, -0.0001049041748046875, -0.0047054290771484375, -8.96453857421875e-05, -8.463859558105469e-06, -3.814697265625e-06, -0.00015962112229317427, 0.0, -0.0011944770812988281, 0.0, -0.0018856525421142578, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.00013089146523270756, 0.0, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.255703970557079e-05, -2.0265579223632812e-06, -0.0004520416259765625, -0.0057315826416015625, -0.00090789794921875, -9.5367431640625e-06, -3.814697265625e-05, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.000141143798828125, -0.00035511344322003424, 0.0, -6.49971866607666, 0.0, -0.0004493114538490772, 0.0, -0.02929401397705078, 0.0, -0.000156402587890625, -1.1444091796875e-05, -0.0001697540283203125, -1.9073486328125e-06, -8.20159912109375e-05, -0.000264644535491243, 0.0, -0.5051218271255493, 0.0, -0.0016600973904132843, 0.0], "score": -7.053705782427642, "model_output": {"hole4": "player", "hole0": "Claw", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "heal", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "Claw"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.heal(2)\n        player.hero.change_temp_attack(2)\n"}, {"choice_history": [121, 200, "Claw", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "Heal", "<EOS>", "2", "<EOS>"], "score_history": [-0.0001983642578125, -5.53131103515625e-05, -1.2516897186287679e-05, -0.00020466548448894173, -2.3364671505987644e-05, -0.000102996826171875, -3.814697265625e-05, -0.0001049041748046875, -0.0047054290771484375, -8.96453857421875e-05, -8.463859558105469e-06, -3.814697265625e-06, -0.00015962112229317427, 0.0, -0.0011944770812988281, 0.0, -0.0018856525421142578, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.00013089146523270756, 0.0, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.255703970557079e-05, -2.0265579223632812e-06, -0.0004520416259765625, -0.0057315826416015625, -0.00090789794921875, -9.5367431640625e-06, -3.814697265625e-05, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.000141143798828125, -0.00035511344322003424, 0.0, -0.004672050476074219, 0.0, -0.0002846393035724759, 0.0, -0.008040428161621094, 0.0, -9.1552734375e-05, -1.1444091796875e-05, -0.000164031982421875, -1.9073486328125e-06, -0.0001125335693359375, -0.00031149378628470004, 0.0, -7.127465724945068, 0.0, -0.0004902801010757685, 0.0], "score": -7.158421784321035, "model_output": {"hole4": "player", "hole0": "Claw", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"hole1": "Heal", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "Claw"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.Heal(2)\n"}, {"choice_history": [121, 200, "Claw", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 143, 235, "2", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "score_history": [-0.0001983642578125, -5.53131103515625e-05, -1.2516897186287679e-05, -0.00020466548448894173, -2.3364671505987644e-05, -0.000102996826171875, -3.814697265625e-05, -0.0001049041748046875, -0.0047054290771484375, -8.96453857421875e-05, -8.463859558105469e-06, -3.814697265625e-06, -0.00015962112229317427, 0.0, -0.0011944770812988281, 0.0, -0.0018856525421142578, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.00013089146523270756, 0.0, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.255703970557079e-05, -2.0265579223632812e-06, -0.0004520416259765625, -6.505102157592773, -0.08890247344970703, -0.06806659698486328, -1.1920928244535389e-07, -0.008629918098449707, -1.1920928244535389e-07, -0.3010749816894531, -1.52587890625e-05, -0.0002841949462890625, -0.0001068115234375, -0.007404327392578125, 0.0, -0.0001468658447265625, -0.0003877705312334001, 0.0, -0.025021076202392578, 0.0, -0.0007253250805661082, 0.0, -0.007130622863769531, 0.0, -4.00543212890625e-05, -7.62939453125e-06, -0.000324249267578125, -1.9073486328125e-06, -0.000308990478515625, -0.000340104044880718, -1.9073486328125e-06, -0.1592005491256714, 0.0, -0.0005708803655579686, 0.0], "score": -7.183289892594971, "model_output": {"hole4": "player", "hole0": "Claw", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 2}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"hole1": "increase_armor", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "Claw"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        return Minion(2, 2)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n"}, {"choice_history": [121, 200, "Claw", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "increase_health", "<EOS>", "2", "<EOS>"], "score_history": [-0.0001983642578125, -5.53131103515625e-05, -1.2516897186287679e-05, -0.00020466548448894173, -2.3364671505987644e-05, -0.000102996826171875, -3.814697265625e-05, -0.0001049041748046875, -0.0047054290771484375, -8.96453857421875e-05, -8.463859558105469e-06, -3.814697265625e-06, -0.00015962112229317427, 0.0, -0.0011944770812988281, 0.0, -0.0018856525421142578, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.00013089146523270756, 0.0, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.255703970557079e-05, -2.0265579223632812e-06, -0.0004520416259765625, -0.0057315826416015625, -0.00090789794921875, -9.5367431640625e-06, -3.814697265625e-05, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.000141143798828125, -0.00035511344322003424, 0.0, -0.004672050476074219, 0.0, -0.0002846393035724759, 0.0, -0.008040428161621094, 0.0, -9.1552734375e-05, -1.1444091796875e-05, -0.000164031982421875, -1.9073486328125e-06, -0.0001125335693359375, -0.00031149378628470004, 0.0, -7.163328170776367, 0.0, -0.0008190879598259926, 0.0], "score": -7.194613038011084, "model_output": {"hole4": "player", "hole0": "Claw", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"hole1": "increase_health", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "Claw"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_health(2)\n"}, {"choice_history": [121, 200, "Claw", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "score_history": [-0.0001983642578125, -5.53131103515625e-05, -1.2516897186287679e-05, -0.00020466548448894173, -2.3364671505987644e-05, -0.000102996826171875, -3.814697265625e-05, -0.0001049041748046875, -0.0047054290771484375, -8.96453857421875e-05, -8.463859558105469e-06, -3.814697265625e-06, -0.00015962112229317427, 0.0, -0.0011944770812988281, 0.0, -0.0018856525421142578, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.00013089146523270756, 0.0, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.255703970557079e-05, -2.0265579223632812e-06, -0.0004520416259765625, -0.0057315826416015625, -0.00090789794921875, -9.5367431640625e-06, -3.814697265625e-05, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.000141143798828125, -0.00035511344322003424, 0.0, -6.589874267578125, 0.0, -0.0003110170364379883, 0.0, -0.011716842651367188, -1.9073486328125e-06, -0.00011444091796875, -1.1444091796875e-05, -0.0002002716064453125, 0.0, -9.72747802734375e-05, -0.00026273709954693913, 0.0, -0.596203088760376, 0.0, -0.00042139962897635996, 0.0], "score": -7.215990389320723, "model_output": {"hole4": "player", "hole0": "Claw", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "increase_armor", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"hole1": "increase_armor", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "Claw"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(2)\n        player.hero.increase_armor(2)\n"}, {"choice_history": [121, 200, "Claw", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "filter_func", "<EOS>", "2", "<EOS>"], "score_history": [-0.0001983642578125, -5.53131103515625e-05, -1.2516897186287679e-05, -0.00020466548448894173, -2.3364671505987644e-05, -0.000102996826171875, -3.814697265625e-05, -0.0001049041748046875, -0.0047054290771484375, -8.96453857421875e-05, -8.463859558105469e-06, -3.814697265625e-06, -0.00015962112229317427, 0.0, -0.0011944770812988281, 0.0, -0.0018856525421142578, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.00013089146523270756, 0.0, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.255703970557079e-05, -2.0265579223632812e-06, -0.0004520416259765625, -0.0057315826416015625, -0.00090789794921875, -9.5367431640625e-06, -3.814697265625e-05, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.000141143798828125, -0.00035511344322003424, 0.0, -0.004672050476074219, 0.0, -0.0002846393035724759, 0.0, -0.008040428161621094, 0.0, -9.1552734375e-05, -1.1444091796875e-05, -0.000164031982421875, -1.9073486328125e-06, -0.0001125335693359375, -0.00031149378628470004, 0.0, -7.332498073577881, -1.9073486328125e-06, -0.0012604300864040852, 0.0], "score": -7.364226190287809, "model_output": {"hole4": "player", "hole0": "Claw", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"hole1": "filter_func", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "Claw"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.filter_func(2)\n"}, {"choice_history": [121, 200, "Claw", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "score_history": [-0.0001983642578125, -5.53131103515625e-05, -1.2516897186287679e-05, -0.00020466548448894173, -2.3364671505987644e-05, -0.000102996826171875, -3.814697265625e-05, -0.0001049041748046875, -0.0047054290771484375, -8.96453857421875e-05, -8.463859558105469e-06, -3.814697265625e-06, -0.00015962112229317427, 0.0, -0.0011944770812988281, 0.0, -0.0018856525421142578, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.00013089146523270756, 0.0, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.255703970557079e-05, -2.0265579223632812e-06, -0.0004520416259765625, -0.0057315826416015625, -0.00090789794921875, -9.5367431640625e-06, -3.814697265625e-05, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.000141143798828125, -0.00035511344322003424, 0.0, -6.589874267578125, 0.0, -0.0003110170364379883, 0.0, -0.011716842651367188, -1.9073486328125e-06, -0.00011444091796875, -1.1444091796875e-05, -0.0002002716064453125, 0.0, -9.72747802734375e-05, -0.00026273709954693913, 0.0, -0.8392040729522705, 0.0, -0.002088325098156929, 0.0], "score": -7.460658298981798, "model_output": {"hole4": "player", "hole0": "Claw", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "increase_armor", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "Claw"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(2)\n        player.hero.change_temp_attack(2)\n"}, {"choice_history": [121, 200, "Claw", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "score_history": [-0.0001983642578125, -5.53131103515625e-05, -1.2516897186287679e-05, -0.00020466548448894173, -2.3364671505987644e-05, -0.000102996826171875, -3.814697265625e-05, -0.0001049041748046875, -0.0047054290771484375, -8.96453857421875e-05, -8.463859558105469e-06, -3.814697265625e-06, -0.00015962112229317427, 0.0, -0.0011944770812988281, 0.0, -0.0018856525421142578, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.00013089146523270756, 0.0, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.255703970557079e-05, -2.0265579223632812e-06, -0.0004520416259765625, -0.0057315826416015625, -0.00090789794921875, -9.5367431640625e-06, -3.814697265625e-05, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.000141143798828125, -0.00035511344322003424, 0.0, -6.49971866607666, 0.0, -0.0004493114538490772, 0.0, -0.02929401397705078, 0.0, -0.000156402587890625, -1.1444091796875e-05, -0.0001697540283203125, -1.9073486328125e-06, -8.20159912109375e-05, -0.000264644535491243, 0.0, -0.9760366678237915, 0.0, -0.00039851455949246883, 0.0], "score": -7.523359040294963, "model_output": {"hole4": "player", "hole0": "Claw", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "heal", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"hole1": "increase_armor", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "Claw"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.heal(2)\n        player.hero.increase_armor(2)\n"}, {"choice_history": [121, 200, "Claw", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 147], "score_history": [-0.0001983642578125, -5.53131103515625e-05, -1.2516897186287679e-05, -0.00020466548448894173, -2.3364671505987644e-05, -0.000102996826171875, -3.814697265625e-05, -0.0001049041748046875, -0.0047054290771484375, -8.96453857421875e-05, -8.463859558105469e-06, -3.814697265625e-06, -0.00015962112229317427, 0.0, -0.0011944770812988281, 0.0, -0.0018856525421142578, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.00013089146523270756, 0.0, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.255703970557079e-05, -2.0265579223632812e-06, -0.0004520416259765625, -0.0057315826416015625, -0.00090789794921875, -9.5367431640625e-06, -3.814697265625e-05, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.000141143798828125, -0.00035511344322003424, 0.0, -0.004672050476074219, 0.0, -0.0002846393035724759, 0.0, -7.852461814880371], "score": -7.874194202480794, "model_output": {"hole4": "player", "hole0": "Claw", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}, {"_type": "Template55_stmt_seq"}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "Claw"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n"}, {"choice_history": [121, 200, "Claw", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 139, 204, "<UNK>", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>"], "score_history": [-0.0001983642578125, -5.53131103515625e-05, -1.2516897186287679e-05, -0.00020466548448894173, -2.3364671505987644e-05, -0.000102996826171875, -3.814697265625e-05, -0.0001049041748046875, -0.0047054290771484375, -8.96453857421875e-05, -8.463859558105469e-06, -3.814697265625e-06, -0.00015962112229317427, 0.0, -0.0011944770812988281, 0.0, -0.0018856525421142578, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.00013089146523270756, 0.0, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.255703970557079e-05, -2.0265579223632812e-06, -0.0004520416259765625, -0.0057315826416015625, -0.00090789794921875, -9.5367431640625e-06, -3.814697265625e-05, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.000141143798828125, -0.00035511344322003424, 0.0, -0.004672050476074219, 0.0, -0.0002846393035724759, 0.0, -7.802546977996826, -0.38922786712646484, -0.842107892036438, -0.000110626220703125, -0.040381189435720444, 0.0, -0.10858941078186035, 0.0], "score": -9.204696351198436, "model_output": {"hole4": "player", "hole0": "Claw", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_temp_attack", "hole2": 2, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}, {"hole1": 1, "hole2": "DRUID", "_type": "Template14", "hole0": "<UNK>"}], "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "Claw"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        super().__init__('<UNK>', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\n"}], "index": 18}
{"beams": [{"choice_history": [121, 201, "Cleave", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 126, 155, 320, 73, 186, "minions", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 334, 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "minions", "<EOS>", 145, 250, 25, 186, "minions", "<EOS>", "remove", "<EOS>", 320, 73, 186, "minion", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 102], "score_history": [-5.91278076171875e-05, -1.0149641036987305, -2.1219027985353023e-05, -2.50339189733495e-06, -0.0001752227544784546, -0.00012791156768798828, -3.814697265625e-06, -0.000156402587890625, -0.004731178283691406, -0.000133514404296875, -8.344646857949556e-07, -3.814697265625e-06, -1.1681979231070727e-05, 0.0, -0.03476572036743164, -0.0012340545654296875, -4.38690185546875e-05, -1.9073486328125e-06, -0.00040459632873535156, 0.0, -1.71661376953125e-05, -0.000469207763671875, -4.76837158203125e-05, -2.0265579223632812e-05, -2.3841855067985307e-07, -0.020821571350097656, -0.0002803802490234375, -0.021302223205566406, -1.9073486328125e-05, -3.4332275390625e-05, -0.000274658203125, -1.9073486328125e-06, -0.005545258056372404, -1.71661376953125e-05, -3.814697265625e-05, -0.000339508056640625, -7.62939453125e-06, -1.9073486328125e-06, -0.0051860809326171875, 0.0, -0.0010223385179415345, -2.300739288330078e-05, -0.0010716905817389488, -1.9073486328125e-06, -1.9073486328125e-05, -0.001068115234375, -1.9073486328125e-06, -4.00543212890625e-05, -3.814697265625e-05, -4.38690185546875e-05, -1.9073486328125e-06, -7.987022399902344e-06, -1.3589766240329482e-05, -0.0016803740290924907, -3.0517570849042386e-05, -0.0016555440379306674, -5.340576171875e-05, -0.0028400421142578125, -0.000255584716796875, -8.96453857421875e-05, 0.0, -0.001229405403137207, -1.9073486328125e-06, -4.00543212890625e-05, -7.05718994140625e-05, -0.000240325927734375, 0.0, -0.0026571745984256268, -7.152555099310121e-07, -0.0001506805419921875, -0.0002002716064453125, -0.0032444000244140625, -0.006160736083984375, -0.0002880096435546875, -9.34600830078125e-05, -0.0001964569091796875, -9.5367431640625e-06, -1.9073486328125e-06, -0.00033295154571533203, -6.198883056640625e-06, -4.38690185546875e-05, -0.00025177001953125, -7.62939453125e-05, -1.9073486328125e-06, -0.00014495849609375, -3.814697265625e-06, -0.01085042953491211, -1.168244216387393e-05, -0.011755585670471191, -1.9311904907226562e-05, -3.814697265625e-06, -3.62396240234375e-05, -4.38690185546875e-05, -0.004036903381347656, -2.0265579223632812e-06, -0.000766754150390625, -5.7220458984375e-06, -0.000152587890625, 0.0, -0.0035451650619506836, -8.0108642578125e-05, -0.0602639801800251, -1.9431114196777344e-05, -3.814697265625e-06, -0.000423431396484375, 0.0, -0.00048542022705078125, -1.5616416931152344e-05, -0.0011615753173828125, -3.814697265625e-05, -0.00092315673828125, 0.0, -0.002535938983783126, -4.815980719286017e-05, -0.0015482305316254497, 0.0, -0.000690460205078125, -0.0010128021240234375, -1.9073486328125e-06, -4.38690185546875e-05, -0.00011265277862548828, 0.0, -0.10243475437164307, 0.0, -8.20159912109375e-05, -0.0001659393310546875, -0.000179290771484375, -3.24249267578125e-05, -0.0002237557782791555, -2.288818359375e-05, -0.0006256103515625, -4.76837158203125e-05, -0.0006427764892578125, -0.000255584716796875, -0.00807952880859375, -3.814697265625e-05, -0.0006160736083984375, -0.008579254150390625, -0.0007762908935546875, -0.0009822845458984375, -2.09808349609375e-05, -3.62396240234375e-05, -7.188312156358734e-05, -1.1444091796875e-05, -0.0014443397521972656, 0.0, -0.0038682222366333008, 0.0, -0.0004329681396484375, -1.9073486328125e-06, -0.0023746490478515625, -4.57763671875e-05, -7.05718994140625e-05, -0.00020599365234375, -7.62939453125e-06, 0.0, -0.0002371072769165039, 0.0, -1.9073486328125e-06, -0.0001697540283203125, 0.0, -0.0033283233642578125, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -3.4332275390625e-05, -2.3841855067985307e-07, -0.0006384849548339844, -3.4809112548828125e-05, -0.00023220751609187573, -0.0001316070556640625, -0.0001621246337890625, -0.024341583251953125, -0.0022945404052734375, -0.0015926361083984375], "score": -1.4029025854313772, "model_output": {"hole4": "player", "hole0": "Cleave", "hole7": [{"body": [{"value": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template59"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use", "args": {"_type": "Template17"}}], "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign"}, {"body": [{"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "minions"}]}, "targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign"}, {"hole1": "remove", "hole2": [{"_type": "Name", "id": "minion"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minions"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Cleave"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n"}, {"choice_history": [121, 200, "Cleave", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 126, 155, 320, 73, 186, "minions", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 334, 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "minions", "<EOS>", 145, 250, 25, 186, "minions", "<EOS>", "remove", "<EOS>", 320, 73, 186, "minion", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-5.91278076171875e-05, -0.4542808532714844, -6.7949122239951976e-06, -2.1457672119140625e-06, -5.36041334271431e-05, -5.7220458984375e-06, -1.919269561767578e-05, -0.0002841949462890625, -0.0060882568359375, -0.0002956390380859375, -1.1920928955078125e-06, -2.47955322265625e-05, -9.536597644910216e-07, 0.0, -0.026691675186157227, -0.0001678466796875, -2.6702880859375e-05, 0.0, -1.4185883628670126e-05, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -2.86102294921875e-05, -2.2649765014648438e-06, -2.0265579223632812e-06, -0.1474132537841797, -0.0005092620849609375, -1.0127286911010742, -3.24249267578125e-05, -1.52587890625e-05, -0.0001220703125, -1.9073486328125e-06, -0.07345426082611084, -3.0517578125e-05, -9.918212890625e-05, -7.2479248046875e-05, -1.9073486328125e-06, 0.0, -0.0002803802490234375, 0.0, -0.000993013265542686, -1.71661376953125e-05, -0.0007266984321177006, -3.814697265625e-06, -2.47955322265625e-05, -0.0005283355712890625, -1.9073486328125e-06, -4.1961669921875e-05, -2.47955322265625e-05, -1.1444091796875e-05, 0.0, -1.537799835205078e-05, -2.3841830625315197e-06, -0.001071572070941329, -8.82148651726311e-06, -0.000969261396676302, -0.000102996826171875, -0.016613006591796875, -8.96453857421875e-05, -2.47955322265625e-05, 0.0, -0.003933072090148926, -5.7220458984375e-06, -0.000102996826171875, -0.0001392364501953125, -9.1552734375e-05, 0.0, -0.0019850721582770348, -9.536738616588991e-07, -0.00011444091796875, -7.2479248046875e-05, -0.0040493011474609375, -0.020781517028808594, -0.00026702880859375, -4.76837158203125e-05, -0.0001010894775390625, -1.52587890625e-05, -1.9073486328125e-06, -0.00020515918731689453, -6.198883056640625e-06, -4.38690185546875e-05, -0.0002765655517578125, -0.0001049041748046875, -1.9073486328125e-06, -8.58306884765625e-05, -3.814697265625e-06, -0.015693187713623047, -1.1205610462639015e-05, -0.01137685775756836, -1.537799835205078e-05, -3.814697265625e-06, -3.814697265625e-05, -4.57763671875e-05, -0.004136085510253906, -2.0265579223632812e-06, -0.0005931854248046875, -5.7220458984375e-06, -0.0001773834228515625, 0.0, -0.0033658742904663086, -6.67572021484375e-05, -0.05918261408805847, -1.7523765563964844e-05, -3.814697265625e-06, -0.000446319580078125, 0.0, -0.0005121231079101562, -1.5497207641601562e-05, -0.0009860992431640625, -4.00543212890625e-05, -0.0007724761962890625, 0.0, -0.0029801130294799805, -4.184187491773628e-05, -0.0015263325767591596, 0.0, -0.0007457733154296875, -0.001087188720703125, -1.9073486328125e-06, -4.1961669921875e-05, -0.00011074542999267578, 0.0, -0.10238587856292725, 0.0, -8.392333984375e-05], "score": -1.9831376010474742, "model_output": {"hole4": "player", "hole0": "Cleave", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign"}, {"body": [{"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "minions"}]}, "targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign"}, {"hole1": "remove", "hole2": [{"_type": "Name", "id": "minion"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minions"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Cleave"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Cleave", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 134, 175, "hearthbreaker.cards.minions.druid", "<EOS>", 311, 306, "damage", "<EOS>", "0", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-5.91278076171875e-05, -0.4542808532714844, -6.7949122239951976e-06, -2.1457672119140625e-06, -5.36041334271431e-05, -5.7220458984375e-06, -1.919269561767578e-05, -0.0002841949462890625, -0.0060882568359375, -0.0002956390380859375, -1.1920928955078125e-06, -2.47955322265625e-05, -9.536597644910216e-07, 0.0, -0.026691675186157227, -0.0001678466796875, -2.6702880859375e-05, 0.0, -1.4185883628670126e-05, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -2.86102294921875e-05, -2.2649765014648438e-06, -2.0265579223632812e-06, -0.1474132537841797, -0.0005092620849609375, -0.6233615875244141, -0.009074211120605469, -0.0247568991035223, -5.7220458984375e-06, -0.9171361923217773, -0.051410675048828125, -0.0005256260628812015, -0.007712528109550476, -0.3793623447418213, -1.1920928244535389e-07, -0.010993003845214844, -0.0002079010009765625, -0.000213623046875, -1.9073486328125e-05, -0.0021822452545166016, -2.0265579223632812e-06, -0.009326934814453125, -0.0009937286376953125, -4.38690185546875e-05, 0.0, -5.7220458984375e-05, 0.0, -0.003706812858581543, -2.288818359375e-05, -0.0006822342402301729, -1.9073486328125e-06, -5.7220458984375e-06, -0.0003414154052734375, 0.0, -3.24249267578125e-05, -1.52587890625e-05, -1.1444091796875e-05, 0.0, -2.09808349609375e-05, -1.0728830375228426e-06, -0.0005209443042986095, -8.344650268554688e-06, -0.0007353090913966298, -0.0002498626708984375, -6.866455078125e-05, -0.0022487640380859375, -1.9073486328125e-06, -0.0003070831298828125, 0.0, -0.0007730202050879598, -2.3841574147809297e-05, -0.0005746588576585054, 0.0, -0.000396728515625, -0.0003490447998046875, -3.814697265625e-06, -4.9591064453125e-05, -0.00048089027404785156, -2.3841855067985307e-07, -0.5033826231956482, 0.0, -0.0001621246337890625], "score": -3.188640724820594, "model_output": {"hole4": "player", "hole0": "Cleave", "hole6": [{"_type": "Template19"}, {"level": 0, "module": "hearthbreaker.cards.minions.druid", "names": [{"_type": "alias", "name": "damage"}], "_type": "ImportFrom"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Cleave"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import damage\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Cleave", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-5.91278076171875e-05, -0.4542808532714844, -6.7949122239951976e-06, -2.1457672119140625e-06, -5.36041334271431e-05, -5.7220458984375e-06, -1.919269561767578e-05, -0.0002841949462890625, -0.0060882568359375, -0.0002956390380859375, -1.1920928955078125e-06, -2.47955322265625e-05, -9.536597644910216e-07, 0.0, -0.026691675186157227, -0.0001678466796875, -2.6702880859375e-05, 0.0, -1.4185883628670126e-05, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -2.86102294921875e-05, -2.2649765014648438e-06, -2.0265579223632812e-06, -2.4353418350219727, -0.0004215240478515625, -0.00081634521484375, -0.0005016326904296875, -0.003326416015625, -1.9073486328125e-06, -0.07744394242763519, -5.960462772236497e-07, -0.0004215240478515625, -0.0019779205322265625, -1.33514404296875e-05, -9.5367431640625e-06, -3.24249267578125e-05, 0.0, -0.0021561384201049805, -3.814697265625e-05, -0.000511884456500411, -1.9073486328125e-06, -7.62939453125e-06, -0.0002899169921875, 0.0, -2.86102294921875e-05, -4.00543212890625e-05, -9.5367431640625e-06, 0.0, -1.3470649719238281e-05, -3.576272320060525e-06, -0.0007987020653672516, -1.3113020031596534e-05, -0.001377453445456922, -8.7738037109375e-05, -6.4849853515625e-05, -0.0024585723876953125, -1.9073486328125e-06, -0.000335693359375, 0.0, -0.0005981582798995078, -2.2172682292875834e-05, -0.0004944744287058711, 0.0, -0.000408172607421875, -0.000423431396484375, -3.814697265625e-06, -4.9591064453125e-05, -0.0008939504623413086, -3.576278118089249e-07, -0.42892009019851685, 0.0, -0.00019073486328125], "score": -3.4487058660431558, "model_output": {"hole4": "player", "hole0": "Cleave", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Cleave"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Cleave", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 134, 175, "hearthbreaker.cards.minions.druid", "<EOS>", 311, 306, "damage", "<EOS>", "0", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110], "score_history": [-5.91278076171875e-05, -0.4542808532714844, -6.7949122239951976e-06, -2.1457672119140625e-06, -5.36041334271431e-05, -5.7220458984375e-06, -1.919269561767578e-05, -0.0002841949462890625, -0.0060882568359375, -0.0002956390380859375, -1.1920928955078125e-06, -2.47955322265625e-05, -9.536597644910216e-07, 0.0, -0.026691675186157227, -0.0001678466796875, -2.6702880859375e-05, 0.0, -1.4185883628670126e-05, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -2.86102294921875e-05, -2.2649765014648438e-06, -2.0265579223632812e-06, -0.1474132537841797, -0.0005092620849609375, -0.6233615875244141, -0.009074211120605469, -0.0247568991035223, -5.7220458984375e-06, -0.9171361923217773, -0.051410675048828125, -0.0005256260628812015, -0.007712528109550476, -0.3793623447418213, -1.1920928244535389e-07, -0.010993003845214844, -0.0002079010009765625, -0.000213623046875, -1.9073486328125e-05, -0.0021822452545166016, -2.0265579223632812e-06, -0.009326934814453125, -0.0009937286376953125, -4.38690185546875e-05, 0.0, -5.7220458984375e-05, 0.0, -0.003706812858581543, -2.288818359375e-05, -0.0006822342402301729, -1.9073486328125e-06, -5.7220458984375e-06, -0.0003414154052734375, 0.0, -3.24249267578125e-05, -1.52587890625e-05, -1.1444091796875e-05, 0.0, -2.09808349609375e-05, -1.0728830375228426e-06, -0.0005209443042986095, -8.344650268554688e-06, -0.0007353090913966298, -0.0002498626708984375, -6.866455078125e-05, -0.0022487640380859375, -1.9073486328125e-06, -0.0003070831298828125, 0.0, -0.0007730202050879598, -2.3841574147809297e-05, -0.0005746588576585054, 0.0, -0.000396728515625, -0.0003490447998046875, -3.814697265625e-06, -4.9591064453125e-05, -0.00048089027404785156, -2.3841855067985307e-07, -0.929484486579895, -3.933906555175781e-06, -0.0005435943603515625], "score": -3.6151279918379586, "model_output": {"hole4": "player", "hole0": "Cleave", "hole6": [{"_type": "Template19"}, {"level": 0, "module": "hearthbreaker.cards.minions.druid", "names": [{"_type": "alias", "name": "damage"}], "_type": "ImportFrom"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Cleave"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import damage\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n"}, {"choice_history": [121, 201, "Cleave", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 126, 155, 320, 73, 186, "minions", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 334, 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "minions", "<EOS>", 145, 250, 25, 186, "minions", "<EOS>", "remove", "<EOS>", 320, 73, 186, "minion", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 102], "score_history": [-5.91278076171875e-05, -1.0149641036987305, -2.1219027985353023e-05, -2.50339189733495e-06, -0.0001752227544784546, -0.00012791156768798828, -3.814697265625e-06, -0.000156402587890625, -0.004731178283691406, -0.000133514404296875, -8.344646857949556e-07, -3.814697265625e-06, -1.1681979231070727e-05, 0.0, -0.03476572036743164, -0.0012340545654296875, -4.38690185546875e-05, -1.9073486328125e-06, -0.00040459632873535156, 0.0, -1.71661376953125e-05, -0.000469207763671875, -4.76837158203125e-05, -2.0265579223632812e-05, -2.3841855067985307e-07, -0.020821571350097656, -0.0002803802490234375, -0.021302223205566406, -1.9073486328125e-05, -3.4332275390625e-05, -0.000274658203125, -1.9073486328125e-06, -0.005545258056372404, -1.71661376953125e-05, -3.814697265625e-05, -0.000339508056640625, -7.62939453125e-06, -1.9073486328125e-06, -0.0051860809326171875, 0.0, -0.0010223385179415345, -2.300739288330078e-05, -0.0010716905817389488, -1.9073486328125e-06, -1.9073486328125e-05, -0.001068115234375, -1.9073486328125e-06, -4.00543212890625e-05, -3.814697265625e-05, -4.38690185546875e-05, -1.9073486328125e-06, -7.987022399902344e-06, -1.3589766240329482e-05, -0.0016803740290924907, -3.0517570849042386e-05, -0.0016555440379306674, -5.340576171875e-05, -0.0028400421142578125, -0.000255584716796875, -8.96453857421875e-05, 0.0, -0.001229405403137207, -1.9073486328125e-06, -4.00543212890625e-05, -7.05718994140625e-05, -0.000240325927734375, 0.0, -0.0026571745984256268, -7.152555099310121e-07, -0.0001506805419921875, -0.0002002716064453125, -0.0032444000244140625, -0.006160736083984375, -0.0002880096435546875, -9.34600830078125e-05, -0.0001964569091796875, -9.5367431640625e-06, -1.9073486328125e-06, -0.00033295154571533203, -6.198883056640625e-06, -4.38690185546875e-05, -0.00025177001953125, -7.62939453125e-05, -1.9073486328125e-06, -0.00014495849609375, -3.814697265625e-06, -0.01085042953491211, -1.168244216387393e-05, -0.011755585670471191, -1.9311904907226562e-05, -3.814697265625e-06, -3.62396240234375e-05, -4.38690185546875e-05, -0.004036903381347656, -2.0265579223632812e-06, -0.000766754150390625, -5.7220458984375e-06, -0.000152587890625, 0.0, -0.0035451650619506836, -8.0108642578125e-05, -0.0602639801800251, -1.9431114196777344e-05, -3.814697265625e-06, -0.000423431396484375, 0.0, -0.00048542022705078125, -1.5616416931152344e-05, -0.0011615753173828125, -3.814697265625e-05, -0.00092315673828125, 0.0, -0.002535938983783126, -4.815980719286017e-05, -0.0015482305316254497, 0.0, -0.000690460205078125, -0.0010128021240234375, -1.9073486328125e-06, -4.38690185546875e-05, -0.00011265277862548828, 0.0, -2.3650827407836914, 0.0, -0.00031280517578125, -0.0002193450927734375, -0.0002346038818359375, -4.38690185546875e-05, -0.00030660623451694846, -1.52587890625e-05, -0.00045013427734375, -4.38690185546875e-05, -0.0005664825439453125, -0.00035858154296875, -0.012063980102539062, -3.4332275390625e-05, -0.0005340576171875, -0.011547088623046875, -0.0007781982421875, -0.0007877349853515625, -2.47955322265625e-05, -3.62396240234375e-05, -7.09294545231387e-05, -1.1444091796875e-05, -0.0011990070343017578, 0.0, -0.004039883613586426, 0.0, -0.000446319580078125, -1.9073486328125e-06, -0.002162933349609375, -4.1961669921875e-05, -7.05718994140625e-05, -0.00020599365234375, -7.62939453125e-06, 0.0, -0.0002371072769165039, 0.0, -1.9073486328125e-06, -0.000171661376953125, 0.0, -0.00321197509765625, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -3.4332275390625e-05, -2.3841855067985307e-07, -0.0006384849548339844, -3.6716461181640625e-05, -0.00023184965539257973, -0.00012969970703125, -0.000156402587890625, -0.024530410766601562, -0.002346038818359375, -0.001575469970703125], "score": -3.672327619728833, "model_output": {"hole4": "player", "hole0": "Cleave", "hole7": [{"body": [{"value": {"values": [{"hole1": "can_use", "hole2": "player", "_type": "Template33", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template59"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use", "args": {"_type": "Template17"}}], "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign"}, {"body": [{"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "minions"}]}, "targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign"}, {"hole1": "remove", "hole2": [{"_type": "Name", "id": "minion"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minions"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Cleave"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(0), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n"}, {"choice_history": [121, 200, "Cleave", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110], "score_history": [-5.91278076171875e-05, -0.4542808532714844, -6.7949122239951976e-06, -2.1457672119140625e-06, -5.36041334271431e-05, -5.7220458984375e-06, -1.919269561767578e-05, -0.0002841949462890625, -0.0060882568359375, -0.0002956390380859375, -1.1920928955078125e-06, -2.47955322265625e-05, -9.536597644910216e-07, 0.0, -0.026691675186157227, -0.0001678466796875, -2.6702880859375e-05, 0.0, -1.4185883628670126e-05, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -2.86102294921875e-05, -2.2649765014648438e-06, -2.0265579223632812e-06, -2.4353418350219727, -0.0004215240478515625, -0.00081634521484375, -0.0005016326904296875, -0.003326416015625, -1.9073486328125e-06, -0.07744394242763519, -5.960462772236497e-07, -0.0004215240478515625, -0.0019779205322265625, -1.33514404296875e-05, -9.5367431640625e-06, -3.24249267578125e-05, 0.0, -0.0021561384201049805, -3.814697265625e-05, -0.000511884456500411, -1.9073486328125e-06, -7.62939453125e-06, -0.0002899169921875, 0.0, -2.86102294921875e-05, -4.00543212890625e-05, -9.5367431640625e-06, 0.0, -1.3470649719238281e-05, -3.576272320060525e-06, -0.0007987020653672516, -1.3113020031596534e-05, -0.001377453445456922, -8.7738037109375e-05, -6.4849853515625e-05, -0.0024585723876953125, -1.9073486328125e-06, -0.000335693359375, 0.0, -0.0005981582798995078, -2.2172682292875834e-05, -0.0004944744287058711, 0.0, -0.000408172607421875, -0.000423431396484375, -3.814697265625e-06, -4.9591064453125e-05, -0.0008939504623413086, -3.576278118089249e-07, -1.0552700757980347, -2.1457672119140625e-06, -0.0007038116455078125], "score": -4.075571074192112, "model_output": {"hole4": "player", "hole0": "Cleave", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Cleave"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n"}, {"choice_history": [121, 200, "Cleave", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 126, 155, 320, 73, 186, "minions", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 334, 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "minions", "<EOS>", 145, 250, 25, 186, "minions", "<EOS>", "remove", "<EOS>", 320, 73, 186, "minion", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110], "score_history": [-5.91278076171875e-05, -0.4542808532714844, -6.7949122239951976e-06, -2.1457672119140625e-06, -5.36041334271431e-05, -5.7220458984375e-06, -1.919269561767578e-05, -0.0002841949462890625, -0.0060882568359375, -0.0002956390380859375, -1.1920928955078125e-06, -2.47955322265625e-05, -9.536597644910216e-07, 0.0, -0.026691675186157227, -0.0001678466796875, -2.6702880859375e-05, 0.0, -1.4185883628670126e-05, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -2.86102294921875e-05, -2.2649765014648438e-06, -2.0265579223632812e-06, -0.1474132537841797, -0.0005092620849609375, -1.0127286911010742, -3.24249267578125e-05, -1.52587890625e-05, -0.0001220703125, -1.9073486328125e-06, -0.07345426082611084, -3.0517578125e-05, -9.918212890625e-05, -7.2479248046875e-05, -1.9073486328125e-06, 0.0, -0.0002803802490234375, 0.0, -0.000993013265542686, -1.71661376953125e-05, -0.0007266984321177006, -3.814697265625e-06, -2.47955322265625e-05, -0.0005283355712890625, -1.9073486328125e-06, -4.1961669921875e-05, -2.47955322265625e-05, -1.1444091796875e-05, 0.0, -1.537799835205078e-05, -2.3841830625315197e-06, -0.001071572070941329, -8.82148651726311e-06, -0.000969261396676302, -0.000102996826171875, -0.016613006591796875, -8.96453857421875e-05, -2.47955322265625e-05, 0.0, -0.003933072090148926, -5.7220458984375e-06, -0.000102996826171875, -0.0001392364501953125, -9.1552734375e-05, 0.0, -0.0019850721582770348, -9.536738616588991e-07, -0.00011444091796875, -7.2479248046875e-05, -0.0040493011474609375, -0.020781517028808594, -0.00026702880859375, -4.76837158203125e-05, -0.0001010894775390625, -1.52587890625e-05, -1.9073486328125e-06, -0.00020515918731689453, -6.198883056640625e-06, -4.38690185546875e-05, -0.0002765655517578125, -0.0001049041748046875, -1.9073486328125e-06, -8.58306884765625e-05, -3.814697265625e-06, -0.015693187713623047, -1.1205610462639015e-05, -0.01137685775756836, -1.537799835205078e-05, -3.814697265625e-06, -3.814697265625e-05, -4.57763671875e-05, -0.004136085510253906, -2.0265579223632812e-06, -0.0005931854248046875, -5.7220458984375e-06, -0.0001773834228515625, 0.0, -0.0033658742904663086, -6.67572021484375e-05, -0.05918261408805847, -1.7523765563964844e-05, -3.814697265625e-06, -0.000446319580078125, 0.0, -0.0005121231079101562, -1.5497207641601562e-05, -0.0009860992431640625, -4.00543212890625e-05, -0.0007724761962890625, 0.0, -0.0029801130294799805, -4.184187491773628e-05, -0.0015263325767591596, 0.0, -0.0007457733154296875, -0.001087188720703125, -1.9073486328125e-06, -4.1961669921875e-05, -0.00011074542999267578, 0.0, -2.3639986515045166, 0.0, -0.0003070831298828125], "score": -4.244973533779103, "model_output": {"hole4": "player", "hole0": "Cleave", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign"}, {"body": [{"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "minions"}]}, "targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign"}, {"hole1": "remove", "hole2": [{"_type": "Name", "id": "minion"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minions"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Template76"}, {"_type": "Template59"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Cleave"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(0), self)\n"}, {"choice_history": [121, 200, "Cleave", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 134, 175, "hearthbreaker.cards.minions.druid", "<EOS>", 311, 306, "damage", "<EOS>", "2", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-5.91278076171875e-05, -0.4542808532714844, -6.7949122239951976e-06, -2.1457672119140625e-06, -5.36041334271431e-05, -5.7220458984375e-06, -1.919269561767578e-05, -0.0002841949462890625, -0.0060882568359375, -0.0002956390380859375, -1.1920928955078125e-06, -2.47955322265625e-05, -9.536597644910216e-07, 0.0, -0.026691675186157227, -0.0001678466796875, -2.6702880859375e-05, 0.0, -1.4185883628670126e-05, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -2.86102294921875e-05, -2.2649765014648438e-06, -2.0265579223632812e-06, -0.1474132537841797, -0.0005092620849609375, -0.6233615875244141, -0.009074211120605469, -0.0247568991035223, -5.7220458984375e-06, -0.9171361923217773, -0.051410675048828125, -0.0005256260628812015, -0.007712528109550476, -1.6063323020935059, -1.1920928244535389e-07, -0.0046596527099609375, -1.9073486328125e-05, -5.14984130859375e-05, -3.814697265625e-06, -0.003975868225097656, -1.9073486328125e-06, -0.0022792816162109375, -0.00164794921875, -9.5367431640625e-05, 0.0, -3.814697265625e-05, 0.0, -0.0028235912322998047, -2.288818359375e-05, -0.0007383817574009299, -1.9073486328125e-06, -5.7220458984375e-06, -0.0003032684326171875, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.0728830375228426e-06, -0.0004987713764421642, -8.344650268554688e-06, -0.0007747409399598837, -0.0002593994140625, -6.866455078125e-05, -0.001811981201171875, -1.9073486328125e-06, -0.0002880096435546875, 0.0, -0.0007710030768066645, -2.7417760065873154e-05, -0.0005597668350674212, 0.0, -0.00041961669921875, -0.000377655029296875, -3.814697265625e-06, -4.76837158203125e-05, -0.0006315708160400391, -2.3841855067985307e-07, -0.5277015566825867, 0.0, -0.0001678466796875], "score": -4.427564743300842, "model_output": {"hole4": "player", "hole0": "Cleave", "hole6": [{"_type": "Template19"}, {"level": 2, "module": "hearthbreaker.cards.minions.druid", "names": [{"_type": "alias", "name": "damage"}], "_type": "ImportFrom"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Cleave"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from ..hearthbreaker.cards.minions.druid import damage\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Cleave", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-5.91278076171875e-05, -0.4542808532714844, -6.7949122239951976e-06, -2.1457672119140625e-06, -5.36041334271431e-05, -5.7220458984375e-06, -1.919269561767578e-05, -0.0002841949462890625, -0.0060882568359375, -0.0002956390380859375, -1.1920928955078125e-06, -2.47955322265625e-05, -9.536597644910216e-07, 0.0, -0.026691675186157227, -0.0001678466796875, -2.6702880859375e-05, 0.0, -1.4185883628670126e-05, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -2.86102294921875e-05, -2.2649765014648438e-06, -2.0265579223632812e-06, -0.1474132537841797, -0.0005092620849609375, -2.520986557006836, -0.0023403167724609375, -0.12508392333984375, 0.0, -0.0016154554905369878, -2.2649765014648438e-06, -0.0003261566162109375, -0.0005550384521484375, -2.6702880859375e-05, -2.6702880859375e-05, -4.38690185546875e-05, 0.0, -0.002552270656451583, -5.91278076171875e-05, -0.0006458754069171846, -1.9073486328125e-06, -5.7220458984375e-06, -0.00052642822265625, 0.0, -2.6702880859375e-05, -4.57763671875e-05, -7.62939453125e-06, 0.0, -1.1563301086425781e-05, -3.933898824470816e-06, -0.000734805827960372, -1.1086463018727954e-05, -0.001305800979025662, -0.0001049041748046875, -8.7738037109375e-05, -0.0013561248779296875, -1.9073486328125e-06, -0.00038909912109375, 0.0, -0.0006187594262883067, -2.372236667724792e-05, -0.0006759206880815327, 0.0, -0.0004215240478515625, -0.0003948211669921875, -3.814697265625e-06, -4.76837158203125e-05, -0.0008672475814819336, -3.576278118089249e-07, -0.45227479934692383, 0.0, -0.00019073486328125, -0.1427316665649414, -2.47955322265625e-05, -0.0006809234619140625, -1.9073486328125e-06, -0.16539859771728516, -3.24249267578125e-05, -0.00089263916015625, -1.1444091796875e-05, -4.911416908726096e-05, -4.768370445162873e-07, -0.11287317425012589, -2.2649765014648438e-06, -0.06258636713027954, -2.503394853192731e-06, -0.08643140643835068, 0.0, -0.0011806488037109375, -0.0002613067626953125, 0.0, -0.0001506805419921875, -0.00017023086547851562, -1.1920928244535389e-07, -0.35658159852027893, -1.9073486328125e-06, -0.0001697540283203125], "score": -4.680716304986213, "model_output": {"hole4": "player", "hole0": "Cleave", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Cleave"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Cleave", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 134, 175, "hearthbreaker.cards.minions.druid", "<EOS>", 311, 306, "damage", "<EOS>", "2", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110], "score_history": [-5.91278076171875e-05, -0.4542808532714844, -6.7949122239951976e-06, -2.1457672119140625e-06, -5.36041334271431e-05, -5.7220458984375e-06, -1.919269561767578e-05, -0.0002841949462890625, -0.0060882568359375, -0.0002956390380859375, -1.1920928955078125e-06, -2.47955322265625e-05, -9.536597644910216e-07, 0.0, -0.026691675186157227, -0.0001678466796875, -2.6702880859375e-05, 0.0, -1.4185883628670126e-05, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -2.86102294921875e-05, -2.2649765014648438e-06, -2.0265579223632812e-06, -0.1474132537841797, -0.0005092620849609375, -0.6233615875244141, -0.009074211120605469, -0.0247568991035223, -5.7220458984375e-06, -0.9171361923217773, -0.051410675048828125, -0.0005256260628812015, -0.007712528109550476, -1.6063323020935059, -1.1920928244535389e-07, -0.0046596527099609375, -1.9073486328125e-05, -5.14984130859375e-05, -3.814697265625e-06, -0.003975868225097656, -1.9073486328125e-06, -0.0022792816162109375, -0.00164794921875, -9.5367431640625e-05, 0.0, -3.814697265625e-05, 0.0, -0.0028235912322998047, -2.288818359375e-05, -0.0007383817574009299, -1.9073486328125e-06, -5.7220458984375e-06, -0.0003032684326171875, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.0728830375228426e-06, -0.0004987713764421642, -8.344650268554688e-06, -0.0007747409399598837, -0.0002593994140625, -6.866455078125e-05, -0.001811981201171875, -1.9073486328125e-06, -0.0002880096435546875, 0.0, -0.0007710030768066645, -2.7417760065873154e-05, -0.0005597668350674212, 0.0, -0.00041961669921875, -0.000377655029296875, -3.814697265625e-06, -4.76837158203125e-05, -0.0006315708160400391, -2.3841855067985307e-07, -0.8933167457580566, -4.0531158447265625e-06, -0.0005970001220703125], "score": -4.793613138934539, "model_output": {"hole4": "player", "hole0": "Cleave", "hole6": [{"_type": "Template19"}, {"level": 2, "module": "hearthbreaker.cards.minions.druid", "names": [{"_type": "alias", "name": "damage"}], "_type": "ImportFrom"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Cleave"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from ..hearthbreaker.cards.minions.druid import damage\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n"}, {"choice_history": [121, 200, "Cleave", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 134, 175, "hearthbreaker.cards.minions.druid", "<EOS>", 311, 306, "damage", "<EOS>", "damage", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-5.91278076171875e-05, -0.4542808532714844, -6.7949122239951976e-06, -2.1457672119140625e-06, -5.36041334271431e-05, -5.7220458984375e-06, -1.919269561767578e-05, -0.0002841949462890625, -0.0060882568359375, -0.0002956390380859375, -1.1920928955078125e-06, -2.47955322265625e-05, -9.536597644910216e-07, 0.0, -0.026691675186157227, -0.0001678466796875, -2.6702880859375e-05, 0.0, -1.4185883628670126e-05, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -2.86102294921875e-05, -2.2649765014648438e-06, -2.0265579223632812e-06, -0.1474132537841797, -0.0005092620849609375, -0.6233615875244141, -0.009074211120605469, -0.0247568991035223, -5.7220458984375e-06, -0.9171361923217773, -0.051410675048828125, -0.0005256260628812015, -0.007712528109550476, -2.392915725708008, -1.5497195136049413e-06, -0.002178192138671875, -0.0001239776611328125, -0.0002269744873046875, -7.62939453125e-06, -0.007464051246643066, -1.9073486328125e-06, -0.0033359527587890625, -0.0009975433349609375, -6.4849853515625e-05, 0.0, -4.00543212890625e-05, 0.0, -0.002592325210571289, -2.288818359375e-05, -0.000710009946487844, -3.814697265625e-06, -5.7220458984375e-06, -0.0003833770751953125, 0.0, -3.24249267578125e-05, -1.52587890625e-05, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.0728830375228426e-06, -0.0005090233753435314, -8.344650268554688e-06, -0.0007177978404797614, -0.0002460479736328125, -6.29425048828125e-05, -0.0021266937255859375, -1.9073486328125e-06, -0.000324249267578125, 0.0, -0.0007960196235217154, -2.4676019165781327e-05, -0.0005683446070179343, 0.0, -0.00040435791015625, -0.000362396240234375, -3.814697265625e-06, -4.9591064453125e-05, -0.0005562305450439453, -2.3841855067985307e-07, -0.5069140791893005, 0.0, -0.0001659393310546875], "score": -5.195061345458242, "model_output": {"hole4": "player", "hole0": "Cleave", "hole6": [{"_type": "Template19"}, {"level": 0, "module": "hearthbreaker.cards.minions.druid", "names": [{"_type": "alias", "name": "damage"}], "_type": "ImportFrom"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Cleave"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import damage\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Cleave", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-5.91278076171875e-05, -0.4542808532714844, -6.7949122239951976e-06, -2.1457672119140625e-06, -5.36041334271431e-05, -5.7220458984375e-06, -1.919269561767578e-05, -0.0002841949462890625, -0.0060882568359375, -0.0002956390380859375, -1.1920928955078125e-06, -2.47955322265625e-05, -9.536597644910216e-07, 0.0, -0.026691675186157227, -0.0001678466796875, -2.6702880859375e-05, 0.0, -1.4185883628670126e-05, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -2.86102294921875e-05, -2.2649765014648438e-06, -2.0265579223632812e-06, -0.1474132537841797, -0.0005092620849609375, -2.520986557006836, -0.0023403167724609375, -0.12508392333984375, 0.0, -0.0016154554905369878, -2.2649765014648438e-06, -0.0003261566162109375, -0.0005550384521484375, -2.6702880859375e-05, -2.6702880859375e-05, -4.38690185546875e-05, 0.0, -0.002552270656451583, -5.91278076171875e-05, -0.0006458754069171846, -1.9073486328125e-06, -5.7220458984375e-06, -0.00052642822265625, 0.0, -2.6702880859375e-05, -4.57763671875e-05, -7.62939453125e-06, 0.0, -1.1563301086425781e-05, -3.933898824470816e-06, -0.000734805827960372, -1.1086463018727954e-05, -0.001305800979025662, -0.0001049041748046875, -8.7738037109375e-05, -0.0013561248779296875, -1.9073486328125e-06, -0.00038909912109375, 0.0, -0.0006187594262883067, -2.372236667724792e-05, -0.0006759206880815327, 0.0, -0.0004215240478515625, -0.0003948211669921875, -3.814697265625e-06, -4.76837158203125e-05, -0.0008672475814819336, -3.576278118089249e-07, -1.012993574142456, -4.0531158447265625e-06, -0.0006961822509765625, -0.091064453125, -5.7220458984375e-06, -0.00054168701171875, 0.0, -0.3148813247680664, -6.866455078125e-05, -0.0011653900146484375, -1.33514404296875e-05, -5.7220102462451905e-05, -9.536738616588991e-07, -0.1181935966014862, -2.9802317840221804e-06, -0.10252085328102112, -2.9802317840221804e-06, -0.04959564283490181, 0.0, -0.000946044921875, -0.0002288818359375, 0.0, -0.0001697540283203125, -0.00016450881958007812, -1.1920928244535389e-07, -0.3743014931678772, -1.9073486328125e-06, -0.000148773193359375], "score": -5.365784930643649, "model_output": {"hole4": "player", "hole0": "Cleave", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Cleave"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Cleave", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110], "score_history": [-5.91278076171875e-05, -0.4542808532714844, -6.7949122239951976e-06, -2.1457672119140625e-06, -5.36041334271431e-05, -5.7220458984375e-06, -1.919269561767578e-05, -0.0002841949462890625, -0.0060882568359375, -0.0002956390380859375, -1.1920928955078125e-06, -2.47955322265625e-05, -9.536597644910216e-07, 0.0, -0.026691675186157227, -0.0001678466796875, -2.6702880859375e-05, 0.0, -1.4185883628670126e-05, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -2.86102294921875e-05, -2.2649765014648438e-06, -2.0265579223632812e-06, -0.1474132537841797, -0.0005092620849609375, -2.520986557006836, -0.0023403167724609375, -0.12508392333984375, 0.0, -0.0016154554905369878, -2.2649765014648438e-06, -0.0003261566162109375, -0.0005550384521484375, -2.6702880859375e-05, -2.6702880859375e-05, -4.38690185546875e-05, 0.0, -0.002552270656451583, -5.91278076171875e-05, -0.0006458754069171846, -1.9073486328125e-06, -5.7220458984375e-06, -0.00052642822265625, 0.0, -2.6702880859375e-05, -4.57763671875e-05, -7.62939453125e-06, 0.0, -1.1563301086425781e-05, -3.933898824470816e-06, -0.000734805827960372, -1.1086463018727954e-05, -0.001305800979025662, -0.0001049041748046875, -8.7738037109375e-05, -0.0013561248779296875, -1.9073486328125e-06, -0.00038909912109375, 0.0, -0.0006187594262883067, -2.372236667724792e-05, -0.0006759206880815327, 0.0, -0.0004215240478515625, -0.0003948211669921875, -3.814697265625e-06, -4.76837158203125e-05, -0.0008672475814819336, -3.576278118089249e-07, -0.45227479934692383, 0.0, -0.00019073486328125, -0.1427316665649414, -2.47955322265625e-05, -0.0006809234619140625, -1.9073486328125e-06, -0.16539859771728516, -3.24249267578125e-05, -0.00089263916015625, -1.1444091796875e-05, -4.911416908726096e-05, -4.768370445162873e-07, -0.11287317425012589, -2.2649765014648438e-06, -0.06258636713027954, -2.503394853192731e-06, -0.08643140643835068, 0.0, -0.0011806488037109375, -0.0002613067626953125, 0.0, -0.0001506805419921875, -0.00017023086547851562, -1.1920928244535389e-07, -1.2070297002792358, -8.70227722771233e-06, -0.000797271728515625], "score": -5.53179871937396, "model_output": {"hole4": "player", "hole0": "Cleave", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Cleave"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.damage(player.effective_spell_damage(0), self)\n"}, {"choice_history": [121, 200, "Cleave", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 141, 126, 155, 320, 73, 186, "minions", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>"], "score_history": [-5.91278076171875e-05, -0.4542808532714844, -6.7949122239951976e-06, -2.1457672119140625e-06, -5.36041334271431e-05, -5.7220458984375e-06, -1.919269561767578e-05, -0.0002841949462890625, -0.0060882568359375, -0.0002956390380859375, -1.1920928955078125e-06, -2.47955322265625e-05, -9.536597644910216e-07, 0.0, -0.026691675186157227, -0.0001678466796875, -2.6702880859375e-05, 0.0, -1.4185883628670126e-05, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -2.86102294921875e-05, -2.2649765014648438e-06, -2.0265579223632812e-06, -0.1474132537841797, -0.0005092620849609375, -4.688677787780762, -0.2607860565185547, -6.103515625e-05, -1.1444091796875e-05, -0.0001621246337890625, -1.9073486328125e-06, -0.08037590980529785, -4.1961669921875e-05, -0.0001220703125, -6.866455078125e-05, -1.9073486328125e-06, 0.0, -0.000324249267578125, 0.0, -0.00106227386277169, -1.9073486328125e-05, -0.0007219297112897038, -3.814697265625e-06, -2.47955322265625e-05, -0.0005207061767578125, -1.9073486328125e-06, -4.00543212890625e-05, -2.6702880859375e-05, -1.1444091796875e-05, 0.0, -1.537799835205078e-05, -2.3841830625315197e-06, -0.0010299680288881063, -8.70227722771233e-06, -0.0009351985063403845, -0.0001068115234375], "score": -5.671241838893366, "model_output": {"hole4": "player", "hole0": "Cleave", "hole6": [{"_type": "Template19"}, {"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Cleave"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n"}], "index": 19}
{"beams": [{"choice_history": [121, 200, "Consecration", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0007801055908203125, -0.000102996826171875, -4.172324224782642e-06, -3.099436753473128e-06, -8.701812475919724e-06, -3.635883331298828e-05, -0.0003724098205566406, -0.0030498504638671875, -0.00041961669921875, -0.0001220703125, -2.384185791015625e-06, -1.9073486328125e-06, -2.0861578377662227e-05, -2.0265579223632812e-06, -0.038555264472961426, -3.62396240234375e-05, -0.00010752677189884707, 0.0, -0.00034461217001080513, 0.0, -2.09808349609375e-05, -8.7738037109375e-05, -2.6702880859375e-05, -1.1563301086425781e-05, 0.0, -0.031905174255371094, -9.1552734375e-05, -0.009214401245117188, -0.0001049041748046875, -0.0001201629638671875, -2.288818359375e-05, -0.0004576120700221509, -2.384185791015625e-06, -0.000255584716796875, -0.0003223419189453125, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -0.00045120716094970703, -2.09808349609375e-05, -0.0001521109661553055, 0.0, -9.5367431640625e-06, -0.0024662017822265625, 0.0, -9.918212890625e-05, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -2.86102294921875e-05, -1.1920928244535389e-07, -0.0005408520228229463, -3.576278118089249e-07, -0.000600620754994452, -3.24249267578125e-05, -0.000431060791015625, -1.9073486328125e-05, -2.09808349609375e-05, -0.00014495849609375, -1.9073486328125e-06, -0.00011789763811975718, -8.809195423964411e-05, -4.14840251323767e-05, -4.768370445162873e-07, -9.72747802734375e-05, -0.0023660659790039062, -5.7220458984375e-06, -0.0001049041748046875, -4.267692565917969e-05, 0.0, -0.004798646084964275, 0.0, -4.1961669921875e-05, -0.008371353149414062, -9.5367431640625e-06, -0.0023937225341796875, -5.7220458984375e-06, -0.0050144195556640625, -6.866455078125e-05, -8.392333984375e-05, -1.9073486328125e-06, -0.0009493820834904909, -3.576278118089249e-07, -0.04920528084039688, -7.152555099310121e-07, -0.0074396319687366486, -1.1920928244535389e-07, -0.00013660472177434713, 0.0, -0.00035858154296875, -0.00049591064453125, -1.9073486328125e-06, -0.0004215240478515625, -0.00024068355560302734, 0.0, -0.003327086800709367, 0.0, -7.05718994140625e-05], "score": -0.17800204045964563, "model_output": {"hole4": "player", "hole0": "Consecration", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "PALADIN", "_type": "Template14", "hole0": "Consecration"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Consecration", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0007801055908203125, -0.000102996826171875, -4.172324224782642e-06, -3.099436753473128e-06, -8.701812475919724e-06, -3.635883331298828e-05, -0.0003724098205566406, -0.0030498504638671875, -0.00041961669921875, -0.0001220703125, -2.384185791015625e-06, -1.9073486328125e-06, -2.0861578377662227e-05, -2.0265579223632812e-06, -0.038555264472961426, -3.62396240234375e-05, -0.00010752677189884707, 0.0, -0.00034461217001080513, 0.0, -2.09808349609375e-05, -8.7738037109375e-05, -2.6702880859375e-05, -1.1563301086425781e-05, 0.0, -0.031905174255371094, -9.1552734375e-05, -0.009214401245117188, -0.0001049041748046875, -0.0001201629638671875, -2.288818359375e-05, -0.0004576120700221509, -2.384185791015625e-06, -0.000255584716796875, -0.0003223419189453125, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -0.00045120716094970703, -2.09808349609375e-05, -0.0001521109661553055, 0.0, -9.5367431640625e-06, -0.0024662017822265625, 0.0, -9.918212890625e-05, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -2.86102294921875e-05, -1.1920928244535389e-07, -0.0005408520228229463, -3.576278118089249e-07, -0.000600620754994452, -3.24249267578125e-05, -0.000431060791015625, -1.9073486328125e-05, -2.09808349609375e-05, -0.00014495849609375, -1.9073486328125e-06, -0.00011789763811975718, -8.809195423964411e-05, -4.14840251323767e-05, -4.768370445162873e-07, -9.72747802734375e-05, -0.0023660659790039062, -5.7220458984375e-06, -0.0001049041748046875, -4.267692565917969e-05, 0.0, -0.004798646084964275, 0.0, -4.1961669921875e-05, -0.008371353149414062, -9.5367431640625e-06, -0.0023937225341796875, -5.7220458984375e-06, -0.0050144195556640625, -6.866455078125e-05, -8.392333984375e-05, -1.9073486328125e-06, -0.0009493820834904909, -3.576278118089249e-07, -3.173633098602295, -7.748603820800781e-06, -0.008165717124938965, -2.3841855067985307e-07, -0.0008984344312921166, 0.0, -0.0001888275146484375, -0.0006351470947265625, -3.814697265625e-06, -0.0005340576171875, -0.00037598609924316406, 0.0, -0.003125140443444252, 0.0, -6.4849853515625e-05], "score": -3.303936483125163, "model_output": {"hole4": "player", "hole0": "Consecration", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "PALADIN", "_type": "Template14", "hole0": "Consecration"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        game.current_player.hero.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Consecration", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Consecration", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0007801055908203125, -0.000102996826171875, -4.172324224782642e-06, -3.099436753473128e-06, -8.701812475919724e-06, -3.635883331298828e-05, -0.0003724098205566406, -0.0030498504638671875, -0.00041961669921875, -0.0001220703125, -2.384185791015625e-06, -1.9073486328125e-06, -2.0861578377662227e-05, -2.0265579223632812e-06, -3.946406364440918, -6.103515625e-05, -2.3245811462402344e-05, 0.0, -0.00019418356532696635, 0.0, -5.7220458984375e-06, -3.814697265625e-05, -1.52587890625e-05, -1.728534698486328e-05, 0.0, -0.044159889221191406, -4.76837158203125e-05, -0.011091232299804688, -8.7738037109375e-05, -0.0001201629638671875, -2.288818359375e-05, -0.00042244259384460747, -2.503394853192731e-06, -0.0002651214599609375, -0.0003070831298828125, -1.71661376953125e-05, -2.288818359375e-05, -1.1444091796875e-05, 0.0, -0.000442266435129568, -2.288818359375e-05, -0.00015020358841866255, 0.0, -9.5367431640625e-06, -0.0023670196533203125, 0.0, -0.0001010894775390625, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -2.86102294921875e-05, -1.1920928244535389e-07, -0.0005407328717410564, -3.576278118089249e-07, -0.0005944242002442479, -3.24249267578125e-05, -0.0004405975341796875, -1.9073486328125e-05, -1.9073486328125e-05, -0.00014495849609375, -1.9073486328125e-06, -0.00011491741315694526, -8.809195423964411e-05, -4.124561746721156e-05, -4.768370445162873e-07, -9.5367431640625e-05, -0.0023193359375, -5.7220458984375e-06, -0.0001049041748046875, -4.267692565917969e-05, 0.0, -0.00477957259863615, 0.0, -4.1961669921875e-05, -0.008886337280273438, -1.1444091796875e-05, -0.0023212432861328125, -5.7220458984375e-06, -0.0048675537109375, -7.05718994140625e-05, -8.58306884765625e-05, -1.9073486328125e-06, -0.0009534350829198956, -3.576278118089249e-07, -0.04993007332086563, -7.152555099310121e-07, -0.007408054545521736, -1.1920928244535389e-07, -0.00014125324378255755, 0.0, -0.000354766845703125, -0.000484466552734375, -1.9073486328125e-06, -0.0004253387451171875, -0.00024259090423583984, 0.0, -0.003338887821882963, 0.0, -7.05718994140625e-05], "score": -4.100435918328898, "model_output": {"hole4": "player", "hole0": "Consecration", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Consecration"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Consecration", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0007801055908203125, -0.000102996826171875, -4.172324224782642e-06, -3.099436753473128e-06, -8.701812475919724e-06, -3.635883331298828e-05, -0.0003724098205566406, -0.0030498504638671875, -0.00041961669921875, -0.0001220703125, -2.384185791015625e-06, -1.9073486328125e-06, -2.0861578377662227e-05, -2.0265579223632812e-06, -0.038555264472961426, -3.62396240234375e-05, -0.00010752677189884707, 0.0, -0.00034461217001080513, 0.0, -2.09808349609375e-05, -8.7738037109375e-05, -2.6702880859375e-05, -1.1563301086425781e-05, 0.0, -4.34060001373291, -0.0005893707275390625, -0.000335693359375, -0.000179290771484375, -5.53131103515625e-05, -5.7220458984375e-06, -0.001448267139494419, -3.576278118089249e-07, -0.000438690185546875, -0.0003261566162109375, -7.62939453125e-06, -2.288818359375e-05, -1.1444091796875e-05, 0.0, -0.0004775524139404297, -1.52587890625e-05, -0.00016093251178972423, 0.0, -9.5367431640625e-06, -0.00174713134765625, 0.0, -9.918212890625e-05, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -3.0517578125e-05, -1.1920928244535389e-07, -0.0005295271403156221, -3.576278118089249e-07, -0.0006217100308276713, -3.24249267578125e-05, -0.0005588531494140625, -4.00543212890625e-05, -2.6702880859375e-05, -0.000148773193359375, -1.9073486328125e-06, -0.00011110271589132026, -8.010558667592704e-05, -4.1126411815639585e-05, -4.768370445162873e-07, -9.34600830078125e-05, -0.002285003662109375, -5.7220458984375e-06, -0.0001125335693359375, -4.2557716369628906e-05, 0.0, -0.004933948162943125, 0.0, -4.1961669921875e-05], "score": -4.400405640158617, "model_output": {"hole4": "player", "hole0": "Consecration", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "PALADIN", "_type": "Template14", "hole0": "Consecration"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Consecration", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Consecration", "<EOS>", "4", "<EOS>", "DRUID", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0007801055908203125, -0.000102996826171875, -4.172324224782642e-06, -3.099436753473128e-06, -8.701812475919724e-06, -3.635883331298828e-05, -0.0003724098205566406, -0.0030498504638671875, -0.00041961669921875, -0.0001220703125, -2.384185791015625e-06, -1.9073486328125e-06, -2.0861578377662227e-05, -2.0265579223632812e-06, -4.604524612426758, 0.0, -7.748603820800781e-06, 0.0, -0.00016868076636455953, 0.0, -2.6702880859375e-05, -3.814697265625e-05, -2.09808349609375e-05, -1.1563301086425781e-05, 0.0, -0.03437614440917969, -5.53131103515625e-05, -0.012720108032226562, -8.96453857421875e-05, -0.0001125335693359375, -2.6702880859375e-05, -0.00042936106910929084, -2.503394853192731e-06, -0.000270843505859375, -0.00035858154296875, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -0.00043261051177978516, -2.09808349609375e-05, -0.0001494883472332731, 0.0, -9.5367431640625e-06, -0.00241851806640625, 0.0, -0.0001010894775390625, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -2.86102294921875e-05, -1.1920928244535389e-07, -0.0005389446741901338, -3.576278118089249e-07, -0.0005965691525489092, -3.24249267578125e-05, -0.00043487548828125, -1.9073486328125e-05, -2.09808349609375e-05, -0.0001468658447265625, -1.9073486328125e-06, -0.00011599028948694468, -8.713835995877162e-05, -4.124561746721156e-05, -4.768370445162873e-07, -9.5367431640625e-05, -0.0023479461669921875, -5.7220458984375e-06, -0.0001049041748046875, -4.267692565917969e-05, 0.0, -0.0047967382706701756, 0.0, -4.1961669921875e-05, -0.009073257446289062, -1.1444091796875e-05, -0.0023136138916015625, -5.7220458984375e-06, -0.00484466552734375, -7.2479248046875e-05, -8.58306884765625e-05, -1.9073486328125e-06, -0.0009413950028829277, -3.576278118089249e-07, -0.05006013065576553, -7.152555099310121e-07, -0.007392808794975281, -1.1920928244535389e-07, -0.0001413724385201931, 0.0, -0.0003566741943359375, -0.0004901885986328125, -1.9073486328125e-06, -0.0004215240478515625, -0.00024259090423583984, 0.0, -0.0033425837755203247, 0.0, -7.05718994140625e-05], "score": -4.750738472314865, "model_output": {"hole4": "player", "hole0": "Consecration", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "DRUID", "_type": "Template14", "hole0": "Consecration"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Consecration", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0007801055908203125, -0.000102996826171875, -4.172324224782642e-06, -3.099436753473128e-06, -8.701812475919724e-06, -3.635883331298828e-05, -0.0003724098205566406, -0.0030498504638671875, -0.00041961669921875, -0.0001220703125, -2.384185791015625e-06, -1.9073486328125e-06, -2.0861578377662227e-05, -2.0265579223632812e-06, -0.038555264472961426, -3.62396240234375e-05, -0.00010752677189884707, 0.0, -0.00034461217001080513, 0.0, -2.09808349609375e-05, -8.7738037109375e-05, -2.6702880859375e-05, -1.1563301086425781e-05, 0.0, -0.031905174255371094, -9.1552734375e-05, -4.930850982666016, -5.340576171875e-05, -0.02336597442626953, -6.556489552167477e-06, -4.172316494077677e-06, -5.7220458984375e-05, -0.010747909545898438, -1.71661376953125e-05, -0.00079345703125, -8.463859558105469e-05, 0.0, -0.003912924788892269, 0.0, -6.866455078125e-05, -0.0058155059814453125, -1.1444091796875e-05, -0.0029621124267578125, -3.814697265625e-06, -0.0048923492431640625, -8.20159912109375e-05, -0.000148773193359375, -1.9073486328125e-06, -0.0007435068255290389, -4.768370445162873e-07, -0.05955604091286659, -1.4305104514278355e-06, -0.009482160210609436, -2.3841855067985307e-07, -0.00012408936163410544, 0.0, -0.0004558563232421875, -0.000492095947265625, -1.9073486328125e-06, -0.0005550384521484375, -0.00024831295013427734, 0.0, -0.0033875228837132454, 0.0, -6.67572021484375e-05], "score": -5.135110346800019, "model_output": {"hole4": "player", "hole0": "Consecration", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "PALADIN", "_type": "Template14", "hole0": "Consecration"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Consecration", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0007801055908203125, -0.000102996826171875, -4.172324224782642e-06, -3.099436753473128e-06, -8.701812475919724e-06, -3.635883331298828e-05, -0.0003724098205566406, -0.0030498504638671875, -0.00041961669921875, -0.0001220703125, -2.384185791015625e-06, -1.9073486328125e-06, -2.0861578377662227e-05, -2.0265579223632812e-06, -0.038555264472961426, -3.62396240234375e-05, -0.00010752677189884707, 0.0, -0.00034461217001080513, 0.0, -2.09808349609375e-05, -8.7738037109375e-05, -2.6702880859375e-05, -1.1563301086425781e-05, 0.0, -0.031905174255371094, -9.1552734375e-05, -0.009214401245117188, -0.0001049041748046875, -0.0001201629638671875, -2.288818359375e-05, -0.0004576120700221509, -2.384185791015625e-06, -0.000255584716796875, -0.0003223419189453125, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -0.00045120716094970703, -2.09808349609375e-05, -0.0001521109661553055, 0.0, -9.5367431640625e-06, -0.0024662017822265625, 0.0, -9.918212890625e-05, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -2.86102294921875e-05, -1.1920928244535389e-07, -0.0005408520228229463, -3.576278118089249e-07, -0.000600620754994452, -3.24249267578125e-05, -0.000431060791015625, -1.9073486328125e-05, -2.09808349609375e-05, -0.00014495849609375, -1.9073486328125e-06, -0.00011789763811975718, -8.809195423964411e-05, -4.14840251323767e-05, -4.768370445162873e-07, -9.72747802734375e-05, -0.0023660659790039062, -5.7220458984375e-06, -0.0001049041748046875, -4.267692565917969e-05, 0.0, -0.004798646084964275, 0.0, -4.1961669921875e-05, -5.070525169372559, -0.000274658203125, -0.00014495849609375, -7.62939453125e-06, -0.00021505355834960938, -3.814697265625e-06, -0.5609331130981445, -0.0002422332763671875, -0.000148773193359375, -1.71661376953125e-05, -1.33514404296875e-05, 0.0, -0.0025305747985839844, -1.9073486328125e-05, -0.0002611875534057617, 0.0, -9.5367431640625e-06, -0.007961273193359375, 0.0, -0.000240325927734375, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, -2.3841855067985307e-07, -0.0015832185745239258, -4.768370445162873e-07, -0.00043257392826490104, -3.24249267578125e-05, -0.0011043548583984375, -3.24249267578125e-05, -1.52587890625e-05, -0.0001621246337890625, -1.9073486328125e-06, -0.00010681123967515305, -8.439677185378969e-05, -4.458333205548115e-05, -3.576278118089249e-07, -7.62939453125e-05, -0.0028839111328125, -5.7220458984375e-06, -0.0001068115234375, -4.6133995056152344e-05, 0.0, -0.004599563777446747, 0.0, -4.00543212890625e-05], "score": -5.75435202349157, "model_output": {"hole4": "player", "hole0": "Consecration", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "PALADIN", "_type": "Template14", "hole0": "Consecration"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Consecration", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0007801055908203125, -0.000102996826171875, -4.172324224782642e-06, -3.099436753473128e-06, -8.701812475919724e-06, -3.635883331298828e-05, -0.0003724098205566406, -0.0030498504638671875, -0.00041961669921875, -0.0001220703125, -2.384185791015625e-06, -1.9073486328125e-06, -2.0861578377662227e-05, -2.0265579223632812e-06, -0.038555264472961426, -3.62396240234375e-05, -0.00010752677189884707, 0.0, -0.00034461217001080513, 0.0, -2.09808349609375e-05, -8.7738037109375e-05, -2.6702880859375e-05, -1.1563301086425781e-05, 0.0, -0.031905174255371094, -9.1552734375e-05, -0.009214401245117188, -0.0001049041748046875, -0.0001201629638671875, -2.288818359375e-05, -0.0004576120700221509, -2.384185791015625e-06, -0.000255584716796875, -0.0003223419189453125, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -0.00045120716094970703, -2.09808349609375e-05, -0.0001521109661553055, 0.0, -9.5367431640625e-06, -0.0024662017822265625, 0.0, -9.918212890625e-05, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -2.86102294921875e-05, -1.1920928244535389e-07, -0.0005408520228229463, -3.576278118089249e-07, -0.000600620754994452, -3.24249267578125e-05, -0.000431060791015625, -1.9073486328125e-05, -2.09808349609375e-05, -0.00014495849609375, -1.9073486328125e-06, -0.00011789763811975718, -8.809195423964411e-05, -4.14840251323767e-05, -4.768370445162873e-07, -9.72747802734375e-05, -0.0023660659790039062, -5.7220458984375e-06, -0.0001049041748046875, -4.267692565917969e-05, 0.0, -5.799374103546143, -9.536738616588991e-07, -0.0001163482666015625, -0.011480331420898438, -5.7220458984375e-06, -0.0026569366455078125, -1.9073486328125e-06, -0.0010433197021484375, -8.96453857421875e-05, -0.0001068115234375, -1.9073486328125e-06, -0.00042557684355415404, -4.768370445162873e-07, -0.0692593976855278, -1.5497195136049413e-06, -0.007335830479860306, -1.1920928244535389e-07, -0.00010680579725885764, 0.0, -0.00026702880859375, -0.0002899169921875, -1.9073486328125e-06, -0.00070953369140625, -0.00017762184143066406, 0.0, -0.0034720469266176224, 0.0, -7.05718994140625e-05], "score": -5.9915601968782966, "model_output": {"hole4": "player", "hole0": "Consecration", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "PALADIN", "_type": "Template14", "hole0": "Consecration"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Consecration", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0007801055908203125, -0.000102996826171875, -4.172324224782642e-06, -3.099436753473128e-06, -8.701812475919724e-06, -3.635883331298828e-05, -0.0003724098205566406, -0.0030498504638671875, -0.00041961669921875, -0.0001220703125, -2.384185791015625e-06, -1.9073486328125e-06, -2.0861578377662227e-05, -2.0265579223632812e-06, -0.038555264472961426, -3.62396240234375e-05, -0.00010752677189884707, 0.0, -0.00034461217001080513, 0.0, -2.09808349609375e-05, -8.7738037109375e-05, -2.6702880859375e-05, -1.1563301086425781e-05, 0.0, -4.098715782165527, -1.1444091796875e-05, -0.24448013305664062, -2.6702880859375e-05, -0.009549140930175781, -5.602820692729438e-06, -2.0265558760002023e-06, -0.000179290771484375, -0.3728904724121094, -1.52587890625e-05, -0.0004730224609375, -0.00011098384857177734, 0.0, -0.0033600316382944584, 0.0, -6.67572021484375e-05, -0.5972452163696289, -3.0517578125e-05, -0.01573467254638672, -3.814697265625e-06, -0.0036945343017578125, -7.82012939453125e-05, -0.000179290771484375, 0.0, -0.0008577107219025493, -9.536738616588991e-07, -0.04350728541612625, -6.318072337307967e-06, -0.011964870616793633, -2.3841855067985307e-07, -0.0001377966400468722, 0.0, -0.000690460205078125, -0.000335693359375, -3.814697265625e-06, -0.001361846923828125, -0.0001722574234008789, 0.0, -0.0037836581468582153, 0.0, -5.53131103515625e-05, -0.7116832733154297, -1.52587890625e-05, -0.012589454650878906, -2.288818359375e-05, -0.0075168609619140625, -0.000415802001953125, -0.000202178955078125, -1.9073486328125e-06, -0.0010753870010375977, -1.1920922133867862e-06, -0.027937283739447594, -6.556489552167477e-06, -0.008151091635227203, -3.576278118089249e-07, -6.23446176177822e-05, 0.0, -0.0007724761962890625, -0.000308990478515625, -3.814697265625e-06, -0.0013599395751953125, -0.00016641616821289062, 0.0, -0.0037368149496614933, 0.0, -6.29425048828125e-05], "score": -6.229941536471557, "model_output": {"hole4": "player", "hole0": "Consecration", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "PALADIN", "_type": "Template14", "hole0": "Consecration"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Consecration", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "damage", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0007801055908203125, -0.000102996826171875, -4.172324224782642e-06, -3.099436753473128e-06, -8.701812475919724e-06, -3.635883331298828e-05, -0.0003724098205566406, -0.0030498504638671875, -0.00041961669921875, -0.0001220703125, -2.384185791015625e-06, -1.9073486328125e-06, -2.0861578377662227e-05, -2.0265579223632812e-06, -0.038555264472961426, -3.62396240234375e-05, -0.00010752677189884707, 0.0, -0.00034461217001080513, 0.0, -2.09808349609375e-05, -8.7738037109375e-05, -2.6702880859375e-05, -1.1563301086425781e-05, 0.0, -0.031905174255371094, -9.1552734375e-05, -0.009214401245117188, -0.0001049041748046875, -0.0001201629638671875, -2.288818359375e-05, -0.0004576120700221509, -2.384185791015625e-06, -0.000255584716796875, -0.0003223419189453125, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -0.00045120716094970703, -2.09808349609375e-05, -0.0001521109661553055, 0.0, -9.5367431640625e-06, -0.0024662017822265625, 0.0, -9.918212890625e-05, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -2.86102294921875e-05, -1.1920928244535389e-07, -0.0005408520228229463, -3.576278118089249e-07, -0.000600620754994452, -3.24249267578125e-05, -0.000431060791015625, -1.9073486328125e-05, -2.09808349609375e-05, -0.00014495849609375, -1.9073486328125e-06, -0.00011789763811975718, -8.809195423964411e-05, -4.14840251323767e-05, -4.768370445162873e-07, -9.72747802734375e-05, -0.0023660659790039062, -5.7220458984375e-06, -0.0001049041748046875, -4.267692565917969e-05, 0.0, -0.004798646084964275, 0.0, -4.1961669921875e-05, -0.008371353149414062, -9.5367431640625e-06, -0.0023937225341796875, -5.7220458984375e-06, -0.0050144195556640625, -6.866455078125e-05, -8.392333984375e-05, -1.9073486328125e-06, -0.0009493820834904909, -3.576278118089249e-07, -0.04920528084039688, -7.152555099310121e-07, -6.082990646362305, 0.0, -0.04561679810285568, 0.0, -3.24249267578125e-05, -0.0005626678466796875, -3.814697265625e-06, -0.000152587890625, -0.00022530555725097656, 0.0, -0.0029648179188370705, 0.0, -5.14984130859375e-05], "score": -6.298109980435804, "model_output": {"hole4": "player", "hole0": "Consecration", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "damage", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "PALADIN", "_type": "Template14", "hole0": "Consecration"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        game.other_player.damage.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Consecration", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110], "score_history": [-0.0007801055908203125, -0.000102996826171875, -4.172324224782642e-06, -3.099436753473128e-06, -8.701812475919724e-06, -3.635883331298828e-05, -0.0003724098205566406, -0.0030498504638671875, -0.00041961669921875, -0.0001220703125, -2.384185791015625e-06, -1.9073486328125e-06, -2.0861578377662227e-05, -2.0265579223632812e-06, -0.038555264472961426, -3.62396240234375e-05, -0.00010752677189884707, 0.0, -0.00034461217001080513, 0.0, -2.09808349609375e-05, -8.7738037109375e-05, -2.6702880859375e-05, -1.1563301086425781e-05, 0.0, -0.031905174255371094, -9.1552734375e-05, -0.009214401245117188, -0.0001049041748046875, -0.0001201629638671875, -2.288818359375e-05, -0.0004576120700221509, -2.384185791015625e-06, -0.000255584716796875, -0.0003223419189453125, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -0.00045120716094970703, -2.09808349609375e-05, -0.0001521109661553055, 0.0, -9.5367431640625e-06, -0.0024662017822265625, 0.0, -9.918212890625e-05, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -2.86102294921875e-05, -1.1920928244535389e-07, -0.0005408520228229463, -3.576278118089249e-07, -0.000600620754994452, -3.24249267578125e-05, -0.000431060791015625, -1.9073486328125e-05, -2.09808349609375e-05, -0.00014495849609375, -1.9073486328125e-06, -0.00011789763811975718, -8.809195423964411e-05, -4.14840251323767e-05, -4.768370445162873e-07, -9.72747802734375e-05, -0.0023660659790039062, -5.7220458984375e-06, -0.0001049041748046875, -4.267692565917969e-05, 0.0, -0.004798646084964275, 0.0, -4.1961669921875e-05, -0.008371353149414062, -9.5367431640625e-06, -0.0023937225341796875, -5.7220458984375e-06, -0.0050144195556640625, -6.866455078125e-05, -8.392333984375e-05, -1.9073486328125e-06, -0.0009493820834904909, -3.576278118089249e-07, -0.04920528084039688, -7.152555099310121e-07, -0.0074396319687366486, -1.1920928244535389e-07, -0.00013660472177434713, 0.0, -0.00035858154296875, -0.00049591064453125, -1.9073486328125e-06, -0.0004215240478515625, -0.00024068355560302734, 0.0, -6.1334638595581055, -4.768370445162873e-07, -0.000152587890625], "score": -6.308221306045297, "model_output": {"hole4": "player", "hole0": "Consecration", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "PALADIN", "_type": "Template14", "hole0": "Consecration"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.damage(player.effective_spell_damage(0), self)\n"}, {"choice_history": [121, 200, "Consecration", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0007801055908203125, -0.000102996826171875, -4.172324224782642e-06, -3.099436753473128e-06, -8.701812475919724e-06, -3.635883331298828e-05, -0.0003724098205566406, -0.0030498504638671875, -0.00041961669921875, -0.0001220703125, -2.384185791015625e-06, -1.9073486328125e-06, -2.0861578377662227e-05, -2.0265579223632812e-06, -0.038555264472961426, -3.62396240234375e-05, -0.00010752677189884707, 0.0, -0.00034461217001080513, 0.0, -2.09808349609375e-05, -8.7738037109375e-05, -2.6702880859375e-05, -1.1563301086425781e-05, 0.0, -0.031905174255371094, -9.1552734375e-05, -0.009214401245117188, -0.0001049041748046875, -0.0001201629638671875, -2.288818359375e-05, -0.0004576120700221509, -2.384185791015625e-06, -0.000255584716796875, -0.0003223419189453125, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -0.00045120716094970703, -2.09808349609375e-05, -0.0001521109661553055, 0.0, -9.5367431640625e-06, -0.0024662017822265625, 0.0, -9.918212890625e-05, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -2.86102294921875e-05, -1.1920928244535389e-07, -0.0005408520228229463, -3.576278118089249e-07, -0.000600620754994452, -3.24249267578125e-05, -0.000431060791015625, -1.9073486328125e-05, -2.09808349609375e-05, -0.00014495849609375, -1.9073486328125e-06, -0.00011789763811975718, -8.809195423964411e-05, -4.14840251323767e-05, -4.768370445162873e-07, -9.72747802734375e-05, -0.0023660659790039062, -5.7220458984375e-06, -0.0001049041748046875, -4.267692565917969e-05, 0.0, -0.004798646084964275, 0.0, -4.1961669921875e-05, -5.070525169372559, -0.000274658203125, -0.00014495849609375, -7.62939453125e-06, -0.00021505355834960938, -3.814697265625e-06, -0.9073104858398438, -3.0517578125e-05, -0.18644332885742188, -0.0003153085708618164, 0.0, -0.0002765655517578125, -0.0001068115234375, -2.86102294921875e-05, -0.001148223876953125, -2.86102294921875e-05, -4.9948692321777344e-05, -3.4689903259277344e-05, -0.06737948954105377, 0.0, -0.00101470947265625, -0.000965118408203125, -3.814697265625e-06, -4.76837158203125e-05, -0.00011456012725830078, 0.0, -0.0037823927123099566, 0.0, -3.0517578125e-05], "score": -6.339687104472937, "model_output": {"hole4": "player", "hole0": "Consecration", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "PALADIN", "_type": "Template14", "hole0": "Consecration"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        for minion in player.minions:\n            minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Consecration", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "4", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0007801055908203125, -0.000102996826171875, -4.172324224782642e-06, -3.099436753473128e-06, -8.701812475919724e-06, -3.635883331298828e-05, -0.0003724098205566406, -0.0030498504638671875, -0.00041961669921875, -0.0001220703125, -2.384185791015625e-06, -1.9073486328125e-06, -2.0861578377662227e-05, -2.0265579223632812e-06, -0.038555264472961426, -3.62396240234375e-05, -0.00010752677189884707, 0.0, -0.00034461217001080513, 0.0, -2.09808349609375e-05, -8.7738037109375e-05, -2.6702880859375e-05, -1.1563301086425781e-05, 0.0, -0.031905174255371094, -9.1552734375e-05, -0.009214401245117188, -0.0001049041748046875, -0.0001201629638671875, -2.288818359375e-05, -0.0004576120700221509, -2.384185791015625e-06, -0.000255584716796875, -0.0003223419189453125, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -0.00045120716094970703, -2.09808349609375e-05, -0.0001521109661553055, 0.0, -9.5367431640625e-06, -0.0024662017822265625, 0.0, -9.918212890625e-05, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -2.86102294921875e-05, -1.1920928244535389e-07, -0.0005408520228229463, -3.576278118089249e-07, -0.000600620754994452, -3.24249267578125e-05, -0.000431060791015625, -1.9073486328125e-05, -2.09808349609375e-05, -0.00014495849609375, -1.9073486328125e-06, -0.00011789763811975718, -8.809195423964411e-05, -4.14840251323767e-05, -4.768370445162873e-07, -9.72747802734375e-05, -0.0023660659790039062, -5.7220458984375e-06, -0.0001049041748046875, -4.267692565917969e-05, 0.0, -6.354018688201904, 0.0, -0.0002193450927734375, -0.07700634002685547, -5.7220458984375e-06, -0.001544952392578125, -3.814697265625e-06, -0.003795623779296875, -0.0001087188720703125, -9.1552734375e-05, -1.9073486328125e-06, -0.0005854367045685649, -4.768370445162873e-07, -0.04318773001432419, -1.0728830375228426e-06, -0.008539550006389618, -2.3841855067985307e-07, -9.119109745370224e-05, 0.0, -0.000270843505859375, -0.0003681182861328125, -1.9073486328125e-06, -0.0004177093505859375, -0.00021588802337646484, 0.0, -0.00327094504609704, 0.0, -7.2479248046875e-05], "score": -6.5883840778522185, "model_output": {"hole4": "player", "hole0": "Consecration", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "PALADIN", "_type": "Template14", "hole0": "Consecration"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(4), self)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Consecration", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "hero", "<EOS>"], "score_history": [-0.0007801055908203125, -0.000102996826171875, -4.172324224782642e-06, -3.099436753473128e-06, -8.701812475919724e-06, -3.635883331298828e-05, -0.0003724098205566406, -0.0030498504638671875, -0.00041961669921875, -0.0001220703125, -2.384185791015625e-06, -1.9073486328125e-06, -2.0861578377662227e-05, -2.0265579223632812e-06, -0.038555264472961426, -3.62396240234375e-05, -0.00010752677189884707, 0.0, -0.00034461217001080513, 0.0, -2.09808349609375e-05, -8.7738037109375e-05, -2.6702880859375e-05, -1.1563301086425781e-05, 0.0, -4.098715782165527, -1.1444091796875e-05, -1.5568504333496094, -1.1444091796875e-05, -2.09808349609375e-05, -0.0009746551513671875, -1.9073486328125e-06, -0.002565860515460372, -1.33514404296875e-05, -1.52587890625e-05, -1.52587890625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.340576171875e-05, 0.0, -8.296966552734375e-05, -3.24249267578125e-05, -0.00027048567426390946, 0.0, -6.67572021484375e-05, -0.004403114318847656, 0.0, -0.0001392364501953125, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -2.09808349609375e-05, -2.3841855067985307e-07, -0.0007650851039215922, -2.3841855067985307e-07, -0.00033163849730044603, -2.86102294921875e-05, -0.0001201629638671875, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.0006046295166015625, -2.09808349609375e-05, -0.03788313269615173, -2.86102294921875e-05, -3.0517578125e-05, -0.000308990478515625, 0.0, -0.0028362274169921875, -0.0001735687255859375, -7.62939453125e-06, 0.0, -0.021242141723632812, 0.0, -0.19180333614349365, -9.5367431640625e-06, -0.0004998445510864258, -1.9073486328125e-06, -0.2026233673095703, -0.0001277923583984375, -0.0001201629638671875, 0.0, -0.0006551742553710938, -1.71661376953125e-05, -0.012225252576172352, 0.0, -3.814697265625e-06, -0.00055694580078125, -1.9073486328125e-06, -0.0001068115234375, -0.000598907470703125, -5.53131103515625e-05, 0.0, -0.00385284423828125, 0.0, -0.24223017692565918, -1.9073486328125e-06, -0.24428963661193848, -4.1723224057932384e-06], "score": -6.6726180784996245, "model_output": {"hole4": "player", "hole0": "Consecration", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"hole1": "append", "hole2": [{"attr": "hero", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "PALADIN", "_type": "Template14", "hole0": "Consecration"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.current_player.hero)\n"}, {"choice_history": [121, 200, "Consecration", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0007801055908203125, -0.000102996826171875, -4.172324224782642e-06, -3.099436753473128e-06, -8.701812475919724e-06, -3.635883331298828e-05, -0.0003724098205566406, -0.0030498504638671875, -0.00041961669921875, -0.0001220703125, -2.384185791015625e-06, -1.9073486328125e-06, -2.0861578377662227e-05, -2.0265579223632812e-06, -0.038555264472961426, -3.62396240234375e-05, -0.00010752677189884707, 0.0, -0.00034461217001080513, 0.0, -2.09808349609375e-05, -8.7738037109375e-05, -2.6702880859375e-05, -1.1563301086425781e-05, 0.0, -0.031905174255371094, -9.1552734375e-05, -0.009214401245117188, -0.0001049041748046875, -0.0001201629638671875, -2.288818359375e-05, -0.0004576120700221509, -2.384185791015625e-06, -0.000255584716796875, -0.0003223419189453125, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -0.00045120716094970703, -2.09808349609375e-05, -0.0001521109661553055, 0.0, -9.5367431640625e-06, -0.0024662017822265625, 0.0, -9.918212890625e-05, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -2.86102294921875e-05, -1.1920928244535389e-07, -0.0005408520228229463, -3.576278118089249e-07, -0.000600620754994452, -3.24249267578125e-05, -0.000431060791015625, -1.9073486328125e-05, -2.09808349609375e-05, -0.00014495849609375, -1.9073486328125e-06, -0.00011789763811975718, -8.809195423964411e-05, -4.14840251323767e-05, -4.768370445162873e-07, -9.72747802734375e-05, -0.0023660659790039062, -5.7220458984375e-06, -0.0001049041748046875, -4.267692565917969e-05, 0.0, -0.004798646084964275, 0.0, -4.1961669921875e-05, -0.008371353149414062, -9.5367431640625e-06, -0.0023937225341796875, -5.7220458984375e-06, -6.418779373168945, -0.06836962699890137, -1.9073486328125e-06, -0.14528463780879974, 0.0, -0.00026702880859375, -0.0048999786376953125, -5.7220458984375e-06, -0.00029754638671875, -0.0026837587356567383, 0.0, -0.002646026201546192, 0.0, -4.38690185546875e-05], "score": -6.7534642432779535, "model_output": {"hole4": "player", "hole0": "Consecration", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "PALADIN", "_type": "Template14", "hole0": "Consecration"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        player.hero.damage(player.effective_spell_damage(2), self)\n"}], "index": 20}
{"beams": [{"choice_history": [121, 198, "Core", "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Core", " ", "Hound", "<EOS>", "7", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "5", "<EOS>"], "score_history": [-2.47955322265625e-05, -1.33514404296875e-05, -0.010423033498227596, -1.680836794548668e-05, -1.931178485392593e-05, -1.2864533346146345e-05, -3.933906555175781e-06, -2.3126602172851562e-05, -0.0002956390380859375, -0.0020999908447265625, -0.0002460479736328125, -0.0003799677360802889, -4.9591064453125e-05, -2.1457672119140625e-06, 0.0, -0.01047175470739603, 0.0, -0.0003871917724609375, 0.0, -1.71661376953125e-05, 0.0, -0.00081634521484375, -2.288818359375e-05, -2.86102294921875e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.0015697479248046875, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0001163482666015625, -8.20159912109375e-05, -3.814697265625e-06, -5.364403477869928e-06, -5.9604644775390625e-06, -5.721993511542678e-05, -0.0001544952392578125], "score": -0.02744680603791494, "model_output": {"hole4": "player", "hole0": "CoreHound", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Core Hound", "hole1": 7, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 9}]}, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n"}, {"choice_history": [121, 198, "<UNK>", "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Core", " ", "Hound", "<EOS>", "7", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "5", "<EOS>"], "score_history": [-2.47955322265625e-05, -1.33514404296875e-05, -4.591150760650635, -0.0004021312633994967, -1.2755334864777979e-05, -4.409579560160637e-06, -2.1457672119140625e-06, -2.5033950805664062e-05, -0.0002880096435546875, -0.002925872802734375, -0.00023651123046875, -0.00034445617347955704, -3.4332275390625e-05, -2.0265579223632812e-06, 0.0, -0.007512649521231651, 0.0, -0.0003871917724609375, 0.0, -1.9073486328125e-05, 0.0, -0.000812530517578125, -2.09808349609375e-05, -2.86102294921875e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.001720428466796875, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -7.05718994140625e-05, 0.0, -0.0001201629638671875, -8.0108642578125e-05, -3.814697265625e-06, -5.364403477869928e-06, -5.9604644775390625e-06, -5.781595973530784e-05, -0.0001544952392578125], "score": -4.606491146833832, "model_output": {"hole4": "player", "hole0": "<UNK>Hound", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Core Hound", "hole1": 7, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 9}]}, "inferred_code": "class <UNK>Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n"}, {"choice_history": [121, 198, "Core", "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Core", " ", "Hound", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "5", "<EOS>"], "score_history": [-2.47955322265625e-05, -1.33514404296875e-05, -0.010423033498227596, -1.680836794548668e-05, -1.931178485392593e-05, -1.2864533346146345e-05, -3.933906555175781e-06, -2.3126602172851562e-05, -0.0002956390380859375, -0.0020999908447265625, -0.0002460479736328125, -0.0003799677360802889, -4.9591064453125e-05, -2.1457672119140625e-06, 0.0, -5.810181617736816, 0.0, -0.00078582763671875, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -0.0003185272216796875, -1.52587890625e-05, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0017871856689453125, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0001087188720703125, -7.62939453125e-05, -3.814697265625e-06, -5.245195097813848e-06, -5.9604644775390625e-06, -5.781595973530784e-05, -0.0001468658447265625], "score": -5.827246791269317, "model_output": {"hole4": "player", "hole0": "CoreHound", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Core Hound", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 9}]}, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 2, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n"}, {"choice_history": [121, 198, "Core", "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Core", " ", "Hound", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "5", "<EOS>"], "score_history": [-2.47955322265625e-05, -1.33514404296875e-05, -0.010423033498227596, -1.680836794548668e-05, -1.931178485392593e-05, -1.2864533346146345e-05, -3.933906555175781e-06, -2.3126602172851562e-05, -0.0002956390380859375, -0.0020999908447265625, -0.0002460479736328125, -0.0003799677360802889, -4.9591064453125e-05, -2.1457672119140625e-06, 0.0, -5.875317573547363, 0.0, -0.000274658203125, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.000278472900390625, -1.33514404296875e-05, -2.6702880859375e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.002208709716796875, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -7.43865966796875e-05, 0.0, -0.0001049041748046875, -7.2479248046875e-05, -3.814697265625e-06, -5.364403477869928e-06, -5.9604644775390625e-06, -5.805437103845179e-05, -0.00014495849609375], "score": -5.892232424157555, "model_output": {"hole4": "player", "hole0": "CoreHound", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Core Hound", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 9}]}, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n"}, {"choice_history": [121, 198, "Core", "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Core", " ", "Hound", "<EOS>", "7", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "5", "<EOS>"], "score_history": [-2.47955322265625e-05, -1.33514404296875e-05, -0.010423033498227596, -1.680836794548668e-05, -1.931178485392593e-05, -1.2864533346146345e-05, -3.933906555175781e-06, -2.3126602172851562e-05, -0.0002956390380859375, -0.0020999908447265625, -0.0002460479736328125, -0.0003799677360802889, -4.9591064453125e-05, -2.1457672119140625e-06, 0.0, -0.01047175470739603, 0.0, -0.0003871917724609375, 0.0, -1.71661376953125e-05, 0.0, -0.00081634521484375, -2.288818359375e-05, -2.86102294921875e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -6.6189069747924805, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -9.655952453613281e-06, 0.0, -0.0001735687255859375, -3.24249267578125e-05, -3.814697265625e-06, -5.722029527532868e-06, -6.079673767089844e-06, -6.544499774463475e-05, -9.72747802734375e-05], "score": -6.644680320443513, "model_output": {"hole4": "player", "hole0": "CoreHound", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Core Hound", "hole1": 7, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 9}]}, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n"}, {"choice_history": [121, 198, "Core", "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Core", " ", "Hound", "<EOS>", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "5", "<EOS>"], "score_history": [-2.47955322265625e-05, -1.33514404296875e-05, -0.010423033498227596, -1.680836794548668e-05, -1.931178485392593e-05, -1.2864533346146345e-05, -3.933906555175781e-06, -2.3126602172851562e-05, -0.0002956390380859375, -0.0020999908447265625, -0.0002460479736328125, -0.0003799677360802889, -4.9591064453125e-05, -2.1457672119140625e-06, 0.0, -6.924851417541504, -0.0008144378662109375, 0.0, -2.47955322265625e-05, 0.0, -0.000331878662109375, -2.86102294921875e-05, -4.38690185546875e-05, 0.0, -3.814697265625e-06, -1.1444091796875e-05, -0.0019378662109375, -3.814697265625e-06, -1.71661376953125e-05, 0.0, -6.4849853515625e-05, 0.0, -0.000125885009765625, -0.0001068115234375, -3.814697265625e-06, -5.125986263010418e-06, -5.9604644775390625e-06, -5.3166884754318744e-05, -0.0001583099365234375], "score": -6.942203647131009, "model_output": {"hole4": "player", "hole0": "CoreHound", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Core Hound", "hole1": 0, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 9}]}, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n"}, {"choice_history": [121, 198, "Core", "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Core", " ", "Hound", "<EOS>", "FREE", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "5", "<EOS>"], "score_history": [-2.47955322265625e-05, -1.33514404296875e-05, -0.010423033498227596, -1.680836794548668e-05, -1.931178485392593e-05, -1.2864533346146345e-05, -3.933906555175781e-06, -2.3126602172851562e-05, -0.0002956390380859375, -0.0020999908447265625, -0.0002460479736328125, -0.0003799677360802889, -4.9591064453125e-05, -2.1457672119140625e-06, 0.0, -7.009720802307129, -5.113991937832907e-05, -0.0006504058837890625, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.000339508056640625, -2.86102294921875e-05, -2.86102294921875e-05, 0.0, -2.0265579223632812e-06, -1.33514404296875e-05, -0.0018310546875, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -7.2479248046875e-05, 0.0, -0.00011444091796875, -8.20159912109375e-05, -3.814697265625e-06, -5.483612312673358e-06, -5.9604644775390625e-06, -5.781595973530784e-05, -0.0001506805419921875], "score": -7.026803141110122, "model_output": {"hole4": "player", "hole0": "CoreHound", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Core Hound", "hole1": 0, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 9}]}, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n"}, {"choice_history": [121, 198, "Core", "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Core", " ", "Hound", "<EOS>", "7", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "5", "<EOS>"], "score_history": [-2.47955322265625e-05, -1.33514404296875e-05, -0.010423033498227596, -1.680836794548668e-05, -1.931178485392593e-05, -1.2864533346146345e-05, -3.933906555175781e-06, -2.3126602172851562e-05, -0.0002956390380859375, -0.0020999908447265625, -0.0002460479736328125, -0.0003799677360802889, -4.9591064453125e-05, -2.1457672119140625e-06, 0.0, -0.01047175470739603, 0.0, -0.0003871917724609375, 0.0, -1.71661376953125e-05, 0.0, -7.173921585083008, -5.14984130859375e-05, 0.0, -6.556507287314162e-06, 0.0, -0.0011844635009765625, -0.0007781982421875, -3.814697265625e-06, -4.887569048150908e-06, -2.0265579223632812e-06, -6.913993274793029e-05, -2.09808349609375e-05], "score": -7.2005298720459905, "model_output": {"hole4": "player", "hole0": "CoreHound", "hole1": "MinionCard", "hole2": [{"hole4": {"_type": "Template53"}, "hole0": "Core Hound", "hole1": 7, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 9}]}, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n"}, {"choice_history": [121, 198, "Core", "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Core", " ", "Hound", "<EOS>", "9", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "5", "<EOS>"], "score_history": [-2.47955322265625e-05, -1.33514404296875e-05, -0.010423033498227596, -1.680836794548668e-05, -1.931178485392593e-05, -1.2864533346146345e-05, -3.933906555175781e-06, -2.3126602172851562e-05, -0.0002956390380859375, -0.0020999908447265625, -0.0002460479736328125, -0.0003799677360802889, -4.9591064453125e-05, -2.1457672119140625e-06, 0.0, -7.303925037384033, 0.0, -0.0006999969482421875, 0.0, -4.00543212890625e-05, 0.0, -0.000652313232421875, -4.9591064453125e-05, -4.1961669921875e-05, 0.0, -1.9073486328125e-06, -1.52587890625e-05, -0.0018291473388671875, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -6.67572021484375e-05, 0.0, -0.000110626220703125, -6.866455078125e-05, -3.814697265625e-06, -4.887569048150908e-06, -5.9604644775390625e-06, -5.8769666793523356e-05, -0.0001468658447265625], "score": -7.321353203237777, "model_output": {"hole4": "player", "hole0": "CoreHound", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Core Hound", "hole1": 9, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 9}]}, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 9, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n"}, {"choice_history": [121, 198, "Core", "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Core", " ", "Hound", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DREAM", "<EOS>", 94, 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "5", "<EOS>"], "score_history": [-2.47955322265625e-05, -1.33514404296875e-05, -0.010423033498227596, -1.680836794548668e-05, -1.931178485392593e-05, -1.2864533346146345e-05, -3.933906555175781e-06, -2.3126602172851562e-05, -0.0002956390380859375, -6.255537033081055, -6.866455078125e-05, -7.62939453125e-06, -0.6900482177734375, -0.000110626220703125, -0.005069732666015625, -0.0001811981201171875, -2.47955322265625e-05, -7.867794920457527e-06, -3.767012094613165e-05, -3.838465272565372e-05, 0.0, -0.030910491943359375, -0.2985248565673828, -3.814697265625e-06, -0.01802825927734375, 0.0, -0.00012993812561035156, -1.9431114196777344e-05, -0.1836944818496704, -2.47955322265625e-05, -0.0012874603271484375, -0.0002040863037109375, -3.62396240234375e-05, 0.0, -0.0006542205810546875, 0.0, -0.0001068115234375, -0.000362396240234375, -3.814697265625e-06, -5.960446742392378e-06, -8.70227722771233e-06, -3.767005182453431e-05, -0.00020039081573486328], "score": -7.496208506606763, "model_output": {"hole4": "player", "hole0": "CoreHound", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Core Hound", "_type": "Str"}, {"_type": "Template59"}, {"attr": "DREAM", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 9}]}, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 2, CHARACTER_CLASS.DREAM,\n            CARD_RARITY.COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n"}, {"choice_history": [121, 198, "Core", "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Core", " ", "Hound", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "5", "<EOS>"], "score_history": [-2.47955322265625e-05, -1.33514404296875e-05, -0.010423033498227596, -1.680836794548668e-05, -1.931178485392593e-05, -1.2864533346146345e-05, -3.933906555175781e-06, -2.3126602172851562e-05, -0.0002956390380859375, -0.0020999908447265625, -0.0002460479736328125, -0.0003799677360802889, -4.9591064453125e-05, -2.1457672119140625e-06, 0.0, -7.582125663757324, 0.0, -0.0005855560302734375, 0.0, -2.6702880859375e-05, 0.0, -0.0005588531494140625, -3.0517578125e-05, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -0.0016422271728515625, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -6.4849853515625e-05, 0.0, -0.00011444091796875, -9.1552734375e-05, -3.814697265625e-06, -4.768360213347478e-06, -5.9604644775390625e-06, -5.412058817455545e-05, -0.00016033649444580078], "score": -7.59914672997138, "model_output": {"hole4": "player", "hole0": "CoreHound", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Core Hound", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 9}]}, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 3, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n"}, {"choice_history": [121, 198, "Core", "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Core", " ", "Hound", "<EOS>", "0", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "5", "<EOS>"], "score_history": [-2.47955322265625e-05, -1.33514404296875e-05, -0.010423033498227596, -1.680836794548668e-05, -1.931178485392593e-05, -1.2864533346146345e-05, -3.933906555175781e-06, -2.3126602172851562e-05, -0.0002956390380859375, -0.0020999908447265625, -0.0002460479736328125, -0.0003799677360802889, -4.9591064453125e-05, -2.1457672119140625e-06, 0.0, -7.744935035705566, 0.0, -0.0004940032958984375, 0.0, -1.71661376953125e-05, 0.0, -0.000579833984375, -1.9073486328125e-05, -3.0517578125e-05, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -0.0016384124755859375, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -6.67572021484375e-05, 0.0, -0.0001220703125, -8.20159912109375e-05, -3.814697265625e-06, -5.364403477869928e-06, -5.9604644775390625e-06, -5.793516538687982e-05, -0.0001506805419921875], "score": -7.761845952412841, "model_output": {"hole4": "player", "hole0": "CoreHound", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Core Hound", "hole1": 0, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 9}]}, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n"}, {"choice_history": [121, 198, "Core", "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Hound", "<EOS>", "7", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "5", "<EOS>"], "score_history": [-2.47955322265625e-05, -1.33514404296875e-05, -0.010423033498227596, -1.680836794548668e-05, -1.931178485392593e-05, -1.2864533346146345e-05, -3.933906555175781e-06, -2.3126602172851562e-05, -0.0002956390380859375, -0.0020999908447265625, -0.0002460479736328125, -7.925326824188232, -0.00011110296327387914, -2.1457672119140625e-06, 0.0, -0.002476603025570512, 0.0, -0.000270843505859375, 0.0, -1.9073486328125e-05, 0.0, -0.0008602142333984375, -2.288818359375e-05, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -0.001628875732421875, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -7.62939453125e-05, 0.0, -0.00011444091796875, -7.05718994140625e-05, -3.814697265625e-06, -5.245195097813848e-06, -5.9604644775390625e-06, -5.9484835219336674e-05, -0.00014495849609375], "score": -7.944439280215192, "model_output": {"hole4": "player", "hole0": "CoreHound", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "<UNK> Hound", "hole1": 7, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 9}]}, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY\n            .COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n"}, {"choice_history": [121, 198, "Core", "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Core", " ", "Hound", "<EOS>", "minion", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "5", "<EOS>"], "score_history": [-2.47955322265625e-05, -1.33514404296875e-05, -0.010423033498227596, -1.680836794548668e-05, -1.931178485392593e-05, -1.2864533346146345e-05, -3.933906555175781e-06, -2.3126602172851562e-05, -0.0002956390380859375, -0.0020999908447265625, -0.0002460479736328125, -0.0003799677360802889, -4.9591064453125e-05, -2.1457672119140625e-06, 0.0, -8.349891662597656, -1.0013547580456361e-05, -0.00113677978515625, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.0002460479736328125, -3.0517578125e-05, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.0025653839111328125, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -6.866455078125e-05, 0.0, -0.000118255615234375, -6.67572021484375e-05, -3.814697265625e-06, -5.483612312673358e-06, -5.9604644775390625e-06, -6.425310129998252e-05, -0.000133514404296875], "score": -8.368020659635931, "model_output": {"hole4": "player", "hole0": "CoreHound", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Core Hound", "hole1": 0, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 9}]}, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n"}, {"choice_history": [121, 198, "Core", "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Core", " ", "Hound", "<EOS>", 75, 190, "7", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 94, 327, 119, 310, "combo", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "5", "<EOS>"], "score_history": [-2.47955322265625e-05, -1.33514404296875e-05, -0.010423033498227596, -1.680836794548668e-05, -1.931178485392593e-05, -1.2864533346146345e-05, -3.933906555175781e-06, -2.3126602172851562e-05, -0.0002956390380859375, -6.255537033081055, -6.866455078125e-05, -7.62939453125e-06, -0.6995019912719727, -0.000133514404296875, -0.0045928955078125, -3.814697265625e-06, -3.24249267578125e-05, -8.713835995877162e-05, -2.6822088329936378e-05, -4.1841663914965466e-05, 0.0, -0.4855842590332031, -0.0001373291015625, -0.0020716185681521893, -1.1324866136419587e-05, -0.0024089813232421875, -3.814697265625e-06, -0.0005130767822265625, 0.0, -0.0004788637161254883, -2.0265579223632812e-06, -0.4300044775009155, 0.0, -0.9889936447143555, -0.025434494018554688, -0.13219642639160156, -3.814697265625e-06, -0.4591456651687622, -1.9073486328125e-06, -0.60028076171875, -0.0006103515625, -0.08563232421875, -0.061252593994140625, -0.09166908264160156, -0.00091552734375, -0.13347434997558594, -3.4332275390625e-05, -0.040355682373046875, -8.96453857421875e-05, -0.08555126190185547, -0.002429962158203125, -0.014751434326171875, -0.07698094844818115, -1.9073486328125e-05, -0.00010347366333007812, -0.036939382553100586, 0.0, -0.09888054430484772, -1.9073486328125e-06, -0.04921150207519531, -0.009296417236328125, -0.012375235557556152, -5.7220458984375e-06, -0.0003628730773925781, -0.0395280122756958, -4.00543212890625e-05, -0.004681902937591076, -0.0011484622955322266, -0.00078582763671875, -0.019489288330078125, -5.14984130859375e-05, -0.0029188350308686495, -4.4822638301411644e-05, -1.9073486328125e-06, -0.0029430389404296875, -0.0040740966796875, -0.0004425048828125, -9.5367431640625e-06, -0.0001226663589477539, -0.0013437271118164062, 0.0, -2.47955322265625e-05, -0.02393341064453125, -0.006995201110839844, -0.01949930191040039, -1.9073486328125e-06, -0.00066375732421875, -0.0014324188232421875, -3.814697265625e-05, -0.000102996826171875, -1.9073486328125e-06, 0.0, -0.00021171558182686567, -0.002359159290790558, -2.1219253540039062e-05, -0.0001316070556640625, -0.38176727294921875, -0.0005741119384765625, -4.38690185546875e-05, -0.0001583099365234375, -0.0076067447662353516, 0.0, -0.21644020080566406, -0.000118255615234375, 0.0, -3.4570680327306036e-06, 0.0, -0.00041961669921875, -1.52587890625e-05, -1.52587890625e-05, -8.940672159951646e-06, -3.933906555175781e-06, -7.521926454501227e-05, -5.340576171875e-05], "score": -11.639430331757012, "model_output": {"hole4": "player", "hole0": "CoreHound", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"func": {"_type": "Template66"}, "_type": "Call", "args": [{"func": {"_type": "Template73"}, "_type": "Call", "args": [{"_type": "List", "elts": [{"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeHealth", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"_type": "Template62_expr_seq"}]}]}, {"_type": "Template46", "hole0": "SelfSelector"}, {"func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"value": {"_type": "Template76"}, "arg": "value", "_type": "keyword"}], "_type": "Call", "args": [{"hole1": {"_type": "Template74"}, "hole2": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"_type": "Template53"}]}], "_type": "Template35", "hole0": "Count"}]}]}, "arg": "combo", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Core Hound", "_type": "Str"}, {"_type": "Num", "n": 7}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 9}]}, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, combo=Battlecry(Give([Buff(ChangeAttack(2)),\n            Buff(ChangeHealth(2))]), SelfSelector(), GreaterThan(Count(\n            MinionSelector(IsType(MINION_TYPE.MECH))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n"}], "index": 21}
{"beams": [{"choice_history": [121, 200, "Corruption", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 68, 162, 25, 186, "Turn", "Started", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 79, 220, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "score_history": [-9.34600830078125e-05, -0.000301361083984375, -2.264974000354414e-06, -9.417532055522315e-06, -1.7162412405014038e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0002536773681640625, -0.0002002716064453125, -9.34600830078125e-05, -7.259582343976945e-05, -3.576278118089249e-07, -1.0371154530730564e-05, 0.0, -0.004352569580078125, -1.9073486328125e-05, -0.0008544921875, 0.0, -0.0001926422119140625, -9.5367431640625e-06, -0.00089263916015625, -0.011626243591308594, 0.0, -4.57763671875e-05, 0.0, -1.1563301086425781e-05, 0.0, -7.05718994140625e-05, -5.91278076171875e-05, -0.000339508056640625, -0.0001697540283203125, -5.7220458984375e-06, -0.0036640167236328125, -0.00313568115234375, -0.0002117156982421875, -0.0023174285888671875, -0.0013141632080078125, -0.021355748176574707, -1.0013580322265625e-05, -1.52587890625e-05, -9.72747802734375e-05, -0.0001621246337890625, -0.0045871734619140625, -0.000858306884765625, -0.0018491744995117188, -0.0003643035888671875, -0.0007762908935546875, -3.814697265625e-06, -0.0033288002014160156, -0.0573272705078125, -7.641315460205078e-05, -6.29425048828125e-05, -7.82012939453125e-05, -9.5367431640625e-06, -0.001932382583618164, 0.0, -0.000701904296875, 0.0, -0.006843686103820801, -1.537799835205078e-05, -3.814697265625e-06, -0.00310516357421875, -0.005469322204589844, -0.0030317306518554688, -3.576278118089249e-07, -0.00025606132112443447, -3.814697265625e-06, 0.0], "score": -0.1426881485241438, "model_output": {"hole4": "player", "hole0": "Corruption", "hole6": [{"_type": "Template19"}, {"hole1": "add_effect", "hole2": [{"func": {"_type": "Template77"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "TurnStarted"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "player", "_type": "keyword"}]}, {"_type": "Template23", "hole3": "SelfSelector", "hole0": "Kill"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Corruption", "hole1": 1, "hole2": "WARLOCK", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n"}, {"choice_history": [121, 200, "Corruption", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 68, 162, 25, 186, "Turn", "Turn", "Started", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 79, 220, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "score_history": [-9.34600830078125e-05, -0.000301361083984375, -2.264974000354414e-06, -9.417532055522315e-06, -1.7162412405014038e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0002536773681640625, -0.0002002716064453125, -9.34600830078125e-05, -7.259582343976945e-05, -3.576278118089249e-07, -1.0371154530730564e-05, 0.0, -0.004352569580078125, -1.9073486328125e-05, -0.0008544921875, 0.0, -0.0001926422119140625, -9.5367431640625e-06, -0.00089263916015625, -0.011626243591308594, 0.0, -4.57763671875e-05, 0.0, -1.1563301086425781e-05, 0.0, -7.05718994140625e-05, -5.91278076171875e-05, -0.000339508056640625, -0.0001697540283203125, -5.7220458984375e-06, -0.0036640167236328125, -0.00313568115234375, -0.0002117156982421875, -0.0023174285888671875, -0.0013141632080078125, -0.021355748176574707, -1.0013580322265625e-05, -1.52587890625e-05, -9.72747802734375e-05, -0.0001621246337890625, -0.0045871734619140625, -0.000858306884765625, -0.0018491744995117188, -0.0003643035888671875, -0.0007762908935546875, -3.814697265625e-06, -0.0033288002014160156, -3.1158971786499023, -0.037842750549316406, -6.687641143798828e-05, -3.0517578125e-05, -5.14984130859375e-05, -9.5367431640625e-06, -0.0017964839935302734, 0.0, -0.0006866455078125, 0.0, -0.006522417068481445, -1.919269561767578e-05, -5.7220458984375e-06, -0.001224517822265625, -0.005977630615234375, -0.0032806396484375, -3.576278118089249e-07, -0.00024187560484278947, -1.9073486328125e-06, 0.0], "score": -3.2374259168865365, "model_output": {"hole4": "player", "hole0": "Corruption", "hole6": [{"_type": "Template19"}, {"hole1": "add_effect", "hole2": [{"func": {"_type": "Template77"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "TurnTurnStarted"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "player", "_type": "keyword"}]}, {"_type": "Template23", "hole3": "SelfSelector", "hole0": "Kill"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Corruption", "hole1": 1, "hole2": "WARLOCK", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnTurnStarted(player=EnemyPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n"}, {"choice_history": [121, 200, "Corruption", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "unbind", "<EOS>", 320, 68, 163, 60, 321, 68, 162, 25, 186, "Turn", "Started", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 79, 220, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "score_history": [-9.34600830078125e-05, -0.000301361083984375, -2.264974000354414e-06, -9.417532055522315e-06, -1.7162412405014038e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0002536773681640625, -0.0002002716064453125, -9.34600830078125e-05, -7.259582343976945e-05, -3.576278118089249e-07, -1.0371154530730564e-05, 0.0, -0.004352569580078125, -1.9073486328125e-05, -0.0008544921875, 0.0, -0.0001926422119140625, -9.5367431640625e-06, -0.00089263916015625, -0.011626243591308594, 0.0, -4.57763671875e-05, 0.0, -1.1563301086425781e-05, 0.0, -7.05718994140625e-05, -5.91278076171875e-05, -0.000339508056640625, -0.0001697540283203125, -5.7220458984375e-06, -0.0036640167236328125, -0.00313568115234375, -0.0002117156982421875, -0.0023174285888671875, -0.0013141632080078125, -5.067951679229736, -3.814697265625e-06, -0.000102996826171875, -0.00109100341796875, -0.0001888275146484375, -0.011273384094238281, -0.0006809234619140625, -0.0033407211303710938, -0.0004024505615234375, -0.0003948211669921875, -3.814697265625e-06, -0.004208803176879883, -0.06297218799591064, -7.450580596923828e-05, -8.20159912109375e-05, -5.91278076171875e-05, -7.62939453125e-06, -0.0019474029541015625, 0.0, -0.000736236572265625, 0.0, -0.006604909896850586, -1.537799835205078e-05, -3.814697265625e-06, -0.003131866455078125, -0.005374908447265625, -0.0029020309448242188, -3.576278118089249e-07, -0.0002700089244171977, -1.9073486328125e-06, 0.0], "score": -5.204189413212703, "model_output": {"hole4": "player", "hole0": "Corruption", "hole6": [{"_type": "Template19"}, {"hole1": "unbind", "hole2": [{"func": {"_type": "Template77"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "TurnStarted"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "player", "_type": "keyword"}]}, {"_type": "Template23", "hole3": "SelfSelector", "hole0": "Kill"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Corruption", "hole1": 1, "hole2": "WARLOCK", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.unbind(Effect(TurnStarted(player=EnemyPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n"}, {"choice_history": [121, 200, "Corruption", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 68, 162, 25, 186, "Turn", "Started", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 79, 220, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "score_history": [-9.34600830078125e-05, -0.000301361083984375, -2.264974000354414e-06, -9.417532055522315e-06, -1.7162412405014038e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0002536773681640625, -0.0002002716064453125, -9.34600830078125e-05, -7.259582343976945e-05, -3.576278118089249e-07, -1.0371154530730564e-05, 0.0, -0.004352569580078125, -1.9073486328125e-05, -0.0008544921875, 0.0, -0.0001926422119140625, -9.5367431640625e-06, -0.00089263916015625, -5.091639518737793, 0.0, -0.0001773834228515625, 0.0, -1.3470649719238281e-05, 0.0, -6.866455078125e-05, -0.0001049041748046875, -0.000919342041015625, -0.00020599365234375, -5.7220458984375e-06, -0.0032978057861328125, -0.0026569366455078125, -0.0002040863037109375, -0.002376556396484375, -0.0011348724365234375, -0.018101930618286133, -7.033347174001392e-06, -1.1444091796875e-05, -0.0001087188720703125, -0.0001468658447265625, -0.004405975341796875, -0.000919342041015625, -0.0019931793212890625, -0.0003376007080078125, -0.0006351470947265625, -3.814697265625e-06, -0.0030611753463745117, -0.059418678283691406, -6.878376007080078e-05, -6.4849853515625e-05, -7.62939453125e-05, -9.5367431640625e-06, -0.0019142627716064453, 0.0, -0.0006961822509765625, 0.0, -0.00689542293548584, -1.537799835205078e-05, -3.814697265625e-06, -0.0029621124267578125, -0.005539894104003906, -0.0029249191284179688, -3.576278118089249e-07, -0.00025475004804320633, -3.814697265625e-06, 0.0], "score": -5.220777147346894, "model_output": {"hole4": "player", "hole0": "Corruption", "hole6": [{"_type": "Template19"}, {"hole1": "add_effect", "hole2": [{"func": {"_type": "Template77"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "TurnStarted"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "player", "_type": "keyword"}]}, {"_type": "Template23", "hole3": "SelfSelector", "hole0": "Kill"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Corruption", "hole1": 1, "hole2": "WARLOCK", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n"}, {"choice_history": [121, 200, "Corruption", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 68, 162, 25, 186, "Turn", "Than", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 79, 220, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "score_history": [-9.34600830078125e-05, -0.000301361083984375, -2.264974000354414e-06, -9.417532055522315e-06, -1.7162412405014038e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0002536773681640625, -0.0002002716064453125, -9.34600830078125e-05, -7.259582343976945e-05, -3.576278118089249e-07, -1.0371154530730564e-05, 0.0, -0.004352569580078125, -1.9073486328125e-05, -0.0008544921875, 0.0, -0.0001926422119140625, -9.5367431640625e-06, -0.00089263916015625, -0.011626243591308594, 0.0, -4.57763671875e-05, 0.0, -1.1563301086425781e-05, 0.0, -7.05718994140625e-05, -5.91278076171875e-05, -0.000339508056640625, -0.0001697540283203125, -5.7220458984375e-06, -0.0036640167236328125, -0.00313568115234375, -0.0002117156982421875, -0.0023174285888671875, -0.0013141632080078125, -0.021355748176574707, -1.0013580322265625e-05, -1.52587890625e-05, -9.72747802734375e-05, -0.0001621246337890625, -0.0045871734619140625, -0.000858306884765625, -0.0018491744995117188, -0.0003643035888671875, -0.0007762908935546875, -3.814697265625e-06, -0.0033288002014160156, -5.875231742858887, 0.0, -0.0004367828369140625, -6.866455078125e-05, -1.33514404296875e-05, -0.0034943819046020508, 0.0, -0.00031280517578125, 0.0, -0.006246805191040039, -7.62939453125e-06, -3.814697265625e-06, -0.0011577606201171875, -0.007411956787109375, -0.0020923614501953125, -5.960462772236497e-07, -0.00012695776240434498, -3.814697265625e-06, 0.0], "score": -5.9603795939765405, "model_output": {"hole4": "player", "hole0": "Corruption", "hole6": [{"_type": "Template19"}, {"hole1": "add_effect", "hole2": [{"func": {"_type": "Template77"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "TurnThan"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "player", "_type": "keyword"}]}, {"_type": "Template23", "hole3": "SelfSelector", "hole0": "Kill"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Corruption", "hole1": 1, "hole2": "WARLOCK", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnThan(player=EnemyPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n"}, {"choice_history": [121, 200, "Corruption", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Corruption", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 68, 162, 25, 186, "Turn", "Started", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 79, 220, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "score_history": [-9.34600830078125e-05, -0.000301361083984375, -2.264974000354414e-06, -9.417532055522315e-06, -1.7162412405014038e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0002536773681640625, -0.0002002716064453125, -9.34600830078125e-05, -7.259582343976945e-05, -3.576278118089249e-07, -1.0371154530730564e-05, 0.0, -5.902161598205566, 0.0, -0.0018968582153320312, 0.0, -0.0003032684326171875, -7.62939453125e-06, -0.000457763671875, -0.011700630187988281, 0.0, -4.1961669921875e-05, 0.0, -9.5367431640625e-06, 0.0, -5.91278076171875e-05, -6.103515625e-05, -0.0003814697265625, -0.0001678466796875, -5.7220458984375e-06, -0.00373077392578125, -0.0031414031982421875, -0.0002117156982421875, -0.00238037109375, -0.0012340545654296875, -0.021227240562438965, -1.0013580322265625e-05, -1.52587890625e-05, -9.72747802734375e-05, -0.00016021728515625, -0.0045490264892578125, -0.0008640289306640625, -0.0019330978393554688, -0.0003643035888671875, -0.0007677078247070312, -3.814697265625e-06, -0.0033583641052246094, -0.057015419006347656, -7.641315460205078e-05, -6.103515625e-05, -7.82012939453125e-05, -9.5367431640625e-06, -0.0019382238388061523, 0.0, -0.0007038116455078125, 0.0, -0.006853222846984863, -1.537799835205078e-05, -3.814697265625e-06, -0.00308990478515625, -0.005466461181640625, -0.0030279159545898438, -3.576278118089249e-07, -0.00025427318178117275, -3.814697265625e-06, 0.0], "score": -6.040970557238438, "model_output": {"hole4": "player", "hole0": "Corruption", "hole6": [{"_type": "Template19"}, {"hole1": "add_effect", "hole2": [{"func": {"_type": "Template77"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "TurnStarted"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "player", "_type": "keyword"}]}, {"_type": "Template23", "hole3": "SelfSelector", "hole0": "Kill"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Corruption", "hole1": 1, "hole2": "ROGUE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n"}, {"choice_history": [121, 200, "Corruption", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 68, 162, 25, 186, "Turn", "Started", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Current", "Player", "<EOS>", 79, 220, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "score_history": [-9.34600830078125e-05, -0.000301361083984375, -2.264974000354414e-06, -9.417532055522315e-06, -1.7162412405014038e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0002536773681640625, -0.0002002716064453125, -9.34600830078125e-05, -7.259582343976945e-05, -3.576278118089249e-07, -1.0371154530730564e-05, 0.0, -0.004352569580078125, -1.9073486328125e-05, -0.0008544921875, 0.0, -0.0001926422119140625, -9.5367431640625e-06, -0.00089263916015625, -0.011626243591308594, 0.0, -4.57763671875e-05, 0.0, -1.1563301086425781e-05, 0.0, -7.05718994140625e-05, -5.91278076171875e-05, -0.000339508056640625, -0.0001697540283203125, -5.7220458984375e-06, -0.0036640167236328125, -0.00313568115234375, -0.0002117156982421875, -0.0023174285888671875, -0.0013141632080078125, -0.021355748176574707, -1.0013580322265625e-05, -1.52587890625e-05, -9.72747802734375e-05, -0.0001621246337890625, -0.0045871734619140625, -0.000858306884765625, -0.0018491744995117188, -0.0003643035888671875, -0.0007762908935546875, -3.814697265625e-06, -0.0033288002014160156, -0.0573272705078125, -7.641315460205078e-05, -6.29425048828125e-05, -7.82012939453125e-05, -9.5367431640625e-06, -0.001932382583618164, 0.0, -0.000701904296875, 0.0, -6.025176048278809, -0.0004730224609375, -1.71661376953125e-05, -0.0032634735107421875, -0.00577545166015625, -0.004070281982421875, -3.576278118089249e-07, -0.0002810954174492508, -3.814697265625e-06, 0.0], "score": -6.163019531421128, "model_output": {"hole4": "player", "hole0": "Corruption", "hole6": [{"_type": "Template19"}, {"hole1": "add_effect", "hole2": [{"func": {"_type": "Template77"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "TurnStarted"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "CurrentPlayer"}, "arg": "player", "_type": "keyword"}]}, {"_type": "Template23", "hole3": "SelfSelector", "hole0": "Kill"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Corruption", "hole1": 1, "hole2": "WARLOCK", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnStarted(player=CurrentPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n"}, {"choice_history": [121, 200, "Corruption", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "bounce", "<EOS>", 320, 68, 163, 60, 321, 68, 162, 25, 186, "Turn", "Started", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 79, 220, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "score_history": [-9.34600830078125e-05, -0.000301361083984375, -2.264974000354414e-06, -9.417532055522315e-06, -1.7162412405014038e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0002536773681640625, -0.0002002716064453125, -9.34600830078125e-05, -7.259582343976945e-05, -3.576278118089249e-07, -1.0371154530730564e-05, 0.0, -0.004352569580078125, -1.9073486328125e-05, -0.0008544921875, 0.0, -0.0001926422119140625, -9.5367431640625e-06, -0.00089263916015625, -0.011626243591308594, 0.0, -4.57763671875e-05, 0.0, -1.1563301086425781e-05, 0.0, -7.05718994140625e-05, -5.91278076171875e-05, -0.000339508056640625, -0.0001697540283203125, -5.7220458984375e-06, -0.0036640167236328125, -0.00313568115234375, -0.0002117156982421875, -0.0023174285888671875, -0.0013141632080078125, -6.364601135253906, 0.0, -8.0108642578125e-05, -0.0007686614990234375, -7.43865966796875e-05, -0.038176536560058594, -0.0006885528564453125, -0.0033130645751953125, -0.0002880096435546875, -0.0005664825439453125, -3.814697265625e-06, -0.0039511919021606445, -0.05877792835235596, -7.259845733642578e-05, -7.82012939453125e-05, -7.05718994140625e-05, -7.62939453125e-06, -0.0018341541290283203, 0.0, -0.000713348388671875, 0.0, -0.0065680742263793945, -1.537799835205078e-05, -3.814697265625e-06, -0.004795074462890625, -0.005259513854980469, -0.0028285980224609375, -3.576278118089249e-07, -0.00025987604749388993, -3.814697265625e-06, 0.0], "score": -6.524162762696619, "model_output": {"hole4": "player", "hole0": "Corruption", "hole6": [{"_type": "Template19"}, {"hole1": "bounce", "hole2": [{"func": {"_type": "Template77"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "TurnStarted"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "player", "_type": "keyword"}]}, {"_type": "Template23", "hole3": "SelfSelector", "hole0": "Kill"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Corruption", "hole1": 1, "hole2": "WARLOCK", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce(Effect(TurnStarted(player=EnemyPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n"}, {"choice_history": [121, 200, "Corruption", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 68, 162, 25, 186, "Turn", "Started", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 79, 220, "Resurrect", "<UNK>", "<EOS>", "Player", "Selector", "<EOS>"], "score_history": [-9.34600830078125e-05, -0.000301361083984375, -2.264974000354414e-06, -9.417532055522315e-06, -1.7162412405014038e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0002536773681640625, -0.0002002716064453125, -9.34600830078125e-05, -7.259582343976945e-05, -3.576278118089249e-07, -1.0371154530730564e-05, 0.0, -0.004352569580078125, -1.9073486328125e-05, -0.0008544921875, 0.0, -0.0001926422119140625, -9.5367431640625e-06, -0.00089263916015625, -0.011626243591308594, 0.0, -4.57763671875e-05, 0.0, -1.1563301086425781e-05, 0.0, -7.05718994140625e-05, -5.91278076171875e-05, -0.000339508056640625, -0.0001697540283203125, -5.7220458984375e-06, -0.0036640167236328125, -0.00313568115234375, -0.0002117156982421875, -0.0023174285888671875, -0.0013141632080078125, -0.021355748176574707, -1.0013580322265625e-05, -1.52587890625e-05, -9.72747802734375e-05, -0.0001621246337890625, -0.0045871734619140625, -0.000858306884765625, -0.0018491744995117188, -0.0003643035888671875, -0.0007762908935546875, -3.814697265625e-06, -0.0033288002014160156, -0.0573272705078125, -7.641315460205078e-05, -6.29425048828125e-05, -7.82012939453125e-05, -9.5367431640625e-06, -0.001932382583618164, 0.0, -0.000701904296875, 0.0, -0.006843686103820801, -1.537799835205078e-05, -3.814697265625e-06, -0.00310516357421875, -0.005469322204589844, -6.393280029296875, -9.5367431640625e-05, -6.568216485902667e-05, -0.002169012790545821, -1.9073486328125e-06, 0.0], "score": -6.53500818325864, "model_output": {"hole4": "player", "hole0": "Corruption", "hole6": [{"_type": "Template19"}, {"hole1": "add_effect", "hole2": [{"func": {"_type": "Template77"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "TurnStarted"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "player", "_type": "keyword"}]}, {"_type": "Template23", "hole3": "PlayerSelector", "hole0": "Resurrect<UNK>"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Corruption", "hole1": 1, "hole2": "WARLOCK", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()),\n            ActionTag(Resurrect<UNK>(), PlayerSelector())))\n"}, {"choice_history": [121, 200, "Corruption", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 68, 162, 25, 186, "Turn", "Started", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>"], "score_history": [-9.34600830078125e-05, -0.000301361083984375, -2.264974000354414e-06, -9.417532055522315e-06, -1.7162412405014038e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0002536773681640625, -0.0002002716064453125, -9.34600830078125e-05, -7.259582343976945e-05, -3.576278118089249e-07, -1.0371154530730564e-05, 0.0, -0.004352569580078125, -1.9073486328125e-05, -0.0008544921875, 0.0, -0.0001926422119140625, -9.5367431640625e-06, -0.00089263916015625, -0.011626243591308594, 0.0, -4.57763671875e-05, 0.0, -1.1563301086425781e-05, 0.0, -7.05718994140625e-05, -5.91278076171875e-05, -0.000339508056640625, -0.0001697540283203125, -5.7220458984375e-06, -0.0036640167236328125, -0.00313568115234375, -0.0002117156982421875, -0.0023174285888671875, -0.0013141632080078125, -0.021355748176574707, -1.0013580322265625e-05, -1.52587890625e-05, -9.72747802734375e-05, -0.0001621246337890625, -0.0045871734619140625, -0.000858306884765625, -0.0018491744995117188, -0.0003643035888671875, -0.0007762908935546875, -3.814697265625e-06, -0.0033288002014160156, -0.0573272705078125, -7.641315460205078e-05, -6.29425048828125e-05, -7.82012939453125e-05, -9.5367431640625e-06, -0.001932382583618164, 0.0, -0.000701904296875, 0.0, -0.006843686103820801, -1.537799835205078e-05, -3.814697265625e-06, -6.190674781799316, -1.9073486328125e-06, -0.25248146057128906, -9.5367431640625e-06, -1.1444091796875e-05], "score": -6.574000829001477, "model_output": {"hole4": "player", "hole0": "Corruption", "hole6": [{"_type": "Template19"}, {"hole1": "add_effect", "hole2": [{"func": {"_type": "Template77"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "TurnStarted"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "player", "_type": "keyword"}]}, {"_type": "Template46", "hole0": "EnemyPlayer"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Corruption", "hole1": 1, "hole2": "WARLOCK", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()),\n            EnemyPlayer()))\n"}, {"choice_history": [121, 200, "Corruption", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 68, 162, 25, 186, "Turn", "Started", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 79, 220, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "score_history": [-9.34600830078125e-05, -0.000301361083984375, -2.264974000354414e-06, -9.417532055522315e-06, -1.7162412405014038e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0002536773681640625, -0.0002002716064453125, -9.34600830078125e-05, -7.259582343976945e-05, -3.576278118089249e-07, -1.0371154530730564e-05, 0.0, -0.004352569580078125, -1.9073486328125e-05, -0.0008544921875, 0.0, -0.0001926422119140625, -9.5367431640625e-06, -0.00089263916015625, -6.511857986450195, 0.0, -5.340576171875e-05, 0.0, -1.1563301086425781e-05, 0.0, -7.05718994140625e-05, -0.0001049041748046875, -0.0003509521484375, -0.0001621246337890625, -5.7220458984375e-06, -0.0037288665771484375, -0.0032329559326171875, -0.00022125244140625, -0.00238800048828125, -0.0009765625, -0.02060234546661377, -1.0013580322265625e-05, -1.33514404296875e-05, -0.0001049041748046875, -0.0001621246337890625, -0.004549980163574219, -0.0008697509765625, -0.0018596649169921875, -0.000370025634765625, -0.0008287429809570312, -3.814697265625e-06, -0.003397703170776367, -0.0581207275390625, -7.641315460205078e-05, -6.29425048828125e-05, -7.62939453125e-05, -9.5367431640625e-06, -0.0019466876983642578, 0.0, -0.0006999969482421875, 0.0, -0.006868243217468262, -1.537799835205078e-05, -3.814697265625e-06, -0.003139495849609375, -0.0054645538330078125, -0.0030279159545898438, -3.576278118089249e-07, -0.00025761104188859463, -3.814697265625e-06, 0.0], "score": -6.6431016855495955, "model_output": {"hole4": "player", "hole0": "Corruption", "hole6": [{"_type": "Template19"}, {"hole1": "add_effect", "hole2": [{"func": {"_type": "Template77"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "TurnStarted"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "player", "_type": "keyword"}]}, {"_type": "Template23", "hole3": "SelfSelector", "hole0": "Kill"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Corruption", "hole1": 1, "hole2": "WARLOCK", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n"}, {"choice_history": [121, 200, "Corruption", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 68, 162, 25, 186, "Turn", "Ended", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 79, 220, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "score_history": [-9.34600830078125e-05, -0.000301361083984375, -2.264974000354414e-06, -9.417532055522315e-06, -1.7162412405014038e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0002536773681640625, -0.0002002716064453125, -9.34600830078125e-05, -7.259582343976945e-05, -3.576278118089249e-07, -1.0371154530730564e-05, 0.0, -0.004352569580078125, -1.9073486328125e-05, -0.0008544921875, 0.0, -0.0001926422119140625, -9.5367431640625e-06, -0.00089263916015625, -0.011626243591308594, 0.0, -4.57763671875e-05, 0.0, -1.1563301086425781e-05, 0.0, -7.05718994140625e-05, -5.91278076171875e-05, -0.000339508056640625, -0.0001697540283203125, -5.7220458984375e-06, -0.0036640167236328125, -0.00313568115234375, -0.0002117156982421875, -0.0023174285888671875, -0.0013141632080078125, -0.021355748176574707, -1.0013580322265625e-05, -1.52587890625e-05, -9.72747802734375e-05, -0.0001621246337890625, -0.0045871734619140625, -0.000858306884765625, -0.0018491744995117188, -0.0003643035888671875, -0.0007762908935546875, -3.814697265625e-06, -0.0033288002014160156, -6.677262783050537, -7.62939453125e-06, -0.000148773193359375, -5.14984130859375e-05, -1.52587890625e-05, -0.0027719736099243164, 0.0, -0.0002536773681640625, 0.0, -0.006638883613049984, -1.728534698486328e-05, -3.814697265625e-06, -0.0037059783935546875, -0.006740570068359375, -0.0029336214065551758, -4.768370445162873e-07, -0.00027513422537595034, -3.814697265625e-06, 0.0], "score": -6.76460134166706, "model_output": {"hole4": "player", "hole0": "Corruption", "hole6": [{"_type": "Template19"}, {"hole1": "add_effect", "hole2": [{"func": {"_type": "Template77"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "TurnEnded"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "player", "_type": "keyword"}]}, {"_type": "Template23", "hole3": "SelfSelector", "hole0": "Kill"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Corruption", "hole1": 1, "hole2": "WARLOCK", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnEnded(player=EnemyPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n"}, {"choice_history": [121, 200, "Corruption", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 68, 162, 25, 186, "Turn", "Started", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 79, 220, "Kill", "<EOS>", "Self", "Selector", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>"], "score_history": [-9.34600830078125e-05, -0.000301361083984375, -2.264974000354414e-06, -9.417532055522315e-06, -1.7162412405014038e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0002536773681640625, -0.0002002716064453125, -9.34600830078125e-05, -7.259582343976945e-05, -3.576278118089249e-07, -1.0371154530730564e-05, 0.0, -0.004352569580078125, -1.9073486328125e-05, -0.0008544921875, 0.0, -0.0001926422119140625, -9.5367431640625e-06, -0.00089263916015625, -0.011626243591308594, 0.0, -4.57763671875e-05, 0.0, -1.1563301086425781e-05, 0.0, -7.05718994140625e-05, -5.91278076171875e-05, -0.000339508056640625, -0.0001697540283203125, -5.7220458984375e-06, -5.844033241271973, -0.0599212646484375, -0.0001010894775390625, -0.0005130767822265625, -0.0010700225830078125, -0.09658932685852051, -7.62939453125e-06, -8.392333984375e-05, -0.0025043487548828125, -0.000301361083984375, -0.002643585205078125, -0.0007495880126953125, -0.017386436462402344, -0.0001983642578125, -0.00036144256591796875, -3.814697265625e-06, -0.0009186267270706594, -0.07450306415557861, -4.208087921142578e-05, -0.0001010894775390625, -0.000141143798828125, -1.1444091796875e-05, -0.003919124603271484, 0.0, -0.0007610321044921875, 0.0, -0.011705756187438965, -1.33514404296875e-05, -3.814697265625e-06, -0.0001125335693359375, -0.0075702667236328125, -0.0027151107788085938, -2.3841855067985307e-07, -0.00012016295659122989, -3.814697265625e-06, 0.0, -0.023522377014160156, -0.00041961669921875, -0.6213722229003906, -7.82012939453125e-05, -0.056919097900390625, -7.43865966796875e-05, -0.0205841064453125, -3.4332275390625e-05, -0.001499176025390625, -0.00037384033203125, -0.9893178939819336, -0.0001277923583984375, -0.3401937484741211, -1.52587890625e-05, -0.09871673583984375, -8.0108642578125e-05, -0.007218360900878906, -2.6702880859375e-05, -0.000606536865234375, -0.000240325927734375], "score": -8.31025087185131, "model_output": {"hole4": "player", "hole0": "Corruption", "hole6": [{"_type": "Template19"}, {"hole1": "add_effect", "hole2": [{"func": {"_type": "Template77"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "TurnStarted"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "player", "_type": "keyword"}]}, {"_type": "Template23", "hole3": "SelfSelector", "hole0": "Kill"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "reveal", "_type": "Template43", "hole0": {"_type": "Template46", "hole0": "super"}}, "_type": "Expr"}, {"value": {"hole1": "reveal", "_type": "Template43", "hole0": {"_type": "Template46", "hole0": "super"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Corruption", "hole1": 1, "hole2": "WARLOCK", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n        super().reveal()\n        super().reveal()\n"}, {"choice_history": [121, 200, "Corruption", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110], "score_history": [-9.34600830078125e-05, -0.000301361083984375, -2.264974000354414e-06, -9.417532055522315e-06, -1.7162412405014038e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0002536773681640625, -0.0002002716064453125, -9.34600830078125e-05, -7.259582343976945e-05, -3.576278118089249e-07, -1.0371154530730564e-05, 0.0, -0.004352569580078125, -1.9073486328125e-05, -0.0008544921875, 0.0, -0.0001926422119140625, -9.5367431640625e-06, -0.00089263916015625, -0.011626243591308594, 0.0, -4.57763671875e-05, 0.0, -1.1563301086425781e-05, 0.0, -7.05718994140625e-05, -5.91278076171875e-05, -0.000339508056640625, -0.0001697540283203125, -5.7220458984375e-06, -0.0036640167236328125, -0.00313568115234375, -0.0002117156982421875, -0.0023174285888671875, -0.0013141632080078125, -5.958554744720459, 0.0, -0.04409980773925781, -0.10623931884765625, -0.01375579833984375, -0.000194549560546875, -0.0071868896484375, -0.0033483505249023438, -0.14378491044044495, -2.145764938177308e-06, -7.62939453125e-06, -0.3316612243652344, -1.1444091796875e-05, -0.3597116470336914, -1.408281922340393, -1.9073486328125e-06, -0.04723644256591797], "score": -8.454440617102307, "model_output": {"hole4": "player", "hole0": "Corruption", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Corruption", "hole1": 1, "hole2": "WARLOCK", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_heal_power(self.target.\n            calculate_attack()), self)\n"}, {"choice_history": [121, 200, "Corruption", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 68, 162, 25, 186, "Turn", "Started", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 79, 220, "Kill", "<EOS>", "Self", "Selector", "<EOS>", 130, 168, 34, 243, 25, 186, "target", "<EOS>", "change_temp_attack", "<EOS>", "4", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "5", "<EOS>"], "score_history": [-9.34600830078125e-05, -0.000301361083984375, -2.264974000354414e-06, -9.417532055522315e-06, -1.7162412405014038e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0002536773681640625, -0.0002002716064453125, -9.34600830078125e-05, -7.259582343976945e-05, -3.576278118089249e-07, -1.0371154530730564e-05, 0.0, -0.004352569580078125, -1.9073486328125e-05, -0.0008544921875, 0.0, -0.0001926422119140625, -9.5367431640625e-06, -0.00089263916015625, -0.011626243591308594, 0.0, -4.57763671875e-05, 0.0, -1.1563301086425781e-05, 0.0, -7.05718994140625e-05, -5.91278076171875e-05, -0.000339508056640625, -0.0001697540283203125, -5.7220458984375e-06, -5.844033241271973, -0.0599212646484375, -0.0001010894775390625, -0.0005130767822265625, -0.0010700225830078125, -0.09658932685852051, -7.62939453125e-06, -8.392333984375e-05, -0.0025043487548828125, -0.000301361083984375, -0.002643585205078125, -0.0007495880126953125, -0.017386436462402344, -0.0001983642578125, -0.00036144256591796875, -3.814697265625e-06, -0.0009186267270706594, -0.07450306415557861, -4.208087921142578e-05, -0.0001010894775390625, -0.000141143798828125, -1.1444091796875e-05, -0.003919124603271484, 0.0, -0.0007610321044921875, 0.0, -0.011705756187438965, -1.33514404296875e-05, -3.814697265625e-06, -0.0001125335693359375, -0.0075702667236328125, -0.0027151107788085938, -2.3841855067985307e-07, -0.00012016295659122989, -3.814697265625e-06, 0.0, -0.023522377014160156, -0.00041961669921875, -0.7816686630249023, -0.0002155303955078125, -0.15518760681152344, 0.0, -0.01982402801513672, 0.0, -0.5685462951660156, 0.0, -0.2841208279132843, 0.0, -0.2256031036376953, -0.000362396240234375, -0.7534894943237305, -0.1543130874633789, 0.0, -2.6702880859375e-05, -0.08120918273925781, -0.00040435791015625, -0.000308990478515625, -1.9073486328125e-06, -0.009015679359436035, -0.5921163558959961, 0.0, -0.1299217939376831, -0.017563819885253906], "score": -9.946671866848334, "model_output": {"hole4": "player", "hole0": "Corruption", "hole6": [{"_type": "Template19"}, {"hole1": "add_effect", "hole2": [{"func": {"_type": "Template77"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "TurnStarted"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "EnemyPlayer"}, "arg": "player", "_type": "keyword"}]}, {"_type": "Template23", "hole3": "SelfSelector", "hole0": "Kill"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "change_temp_attack", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Name", "id": "target"}}, "_type": "Expr"}, {"hole1": "add_buff", "hole2": [{"hole1": "ChangeHealth", "hole2": 5, "_type": "Template28", "hole0": "Buff"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_enemy_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Corruption", "hole1": 1, "hole2": "WARLOCK", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n        target.change_temp_attack(4)\n        self.target.add_buff(Buff(ChangeHealth(5)))\n"}], "index": 22}
{"beams": [{"choice_history": [121, 198, "Dalaran", "Mage", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 46], "score_history": [-3.814697265625e-06, -3.62396240234375e-05, -1.8000440832111053e-05, -5.185479312785901e-05, -3.576278118089249e-07, 0.0, -8.702254490344785e-06, -3.7431549571920186e-05, -0.0002231597900390625, -0.0003147125244140625, -0.000202178955078125, -1.1920928244535389e-07, -1.3470649719238281e-05, -1.1920928244535389e-07, 0.0, -0.0007623418932780623, 0.0, -0.00030207488453015685, 0.0, -2.3126602172851562e-05, 0.0, -2.384185791015625e-05, 0.0, -8.392333984375e-05, -0.0007305145263671875, -2.47955322265625e-05, -3.814697265625e-06, -5.364403477869928e-06, -3.814697265625e-05, -1.311301275563892e-06, -0.002567630959674716, -2.0265579223632812e-06, -0.0025873184204101562], "score": -0.008066393273949757, "model_output": {"hole4": "player", "hole0": "DalaranMage", "hole1": "MinionCard", "hole2": [{"hole1": 3, "hole2": "ALL", "_type": "Template14", "hole0": "Dalaran Mage"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 1}]}, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=1)\n"}, {"choice_history": [121, 198, "Dalaran", "Mage", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 52], "score_history": [-3.814697265625e-06, -3.62396240234375e-05, -1.8000440832111053e-05, -5.185479312785901e-05, -3.576278118089249e-07, 0.0, -8.702254490344785e-06, -3.7431549571920186e-05, -0.0002231597900390625, -0.0003147125244140625, -0.000202178955078125, -1.1920928244535389e-07, -1.3470649719238281e-05, -1.1920928244535389e-07, 0.0, -0.0007623418932780623, 0.0, -0.00030207488453015685, 0.0, -2.3126602172851562e-05, 0.0, -2.384185791015625e-05, 0.0, -8.392333984375e-05, -0.0007305145263671875, -2.47955322265625e-05, -3.814697265625e-06, -5.364403477869928e-06, -3.814697265625e-05, -1.311301275563892e-06, -0.002567630959674716, -2.0265579223632812e-06, -6.333385467529297], "score": -6.3388645423828365, "model_output": {"hole4": "player", "hole0": "DalaranMage", "hole1": "MinionCard", "hole2": [{"hole1": 3, "hole2": "ALL", "_type": "Template14", "hole0": "Dalaran Mage"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template67"}, "hole0": 1}]}, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=5)\n"}, {"choice_history": [121, 198, "Dalaran", "Mage", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Dalaran", " ", "Mage", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 46], "score_history": [-3.814697265625e-06, -3.62396240234375e-05, -1.8000440832111053e-05, -5.185479312785901e-05, -3.576278118089249e-07, 0.0, -8.702254490344785e-06, -3.7431549571920186e-05, -0.0002231597900390625, -0.0003147125244140625, -0.000202178955078125, -1.1920928244535389e-07, -1.3470649719238281e-05, -1.1920928244535389e-07, 0.0, -7.716782569885254, 0.0, -0.003994105849415064, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -8.45193862915039e-05, 0.0, -0.0001010894775390625, -0.0006198883056640625, -8.96453857421875e-05, -3.814697265625e-06, -4.887569048150908e-06, -4.38690185546875e-05, -1.4305104514278355e-06, -0.0025864671915769577, -2.0265579223632812e-06, -0.0023651123046875], "score": -7.727599243416805, "model_output": {"hole4": "player", "hole0": "DalaranMage", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "ALL", "_type": "Template14", "hole0": "Dalaran Mage"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 1}]}, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=1)\n"}, {"choice_history": [121, 198, "Dalaran", "Mage", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Dalaran", " ", "Mage", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 46], "score_history": [-3.814697265625e-06, -3.62396240234375e-05, -1.8000440832111053e-05, -5.185479312785901e-05, -3.576278118089249e-07, 0.0, -8.702254490344785e-06, -3.7431549571920186e-05, -0.0002231597900390625, -0.0003147125244140625, -0.000202178955078125, -1.1920928244535389e-07, -1.3470649719238281e-05, -1.1920928244535389e-07, 0.0, -8.08206844329834, 0.0, -0.0020940303802490234, -1.9073486328125e-06, -9.775161743164062e-06, 0.0, -3.695487976074219e-05, 0.0, -0.0001201629638671875, -0.0006046295166015625, -3.62396240234375e-05, -3.814697265625e-06, -5.364403477869928e-06, -4.00543212890625e-05, -1.4305104514278355e-06, -0.002547129290178418, -2.0265579223632812e-06, -0.002410888671875], "score": -8.090893012950616, "model_output": {"hole4": "player", "hole0": "DalaranMage", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "ALL", "_type": "Template14", "hole0": "Dalaran Mage"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 1}]}, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=1)\n"}, {"choice_history": [121, 198, "Dalaran", "Mage", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 46], "score_history": [-3.814697265625e-06, -3.62396240234375e-05, -1.8000440832111053e-05, -5.185479312785901e-05, -3.576278118089249e-07, 0.0, -8.702254490344785e-06, -3.7431549571920186e-05, -0.0002231597900390625, -8.420166969299316, -3.62396240234375e-05, -2.3841855067985307e-07, -1.7404556274414062e-05, -3.576278118089249e-07, 0.0, -0.00017750239931046963, -1.1920928244535389e-07, -0.00016617773508187383, -7.62939453125e-06, -0.3651849031448364, 0.0, -1.9073486328125e-05, 0.0, -6.508827209472656e-05, 0.0, -0.0001850128173828125, -0.0045166015625, -1.9073486328125e-05, -3.814697265625e-06, -5.245195097813848e-06, -3.24249267578125e-05, -1.311301275563892e-06, -0.00263201049529016, -1.9073486328125e-06, -0.0021190643310546875], "score": -8.79573773010619, "model_output": {"hole4": "player", "hole0": "DalaranMage", "hole1": "MinionCard", "hole2": [{"hole1": 3, "hole2": "ALL", "_type": "Template15", "hole3": "COMMON", "hole0": "Dalaran Mage"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 1}]}, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=1)\n"}, {"choice_history": [121, 198, "Dalaran", "Mage", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "4", "<EOS>", 62], "score_history": [-3.814697265625e-06, -3.62396240234375e-05, -1.8000440832111053e-05, -5.185479312785901e-05, -3.576278118089249e-07, 0.0, -8.702254490344785e-06, -3.7431549571920186e-05, -0.0002231597900390625, -0.0003147125244140625, -0.000202178955078125, -1.1920928244535389e-07, -1.3470649719238281e-05, -1.1920928244535389e-07, 0.0, -0.0007623418932780623, 0.0, -0.00030207488453015685, 0.0, -2.3126602172851562e-05, 0.0, -2.384185791015625e-05, 0.0, -8.392333984375e-05, -0.0007305145263671875, -2.47955322265625e-05, -3.814697265625e-06, -5.364403477869928e-06, -3.814697265625e-05, -1.311301275563892e-06, -8.293264389038086, 0.0, -0.6828536987304688], "score": -8.979027505104497, "model_output": {"hole4": "player", "hole0": "DalaranMage", "hole1": "MinionCard", "hole2": [{"hole1": 3, "hole2": "ALL", "_type": "Template14", "hole0": "Dalaran Mage"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "4", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 1}]}, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, 4=True)\n"}, {"choice_history": [121, 198, "Dalaran", "Mage", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 46], "score_history": [-3.814697265625e-06, -3.62396240234375e-05, -1.8000440832111053e-05, -5.185479312785901e-05, -3.576278118089249e-07, 0.0, -8.702254490344785e-06, -3.7431549571920186e-05, -0.0002231597900390625, -0.0003147125244140625, -0.000202178955078125, -1.1920928244535389e-07, -1.3470649719238281e-05, -1.1920928244535389e-07, 0.0, -0.0007623418932780623, 0.0, -8.994684219360352, -1.9073486328125e-06, -9.775161743164062e-06, 0.0, -4.744529724121094e-05, 0.0, -8.20159912109375e-05, -0.0012226104736328125, -1.9073486328125e-05, -3.814697265625e-06, -5.483612312673358e-06, -3.4332275390625e-05, -1.311301275563892e-06, -0.002688029780983925, -2.0265579223632812e-06, -0.00251007080078125], "score": -9.00298461936329, "model_output": {"hole4": "player", "hole0": "DalaranMage", "hole1": "MinionCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Dalaran Mage"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 1}]}, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=1)\n"}, {"choice_history": [121, 198, "Dalaran", "Mage", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "4", "<EOS>", 46], "score_history": [-3.814697265625e-06, -3.62396240234375e-05, -1.8000440832111053e-05, -5.185479312785901e-05, -3.576278118089249e-07, 0.0, -8.702254490344785e-06, -3.7431549571920186e-05, -0.0002231597900390625, -0.0003147125244140625, -0.000202178955078125, -1.1920928244535389e-07, -1.3470649719238281e-05, -1.1920928244535389e-07, 0.0, -0.0007623418932780623, 0.0, -0.00030207488453015685, 0.0, -2.3126602172851562e-05, 0.0, -2.384185791015625e-05, 0.0, -8.392333984375e-05, -0.0007305145263671875, -2.47955322265625e-05, -3.814697265625e-06, -5.364403477869928e-06, -3.814697265625e-05, -1.311301275563892e-06, -8.293264389038086, 0.0, -0.8910036087036133], "score": -9.187177415077642, "model_output": {"hole4": "player", "hole0": "DalaranMage", "hole1": "MinionCard", "hole2": [{"hole1": 3, "hole2": "ALL", "_type": "Template14", "hole0": "Dalaran Mage"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "4", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 1}]}, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, 4=1)\n"}, {"choice_history": [121, 198, "Dalaran", "Mage", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 62], "score_history": [-3.814697265625e-06, -3.62396240234375e-05, -1.8000440832111053e-05, -5.185479312785901e-05, -3.576278118089249e-07, 0.0, -8.702254490344785e-06, -3.7431549571920186e-05, -0.0002231597900390625, -0.0003147125244140625, -0.000202178955078125, -1.1920928244535389e-07, -1.3470649719238281e-05, -1.1920928244535389e-07, 0.0, -0.0007623418932780623, 0.0, -0.00030207488453015685, 0.0, -2.3126602172851562e-05, 0.0, -2.384185791015625e-05, 0.0, -8.392333984375e-05, -0.0007305145263671875, -2.47955322265625e-05, -3.814697265625e-06, -5.364403477869928e-06, -3.814697265625e-05, -1.311301275563892e-06, -0.002567630959674716, -2.0265579223632812e-06, -9.211629867553711], "score": -9.21710894240725, "model_output": {"hole4": "player", "hole0": "DalaranMage", "hole1": "MinionCard", "hole2": [{"hole1": 3, "hole2": "ALL", "_type": "Template14", "hole0": "Dalaran Mage"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 1}]}, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=True)\n"}, {"choice_history": [121, 198, "Dalaran", "Mage", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "divine_shield", "<EOS>", 62], "score_history": [-3.814697265625e-06, -3.62396240234375e-05, -1.8000440832111053e-05, -5.185479312785901e-05, -3.576278118089249e-07, 0.0, -8.702254490344785e-06, -3.7431549571920186e-05, -0.0002231597900390625, -0.0003147125244140625, -0.000202178955078125, -1.1920928244535389e-07, -1.3470649719238281e-05, -1.1920928244535389e-07, 0.0, -0.0007623418932780623, 0.0, -0.00030207488453015685, 0.0, -2.3126602172851562e-05, 0.0, -2.384185791015625e-05, 0.0, -8.392333984375e-05, -0.0007305145263671875, -2.47955322265625e-05, -3.814697265625e-06, -5.364403477869928e-06, -3.814697265625e-05, -1.311301275563892e-06, -8.929430961608887, 0.0, -0.3331947326660156], "score": -9.265535111610845, "model_output": {"hole4": "player", "hole0": "DalaranMage", "hole1": "MinionCard", "hole2": [{"hole1": 3, "hole2": "ALL", "_type": "Template14", "hole0": "Dalaran Mage"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "divine_shield", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 1}]}, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, divine_shield=True)\n"}, {"choice_history": [121, 198, "Dalaran", "Mage", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 80, 231, "Give", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 68, 162, 57, 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>"], "score_history": [-3.814697265625e-06, -3.62396240234375e-05, -1.8000440832111053e-05, -5.185479312785901e-05, -3.576278118089249e-07, 0.0, -8.702254490344785e-06, -3.7431549571920186e-05, -0.0002231597900390625, -0.0003147125244140625, -0.000202178955078125, -1.1920928244535389e-07, -1.3470649719238281e-05, -1.1920928244535389e-07, 0.0, -0.0007623418932780623, 0.0, -0.00030207488453015685, 0.0, -2.3126602172851562e-05, 0.0, -2.384185791015625e-05, 0.0, -8.392333984375e-05, -0.0007305145263671875, -2.47955322265625e-05, -3.814697265625e-06, -5.364403477869928e-06, -3.814697265625e-05, -1.311301275563892e-06, -6.830413341522217, -4.8160552978515625e-05, -0.0001049041748046875, -0.0002498626708984375, -0.0006465911865234375, -2.09808349609375e-05, -0.002643585205078125, -3.576278118089249e-07, -0.021413803100585938, -1.314784049987793, -0.08481121063232422, -0.003858327865600586, 0.0, -0.00043439658475108445, -0.46814441680908203, 0.0, -0.2739724814891815, 0.0, -0.13250350952148438, -0.17116641998291016, -0.03277587890625, -0.020315170288085938, -8.0108642578125e-05, -5.91278076171875e-05, -0.28265905380249023, -7.62939453125e-06, -0.001667022705078125, -0.00035858154296875, -0.08379089832305908, -0.00011777877807617188, -1.9073486328125e-06], "score": -9.729958974624296, "model_output": {"hole4": "player", "hole0": "DalaranMage", "hole1": "MinionCard", "hole2": [{"hole1": 3, "hole2": "ALL", "_type": "Template14", "hole0": "Dalaran Mage"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "deathrattle", "_type": "Template27", "hole3": {"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"hole1": "ChangeHealth", "hole2": 1, "_type": "Template28", "hole0": "Give"}, {"func": {"_type": "Template74"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "RandomPicker"}, "arg": "picker", "_type": "keyword"}]}]}, "hole0": 1}]}, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, deathrattle=Deathrattle(Give(ChangeHealth(1)),\n            MinionSelector(picker=RandomPicker())))\n"}, {"choice_history": [121, 198, "Dalaran", "Mage", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 84, 239, "Damage", "<EOS>", 25, 186, "Summon", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "score_history": [-3.814697265625e-06, -3.62396240234375e-05, -1.8000440832111053e-05, -5.185479312785901e-05, -3.576278118089249e-07, 0.0, -8.702254490344785e-06, -3.7431549571920186e-05, -0.0002231597900390625, -0.0003147125244140625, -0.000202178955078125, -1.1920928244535389e-07, -1.3470649719238281e-05, -1.1920928244535389e-07, 0.0, -0.0007623418932780623, 0.0, -0.00030207488453015685, 0.0, -2.3126602172851562e-05, 0.0, -2.384185791015625e-05, 0.0, -8.392333984375e-05, -0.0007305145263671875, -2.47955322265625e-05, -3.814697265625e-06, -5.364403477869928e-06, -3.814697265625e-05, -1.311301275563892e-06, -6.830413341522217, -4.8160552978515625e-05, -0.0001049041748046875, -0.0002498626708984375, -0.0006465911865234375, -2.09808349609375e-05, -0.002643585205078125, -3.576278118089249e-07, -0.021413803100585938, -0.8299455642700195, -0.017515182495117188, -0.07221364974975586, -1.1920928244535389e-07, -0.021203041076660156, 0.0, -1.4118365049362183, -5.257091106614098e-05, -0.20320606231689453, -0.061249732971191406, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -0.0041086673736572266, 0.0, -0.03425943851470947, 0.0, -0.8274135589599609, -0.0010890960693359375, -0.24379034340381622, -0.00013744831085205078, 0.0], "score": -10.586481521523503, "model_output": {"hole4": "player", "hole0": "DalaranMage", "hole1": "MinionCard", "hole2": [{"hole1": 3, "hole2": "ALL", "_type": "Template14", "hole0": "Dalaran Mage"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "deathrattle", "_type": "Template27", "hole3": {"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"hole1": {"_type": "Name", "id": "Summon"}, "hole2": [{"attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Template35", "hole0": "Damage"}, {"_type": "Template46", "hole0": "PlayerSelector"}]}, "hole0": 1}]}, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, deathrattle=Deathrattle(Damage(Summon(\n            MINION_TYPE.DRAGON)), PlayerSelector()))\n"}, {"choice_history": [121, 198, "Dalaran", "Mage", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 328, 119, 310, "charge", "<EOS>", 62, 119, 310, "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 89, 247, "Damage", "<EOS>", "2", "<EOS>", 82, 234, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>"], "score_history": [-3.814697265625e-06, -3.62396240234375e-05, -1.8000440832111053e-05, -5.185479312785901e-05, -3.576278118089249e-07, 0.0, -8.702254490344785e-06, -3.7431549571920186e-05, -0.0002231597900390625, -0.0003147125244140625, -0.000202178955078125, -1.1920928244535389e-07, -1.3470649719238281e-05, -1.1920928244535389e-07, 0.0, -0.0007623418932780623, 0.0, -0.00030207488453015685, 0.0, -2.3126602172851562e-05, 0.0, -2.384185791015625e-05, 0.0, -8.392333984375e-05, -7.5947418212890625, -3.814697265625e-05, -2.3841855067985307e-07, -2.3126602172851562e-05, -4.792213439941406e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -1.1920928244535389e-07, -0.1380748748779297, -9.5367431640625e-06, 0.0, -0.417317271232605, 0.0, -0.0007343292236328125, -0.0012359619140625, 0.0, -0.38788676261901855, -7.62939453125e-06, -0.000499725341796875, -0.00020599365234375, -5.14984130859375e-05, -3.814697265625e-06, -0.004192352294921875, -4.768370445162873e-07, -0.0024127960205078125, -0.5249242782592773, -0.00020599365234375, -0.4820082187652588, -2.0265579223632812e-06, -0.11355151981115341, -1.3470649719238281e-05, -0.7774906158447266, -0.000156402587890625, -0.3112562894821167, -0.0001877373579191044, -1.9073468138230965e-06, -0.11362117528915405, -0.49099019169807434, -1.1682510375976562e-05], "score": -11.364017218858635, "model_output": {"hole4": "player", "hole0": "DalaranMage", "hole1": "MinionCard", "hole2": [{"hole1": 3, "hole2": "ALL", "_type": "Template14", "hole0": "Dalaran Mage"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole3": [{"value": {"_type": "Template79"}, "arg": "charge", "_type": "keyword"}, {"value": {"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"hole1": 2, "_type": "Template41", "hole0": "Damage"}, {"hole1": "EnemyPlayer", "_type": "Template31", "hole0": "HeroSelector"}]}, "arg": "deathrattle", "_type": "keyword"}], "hole0": "Minion"}]}, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, charge=True, deathrattle=Deathrattle(Damage(2),\n            HeroSelector(EnemyPlayer())))\n"}, {"choice_history": [121, 198, "Dalaran", "Mage", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 328, 119, 310, "charge", "<EOS>", 62, 119, 310, "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 89, 247, "Damage", "<EOS>", "2", "<EOS>", 68, 162, 25, 186, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>"], "score_history": [-3.814697265625e-06, -3.62396240234375e-05, -1.8000440832111053e-05, -5.185479312785901e-05, -3.576278118089249e-07, 0.0, -8.702254490344785e-06, -3.7431549571920186e-05, -0.0002231597900390625, -0.0003147125244140625, -0.000202178955078125, -1.1920928244535389e-07, -1.3470649719238281e-05, -1.1920928244535389e-07, 0.0, -0.0007623418932780623, 0.0, -0.00030207488453015685, 0.0, -2.3126602172851562e-05, 0.0, -2.384185791015625e-05, 0.0, -8.392333984375e-05, -7.5947418212890625, -3.814697265625e-05, -2.3841855067985307e-07, -2.3126602172851562e-05, -4.792213439941406e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -1.1920928244535389e-07, -0.1380748748779297, -9.5367431640625e-06, 0.0, -0.417317271232605, 0.0, -0.0007343292236328125, -0.0012359619140625, 0.0, -0.38788676261901855, -7.62939453125e-06, -0.000499725341796875, -0.00020599365234375, -5.14984130859375e-05, -3.814697265625e-06, -0.004192352294921875, -4.768370445162873e-07, -0.0024127960205078125, -0.5249242782592773, -0.00020599365234375, -0.4820082187652588, -2.0265579223632812e-06, -0.11355151981115341, -1.3470649719238281e-05, -0.7128505706787109, -0.000659942626953125, -0.47287654876708984, -1.9073486328125e-06, -0.1159372329711914, -2.777570807666052e-05, 0.0, -0.5038700103759766, 0.0, -3.814697265625e-06, -0.18191146850585938, 0.0, -0.000141143798828125, -6.67572021484375e-05, -0.011191368103027344, -3.576278118089249e-07, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.16245651245117188, -1.9073486328125e-06, -0.000514984130859375, -9.918212890625e-05, -0.06675529479980469, -0.0003496408462524414, -1.9073486328125e-06], "score": -11.900034802996458, "model_output": {"hole4": "player", "hole0": "DalaranMage", "hole1": "MinionCard", "hole2": [{"hole1": 3, "hole2": "ALL", "_type": "Template14", "hole0": "Dalaran Mage"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole3": [{"value": {"_type": "Template79"}, "arg": "charge", "_type": "keyword"}, {"value": {"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"hole1": 2, "_type": "Template41", "hole0": "Damage"}, {"func": {"_type": "Name", "id": "CharacterSelector"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "RandomPicker"}, "arg": "picker", "_type": "keyword"}]}]}, "arg": "deathrattle", "_type": "keyword"}], "hole0": "Minion"}]}, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, charge=True, deathrattle=Deathrattle(Damage(2),\n            CharacterSelector(players=BothPlayer(), picker=RandomPicker())))\n"}, {"choice_history": [121, 198, "Dalaran", "Mage", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 328, 119, 310, "charge", "<EOS>", 62, 119, 310, "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 89, 247, "Damage", "<EOS>", "2", "<EOS>", 68, 162, 25, 186, "Character", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>"], "score_history": [-3.814697265625e-06, -3.62396240234375e-05, -1.8000440832111053e-05, -5.185479312785901e-05, -3.576278118089249e-07, 0.0, -8.702254490344785e-06, -3.7431549571920186e-05, -0.0002231597900390625, -0.0003147125244140625, -0.000202178955078125, -1.1920928244535389e-07, -1.3470649719238281e-05, -1.1920928244535389e-07, 0.0, -0.0007623418932780623, 0.0, -0.00030207488453015685, 0.0, -2.3126602172851562e-05, 0.0, -2.384185791015625e-05, 0.0, -8.392333984375e-05, -7.5947418212890625, -3.814697265625e-05, -2.3841855067985307e-07, -2.3126602172851562e-05, -4.792213439941406e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -1.1920928244535389e-07, -0.1380748748779297, -9.5367431640625e-06, 0.0, -0.417317271232605, 0.0, -0.0007343292236328125, -0.0012359619140625, 0.0, -0.38788676261901855, -7.62939453125e-06, -0.000499725341796875, -0.00020599365234375, -5.14984130859375e-05, -3.814697265625e-06, -0.004192352294921875, -4.768370445162873e-07, -0.0024127960205078125, -0.5249242782592773, -0.00020599365234375, -0.4820082187652588, -2.0265579223632812e-06, -0.11355151981115341, -1.3470649719238281e-05, -0.7128505706787109, -0.000659942626953125, -0.47287654876708984, -1.9073486328125e-06, -0.1159372329711914, -2.777570807666052e-05, 0.0, -0.9285850524902344, -1.52587890625e-05, -1.9073486328125e-05, -0.11324799060821533, -3.814697265625e-06, -0.042118072509765625, -0.006710052490234375, -5.7220458984375e-06, 0.0, -0.08414089679718018, -0.001072286395356059, -1.1920928244535389e-07, -0.0003223419189453125, -0.000705718994140625, -1.52587890625e-05, -0.000225067138671875, -1.33514404296875e-05, -0.010162353515625, 0.0, -0.009176373481750488, -1.9073486328125e-06], "score": -12.1691959069883, "model_output": {"hole4": "player", "hole0": "DalaranMage", "hole1": "MinionCard", "hole2": [{"hole1": 3, "hole2": "ALL", "_type": "Template14", "hole0": "Dalaran Mage"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole3": [{"value": {"_type": "Template79"}, "arg": "charge", "_type": "keyword"}, {"value": {"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"hole1": 2, "_type": "Template41", "hole0": "Damage"}, {"func": {"_type": "Name", "id": "CharacterSelector"}, "_type": "Call", "keywords": [{"value": {"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "arg": "condition", "_type": "keyword"}]}]}, "arg": "deathrattle", "_type": "keyword"}], "hole0": "Minion"}]}, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, charge=True, deathrattle=Deathrattle(Damage(2),\n            CharacterSelector(condition=IsType(MINION_TYPE.DRAGON))))\n"}], "index": 23}
{"beams": [{"choice_history": [121, 200, "Divine", "Spirit", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "increase_health", "<EOS>", 320, 65, 156, 41, "health", "<EOS>"], "score_history": [-3.814697265625e-05, -0.0001201629638671875, -6.66379855829291e-05, -7.390948667307384e-06, -4.649161837733118e-06, -4.329020157456398e-05, -7.62939453125e-06, -2.0265579223632812e-06, -0.0001430511474609375, -0.000308990478515625, -0.000244140625, -8.583032467868179e-06, -6.783008575439453e-05, -4.029273259220645e-05, 0.0, -4.767629434354603e-06, 0.0, -0.021079421043395996, 0.0, -9.167194366455078e-05, 0.0, -0.0004558563232421875, -1.71661376953125e-05, 0.0, -0.00010371206008130684, 0.0, -5.7220458984375e-06, -3.62396240234375e-05, -9.1552734375e-05, -1.1920909855689388e-05, 0.0, -0.0030517578125, -1.52587890625e-05, -0.0008697509765625, -9.5367431640625e-06, -0.06195068359375, -0.02375185489654541, 0.0, -0.000240325927734375, -0.003772735595703125, -0.0001964569091796875, -0.0001201629638671875, -0.016815185546875, -7.62939453125e-06], "score": -0.133802191889572, "model_output": {"hole4": "player", "hole0": "DivineSpirit", "hole6": [{"_type": "Template19"}, {"hole1": "increase_health", "hole2": [{"attr": "health", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Divine Spirit", "hole1": 2, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(self.target.health)\n"}, {"choice_history": [121, 200, "Divine", "Spirit", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 41, "deathrattle", "<EOS>", "append", "<EOS>", 320, 65, 156, 41, "health", "<EOS>"], "score_history": [-3.814697265625e-05, -0.0001201629638671875, -6.66379855829291e-05, -7.390948667307384e-06, -4.649161837733118e-06, -4.329020157456398e-05, -7.62939453125e-06, -2.0265579223632812e-06, -0.0001430511474609375, -0.000308990478515625, -0.000244140625, -8.583032467868179e-06, -6.783008575439453e-05, -4.029273259220645e-05, 0.0, -4.767629434354603e-06, 0.0, -0.021079421043395996, 0.0, -9.167194366455078e-05, 0.0, -0.0004558563232421875, -1.71661376953125e-05, 0.0, -0.00010371206008130684, 0.0, -5.7220458984375e-06, -3.62396240234375e-05, -9.1552734375e-05, -1.1920909855689388e-05, 0.0, -0.0030517578125, -1.52587890625e-05, -0.0008697509765625, -9.5367431640625e-06, -2.822585105895996, -4.9591064453125e-05, -0.0008525848388671875, -1.1651002168655396, 0.0, -0.21467912197113037, 0.0, -0.0002574920654296875, -0.08370685577392578, -9.5367431640625e-06, -0.00087738037109375, -0.02862262725830078, -5.7220458984375e-06], "score": -4.343693391955185, "model_output": {"hole4": "player", "hole0": "DivineSpirit", "hole6": [{"_type": "Template19"}, {"hole1": "append", "hole2": [{"attr": "health", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"attr": "deathrattle", "value": {"_type": "Template52"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Divine Spirit", "hole1": 2, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.deathrattle.append(self.target.health)\n"}, {"choice_history": [121, 200, "Divine", "Spirit", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "increase_health", "<EOS>", 320, 65, 156, 41, "health", "<EOS>"], "score_history": [-3.814697265625e-05, -0.0001201629638671875, -6.66379855829291e-05, -7.390948667307384e-06, -4.649161837733118e-06, -4.329020157456398e-05, -7.62939453125e-06, -2.0265579223632812e-06, -0.0001430511474609375, -0.000308990478515625, -0.000244140625, -8.583032467868179e-06, -6.783008575439453e-05, -4.029273259220645e-05, 0.0, -4.767629434354603e-06, 0.0, -4.273641109466553, 0.0, -7.939338684082031e-05, 0.0, -0.0006103515625, -1.52587890625e-05, 0.0, -0.00013041493366472423, 0.0, -3.814697265625e-06, -3.814697265625e-05, -9.34600830078125e-05, -1.1920909855689388e-05, 0.0, -0.0029201507568359375, -1.52587890625e-05, -0.0008602142333984375, -9.5367431640625e-06, -0.06568145751953125, -0.024170756340026855, 0.0, -0.000244140625, -0.0038518905639648438, -0.000202178955078125, -0.0001163482666015625, -0.016770362854003906, -7.62939453125e-06], "score": -4.39058138576047, "model_output": {"hole4": "player", "hole0": "DivineSpirit", "hole6": [{"_type": "Template19"}, {"hole1": "increase_health", "hole2": [{"attr": "health", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Divine Spirit", "hole1": 2, "hole2": "ROGUE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(self.target.health)\n"}, {"choice_history": [121, 200, "Divine", "Spirit", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 41, "card", "<EOS>", "append", "<EOS>", 320, 65, 156, 41, "health", "<EOS>"], "score_history": [-3.814697265625e-05, -0.0001201629638671875, -6.66379855829291e-05, -7.390948667307384e-06, -4.649161837733118e-06, -4.329020157456398e-05, -7.62939453125e-06, -2.0265579223632812e-06, -0.0001430511474609375, -0.000308990478515625, -0.000244140625, -8.583032467868179e-06, -6.783008575439453e-05, -4.029273259220645e-05, 0.0, -4.767629434354603e-06, 0.0, -0.021079421043395996, 0.0, -9.167194366455078e-05, 0.0, -0.0004558563232421875, -1.71661376953125e-05, 0.0, -0.00010371206008130684, 0.0, -5.7220458984375e-06, -3.62396240234375e-05, -9.1552734375e-05, -1.1920909855689388e-05, 0.0, -0.0030517578125, -1.52587890625e-05, -0.0008697509765625, -9.5367431640625e-06, -2.822585105895996, -4.9591064453125e-05, -0.0008525848388671875, -0.6109105348587036, 0.0, -1.4876612424850464, 0.0, -0.0001583099365234375, -0.007431983947753906, -9.5367431640625e-06, -0.0013027191162109375, -0.03557014465332031, -1.9073486328125e-06], "score": -4.993480817950058, "model_output": {"hole4": "player", "hole0": "DivineSpirit", "hole6": [{"_type": "Template19"}, {"hole1": "append", "hole2": [{"attr": "health", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Divine Spirit", "hole1": 2, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.card.append(self.target.health)\n"}, {"choice_history": [121, 200, "Divine", "Spirit", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 41, "card", "<EOS>", "target_func", "<EOS>", 320, 65, 156, 41, "health", "<EOS>"], "score_history": [-3.814697265625e-05, -0.0001201629638671875, -6.66379855829291e-05, -7.390948667307384e-06, -4.649161837733118e-06, -4.329020157456398e-05, -7.62939453125e-06, -2.0265579223632812e-06, -0.0001430511474609375, -0.000308990478515625, -0.000244140625, -8.583032467868179e-06, -6.783008575439453e-05, -4.029273259220645e-05, 0.0, -4.767629434354603e-06, 0.0, -0.021079421043395996, 0.0, -9.167194366455078e-05, 0.0, -0.0004558563232421875, -1.71661376953125e-05, 0.0, -0.00010371206008130684, 0.0, -5.7220458984375e-06, -3.62396240234375e-05, -9.1552734375e-05, -1.1920909855689388e-05, 0.0, -0.0030517578125, -1.52587890625e-05, -0.0008697509765625, -9.5367431640625e-06, -2.822585105895996, -4.9591064453125e-05, -0.0008525848388671875, -0.6109105348587036, 0.0, -1.9218119382858276, 0.0, -0.00016021728515625, -0.014378547668457031, -2.288818359375e-05, -0.0016145706176757812, -0.03422069549560547, 0.0], "score": -5.433553831255722, "model_output": {"hole4": "player", "hole0": "DivineSpirit", "hole6": [{"_type": "Template19"}, {"hole1": "target_func", "hole2": [{"attr": "health", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Divine Spirit", "hole1": 2, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.card.target_func(self.target.health)\n"}, {"choice_history": [121, 200, "Divine", "Spirit", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-3.814697265625e-05, -0.0001201629638671875, -6.66379855829291e-05, -7.390948667307384e-06, -4.649161837733118e-06, -4.329020157456398e-05, -7.62939453125e-06, -2.0265579223632812e-06, -0.0001430511474609375, -0.000308990478515625, -0.000244140625, -8.583032467868179e-06, -6.783008575439453e-05, -4.029273259220645e-05, 0.0, -4.767629434354603e-06, 0.0, -0.021079421043395996, 0.0, -9.167194366455078e-05, 0.0, -0.0004558563232421875, -1.71661376953125e-05, 0.0, -0.00010371206008130684, 0.0, -5.7220458984375e-06, -3.62396240234375e-05, -9.1552734375e-05, -1.1920909855689388e-05, 0.0, -0.0030517578125, -1.52587890625e-05, -0.0008697509765625, -9.5367431640625e-06, -0.06195068359375, -4.711549282073975, 0.0, -0.0015869140625, -0.5871191024780273, -0.0001068115234375, -0.0002040863037109375, -0.29213809967041016, -1.1920928244535389e-07, -0.008163332007825375, -3.814697265625e-06, -8.392333984375e-05], "score": -5.689853326021414, "model_output": {"hole4": "player", "hole0": "DivineSpirit", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Divine Spirit", "hole1": 2, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Divine", "Spirit", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "increase_health", "<EOS>", 320, 65, 156, 41, "health", "<EOS>"], "score_history": [-3.814697265625e-05, -0.0001201629638671875, -6.66379855829291e-05, -7.390948667307384e-06, -4.649161837733118e-06, -4.329020157456398e-05, -7.62939453125e-06, -2.0265579223632812e-06, -0.0001430511474609375, -0.000308990478515625, -0.000244140625, -8.583032467868179e-06, -6.783008575439453e-05, -4.029273259220645e-05, 0.0, -4.767629434354603e-06, 0.0, -5.571529865264893, 0.0, -0.00017559528350830078, 0.0, -0.0005626678466796875, -3.4332275390625e-05, 0.0, -0.00012898443674203008, 0.0, -5.7220458984375e-06, -5.14984130859375e-05, -7.62939453125e-05, -1.0967240996251348e-05, 0.0, -0.0031604766845703125, -1.52587890625e-05, -0.0008945465087890625, -9.5367431640625e-06, -0.06916046142578125, -0.024043798446655273, 0.0, -0.00025177001953125, -0.0038270950317382812, -0.00020599365234375, -0.0001201629638671875, -0.016826629638671875, -7.62939453125e-06], "score": -5.692206875969077, "model_output": {"hole4": "player", "hole0": "DivineSpirit", "hole6": [{"_type": "Template19"}, {"hole1": "increase_health", "hole2": [{"attr": "health", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Divine Spirit", "hole1": 2, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(self.target.health)\n"}, {"choice_history": [121, 200, "Divine", "Spirit", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 41, "card", "<EOS>", "summon", "<EOS>", 320, 65, 156, 41, "health", "<EOS>"], "score_history": [-3.814697265625e-05, -0.0001201629638671875, -6.66379855829291e-05, -7.390948667307384e-06, -4.649161837733118e-06, -4.329020157456398e-05, -7.62939453125e-06, -2.0265579223632812e-06, -0.0001430511474609375, -0.000308990478515625, -0.000244140625, -8.583032467868179e-06, -6.783008575439453e-05, -4.029273259220645e-05, 0.0, -4.767629434354603e-06, 0.0, -0.021079421043395996, 0.0, -9.167194366455078e-05, 0.0, -0.0004558563232421875, -1.71661376953125e-05, 0.0, -0.00010371206008130684, 0.0, -5.7220458984375e-06, -3.62396240234375e-05, -9.1552734375e-05, -1.1920909855689388e-05, 0.0, -0.0030517578125, -1.52587890625e-05, -0.0008697509765625, -9.5367431640625e-06, -2.822585105895996, -4.9591064453125e-05, -0.0008525848388671875, -0.6109105348587036, 0.0, -1.9572361707687378, 0.0, -0.04548931121826172, -0.18461322784423828, -0.00012969970703125, -0.0003414154052734375, -0.0660409927368164, 0.0], "score": -5.715195791399765, "model_output": {"hole4": "player", "hole0": "DivineSpirit", "hole6": [{"_type": "Template19"}, {"hole1": "summon", "hole2": [{"attr": "health", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Divine Spirit", "hole1": 2, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.card.summon(self.target.health)\n"}, {"choice_history": [121, 200, "Divine", "Spirit", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "die", "<EOS>", 320, 65, 156, 41, "health", "<EOS>"], "score_history": [-3.814697265625e-05, -0.0001201629638671875, -6.66379855829291e-05, -7.390948667307384e-06, -4.649161837733118e-06, -4.329020157456398e-05, -7.62939453125e-06, -2.0265579223632812e-06, -0.0001430511474609375, -0.000308990478515625, -0.000244140625, -8.583032467868179e-06, -6.783008575439453e-05, -4.029273259220645e-05, 0.0, -4.767629434354603e-06, 0.0, -0.021079421043395996, 0.0, -9.167194366455078e-05, 0.0, -0.0004558563232421875, -1.71661376953125e-05, 0.0, -0.00010371206008130684, 0.0, -5.7220458984375e-06, -3.62396240234375e-05, -9.1552734375e-05, -1.1920909855689388e-05, 0.0, -0.0030517578125, -1.52587890625e-05, -0.0008697509765625, -9.5367431640625e-06, -0.06195068359375, -5.458962917327881, -2.86102294921875e-05, -5.14984130859375e-05, -0.2916107177734375, -6.866455078125e-05, -0.0016422271728515625, -0.021680831909179688, -1.52587890625e-05], "score": -5.862958566820907, "model_output": {"hole4": "player", "hole0": "DivineSpirit", "hole6": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"attr": "health", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Divine Spirit", "hole1": 2, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self.target.health)\n"}, {"choice_history": [121, 200, "Divine", "Spirit", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "change_attack", "<EOS>", 320, 65, 156, 41, "health", "<EOS>"], "score_history": [-3.814697265625e-05, -0.0001201629638671875, -6.66379855829291e-05, -7.390948667307384e-06, -4.649161837733118e-06, -4.329020157456398e-05, -7.62939453125e-06, -2.0265579223632812e-06, -0.0001430511474609375, -0.000308990478515625, -0.000244140625, -8.583032467868179e-06, -6.783008575439453e-05, -4.029273259220645e-05, 0.0, -4.767629434354603e-06, 0.0, -0.021079421043395996, 0.0, -9.167194366455078e-05, 0.0, -0.0004558563232421875, -1.71661376953125e-05, 0.0, -0.00010371206008130684, 0.0, -5.7220458984375e-06, -3.62396240234375e-05, -9.1552734375e-05, -1.1920909855689388e-05, 0.0, -0.0030517578125, -1.52587890625e-05, -0.0008697509765625, -9.5367431640625e-06, -0.06195068359375, -5.749793529510498, -5.7220458984375e-06, -0.0010356903076171875, -0.033761024475097656, -0.000118255615234375, -0.000186920166015625, -0.02298450469970703, -1.9073486328125e-06], "score": -5.896785394823837, "model_output": {"hole4": "player", "hole0": "DivineSpirit", "hole6": [{"_type": "Template19"}, {"hole1": "change_attack", "hole2": [{"attr": "health", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Divine Spirit", "hole1": 2, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(self.target.health)\n"}, {"choice_history": [121, 200, "Divine", "Spirit", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 41, "card", "<EOS>", "battlecry", "<EOS>", 320, 65, 156, 41, "health", "<EOS>"], "score_history": [-3.814697265625e-05, -0.0001201629638671875, -6.66379855829291e-05, -7.390948667307384e-06, -4.649161837733118e-06, -4.329020157456398e-05, -7.62939453125e-06, -2.0265579223632812e-06, -0.0001430511474609375, -0.000308990478515625, -0.000244140625, -8.583032467868179e-06, -6.783008575439453e-05, -4.029273259220645e-05, 0.0, -4.767629434354603e-06, 0.0, -0.021079421043395996, 0.0, -9.167194366455078e-05, 0.0, -0.0004558563232421875, -1.71661376953125e-05, 0.0, -0.00010371206008130684, 0.0, -5.7220458984375e-06, -3.62396240234375e-05, -9.1552734375e-05, -1.1920909855689388e-05, 0.0, -0.0030517578125, -1.52587890625e-05, -0.0008697509765625, -9.5367431640625e-06, -2.822585105895996, -4.9591064453125e-05, -0.0008525848388671875, -0.6109105348587036, 0.0, -2.35774302482605, 0.0, -0.0002899169921875, -0.1333751678466797, -5.7220458984375e-06, -0.0006847381591796875, -0.048256874084472656, 0.0], "score": -6.001700417673874, "model_output": {"hole4": "player", "hole0": "DivineSpirit", "hole6": [{"_type": "Template19"}, {"hole1": "battlecry", "hole2": [{"attr": "health", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Divine Spirit", "hole1": 2, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.card.battlecry(self.target.health)\n"}, {"choice_history": [121, 200, "Divine", "Spirit", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "score_history": [-3.814697265625e-05, -0.0001201629638671875, -6.66379855829291e-05, -7.390948667307384e-06, -4.649161837733118e-06, -4.329020157456398e-05, -7.62939453125e-06, -2.0265579223632812e-06, -0.0001430511474609375, -0.000308990478515625, -0.000244140625, -8.583032467868179e-06, -6.783008575439453e-05, -4.029273259220645e-05, 0.0, -4.767629434354603e-06, 0.0, -0.021079421043395996, 0.0, -9.167194366455078e-05, 0.0, -0.0004558563232421875, -1.71661376953125e-05, 0.0, -0.00010371206008130684, 0.0, -5.7220458984375e-06, -3.62396240234375e-05, -9.1552734375e-05, -1.1920909855689388e-05, 0.0, -0.0030517578125, -1.52587890625e-05, -0.0008697509765625, -9.5367431640625e-06, -0.06195068359375, -4.711549282073975, 0.0, -0.0015869140625, -0.8474893569946289, -0.001338958740234375, -0.0031299591064453125, -1.9073486328125e-06, -0.000629425048828125, -0.2821381092071533, -5.602820692729438e-06, -9.918212890625e-05, -0.024779319763183594, -0.0002117156982421875, -0.04046821594238281, -0.004626035690307617, -9.5367431640625e-06, -0.027873992919921875], "score": -6.0348353549443345, "model_output": {"hole4": "player", "hole0": "DivineSpirit", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Divine Spirit", "hole1": 2, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n"}, {"choice_history": [121, 200, "Divine", "Spirit", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 41, "card", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-3.814697265625e-05, -0.0001201629638671875, -6.66379855829291e-05, -7.390948667307384e-06, -4.649161837733118e-06, -4.329020157456398e-05, -7.62939453125e-06, -2.0265579223632812e-06, -0.0001430511474609375, -0.000308990478515625, -0.000244140625, -8.583032467868179e-06, -6.783008575439453e-05, -4.029273259220645e-05, 0.0, -4.767629434354603e-06, 0.0, -0.021079421043395996, 0.0, -9.167194366455078e-05, 0.0, -0.0004558563232421875, -1.71661376953125e-05, 0.0, -0.00010371206008130684, 0.0, -5.7220458984375e-06, -3.62396240234375e-05, -9.1552734375e-05, -1.1920909855689388e-05, 0.0, -0.0030517578125, -1.52587890625e-05, -0.0008697509765625, -9.5367431640625e-06, -2.822585105895996, -4.9591064453125e-05, -0.0008525848388671875, -0.6109105348587036, 0.0, -2.3848559856414795, 0.0, -0.0001392364501953125, -0.07028007507324219, -0.02197265625, -0.1572810411453247, -0.019272804260253906], "score": -6.115146772539902, "model_output": {"hole4": "player", "hole0": "DivineSpirit", "hole6": [{"_type": "Template19"}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Divine Spirit", "hole1": 2, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.card.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Divine", "Spirit", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "increase_health", "<EOS>", 320, 65, 156, 41, "Heal", "<EOS>"], "score_history": [-3.814697265625e-05, -0.0001201629638671875, -6.66379855829291e-05, -7.390948667307384e-06, -4.649161837733118e-06, -4.329020157456398e-05, -7.62939453125e-06, -2.0265579223632812e-06, -0.0001430511474609375, -0.000308990478515625, -0.000244140625, -8.583032467868179e-06, -6.783008575439453e-05, -4.029273259220645e-05, 0.0, -4.767629434354603e-06, 0.0, -0.021079421043395996, 0.0, -9.167194366455078e-05, 0.0, -0.0004558563232421875, -1.71661376953125e-05, 0.0, -0.00010371206008130684, 0.0, -5.7220458984375e-06, -3.62396240234375e-05, -9.1552734375e-05, -1.1920909855689388e-05, 0.0, -0.0030517578125, -1.52587890625e-05, -0.0008697509765625, -9.5367431640625e-06, -0.06195068359375, -0.02375185489654541, 0.0, -0.000240325927734375, -0.003772735595703125, -0.0001964569091796875, -0.0001201629638671875, -6.054938316345215, 0.0], "score": -6.171917693293381, "model_output": {"hole4": "player", "hole0": "DivineSpirit", "hole6": [{"_type": "Template19"}, {"hole1": "increase_health", "hole2": [{"attr": "Heal", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Divine Spirit", "hole1": 2, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(self.target.Heal)\n"}, {"choice_history": [121, 200, "Divine", "Spirit", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "increase_health", "<EOS>", 320, 112], "score_history": [-3.814697265625e-05, -0.0001201629638671875, -6.66379855829291e-05, -7.390948667307384e-06, -4.649161837733118e-06, -4.329020157456398e-05, -7.62939453125e-06, -2.0265579223632812e-06, -0.0001430511474609375, -0.000308990478515625, -0.000244140625, -8.583032467868179e-06, -6.783008575439453e-05, -4.029273259220645e-05, 0.0, -4.767629434354603e-06, 0.0, -0.021079421043395996, 0.0, -9.167194366455078e-05, 0.0, -0.0004558563232421875, -1.71661376953125e-05, 0.0, -0.00010371206008130684, 0.0, -5.7220458984375e-06, -3.62396240234375e-05, -9.1552734375e-05, -1.1920909855689388e-05, 0.0, -0.0030517578125, -1.52587890625e-05, -0.0008697509765625, -9.5367431640625e-06, -0.06195068359375, -0.02375185489654541, 0.0, -0.000240325927734375, -6.688388824462891], "score": -6.801278845942306, "model_output": {"hole4": "player", "hole0": "DivineSpirit", "hole6": [{"_type": "Template19"}, {"hole1": "increase_health", "hole2": [{"_type": "Template75"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Divine Spirit", "hole1": 2, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(False)\n"}], "index": 24}
{"beams": [{"choice_history": [121, 198, "Dragonling", "Mechanic", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Summon", "<EOS>", 320, 93, 255, "Mechanical", "Dragonling", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "score_history": [-5.340576171875e-05, -1.33514404296875e-05, -0.00040141629870049655, -0.0010051673743873835, -2.9802317840221804e-06, -1.1563301086425781e-05, -4.172325134277344e-06, -1.692770456429571e-05, -0.0002994537353515625, -0.0007266998291015625, -0.0322265625, -0.00018607586389407516, -0.00018906593322753906, -0.00010502338409423828, -2.503394853192731e-06, -0.0006016513216309249, -2.3841855067985307e-07, -8.773802255745977e-05, -0.0001354217529296875, -0.0020986583549529314, -0.0021793919149786234, -1.1444091796875e-05, -8.0108642578125e-05, -3.24249267578125e-05, -0.0017373220762237906, -0.00045346643310040236, -2.1338413716875948e-05, -0.0003797836252488196, -4.768370445162873e-07, -1.1920928244535389e-07, -8.273124694824219e-05, -1.9073486328125e-06, -8.344650268554688e-06, 0.0, -6.4849853515625e-05, -9.1552734375e-05, -2.86102294921875e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -3.814697265625e-06, -9.536738616588991e-07], "score": -0.04334874411195244, "model_output": {"hole4": "player", "hole0": "DragonlingMechanic", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template46", "hole0": "MechanicalDragonling"}], "hole0": "Dragonling Mechanic", "hole1": 4, "hole2": "COMMON", "_type": "Template6", "hole3": "Summon", "hole5": "PlayerSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Summon(\n            MechanicalDragonling()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}, {"choice_history": [121, 198, "Dragonling", "Mechanic", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 274, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Summon", "<EOS>", "Summon", "<EOS>", 320, 93, 255, "Mechanical", "Dragonling", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "score_history": [-5.340576171875e-05, -1.33514404296875e-05, -0.00040141629870049655, -0.0010051673743873835, -2.9802317840221804e-06, -1.1563301086425781e-05, -4.172325134277344e-06, -1.692770456429571e-05, -0.0002994537353515625, -0.0007266998291015625, -5.734616279602051, -1.2874520507466514e-05, -2.3126602172851562e-05, -0.0016404390335083008, 0.0, -0.0026436676271259785, -1.1920928244535389e-07, -0.002554178237915039, -1.52587890625e-05, -0.011780458502471447, -0.00013910756388213485, -0.005205320194363594, -5.125986263010418e-06, -9.72747802734375e-05, -0.0062961578369140625, -5.7220458984375e-06, -0.008179837837815285, -0.000906230416148901, -8.475718641420826e-05, -0.0032464265823364258, -1.9073486328125e-06, -1.633167266845703e-05, 0.0, -0.0001010894775390625, -0.0006122589111328125, -7.62939453125e-06, -1.9073486328125e-06, -2.3841855067985307e-07, -5.7220458984375e-06, -8.344646857949556e-07], "score": -5.780735419638937, "model_output": {"hole4": "player", "hole0": "DragonlingMechanic", "hole1": "MinionCard", "hole2": [{"hole0": "Dragonling Mechanic", "hole6": [{"_type": "Template46", "hole0": "MechanicalDragonling"}], "hole1": 4, "hole2": "COMMON", "_type": "Template6", "hole3": "Summon", "hole5": "Summon"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Summon(), Summon(\n            MechanicalDragonling())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}, {"choice_history": [121, 198, "Dragonling", "Mechanic", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Summon", "Summon", "<EOS>", 320, 93, 255, "Mechanical", "Dragonling", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "score_history": [-5.340576171875e-05, -1.33514404296875e-05, -0.00040141629870049655, -0.0010051673743873835, -2.9802317840221804e-06, -1.1563301086425781e-05, -4.172325134277344e-06, -1.692770456429571e-05, -0.0002994537353515625, -0.0007266998291015625, -0.0322265625, -0.00018607586389407516, -0.00018906593322753906, -0.00010502338409423828, -2.503394853192731e-06, -0.0006016513216309249, -2.3841855067985307e-07, -8.773802255745977e-05, -0.0001354217529296875, -0.0020986583549529314, -6.18938684463501, -0.007030485663563013, -3.814697265625e-05, -1.9073486328125e-05, -2.6702880859375e-05, -0.0019547161646187305, -0.00037550844717770815, -2.3364969820249826e-05, -0.00032173373620025814, -2.503394853192731e-06, -1.1920928244535389e-07, -8.45193862915039e-05, -1.9073486328125e-06, -8.344650268554688e-06, 0.0, -6.4849853515625e-05, -9.1552734375e-05, -2.86102294921875e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -3.814697265625e-06, -9.536738616588991e-07], "score": -6.2376338556409365, "model_output": {"hole4": "player", "hole0": "DragonlingMechanic", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template46", "hole0": "MechanicalDragonling"}], "hole0": "Dragonling Mechanic", "hole1": 4, "hole2": "COMMON", "_type": "Template6", "hole3": "SummonSummon", "hole5": "PlayerSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(SummonSummon(\n            MechanicalDragonling()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}, {"choice_history": [121, 198, "Dragonling", "Mechanic", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Summon", "<EOS>", 320, 93, 255, "Mechanical", "Dragonling", "<EOS>", "Player", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "score_history": [-5.340576171875e-05, -1.33514404296875e-05, -0.00040141629870049655, -0.0010051673743873835, -2.9802317840221804e-06, -1.1563301086425781e-05, -4.172325134277344e-06, -1.692770456429571e-05, -0.0002994537353515625, -0.0007266998291015625, -5.252724647521973, -2.384185791015625e-06, -3.516674041748047e-05, -0.0127946138381958, -1.9073486328125e-06, -0.002316761761903763, 0.0, -0.0003606081008911133, -3.814697265625e-06, -0.17060858011245728, -1.609317769180052e-05, -0.00012969970703125, -0.9151926040649414, -2.47955322265625e-05, -0.04535888135433197, -0.0005790661089122295, -3.790853952523321e-05, -0.0278899148106575, -4.172325134277344e-06, 0.0, -0.23730182647705078, 0.0, 0.0, -0.0001277923583984375, 0.0, -0.0001239776611328125, -9.5367431640625e-06, -0.0002903937711380422, -0.00014530766929965466, -2.0265579223632812e-06, -1.33514404296875e-05, -8.7738037109375e-05, -0.00112152099609375, -5.340576171875e-05, -0.0002079010009765625, -3.814697265625e-06, -0.0011479853419587016, -3.516673677950166e-05, -1.52587890625e-05, -0.016107678413391113, -1.9073486328125e-06, -1.3589859008789062e-05, 0.0, -7.05718994140625e-05, -4.00543212890625e-05, -2.86102294921875e-05, -5.7220458984375e-06, 0.0, -3.814697265625e-06, -4.768370445162873e-07], "score": -6.6875761876211754, "model_output": {"hole4": "player", "hole0": "DragonlingMechanic", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template46", "hole0": "MechanicalDragonling"}], "hole0": "Dragonling Mechanic", "hole7": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 4, "hole2": "COMMON", "_type": "Template6", "hole3": "Summon", "hole5": "PlayerSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Summon(\n            MechanicalDragonling()), PlayerSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}, {"choice_history": [121, 198, "Dragonling", "Mechanic", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Summon", "<EOS>", "Summon", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "score_history": [-5.340576171875e-05, -1.33514404296875e-05, -0.00040141629870049655, -0.0010051673743873835, -2.9802317840221804e-06, -1.1563301086425781e-05, -4.172325134277344e-06, -1.692770456429571e-05, -0.0002994537353515625, -0.0007266998291015625, -6.064849853515625, -4.12456392950844e-05, -3.576277958927676e-05, -0.0027980804443359375, 0.0, -0.000676036172080785, 0.0, -0.00017940998077392578, -8.20159912109375e-05, -0.7694270014762878, -2.658331868587993e-05, -0.0738087072968483, -2.0265558760002023e-06, -0.014252662658691406, -9.5367431640625e-06, 0.0, -0.020331144332885742, 0.0, -0.0001087188720703125, -3.814697265625e-06, -0.0033521652221679688, -6.66361374896951e-05, -1.9073486328125e-06, -3.0517578125e-05, -0.000148773193359375, -0.004947662353515625, -0.000102996826171875, -0.00017547607421875, -1.9073486328125e-06, -0.0022182464599609375, -4.3988224206259474e-05, -1.1444091796875e-05, -0.01897251605987549, -1.9073486328125e-06, -1.3470649719238281e-05, 0.0, -7.2479248046875e-05, -0.0001125335693359375, -1.52587890625e-05, -5.7220458984375e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -3.576278118089249e-07], "score": -6.9794695459287865, "model_output": {"hole4": "player", "hole0": "DragonlingMechanic", "hole1": "MinionCard", "hole2": [{"hole0": "Dragonling Mechanic", "hole7": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 4, "hole2": "COMMON", "_type": "Template6", "hole3": "Summon", "hole5": "Summon"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Summon(), Summon(\n            players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}, {"choice_history": [121, 198, "Dragonling", "Dragonling", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Summon", "<EOS>", 320, 93, 255, "Mechanical", "Dragonling", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "score_history": [-5.340576171875e-05, -1.33514404296875e-05, -0.00040141629870049655, -7.013420581817627, -2.384185791015625e-06, -2.145765392924659e-06, -5.9604644775390625e-06, -1.1801710570580326e-05, -0.0002613067626953125, -0.00101470947265625, -0.032645225524902344, -0.00021039266721345484, -0.00029969215393066406, -9.548664093017578e-05, -2.622604142743512e-06, -0.0005617162096314132, -2.3841855067985307e-07, -8.356569742318243e-05, -9.918212890625e-05, -0.0021262066438794136, -0.002126219915226102, -1.1444091796875e-05, -8.0108642578125e-05, -3.4332275390625e-05, -0.0018137439619749784, -0.0004626449372153729, -2.1457621187437326e-05, -0.0003927778743673116, -4.768370445162873e-07, -1.1920928244535389e-07, -7.891654968261719e-05, -1.9073486328125e-06, -8.344650268554688e-06, 0.0, -6.67572021484375e-05, -9.1552734375e-05, -2.86102294921875e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -3.814697265625e-06, -1.0728830375228426e-06], "score": -7.056537720588452, "model_output": {"hole4": "player", "hole0": "DragonlingDragonling", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template46", "hole0": "MechanicalDragonling"}], "hole0": "Dragonling Mechanic", "hole1": 4, "hole2": "COMMON", "_type": "Template6", "hole3": "Summon", "hole5": "PlayerSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class DragonlingDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Summon(\n            MechanicalDragonling()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}, {"choice_history": [121, 198, "Dragonling", "Mechanic", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 276, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "score_history": [-5.340576171875e-05, -1.33514404296875e-05, -0.00040141629870049655, -0.0010051673743873835, -2.9802317840221804e-06, -1.1563301086425781e-05, -4.172325134277344e-06, -1.692770456429571e-05, -0.0002994537353515625, -0.0007266998291015625, -5.983676910400391, -0.001780949649401009, -7.760524022160098e-05, -0.0011830329895019531, 0.0, -0.0010123257525265217, 0.0, -0.0050771236419677734, -5.7220458984375e-06, -0.4315359592437744, -3.8861544453538954e-05, -0.004957251250743866, -7.748603820800781e-06, -2.3841855067985307e-07, -0.0016193389892578125, -0.00026702880859375, -0.0014629364013671875, -1.1444091796875e-05, -3.814697265625e-06, -0.005136609077453613, -0.009924530982971191, -1.4185901818564162e-05, -8.58306884765625e-05, -0.008108139038085938, -4.1961669921875e-05, -5.7220458984375e-06, -3.814697265625e-06, -2.288818359375e-05, -2.3841855067985307e-07, -0.6667788028717041, -0.000102996826171875, -0.04045677185058594, -9.5367431640625e-06, 0.0, -0.0064983367919921875, 0.0, -1.71661376953125e-05, 0.0, -0.0022851228713989258, -5.9604562920867465e-06, -5.7220458984375e-06, -2.09808349609375e-05, -2.288818359375e-05, -0.0006313323974609375, -6.103515625e-05, -0.000186920166015625, -3.814697265625e-06, -0.0020264387130737305, -0.00010216236114501953, -1.1444091796875e-05, -0.01237499713897705, -3.814697265625e-06, -1.3470649719238281e-05, 0.0, -6.67572021484375e-05, -0.00012969970703125, -1.52587890625e-05, -5.7220458984375e-06, -1.1920928244535389e-07, -7.62939453125e-06, -3.576278118089249e-07], "score": -7.190442610134021, "model_output": {"hole4": "player", "hole0": "DragonlingMechanic", "hole1": "MinionCard", "hole2": [{"hole0": "Dragonling Mechanic", "hole7": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole6": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}], "hole1": 4, "hole2": "COMMON", "_type": "Template6", "hole3": "Kill", "hole5": "MinionSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Kill(), MinionSelector(\n            IsType(MINION_TYPE.DRAGON), players=BothPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}, {"choice_history": [121, 198, "Dragonling", "Mechanic", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "score_history": [-5.340576171875e-05, -1.33514404296875e-05, -0.00040141629870049655, -0.0010051673743873835, -2.9802317840221804e-06, -1.1563301086425781e-05, -4.172325134277344e-06, -1.692770456429571e-05, -0.0002994537353515625, -0.0007266998291015625, -0.0322265625, -0.00018607586389407516, -0.00018906593322753906, -0.00010502338409423828, -2.503394853192731e-06, -0.0006016513216309249, -2.3841855067985307e-07, -8.773802255745977e-05, -0.0001354217529296875, -6.848921775817871, -0.1597917675971985, -1.9073486328125e-06, -0.016425132751464844, -0.0005397796630859375, -0.001861572265625, -0.0075836181640625, -0.000148773193359375, -1.5020368664409034e-05, -3.814697265625e-06, -0.0003921405295841396, -0.004682779312133789, 0.0, -0.002148555824533105, -1.9073486328125e-06, -0.05219459533691406, -0.000148773193359375, -0.000728607177734375, 0.0, -0.0002995729446411133, -0.0015512704849243164, 0.0, -0.026934316381812096, -1.9073486328125e-06, -0.0001850128173828125, -0.052431464195251465, -2.0265579223632812e-06, -2.0265558760002023e-06, -0.0001800060272216797, -3.814697265625e-06, -9.655950634623878e-06, 0.0, -0.0001850128173828125, -0.0018939971923828125, -4.57763671875e-05, -3.814697265625e-06, -2.3841855067985307e-07, -7.62939453125e-06, -5.960462772236497e-07], "score": -7.215398078079261, "model_output": {"hole4": "player", "hole0": "DragonlingMechanic", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "List", "elts": [{"hole1": "ChangeAttack", "hole2": 1, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeHealth", "hole2": 1, "_type": "Template28", "hole0": "Buff"}, {"_type": "Template62_expr_seq"}]}], "hole0": "Dragonling Mechanic", "hole1": 4, "hole2": "COMMON", "_type": "Template6", "hole3": "Give", "hole5": "SelfSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}, {"choice_history": [121, 198, "Dragonling", "Mechanic", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Dragonling", " ", "Mechanic", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Summon", "<EOS>", 320, 93, 255, "Mechanical", "Dragonling", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "score_history": [-5.340576171875e-05, -1.33514404296875e-05, -0.00040141629870049655, -0.0010051673743873835, -2.9802317840221804e-06, -1.1563301086425781e-05, -4.172325134277344e-06, -1.692770456429571e-05, -0.0002994537353515625, -0.0007266998291015625, -0.0322265625, -0.00018607586389407516, -0.00018906593322753906, -0.00010502338409423828, -2.503394853192731e-06, -7.417703151702881, -2.3841855067985307e-07, -0.0005998591077513993, -2.288818359375e-05, -0.002285352675244212, -0.0032605426385998726, -1.1444091796875e-05, -9.34600830078125e-05, -3.0517578125e-05, -0.0018461672589182854, -0.00044738687574863434, -2.1696037947549485e-05, -0.00035784998908638954, -4.768370445162873e-07, -1.1920928244535389e-07, -8.475780487060547e-05, -1.9073486328125e-06, -8.463859558105469e-06, 0.0, -6.4849853515625e-05, -9.1552734375e-05, -2.86102294921875e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -3.814697265625e-06, -9.536738616588991e-07], "score": -7.462212456525393, "model_output": {"hole4": "player", "hole0": "DragonlingMechanic", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template46", "hole0": "MechanicalDragonling"}], "hole0": "Dragonling Mechanic", "hole1": 2, "hole2": "COMMON", "_type": "Template6", "hole3": "Summon", "hole5": "PlayerSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Summon(\n            MechanicalDragonling()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}, {"choice_history": [121, 198, "Dragonling", "Mechanic", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 276, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "score_history": [-5.340576171875e-05, -1.33514404296875e-05, -0.00040141629870049655, -0.0010051673743873835, -2.9802317840221804e-06, -1.1563301086425781e-05, -4.172325134277344e-06, -1.692770456429571e-05, -0.0002994537353515625, -0.0007266998291015625, -5.983676910400391, -0.001780949649401009, -7.760524022160098e-05, -0.0011830329895019531, 0.0, -0.0010123257525265217, 0.0, -0.0050771236419677734, -5.7220458984375e-06, -0.4315359592437744, -3.8861544453538954e-05, -0.004957251250743866, -7.748603820800781e-06, -2.3841855067985307e-07, -0.0016193389892578125, -0.00026702880859375, -0.0014629364013671875, -1.1444091796875e-05, -3.814697265625e-06, -0.005136609077453613, -0.009924530982971191, -1.4185901818564162e-05, -8.58306884765625e-05, -0.008108139038085938, -4.1961669921875e-05, -5.7220458984375e-06, -3.814697265625e-06, -2.288818359375e-05, -2.3841855067985307e-07, -1.0439836978912354, -5.340576171875e-05, -0.05715656280517578, -3.814697265625e-06, 0.0, -0.0026912689208984375, 0.0, -2.288818359375e-05, 0.0, -0.0009938478469848633, -7.152543730626348e-06, -5.7220458984375e-06, -1.52587890625e-05, -1.52587890625e-05, -0.0007572174072265625, -5.91278076171875e-05, -0.00022125244140625, -3.814697265625e-06, -0.0014511346817016602, -9.262561798095703e-05, -9.5367431640625e-06, -0.01637089252471924, -3.814697265625e-06, -1.3470649719238281e-05, 0.0, -6.866455078125e-05, -0.0001049041748046875, -1.52587890625e-05, -5.7220458984375e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -3.576278118089249e-07], "score": -7.58272986446206, "model_output": {"hole4": "player", "hole0": "DragonlingMechanic", "hole1": "MinionCard", "hole2": [{"hole0": "Dragonling Mechanic", "hole7": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole6": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}], "hole1": 4, "hole2": "COMMON", "_type": "Template6", "hole3": "Kill", "hole5": "MinionSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Kill(), MinionSelector(\n            IsType(MINION_TYPE.PIRATE), players=BothPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}, {"choice_history": [121, 198, "Dragonling", "Mechanic", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "score_history": [-5.340576171875e-05, -1.33514404296875e-05, -0.00040141629870049655, -0.0010051673743873835, -2.9802317840221804e-06, -1.1563301086425781e-05, -4.172325134277344e-06, -1.692770456429571e-05, -0.0002994537353515625, -0.0007266998291015625, -6.064849853515625, -4.12456392950844e-05, -3.576277958927676e-05, -0.0027980804443359375, 0.0, -0.000676036172080785, 0.0, -0.00017940998077392578, -8.20159912109375e-05, -0.6912782192230225, -0.6577253341674805, -0.06907203793525696, -1.1920928244535389e-07, -8.344646857949556e-07, -0.0056362152099609375, -3.814697265625e-06, -3.814697265625e-06, -0.09265613555908203, -3.814697265625e-05, -8.392333984375e-05, -5.7220458984375e-06, -0.002632737159729004, -0.00018465518951416016, -1.33514404296875e-05, -0.04112446308135986, -1.9073486328125e-06, -3.933906555175781e-06, 0.0, -8.96453857421875e-05, -0.0002803802490234375, -1.33514404296875e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -5.960462772236497e-07], "score": -7.63205653724701, "model_output": {"hole4": "player", "hole0": "DragonlingMechanic", "hole1": "MinionCard", "hole2": [{"hole0": "Dragonling Mechanic", "hole7": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 4, "hole2": "COMMON", "_type": "Template6", "hole3": "Bounce", "hole5": "MinionSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}, {"choice_history": [121, 198, "Dragonling", "Mechanic", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Summon", "<EOS>", 320, 93, 255, "Dragonling", "Dragonling", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "score_history": [-5.340576171875e-05, -1.33514404296875e-05, -0.00040141629870049655, -0.0010051673743873835, -2.9802317840221804e-06, -1.1563301086425781e-05, -4.172325134277344e-06, -1.692770456429571e-05, -0.0002994537353515625, -0.0007266998291015625, -0.0322265625, -0.00018607586389407516, -0.00018906593322753906, -0.00010502338409423828, -2.503394853192731e-06, -0.0006016513216309249, -2.3841855067985307e-07, -8.773802255745977e-05, -0.0001354217529296875, -0.0020986583549529314, -0.0021793919149786234, -1.1444091796875e-05, -8.0108642578125e-05, -3.24249267578125e-05, -6.520859241485596, -1.1284865140914917, -1.8358217857894488e-05, -0.0003796778910327703, -2.3841855067985307e-07, -1.1920928244535389e-07, -9.608268737792969e-05, -1.9073486328125e-06, -8.225440979003906e-06, 0.0, -6.4849853515625e-05, -0.0001010894775390625, -2.86102294921875e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -3.814697265625e-06, -1.1920922133867862e-06], "score": -7.690523394223803, "model_output": {"hole4": "player", "hole0": "DragonlingMechanic", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template46", "hole0": "DragonlingDragonling"}], "hole0": "Dragonling Mechanic", "hole1": 4, "hole2": "COMMON", "_type": "Template6", "hole3": "Summon", "hole5": "PlayerSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Summon(\n            DragonlingDragonling()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}, {"choice_history": [121, 198, "Dragonling", "Mechanic", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "score_history": [-5.340576171875e-05, -1.33514404296875e-05, -0.00040141629870049655, -0.0010051673743873835, -2.9802317840221804e-06, -1.1563301086425781e-05, -4.172325134277344e-06, -1.692770456429571e-05, -0.0002994537353515625, -0.0007266998291015625, -5.252724647521973, -2.384185791015625e-06, -3.516674041748047e-05, -0.0127946138381958, -1.9073486328125e-06, -0.002316761761903763, 0.0, -0.0003606081008911133, -3.814697265625e-06, -1.8915680646896362, -0.004685146734118462, -5.7220458984375e-06, -0.2837686538696289, -5.340576171875e-05, -0.0020275115966796875, -0.002140045166015625, -0.00032806396484375, -1.859664735093247e-05, -3.814697265625e-06, -0.0008947306196205318, -0.00266110897064209, 0.0, -0.002447587437927723, -1.9073486328125e-06, -0.05403900146484375, -0.000148773193359375, -0.0006208419799804688, 0.0, -0.0003293752670288086, -0.0018252134323120117, 0.0, -0.016509050503373146, -1.9073486328125e-06, -0.00016021728515625, -0.07149171829223633, -2.0265579223632812e-06, -1.4305104514278355e-06, -9.5367431640625e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.008076190948486328, -5.5909156799316406e-05, -4.1961669921875e-05, -3.814697265625e-06, -0.0027706618420779705, -4.410742985783145e-05, -1.52587890625e-05, -0.3405114412307739, -3.814697265625e-06, -3.933906555175781e-06, 0.0, -0.000110626220703125, -0.00238037109375, -2.47955322265625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -4.768370445162873e-07], "score": -7.960670696458912, "model_output": {"hole4": "player", "hole0": "DragonlingMechanic", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "List", "elts": [{"hole1": "ChangeAttack", "hole2": 1, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeHealth", "hole2": 1, "_type": "Template28", "hole0": "Buff"}, {"_type": "Template62_expr_seq"}]}], "hole0": "Dragonling Mechanic", "hole7": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 4, "hole2": "COMMON", "_type": "Template6", "hole3": "Give", "hole5": "MinionSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker()))\n            )\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}, {"choice_history": [121, 198, "Dragonling", "Mechanic", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Minion", "<EOS>", "2", "<EOS>", "4", "<EOS>"], "score_history": [-5.340576171875e-05, -1.33514404296875e-05, -0.00040141629870049655, -0.0010051673743873835, -2.9802317840221804e-06, -1.1563301086425781e-05, -4.172325134277344e-06, -1.692770456429571e-05, -0.0002994537353515625, -0.0007266998291015625, -5.252724647521973, -2.384185791015625e-06, -3.516674041748047e-05, -0.0127946138381958, -1.9073486328125e-06, -0.002316761761903763, 0.0, -0.0003606081008911133, -3.814697265625e-06, -1.8915680646896362, -0.004685146734118462, -5.7220458984375e-06, -0.2837686538696289, -5.340576171875e-05, -0.0020275115966796875, -0.002140045166015625, -0.00032806396484375, -1.859664735093247e-05, -3.814697265625e-06, -0.0008947306196205318, -0.00266110897064209, 0.0, -0.002447587437927723, -1.9073486328125e-06, -0.05403900146484375, -0.000148773193359375, -0.0006208419799804688, 0.0, -0.0003293752670288086, -0.0018252134323120117, 0.0, -0.016509050503373146, -1.9073486328125e-06, -0.00016021728515625, -0.07149171829223633, -2.0265579223632812e-06, -1.4305104514278355e-06, -9.5367431640625e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.008076190948486328, -5.5909156799316406e-05, -4.1961669921875e-05, -3.814697265625e-06, -0.0027706618420779705, -4.410742985783145e-05, -1.52587890625e-05, -1.2808476686477661, -7.62939453125e-06, -5.340576171875e-05, 0.0, -0.0014438629150390625, -0.01804065704345703, -0.00067901611328125, -0.0004616975784301758, -0.0005966424942016602, -0.0037337541580200195, -3.6954811548639555e-06, -1.9073485191256623e-06, -7.152555099310121e-07], "score": -8.923496233179776, "model_output": {"hole4": "player", "hole0": "DragonlingMechanic", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "List", "elts": [{"hole1": "ChangeAttack", "hole2": 1, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeHealth", "hole2": 1, "_type": "Template28", "hole0": "Buff"}, {"_type": "Template62_expr_seq"}]}], "hole0": "Dragonling Mechanic", "hole7": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 4, "hole2": "COMMON", "_type": "Template6", "hole3": "Give", "hole5": "MinionSelector"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 2, "hole2": 4, "_type": "Template36", "hole0": "Minion"}]}, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker()))\n            )\n\n    def create_weapon(self, player):\n        return Minion(2, 4)\n"}, {"choice_history": [121, 198, "Dragonling", "Mechanic", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Summon", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "conditions", "<EOS>", 23, 181, 321, 89, 247, "Mana", "Cost", "<EOS>", "2", "<EOS>", 92, 253, "Is", "Minion", "<EOS>", 320, 105, "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "score_history": [-5.340576171875e-05, -1.33514404296875e-05, -0.00040141629870049655, -0.0010051673743873835, -2.9802317840221804e-06, -1.1563301086425781e-05, -4.172325134277344e-06, -1.692770456429571e-05, -0.0002994537353515625, -0.0007266998291015625, -5.252724647521973, -2.384185791015625e-06, -3.516674041748047e-05, -0.0127946138381958, -1.9073486328125e-06, -0.002316761761903763, 0.0, -0.0003606081008911133, -3.814697265625e-06, -0.17060858011245728, -1.609317769180052e-05, -0.00012969970703125, -0.5246038436889648, -0.4029836654663086, -2.09808349609375e-05, -1.33514404296875e-05, -0.0017322301864624023, -0.000507354736328125, -2.47955322265625e-05, -0.0057010650634765625, -3.62396240234375e-05, -5.7220458984375e-06, -0.00934600830078125, 0.0, -0.20102214813232422, -0.00017547607421875, -0.3151206970214844, -0.4760780334472656, -7.2479248046875e-05, -0.4229668080806732, -0.05812612548470497, -2.384185791015625e-06, -0.02742581069469452, -1.0251998901367188e-05, -0.10084819793701172, -0.0004177093505859375, -0.31880348920822144, -0.38598230481147766, -0.0012149810791015625, -7.62939453125e-06, -0.0002117156982421875, -0.07632263004779816, -1.9073486328125e-06, -1.1920928244535389e-07, -0.000244140625, -1.9073486328125e-06, -3.814697265625e-06, -0.021739959716796875, -2.6702880859375e-05, -0.0003376007080078125, -1.9073486328125e-06, -0.0016580814262852073, -4.935264587402344e-05, -5.7220458984375e-06, -0.3779984712600708, -3.814697265625e-06, -3.933906555175781e-06, 0.0, -9.34600830078125e-05, -0.0007305145263671875, -1.52587890625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -4.768370445162873e-07], "score": -9.174240346062433, "model_output": {"hole4": "player", "hole0": "DragonlingMechanic", "hole1": "MinionCard", "hole2": [{"hole4": [{"func": {"_type": "Name", "id": "CardQuery"}, "_type": "Call", "keywords": [{"value": {"_type": "List", "elts": [{"hole1": 2, "_type": "Template41", "hole0": "ManaCost"}, {"hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45_expr_seq", "hole0": "IsMinion"}]}, "arg": "conditions", "_type": "keyword"}]}], "hole0": "Dragonling Mechanic", "hole7": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 4, "hole2": "COMMON", "_type": "Template6", "hole3": "Summon", "hole5": "MinionSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), MinionSelector(picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}], "index": 25}
{"beams": [{"choice_history": [121, 200, "Drain", "Life", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Drain", " ", "Life", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.001983642578125, -0.0001506805419921875, -4.291528966859914e-06, -0.0002354280004510656, -0.00044123383122496307, -4.164408892393112e-06, -3.063678741455078e-05, -0.0002225637435913086, -0.0005645751953125, -0.0003604888916015625, -3.62396240234375e-05, -0.0005855560302734375, -2.86102294921875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00010632903286023065, -9.19092126423493e-05, -0.0001764173648552969, -1.9073486328125e-06, -0.000782012939453125, -0.0001316070556640625, 0.0, 0.0, -1.9073486328125e-06, -0.000392913818359375, -2.09808349609375e-05, -0.007246136665344238, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -0.0004119873046875, -0.0009479522705078125, -0.0001659393310546875, -1.33514404296875e-05, -3.4332275390625e-05, 0.0, -0.0001373291015625, -0.0001621246337890625, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -1.3232202945800964e-05, 0.0, -0.0002994537353515625, -2.09808349609375e-05, -0.0001392364501953125, -4.398822784423828e-05, -1.9073486328125e-06, -0.0036420822143554688, -0.000354766845703125, -9.5367431640625e-06, -5.7220458984375e-06, -0.04912757873535156, -0.02144617587327957, 0.0, -0.00081634521484375, -0.000499725341796875, -3.0517578125e-05, -1.71661376953125e-05, -0.0008320808410644531, -3.576278118089249e-07, -0.0006470409571193159, -1.9073486328125e-06, -2.288818359375e-05, -0.000453948974609375, -2.09808349609375e-05, -0.000247955322265625, 0.0, -0.0001697540283203125, -0.0012913942337036133, -7.2479248046875e-05, -0.0036700803320854902, 0.0, -9.72747802734375e-05, -0.0005741119384765625, -0.0003604888916015625, -0.0001163482666015625, -0.0029097795486450195, -2.2649765014648438e-06, -0.0004336661077104509, -3.063678741455078e-05, -2.288818359375e-05], "score": -0.10425377832410732, "model_output": {"hole4": "player", "hole0": "DrainLife", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Drain Life", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.hero.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Drain", "Life", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Drain", " ", "Life", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.001983642578125, -0.0001506805419921875, -4.291528966859914e-06, -0.0002354280004510656, -0.00044123383122496307, -4.164408892393112e-06, -3.063678741455078e-05, -0.0002225637435913086, -0.0005645751953125, -0.0003604888916015625, -3.62396240234375e-05, -0.0005855560302734375, -2.86102294921875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00010632903286023065, -9.19092126423493e-05, -0.0001764173648552969, -1.9073486328125e-06, -0.000782012939453125, -0.0001316070556640625, 0.0, 0.0, -1.9073486328125e-06, -0.000392913818359375, -2.09808349609375e-05, -0.007246136665344238, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -0.0004119873046875, -0.0009479522705078125, -0.0001659393310546875, -1.33514404296875e-05, -3.4332275390625e-05, 0.0, -0.0001373291015625, -0.0001621246337890625, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -1.3232202945800964e-05, 0.0, -0.0002994537353515625, -2.09808349609375e-05, -0.0001392364501953125, -4.398822784423828e-05, -1.9073486328125e-06, -0.0036420822143554688, -0.000354766845703125, -9.5367431640625e-06, -5.7220458984375e-06, -3.071836471557617, -1.9073486328125e-06, -0.14145946502685547, -0.02096080780029297, -5.841255187988281e-06, -0.025057852268218994, 0.0, -0.0025882720947265625, -0.0054111480712890625, -0.0005130767822265625, -0.000133514404296875, -0.0041571855545043945, -2.503394853192731e-06, -0.0005241365870460868, -3.075599670410156e-05, -1.71661376953125e-05, -0.11838912963867188, -0.0001811981201171875, -0.000644683837890625, -1.9073486328125e-06, -0.000110626220703125, -0.002021312713623047, -5.543231964111328e-05, -0.0035168458707630634, 0.0, -0.0002498626708984375, -0.000759124755859375, -0.00046539306640625, -0.0001010894775390625, -0.0029938220977783203, -2.741813204920618e-06, -0.0004936376353725791, -4.029273986816406e-05, -2.288818359375e-05], "score": -3.423088034820694, "model_output": {"hole4": "player", "hole0": "DrainLife", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Drain Life", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.heal(player.effective_heal_power(2), self)\n        player.hero.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Drain", "Life", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Drain", " ", "Life", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.001983642578125, -0.0001506805419921875, -4.291528966859914e-06, -0.0002354280004510656, -0.00044123383122496307, -4.164408892393112e-06, -3.063678741455078e-05, -0.0002225637435913086, -0.0005645751953125, -0.0003604888916015625, -3.62396240234375e-05, -0.0005855560302734375, -2.86102294921875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00010632903286023065, -9.19092126423493e-05, -0.0001764173648552969, -1.9073486328125e-06, -0.000782012939453125, -0.0001316070556640625, 0.0, 0.0, -1.9073486328125e-06, -0.000392913818359375, -2.09808349609375e-05, -0.007246136665344238, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -0.0004119873046875, -0.0009479522705078125, -0.0001659393310546875, -1.33514404296875e-05, -3.4332275390625e-05, 0.0, -0.0001373291015625, -0.0001621246337890625, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -1.3232202945800964e-05, 0.0, -0.0002994537353515625, -2.09808349609375e-05, -0.0001392364501953125, -4.398822784423828e-05, -1.9073486328125e-06, -0.0036420822143554688, -0.000354766845703125, -9.5367431640625e-06, -5.7220458984375e-06, -0.04912757873535156, -3.868986129760742, -2.872943878173828e-05, -0.0011882781982421875, -0.0008945465087890625, -9.1552734375e-05, -6.4849853515625e-05, -0.04303562641143799, -2.3841855067985307e-07, -0.0006589246913790703, 0.0, -2.288818359375e-05, -0.000637054443359375, -3.0517578125e-05, -0.0002536773681640625, 0.0, -0.000141143798828125, -0.0013823509216308594, -8.0108642578125e-05, -0.003883449360728264, 0.0, -9.918212890625e-05, -0.0006561279296875, -0.0003948211669921875, -0.0001125335693359375, -0.002942323684692383, -2.384185791015625e-06, -0.0004616804944816977, -3.647804260253906e-05, -2.09808349609375e-05], "score": -3.9955720991156056, "model_output": {"hole4": "player", "hole0": "DrainLife", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Drain Life", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(2), self)\n        player.hero.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Drain", "Life", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Drain", " ", "Life", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.001983642578125, -0.0001506805419921875, -4.291528966859914e-06, -0.0002354280004510656, -0.00044123383122496307, -4.164408892393112e-06, -3.063678741455078e-05, -0.0002225637435913086, -0.0005645751953125, -0.0003604888916015625, -3.62396240234375e-05, -0.0005855560302734375, -2.86102294921875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00010632903286023065, -9.19092126423493e-05, -0.0001764173648552969, -1.9073486328125e-06, -0.000782012939453125, -0.0001316070556640625, 0.0, 0.0, -1.9073486328125e-06, -0.000392913818359375, -2.09808349609375e-05, -5.27568244934082, -9.5367431640625e-06, -0.002323150634765625, -1.1444091796875e-05, -0.0003871917724609375, -0.00092315673828125, -0.0001354217529296875, -1.1444091796875e-05, -3.24249267578125e-05, 0.0, -0.000125885009765625, -0.0001544952392578125, -7.62939453125e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.2397744285408407e-05, 0.0, -0.000308990478515625, -2.09808349609375e-05, -0.0001506805419921875, -4.410743713378906e-05, -1.9073486328125e-06, -0.0036592483520507812, -0.0003643035888671875, -9.5367431640625e-06, -5.7220458984375e-06, -0.0489349365234375, -0.021523529663681984, 0.0, -0.0008144378662109375, -0.0005016326904296875, -3.0517578125e-05, -1.71661376953125e-05, -0.0008664131164550781, -3.576278118089249e-07, -0.0006557551096193492, -1.9073486328125e-06, -2.288818359375e-05, -0.0004444122314453125, -2.09808349609375e-05, -0.0002422332763671875, 0.0, -0.0001659393310546875, -0.0013047456741333008, -7.2479248046875e-05, -0.0036853395868092775, 0.0, -9.5367431640625e-05, -0.0005779266357421875, -0.00035858154296875, -0.000118255615234375, -0.0029145479202270508, -2.2649765014648438e-06, -0.00043366599129512906, -3.063678741455078e-05, -2.288818359375e-05], "score": -5.374733337413943, "model_output": {"hole4": "player", "hole0": "DrainLife", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Drain Life", "_type": "Str"}, {"_type": "Template61"}, {"attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.hero.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Drain", "Life", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Drain", " ", "Life", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.001983642578125, -0.0001506805419921875, -4.291528966859914e-06, -0.0002354280004510656, -0.00044123383122496307, -4.164408892393112e-06, -3.063678741455078e-05, -0.0002225637435913086, -0.0005645751953125, -0.0003604888916015625, -3.62396240234375e-05, -0.0005855560302734375, -2.86102294921875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00010632903286023065, -9.19092126423493e-05, -0.0001764173648552969, -1.9073486328125e-06, -0.000782012939453125, -0.0001316070556640625, 0.0, 0.0, -1.9073486328125e-06, -0.000392913818359375, -2.09808349609375e-05, -0.007246136665344238, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -0.0004119873046875, -0.0009479522705078125, -0.0001659393310546875, -1.33514404296875e-05, -3.4332275390625e-05, 0.0, -0.0001373291015625, -0.0001621246337890625, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -1.3232202945800964e-05, 0.0, -0.0002994537353515625, -2.09808349609375e-05, -0.0001392364501953125, -4.398822784423828e-05, -1.9073486328125e-06, -0.0036420822143554688, -0.000354766845703125, -9.5367431640625e-06, -5.7220458984375e-06, -3.071836471557617, -1.9073486328125e-06, -2.0530996322631836, -5.7220458984375e-06, -0.5730800628662109, -5.7220458984375e-06, -0.007920384407043457, -2.0265558760002023e-06, -0.00302731990814209, -2.3841855067985307e-07, -0.11119619011878967, -2.2649765014648438e-06, -0.003668128978461027, 0.0, -0.0205078125, -0.002506256103515625, -4.9591064453125e-05, -2.09808349609375e-05, -0.0029658079147338867, -3.576278118089249e-07, -0.0006429750937968493, 0.0, -1.9073486328125e-05, -0.001010894775390625, -3.24249267578125e-05, -0.0003204345703125, 0.0, -9.72747802734375e-05, -0.0017168521881103516, -1.71661376953125e-05, -0.0046361591666936874, 0.0, -0.00023651123046875, -0.0007171630859375, -0.0003108978271484375, -0.0001201629638671875, -0.0030051469802856445, -2.2649765014648438e-06, -0.0004413023707456887, -3.063678741455078e-05, -2.6702880859375e-05], "score": -5.883618863794851, "model_output": {"hole4": "player", "hole0": "DrainLife", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Drain Life", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n        player.hero.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Drain", "Life", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Drain", " ", "Life", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.001983642578125, -0.0001506805419921875, -4.291528966859914e-06, -0.0002354280004510656, -0.00044123383122496307, -4.164408892393112e-06, -3.063678741455078e-05, -0.0002225637435913086, -0.0005645751953125, -0.0003604888916015625, -3.62396240234375e-05, -0.0005855560302734375, -2.86102294921875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00010632903286023065, -9.19092126423493e-05, -0.0001764173648552969, -1.9073486328125e-06, -0.000782012939453125, -0.0001316070556640625, 0.0, 0.0, -1.9073486328125e-06, -0.000392913818359375, -2.09808349609375e-05, -0.007246136665344238, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -0.0004119873046875, -0.0009479522705078125, -0.0001659393310546875, -1.33514404296875e-05, -3.4332275390625e-05, 0.0, -0.0001373291015625, -0.0001621246337890625, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -1.3232202945800964e-05, 0.0, -0.0002994537353515625, -2.09808349609375e-05, -0.0001392364501953125, -4.398822784423828e-05, -1.9073486328125e-06, -5.994415283203125, -4.38690185546875e-05, -9.918212890625e-05, -7.62939453125e-05, -0.008024215698242188, -0.003128764918074012, -7.152555099310121e-07, -0.000560760498046875, -0.0002956390380859375, -4.1961669921875e-05, -4.1961669921875e-05, -0.0013581514358520508, -4.768370445162873e-07, -0.0006748841842636466, -1.9073486328125e-06, -2.09808349609375e-05], "score": -6.0251108818653165, "model_output": {"hole4": "player", "hole0": "DrainLife", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Drain Life", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Drain", "Life", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Drain", " ", "Life", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.001983642578125, -0.0001506805419921875, -4.291528966859914e-06, -0.0002354280004510656, -0.00044123383122496307, -4.164408892393112e-06, -3.063678741455078e-05, -0.0002225637435913086, -0.0005645751953125, -0.0003604888916015625, -3.62396240234375e-05, -0.0005855560302734375, -2.86102294921875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00010632903286023065, -9.19092126423493e-05, -0.0001764173648552969, -1.9073486328125e-06, -0.000782012939453125, -0.0001316070556640625, 0.0, 0.0, -1.9073486328125e-06, -0.000392913818359375, -2.09808349609375e-05, -0.007246136665344238, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -0.0004119873046875, -0.0009479522705078125, -0.0001659393310546875, -1.33514404296875e-05, -3.4332275390625e-05, 0.0, -0.0001373291015625, -0.0001621246337890625, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -1.3232202945800964e-05, 0.0, -0.0002994537353515625, -2.09808349609375e-05, -0.0001392364501953125, -4.398822784423828e-05, -1.9073486328125e-06, -0.0036420822143554688, -0.000354766845703125, -9.5367431640625e-06, -5.7220458984375e-06, -3.071836471557617, -1.9073486328125e-06, -0.14145946502685547, -0.02096080780029297, -5.841255187988281e-06, -0.025057852268218994, 0.0, -0.0025882720947265625, -0.0054111480712890625, -0.0005130767822265625, -0.000133514404296875, -0.0041571855545043945, -2.503394853192731e-06, -0.0005241365870460868, -3.075599670410156e-05, -1.71661376953125e-05, -2.6817073822021484, -1.1444091796875e-05, -0.0017547607421875, -7.82012939453125e-05, -0.0020751953125, -0.07932662963867188, -1.71661376953125e-05], "score": -6.058008825729075, "model_output": {"hole4": "player", "hole0": "DrainLife", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Drain Life", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.heal(player.effective_heal_power(2), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Drain", "Life", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Drain", " ", "Life", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "append", "<EOS>", 320, 110], "score_history": [-0.001983642578125, -0.0001506805419921875, -4.291528966859914e-06, -0.0002354280004510656, -0.00044123383122496307, -4.164408892393112e-06, -3.063678741455078e-05, -0.0002225637435913086, -0.0005645751953125, -0.0003604888916015625, -3.62396240234375e-05, -0.0005855560302734375, -2.86102294921875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00010632903286023065, -9.19092126423493e-05, -0.0001764173648552969, -1.9073486328125e-06, -0.000782012939453125, -0.0001316070556640625, 0.0, 0.0, -1.9073486328125e-06, -0.000392913818359375, -2.09808349609375e-05, -0.007246136665344238, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -0.0004119873046875, -0.0009479522705078125, -0.0001659393310546875, -1.33514404296875e-05, -3.4332275390625e-05, 0.0, -0.0001373291015625, -0.0001621246337890625, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -1.3232202945800964e-05, 0.0, -0.0002994537353515625, -2.09808349609375e-05, -0.0001392364501953125, -4.398822784423828e-05, -1.9073486328125e-06, -0.0036420822143554688, -0.000354766845703125, -9.5367431640625e-06, -5.7220458984375e-06, -0.04912757873535156, -0.02144617587327957, 0.0, -0.00081634521484375, -0.000499725341796875, -3.0517578125e-05, -1.71661376953125e-05, -0.0008320808410644531, -3.576278118089249e-07, -0.0006470409571193159, -1.9073486328125e-06, -2.288818359375e-05, -0.000453948974609375, -2.09808349609375e-05, -0.000247955322265625, 0.0, -0.0001697540283203125, -0.0012913942337036133, -7.2479248046875e-05, -6.2761712074279785, 0.0, -0.000255584716796875, -0.02797698974609375], "score": -6.400440020402073, "model_output": {"hole4": "player", "hole0": "DrainLife", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "append", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Drain Life", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.hero.append(self)\n"}, {"choice_history": [121, 200, "Drain", "Life", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Drain", " ", "Life", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 147], "score_history": [-0.001983642578125, -0.0001506805419921875, -4.291528966859914e-06, -0.0002354280004510656, -0.00044123383122496307, -4.164408892393112e-06, -3.063678741455078e-05, -0.0002225637435913086, -0.0005645751953125, -0.0003604888916015625, -3.62396240234375e-05, -0.0005855560302734375, -2.86102294921875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00010632903286023065, -9.19092126423493e-05, -0.0001764173648552969, -1.9073486328125e-06, -0.000782012939453125, -0.0001316070556640625, 0.0, 0.0, -1.9073486328125e-06, -0.000392913818359375, -2.09808349609375e-05, -0.007246136665344238, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -0.0004119873046875, -0.0009479522705078125, -0.0001659393310546875, -1.33514404296875e-05, -3.4332275390625e-05, 0.0, -0.0001373291015625, -0.0001621246337890625, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -1.3232202945800964e-05, 0.0, -0.0002994537353515625, -2.09808349609375e-05, -0.0001392364501953125, -4.398822784423828e-05, -1.9073486328125e-06, -0.0036420822143554688, -0.000354766845703125, -9.5367431640625e-06, -5.7220458984375e-06, -3.071836471557617, -1.9073486328125e-06, -0.14145946502685547, -0.02096080780029297, -5.841255187988281e-06, -0.025057852268218994, 0.0, -0.0025882720947265625, -0.0054111480712890625, -0.0005130767822265625, -0.000133514404296875, -0.0041571855545043945, -2.503394853192731e-06, -0.0005241365870460868, -3.075599670410156e-05, -1.71661376953125e-05, -3.5616064071655273], "score": -6.854644453475657, "model_output": {"hole4": "player", "hole0": "DrainLife", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"_type": "Template55_stmt_seq"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Drain Life", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Drain", "Life", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Drain", " ", "Life", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.001983642578125, -0.0001506805419921875, -4.291528966859914e-06, -0.0002354280004510656, -0.00044123383122496307, -4.164408892393112e-06, -3.063678741455078e-05, -0.0002225637435913086, -0.0005645751953125, -0.0003604888916015625, -3.62396240234375e-05, -0.0005855560302734375, -2.86102294921875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00010632903286023065, -9.19092126423493e-05, -0.0001764173648552969, -1.9073486328125e-06, -0.000782012939453125, -0.0001316070556640625, 0.0, 0.0, -1.9073486328125e-06, -0.000392913818359375, -2.09808349609375e-05, -0.007246136665344238, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -0.0004119873046875, -0.0009479522705078125, -0.0001659393310546875, -1.33514404296875e-05, -3.4332275390625e-05, 0.0, -0.0001373291015625, -0.0001621246337890625, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -1.3232202945800964e-05, 0.0, -0.0002994537353515625, -2.09808349609375e-05, -0.0001392364501953125, -4.398822784423828e-05, -1.9073486328125e-06, -0.0036420822143554688, -0.000354766845703125, -9.5367431640625e-06, -5.7220458984375e-06, -0.04912757873535156, -0.02144617587327957, 0.0, -0.00081634521484375, -0.000499725341796875, -3.0517578125e-05, -1.71661376953125e-05, -0.0008320808410644531, -3.576278118089249e-07, -0.0006470409571193159, -1.9073486328125e-06, -2.288818359375e-05, -0.000453948974609375, -2.09808349609375e-05, -0.000247955322265625, 0.0, -0.0001697540283203125, -0.0012913942337036133, -7.2479248046875e-05, -0.0036700803320854902, 0.0, -9.72747802734375e-05, -0.0005741119384765625, -0.0003604888916015625, -0.0001163482666015625, -7.230020999908447, -2.3841855067985307e-07, -0.0006295852363109589, -1.71661376953125e-05, -2.47955322265625e-05], "score": -7.331547327953473, "model_output": {"hole4": "player", "hole0": "DrainLife", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Drain Life", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.hero.heal(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Drain", "Life", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Drain", " ", "Life", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.001983642578125, -0.0001506805419921875, -4.291528966859914e-06, -0.0002354280004510656, -0.00044123383122496307, -4.164408892393112e-06, -3.063678741455078e-05, -0.0002225637435913086, -0.0005645751953125, -0.0003604888916015625, -3.62396240234375e-05, -0.0005855560302734375, -2.86102294921875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00010632903286023065, -9.19092126423493e-05, -0.0001764173648552969, -1.9073486328125e-06, -0.000782012939453125, -0.0001316070556640625, 0.0, 0.0, -1.9073486328125e-06, -0.000392913818359375, -2.09808349609375e-05, -7.298819541931152, 0.0, -5.91278076171875e-05, -9.5367431640625e-06, -0.0002899169921875, -0.0006771087646484375, -0.0001392364501953125, -5.7220458984375e-06, -2.288818359375e-05, 0.0, -0.00012969970703125, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -1.2993786185688805e-05, 0.0, -0.0002994537353515625, -2.09808349609375e-05, -0.0001354217529296875, -4.208087921142578e-05, -1.9073486328125e-06, -0.0036630630493164062, -0.000347137451171875, -9.5367431640625e-06, -5.7220458984375e-06, -0.04850578308105469, -0.021343262866139412, 0.0, -0.0008220672607421875, -0.0005016326904296875, -3.0517578125e-05, -1.71661376953125e-05, -0.0008358955383300781, -3.576278118089249e-07, -0.0006493080873042345, -1.9073486328125e-06, -2.288818359375e-05, -0.0004730224609375, -2.09808349609375e-05, -0.000247955322265625, 0.0, -0.0002040863037109375, -0.001301884651184082, -6.866455078125e-05, -0.0036434978246688843, 0.0, -9.5367431640625e-05, -0.000576019287109375, -0.000362396240234375, -0.0001163482666015625, -0.0029135942459106445, -2.2649765014648438e-06, -0.00043807734618894756, -3.063678741455078e-05, -2.288818359375e-05], "score": -7.394612170934977, "model_output": {"hole4": "player", "hole0": "DrainLife", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Drain Life", "_type": "Str"}, {"_type": "Template61"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.hero.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Drain", "Life", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Drain", " ", "Life", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.001983642578125, -0.0001506805419921875, -4.291528966859914e-06, -0.0002354280004510656, -0.00044123383122496307, -4.164408892393112e-06, -3.063678741455078e-05, -0.0002225637435913086, -0.0005645751953125, -0.0003604888916015625, -3.62396240234375e-05, -0.0005855560302734375, -2.86102294921875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00010632903286023065, -9.19092126423493e-05, -0.0001764173648552969, -1.9073486328125e-06, -0.000782012939453125, -0.0001316070556640625, 0.0, 0.0, -1.9073486328125e-06, -0.000392913818359375, -2.09808349609375e-05, -0.007246136665344238, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -0.0004119873046875, -0.0009479522705078125, -0.0001659393310546875, -1.33514404296875e-05, -3.4332275390625e-05, 0.0, -0.0001373291015625, -0.0001621246337890625, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -1.3232202945800964e-05, 0.0, -0.0002994537353515625, -2.09808349609375e-05, -0.0001392364501953125, -4.398822784423828e-05, -1.9073486328125e-06, -0.0036420822143554688, -0.000354766845703125, -9.5367431640625e-06, -5.7220458984375e-06, -0.04912757873535156, -3.868986129760742, -2.872943878173828e-05, -0.0011882781982421875, -0.0008945465087890625, -9.1552734375e-05, -6.4849853515625e-05, -3.455617904663086, -5.960462772236497e-07, -0.0008920877007767558, -1.9073486328125e-06, -1.71661376953125e-05, -0.001033782958984375, -4.57763671875e-05, -0.0003566741943359375, -1.9073486328125e-06, -9.34600830078125e-05, -0.0014814138412475586, -8.392333984375e-05, -0.0038579197134822607, 0.0, -0.0001163482666015625, -0.000774383544921875, -0.000415802001953125, -0.00011444091796875, -0.002850770950317383, -2.622604142743512e-06, -0.0004902977379970253, -3.838539123535156e-05, -1.9073486328125e-05], "score": -7.409026251904436, "model_output": {"hole4": "player", "hole0": "DrainLife", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Drain Life", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(2), self)\n        player.hero.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Drain", "Life", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Drain", " ", "Life", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "hero", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.001983642578125, -0.0001506805419921875, -4.291528966859914e-06, -0.0002354280004510656, -0.00044123383122496307, -4.164408892393112e-06, -3.063678741455078e-05, -0.0002225637435913086, -0.0005645751953125, -0.0003604888916015625, -3.62396240234375e-05, -0.0005855560302734375, -2.86102294921875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00010632903286023065, -9.19092126423493e-05, -0.0001764173648552969, -1.9073486328125e-06, -0.000782012939453125, -0.0001316070556640625, 0.0, 0.0, -1.9073486328125e-06, -0.000392913818359375, -2.09808349609375e-05, -0.007246136665344238, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -0.0004119873046875, -0.0009479522705078125, -0.0001659393310546875, -1.33514404296875e-05, -3.4332275390625e-05, 0.0, -0.0001373291015625, -0.0001621246337890625, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -1.3232202945800964e-05, 0.0, -0.0002994537353515625, -2.09808349609375e-05, -0.0001392364501953125, -4.398822784423828e-05, -1.9073486328125e-06, -0.0036420822143554688, -0.000354766845703125, -9.5367431640625e-06, -5.7220458984375e-06, -0.04912757873535156, -0.02144617587327957, 0.0, -0.00081634521484375, -0.000499725341796875, -3.0517578125e-05, -1.71661376953125e-05, -0.0008320808410644531, -3.576278118089249e-07, -0.0006470409571193159, -1.9073486328125e-06, -2.288818359375e-05, -0.000453948974609375, -2.09808349609375e-05, -0.000247955322265625, 0.0, -0.0001697540283203125, -0.0012913942337036133, -7.2479248046875e-05, -0.0036700803320854902, 0.0, -9.72747802734375e-05, -0.0005741119384765625, -0.0003604888916015625, -0.0001163482666015625, -7.48436164855957, -1.6927711840253323e-05, -0.0005356722977012396, -2.491474151611328e-05, -3.4332275390625e-05], "score": -7.585828038306261, "model_output": {"hole4": "player", "hole0": "DrainLife", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "hero", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Drain Life", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.hero.heal(player.hero(2), self)\n"}, {"choice_history": [121, 200, "Drain", "Life", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Drain", " ", "Life", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.001983642578125, -0.0001506805419921875, -4.291528966859914e-06, -0.0002354280004510656, -0.00044123383122496307, -4.164408892393112e-06, -3.063678741455078e-05, -0.0002225637435913086, -0.0005645751953125, -0.0003604888916015625, -3.62396240234375e-05, -0.0005855560302734375, -2.86102294921875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00010632903286023065, -9.19092126423493e-05, -0.0001764173648552969, -1.9073486328125e-06, -0.000782012939453125, -0.0001316070556640625, 0.0, 0.0, -1.9073486328125e-06, -0.000392913818359375, -2.09808349609375e-05, -0.007246136665344238, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -0.0004119873046875, -0.0009479522705078125, -0.0001659393310546875, -1.33514404296875e-05, -3.4332275390625e-05, 0.0, -0.0001373291015625, -0.0001621246337890625, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -1.3232202945800964e-05, 0.0, -0.0002994537353515625, -2.09808349609375e-05, -0.0001392364501953125, -4.398822784423828e-05, -1.9073486328125e-06, -0.0036420822143554688, -0.000354766845703125, -9.5367431640625e-06, -5.7220458984375e-06, -0.04912757873535156, -0.02144617587327957, 0.0, -0.00081634521484375, -0.000499725341796875, -3.0517578125e-05, -1.71661376953125e-05, -0.0008320808410644531, -3.576278118089249e-07, -7.562815189361572, -1.0013580322265625e-05, -2.288818359375e-05, -0.000926971435546875, -3.814697265625e-05, -0.0001621246337890625, 0.0, -8.58306884765625e-05, -0.0013202428817749023, -2.47955322265625e-05, -0.0034953237045556307, 0.0, -0.000125885009765625, -0.0005626678466796875, -0.000370025634765625, -0.0001087188720703125, -0.0028983354568481445, -2.384185791015625e-06, -0.0004562065005302429, -3.445148468017578e-05, -2.288818359375e-05], "score": -7.6665909795291896, "model_output": {"hole4": "player", "hole0": "DrainLife", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Drain Life", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(0), self)\n        player.hero.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Drain", "Life", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Drain", " ", "Life", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 320, 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.001983642578125, -0.0001506805419921875, -4.291528966859914e-06, -0.0002354280004510656, -0.00044123383122496307, -4.164408892393112e-06, -3.063678741455078e-05, -0.0002225637435913086, -0.0005645751953125, -0.0003604888916015625, -3.62396240234375e-05, -0.0005855560302734375, -2.86102294921875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00010632903286023065, -9.19092126423493e-05, -0.0001764173648552969, -1.9073486328125e-06, -0.000782012939453125, -0.0001316070556640625, 0.0, 0.0, -1.9073486328125e-06, -0.000392913818359375, -2.09808349609375e-05, -0.007246136665344238, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -0.0004119873046875, -0.0009479522705078125, -0.0001659393310546875, -1.33514404296875e-05, -3.4332275390625e-05, 0.0, -0.0001373291015625, -0.0001621246337890625, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -1.3232202945800964e-05, 0.0, -0.0002994537353515625, -2.09808349609375e-05, -0.0001392364501953125, -4.398822784423828e-05, -1.9073486328125e-06, -0.0036420822143554688, -0.000354766845703125, -9.5367431640625e-06, -5.7220458984375e-06, -0.04912757873535156, -0.02144617587327957, 0.0, -7.350066184997559, -0.23488903045654297, -0.030437469482421875, -3.62396240234375e-05, -0.013513565063476562, 0.0, -0.0001125335693359375, -0.0015237330226227641, -1.33514404296875e-05, -0.00693636666983366, 0.0, -0.0005016326904296875, -0.0009860992431640625, -0.0008087158203125, -0.0001068115234375, -0.0033457279205322266, -2.9802317840221804e-06, -0.0005012599285691977, -6.35385513305664e-05, -1.33514404296875e-05], "score": -7.734770288314849, "model_output": {"hole4": "player", "hole0": "DrainLife", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Drain Life", "_type": "Str"}, {"_type": "Template61"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(self)\n        player.hero.heal(player.effective_heal_power(2), self)\n"}], "index": 26}
{"beams": [{"choice_history": [120, 185, 333, 129, 165, "Dread", "Infernal", "<EOS>", 320, 100, 333, 136, 197, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "score_history": [-0.0045413970947265625, -8.392333984375e-05, -7.43865966796875e-05, -0.001117706298828125, -1.1444091796875e-05, -0.004229537211358547, -5.400045120040886e-05, -4.768370445162873e-07, -6.4849853515625e-05, -0.00020599365234375, -1.9073486328125e-05, -0.00067138671875, -7.62939453125e-06, -0.00010001159535022452, -5.018673982704058e-05, -1.7762111383490264e-05, 0.0, -1.8311693565919995e-05, -2.384185791015625e-06, -0.011574029922485352, -0.000156402587890625, -0.0020084381103515625, 0.0, -0.012108802795410156, 0.0, -0.0011119842529296875, -0.0001354217529296875, -0.00081634521484375, 0.0, -0.0027170181274414062, -3.814697265625e-06, -0.013216018676757812, -5.7220458984375e-06, -0.00428009033203125, -0.056082725524902344, -0.000442353542894125, -0.04860341548919678, -3.4332275390625e-05, -0.001941680908203125, -0.0012396574020385742, -0.00014162063598632812, 0.0, -0.002620697021484375, -3.0517578125e-05, -5.7220458984375e-06, -0.0001659393310546875, -7.62939453125e-06, -7.05718994140625e-05, 0.0, -0.00038123130798339844, -0.0007363557815551758, -2.6702880859375e-05, -0.0005016326904296875, -0.0005664825439453125, -0.00011562818690435961, -0.00023792609863448888, -1.3061799108982086e-05, -3.612010914366692e-05, -0.0017633438110351562], "score": -0.17516989812781958, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Dread Infernal", "hole7": "battlecry", "hole6": "DEMON", "hole1": 6, "hole2": "WARLOCK", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 6, "_type": "Template8", "hole0": 6}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "DreadInfernal"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Dread", "Infernal", "<EOS>", 320, 100, 333, 136, 197, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "score_history": [-0.0045413970947265625, -8.392333984375e-05, -7.43865966796875e-05, -0.001117706298828125, -1.1444091796875e-05, -0.004229537211358547, -5.400045120040886e-05, -4.768370445162873e-07, -6.4849853515625e-05, -0.00020599365234375, -1.9073486328125e-05, -0.00067138671875, -7.62939453125e-06, -0.00010001159535022452, -5.018673982704058e-05, -1.7762111383490264e-05, 0.0, -1.8311693565919995e-05, -2.384185791015625e-06, -0.011574029922485352, -0.000156402587890625, -0.0020084381103515625, 0.0, -0.012108802795410156, 0.0, -0.0011119842529296875, -0.0001354217529296875, -0.00081634521484375, 0.0, -0.0027170181274414062, -3.814697265625e-06, -0.013216018676757812, -5.7220458984375e-06, -0.00428009033203125, -0.056082725524902344, -0.000442353542894125, -3.073713541030884, -0.007509111892431974, -3.0517578125e-05, -0.0013256072998046875, -0.001765131950378418, -0.00013172626495361328, 0.0, -0.0032672882080078125, -2.6702880859375e-05, -5.7220458984375e-06, -0.0002307891845703125, -9.5367431640625e-06, -4.76837158203125e-05, 0.0, -0.0003427267074584961, -0.0007916688919067383, -3.0517578125e-05, -0.0003604888916015625, -0.0005092620849609375, -0.00012969359522685409, -0.0002044336433755234, -1.330627128481865e-05, -3.337836096761748e-05, -0.0016384124755859375], "score": -3.208046876232288, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "DamageDamage"}, "hole0": "Dread Infernal", "hole7": "battlecry", "hole6": "DEMON", "hole1": 6, "hole2": "WARLOCK", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 6, "_type": "Template8", "hole0": 6}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "DreadInfernal"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(DamageDamage(1), CharacterSelector(players=BothPlayer()))\n            )\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Dread", "Infernal", "<EOS>", 320, 100, 333, 136, 197, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 216, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "score_history": [-0.0045413970947265625, -8.392333984375e-05, -7.43865966796875e-05, -0.001117706298828125, -1.1444091796875e-05, -0.004229537211358547, -5.400045120040886e-05, -4.768370445162873e-07, -6.4849853515625e-05, -0.00020599365234375, -1.9073486328125e-05, -0.00067138671875, -7.62939453125e-06, -0.00010001159535022452, -5.018673982704058e-05, -1.7762111383490264e-05, 0.0, -1.8311693565919995e-05, -2.384185791015625e-06, -0.011574029922485352, -0.000156402587890625, -0.0020084381103515625, 0.0, -0.012108802795410156, 0.0, -0.0011119842529296875, -0.0001354217529296875, -0.00081634521484375, 0.0, -0.0027170181274414062, -3.814697265625e-06, -0.013216018676757812, -5.7220458984375e-06, -0.00428009033203125, -4.302452564239502, -0.00023304246133193374, -0.018201708793640137, -0.0003681182861328125, -0.01685810089111328, -0.30291712284088135, -2.1457672119140625e-05, 0.0, -0.014081954956054688, -0.0012054443359375, -0.00011264689237577841, -0.00044968718430027366, -5.8246427215635777e-05, -8.964247535914183e-05, -0.00028228759765625], "score": -4.71673657492272, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Dread Infernal", "hole7": "battlecry", "hole6": "DEMON", "hole1": 6, "hole2": "WARLOCK", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 6, "_type": "Template8", "hole0": 6}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "DreadInfernal"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), CharacterSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Dread", "Infernal", "<EOS>", 320, 100, 333, 136, 197, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 219, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 320, 74, 187, "Null", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "score_history": [-0.0045413970947265625, -8.392333984375e-05, -7.43865966796875e-05, -0.001117706298828125, -1.1444091796875e-05, -0.004229537211358547, -5.400045120040886e-05, -4.768370445162873e-07, -6.4849853515625e-05, -0.00020599365234375, -1.9073486328125e-05, -0.00067138671875, -7.62939453125e-06, -0.00010001159535022452, -5.018673982704058e-05, -1.7762111383490264e-05, 0.0, -1.8311693565919995e-05, -2.384185791015625e-06, -0.011574029922485352, -0.000156402587890625, -0.0020084381103515625, 0.0, -0.012108802795410156, 0.0, -0.0011119842529296875, -0.0001354217529296875, -0.00081634521484375, 0.0, -0.0027170181274414062, -3.814697265625e-06, -0.013216018676757812, -5.7220458984375e-06, -0.00428009033203125, -4.534130096435547, -0.0003927938232664019, -0.006221652030944824, -0.0001888275146484375, -0.024570465087890625, -0.003809213638305664, -5.2094459533691406e-05, 0.0, -9.5367431640625e-06, -0.17087459564208984, -5.7220458984375e-05, -8.594989776611328e-05, -7.62939453125e-06, -0.0002880096435546875, -1.1444091796875e-05, -5.53131103515625e-05, -0.18720436096191406, -3.814697265625e-06, -0.017746925354003906, 0.0, -0.00038528439472429454, -0.002596139907836914, -3.0517578125e-05, -0.0010852813720703125, -0.000179290771484375, -0.00017534775543026626, -8.809378050500527e-05, -1.7037353245541453e-05, -4.2914787627523765e-05, -0.0008945465087890625], "score": -5.010608947064497, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}], "hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole3": [{"value": "Null", "_type": "NameConstant"}]}, "hole0": "Dread Infernal", "hole7": "battlecry", "hole6": "DEMON", "hole1": 6, "hole2": "WARLOCK", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 6, "_type": "Template8", "hole0": 6}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "DreadInfernal"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), CharacterSelector(Null, players=BothPlayer()))\n            )\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Dread", "Infernal", "<EOS>", 320, 100, 333, 136, 197, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "score_history": [-0.0045413970947265625, -8.392333984375e-05, -7.43865966796875e-05, -0.001117706298828125, -1.1444091796875e-05, -0.004229537211358547, -5.400045120040886e-05, -4.768370445162873e-07, -6.4849853515625e-05, -0.00020599365234375, -1.9073486328125e-05, -0.00067138671875, -7.62939453125e-06, -0.00010001159535022452, -5.018673982704058e-05, -1.7762111383490264e-05, 0.0, -1.8311693565919995e-05, -2.384185791015625e-06, -4.876843452453613, -6.4849853515625e-05, -0.008657455444335938, 0.0, -0.008541107177734375, 0.0, -0.0012645721435546875, -0.0001087188720703125, -0.0007305145263671875, 0.0, -0.004138946533203125, -3.814697265625e-06, -0.010527610778808594, -5.7220458984375e-06, -0.004210472106933594, -0.0542144775390625, -0.0004570134624373168, -0.0514446496963501, -3.4332275390625e-05, -0.001811981201171875, -0.001262664794921875, -0.00014543533325195312, 0.0, -0.0025119781494140625, -3.24249267578125e-05, -5.7220458984375e-06, -0.0001583099365234375, -7.62939453125e-06, -7.05718994140625e-05, 0.0, -0.00038123130798339844, -0.0007306337356567383, -2.86102294921875e-05, -0.000514984130859375, -0.00057220458984375, -0.00011598577839322388, -0.0002399526274530217, -1.2465257896110415e-05, -3.6239318433217704e-05, -0.0017547607421875], "score": -5.0429119563594895, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Dread Infernal", "hole7": "battlecry", "hole6": "DEMON", "hole1": 6, "hole2": "PRIEST", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 6, "_type": "Template8", "hole0": 6}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "DreadInfernal"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Dread", "Infernal", "<EOS>", 320, 100, 333, 136, 197, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "score_history": [-0.0045413970947265625, -8.392333984375e-05, -7.43865966796875e-05, -0.001117706298828125, -1.1444091796875e-05, -0.004229537211358547, -5.400045120040886e-05, -4.768370445162873e-07, -6.4849853515625e-05, -0.00020599365234375, -1.9073486328125e-05, -0.00067138671875, -7.62939453125e-06, -0.00010001159535022452, -5.018673982704058e-05, -1.7762111383490264e-05, 0.0, -1.8311693565919995e-05, -2.384185791015625e-06, -0.011574029922485352, -0.000156402587890625, -0.0020084381103515625, 0.0, -0.012108802795410156, 0.0, -0.0011119842529296875, -0.0001354217529296875, -0.00081634521484375, 0.0, -0.0027170181274414062, -3.814697265625e-06, -5.107720375061035, -0.07141685485839844, -0.08381271362304688, -0.00045606534695252776, -0.04549968242645264, -3.814697265625e-05, -0.001895904541015625, -0.001263737678527832, -9.489059448242188e-05, 0.0, -0.0030727386474609375, -2.288818359375e-05, -5.7220458984375e-06, -0.00017547607421875, -9.5367431640625e-06, -7.62939453125e-05, 0.0, -0.0003523826599121094, -0.000823974609375, -2.288818359375e-05, -0.0004405975341796875, -0.0004367828369140625, -0.00014530838234350085, -0.00020610315550584346, -1.4492281479761004e-05, -3.492804535198957e-05, -0.0018281936645507812], "score": -5.3617693969098355, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Dread Infernal", "hole7": "", "hole6": "DEMON", "hole1": 6, "hole2": "WARLOCK", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 6, "_type": "Template8", "hole0": 6}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "DreadInfernal"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, **Battlecry(\n            Damage(1), CharacterSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}, {"choice_history": [120, 185, 333, 129, 165, "<UNK>", "Infernal", "<EOS>", 320, 100, 333, 136, 197, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "score_history": [-0.0045413970947265625, -8.392333984375e-05, -7.43865966796875e-05, -0.001117706298828125, -1.1444091796875e-05, -5.471214294433594, -0.00018261463264934719, -1.9073468138230965e-06, -3.24249267578125e-05, -0.0003299713134765625, -2.86102294921875e-05, -0.0005092620849609375, -5.7220458984375e-06, -9.059495641849935e-05, -4.3987962271785364e-05, -2.2768828785046935e-05, 0.0, -1.724160392768681e-05, -2.384185791015625e-06, -0.00971066951751709, -0.0001735687255859375, -0.0025157928466796875, 0.0, -0.010786056518554688, 0.0, -0.0011234283447265625, -0.000125885009765625, -0.0008220672607421875, 0.0, -0.00334930419921875, -3.814697265625e-06, -0.0125732421875, -3.814697265625e-06, -0.0046176910400390625, -0.055504798889160156, -0.00048001614050008357, -0.04865598678588867, -3.62396240234375e-05, -0.001888275146484375, -0.001285552978515625, -0.00013399124145507812, 0.0, -0.0027618408203125, -3.0517578125e-05, -5.7220458984375e-06, -0.0001621246337890625, -7.62939453125e-06, -6.866455078125e-05, 0.0, -0.00037932395935058594, -0.0007363557815551758, -2.86102294921875e-05, -0.00051116943359375, -0.000518798828125, -0.00011658156290650368, -0.0002493688079994172, -1.3061100617051125e-05, -3.790820483118296e-05, -0.0020246505737304688], "score": -5.639753165329239, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Dread Infernal", "hole7": "battlecry", "hole6": "DEMON", "hole1": 6, "hole2": "WARLOCK", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 6, "_type": "Template8", "hole0": 6}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "<UNK>Infernal"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class <UNK>Infernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Dread", "Infernal", "<EOS>", 320, 100, 333, 136, 197, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 216, "Damage", "<EOS>", 320, 103, "Hero", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "score_history": [-0.0045413970947265625, -8.392333984375e-05, -7.43865966796875e-05, -0.001117706298828125, -1.1444091796875e-05, -0.004229537211358547, -5.400045120040886e-05, -4.768370445162873e-07, -6.4849853515625e-05, -0.00020599365234375, -1.9073486328125e-05, -0.00067138671875, -7.62939453125e-06, -0.00010001159535022452, -5.018673982704058e-05, -1.7762111383490264e-05, 0.0, -1.8311693565919995e-05, -2.384185791015625e-06, -0.011574029922485352, -0.000156402587890625, -0.0020084381103515625, 0.0, -0.012108802795410156, 0.0, -0.0011119842529296875, -0.0001354217529296875, -0.00081634521484375, 0.0, -0.0027170181274414062, -3.814697265625e-06, -0.013216018676757812, -5.7220458984375e-06, -0.00428009033203125, -4.302452564239502, -0.00023304246133193374, -0.018201708793640137, -0.0003681182861328125, -0.01685810089111328, -1.4563318490982056, -8.0108642578125e-05, -2.6702880859375e-05, -0.002117156982421875, -0.001735687255859375, -0.0002845131966751069, -0.0008528411271981895, -8.042083936743438e-05, -0.00014256645226851106, -0.0005092620849609375], "score": -5.859679193101215, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole1": [{"_type": "Template60"}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Dread Infernal", "hole7": "battlecry", "hole6": "DEMON", "hole1": 6, "hole2": "WARLOCK", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 6, "_type": "Template8", "hole0": 6}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "DreadInfernal"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Dread", "Infernal", "<EOS>", 320, 100, 333, 136, 197, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "DEMON", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "score_history": [-0.0045413970947265625, -8.392333984375e-05, -7.43865966796875e-05, -0.001117706298828125, -1.1444091796875e-05, -0.004229537211358547, -5.400045120040886e-05, -4.768370445162873e-07, -6.4849853515625e-05, -0.00020599365234375, -1.9073486328125e-05, -0.00067138671875, -7.62939453125e-06, -0.00010001159535022452, -5.018673982704058e-05, -1.7762111383490264e-05, 0.0, -1.8311693565919995e-05, -2.384185791015625e-06, -0.011574029922485352, -0.000156402587890625, -0.0020084381103515625, 0.0, -0.012108802795410156, 0.0, -0.0011119842529296875, -0.0001354217529296875, -0.00081634521484375, 0.0, -0.0027170181274414062, -3.814697265625e-06, -6.201312065124512, -5.53131103515625e-05, -0.01711750030517578, -0.08076286315917969, -0.00030516687547788024, -0.050676703453063965, -6.103515625e-05, -0.0012760162353515625, -0.0013271570205688477, -0.00016748905181884766, 0.0, -0.002742767333984375, -2.86102294921875e-05, -5.7220458984375e-06, -0.0001430511474609375, -7.62939453125e-06, -8.0108642578125e-05, 0.0, -0.00037539005279541016, -0.00081634521484375, -2.47955322265625e-05, -0.0004558563232421875, -0.000457763671875, -0.00013851429685018957, -0.00020371955179143697, -1.4967634342610836e-05, -3.4451219107722864e-05, -0.0016193389892578125], "score": -6.402113059586441, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Dread Infernal", "hole7": "DEMON", "hole6": "DEMON", "hole1": 6, "hole2": "WARLOCK", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 6, "_type": "Template8", "hole0": 6}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "DreadInfernal"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, DEMON=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Dread", "Infernal", "<EOS>", 320, 100, 333, 136, 197, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 218, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 320, 93, 255, "Both", "Player", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "score_history": [-0.0045413970947265625, -8.392333984375e-05, -7.43865966796875e-05, -0.001117706298828125, -1.1444091796875e-05, -0.004229537211358547, -5.400045120040886e-05, -4.768370445162873e-07, -6.4849853515625e-05, -0.00020599365234375, -1.9073486328125e-05, -0.00067138671875, -7.62939453125e-06, -0.00010001159535022452, -5.018673982704058e-05, -1.7762111383490264e-05, 0.0, -1.8311693565919995e-05, -2.384185791015625e-06, -0.011574029922485352, -0.000156402587890625, -0.0020084381103515625, 0.0, -0.012108802795410156, 0.0, -0.0011119842529296875, -0.0001354217529296875, -0.00081634521484375, 0.0, -0.0027170181274414062, -3.814697265625e-06, -0.013216018676757812, -5.7220458984375e-06, -0.00428009033203125, -5.103897571563721, -0.0020327549427747726, -0.006543517112731934, -0.00072479248046875, -0.007779121398925781, -0.019152045249938965, -0.0030813217163085938, 0.0, -0.06186485290527344, -0.6711397171020508, -0.001613616943359375, -0.47897034883499146, -9.59634780883789e-05, -5.14984130859375e-05, -0.000240325927734375, -0.0002269744873046875, -0.00013171974569559097, -0.00013624934945255518, -1.0676507372409105e-05, -6.604012742172927e-05, -0.0006122589111328125], "score": -6.417775917066933, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole3": [{"_type": "Template46", "hole0": "BothPlayer"}], "hole0": "Damage"}, "hole0": "Dread Infernal", "hole7": "battlecry", "hole6": "DEMON", "hole1": 6, "hole2": "WARLOCK", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 6, "_type": "Template8", "hole0": 6}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "DreadInfernal"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), CharacterSelector(BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Dread", "Infernal", "<EOS>", 320, 100, 333, 136, 197, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "score_history": [-0.0045413970947265625, -8.392333984375e-05, -7.43865966796875e-05, -0.001117706298828125, -1.1444091796875e-05, -0.004229537211358547, -5.400045120040886e-05, -4.768370445162873e-07, -6.4849853515625e-05, -0.00020599365234375, -1.9073486328125e-05, -0.00067138671875, -7.62939453125e-06, -0.00010001159535022452, -5.018673982704058e-05, -1.7762111383490264e-05, 0.0, -1.8311693565919995e-05, -2.384185791015625e-06, -0.011574029922485352, -0.000156402587890625, -0.0020084381103515625, 0.0, -0.012108802795410156, 0.0, -0.0011119842529296875, -0.0001354217529296875, -0.00081634521484375, 0.0, -0.0027170181274414062, -3.814697265625e-06, -0.013216018676757812, -5.7220458984375e-06, -0.00428009033203125, -0.056082725524902344, -0.000442353542894125, -0.04860341548919678, -3.4332275390625e-05, -0.001941680908203125, -0.0012396574020385742, -0.00014162063598632812, 0.0, -6.014198303222656, -0.0002460479736328125, -5.7220458984375e-06, -0.000255584716796875, -1.9073486328125e-06, -0.0002994537353515625, -1.9073486328125e-06, -0.0005891323089599609, -0.0005551576614379883, -4.38690185546875e-05, -1.52587890625e-05, -3.62396240234375e-05, -0.038071632385253906, -0.0002231597900390625, -0.1327505111694336, -9.5367431640625e-06, -0.10660040378570557, -0.008648037910461426, -3.814697265625e-06, -0.0004596710205078125, -0.0001678466796875, -0.0002410236484138295, -0.00015257872291840613, -3.0419323593378067e-05, -6.10339266131632e-05, -0.0013332366943359375], "score": -6.472891825938746, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Dread Infernal", "hole7": "battlecry", "hole6": "DEMON", "hole1": 6, "hole2": "WARLOCK", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 6, "_type": "Template8", "hole0": 6}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "DreadInfernal"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Dread", "Infernal", "<EOS>", 320, 100, 333, 136, 197, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 218, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 320, 74, 187, "Null", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "score_history": [-0.0045413970947265625, -8.392333984375e-05, -7.43865966796875e-05, -0.001117706298828125, -1.1444091796875e-05, -0.004229537211358547, -5.400045120040886e-05, -4.768370445162873e-07, -6.4849853515625e-05, -0.00020599365234375, -1.9073486328125e-05, -0.00067138671875, -7.62939453125e-06, -0.00010001159535022452, -5.018673982704058e-05, -1.7762111383490264e-05, 0.0, -1.8311693565919995e-05, -2.384185791015625e-06, -0.011574029922485352, -0.000156402587890625, -0.0020084381103515625, 0.0, -0.012108802795410156, 0.0, -0.0011119842529296875, -0.0001354217529296875, -0.00081634521484375, 0.0, -0.0027170181274414062, -3.814697265625e-06, -0.013216018676757812, -5.7220458984375e-06, -0.00428009033203125, -5.103897571563721, -0.0020327549427747726, -0.006543517112731934, -0.00072479248046875, -0.007779121398925781, -0.019152045249938965, -0.0030813217163085938, 0.0, -0.06186485290527344, -1.0835771560668945, -8.0108642578125e-05, -6.520748138427734e-05, -5.7220458984375e-06, -0.20798015594482422, -0.000335693359375, -0.00013291228970047086, -0.00010657169332262129, -0.00011684876517392695, -0.00035034847678616643, -0.00077056884765625], "score": -6.558001820852837, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole3": [{"value": "Null", "_type": "NameConstant"}], "hole0": "Damage"}, "hole0": "Dread Infernal", "hole7": "battlecry", "hole6": "DEMON", "hole1": 6, "hole2": "WARLOCK", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 6, "_type": "Template8", "hole0": 6}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "DreadInfernal"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), CharacterSelector(Null)))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Dread", "Infernal", "<EOS>", 320, 100, 333, 136, 197, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "ROGUE", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "score_history": [-0.0045413970947265625, -8.392333984375e-05, -7.43865966796875e-05, -0.001117706298828125, -1.1444091796875e-05, -0.004229537211358547, -5.400045120040886e-05, -4.768370445162873e-07, -6.4849853515625e-05, -0.00020599365234375, -1.9073486328125e-05, -0.00067138671875, -7.62939453125e-06, -0.00010001159535022452, -5.018673982704058e-05, -1.7762111383490264e-05, 0.0, -1.8311693565919995e-05, -2.384185791015625e-06, -0.011574029922485352, -0.000156402587890625, -0.0020084381103515625, 0.0, -0.012108802795410156, 0.0, -0.0011119842529296875, -0.0001354217529296875, -0.00081634521484375, 0.0, -0.0027170181274414062, -3.814697265625e-06, -6.686943531036377, -4.38690185546875e-05, -0.008333206176757812, -0.07851123809814453, -0.000580964086111635, -0.019592881202697754, -4.1961669921875e-05, -0.0010013580322265625, -0.0015257596969604492, -0.00016355514526367188, 0.0, -0.0030536651611328125, -3.0517578125e-05, -3.814697265625e-06, -0.00016021728515625, -7.62939453125e-06, -4.76837158203125e-05, 0.0, -0.0003508329391479492, -0.0007096529006958008, -3.4332275390625e-05, -0.0004425048828125, -0.0004978179931640625, -0.00013839486928191036, -0.00020538851094897836, -1.5208817785605788e-05, -3.3855187211884186e-05, -0.00159454345703125], "score": -6.8459671026429305, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Dread Infernal", "hole7": "ROGUE", "hole6": "DEMON", "hole1": 6, "hole2": "WARLOCK", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 6, "_type": "Template8", "hole0": 6}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "DreadInfernal"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, ROGUE=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Dread", "Infernal", "<EOS>", 320, 100, 333, 136, 197, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 149, 291, "6", "<EOS>", "6", "<EOS>", "ROGUE", "<EOS>", 29, 219, "Damage", "<EOS>", 320, 102, "Character", "Selector", "<EOS>", 320, 74, 187, "Null", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>"], "score_history": [-0.0045413970947265625, -8.392333984375e-05, -7.43865966796875e-05, -0.001117706298828125, -1.1444091796875e-05, -0.004229537211358547, -5.400045120040886e-05, -4.768370445162873e-07, -6.4849853515625e-05, -0.00020599365234375, -1.9073486328125e-05, -0.00067138671875, -7.62939453125e-06, -0.00010001159535022452, -5.018673982704058e-05, -1.7762111383490264e-05, 0.0, -1.8311693565919995e-05, -2.384185791015625e-06, -0.011574029922485352, -0.000156402587890625, -0.0020084381103515625, 0.0, -0.012108802795410156, 0.0, -0.0011119842529296875, -0.0001354217529296875, -0.00081634521484375, 0.0, -0.0027170181274414062, -3.814697265625e-06, -0.013216018676757812, -5.7220458984375e-06, -0.00428009033203125, -0.056082725524902344, -0.000442353542894125, -0.04860341548919678, -3.4332275390625e-05, -0.001941680908203125, -0.0012396574020385742, -0.00014162063598632812, 0.0, -0.002620697021484375, -3.0517578125e-05, -5.7220458984375e-06, -0.0001659393310546875, -7.62939453125e-06, -7.05718994140625e-05, 0.0, -0.00038123130798339844, -0.0007363557815551758, -2.6702880859375e-05, -0.0005016326904296875, -0.0005664825439453125, -0.00011562818690435961, -0.00023792609863448888, -1.3061799108982086e-05, -3.612010914366692e-05, -7.875283241271973, -1.2678756713867188, -0.01703190989792347, -0.004945309832692146, -0.003561468794941902, -0.0002789496793411672, -0.27727198600769043, -0.014997482299804688, -0.16722965240478516, -1.307032585144043, -0.005730628967285156, -0.0021115541458129883, -3.814697265625e-06, -0.6249322891235352, -0.02083408832550049, -0.002277374267578125, 0.0, -5.7220458984375e-06, -0.09000492095947266, -8.7738037109375e-05, -6.29425048828125e-05, -5.7220458984375e-06, -0.0001354217529296875, -2.6702880859375e-05, -2.6702880859375e-05, -0.28467559814453125, -5.7220458984375e-06, -0.007796287536621094, 0.0, -0.0002561805595178157, -0.0019495487213134766, -2.288818359375e-05], "score": -12.149866658863061, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Dread Infernal", "hole7": "battlecry", "hole6": "DEMON", "hole1": 6, "hole2": "WARLOCK", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 6, "_type": "Template8", "hole0": 6}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "DreadInfernal"}, {"hole1": 6, "hole2": "ROGUE", "_type": "Template7", "hole3": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}], "hole0": "Damage", "hole1": [{"_type": "Template59"}], "hole2": "CharacterSelector", "_type": "Template22", "hole3": [{"value": "Null", "_type": "NameConstant"}]}, "hole0": 6}], "_type": "Module"}, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n\n\ndef create_minion(self, player):\n    return Minion(6, 6, ROGUE=Battlecry(Damage(2), CharacterSelector(Null,\n        players=BothPlayer())))\n"}, {"choice_history": [120, 185, 331], "score_history": [-0.0045413970947265625, -8.392333984375e-05, -20.225183486938477], "score": -20.229808807373047, "model_output": {"body": [], "_type": "Module"}, "inferred_code": ""}], "index": 27}
{"beams": [{"choice_history": [121, 198, "Elven", "Archer", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.03958320617675781, -3.814697265625e-05, -0.0001401803019689396, -1.6689160474925302e-05, -5.960462772236497e-07, -2.3841766960686073e-07, -1.0013580322265625e-05, -5.4835698392707855e-05, -0.0003376007080078125, -0.001110076904296875, -0.09229850769042969, -3.576278118089249e-07, -3.242491220589727e-05, -1.3112959095451515e-05, 0.0, -1.1444068150012754e-05, 0.0, -0.001605987548828125, -5.14984130859375e-05, -0.0009783495916053653, -0.006723880767822266, -1.71661376953125e-05, -0.000820159912109375, -0.0008437633514404297, -7.748603820800781e-06, 0.0, -0.000629425048828125, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.9073486328125e-06, -0.0001277923583984375, -5.7220458984375e-06, -0.00010836123692570254, -0.00016415119171142578, -5.7220458984375e-06, -0.0001010894775390625, -0.0002346038818359375, -0.0012187957763671875, -2.288818359375e-05, -0.004569053649902344, -3.814697265625e-06, -0.0009071826934814453, -0.0007381439208984375, -1.1444091796875e-05, -0.005152106285095215, -3.814697265625e-06, -3.933906555175781e-06, 0.0, -2.86102294921875e-05, -2.47955322265625e-05, -0.0001430511474609375, -3.576278118089249e-07, 0.0, -0.00014650716912001371, -3.814697265625e-06], "score": -0.15949176467773896, "model_output": {"hole4": "player", "hole0": "ElvenArcher", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template60"}], "hole0": "Elven Archer", "hole7": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 1, "hole2": "COMMON", "_type": "Template6", "hole3": "Damage", "hole5": "CharacterSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Elven", "Archer", "<EOS>", 320, 100, 333, 136, 197, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "1", "<EOS>", "1", "<EOS>", 147], "score_history": [-3.270798683166504, -0.0004100799560546875, -6.67572021484375e-05, -0.00086212158203125, -4.57763671875e-05, -0.000617551791947335, -5.8887977502308786e-05, -1.4185804502631072e-05, -0.0001735687255859375, -0.0003643035888671875, -1.52587890625e-05, -9.1552734375e-05, -2.09808349609375e-05, -4.589452510117553e-05, -8.702020568307489e-05, -3.933906555175781e-06, 0.0, -5.960459930065554e-07, -2.3841855067985307e-07, -0.00029397010803222656, -3.814697265625e-05, -0.0003757476806640625, 0.0, -0.0002923011779785156, 0.0, -0.002475738525390625, -9.5367431640625e-06, -0.0002574920654296875, 0.0, -0.0016433000564575195, 0.0, -0.0015003681182861328, 0.0, -0.0036525726318359375, -0.026983261108398438, -0.0018113465048372746, -0.00014030677266418934, -6.866455078125e-05, -0.001556396484375, -0.0002274513099109754, -1.4305038348538801e-05, 0.0, -0.0042972564697265625, -2.86102294921875e-05, 0.0, -0.000152587890625, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -8.83340835571289e-05, -0.00015854835510253906, -7.62939453125e-06, -4.76837158203125e-05, -0.0001983642578125, -0.000965118408203125, -3.24249267578125e-05, -0.0016651153564453125, -5.7220458984375e-06, -0.003783702850341797, -0.0013103485107421875, -2.288818359375e-05, -0.00041961669921875, -8.96453857421875e-05, -4.637133679352701e-05, -5.960462772236497e-07, -1.2875112588517368e-05, -1.1920928244535389e-07, -0.000274658203125], "score": -3.3286417729325635, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Elven Archer", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 1, "hole2": "ALL", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 1, "_type": "Template8", "hole0": 1}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "ElvenArcher"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Elven", "Archer", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "Damage", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.03958320617675781, -3.814697265625e-05, -0.0001401803019689396, -1.6689160474925302e-05, -5.960462772236497e-07, -2.3841766960686073e-07, -1.0013580322265625e-05, -5.4835698392707855e-05, -0.0003376007080078125, -0.001110076904296875, -0.09229850769042969, -3.576278118089249e-07, -3.242491220589727e-05, -1.3112959095451515e-05, 0.0, -1.1444068150012754e-05, 0.0, -0.001605987548828125, -5.14984130859375e-05, -0.0009783495916053653, -5.035024166107178, -0.000377655029296875, -1.33514404296875e-05, -0.0009059906005859375, -0.001179337501525879, -7.748603820800781e-06, 0.0, -0.0007762908935546875, -3.814697265625e-06, -1.9073486328125e-06, -0.0004024505615234375, -1.9073486328125e-06, -0.0001220703125, -5.7220458984375e-06, -0.00010240077244816348, -0.00017368793487548828, -5.7220458984375e-06, -0.000102996826171875, -0.0002346038818359375, -0.0012149810791015625, -2.288818359375e-05, -0.004651069641113281, -3.814697265625e-06, -0.001151442527770996, -0.000762939453125, -1.1444091796875e-05, -0.005091071128845215, -3.814697265625e-06, -3.933906555175781e-06, 0.0, -2.86102294921875e-05, -2.47955322265625e-05, -0.0001392364501953125, -3.576278118089249e-07, 0.0, -0.0001448385010007769, -3.814697265625e-06], "score": -5.188984143174537, "model_output": {"hole4": "player", "hole0": "ElvenArcher", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template60"}], "hole0": "Elven Archer", "hole7": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 1, "hole2": "COMMON", "_type": "Template6", "hole3": "DamageDamage", "hole5": "CharacterSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(DamageDamage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Elven", "Archer", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.03958320617675781, -3.814697265625e-05, -0.0001401803019689396, -1.6689160474925302e-05, -5.960462772236497e-07, -2.3841766960686073e-07, -1.0013580322265625e-05, -5.4835698392707855e-05, -0.0003376007080078125, -0.001110076904296875, -3.693699836730957, -2.0265558760002023e-06, -3.969664976466447e-05, -4.41074053014745e-06, 0.0, -9.06288914848119e-06, 0.0, -0.4719724655151367, -1.1444091796875e-05, -0.016258474439382553, -7.987022399902344e-06, -9.5367431640625e-06, -0.27316761016845703, -0.5879136323928833, -3.814697265625e-06, 0.0, -0.004881858825683594, -0.016447067260742188, -3.4332275390625e-05, -0.08567880094051361, -3.933906555175781e-06, -3.814697265625e-06, -5.733966827392578e-05, -7.62939453125e-06, -2.0265579223632812e-06, 0.0, -5.14984130859375e-05, -5.91278076171875e-05, -4.57763671875e-05, -1.1920928244535389e-07, 0.0, -8.547783363610506e-05, -1.9073486328125e-06], "score": -5.191752293109907, "model_output": {"hole4": "player", "hole0": "ElvenArcher", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template60"}], "hole0": "Elven Archer", "hole6": [{"_type": "Template46", "hole0": "EnemyPlayer"}], "hole1": 1, "hole2": "COMMON", "_type": "Template6", "hole3": "Damage", "hole5": "CharacterSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Elven", "Archer", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.03958320617675781, -3.814697265625e-05, -0.0001401803019689396, -1.6689160474925302e-05, -5.960462772236497e-07, -2.3841766960686073e-07, -1.0013580322265625e-05, -5.4835698392707855e-05, -0.0003376007080078125, -0.001110076904296875, -0.09229850769042969, -3.576278118089249e-07, -3.242491220589727e-05, -1.3112959095451515e-05, 0.0, -1.1444068150012754e-05, 0.0, -0.001605987548828125, -5.14984130859375e-05, -0.0009783495916053653, -0.006723880767822266, -1.71661376953125e-05, -0.000820159912109375, -0.0008437633514404297, -7.748603820800781e-06, 0.0, -0.000629425048828125, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.9073486328125e-06, -0.0001277923583984375, -5.7220458984375e-06, -0.00010836123692570254, -0.00016415119171142578, -5.7220458984375e-06, -0.0001010894775390625, -0.0002346038818359375, -0.0012187957763671875, -2.288818359375e-05, -0.004569053649902344, -3.814697265625e-06, -0.0009071826934814453, -0.0007381439208984375, -1.1444091796875e-05, -5.353308200836182, -7.62939453125e-06, -6.103515625e-05, 0.0, -9.1552734375e-05, -0.002902984619140625, -0.0004711151123046875, -1.1920928244535389e-07, -1.1920928244535389e-07, -0.00031860743183642626, -5.7220458984375e-06], "score": -5.511151859134529, "model_output": {"hole4": "player", "hole0": "ElvenArcher", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template60"}], "hole0": "Elven Archer", "hole7": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 1, "hole2": "COMMON", "_type": "Template6", "hole3": "Damage", "hole5": "CharacterSelector"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_weapon(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Elven", "Archer", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 103, "Minion", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.03958320617675781, -3.814697265625e-05, -0.0001401803019689396, -1.6689160474925302e-05, -5.960462772236497e-07, -2.3841766960686073e-07, -1.0013580322265625e-05, -5.4835698392707855e-05, -0.0003376007080078125, -0.001110076904296875, -3.693699836730957, -2.0265558760002023e-06, -3.969664976466447e-05, -4.41074053014745e-06, 0.0, -9.06288914848119e-06, 0.0, -0.4719724655151367, -1.1444091796875e-05, -0.016258474439382553, -7.987022399902344e-06, -9.5367431640625e-06, -0.27316761016845703, -0.8666449189186096, -3.814697265625e-06, 0.0, -0.1494455337524414, -0.021078109741210938, -4.9591064453125e-05, -0.05890297144651413, -5.841255187988281e-06, -3.814697265625e-06, -0.00010693073272705078, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, -5.53131103515625e-05, -5.7220458984375e-05, -4.38690185546875e-05, -1.1920928244535389e-07, 0.0, -8.845726551953703e-05, -1.9073486328125e-06], "score": -5.59297029683426, "model_output": {"hole4": "player", "hole0": "ElvenArcher", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template60"}], "hole0": "Elven Archer", "hole6": [{"_type": "Template46", "hole0": "EnemyPlayer"}], "hole1": 1, "hole2": "COMMON", "_type": "Template6", "hole3": "Damage", "hole5": "MinionSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            MinionSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Elven", "Archer", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 278, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 320, 93, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.03958320617675781, -3.814697265625e-05, -0.0001401803019689396, -1.6689160474925302e-05, -5.960462772236497e-07, -2.3841766960686073e-07, -1.0013580322265625e-05, -5.4835698392707855e-05, -0.0003376007080078125, -0.001110076904296875, -5.326680660247803, -2.7418097943154862e-06, -8.749958942644298e-05, -8.344646857949556e-07, 0.0, -2.264979229948949e-06, 0.0, -0.0007954835891723633, -0.0001583099365234375, -0.01614820584654808, -5.7220458984375e-06, -4.9591064453125e-05, -0.009219169616699219, -0.042658448219299316, -1.9073486328125e-06, 0.0, -0.003086090087890625, -0.03168678283691406, -0.0002346038818359375, -0.1939772367477417, -4.00543212890625e-05, -2.47955322265625e-05, -1.71661376953125e-05, -3.814697265625e-06, -2.0265579223632812e-06, 0.0, -4.57763671875e-05, -3.24249267578125e-05, -6.103515625e-05, -1.1920928244535389e-07, 0.0, -8.452443580608815e-05, -1.9073486328125e-06], "score": -5.666400780969688, "model_output": {"hole4": "player", "hole0": "ElvenArcher", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template60"}], "hole8": [{"_type": "Template46", "hole0": "BothPlayer"}], "hole0": "Elven Archer", "hole1": 1, "hole2": "COMMON", "_type": "Template6", "hole3": "Damage", "hole5": "CharacterSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(), BothPlayer()))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Elven", "Archer", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 36, 247, "Random", "Picker", "<EOS>", "3", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.03958320617675781, -3.814697265625e-05, -0.0001401803019689396, -1.6689160474925302e-05, -5.960462772236497e-07, -2.3841766960686073e-07, -1.0013580322265625e-05, -5.4835698392707855e-05, -0.0003376007080078125, -0.001110076904296875, -0.09229850769042969, -3.576278118089249e-07, -3.242491220589727e-05, -1.3112959095451515e-05, 0.0, -1.1444068150012754e-05, 0.0, -0.001605987548828125, -5.14984130859375e-05, -0.0009783495916053653, -0.006723880767822266, -1.71661376953125e-05, -0.000820159912109375, -0.0008437633514404297, -7.748603820800781e-06, 0.0, -0.000629425048828125, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.9073486328125e-06, -0.0001277923583984375, -5.7220458984375e-06, -0.00010836123692570254, -0.00016415119171142578, -5.7220458984375e-06, -0.0001010894775390625, -0.0002346038818359375, -0.0012187957763671875, -2.288818359375e-05, -5.541652679443359, -0.0008831024169921875, -0.025983810424804688, -0.0030517578125, -0.0001544952392578125, -0.11514433473348618, -9.5367431640625e-05, -0.001552581787109375, 0.0, -1.633167266845703e-05, 0.0, -7.82012939453125e-05, -3.0517578125e-05, -6.67572021484375e-05, -1.1920928244535389e-07, 0.0, -8.572223305236548e-05, -1.9073486328125e-06], "score": -5.836552820159106, "model_output": {"hole4": "player", "hole0": "ElvenArcher", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template60"}], "hole0": "Elven Archer", "hole7": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"hole1": 3, "_type": "Template41", "hole0": "RandomPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 1, "hole2": "COMMON", "_type": "Template6", "hole3": "Damage", "hole5": "CharacterSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=RandomPicker(3))))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Elven", "Archer", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.03958320617675781, -3.814697265625e-05, -0.0001401803019689396, -1.6689160474925302e-05, -5.960462772236497e-07, -2.3841766960686073e-07, -1.0013580322265625e-05, -5.4835698392707855e-05, -0.0003376007080078125, -0.001110076904296875, -4.784600734710693, -1.9907789464923553e-05, -0.0005506344023160636, -2.0265579223632812e-06, 0.0, 3.5746597859542817e-07, 0.0, -0.005736231803894043, -3.814697265625e-06, -0.06141721084713936, -1.1920928244535389e-07, -0.5827430486679077, -1.9073486328125e-06, 0.0, -0.08803939819335938, -5.7220458984375e-06, 0.0, -0.6760578155517578, -4.1961669921875e-05, -3.62396240234375e-05, -3.814697265625e-06, -0.00041031837463378906, -0.000926971435546875, -3.814697265625e-05, -1.9073486328125e-05, -0.000244140625, -0.000751495361328125, -2.86102294921875e-05, -0.001201629638671875, -7.62939453125e-06, -0.000990152359008789, -0.00069427490234375, -2.288818359375e-05, -0.11450791358947754, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.24249267578125e-05, -6.4849853515625e-05, -0.000213623046875, -4.768370445162873e-07, 0.0, -0.00019084579253103584, -3.814697265625e-06], "score": -6.3609163528132555, "model_output": {"hole4": "player", "hole0": "ElvenArcher", "hole1": "MinionCard", "hole2": [{"hole0": "Elven Archer", "hole7": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 1, "hole2": "COMMON", "_type": "Template6", "hole3": "Damage", "hole5": "MinionSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Elven", "Archer", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.03958320617675781, -3.814697265625e-05, -0.0001401803019689396, -1.6689160474925302e-05, -5.960462772236497e-07, -2.3841766960686073e-07, -1.0013580322265625e-05, -5.4835698392707855e-05, -0.0003376007080078125, -0.001110076904296875, -3.693699836730957, -2.0265558760002023e-06, -3.969664976466447e-05, -4.41074053014745e-06, 0.0, -9.06288914848119e-06, 0.0, -1.5679655075073242, -3.814697265625e-06, -0.00339519907720387, -9.775161743164062e-06, -1.33514404296875e-05, -0.4516773223876953, -0.5294170379638672, -5.841255187988281e-06, 0.0, -0.0054302215576171875, -0.018671035766601562, -3.4332275390625e-05, -0.09868215024471283, -3.933906555175781e-06, -3.814697265625e-06, -5.733966827392578e-05, -7.62939453125e-06, -2.0265579223632812e-06, 0.0, -5.14984130859375e-05, -5.91278076171875e-05, -4.57763671875e-05, -1.1920928244535389e-07, 0.0, -8.488184539601207e-05, -1.9073486328125e-06], "score": -6.41067026208389, "model_output": {"hole4": "player", "hole0": "ElvenArcher", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template60"}], "hole0": "Elven Archer", "hole6": [{"_type": "Template46", "hole0": "EnemyPlayer"}], "hole1": 1, "hole2": "RARE", "_type": "Template6", "hole3": "Damage", "hole5": "CharacterSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(1),\n            CharacterSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Elven", "Archer", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 271, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "Damage", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.03958320617675781, -3.814697265625e-05, -0.0001401803019689396, -1.6689160474925302e-05, -5.960462772236497e-07, -2.3841766960686073e-07, -1.0013580322265625e-05, -5.4835698392707855e-05, -0.0003376007080078125, -0.001110076904296875, -5.26554012298584, -3.576278118089249e-07, -5.877003786736168e-05, -2.0265579223632812e-06, 0.0, -1.9513536244630814e-06, -7.152555099310121e-07, -0.6401807069778442, -0.000316619873046875, -0.4336349368095398, -1.5139577953959815e-05, -0.05652143433690071, -2.872943878173828e-05, 0.0, -0.001569986343383789, 0.0, -3.099440846199286e-06, 0.0, -2.6702880859375e-05, -8.7738037109375e-05, -9.1552734375e-05, -3.576278118089249e-07, 0.0, -0.00016474112635478377, -3.814697265625e-06], "score": -6.4395410876874735, "model_output": {"hole4": "player", "hole0": "ElvenArcher", "hole1": "MinionCard", "hole2": [{"hole0": "Elven Archer", "hole1": 1, "hole2": "WARRIOR", "_type": "Template6", "hole3": "Damage", "hole5": "PlayerSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.WARRIOR, battlecry=Battlecry(Damage(),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Elven", "Archer", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.03958320617675781, -3.814697265625e-05, -0.0001401803019689396, -1.6689160474925302e-05, -5.960462772236497e-07, -2.3841766960686073e-07, -1.0013580322265625e-05, -5.4835698392707855e-05, -0.0003376007080078125, -0.001110076904296875, -4.784600734710693, -1.9907789464923553e-05, -0.0005506344023160636, -2.0265579223632812e-06, 0.0, 3.5746597859542817e-07, 0.0, -0.005736231803894043, -3.814697265625e-06, -0.06141721084713936, -1.1920928244535389e-07, -0.5827430486679077, -1.9073486328125e-06, 0.0, -0.08803939819335938, -5.7220458984375e-06, 0.0, -0.7125740051269531, -2.86102294921875e-05, -0.000629425048828125, -7.62939453125e-06, -0.0020432472229003906, -0.000476837158203125, -2.47955322265625e-05, -3.24249267578125e-05, -4.1961669921875e-05, -0.030007362365722656, -3.814697265625e-06, -0.004441261291503906, -2.86102294921875e-05, -0.004017829895019531, -0.000972747802734375, -3.4332275390625e-05, -0.16711437702178955, -7.62939453125e-06, -3.814697265625e-06, 0.0, -3.24249267578125e-05, -5.91278076171875e-05, -0.0001468658447265625, -5.960462772236497e-07, 0.0, -0.00019454004359431565, -3.814697265625e-06], "score": -6.487340068121391, "model_output": {"hole4": "player", "hole0": "ElvenArcher", "hole1": "MinionCard", "hole2": [{"hole0": "Elven Archer", "hole7": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 1, "hole2": "COMMON", "_type": "Template6", "hole3": "Damage", "hole5": "MinionSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(),\n            MinionSelector(picker=UserPicker(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Elven", "Archer", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 112, "Minion", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.03958320617675781, -3.814697265625e-05, -0.0001401803019689396, -1.6689160474925302e-05, -5.960462772236497e-07, -2.3841766960686073e-07, -1.0013580322265625e-05, -5.4835698392707855e-05, -0.0003376007080078125, -0.001110076904296875, -3.693699836730957, -2.0265558760002023e-06, -3.969664976466447e-05, -4.41074053014745e-06, 0.0, -9.06288914848119e-06, 0.0, -0.4719724655151367, -1.1444091796875e-05, -0.016258474439382553, -7.987022399902344e-06, -9.5367431640625e-06, -2.2015695571899414, -0.002865196205675602, -1.9073486328125e-06, 0.0, -0.12814903259277344, -0.03977680206298828, -5.53131103515625e-05, -0.033693306148052216, -5.841255187988281e-06, -3.814697265625e-06, -0.00011456012725830078, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, -5.340576171875e-05, -6.103515625e-05, -4.1961669921875e-05, -1.1920928244535389e-07, -1.1920928244535389e-07, -9.060284355655313e-05, -1.9073486328125e-06], "score": -6.629798755885574, "model_output": {"hole4": "player", "hole0": "ElvenArcher", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template75"}], "hole0": "Elven Archer", "hole6": [{"_type": "Template46", "hole0": "EnemyPlayer"}], "hole1": 1, "hole2": "COMMON", "_type": "Template6", "hole3": "Damage", "hole5": "MinionSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(False),\n            MinionSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Elven", "Archer", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.03958320617675781, -3.814697265625e-05, -0.0001401803019689396, -1.6689160474925302e-05, -5.960462772236497e-07, -2.3841766960686073e-07, -1.0013580322265625e-05, -5.4835698392707855e-05, -0.0003376007080078125, -0.001110076904296875, -0.09229850769042969, -3.576278118089249e-07, -3.242491220589727e-05, -1.3112959095451515e-05, 0.0, -1.1444068150012754e-05, 0.0, -6.566765785217285, -3.62396240234375e-05, -0.000760903989430517, -0.04332423210144043, -5.7220458984375e-06, -0.0008563995361328125, -0.0008918046951293945, -7.867813110351562e-06, 0.0, -0.000659942626953125, -3.814697265625e-06, -1.9073486328125e-06, -0.0004405975341796875, -1.9073486328125e-06, -0.0001220703125, -5.7220458984375e-06, -0.00010430812108097598, -0.00015842914581298828, -5.7220458984375e-06, -9.72747802734375e-05, -0.0002384185791015625, -0.001224517822265625, -2.288818359375e-05, -0.0043163299560546875, -3.814697265625e-06, -0.000966191291809082, -0.0007419586181640625, -1.1444091796875e-05, -0.00520932674407959, -3.814697265625e-06, -3.933906555175781e-06, 0.0, -2.86102294921875e-05, -2.47955322265625e-05, -0.00014495849609375, -3.576278118089249e-07, 0.0, -0.0001432889694115147, -3.814697265625e-06], "score": -6.760986546394349, "model_output": {"hole4": "player", "hole0": "ElvenArcher", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template60"}], "hole0": "Elven Archer", "hole7": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 1, "hole2": "RARE", "_type": "Template6", "hole3": "Damage", "hole5": "CharacterSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}, {"choice_history": [121, 198, "Elven", "Archer", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 103, "Minion", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.03958320617675781, -3.814697265625e-05, -0.0001401803019689396, -1.6689160474925302e-05, -5.960462772236497e-07, -2.3841766960686073e-07, -1.0013580322265625e-05, -5.4835698392707855e-05, -0.0003376007080078125, -0.001110076904296875, -3.693699836730957, -2.0265558760002023e-06, -3.969664976466447e-05, -4.41074053014745e-06, 0.0, -9.06288914848119e-06, 0.0, -1.5679655075073242, -3.814697265625e-06, -0.00339519907720387, -9.775161743164062e-06, -1.33514404296875e-05, -0.4516773223876953, -0.963137686252594, -3.814697265625e-06, 0.0, -0.14340686798095703, -0.022078514099121094, -5.14984130859375e-05, -0.09215496480464935, -5.841255187988281e-06, -3.814697265625e-06, -0.00010693073272705078, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, -5.53131103515625e-05, -5.7220458984375e-05, -4.57763671875e-05, -1.1920928244535389e-07, 0.0, -8.702669583726674e-05, -1.9073486328125e-06], "score": -6.979316632531713, "model_output": {"hole4": "player", "hole0": "ElvenArcher", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template60"}], "hole0": "Elven Archer", "hole6": [{"_type": "Template46", "hole0": "EnemyPlayer"}], "hole1": 1, "hole2": "RARE", "_type": "Template6", "hole3": "Damage", "hole5": "MinionSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(1), MinionSelector\n            (EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}], "index": 28}
{"beams": [{"choice_history": [121, 200, "Excess", "Mana", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Excess", " ", "Mana", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 94, 112, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0002803802490234375, -0.000118255615234375, -2.384185791015625e-06, -6.43729799776338e-06, -0.00042137171840295196, -4.6844128519296646e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0010585784912109375, -0.0024547576904296875, -3.0517578125e-05, -0.00022125244140625, -0.00252532958984375, -1.71661376953125e-05, -0.000457763671875, -0.0001049041748046875, -5.7220458984375e-06, -2.5748875486897305e-05, -8.690332469996065e-05, -0.00013422116171568632, -4.1961669921875e-05, -0.003528594970703125, -0.0038356781005859375, 0.0, -0.0005626678466796875, 0.0, -0.0013132095336914062, -7.62939453125e-06, -0.021582722663879395, 0.0, -0.0024347305297851562, -0.0005321502685546875, -9.72747802734375e-05, 0.0, -6.341929110931233e-05, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.00143337226472795, -3.814689989667386e-06, -0.07664871215820312, -3.814697265625e-05, -0.20432567596435547, -0.001148223876953125, -0.0001735687255859375, -1.9073486328125e-06, -0.004572868347167969, -0.0016698837280273438, -5.3882598876953125e-05], "score": -0.3321907044155523, "model_output": {"hole4": "player", "hole0": "ExcessMana", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Excess Mana", "_type": "Str"}, {"_type": "Template76"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n"}, {"choice_history": [121, 200, "Excess", "Mana", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Excess", " ", "Mana", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 94, 112, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "10", "<EOS>", 110], "score_history": [-0.0002803802490234375, -0.000118255615234375, -2.384185791015625e-06, -6.43729799776338e-06, -0.00042137171840295196, -4.6844128519296646e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0010585784912109375, -0.0024547576904296875, -3.0517578125e-05, -0.00022125244140625, -0.00252532958984375, -1.71661376953125e-05, -0.000457763671875, -0.0001049041748046875, -5.7220458984375e-06, -2.5748875486897305e-05, -8.690332469996065e-05, -0.00013422116171568632, -4.1961669921875e-05, -0.003528594970703125, -0.0038356781005859375, 0.0, -0.0005626678466796875, 0.0, -0.0013132095336914062, -7.62939453125e-06, -0.021582722663879395, 0.0, -0.0024347305297851562, -0.0005321502685546875, -9.72747802734375e-05, 0.0, -6.341929110931233e-05, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.00143337226472795, -3.814689989667386e-06, -0.07664871215820312, -3.814697265625e-05, -2.874856948852539, -0.0001010894775390625, -0.04456329345703125, -0.3148772716522217, -1.9073486328125e-06, -0.00099945068359375, -0.12354087829589844, -2.6702880859375e-05, -0.000762939453125, -0.017749428749084473, -5.257060183794238e-05, -0.029570937156677246, -7.510129944421351e-05, -0.000591278076171875], "score": -3.528014491810609, "model_output": {"hole4": "player", "hole0": "ExcessMana", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 10, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Excess Mana", "_type": "Str"}, {"_type": "Template76"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(10), self)\n"}, {"choice_history": [121, 200, "Excess", "Mana", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Excess", " ", "Mana", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 94, 112, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 173, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "mana", "<EOS>", 122, 46], "score_history": [-0.0002803802490234375, -0.000118255615234375, -2.384185791015625e-06, -6.43729799776338e-06, -0.00042137171840295196, -4.6844128519296646e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0010585784912109375, -0.0024547576904296875, -3.0517578125e-05, -0.00022125244140625, -0.00252532958984375, -1.71661376953125e-05, -0.000457763671875, -0.0001049041748046875, -5.7220458984375e-06, -2.5748875486897305e-05, -8.690332469996065e-05, -0.00013422116171568632, -4.1961669921875e-05, -0.003528594970703125, -0.0038356781005859375, 0.0, -0.0005626678466796875, 0.0, -0.0013132095336914062, -7.62939453125e-06, -0.021582722663879395, 0.0, -0.0024347305297851562, -0.0005321502685546875, -9.72747802734375e-05, 0.0, -6.341929110931233e-05, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.00143337226472795, -3.814689989667386e-06, -0.07664871215820312, -3.814697265625e-05, -2.067877769470215, -0.006481170654296875, -0.022769927978515625, -0.00019073486328125, -0.9145631790161133, 0.0, -0.000255584716796875, -0.043431978672742844, -5.841255187988281e-06, -2.86102294921875e-05, -0.04858875274658203, -1.9073486328125e-06, -0.060283660888671875, -0.0005741119384765625, -0.014997141435742378, -6.54458999633789e-05, -0.0021791458129882812, -0.015040397644042969, -0.002208709716796875, -0.0009517669677734375, -1.9073486328125e-06, -0.0049343109130859375, -0.19978132843971252, -0.0006151199340820312, -0.012099266052246094, -0.026170730590820312], "score": -3.564343194360845, "model_output": {"hole4": "player", "hole0": "ExcessMana", "hole6": [{"_type": "Template19"}, {"test": {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Num", "n": 10}], "_type": "Compare", "left": {"attr": "mana", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "body": [{"value": {"_type": "Template60"}, "_type": "AugAssign", "target": {"attr": "mana", "value": {"_type": "Template64"}, "_type": "Attribute"}, "op": {"_type": "Add"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Excess Mana", "_type": "Str"}, {"_type": "Template76"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana < 10:\n            player.mana += 1\n"}, {"choice_history": [121, 200, "Excess", "Mana", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Excess", " ", "Mana", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 94, 112, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "mana", "<EOS>", 122, 46], "score_history": [-0.0002803802490234375, -0.000118255615234375, -2.384185791015625e-06, -6.43729799776338e-06, -0.00042137171840295196, -4.6844128519296646e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0010585784912109375, -0.0024547576904296875, -3.0517578125e-05, -0.00022125244140625, -0.00252532958984375, -1.71661376953125e-05, -0.000457763671875, -0.0001049041748046875, -5.7220458984375e-06, -2.5748875486897305e-05, -8.690332469996065e-05, -0.00013422116171568632, -4.1961669921875e-05, -0.003528594970703125, -0.0038356781005859375, 0.0, -0.0005626678466796875, 0.0, -0.0013132095336914062, -7.62939453125e-06, -0.021582722663879395, 0.0, -0.0024347305297851562, -0.0005321502685546875, -9.72747802734375e-05, 0.0, -6.341929110931233e-05, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.00143337226472795, -3.814689989667386e-06, -0.07664871215820312, -3.814697265625e-05, -2.067877769470215, -0.006481170654296875, -0.022769927978515625, -0.00019073486328125, -0.516606330871582, -6.866455078125e-05, -0.0021419525146484375, -1.9073486328125e-06, -0.09296858310699463, -4.529942543740617e-06, -1.33514404296875e-05, -0.0002536773681640625, 0.0, -0.10994529724121094, -0.3193129301071167, -3.850458233500831e-05, -5.7220458984375e-06, -0.008756637573242188, 0.0, -0.06507682800292969, -0.0003871917724609375, -0.013655567541718483, -0.00016462801431771368, -0.38018226623535156, -0.036884307861328125, -0.0018138885498046875, -0.00104522705078125, 0.0, -0.0033817291259765625, -0.11955644935369492, -0.0011761188507080078, -0.009934425354003906, -0.020555496215820312], "score": -3.9214965094147374, "model_output": {"hole4": "player", "hole0": "ExcessMana", "hole6": [{"_type": "Template19"}, {"test": {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Num", "n": 10}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "hand", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}, "body": [{"value": {"_type": "Template60"}, "_type": "AugAssign", "target": {"attr": "mana", "value": {"_type": "Template64"}, "_type": "Attribute"}, "op": {"_type": "Add"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Excess Mana", "_type": "Str"}, {"_type": "Template76"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if len(player.hand) < 10:\n            player.mana += 1\n"}, {"choice_history": [121, 200, "Excess", "Mana", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Excess", " ", "Mana", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 94, 112, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0002803802490234375, -0.000118255615234375, -2.384185791015625e-06, -6.43729799776338e-06, -0.00042137171840295196, -4.6844128519296646e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0010585784912109375, -0.0024547576904296875, -3.0517578125e-05, -0.00022125244140625, -0.00252532958984375, -1.71661376953125e-05, -0.000457763671875, -0.0001049041748046875, -5.7220458984375e-06, -2.5748875486897305e-05, -8.690332469996065e-05, -0.00013422116171568632, -4.1961669921875e-05, -0.003528594970703125, -0.0038356781005859375, 0.0, -0.0005626678466796875, 0.0, -0.0013132095336914062, -7.62939453125e-06, -4.018671035766602, 0.0, -0.0552978515625, -0.0004100799560546875, -6.67572021484375e-05, 0.0, -7.510181603720412e-05, 0.0, -2.86102294921875e-05, -5.7220458984375e-06, -7.2479248046875e-05, -0.0010573862819001079, -4.6491513785440475e-06, -0.14522266387939453, -4.38690185546875e-05, -0.23456096649169922, -0.0016231536865234375, -0.0001773834228515625, -1.9073486328125e-06, -0.0033998489379882812, -0.0015344619750976562, -4.8041343688964844e-05], "score": -4.479607415396458, "model_output": {"hole4": "player", "hole0": "ExcessMana", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Excess Mana", "_type": "Str"}, {"_type": "Template76"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n"}, {"choice_history": [121, 200, "Excess", "Mana", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Excess", " ", "Mana", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 94, 112, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 47], "score_history": [-0.0002803802490234375, -0.000118255615234375, -2.384185791015625e-06, -6.43729799776338e-06, -0.00042137171840295196, -4.6844128519296646e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0010585784912109375, -0.0024547576904296875, -3.0517578125e-05, -0.00022125244140625, -0.00252532958984375, -1.71661376953125e-05, -0.000457763671875, -0.0001049041748046875, -5.7220458984375e-06, -2.5748875486897305e-05, -8.690332469996065e-05, -0.00013422116171568632, -4.1961669921875e-05, -0.003528594970703125, -0.0038356781005859375, 0.0, -0.0005626678466796875, 0.0, -0.0013132095336914062, -7.62939453125e-06, -0.021582722663879395, 0.0, -0.0024347305297851562, -0.0005321502685546875, -9.72747802734375e-05, 0.0, -6.341929110931233e-05, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.00143337226472795, -3.814689989667386e-06, -0.07664871215820312, -3.814697265625e-05, -2.874856948852539, -0.0001010894775390625, -0.04456329345703125, -1.7103431224822998, 0.0, -6.4849853515625e-05, -0.02753162384033203, -0.10483074188232422, -0.027565479278564453, -0.011648297309875488, -0.0004482269287109375, -2.09808349609375e-05, -0.00458526611328125, -8.58306884765625e-05, -0.002590179443359375, -0.04952239990234375], "score": -4.9790030241711065, "model_output": {"hole4": "player", "hole0": "ExcessMana", "hole6": [{"_type": "Template19"}, {"hole1": "add_buff", "hole2": [{"hole1": [{"_type": "UnaryOp", "operand": {"_type": "Template61"}, "op": {"_type": "USub"}}], "_type": "Template30", "hole0": "ManaChange"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Excess Mana", "_type": "Str"}, {"_type": "Template76"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(ManaChange(-3)))\n"}, {"choice_history": [121, 200, "Excess", "Mana", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Excess", " ", "Mana", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 94, 112, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "mana", "<EOS>", 122, 46], "score_history": [-0.0002803802490234375, -0.000118255615234375, -2.384185791015625e-06, -6.43729799776338e-06, -0.00042137171840295196, -4.6844128519296646e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0010585784912109375, -0.0024547576904296875, -3.0517578125e-05, -0.00022125244140625, -0.00252532958984375, -1.71661376953125e-05, -0.000457763671875, -0.0001049041748046875, -5.7220458984375e-06, -2.5748875486897305e-05, -8.690332469996065e-05, -0.00013422116171568632, -4.1961669921875e-05, -0.003528594970703125, -0.0038356781005859375, 0.0, -0.0005626678466796875, 0.0, -0.0013132095336914062, -7.62939453125e-06, -0.021582722663879395, 0.0, -0.0024347305297851562, -0.0005321502685546875, -9.72747802734375e-05, 0.0, -6.341929110931233e-05, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.00143337226472795, -3.814689989667386e-06, -0.07664871215820312, -3.814697265625e-05, -2.067877769470215, -0.006481170654296875, -0.022769927978515625, -0.00019073486328125, -0.516606330871582, -6.866455078125e-05, -0.0021419525146484375, -1.9073486328125e-06, -0.09296858310699463, -4.529942543740617e-06, -1.33514404296875e-05, -0.0002536773681640625, 0.0, -0.10994529724121094, -1.3129481077194214, -1.9073486328125e-06, -1.9073486328125e-06, -0.008230209350585938, -1.9073486328125e-06, -0.5479860305786133, -0.00115966796875, -0.018902532756328583, -0.00016438959573861212, -0.08650398254394531, -0.04713726043701172, -0.002750396728515625, -0.0026798248291015625, -1.9073486328125e-06, -0.0049228668212890625, -0.11717057973146439, -0.0009423494338989258, -0.011110305786132812, -0.01897907257080078], "score": -5.121163797423378, "model_output": {"hole4": "player", "hole0": "ExcessMana", "hole6": [{"_type": "Template19"}, {"test": {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Num", "n": 10}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}, "body": [{"value": {"_type": "Template60"}, "_type": "AugAssign", "target": {"attr": "mana", "value": {"_type": "Template64"}, "_type": "Attribute"}, "op": {"_type": "Add"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Excess Mana", "_type": "Str"}, {"_type": "Template76"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if len(player.minions) < 10:\n            player.mana += 1\n"}, {"choice_history": [121, 200, "Excess", "Mana", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Excess", " ", "Mana", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 94, 112, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 173, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "<UNK>", "<EOS>", 122, 46], "score_history": [-0.0002803802490234375, -0.000118255615234375, -2.384185791015625e-06, -6.43729799776338e-06, -0.00042137171840295196, -4.6844128519296646e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0010585784912109375, -0.0024547576904296875, -3.0517578125e-05, -0.00022125244140625, -0.00252532958984375, -1.71661376953125e-05, -0.000457763671875, -0.0001049041748046875, -5.7220458984375e-06, -2.5748875486897305e-05, -8.690332469996065e-05, -0.00013422116171568632, -4.1961669921875e-05, -0.003528594970703125, -0.0038356781005859375, 0.0, -0.0005626678466796875, 0.0, -0.0013132095336914062, -7.62939453125e-06, -0.021582722663879395, 0.0, -0.0024347305297851562, -0.0005321502685546875, -9.72747802734375e-05, 0.0, -6.341929110931233e-05, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.00143337226472795, -3.814689989667386e-06, -0.07664871215820312, -3.814697265625e-05, -2.067877769470215, -0.006481170654296875, -0.022769927978515625, -0.00019073486328125, -0.9145631790161133, 0.0, -0.000255584716796875, -0.043431978672742844, -5.841255187988281e-06, -2.86102294921875e-05, -0.04858875274658203, -1.9073486328125e-06, -0.060283660888671875, -0.0005741119384765625, -0.014997141435742378, -6.54458999633789e-05, -0.0021791458129882812, -0.015040397644042969, -0.002208709716796875, -0.0009517669677734375, -1.9073486328125e-06, -0.0049343109130859375, -2.0251522064208984, -0.00430142879486084, -0.0037946701049804688, -0.004573822021484375], "score": -5.363498876686208, "model_output": {"hole4": "player", "hole0": "ExcessMana", "hole6": [{"_type": "Template19"}, {"test": {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Num", "n": 10}], "_type": "Compare", "left": {"attr": "mana", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "body": [{"value": {"_type": "Template60"}, "_type": "AugAssign", "target": {"attr": "<UNK>", "value": {"_type": "Template64"}, "_type": "Attribute"}, "op": {"_type": "Add"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Excess Mana", "_type": "Str"}, {"_type": "Template76"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana < 10:\n            player.<UNK> += 1\n"}, {"choice_history": [121, 200, "Excess", "Mana", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Excess", " ", "Mana", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 94, 112, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "10", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0002803802490234375, -0.000118255615234375, -2.384185791015625e-06, -6.43729799776338e-06, -0.00042137171840295196, -4.6844128519296646e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0010585784912109375, -0.0024547576904296875, -3.0517578125e-05, -0.00022125244140625, -0.00252532958984375, -1.71661376953125e-05, -0.000457763671875, -0.0001049041748046875, -5.7220458984375e-06, -2.5748875486897305e-05, -8.690332469996065e-05, -0.00013422116171568632, -4.1961669921875e-05, -0.003528594970703125, -0.0038356781005859375, 0.0, -0.0005626678466796875, 0.0, -0.0013132095336914062, -7.62939453125e-06, -0.021582722663879395, 0.0, -0.0024347305297851562, -0.0005321502685546875, -9.72747802734375e-05, 0.0, -6.341929110931233e-05, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.00143337226472795, -3.814689989667386e-06, -4.723760604858398, -0.001129150390625, -0.09908103942871094, -1.71661376953125e-05, -0.03449821472167969, -0.20412743091583252, 0.0, -0.000591278076171875, -0.10263824462890625, -5.7220458984375e-05, -0.000835418701171875, -0.022134065628051758, -3.1828589271754026e-05, -0.03514218330383301, -5.602775127044879e-05, -0.000766754150390625, -0.12008190155029297, -0.0006771087646484375, -7.62939453125e-06, -5.7220458984375e-06, -0.000110626220703125, -0.015908360481262207, -0.0001735687255859375, -0.014438629150390625, -8.0108642578125e-05, -0.000118255615234375, -3.814697265625e-06, -0.0009641647338867188, -0.020038723945617676, -3.0517578125e-05, -0.021986961364746094, -0.0001049041748046875, -0.00061798095703125, -3.814697265625e-06, -0.0045013427734375, -0.030183911323547363, -2.6702880859375e-05], "score": -5.4984892121538, "model_output": {"hole4": "player", "hole0": "ExcessMana", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 10, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Excess Mana", "_type": "Str"}, {"_type": "Template76"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(10), self)\n        player.draw()\n        player.draw()\n        player.draw()\n"}, {"choice_history": [121, 200, "Excess", "Mana", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Excess", " ", "Mana", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 94, 112, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "card", "<EOS>", 317, 8, 320, 113, 332, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0002803802490234375, -0.000118255615234375, -2.384185791015625e-06, -6.43729799776338e-06, -0.00042137171840295196, -4.6844128519296646e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0010585784912109375, -0.0024547576904296875, -3.0517578125e-05, -0.00022125244140625, -0.00252532958984375, -1.71661376953125e-05, -0.000457763671875, -0.0001049041748046875, -5.7220458984375e-06, -2.5748875486897305e-05, -8.690332469996065e-05, -0.00013422116171568632, -4.1961669921875e-05, -0.003528594970703125, -0.0038356781005859375, 0.0, -0.0005626678466796875, 0.0, -0.0013132095336914062, -7.62939453125e-06, -0.021582722663879395, 0.0, -0.0024347305297851562, -0.0005321502685546875, -9.72747802734375e-05, 0.0, -6.341929110931233e-05, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.00143337226472795, -3.814689989667386e-06, -0.07664871215820312, -3.814697265625e-05, -2.067877769470215, -0.006481170654296875, -0.022769927978515625, -0.00019073486328125, -0.516606330871582, -6.866455078125e-05, -0.0021419525146484375, -1.9073486328125e-06, -0.09296858310699463, -4.529942543740617e-06, -1.33514404296875e-05, -0.0002536773681640625, 0.0, -2.2732839584350586, 0.0, -0.31574153900146484, 0.0, -0.00235748291015625, -3.576278118089249e-07, -0.019135193899273872, -7.629365427419543e-06, -0.029118943959474564, -0.0075571537017822266, -0.0001926422119140625, -0.1235952377319336, -1.9073486328125e-06, -0.4285850524902344, -0.056087493896484375, -0.2253732681274414, -1.9073486328125e-06, -0.00276947021484375, -2.6702880859375e-05, -0.0003643035888671875, -0.001806497573852539, -5.352497100830078e-05], "score": -6.315683561221192, "model_output": {"hole4": "player", "hole0": "ExcessMana", "hole6": [{"_type": "Template19"}, {"test": {"ops": [{"_type": "Eq"}], "comparators": [{"_type": "Template76"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "card", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, "body": [{"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Excess Mana", "_type": "Str"}, {"_type": "Template76"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if len(game.other_player.card) == 0:\n            player.draw()\n"}, {"choice_history": [121, 200, "Excess", "Mana", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Excess", " ", "Mana", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 94, 112, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "<UNK>", "<EOS>", 122, 46], "score_history": [-0.0002803802490234375, -0.000118255615234375, -2.384185791015625e-06, -6.43729799776338e-06, -0.00042137171840295196, -4.6844128519296646e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0010585784912109375, -0.0024547576904296875, -3.0517578125e-05, -0.00022125244140625, -0.00252532958984375, -1.71661376953125e-05, -0.000457763671875, -0.0001049041748046875, -5.7220458984375e-06, -2.5748875486897305e-05, -8.690332469996065e-05, -0.00013422116171568632, -4.1961669921875e-05, -0.003528594970703125, -0.0038356781005859375, 0.0, -0.0005626678466796875, 0.0, -0.0013132095336914062, -7.62939453125e-06, -0.021582722663879395, 0.0, -0.0024347305297851562, -0.0005321502685546875, -9.72747802734375e-05, 0.0, -6.341929110931233e-05, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.00143337226472795, -3.814689989667386e-06, -0.07664871215820312, -3.814697265625e-05, -2.067877769470215, -0.006481170654296875, -0.022769927978515625, -0.00019073486328125, -0.516606330871582, -6.866455078125e-05, -0.0021419525146484375, -1.9073486328125e-06, -0.09296858310699463, -4.529942543740617e-06, -1.33514404296875e-05, -0.0002536773681640625, 0.0, -0.10994529724121094, -0.3193129301071167, -3.850458233500831e-05, -5.7220458984375e-06, -0.008756637573242188, 0.0, -0.06507682800292969, -0.0003871917724609375, -0.013655567541718483, -0.00016462801431771368, -0.38018226623535156, -0.036884307861328125, -0.0018138885498046875, -0.00104522705078125, 0.0, -0.0033817291259765625, -2.6689629554748535, -0.006351113319396973, -0.0033826828002929688, -0.0051250457763671875], "score": -6.454095817011421, "model_output": {"hole4": "player", "hole0": "ExcessMana", "hole6": [{"_type": "Template19"}, {"test": {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Num", "n": 10}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "hand", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}, "body": [{"value": {"_type": "Template60"}, "_type": "AugAssign", "target": {"attr": "<UNK>", "value": {"_type": "Template64"}, "_type": "Attribute"}, "op": {"_type": "Add"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Excess Mana", "_type": "Str"}, {"_type": "Template76"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if len(player.hand) < 10:\n            player.<UNK> += 1\n"}, {"choice_history": [121, 200, "Excess", "Mana", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Excess", " ", "Mana", "<EOS>", 113, 95, 94, 112, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0002803802490234375, -0.000118255615234375, -2.384185791015625e-06, -6.43729799776338e-06, -0.00042137171840295196, -4.6844128519296646e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0010585784912109375, -0.0024547576904296875, -3.0517578125e-05, -0.00022125244140625, -0.00252532958984375, -1.71661376953125e-05, -0.000457763671875, -0.0001049041748046875, -5.7220458984375e-06, -2.5748875486897305e-05, -8.690332469996065e-05, -0.00013422116171568632, -4.1961669921875e-05, -0.003528594970703125, -5.839098930358887, -0.051611900329589844, -0.0026988983154296875, -0.00014853451284579933, 0.0, -0.0005753980367444456, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -6.29425048828125e-05, -0.002686975756660104, -5.483620952873025e-06, -0.14794921875, -5.53131103515625e-05, -1.481673240661621, -0.0003566741943359375, -0.001068115234375, -1.9073486328125e-06, -0.0019483566284179688, -0.019079208374023438, -2.4914739697123878e-05], "score": -7.560649439771623, "model_output": {"hole4": "player", "hole0": "ExcessMana", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Excess Mana", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.ALL, CARD_RARITY\n            .COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n"}, {"choice_history": [121, 200, "Excess", "Mana", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Excess", " ", "Mana", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 94, 112, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 334, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Worthless", "Imp", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50, 145, 250, 53, "trigger", "<EOS>", 321, 76, 194, "card_drawn", "<EOS>", 73, 186, "chosen_card", "<EOS>"], "score_history": [-0.0002803802490234375, -0.000118255615234375, -2.384185791015625e-06, -6.43729799776338e-06, -0.00042137171840295196, -4.6844128519296646e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0010585784912109375, -0.0024547576904296875, -3.0517578125e-05, -0.00022125244140625, -0.00252532958984375, -1.71661376953125e-05, -0.000457763671875, -0.0001049041748046875, -5.7220458984375e-06, -2.5748875486897305e-05, -8.690332469996065e-05, -0.00013422116171568632, -4.1961669921875e-05, -0.003528594970703125, -0.0038356781005859375, 0.0, -0.0005626678466796875, 0.0, -0.0013132095336914062, -7.62939453125e-06, -0.021582722663879395, 0.0, -0.0024347305297851562, -0.0005321502685546875, -9.72747802734375e-05, 0.0, -6.341929110931233e-05, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.00143337226472795, -3.814689989667386e-06, -0.07664871215820312, -3.814697265625e-05, -2.067877769470215, -0.006481170654296875, -0.022769927978515625, -0.00019073486328125, -0.516606330871582, -6.866455078125e-05, -0.0021419525146484375, -1.9073486328125e-06, -0.09296858310699463, -4.529942543740617e-06, -1.33514404296875e-05, -0.0002536773681640625, 0.0, -0.10994529724121094, -0.3193129301071167, -3.850458233500831e-05, -5.7220458984375e-06, -0.008756637573242188, 0.0, -0.06507682800292969, -0.0003871917724609375, -0.013655567541718483, -0.00016462801431771368, -1.421860694885254, -0.1363983154296875, -1.9073486328125e-06, -0.016495704650878906, 0.0, -0.00017547607421875, -0.008640289306640625, -2.1457672119140625e-06, -0.006142972502857447, 0.0, -3.4332275390625e-05, -0.642176628112793, -0.000370025634765625, -0.05284690856933594, -9.5367431640625e-06, -0.0009860992431640625, 0.0, -0.057578086853027344, -0.013022295199334621, 0.0, -0.06490182876586914, -5.7220458984375e-06, -0.5173777341842651, -0.14399492740631104, -0.00018978118896484375, -0.03241729736328125, -7.62939453125e-06, -1.52587890625e-05, -0.0005474090576171875, -9.5367431640625e-06, -0.021430015563964844, -0.00018310546875, -1.1444091796875e-05, 0.0, -0.0011005401611328125, -0.021445034071803093, -2.0265579223632812e-06, -0.0028781890869140625, -0.000812530517578125, -0.0018062591552734375, -0.0006008148193359375, -0.000110626220703125, -0.0007171630859375, -4.1961669921875e-05, -1.9073486328125e-06, -0.000774383544921875, -0.0009288787841796875, -5.7220458984375e-06, -0.7729473114013672, -0.050948143005371094, -1.71661376953125e-05, -0.0004482269287109375, -0.0001678466796875, -1.9073486328125e-05, -0.003364085452631116, -3.814697265625e-06, -0.009554862976074219, -0.0001506805419921875, -0.29321324825286865, -1.9073486328125e-06], "score": -7.646862113455882, "model_output": {"hole4": "player", "hole0": "ExcessMana", "hole6": [{"_type": "Template19"}, {"test": {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Num", "n": 10}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "hand", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}, "body": [{"hole1": "append", "hole2": [{"hole1": "WorthlessImp", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}], "_type": "Template44", "hole0": {"attr": "hand", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"value": {"_type": "Template64"}, "targets": [{"attr": "player", "value": {"slice": {"value": {"_type": "UnaryOp", "operand": {"_type": "Template60"}, "op": {"_type": "USub"}}, "_type": "Index"}, "value": {"attr": "hand", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Attribute"}], "_type": "Assign"}, {"hole1": "trigger", "hole2": [{"s": "card_drawn", "_type": "Str"}, {"_type": "Name", "id": "chosen_card"}], "_type": "Template44", "hole0": {"_type": "Template68"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Excess Mana", "_type": "Str"}, {"_type": "Template76"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if len(player.hand) < 10:\n            player.hand.append(hearthbreaker.cards.minions.WorthlessImp())\n            player.hand[-1].player = player\n            self.trigger('card_drawn', chosen_card)\n"}, {"choice_history": [121, 200, "Excess", "Mana", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Excess", " ", "Mana", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 94, 112, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 334, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Worthless", "Imp", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50, 145, 250, 50, "trigger", "<EOS>", 321, 76, 194, "card_drawn", "<EOS>", 73, 186, "chosen_card", "<EOS>"], "score_history": [-0.0002803802490234375, -0.000118255615234375, -2.384185791015625e-06, -6.43729799776338e-06, -0.00042137171840295196, -4.6844128519296646e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0010585784912109375, -0.0024547576904296875, -3.0517578125e-05, -0.00022125244140625, -0.00252532958984375, -1.71661376953125e-05, -0.000457763671875, -0.0001049041748046875, -5.7220458984375e-06, -2.5748875486897305e-05, -8.690332469996065e-05, -0.00013422116171568632, -4.1961669921875e-05, -0.003528594970703125, -0.0038356781005859375, 0.0, -0.0005626678466796875, 0.0, -0.0013132095336914062, -7.62939453125e-06, -0.021582722663879395, 0.0, -0.0024347305297851562, -0.0005321502685546875, -9.72747802734375e-05, 0.0, -6.341929110931233e-05, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.00143337226472795, -3.814689989667386e-06, -0.07664871215820312, -3.814697265625e-05, -2.067877769470215, -0.006481170654296875, -0.022769927978515625, -0.00019073486328125, -0.516606330871582, -6.866455078125e-05, -0.0021419525146484375, -1.9073486328125e-06, -0.09296858310699463, -4.529942543740617e-06, -1.33514404296875e-05, -0.0002536773681640625, 0.0, -0.10994529724121094, -0.3193129301071167, -3.850458233500831e-05, -5.7220458984375e-06, -0.008756637573242188, 0.0, -0.06507682800292969, -0.0003871917724609375, -0.013655567541718483, -0.00016462801431771368, -1.421860694885254, -0.1363983154296875, -1.9073486328125e-06, -0.016495704650878906, 0.0, -0.00017547607421875, -0.008640289306640625, -2.1457672119140625e-06, -0.006142972502857447, 0.0, -3.4332275390625e-05, -0.642176628112793, -0.000370025634765625, -0.05284690856933594, -9.5367431640625e-06, -0.0009860992431640625, 0.0, -0.057578086853027344, -0.013022295199334621, 0.0, -0.06490182876586914, -5.7220458984375e-06, -0.5173777341842651, -0.14399492740631104, -0.00018978118896484375, -0.03241729736328125, -7.62939453125e-06, -1.52587890625e-05, -0.0005474090576171875, -9.5367431640625e-06, -0.021430015563964844, -0.00018310546875, -1.1444091796875e-05, 0.0, -0.0011005401611328125, -0.021445034071803093, -2.0265579223632812e-06, -0.0028781890869140625, -0.000812530517578125, -0.0018062591552734375, -0.0006008148193359375, -0.000110626220703125, -0.0007171630859375, -4.1961669921875e-05, -1.9073486328125e-06, -0.000774383544921875, -0.0009288787841796875, -5.7220458984375e-06, -1.1032295227050781, -0.044275760650634766, -1.52587890625e-05, -0.0012664794921875, -0.000213623046875, -1.33514404296875e-05, -0.002372859511524439, -3.814697265625e-06, -0.009892463684082031, -8.58306884765625e-05, -0.32317638397216797, -1.9073486328125e-06], "score": -8.000573002573674, "model_output": {"hole4": "player", "hole0": "ExcessMana", "hole6": [{"_type": "Template19"}, {"test": {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Num", "n": 10}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "hand", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}, "body": [{"hole1": "append", "hole2": [{"hole1": "WorthlessImp", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}], "_type": "Template44", "hole0": {"attr": "hand", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"value": {"_type": "Template64"}, "targets": [{"attr": "player", "value": {"slice": {"value": {"_type": "UnaryOp", "operand": {"_type": "Template60"}, "op": {"_type": "USub"}}, "_type": "Index"}, "value": {"attr": "hand", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Attribute"}], "_type": "Assign"}, {"hole1": "trigger", "hole2": [{"s": "card_drawn", "_type": "Str"}, {"_type": "Name", "id": "chosen_card"}], "_type": "Template44", "hole0": {"_type": "Template64"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Excess Mana", "_type": "Str"}, {"_type": "Template76"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if len(player.hand) < 10:\n            player.hand.append(hearthbreaker.cards.minions.WorthlessImp())\n            player.hand[-1].player = player\n            player.trigger('card_drawn', chosen_card)\n"}, {"choice_history": [121, 200, "Excess", "Mana", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Excess", " ", "Mana", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 94, 112, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "10", "<EOS>", 110, 133, 173, 17, 156, 50, "hero", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 334, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 90, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Worthless", "Imp", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50, 145, 250, 53, "trigger", "<EOS>", 321, 76, 194, "card_drawn", "<EOS>", 73, 186, "chosen_card", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.0002803802490234375, -0.000118255615234375, -2.384185791015625e-06, -6.43729799776338e-06, -0.00042137171840295196, -4.6844128519296646e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0010585784912109375, -0.0024547576904296875, -3.0517578125e-05, -0.00022125244140625, -0.00252532958984375, -1.71661376953125e-05, -0.000457763671875, -0.0001049041748046875, -5.7220458984375e-06, -2.5748875486897305e-05, -8.690332469996065e-05, -0.00013422116171568632, -4.1961669921875e-05, -0.003528594970703125, -0.0038356781005859375, 0.0, -0.0005626678466796875, 0.0, -0.0013132095336914062, -7.62939453125e-06, -0.021582722663879395, 0.0, -0.0024347305297851562, -0.0005321502685546875, -9.72747802734375e-05, 0.0, -6.341929110931233e-05, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.00143337226472795, -3.814689989667386e-06, -2.8483877182006836, -0.016664505004882812, -0.7850341796875, -0.0002346038818359375, -0.00206756591796875, -0.09028315544128418, -1.9073486328125e-06, -0.0013713836669921875, -0.03434944152832031, -5.91278076171875e-05, -0.000133514404296875, -0.0042601823806762695, -3.2305310014635324e-05, -0.024901866912841797, -8.654503471916541e-05, -0.000873565673828125, -0.08118438720703125, -9.5367431640625e-05, -0.5185298919677734, 0.0, -0.0028076171875, -0.5056322813034058, -4.42257514805533e-05, -0.005870819091796875, -0.42516326904296875, -3.814697265625e-06, -0.001842498779296875, -0.0005092620849609375, -0.024488449096679688, -3.814697265625e-05, -0.0001697540283203125, 0.0, -0.5808815956115723, -8.583047019783407e-06, -1.9073486328125e-05, -0.0008640289306640625, 0.0, -0.017269134521484375, -0.05273795127868652, -4.5299530029296875e-06, -3.814697265625e-06, -0.018993377685546875, -1.9073486328125e-06, -0.12647533416748047, -0.000423431396484375, -0.011968841776251793, -0.000152587890625, -0.32318878173828125, -0.10139751434326172, -1.9073486328125e-06, -0.014787673950195312, 0.0, -0.000164031982421875, -0.007232189178466797, -2.1457672119140625e-06, -0.0037047837395220995, -1.9073486328125e-06, -3.0517578125e-05, -0.7613506317138672, -0.0003795623779296875, -0.0666656494140625, -9.5367431640625e-06, -0.001003265380859375, 0.0, -0.07917594909667969, -0.01319610420614481, 0.0, -0.06428074836730957, -5.7220458984375e-06, -0.5154757499694824, -0.14735567569732666, -0.0001850128173828125, -0.01617431640625, -7.62939453125e-06, -1.52587890625e-05, -0.0006561279296875, -9.5367431640625e-06, -0.023369789123535156, -0.0001888275146484375, -1.1444091796875e-05, 0.0, -0.0011539459228515625, -0.02141260914504528, -2.0265579223632812e-06, -0.0030984878540039062, -0.0008144378662109375, -0.0018758773803710938, -0.000598907470703125, -0.00011444091796875, -0.0006580352783203125, -4.76837158203125e-05, -1.9073486328125e-06, -0.00078582763671875, -0.000667572021484375, -5.7220458984375e-06, -0.944915771484375, -0.052596092224121094, -1.71661376953125e-05, -0.0003948211669921875, -0.0001544952392578125, -2.09808349609375e-05, -0.0033807745203375816, -3.814697265625e-06, -0.0097198486328125, -0.00016021728515625, -0.2826451063156128, -1.9073486328125e-06, -0.30446720123291016, -0.00019073486328125, -3.0517578125e-05, -5.7220458984375e-06, -0.0009307861328125, -0.00264894962310791, -5.7220458984375e-06], "score": -10.00203948069975, "model_output": {"hole4": "player", "hole0": "ExcessMana", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 10, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"test": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}, "body": [{"test": {"ops": [{"_type": "Lt"}], "comparators": [{"_type": "Num", "n": 10}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "hand", "value": {"_type": "Template64"}, "_type": "Attribute"}]}}, "body": [{"hole1": "append", "hole2": [{"hole1": "WorthlessImp", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}], "_type": "Template44", "hole0": {"attr": "hand", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"value": {"_type": "Template64"}, "targets": [{"attr": "player", "value": {"slice": {"value": {"_type": "UnaryOp", "operand": {"_type": "Template60"}, "op": {"_type": "USub"}}, "_type": "Index"}, "value": {"attr": "hand", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Attribute"}], "_type": "Assign"}, {"hole1": "trigger", "hole2": [{"s": "card_drawn", "_type": "Str"}, {"_type": "Name", "id": "chosen_card"}], "_type": "Template44", "hole0": {"_type": "Template68"}}], "_type": "If"}], "_type": "If"}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Excess Mana", "_type": "Str"}, {"_type": "Template76"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(10), self)\n        if player.hero:\n            if len(player.hand) < 10:\n                player.hand.append(hearthbreaker.cards.minions.WorthlessImp())\n                player.hand[-1].player = player\n                self.trigger('card_drawn', chosen_card)\n        player.draw()\n"}], "index": 29}
{"beams": [{"choice_history": [120, 185, 333, 129, 165, "Execute", "<EOS>", 320, 108, 333, 136, 197, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 16, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-0.007720947265625, -4.1961669921875e-05, -4.1961669921875e-05, -0.000507354736328125, -7.62939453125e-05, -0.00013982271775603294, -0.00020823888189624995, -1.1444091796875e-05, -0.001678466796875, -4.9591064453125e-05, -0.0025424957275390625, -0.00041961669921875, -1.5974017514963634e-05, -3.313969500595704e-05, -3.528526576701552e-05, 0.0, -0.013782978057861328, -1.9073486328125e-06, -0.0009876489639282227, 0.0, -0.0004173516936134547, 0.0, -0.0012331008911132812, -0.0319671630859375, 0.0, -0.0027812719345092773, -2.86102294921875e-05, -0.005340576171875, -0.00025177001953125, -0.0002079010009765625, -0.000156402587890625, -0.000934123934712261, 0.0, -0.000606536865234375, -1.71661376953125e-05, -5.14984130859375e-05, -0.00063323974609375, -0.000865936279296875, -0.0001239776611328125, -0.028446197509765625, -3.814697265625e-06, -0.0017709732055664062, -1.9073486328125e-06, -0.0043506622314453125, -5.7220458984375e-06, -0.0005012750625610352, -1.9073486328125e-06, -0.0006084442138671875, -0.013330459594726562, -8.96453857421875e-05, -0.007938385009765625, -3.24249267578125e-05, -0.000125885009765625, 0.0, -0.0004062652587890625, -1.9073486328125e-05, -0.0013504024827852845, -1.33514404296875e-05, -0.0029973983764648438, -0.0009613037109375, -0.00020599365234375, -1.9073486328125e-06, -0.0006875991821289062, -1.9073486328125e-06, -0.002504110336303711, -0.0002633333206176758, -0.0008144378662109375, -4.57763671875e-05, -0.00031280517578125, 0.0, -0.000354766845703125, -0.000316619873046875, -0.000347137451171875, -3.4332275390625e-05, -0.0005283355712890625, -0.0001735687255859375, -0.0013834844576194882, -2.288818359375e-05, -0.0001201629638671875, -0.0014562606811523438, -2.86102294921875e-05], "score": -0.1464712914694246, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "NotEq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Execute", "hole7": "filter_func", "hole6": "find_enemy_minion_spell_target", "hole1": 1, "hole2": "WARRIOR", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Execute"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Execute", "<EOS>", 320, 108, 333, 136, 197, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 16, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-0.007720947265625, -4.1961669921875e-05, -4.1961669921875e-05, -0.000507354736328125, -7.62939453125e-05, -0.00013982271775603294, -0.00020823888189624995, -1.1444091796875e-05, -0.001678466796875, -4.9591064453125e-05, -0.0025424957275390625, -0.00041961669921875, -1.5974017514963634e-05, -3.313969500595704e-05, -3.528526576701552e-05, 0.0, -0.013782978057861328, -1.9073486328125e-06, -0.0009876489639282227, 0.0, -0.0004173516936134547, 0.0, -0.0012331008911132812, -4.0859055519104, -3.814697265625e-06, -0.0023080110549926758, -4.00543212890625e-05, -0.006443977355957031, -0.0002613067626953125, -0.000225067138671875, -0.0001583099365234375, -0.0009316205396316946, 0.0, -0.00058746337890625, -1.71661376953125e-05, -5.14984130859375e-05, -0.000629425048828125, -0.000873565673828125, -0.0001239776611328125, -0.029059410095214844, -3.814697265625e-06, -0.0018100738525390625, -1.9073486328125e-06, -0.0043544769287109375, -5.7220458984375e-06, -0.0004984140396118164, -1.9073486328125e-06, -0.000606536865234375, -0.013324737548828125, -8.7738037109375e-05, -0.007904052734375, -3.24249267578125e-05, -0.000125885009765625, 0.0, -0.0004062652587890625, -1.9073486328125e-05, -0.0013505216920748353, -1.33514404296875e-05, -0.0030078887939453125, -0.000965118408203125, -0.0002040863037109375, -1.9073486328125e-06, -0.0006875991821289062, -1.9073486328125e-06, -0.0024993419647216797, -0.00026237964630126953, -0.00081634521484375, -4.57763671875e-05, -0.00031280517578125, 0.0, -0.000354766845703125, -0.000316619873046875, -0.000347137451171875, -3.4332275390625e-05, -0.0005283355712890625, -0.0001735687255859375, -0.0013834844576194882, -2.288818359375e-05, -0.0001201629638671875, -0.0014562606811523438, -2.86102294921875e-05], "score": -4.201684027599185, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "NotEq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Execute", "hole7": "filter_func", "hole6": "find_minion_spell_target", "hole1": 1, "hole2": "WARRIOR", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Execute"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Execute", "<EOS>", 320, 108, 333, 136, 197, "Execute", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 16, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-0.007720947265625, -4.1961669921875e-05, -4.1961669921875e-05, -0.000507354736328125, -7.62939453125e-05, -0.00013982271775603294, -0.00020823888189624995, -1.1444091796875e-05, -0.001678466796875, -4.9591064453125e-05, -0.0025424957275390625, -0.00041961669921875, -1.5974017514963634e-05, -3.313969500595704e-05, -3.528526576701552e-05, 0.0, -4.692756175994873, -3.814697265625e-06, -0.0005936622619628906, 0.0, -0.0006198883056640625, 0.0, -0.001171112060546875, -0.033226966857910156, 0.0, -0.0025800466537475586, -2.86102294921875e-05, -0.005141258239746094, -0.0002574920654296875, -0.0002117156982421875, -0.0001678466796875, -0.0009865759639069438, 0.0, -0.0005950927734375, -1.71661376953125e-05, -5.14984130859375e-05, -0.0006237030029296875, -0.0008792877197265625, -0.0001220703125, -0.028326034545898438, -3.814697265625e-06, -0.0017766952514648438, -1.9073486328125e-06, -0.004349708557128906, -5.7220458984375e-06, -0.0005031824111938477, -1.9073486328125e-06, -0.0006160736083984375, -0.013330459594726562, -8.7738037109375e-05, -0.007923126220703125, -3.4332275390625e-05, -0.0001239776611328125, 0.0, -0.00040435791015625, -1.9073486328125e-05, -0.0013521906221285462, -1.33514404296875e-05, -0.00298309326171875, -0.000965118408203125, -0.00020599365234375, -1.9073486328125e-06, -0.0006875991821289062, -1.9073486328125e-06, -0.0024993419647216797, -0.0002633333206176758, -0.0008182525634765625, -4.57763671875e-05, -0.00031280517578125, 0.0, -0.000354766845703125, -0.000316619873046875, -0.000347137451171875, -3.4332275390625e-05, -0.0005283355712890625, -0.0001735687255859375, -0.0013832461554557085, -2.288818359375e-05, -0.0001201629638671875, -0.0014553070068359375, -2.86102294921875e-05], "score": -4.825980335250279, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "NotEq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Execute", "hole7": "filter_func", "hole6": "find_enemy_minion_spell_target", "hole1": 1, "hole2": "ROGUE", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Execute"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Execute", "<EOS>", 320, 108, 333, 136, 197, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 37, 249, 25, 186, "target", "<EOS>", "calculate_attack", "<EOS>", 317, 15, 320, 104, 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-0.007720947265625, -4.1961669921875e-05, -4.1961669921875e-05, -0.000507354736328125, -7.62939453125e-05, -0.00013982271775603294, -0.00020823888189624995, -1.1444091796875e-05, -0.001678466796875, -4.9591064453125e-05, -0.0025424957275390625, -0.00041961669921875, -1.5974017514963634e-05, -3.313969500595704e-05, -3.528526576701552e-05, 0.0, -0.013782978057861328, -1.9073486328125e-06, -0.0009876489639282227, 0.0, -0.0004173516936134547, 0.0, -0.0012331008911132812, -0.0319671630859375, 0.0, -0.0027812719345092773, -2.86102294921875e-05, -0.005340576171875, -0.00025177001953125, -0.0002079010009765625, -0.000156402587890625, -0.000934123934712261, 0.0, -0.000606536865234375, -1.71661376953125e-05, -5.14984130859375e-05, -0.00063323974609375, -0.000865936279296875, -0.0001239776611328125, -3.591339111328125, -3.0517578125e-05, -0.00040435791015625, -1.9073486328125e-06, -8.106231689453125e-05, 0.0, -0.06431197375059128, 0.0, -0.00038909912109375, -0.9929485321044922, -2.6702880859375e-05, -0.069183349609375, -0.06635284423828125, -0.0001583099365234375, -0.000232696533203125, -1.9073486328125e-06, -0.00031185150146484375, -3.814697265625e-06, -0.007423758506774902, -9.918212890625e-05, -0.006920814514160156, -0.000308990478515625, -0.0005054473876953125, 0.0, -0.0002536773681640625, -0.0001926422119140625, -0.0004138946533203125, -4.00543212890625e-05, -0.000377655029296875, -0.0002117156982421875, -0.0013293448137119412, -2.09808349609375e-05, -0.0001239776611328125, -0.0014219284057617188, -1.9073486328125e-05], "score": -4.879352930971436, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "LtE"}], "comparators": [{"_type": "Template61"}], "_type": "Compare", "left": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Execute", "hole7": "filter_func", "hole6": "find_enemy_minion_spell_target", "hole1": 1, "hole2": "WARRIOR", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Execute"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.calculate_attack() <= 3 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Execute", "<EOS>", 320, 108, 333, 136, 197, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "<UNK>", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 16, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-0.007720947265625, -4.1961669921875e-05, -4.1961669921875e-05, -0.000507354736328125, -7.62939453125e-05, -0.00013982271775603294, -0.00020823888189624995, -1.1444091796875e-05, -0.001678466796875, -4.9591064453125e-05, -0.0025424957275390625, -0.00041961669921875, -1.5974017514963634e-05, -3.313969500595704e-05, -3.528526576701552e-05, 0.0, -0.013782978057861328, -1.9073486328125e-06, -0.0009876489639282227, 0.0, -0.0004173516936134547, 0.0, -0.0012331008911132812, -4.894766330718994, -4.9591064453125e-05, -0.0036852359771728516, -2.288818359375e-05, -0.006554603576660156, -0.0003223419189453125, -0.000209808349609375, -0.0001659393310546875, -0.000980973127298057, 0.0, -0.0006103515625, -1.9073486328125e-05, -4.76837158203125e-05, -0.00067901611328125, -0.0008754730224609375, -0.0001163482666015625, -0.026582717895507812, -3.814697265625e-06, -0.00177764892578125, -1.9073486328125e-06, -0.004215240478515625, -5.7220458984375e-06, -0.0005012750625610352, -1.9073486328125e-06, -0.0006256103515625, -0.013349533081054688, -8.58306884765625e-05, -0.007863044738769531, -3.4332275390625e-05, -0.000125885009765625, 0.0, -0.000400543212890625, -1.9073486328125e-05, -0.001350640901364386, -1.33514404296875e-05, -0.0029420852661132812, -0.000949859619140625, -0.0002040863037109375, -1.9073486328125e-06, -0.0006799697875976562, -1.9073486328125e-06, -0.002508878707885742, -0.0002595186233520508, -0.0008144378662109375, -4.38690185546875e-05, -0.0003147125244140625, 0.0, -0.000354766845703125, -0.000316619873046875, -0.0003452301025390625, -3.4332275390625e-05, -0.000530242919921875, -0.0001735687255859375, -0.001385868526995182, -2.288818359375e-05, -0.0001201629638671875, -0.00145721435546875, -2.86102294921875e-05], "score": -5.009500056019533, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "NotEq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Execute", "hole7": "filter_func", "hole6": "<UNK>", "hole1": 1, "hole2": "WARRIOR", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Execute"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.<UNK>, filter_func=\n            lambda target: target.health != target.calculate_max_health() and\n            target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Execute", "<EOS>", 320, 108, 333, 136, 197, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 37, 249, 25, 186, "target", "<EOS>", "calculate_attack", "<EOS>", 317, 16, 320, 104, 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-0.007720947265625, -4.1961669921875e-05, -4.1961669921875e-05, -0.000507354736328125, -7.62939453125e-05, -0.00013982271775603294, -0.00020823888189624995, -1.1444091796875e-05, -0.001678466796875, -4.9591064453125e-05, -0.0025424957275390625, -0.00041961669921875, -1.5974017514963634e-05, -3.313969500595704e-05, -3.528526576701552e-05, 0.0, -0.013782978057861328, -1.9073486328125e-06, -0.0009876489639282227, 0.0, -0.0004173516936134547, 0.0, -0.0012331008911132812, -0.0319671630859375, 0.0, -0.0027812719345092773, -2.86102294921875e-05, -0.005340576171875, -0.00025177001953125, -0.0002079010009765625, -0.000156402587890625, -0.000934123934712261, 0.0, -0.000606536865234375, -1.71661376953125e-05, -5.14984130859375e-05, -0.00063323974609375, -0.000865936279296875, -0.0001239776611328125, -3.591339111328125, -3.0517578125e-05, -0.00040435791015625, -1.9073486328125e-06, -8.106231689453125e-05, 0.0, -0.06431197375059128, 0.0, -0.00038909912109375, -0.8668813705444336, -4.1961669921875e-05, -0.8556098937988281, -0.03763008117675781, -5.340576171875e-05, -0.000637054443359375, -3.814697265625e-06, -0.0002155303955078125, -3.814697265625e-06, -0.057254910469055176, -4.38690185546875e-05, -0.00647735595703125, -0.000446319580078125, -0.0003910064697265625, 0.0, -0.000263214111328125, -0.000240325927734375, -0.000377655029296875, -4.38690185546875e-05, -0.000354766845703125, -0.000217437744140625, -0.0013793983962386847, -2.09808349609375e-05, -0.000125885009765625, -0.001495361328125, -1.9073486328125e-05], "score": -5.560698141032844, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "NotEq"}], "comparators": [{"_type": "Template61"}], "_type": "Compare", "left": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Execute", "hole7": "filter_func", "hole6": "find_enemy_minion_spell_target", "hole1": 1, "hole2": "WARRIOR", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Execute"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.calculate_attack() != 3 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Execute", "<EOS>", 320, 108, 333, 136, 197, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 37, 249, 25, 186, "target", "<EOS>", "calculate_attack", "<EOS>", 317, 16, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-0.007720947265625, -4.1961669921875e-05, -4.1961669921875e-05, -0.000507354736328125, -7.62939453125e-05, -0.00013982271775603294, -0.00020823888189624995, -1.1444091796875e-05, -0.001678466796875, -4.9591064453125e-05, -0.0025424957275390625, -0.00041961669921875, -1.5974017514963634e-05, -3.313969500595704e-05, -3.528526576701552e-05, 0.0, -0.013782978057861328, -1.9073486328125e-06, -0.0009876489639282227, 0.0, -0.0004173516936134547, 0.0, -0.0012331008911132812, -0.0319671630859375, 0.0, -0.0027812719345092773, -2.86102294921875e-05, -0.005340576171875, -0.00025177001953125, -0.0002079010009765625, -0.000156402587890625, -0.000934123934712261, 0.0, -0.000606536865234375, -1.71661376953125e-05, -5.14984130859375e-05, -0.00063323974609375, -0.000865936279296875, -0.0001239776611328125, -3.591339111328125, -3.0517578125e-05, -0.00040435791015625, -1.9073486328125e-06, -8.106231689453125e-05, 0.0, -0.06431197375059128, 0.0, -0.00038909912109375, -0.8668813705444336, -4.1961669921875e-05, -0.9963951110839844, -1.9073486328125e-05, -0.0003662109375, -1.9073486328125e-06, -0.00018978118896484375, -7.62939453125e-06, -0.004376053810119629, -9.5367431640625e-06, -0.00481414794921875, -0.0010852813720703125, -0.000370025634765625, -1.9073486328125e-06, -0.0010356903076171875, -1.9073486328125e-06, -0.0030565261840820312, -0.00027573108673095703, -0.001556396484375, -4.76837158203125e-05, -0.000423431396484375, -1.9073486328125e-06, -0.0003528594970703125, -0.000286102294921875, -0.00035858154296875, -3.24249267578125e-05, -0.0001392364501953125, -0.000659942626953125, -0.0014018455985933542, -1.9073486328125e-05, -0.000110626220703125, -0.0022640228271484375, -2.47955322265625e-05], "score": -5.617078568009674, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "NotEq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Execute", "hole7": "filter_func", "hole6": "find_enemy_minion_spell_target", "hole1": 1, "hole2": "WARRIOR", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Execute"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.calculate_attack() != target.calculate_max_health() and\n            target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Execute", "<EOS>", 320, 108, 333, 136, 197, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_friendly_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 16, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-0.007720947265625, -4.1961669921875e-05, -4.1961669921875e-05, -0.000507354736328125, -7.62939453125e-05, -0.00013982271775603294, -0.00020823888189624995, -1.1444091796875e-05, -0.001678466796875, -4.9591064453125e-05, -0.0025424957275390625, -0.00041961669921875, -1.5974017514963634e-05, -3.313969500595704e-05, -3.528526576701552e-05, 0.0, -0.013782978057861328, -1.9073486328125e-06, -0.0009876489639282227, 0.0, -0.0004173516936134547, 0.0, -0.0012331008911132812, -5.65606164932251, -5.340576171875e-05, -0.002508401870727539, -3.814697265625e-05, -0.00638580322265625, -0.000247955322265625, -0.0001926422119140625, -0.00016021728515625, -0.0009726285352371633, 0.0, -0.0005817413330078125, -1.71661376953125e-05, -4.9591064453125e-05, -0.0006046295166015625, -0.00087738037109375, -0.0001201629638671875, -0.028639793395996094, -3.814697265625e-06, -0.0018329620361328125, -1.9073486328125e-06, -0.004456520080566406, -5.7220458984375e-06, -0.0005087852478027344, -1.9073486328125e-06, -0.0006237030029296875, -0.013323783874511719, -8.58306884765625e-05, -0.007960319519042969, -3.24249267578125e-05, -0.0001277923583984375, 0.0, -0.00040435791015625, -1.9073486328125e-05, -0.0013488527620211244, -1.33514404296875e-05, -0.0029773712158203125, -0.000965118408203125, -0.0002040863037109375, -1.9073486328125e-06, -0.0006866455078125, -1.9073486328125e-06, -0.0025069713592529297, -0.00026237964630126953, -0.0008144378662109375, -4.57763671875e-05, -0.00031280517578125, 0.0, -0.000354766845703125, -0.000316619873046875, -0.000347137451171875, -3.4332275390625e-05, -0.0005283355712890625, -0.0001735687255859375, -0.0013832461554557085, -2.288818359375e-05, -0.0001201629638671875, -0.0014562606811523438, -2.86102294921875e-05], "score": -5.771753340764917, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "NotEq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Execute", "hole7": "filter_func", "hole6": "find_friendly_minion_spell_target", "hole1": 1, "hole2": "WARRIOR", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Execute"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target, filter_func=lambda target: \n            target.health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Execute", "<EOS>", 320, 108, 333, 136, 197, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "health", "<EOS>", 317, 16, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-0.007720947265625, -4.1961669921875e-05, -4.1961669921875e-05, -0.000507354736328125, -7.62939453125e-05, -0.00013982271775603294, -0.00020823888189624995, -1.1444091796875e-05, -0.001678466796875, -4.9591064453125e-05, -0.0025424957275390625, -0.00041961669921875, -1.5974017514963634e-05, -3.313969500595704e-05, -3.528526576701552e-05, 0.0, -0.013782978057861328, -1.9073486328125e-06, -0.0009876489639282227, 0.0, -0.0004173516936134547, 0.0, -0.0012331008911132812, -0.0319671630859375, 0.0, -0.0027812719345092773, -2.86102294921875e-05, -0.005340576171875, -0.00025177001953125, -0.0002079010009765625, -0.000156402587890625, -0.000934123934712261, 0.0, -0.000606536865234375, -1.71661376953125e-05, -5.14984130859375e-05, -0.00063323974609375, -0.000865936279296875, -0.0001239776611328125, -0.028446197509765625, -3.814697265625e-06, -0.0017709732055664062, -1.9073486328125e-06, -6.081065654754639, 0.0, -0.21369850635528564, -3.814697265625e-06, -0.000240325927734375, -0.018941879272460938, -0.0001430511474609375, -0.010423660278320312, -1.52587890625e-05, -6.866455078125e-05, -1.9073486328125e-06, -0.0003299713134765625, -2.09808349609375e-05, -0.001678585889749229, -1.33514404296875e-05, -0.0025510787963867188, -0.0008258819580078125, -0.000194549560546875, -1.9073486328125e-06, -0.000820159912109375, -1.9073486328125e-06, -0.002339601516723633, -0.00026702880859375, -0.0009613037109375, -4.1961669921875e-05, -0.0002841949462890625, 0.0, -0.0003643035888671875, -0.0004177093505859375, -0.000347137451171875, -3.4332275390625e-05, -0.0005817413330078125, -0.0001678466796875, -0.0014137650141492486, -2.288818359375e-05, -0.0001201629638671875, -0.0014429092407226562, -3.0517578125e-05], "score": -6.444013149864986, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "NotEq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Execute", "hole7": "filter_func", "hole6": "find_enemy_minion_spell_target", "hole1": 1, "hole2": "WARRIOR", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Execute"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            MINION_TYPE.health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Execute", "<EOS>", 320, 108, 333, 136, 197, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 8, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-0.007720947265625, -4.1961669921875e-05, -4.1961669921875e-05, -0.000507354736328125, -7.62939453125e-05, -0.00013982271775603294, -0.00020823888189624995, -1.1444091796875e-05, -0.001678466796875, -4.9591064453125e-05, -0.0025424957275390625, -0.00041961669921875, -1.5974017514963634e-05, -3.313969500595704e-05, -3.528526576701552e-05, 0.0, -0.013782978057861328, -1.9073486328125e-06, -0.0009876489639282227, 0.0, -0.0004173516936134547, 0.0, -0.0012331008911132812, -0.0319671630859375, 0.0, -0.0027812719345092773, -2.86102294921875e-05, -0.005340576171875, -0.00025177001953125, -0.0002079010009765625, -0.000156402587890625, -0.000934123934712261, 0.0, -0.000606536865234375, -1.71661376953125e-05, -5.14984130859375e-05, -0.00063323974609375, -0.000865936279296875, -0.0001239776611328125, -0.028446197509765625, -3.814697265625e-06, -0.0017709732055664062, -1.9073486328125e-06, -0.0043506622314453125, -5.7220458984375e-06, -0.0005012750625610352, -1.9073486328125e-06, -0.0006084442138671875, -6.487568378448486, -2.47955322265625e-05, -0.04073524475097656, -2.09808349609375e-05, -7.82012939453125e-05, -1.9073486328125e-06, -0.0007905960083007812, -1.33514404296875e-05, -0.0014460085658356547, -9.5367431640625e-06, -0.005295753479003906, -0.0011138916015625, -0.00016021728515625, -1.9073486328125e-06, -0.0007734298706054688, -1.9073486328125e-06, -0.0022554397583007812, -0.00018799304962158203, -0.0009670257568359375, -4.57763671875e-05, -0.0003185272216796875, 0.0, -0.0003414154052734375, -0.0003814697265625, -0.000347137451171875, -3.4332275390625e-05, -0.0005359649658203125, -0.000171661376953125, -0.0014302115887403488, -2.47955322265625e-05, -0.0001239776611328125, -0.0014781951904296875, -2.86102294921875e-05], "score": -6.656311300388552, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "Eq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Execute", "hole7": "filter_func", "hole6": "find_enemy_minion_spell_target", "hole1": 1, "hole2": "WARRIOR", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Execute"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.health == target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [121, 200, "Execute", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Execute", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110], "score_history": [-5.783254623413086, -0.0018596649169921875, -9.894321920000948e-06, -6.556507287314162e-06, -3.576096787583083e-07, -4.589557647705078e-05, -3.4809112548828125e-05, -0.000732421875, -0.0001125335693359375, -1.9073486328125e-06, -2.86102294921875e-05, -5.340576171875e-05, -3.0517578125e-05, -8.7738037109375e-05, -1.9073486328125e-05, -0.000156402587890625, -2.8610211302293465e-06, -2.1457672119140625e-06, -0.37723636627197266, -0.0006084442138671875, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.0004698038101196289, -3.814697265625e-06, -0.0040160417556762695, 0.0, -0.0001354217529296875, -0.0001697540283203125, -0.0039844512939453125, -4.00543212890625e-05, -0.0002193450927734375, 0.0, -0.017850875854492188, -7.82012939453125e-05, -0.0008983612060546875, -0.2370462417602539, -5.841255187988281e-06, -5.221366882324219e-05, 0.0, -3.588198160286993e-05, 0.0, -7.62939453125e-06, -0.00048828125, -4.00543212890625e-05, -1.1444091796875e-05, 0.0, -0.0063953399658203125, -2.86102294921875e-05, -0.000362396240234375, -0.000148773193359375, -0.00382232666015625, -0.21115875244140625, -2.288818359375e-05, -0.00020599365234375, -0.007389068603515625], "score": -6.659398794086883, "model_output": {"hole4": "player", "hole0": "Execute", "hole6": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Execute", "_type": "Str"}, {"_type": "Template67"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Execute", "<EOS>", 320, 108, 333, 136, 197, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 15, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-0.007720947265625, -4.1961669921875e-05, -4.1961669921875e-05, -0.000507354736328125, -7.62939453125e-05, -0.00013982271775603294, -0.00020823888189624995, -1.1444091796875e-05, -0.001678466796875, -4.9591064453125e-05, -0.0025424957275390625, -0.00041961669921875, -1.5974017514963634e-05, -3.313969500595704e-05, -3.528526576701552e-05, 0.0, -0.013782978057861328, -1.9073486328125e-06, -0.0009876489639282227, 0.0, -0.0004173516936134547, 0.0, -0.0012331008911132812, -0.0319671630859375, 0.0, -0.0027812719345092773, -2.86102294921875e-05, -0.005340576171875, -0.00025177001953125, -0.0002079010009765625, -0.000156402587890625, -0.000934123934712261, 0.0, -0.000606536865234375, -1.71661376953125e-05, -5.14984130859375e-05, -0.00063323974609375, -0.000865936279296875, -0.0001239776611328125, -0.028446197509765625, -3.814697265625e-06, -0.0017709732055664062, -1.9073486328125e-06, -0.0043506622314453125, -5.7220458984375e-06, -0.0005012750625610352, -1.9073486328125e-06, -0.0006084442138671875, -5.955598831176758, -3.62396240234375e-05, -0.6846380233764648, -8.58306884765625e-05, -8.392333984375e-05, -1.9073486328125e-06, -0.0005168914794921875, -1.52587890625e-05, -0.0014958380488678813, -1.71661376953125e-05, -0.003757476806640625, -0.0009670257568359375, -0.0002307891845703125, -1.9073486328125e-06, -0.0009613037109375, -1.9073486328125e-06, -0.002324223518371582, -0.00028717517852783203, -0.0009098052978515625, -4.38690185546875e-05, -0.0003147125244140625, 0.0, -0.000354766845703125, -0.0002956390380859375, -0.000362396240234375, -3.24249267578125e-05, -0.0005283355712890625, -0.0001735687255859375, -0.0013468893012031913, -2.288818359375e-05, -0.0001201629638671875, -0.0014104843139648438, -3.0517578125e-05], "score": -6.7665708383228775, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "LtE"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Execute", "hole7": "filter_func", "hole6": "find_enemy_minion_spell_target", "hole1": 1, "hole2": "WARRIOR", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Execute"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.health <= target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Execute", "<EOS>", 320, 108, 333, 136, 197, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 16, 320, 104, 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-0.007720947265625, -4.1961669921875e-05, -4.1961669921875e-05, -0.000507354736328125, -7.62939453125e-05, -0.00013982271775603294, -0.00020823888189624995, -1.1444091796875e-05, -0.001678466796875, -4.9591064453125e-05, -0.0025424957275390625, -0.00041961669921875, -1.5974017514963634e-05, -3.313969500595704e-05, -3.528526576701552e-05, 0.0, -0.013782978057861328, -1.9073486328125e-06, -0.0009876489639282227, 0.0, -0.0004173516936134547, 0.0, -0.0012331008911132812, -0.0319671630859375, 0.0, -0.0027812719345092773, -2.86102294921875e-05, -0.005340576171875, -0.00025177001953125, -0.0002079010009765625, -0.000156402587890625, -0.000934123934712261, 0.0, -0.000606536865234375, -1.71661376953125e-05, -5.14984130859375e-05, -0.00063323974609375, -0.000865936279296875, -0.0001239776611328125, -0.028446197509765625, -3.814697265625e-06, -0.0017709732055664062, -1.9073486328125e-06, -0.0043506622314453125, -5.7220458984375e-06, -0.0005012750625610352, -1.9073486328125e-06, -0.0006084442138671875, -0.013330459594726562, -8.96453857421875e-05, -6.2633819580078125, -0.016373634338378906, -8.392333984375e-05, -0.0005245208740234375, -1.9073486328125e-06, -0.000392913818359375, -3.814697265625e-06, -0.39271605014801025, -5.14984130859375e-05, -0.002277374267578125, -0.000293731689453125, -0.00019073486328125, 0.0, -0.0002727508544921875, -0.0002918243408203125, -0.0003871917724609375, -4.38690185546875e-05, -0.0004634857177734375, -0.000186920166015625, -0.0013686749152839184, -2.6702880859375e-05, -0.000125885009765625, -0.0014543533325195312, -2.09808349609375e-05], "score": -6.803957464560881, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "NotEq"}], "comparators": [{"_type": "Template61"}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"hole1": "spell_targetable", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Execute", "hole7": "filter_func", "hole6": "find_enemy_minion_spell_target", "hole1": 1, "hole2": "WARRIOR", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Execute"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.health != 3 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Execute", "<EOS>", 320, 108, 333, 136, 197, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 16, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 16, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 147], "score_history": [-0.007720947265625, -4.1961669921875e-05, -4.1961669921875e-05, -0.000507354736328125, -7.62939453125e-05, -0.00013982271775603294, -0.00020823888189624995, -1.1444091796875e-05, -0.001678466796875, -4.9591064453125e-05, -0.0025424957275390625, -0.00041961669921875, -1.5974017514963634e-05, -3.313969500595704e-05, -3.528526576701552e-05, 0.0, -0.013782978057861328, -1.9073486328125e-06, -0.0009876489639282227, 0.0, -0.0004173516936134547, 0.0, -0.0012331008911132812, -0.0319671630859375, 0.0, -0.0027812719345092773, -2.86102294921875e-05, -0.005340576171875, -0.00025177001953125, -0.0002079010009765625, -0.000156402587890625, -0.000934123934712261, 0.0, -0.000606536865234375, -1.71661376953125e-05, -5.14984130859375e-05, -0.00063323974609375, -0.000865936279296875, -0.0001239776611328125, -0.028446197509765625, -3.814697265625e-06, -0.0017709732055664062, -1.9073486328125e-06, -0.0043506622314453125, -5.7220458984375e-06, -0.0005012750625610352, -1.9073486328125e-06, -0.0006084442138671875, -0.013330459594726562, -8.96453857421875e-05, -0.007938385009765625, -3.24249267578125e-05, -0.000125885009765625, 0.0, -0.0004062652587890625, -1.9073486328125e-05, -0.0013504024827852845, -1.33514404296875e-05, -6.15700626373291, -6.866455078125e-05, -0.4918956756591797, 0.0, -0.000637054443359375, 0.0, -0.009044766426086426, -1.9073486328125e-06, -0.015957947820425034, -1.9073486328125e-06, -0.0020389556884765625, -0.03139781951904297, -0.0014438629150390625, -0.006459236145019531, -2.6702880859375e-05, -4.9591064453125e-05, -1.9073486328125e-06, -0.00029468536376953125, -1.52587890625e-05, -0.0010118483332917094, -1.33514404296875e-05, -0.0018444061279296875, -0.0020465850830078125, -0.0003986358642578125, 0.0, -0.000202178955078125, -0.000293731689453125, -0.0003757476806640625, -5.53131103515625e-05, -0.0004520416259765625, -0.0001220703125, -0.0015994729474186897, -1.9073486328125e-05, -0.0001354217529296875, -0.0018463134765625, -1.9073486328125e-05], "score": -6.859686023943141, "model_output": {"body": [{"body": [{"hole4": "target_func", "hole8": {"body": {"values": [{"ops": [{"_type": "NotEq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, {"ops": [{"_type": "NotEq"}], "comparators": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Name", "id": "target"}}], "_type": "Compare", "left": {"attr": "health", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "target"}}, "hole0": "Execute", "hole7": "filter_func", "hole6": "find_enemy_minion_spell_target", "hole1": 1, "hole2": "WARRIOR", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Template50"}}, {"body": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "FunctionDef", "name": "use", "args": {"_type": "Template17"}}], "bases": [{"_type": "Template65"}], "_type": "ClassDef", "name": "Execute"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.health != target.calculate_max_health() and target.\n            health != target.calculate_max_health())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [120, 185, 331], "score_history": [-0.007720947265625, -4.1961669921875e-05, -20.69721794128418], "score": -20.704980850219727, "model_output": {"body": [], "_type": "Module"}, "inferred_code": ""}], "index": 30}
{"beams": [{"choice_history": [121, 200, "Fan", "Of", "Knives", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001087188720703125, -7.843663479434326e-05, -0.00027060447609983385, -0.00026020052609965205, -7.748602001811378e-06, -4.040077328681946e-06, -3.814697265625e-06, -4.780292510986328e-05, -7.05718994140625e-05, -0.0005893707275390625, -2.6702880859375e-05, -1.1920928244535389e-07, -0.000377655029296875, -2.4557000870117918e-05, -4.38690185546875e-05, -6.46108528599143e-05, 0.0, -1.7881369558381266e-06, 0.0, -0.009063830599188805, 0.0, -3.8742946344427764e-05, 0.0, -0.0017167559126392007, 0.0, -0.000118255615234375, -6.4849853515625e-05, -1.52587890625e-05, -2.5153151000267826e-05, 0.0, -0.00054168701171875, -0.00038909912109375, -0.000400543212890625, -1.33514404296875e-05, -1.1444091796875e-05, -2.09808349609375e-05, -0.00015329872258007526, -2.8609820219571702e-05, -0.007846832275390625, -0.0004482269287109375, -0.00012969970703125, -5.7220458984375e-06, -5.7220458984375e-05, 0.0, -0.0011355876922607422, -1.1444091796875e-05, -0.00013673299690708518, 0.0, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0005435943603515625, 0.0, -0.0001544952392578125, 0.0, -4.76837158203125e-05, -3.576278118089249e-07, -0.0077735185623168945, 0.0, -0.00021517270943149924, -7.62939453125e-06, -4.1961669921875e-05, -0.0001430511474609375, 0.0, -8.0108642578125e-05, 0.0, -0.0003265139530412853, -7.819823804311454e-05, -0.00017546933668199927, -1.1920928244535389e-07, -1.52587890625e-05, -0.0001583099365234375, -0.000148773193359375, -3.814697265625e-06, -0.0001624783908482641, -1.6808447981020436e-05, -0.07606983184814453, -4.768370445162873e-07, -8.58306884765625e-05, -0.00057220458984375, -5.7220458984375e-06, -0.0005245208740234375, -0.0003948211669921875, -0.00011444091796875, -0.0002448558807373047, -9.775161743164062e-06], "score": -0.11256891828740834, "model_output": {"hole4": "player", "hole0": "FanOfKnives", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "ROGUE", "_type": "Template14", "hole0": "Fan of Knives"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Fan", "Of", "Knives", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "Draw", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001087188720703125, -7.843663479434326e-05, -0.00027060447609983385, -0.00026020052609965205, -7.748602001811378e-06, -4.040077328681946e-06, -3.814697265625e-06, -4.780292510986328e-05, -7.05718994140625e-05, -0.0005893707275390625, -2.6702880859375e-05, -1.1920928244535389e-07, -0.000377655029296875, -2.4557000870117918e-05, -4.38690185546875e-05, -6.46108528599143e-05, 0.0, -1.7881369558381266e-06, 0.0, -0.009063830599188805, 0.0, -3.8742946344427764e-05, 0.0, -0.0017167559126392007, 0.0, -0.000118255615234375, -6.4849853515625e-05, -1.52587890625e-05, -2.5153151000267826e-05, 0.0, -0.00054168701171875, -0.00038909912109375, -0.000400543212890625, -1.33514404296875e-05, -1.1444091796875e-05, -2.09808349609375e-05, -0.00015329872258007526, -2.8609820219571702e-05, -0.007846832275390625, -0.0004482269287109375, -0.00012969970703125, -5.7220458984375e-06, -5.7220458984375e-05, 0.0, -0.0011355876922607422, -1.1444091796875e-05, -0.00013673299690708518, 0.0, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0005435943603515625, 0.0, -0.0001544952392578125, 0.0, -4.76837158203125e-05, -3.576278118089249e-07, -0.0077735185623168945, 0.0, -0.00021517270943149924, -7.62939453125e-06, -4.1961669921875e-05, -0.0001430511474609375, 0.0, -8.0108642578125e-05, 0.0, -0.0003265139530412853, -7.819823804311454e-05, -0.00017546933668199927, -1.1920928244535389e-07, -1.52587890625e-05, -0.0001583099365234375, -0.000148773193359375, -3.814697265625e-06, -0.0001624783908482641, -1.6808447981020436e-05, -2.7005417346954346, -1.4901099348207936e-05, -5.340576171875e-05, -0.0007572174072265625, -7.62939453125e-06, -0.025625228881835938, -0.0003070831298828125, -0.0003185272216796875, -0.0003151893615722656, -1.3589859008789062e-05], "score": -2.7625009450887745, "model_output": {"hole4": "player", "hole0": "FanOfKnives", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "ROGUE", "_type": "Template14", "hole0": "Fan of Knives"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Fan", "Of", "Knives", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 25, 186, "targets", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001087188720703125, -7.843663479434326e-05, -0.00027060447609983385, -0.00026020052609965205, -7.748602001811378e-06, -4.040077328681946e-06, -3.814697265625e-06, -4.780292510986328e-05, -7.05718994140625e-05, -0.0005893707275390625, -2.6702880859375e-05, -1.1920928244535389e-07, -0.000377655029296875, -2.4557000870117918e-05, -4.38690185546875e-05, -6.46108528599143e-05, 0.0, -1.7881369558381266e-06, 0.0, -0.009063830599188805, 0.0, -3.8742946344427764e-05, 0.0, -0.0017167559126392007, 0.0, -0.000118255615234375, -6.4849853515625e-05, -1.52587890625e-05, -2.5153151000267826e-05, 0.0, -0.00054168701171875, -0.00038909912109375, -0.000400543212890625, -1.33514404296875e-05, -1.1444091796875e-05, -2.09808349609375e-05, -0.00015329872258007526, -2.8609820219571702e-05, -5.080718040466309, -1.1444091796875e-05, -0.0003312826156616211, -9.5367431640625e-06, -1.9073486328125e-05, -0.000713348388671875, -2.47955322265625e-05, -0.018159866333007812, -3.814697265625e-06, -0.0001077649139915593, -9.417526598554105e-06, -0.00459517166018486, 0.0, -0.0001430511474609375, -0.0002288818359375, -8.20159912109375e-05, -7.62939453125e-06, -0.00016497985052410513, -1.2755369425576646e-05, -0.03993237018585205, -4.768370445162873e-07, -9.72747802734375e-05, -0.0009613037109375, -5.7220458984375e-06, -0.001056671142578125, -0.00028228759765625, -0.0001125335693359375, -0.00040209287544712424, -5.841255187988281e-06], "score": -5.162808619614445, "model_output": {"hole4": "player", "hole0": "FanOfKnives", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"_type": "Name", "id": "targets"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "ROGUE", "_type": "Template14", "hole0": "Fan of Knives"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(1), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Fan", "Of", "Knives", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001087188720703125, -7.843663479434326e-05, -0.00027060447609983385, -0.00026020052609965205, -7.748602001811378e-06, -4.040077328681946e-06, -3.814697265625e-06, -4.780292510986328e-05, -7.05718994140625e-05, -0.0005893707275390625, -2.6702880859375e-05, -1.1920928244535389e-07, -0.000377655029296875, -2.4557000870117918e-05, -4.38690185546875e-05, -6.46108528599143e-05, 0.0, -1.7881369558381266e-06, 0.0, -0.009063830599188805, 0.0, -3.8742946344427764e-05, 0.0, -0.0017167559126392007, 0.0, -0.000118255615234375, -6.4849853515625e-05, -1.52587890625e-05, -2.5153151000267826e-05, 0.0, -0.00054168701171875, -0.00038909912109375, -0.000400543212890625, -1.33514404296875e-05, -1.1444091796875e-05, -2.09808349609375e-05, -0.00015329872258007526, -2.8609820219571702e-05, -0.007846832275390625, -0.0004482269287109375, -0.00012969970703125, -5.7220458984375e-06, -5.7220458984375e-05, 0.0, -0.0011355876922607422, -1.1444091796875e-05, -0.00013673299690708518, 0.0, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0005435943603515625, 0.0, -0.0001544952392578125, 0.0, -4.76837158203125e-05, -3.576278118089249e-07, -5.20103645324707, -1.9073486328125e-05, -3.123283386230469e-05, -1.9073486328125e-06, -2.47955322265625e-05, -0.006587982177734375, 0.0, -0.0001926422119140625, 0.0, -0.0005892504705116153, -6.723177648382261e-05, -0.0001260027347598225, -1.1920928244535389e-07, -1.52587890625e-05, -0.00016021728515625, -0.0001850128173828125, -3.814697265625e-06, -0.00018095361883752048, -1.6689240510459058e-05, -0.07244455814361572, -4.768370445162873e-07, -8.7738037109375e-05, -0.000545501708984375, -5.7220458984375e-06, -0.0006122589111328125, -0.0004119873046875, -0.0001010894775390625, -0.00024116039276123047, -9.775161743164062e-06], "score": -5.308898157455744, "model_output": {"hole4": "player", "hole0": "FanOfKnives", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "ROGUE", "_type": "Template14", "hole0": "Fan of Knives"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.current_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Fan", "Of", "Knives", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "$", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001087188720703125, -7.843663479434326e-05, -0.00027060447609983385, -0.00026020052609965205, -7.748602001811378e-06, -4.040077328681946e-06, -3.814697265625e-06, -4.780292510986328e-05, -7.05718994140625e-05, -0.0005893707275390625, -2.6702880859375e-05, -1.1920928244535389e-07, -0.000377655029296875, -2.4557000870117918e-05, -4.38690185546875e-05, -6.46108528599143e-05, 0.0, -1.7881369558381266e-06, 0.0, -0.009063830599188805, 0.0, -3.8742946344427764e-05, 0.0, -0.0017167559126392007, 0.0, -0.000118255615234375, -6.4849853515625e-05, -1.52587890625e-05, -2.5153151000267826e-05, 0.0, -0.00054168701171875, -0.00038909912109375, -0.000400543212890625, -1.33514404296875e-05, -1.1444091796875e-05, -2.09808349609375e-05, -0.00015329872258007526, -2.8609820219571702e-05, -0.007846832275390625, -0.0004482269287109375, -0.00012969970703125, -5.7220458984375e-06, -5.7220458984375e-05, 0.0, -0.0011355876922607422, -1.1444091796875e-05, -0.00013673299690708518, 0.0, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0005435943603515625, 0.0, -0.0001544952392578125, 0.0, -4.76837158203125e-05, -3.576278118089249e-07, -0.0077735185623168945, 0.0, -0.00021517270943149924, -7.62939453125e-06, -4.1961669921875e-05, -0.0001430511474609375, 0.0, -8.0108642578125e-05, 0.0, -0.0003265139530412853, -7.819823804311454e-05, -0.00017546933668199927, -1.1920928244535389e-07, -1.52587890625e-05, -0.0001583099365234375, -0.000148773193359375, -3.814697265625e-06, -0.0001624783908482641, -1.6808447981020436e-05, -5.764622688293457, -0.00020502197730820626, -0.0001468658447265625, -0.0005283355712890625, -3.814697265625e-06, -0.019400596618652344, -0.000377655029296875, -0.000385284423828125, -0.0007158517837524414, -7.62939453125e-06], "score": -5.820940181910643, "model_output": {"hole4": "player", "hole0": "FanOfKnives", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "ROGUE", "_type": "Template14", "hole0": "Fan of Knives"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Fan", "Of", "Knives", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001087188720703125, -7.843663479434326e-05, -0.00027060447609983385, -0.00026020052609965205, -7.748602001811378e-06, -4.040077328681946e-06, -3.814697265625e-06, -4.780292510986328e-05, -7.05718994140625e-05, -0.0005893707275390625, -2.6702880859375e-05, -1.1920928244535389e-07, -0.000377655029296875, -2.4557000870117918e-05, -4.38690185546875e-05, -6.46108528599143e-05, 0.0, -1.7881369558381266e-06, 0.0, -5.79608154296875, 0.0, -0.0009406800963915884, 0.0, -0.0057808468118309975, 0.0, -0.00017547607421875, -4.57763671875e-05, -2.09808349609375e-05, -2.8967848265892826e-05, -1.1920928244535389e-07, -0.0005779266357421875, -0.000339508056640625, -0.0004901885986328125, -1.52587890625e-05, -1.1444091796875e-05, -2.09808349609375e-05, -0.00014316632586997002, -2.52720492426306e-05, -0.008539199829101562, -0.0003681182861328125, -0.0001773834228515625, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -0.001102566602639854, -1.33514404296875e-05, -0.00013756744738202542, 0.0, -4.1961669921875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0005588531494140625, 0.0, -0.0001544952392578125, 0.0, -4.76837158203125e-05, -3.576278118089249e-07, -0.0077010393142700195, 0.0, -0.00021517270943149924, -7.62939453125e-06, -4.1961669921875e-05, -0.0001468658447265625, 0.0, -7.82012939453125e-05, 0.0, -0.00032615632517263293, -7.724463648628443e-05, -0.00017499254317954183, -1.1920928244535389e-07, -1.52587890625e-05, -0.0001583099365234375, -0.000148773193359375, -3.814697265625e-06, -0.0001621207920834422, -1.6808447981020436e-05, -0.07656216621398926, -4.768370445162873e-07, -8.58306884765625e-05, -0.00058746337890625, -5.7220458984375e-06, -0.0005168914794921875, -0.0003986358642578125, -0.00011444091796875, -0.0002466440200805664, -9.775161743164062e-06], "score": -5.905739149261684, "model_output": {"hole4": "player", "hole0": "FanOfKnives", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Fan of Knives"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Fan", "Of", "Knives", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001087188720703125, -7.843663479434326e-05, -0.00027060447609983385, -0.00026020052609965205, -7.748602001811378e-06, -4.040077328681946e-06, -3.814697265625e-06, -4.780292510986328e-05, -7.05718994140625e-05, -0.0005893707275390625, -2.6702880859375e-05, -1.1920928244535389e-07, -0.000377655029296875, -2.4557000870117918e-05, -4.38690185546875e-05, -6.46108528599143e-05, 0.0, -1.7881369558381266e-06, 0.0, -6.230282783508301, 0.0, -5.066388985142112e-05, 0.0, -0.002594580641016364, 0.0, -0.00017547607421875, -5.53131103515625e-05, -1.9073486328125e-05, -2.777575355139561e-05, -1.1920928244535389e-07, -0.0006618499755859375, -0.00030517578125, -0.001415252685546875, -1.71661376953125e-05, -9.5367431640625e-06, -2.09808349609375e-05, -0.00010764357284642756, -1.7523643691674806e-05, -0.01059722900390625, -0.000278472900390625, -0.0003719329833984375, -9.5367431640625e-06, -5.340576171875e-05, 0.0, -0.0010418890742585063, -1.52587890625e-05, -0.00013840188330505043, 0.0, -3.814697265625e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0005970001220703125, 0.0, -0.00016021728515625, 0.0, -4.38690185546875e-05, -3.576278118089249e-07, -0.0074617862701416016, 0.0, -0.00020945066353306174, -7.62939453125e-06, -4.1961669921875e-05, -0.000152587890625, 0.0, -8.0108642578125e-05, 0.0, -0.0003328320453874767, -7.581423415103927e-05, -0.00017415818001609296, -1.1920928244535389e-07, -1.52587890625e-05, -0.00016021728515625, -0.000152587890625, -3.814697265625e-06, -0.00016164398402906954, -1.6808447981020436e-05, -0.07770180702209473, -4.768370445162873e-07, -8.58306884765625e-05, -0.000637054443359375, -7.62939453125e-06, -0.000476837158203125, -0.000400543212890625, -0.0001163482666015625, -0.0002466440200805664, -9.775161743164062e-06], "score": -6.3398722833891625, "model_output": {"hole4": "player", "hole0": "FanOfKnives", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "PRIEST", "_type": "Template14", "hole0": "Fan of Knives"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Fan", "Of", "Knives", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "auras", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001087188720703125, -7.843663479434326e-05, -0.00027060447609983385, -0.00026020052609965205, -7.748602001811378e-06, -4.040077328681946e-06, -3.814697265625e-06, -4.780292510986328e-05, -7.05718994140625e-05, -0.0005893707275390625, -2.6702880859375e-05, -1.1920928244535389e-07, -0.000377655029296875, -2.4557000870117918e-05, -4.38690185546875e-05, -6.46108528599143e-05, 0.0, -1.7881369558381266e-06, 0.0, -6.677905082702637, 0.0, -9.47708758758381e-05, 0.0, -0.003528810804709792, 0.0, -0.0001125335693359375, -4.1961669921875e-05, -1.71661376953125e-05, -2.8252587071619928e-05, -1.1920928244535389e-07, -0.0006237030029296875, -0.000316619873046875, -0.00060272216796875, -1.52587890625e-05, -9.5367431640625e-06, -2.09808349609375e-05, -0.00012886195327155292, -2.1576648578047752e-05, -0.009141921997070312, -0.0003337860107421875, -0.000232696533203125, -7.62939453125e-06, -5.53131103515625e-05, 0.0, -0.0010838507441803813, -1.33514404296875e-05, -0.00013887873501516879, 0.0, -4.00543212890625e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.00057220458984375, 0.0, -0.0001583099365234375, 0.0, -4.57763671875e-05, -3.576278118089249e-07, -0.007589459419250488, 0.0, -0.00021326536079868674, -7.62939453125e-06, -4.1961669921875e-05, -0.000148773193359375, 0.0, -7.82012939453125e-05, 0.0, -0.0003269907901994884, -7.652943895664066e-05, -0.0001746349735185504, -1.1920928244535389e-07, -1.52587890625e-05, -0.0001583099365234375, -0.0001506805419921875, -3.814697265625e-06, -0.00016200158279389143, -1.6808447981020436e-05, -0.07700693607330322, -4.768370445162873e-07, -8.58306884765625e-05, -0.0006046295166015625, -5.7220458984375e-06, -0.000499725341796875, -0.000400543212890625, -0.0001163482666015625, -0.0002466440200805664, -9.775161743164062e-06], "score": -6.785469082958265, "model_output": {"hole4": "player", "hole0": "FanOfKnives", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "auras", "_type": "Template14", "hole0": "Fan of Knives"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.auras,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Fan", "Of", "Knives", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "to", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001087188720703125, -7.843663479434326e-05, -0.00027060447609983385, -0.00026020052609965205, -7.748602001811378e-06, -4.040077328681946e-06, -3.814697265625e-06, -4.780292510986328e-05, -7.05718994140625e-05, -0.0005893707275390625, -2.6702880859375e-05, -1.1920928244535389e-07, -0.000377655029296875, -2.4557000870117918e-05, -4.38690185546875e-05, -6.46108528599143e-05, 0.0, -1.7881369558381266e-06, 0.0, -0.009063830599188805, 0.0, -3.8742946344427764e-05, 0.0, -0.0017167559126392007, 0.0, -0.000118255615234375, -6.4849853515625e-05, -1.52587890625e-05, -2.5153151000267826e-05, 0.0, -0.00054168701171875, -0.00038909912109375, -0.000400543212890625, -1.33514404296875e-05, -1.1444091796875e-05, -2.09808349609375e-05, -0.00015329872258007526, -2.8609820219571702e-05, -0.007846832275390625, -0.0004482269287109375, -0.00012969970703125, -5.7220458984375e-06, -5.7220458984375e-05, 0.0, -0.0011355876922607422, -1.1444091796875e-05, -0.00013673299690708518, 0.0, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0005435943603515625, 0.0, -0.0001544952392578125, 0.0, -4.76837158203125e-05, -3.576278118089249e-07, -0.0077735185623168945, 0.0, -0.00021517270943149924, -7.62939453125e-06, -4.1961669921875e-05, -0.0001430511474609375, 0.0, -8.0108642578125e-05, 0.0, -0.0003265139530412853, -7.819823804311454e-05, -0.00017546933668199927, -1.1920928244535389e-07, -1.52587890625e-05, -0.0001583099365234375, -0.000148773193359375, -3.814697265625e-06, -0.0001624783908482641, -1.6808447981020436e-05, -6.849884986877441, -0.00020502197730820626, -0.0001468658447265625, -0.0005283355712890625, -3.814697265625e-06, -0.019400596618652344, -0.000377655029296875, -0.000385284423828125, -0.0007158517837524414, -7.62939453125e-06], "score": -6.906202480494628, "model_output": {"hole4": "player", "hole0": "FanOfKnives", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "ROGUE", "_type": "Template14", "hole0": "Fan of Knives"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Fan", "Of", "Knives", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001087188720703125, -7.843663479434326e-05, -0.00027060447609983385, -0.00026020052609965205, -7.748602001811378e-06, -4.040077328681946e-06, -3.814697265625e-06, -4.780292510986328e-05, -7.05718994140625e-05, -0.0005893707275390625, -2.6702880859375e-05, -1.1920928244535389e-07, -0.000377655029296875, -2.4557000870117918e-05, -4.38690185546875e-05, -6.46108528599143e-05, 0.0, -1.7881369558381266e-06, 0.0, -0.009063830599188805, 0.0, -3.8742946344427764e-05, 0.0, -0.0017167559126392007, 0.0, -0.000118255615234375, -6.4849853515625e-05, -1.52587890625e-05, -2.5153151000267826e-05, 0.0, -0.00054168701171875, -0.00038909912109375, -0.000400543212890625, -1.33514404296875e-05, -1.1444091796875e-05, -2.09808349609375e-05, -0.00015329872258007526, -2.8609820219571702e-05, -6.7295427322387695, -1.9073486328125e-06, -0.07375335693359375, -0.000110626220703125, -0.00110626220703125, 0.0, -0.0003108978271484375, 0.0, -0.03415811061859131, 0.0, -0.0008469700114801526, -3.814697265625e-06, -0.00011444091796875, -8.0108642578125e-05, -5.53131103515625e-05, -0.0005664825439453125, 0.0, -0.00033736228942871094, -6.556510470545618e-06, -0.08999408036470413, 0.0, -0.00014495849609375, -0.0001049041748046875, -0.000255584716796875, -3.814697265625e-06, -9.596324525773525e-05, -5.483620952873025e-06, -0.05817316845059395, -2.3841855067985307e-07, -8.392333984375e-05, -0.0005817413330078125, -5.7220458984375e-06, -0.0006389617919921875, -0.000324249267578125, -0.00014495849609375, -0.00029468536376953125, -7.867813110351562e-06], "score": -7.006464423324211, "model_output": {"hole4": "player", "hole0": "FanOfKnives", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "ROGUE", "_type": "Template14", "hole0": "Fan of Knives"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.damage(player.effective_spell_damage(1), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Fan", "Of", "Knives", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "minions", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001087188720703125, -7.843663479434326e-05, -0.00027060447609983385, -0.00026020052609965205, -7.748602001811378e-06, -4.040077328681946e-06, -3.814697265625e-06, -4.780292510986328e-05, -7.05718994140625e-05, -0.0005893707275390625, -2.6702880859375e-05, -1.1920928244535389e-07, -0.000377655029296875, -2.4557000870117918e-05, -4.38690185546875e-05, -6.46108528599143e-05, 0.0, -1.7881369558381266e-06, 0.0, -0.009063830599188805, 0.0, -3.8742946344427764e-05, 0.0, -0.0017167559126392007, 0.0, -0.000118255615234375, -6.4849853515625e-05, -1.52587890625e-05, -2.5153151000267826e-05, 0.0, -0.00054168701171875, -0.00038909912109375, -0.000400543212890625, -1.33514404296875e-05, -1.1444091796875e-05, -2.09808349609375e-05, -0.00015329872258007526, -2.8609820219571702e-05, -0.007846832275390625, -0.0004482269287109375, -0.00012969970703125, -5.7220458984375e-06, -5.7220458984375e-05, 0.0, -0.0011355876922607422, -1.1444091796875e-05, -0.00013673299690708518, 0.0, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0005435943603515625, 0.0, -0.0001544952392578125, 0.0, -4.76837158203125e-05, -3.576278118089249e-07, -0.0077735185623168945, 0.0, -0.00021517270943149924, -7.62939453125e-06, -4.1961669921875e-05, -0.0001430511474609375, 0.0, -8.0108642578125e-05, 0.0, -0.0003265139530412853, -7.819823804311454e-05, -0.00017546933668199927, -1.1920928244535389e-07, -1.52587890625e-05, -0.0001583099365234375, -0.000148773193359375, -3.814697265625e-06, -0.0001624783908482641, -1.6808447981020436e-05, -6.80888032913208, -3.552423368091695e-05, -0.0001544952392578125, -0.00087738037109375, -3.814697265625e-06, -0.1949024200439453, -0.0006198883056640625, -0.0012111663818359375, -0.0007470846176147461, -1.71661376953125e-05], "score": -7.041995707436669, "model_output": {"hole4": "player", "hole0": "FanOfKnives", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "ROGUE", "_type": "Template14", "hole0": "Fan of Knives"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Fan", "Of", "Knives", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "HUNTER", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001087188720703125, -7.843663479434326e-05, -0.00027060447609983385, -0.00026020052609965205, -7.748602001811378e-06, -4.040077328681946e-06, -3.814697265625e-06, -4.780292510986328e-05, -7.05718994140625e-05, -0.0005893707275390625, -2.6702880859375e-05, -1.1920928244535389e-07, -0.000377655029296875, -2.4557000870117918e-05, -4.38690185546875e-05, -6.46108528599143e-05, 0.0, -1.7881369558381266e-06, 0.0, -0.009063830599188805, 0.0, -3.8742946344427764e-05, 0.0, -0.0017167559126392007, 0.0, -0.000118255615234375, -6.4849853515625e-05, -1.52587890625e-05, -2.5153151000267826e-05, 0.0, -0.00054168701171875, -0.00038909912109375, -0.000400543212890625, -1.33514404296875e-05, -1.1444091796875e-05, -2.09808349609375e-05, -0.00015329872258007526, -2.8609820219571702e-05, -0.007846832275390625, -0.0004482269287109375, -0.00012969970703125, -5.7220458984375e-06, -5.7220458984375e-05, 0.0, -0.0011355876922607422, -1.1444091796875e-05, -0.00013673299690708518, 0.0, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0005435943603515625, 0.0, -0.0001544952392578125, 0.0, -4.76837158203125e-05, -3.576278118089249e-07, -7.198859214782715, 0.0, -8.475778304273263e-05, -1.9073486328125e-06, -1.33514404296875e-05, -0.000823974609375, 0.0, -0.0002422332763671875, 0.0, -0.0004794571432285011, -8.034383063204587e-05, -0.00013649289030581713, -1.1920928244535389e-07, -1.71661376953125e-05, -0.00019073486328125, -0.000209808349609375, -3.814697265625e-06, -0.00018238395568914711, -1.4424267646973021e-05, -0.06402289867401123, -3.576278118089249e-07, -9.1552734375e-05, -0.000560760498046875, -5.7220458984375e-06, -0.0006084442138671875, -0.000396728515625, -0.0001068115234375, -0.0002435445785522461, -9.775161743164062e-06], "score": -7.292586032116773, "model_output": {"hole4": "player", "hole0": "FanOfKnives", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "HUNTER", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "ROGUE", "_type": "Template14", "hole0": "Fan of Knives"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.HUNTER.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Fan", "Of", "Knives", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001087188720703125, -7.843663479434326e-05, -0.00027060447609983385, -0.00026020052609965205, -7.748602001811378e-06, -4.040077328681946e-06, -3.814697265625e-06, -4.780292510986328e-05, -7.05718994140625e-05, -0.0005893707275390625, -2.6702880859375e-05, -1.1920928244535389e-07, -0.000377655029296875, -2.4557000870117918e-05, -4.38690185546875e-05, -6.46108528599143e-05, 0.0, -1.7881369558381266e-06, 0.0, -7.2088165283203125, 0.0, -7.45057623134926e-05, 0.0, -0.0018347396980971098, 0.0, -8.0108642578125e-05, -4.00543212890625e-05, -1.33514404296875e-05, -2.8014157578581944e-05, -2.0265579223632812e-06, -0.0005950927734375, -0.0002918243408203125, -0.0015239715576171875, -1.71661376953125e-05, -9.5367431640625e-06, -2.09808349609375e-05, -9.83458521659486e-05, -1.6450776456622407e-05, -0.01107025146484375, -0.000274658203125, -0.000396728515625, -1.1444091796875e-05, -5.53131103515625e-05, 0.0, -0.0010550020961090922, -1.52587890625e-05, -0.00013816346472594887, 0.0, -3.814697265625e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.0006008148193359375, 0.0, -0.00016021728515625, 0.0, -4.38690185546875e-05, -3.576278118089249e-07, -0.007416963577270508, 0.0, -0.00020945066353306174, -7.62939453125e-06, -4.1961669921875e-05, -0.0001544952392578125, 0.0, -8.0108642578125e-05, 0.0, -0.0003366467426531017, -7.557583012385294e-05, -0.00017606552864890546, -1.1920928244535389e-07, -1.52587890625e-05, -0.00016021728515625, -0.000152587890625, -3.814697265625e-06, -0.00016176319331862032, -1.6927657270571217e-05, -0.07792508602142334, -4.768370445162873e-07, -8.58306884765625e-05, -0.0006351470947265625, -7.62939453125e-06, -0.0004673004150390625, -0.0004024505615234375, -0.00011444091796875, -0.0002465248107910156, -9.775161743164062e-06], "score": -7.318261188617882, "model_output": {"hole4": "player", "hole0": "FanOfKnives", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Fan of Knives"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Fan", "Of", "Knives", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001087188720703125, -7.843663479434326e-05, -0.00027060447609983385, -0.00026020052609965205, -7.748602001811378e-06, -4.040077328681946e-06, -3.814697265625e-06, -4.780292510986328e-05, -7.05718994140625e-05, -0.0005893707275390625, -2.6702880859375e-05, -1.1920928244535389e-07, -0.000377655029296875, -2.4557000870117918e-05, -4.38690185546875e-05, -6.46108528599143e-05, 0.0, -1.7881369558381266e-06, 0.0, -0.009063830599188805, 0.0, -3.8742946344427764e-05, 0.0, -0.0017167559126392007, 0.0, -0.000118255615234375, -6.4849853515625e-05, -1.52587890625e-05, -2.5153151000267826e-05, 0.0, -0.00054168701171875, -0.00038909912109375, -0.000400543212890625, -1.33514404296875e-05, -1.1444091796875e-05, -2.09808349609375e-05, -0.00015329872258007526, -2.8609820219571702e-05, -0.007846832275390625, -0.0004482269287109375, -0.00012969970703125, -5.7220458984375e-06, -5.7220458984375e-05, 0.0, -0.0011355876922607422, -1.1444091796875e-05, -0.00013673299690708518, 0.0, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0005435943603515625, 0.0, -0.0001544952392578125, 0.0, -4.76837158203125e-05, -3.576278118089249e-07, -0.0077735185623168945, 0.0, -0.00021517270943149924, -7.62939453125e-06, -4.1961669921875e-05, -0.0001430511474609375, 0.0, -8.0108642578125e-05, 0.0, -0.0003265139530412853, -7.819823804311454e-05, -0.00017546933668199927, -1.1920928244535389e-07, -1.52587890625e-05, -0.0001583099365234375, -0.000148773193359375, -3.814697265625e-06, -0.0001624783908482641, -1.6808447981020436e-05, -7.320271015167236, -7.68880927353166e-05, -0.000141143798828125, -0.000972747802734375, -1.9073486328125e-06, -0.002452850341796875, -0.000301361083984375, -9.5367431640625e-05, -0.00027954578399658203, -1.1801719665527344e-05], "score": -7.359151066847787, "model_output": {"hole4": "player", "hole0": "FanOfKnives", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "ROGUE", "_type": "Template14", "hole0": "Fan of Knives"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Fan", "Of", "Knives", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "Draw", "<EOS>", 110, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "1", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001087188720703125, -7.843663479434326e-05, -0.00027060447609983385, -0.00026020052609965205, -7.748602001811378e-06, -4.040077328681946e-06, -3.814697265625e-06, -4.780292510986328e-05, -7.05718994140625e-05, -0.0005893707275390625, -2.6702880859375e-05, -1.1920928244535389e-07, -0.000377655029296875, -2.4557000870117918e-05, -4.38690185546875e-05, -6.46108528599143e-05, 0.0, -1.7881369558381266e-06, 0.0, -0.009063830599188805, 0.0, -3.8742946344427764e-05, 0.0, -0.0017167559126392007, 0.0, -0.000118255615234375, -6.4849853515625e-05, -1.52587890625e-05, -2.5153151000267826e-05, 0.0, -0.00054168701171875, -0.00038909912109375, -0.000400543212890625, -1.33514404296875e-05, -1.1444091796875e-05, -2.09808349609375e-05, -0.00015329872258007526, -2.8609820219571702e-05, -0.007846832275390625, -0.0004482269287109375, -0.00012969970703125, -5.7220458984375e-06, -5.7220458984375e-05, 0.0, -0.0011355876922607422, -1.1444091796875e-05, -0.00013673299690708518, 0.0, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0005435943603515625, 0.0, -0.0001544952392578125, 0.0, -4.76837158203125e-05, -3.576278118089249e-07, -0.0077735185623168945, 0.0, -0.00021517270943149924, -7.62939453125e-06, -4.1961669921875e-05, -0.0001430511474609375, 0.0, -8.0108642578125e-05, 0.0, -0.0003265139530412853, -7.819823804311454e-05, -0.00017546933668199927, -1.1920928244535389e-07, -1.52587890625e-05, -0.0001583099365234375, -0.000148773193359375, -3.814697265625e-06, -0.0001624783908482641, -1.6808447981020436e-05, -2.7005417346954346, -1.4901099348207936e-05, -5.340576171875e-05, -0.0007572174072265625, -7.62939453125e-06, -3.707524299621582, -1.71661376953125e-05, -0.01189422607421875, -6.29425048828125e-05, -0.002307891845703125, -0.011967778205871582, 0.0, -0.4594237804412842, 0.0, -0.5729540586471558, 0.0], "score": -7.502073470113189, "model_output": {"hole4": "player", "hole0": "FanOfKnives", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"value": {"hole1": "change_temp_attack", "hole2": 1, "_type": "Template37", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "ROGUE", "_type": "Template14", "hole0": "Fan of Knives"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n        player.hero.change_temp_attack(1)\n"}], "index": 31}
{"beams": [{"choice_history": [121, 200, "Fireball", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Fireball", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110], "score_history": [-1.71661376953125e-05, -7.43865966796875e-05, -3.635882603703067e-05, -2.503394853192731e-06, -0.0003119704779237509, -5.14984130859375e-05, -7.867813110351562e-06, -0.0006732940673828125, -0.0003204345703125, -1.71661376953125e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -0.0002307891845703125, -2.86102294921875e-05, -8.7738037109375e-05, -1.7881393432617188e-05, -3.933906555175781e-06, -0.011031150817871094, -8.20159912109375e-05, -6.866455078125e-05, -8.58306884765625e-05, -3.814697265625e-06, -0.0003587007522583008, -3.814697265625e-06, -0.09356510639190674, -1.9073486328125e-06, -0.000484466552734375, -4.38690185546875e-05, -1.9073486328125e-05, -9.5367431640625e-06, -4.38690185546875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.71661376953125e-05, -4.57763671875e-05, -0.0001163482666015625, 0.0, -1.9073486328125e-05, 0.0, -4.696843461715616e-05, 0.0, -0.0007076263427734375, -0.00011444091796875, -0.005306243896484375, -0.0001882314682006836, 0.0, -0.0001277923583984375, -2.86102294921875e-05, -9.72747802734375e-05, -5.7220458984375e-06, -9.5367431640625e-05, -3.2186455882765586e-06, -2.0265558760002023e-06, -4.57763671875e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.000141143798828125, -0.00013720989227294922, -4.768370445162873e-07, -0.00040256904321722686, -2.0265558760002023e-06, -9.5367431640625e-06], "score": -0.1155843724712895, "model_output": {"hole4": "player", "hole0": "Fireball", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Fireball", "_type": "Str"}, {"_type": "Template63"}, {"attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 4, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}, {"choice_history": [121, 200, "Fireball", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Fireball", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110], "score_history": [-1.71661376953125e-05, -7.43865966796875e-05, -3.635882603703067e-05, -2.503394853192731e-06, -0.0003119704779237509, -5.14984130859375e-05, -7.867813110351562e-06, -0.0006732940673828125, -0.0003204345703125, -1.71661376953125e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -0.0002307891845703125, -2.86102294921875e-05, -8.7738037109375e-05, -1.7881393432617188e-05, -3.933906555175781e-06, -0.011031150817871094, -8.20159912109375e-05, -6.866455078125e-05, -8.58306884765625e-05, -3.814697265625e-06, -0.0003587007522583008, -3.814697265625e-06, -2.4590625762939453, 0.0, -0.0001354217529296875, -5.53131103515625e-05, -4.38690185546875e-05, -7.62939453125e-06, -5.7220458984375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-05, -4.76837158203125e-05, -0.00011444091796875, 0.0, -1.71661376953125e-05, 0.0, -5.304811929818243e-05, 0.0, -0.00066375732421875, -0.0001583099365234375, -0.00315093994140625, -0.00018393993377685547, 0.0, -0.0001373291015625, -2.86102294921875e-05, -8.96453857421875e-05, -5.7220458984375e-06, -0.0001087188720703125, -3.099436753473128e-06, -2.0265558760002023e-06, -4.76837158203125e-05, -0.0001049041748046875, -1.1444091796875e-05, -0.0001468658447265625, -0.00013530254364013672, -4.768370445162873e-07, -0.00040113850263878703, -1.9073468138230965e-06, -9.5367431640625e-06], "score": -2.4786367406178442, "model_output": {"hole4": "player", "hole0": "Fireball", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Fireball", "_type": "Str"}, {"_type": "Template63"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 4, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}, {"choice_history": [121, 200, "Fireball", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Fireball", "<EOS>", 75, 190, "4", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110], "score_history": [-1.71661376953125e-05, -7.43865966796875e-05, -3.635882603703067e-05, -2.503394853192731e-06, -0.0003119704779237509, -5.14984130859375e-05, -7.867813110351562e-06, -0.0006732940673828125, -0.0003204345703125, -1.71661376953125e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -0.0002307891845703125, -2.86102294921875e-05, -8.7738037109375e-05, -1.7881393432617188e-05, -3.933906555175781e-06, -4.889429092407227, -0.0003299713134765625, -0.00017297250451520085, -2.2649765014648438e-06, -0.0022563934326171875, -5.53131103515625e-05, -0.0025415420532226562, -1.9073486328125e-06, -0.003398895263671875, -1.9073486328125e-06, -0.09283936023712158, 0.0, -0.00034332275390625, -2.09808349609375e-05, -2.09808349609375e-05, -5.7220458984375e-06, -6.866455078125e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -7.43865966796875e-05, -0.000171661376953125, 0.0, -3.4332275390625e-05, 0.0, -5.0902341172331944e-05, 0.0, -0.0006561279296875, -0.000102996826171875, -0.00414276123046875, -0.0002181529998779297, 0.0, -0.00012969970703125, -2.6702880859375e-05, -9.918212890625e-05, -5.7220458984375e-06, -0.0001125335693359375, -3.2186455882765586e-06, -1.9073468138230965e-06, -5.14984130859375e-05, -0.000110626220703125, -9.5367431640625e-06, -0.0001430511474609375, -0.00013720989227294922, -4.768370445162873e-07, -0.0004017345199827105, -1.9073468138230965e-06, -9.5367431640625e-06], "score": -5.000200270371238, "model_output": {"hole4": "player", "hole0": "Fireball", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Fireball", "_type": "Str"}, {"_type": "Num", "n": 4}, {"attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 4, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}, {"choice_history": [121, 200, "Fireball", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Fireball", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110], "score_history": [-1.71661376953125e-05, -7.43865966796875e-05, -3.635882603703067e-05, -2.503394853192731e-06, -0.0003119704779237509, -5.14984130859375e-05, -7.867813110351562e-06, -0.0006732940673828125, -0.0003204345703125, -1.71661376953125e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -0.0002307891845703125, -2.86102294921875e-05, -8.7738037109375e-05, -1.7881393432617188e-05, -3.933906555175781e-06, -0.011031150817871094, -8.20159912109375e-05, -6.866455078125e-05, -8.58306884765625e-05, -3.814697265625e-06, -0.0003587007522583008, -3.814697265625e-06, -6.277169227600098, 0.0, -0.000247955322265625, -3.0517578125e-05, -4.38690185546875e-05, -9.5367431640625e-06, -5.924701690673828e-05, 0.0, -5.7220458984375e-06, -1.52587890625e-05, -4.38690185546875e-05, -0.0001087188720703125, 0.0, -2.09808349609375e-05, 0.0, -4.8995003453455865e-05, 0.0, -0.0006694793701171875, -0.0001678466796875, -0.00321197509765625, -0.00017452239990234375, 0.0, -0.0001373291015625, -2.86102294921875e-05, -8.7738037109375e-05, -5.7220458984375e-06, -0.0001010894775390625, -2.9802276912960224e-06, -2.0265558760002023e-06, -4.76837158203125e-05, -0.0001049041748046875, -1.1444091796875e-05, -0.0001468658447265625, -0.00013530254364013672, -4.768370445162873e-07, -0.00040292664198204875, -1.9073468138230965e-06, -9.5367431640625e-06], "score": -6.29688238995584, "model_output": {"hole4": "player", "hole0": "Fireball", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Fireball", "_type": "Str"}, {"_type": "Template63"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 4, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}, {"choice_history": [121, 200, "Fireball", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Fireball", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110], "score_history": [-1.71661376953125e-05, -7.43865966796875e-05, -3.635882603703067e-05, -2.503394853192731e-06, -0.0003119704779237509, -5.14984130859375e-05, -7.867813110351562e-06, -0.0006732940673828125, -0.0003204345703125, -1.71661376953125e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -0.0002307891845703125, -2.86102294921875e-05, -8.7738037109375e-05, -1.7881393432617188e-05, -3.933906555175781e-06, -6.71193790435791, -0.0001373291015625, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -0.00034165382385253906, -2.0265579223632812e-06, -0.49540627002716064, 0.0, -0.0003566741943359375, -3.24249267578125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -4.57763671875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -2.288818359375e-05, -4.38690185546875e-05, -0.000118255615234375, 0.0, -1.9073486328125e-05, 0.0, -4.553791950456798e-05, 0.0, -0.00070953369140625, -0.0001010894775390625, -0.006504058837890625, -0.00020182132720947266, 0.0, -0.000125885009765625, -2.86102294921875e-05, -0.0001068115234375, -5.7220458984375e-06, -0.0001010894775390625, -3.3378546504536644e-06, -2.0265558760002023e-06, -4.38690185546875e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.000141143798828125, -0.00013911724090576172, -4.768370445162873e-07, -0.0004023306246381253, -2.0265558760002023e-06, -9.5367431640625e-06], "score": -7.219309686607744, "model_output": {"hole4": "player", "hole0": "Fireball", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Fireball", "_type": "Str"}, {"_type": "Template60"}, {"attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}, {"choice_history": [121, 200, "Fireball", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Fireball", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110], "score_history": [-1.71661376953125e-05, -7.43865966796875e-05, -3.635882603703067e-05, -2.503394853192731e-06, -0.0003119704779237509, -5.14984130859375e-05, -7.867813110351562e-06, -0.0006732940673828125, -0.0003204345703125, -1.71661376953125e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -0.0002307891845703125, -2.86102294921875e-05, -8.7738037109375e-05, -1.7881393432617188e-05, -3.933906555175781e-06, -7.049788475036621, -0.00025177001953125, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002747774124145508, -4.0531158447265625e-06, -0.36778879165649414, 0.0, -0.000408172607421875, -2.86102294921875e-05, -1.52587890625e-05, -9.5367431640625e-06, -4.38690185546875e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -4.76837158203125e-05, -0.000118255615234375, 0.0, -1.9073486328125e-05, 0.0, -4.482267104322091e-05, 0.0, -0.0006046295166015625, -0.0001010894775390625, -0.0051288604736328125, -0.0001901388168334961, 0.0, -0.00012969970703125, -2.86102294921875e-05, -9.918212890625e-05, -5.7220458984375e-06, -0.000102996826171875, -3.2186455882765586e-06, -1.9073468138230965e-06, -4.57763671875e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.000141143798828125, -0.00013720989227294922, -4.768370445162873e-07, -0.00040280743269249797, -2.0265558760002023e-06, -9.5367431640625e-06], "score": -7.428124903604498, "model_output": {"hole4": "player", "hole0": "Fireball", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Fireball", "_type": "Str"}, {"_type": "Template67"}, {"attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 5, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}, {"choice_history": [121, 200, "Fireball", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Fireball", "<EOS>", 75, 190, "4", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110], "score_history": [-1.71661376953125e-05, -7.43865966796875e-05, -3.635882603703067e-05, -2.503394853192731e-06, -0.0003119704779237509, -5.14984130859375e-05, -7.867813110351562e-06, -0.0006732940673828125, -0.0003204345703125, -1.71661376953125e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -0.0002307891845703125, -2.86102294921875e-05, -8.7738037109375e-05, -1.7881393432617188e-05, -3.933906555175781e-06, -4.889429092407227, -0.0003299713134765625, -0.00017297250451520085, -2.2649765014648438e-06, -0.0022563934326171875, -5.53131103515625e-05, -0.0025415420532226562, -1.9073486328125e-06, -0.003398895263671875, -1.9073486328125e-06, -2.631927490234375, 0.0, -0.0003032684326171875, -1.9073486328125e-05, -4.57763671875e-05, -5.7220458984375e-06, -8.392333984375e-05, 0.0, -3.814697265625e-06, -1.1444091796875e-05, -6.866455078125e-05, -0.000141143798828125, 0.0, -2.288818359375e-05, 0.0, -4.792211620952003e-05, 0.0, -0.0006580352783203125, -0.000141143798828125, -0.0038547515869140625, -0.00023162364959716797, 0.0, -0.0001316070556640625, -2.86102294921875e-05, -9.1552734375e-05, -5.7220458984375e-06, -0.00011444091796875, -3.099436753473128e-06, -2.0265558760002023e-06, -5.14984130859375e-05, -0.0001068115234375, -9.5367431640625e-06, -0.00014495849609375, -0.00013530254364013672, -4.768370445162873e-07, -0.00040006558992899954, -1.7881377516459906e-06, -7.62939453125e-06], "score": -7.538986204827211, "model_output": {"hole4": "player", "hole0": "Fireball", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Fireball", "_type": "Str"}, {"_type": "Num", "n": 4}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 4, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}, {"choice_history": [121, 200, "Fireball", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Fireball", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110], "score_history": [-1.71661376953125e-05, -7.43865966796875e-05, -3.635882603703067e-05, -2.503394853192731e-06, -0.0003119704779237509, -5.14984130859375e-05, -7.867813110351562e-06, -0.0006732940673828125, -0.0003204345703125, -1.71661376953125e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -0.0002307891845703125, -2.86102294921875e-05, -8.7738037109375e-05, -1.7881393432617188e-05, -3.933906555175781e-06, -6.71193790435791, -0.0001373291015625, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -0.00034165382385253906, -2.0265579223632812e-06, -1.0475150346755981, 0.0, -0.000164031982421875, -2.6702880859375e-05, -1.52587890625e-05, -1.1444091796875e-05, -5.91278076171875e-05, 0.0, -5.7220458984375e-06, -2.09808349609375e-05, -4.00543212890625e-05, -0.0001087188720703125, 0.0, -1.9073486328125e-05, 0.0, -4.768370126839727e-05, 0.0, -0.0006923675537109375, -0.00014495849609375, -0.0043487548828125, -0.00019598007202148438, 0.0, -0.00012969970703125, -2.86102294921875e-05, -9.5367431640625e-05, -5.7220458984375e-06, -0.0001049041748046875, -3.099436753473128e-06, -2.0265558760002023e-06, -4.57763671875e-05, -0.0001068115234375, -1.1444091796875e-05, -0.00014495849609375, -0.00013720989227294922, -4.768370445162873e-07, -0.00040256904321722686, -1.9073468138230965e-06, -9.5367431640625e-06], "score": -7.769080041847815, "model_output": {"hole4": "player", "hole0": "Fireball", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Fireball", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 1, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}, {"choice_history": [121, 200, "Fireball", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Fireball", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "4", "<EOS>", 110], "score_history": [-1.71661376953125e-05, -7.43865966796875e-05, -3.635882603703067e-05, -2.503394853192731e-06, -0.0003119704779237509, -5.14984130859375e-05, -7.867813110351562e-06, -0.0006732940673828125, -0.0003204345703125, -1.71661376953125e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -0.0002307891845703125, -2.86102294921875e-05, -8.7738037109375e-05, -1.7881393432617188e-05, -3.933906555175781e-06, -0.011031150817871094, -8.20159912109375e-05, -6.866455078125e-05, -8.58306884765625e-05, -3.814697265625e-06, -0.0003587007522583008, -3.814697265625e-06, -0.09356510639190674, -1.9073486328125e-06, -0.000484466552734375, -4.38690185546875e-05, -1.9073486328125e-05, -9.5367431640625e-06, -4.38690185546875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.71661376953125e-05, -4.57763671875e-05, -0.0001163482666015625, 0.0, -1.9073486328125e-05, 0.0, -4.696843461715616e-05, 0.0, -0.0007076263427734375, -0.00011444091796875, -0.005306243896484375, -0.0001882314682006836, 0.0, -0.0001277923583984375, -2.86102294921875e-05, -9.72747802734375e-05, -5.7220458984375e-06, -9.5367431640625e-05, -3.2186455882765586e-06, -2.0265558760002023e-06, -4.57763671875e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.000141143798828125, -0.00013720989227294922, -4.768370445162873e-07, -7.949605941772461, -3.576278118089249e-07, -3.62396240234375e-05], "score": -8.064812779153328, "model_output": {"hole4": "player", "hole0": "Fireball", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Fireball", "_type": "Str"}, {"_type": "Template63"}, {"attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 4, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(4), self)\n"}, {"choice_history": [121, 200, "Fireball", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Fireball", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110], "score_history": [-1.71661376953125e-05, -7.43865966796875e-05, -3.635882603703067e-05, -2.503394853192731e-06, -0.0003119704779237509, -5.14984130859375e-05, -7.867813110351562e-06, -0.0006732940673828125, -0.0003204345703125, -1.71661376953125e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -0.0002307891845703125, -2.86102294921875e-05, -8.7738037109375e-05, -1.7881393432617188e-05, -3.933906555175781e-06, -0.011031150817871094, -8.20159912109375e-05, -6.866455078125e-05, -8.58306884765625e-05, -3.814697265625e-06, -0.0003587007522583008, -3.814697265625e-06, -8.257795333862305, 0.0, -0.00040435791015625, -3.814697265625e-05, -3.4332275390625e-05, -5.7220458984375e-06, -6.4849853515625e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -4.38690185546875e-05, -0.0001087188720703125, 0.0, -2.09808349609375e-05, 0.0, -4.947184061165899e-05, 0.0, -0.000728607177734375, -0.0001659393310546875, -0.003475189208984375, -0.00018596649169921875, 0.0, -0.000133514404296875, -2.86102294921875e-05, -8.96453857421875e-05, -5.7220458984375e-06, -0.0001010894775390625, -2.9802276912960224e-06, -2.145764938177308e-06, -4.76837158203125e-05, -0.0001049041748046875, -1.1444091796875e-05, -0.00014495849609375, -0.00013530254364013672, -4.768370445162873e-07, -0.00040101929334923625, -1.9073468138230965e-06, -9.5367431640625e-06], "score": -8.27799153225908, "model_output": {"hole4": "player", "hole0": "Fireball", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Fireball", "_type": "Str"}, {"_type": "Template63"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 4, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}, {"choice_history": [121, 200, "Fireball", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Fireball", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110], "score_history": [-1.71661376953125e-05, -7.43865966796875e-05, -3.635882603703067e-05, -2.503394853192731e-06, -0.0003119704779237509, -5.14984130859375e-05, -7.867813110351562e-06, -0.0006732940673828125, -0.0003204345703125, -1.71661376953125e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -0.0002307891845703125, -2.86102294921875e-05, -8.7738037109375e-05, -1.7881393432617188e-05, -3.933906555175781e-06, -8.11845588684082, -3.4332275390625e-05, -6.4849853515625e-05, -4.38690185546875e-05, -3.814697265625e-06, -0.0009423494338989258, -1.9073486328125e-06, -0.1466590166091919, -1.9073486328125e-06, -0.00020599365234375, -3.62396240234375e-05, -1.71661376953125e-05, -2.86102294921875e-05, -4.00543212890625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -2.288818359375e-05, -4.1961669921875e-05, -0.0001220703125, 0.0, -2.09808349609375e-05, 0.0, -4.85181444673799e-05, 0.0, -0.000888824462890625, -0.0001125335693359375, -0.0067615509033203125, -0.00020194053649902344, 0.0, -0.000125885009765625, -2.86102294921875e-05, -0.0001068115234375, -5.7220458984375e-06, -9.918212890625e-05, -3.2186455882765586e-06, -2.0265558760002023e-06, -4.38690185546875e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.000141143798828125, -0.00013911724090576172, -4.768370445162873e-07, -0.000404118763981387, -2.0265558760002023e-06, -9.5367431640625e-06], "score": -8.277994750916491, "model_output": {"hole4": "player", "hole0": "Fireball", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Fireball", "_type": "Str"}, {"_type": "Template61"}, {"attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}, {"choice_history": [121, 200, "Fireball", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Fireball", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "index", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110], "score_history": [-1.71661376953125e-05, -7.43865966796875e-05, -3.635882603703067e-05, -2.503394853192731e-06, -0.0003119704779237509, -5.14984130859375e-05, -7.867813110351562e-06, -0.0006732940673828125, -0.0003204345703125, -1.71661376953125e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -0.0002307891845703125, -2.86102294921875e-05, -8.7738037109375e-05, -1.7881393432617188e-05, -3.933906555175781e-06, -0.011031150817871094, -8.20159912109375e-05, -6.866455078125e-05, -8.58306884765625e-05, -3.814697265625e-06, -0.0003587007522583008, -3.814697265625e-06, -8.379606246948242, 0.0, -0.0009365081787109375, -4.00543212890625e-05, -1.9073486328125e-05, -1.33514404296875e-05, -4.76837158203125e-05, 0.0, -3.814697265625e-06, -2.47955322265625e-05, -4.1961669921875e-05, -0.0001087188720703125, 0.0, -1.71661376953125e-05, 0.0, -4.875658851233311e-05, 0.0, -0.0006198883056640625, -0.00016021728515625, -0.003368377685546875, -0.00017833709716796875, 0.0, -0.0001392364501953125, -2.86102294921875e-05, -8.7738037109375e-05, -5.7220458984375e-06, -9.72747802734375e-05, -2.9802276912960224e-06, -2.0265558760002023e-06, -4.57763671875e-05, -0.0001049041748046875, -1.1444091796875e-05, -0.0001430511474609375, -0.00013530254364013672, -4.768370445162873e-07, -0.0004026882234029472, -1.9073468138230965e-06, -9.5367431640625e-06], "score": -8.4000817527143, "model_output": {"hole4": "player", "hole0": "Fireball", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Fireball", "_type": "Str"}, {"_type": "Template63"}, {"attr": "index", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 4, CHARACTER_CLASS.index, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}, {"choice_history": [121, 200, "Fireball", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Fireball", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "deathrattle", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110], "score_history": [-1.71661376953125e-05, -7.43865966796875e-05, -3.635882603703067e-05, -2.503394853192731e-06, -0.0003119704779237509, -5.14984130859375e-05, -7.867813110351562e-06, -0.0006732940673828125, -0.0003204345703125, -1.71661376953125e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -0.0002307891845703125, -2.86102294921875e-05, -8.7738037109375e-05, -1.7881393432617188e-05, -3.933906555175781e-06, -0.011031150817871094, -8.20159912109375e-05, -6.866455078125e-05, -8.58306884765625e-05, -3.814697265625e-06, -0.0003587007522583008, -3.814697265625e-06, -8.412109375, 0.0, -0.0004119873046875, -9.34600830078125e-05, -5.53131103515625e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.71661376953125e-05, -4.57763671875e-05, -0.0001125335693359375, 0.0, -1.71661376953125e-05, 0.0, -5.173681347514503e-05, 0.0, -0.0006809234619140625, -0.0001697540283203125, -0.00322723388671875, -0.00018215179443359375, 0.0, -0.0001373291015625, -2.86102294921875e-05, -8.96453857421875e-05, -5.7220458984375e-06, -0.000102996826171875, -2.9802276912960224e-06, -1.9073468138230965e-06, -4.76837158203125e-05, -0.000102996826171875, -1.1444091796875e-05, -0.0001468658447265625, -0.00013530254364013672, -4.768370445162873e-07, -0.00040113850263878703, -1.9073468138230965e-06, -9.5367431640625e-06], "score": -8.432103632857093, "model_output": {"hole4": "player", "hole0": "Fireball", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Fireball", "_type": "Str"}, {"_type": "Template63"}, {"attr": "deathrattle", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 4, CHARACTER_CLASS.deathrattle,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}, {"choice_history": [121, 200, "Fireball", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Fireball", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110], "score_history": [-1.71661376953125e-05, -7.43865966796875e-05, -3.635882603703067e-05, -2.503394853192731e-06, -0.0003119704779237509, -5.14984130859375e-05, -7.867813110351562e-06, -0.0006732940673828125, -0.0003204345703125, -1.71661376953125e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -0.0002307891845703125, -2.86102294921875e-05, -8.7738037109375e-05, -1.7881393432617188e-05, -3.933906555175781e-06, -0.011031150817871094, -8.20159912109375e-05, -6.866455078125e-05, -8.58306884765625e-05, -3.814697265625e-06, -0.0003587007522583008, -3.814697265625e-06, -8.496053695678711, 0.0, -0.0001983642578125, -5.7220458984375e-05, -1.33514404296875e-05, -5.7220458984375e-06, -6.306171417236328e-05, 0.0, -5.7220458984375e-06, -3.24249267578125e-05, -5.14984130859375e-05, -0.0001316070556640625, 0.0, -1.33514404296875e-05, 0.0, -5.7816483604256064e-05, 0.0, -0.0007152557373046875, -0.0001506805419921875, -0.004180908203125, -0.0002033710479736328, 0.0, -0.000133514404296875, -2.86102294921875e-05, -9.918212890625e-05, -5.7220458984375e-06, -0.0001087188720703125, -3.2186455882765586e-06, -2.0265558760002023e-06, -4.76837158203125e-05, -0.0001049041748046875, -1.1444091796875e-05, -0.0001468658447265625, -0.00013530254364013672, -4.768370445162873e-07, -0.00040090008405968547, -1.9073468138230965e-06, -9.5367431640625e-06], "score": -8.516802190706244, "model_output": {"hole4": "player", "hole0": "Fireball", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Fireball", "_type": "Str"}, {"_type": "Template63"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}, {"choice_history": [121, 200, "Fireball", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Fireball", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110], "score_history": [-1.71661376953125e-05, -7.43865966796875e-05, -3.635882603703067e-05, -2.503394853192731e-06, -0.0003119704779237509, -5.14984130859375e-05, -7.867813110351562e-06, -0.0006732940673828125, -0.0003204345703125, -1.71661376953125e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -0.0002307891845703125, -2.86102294921875e-05, -8.7738037109375e-05, -1.7881393432617188e-05, -3.933906555175781e-06, -7.049788475036621, -0.00025177001953125, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002747774124145508, -4.0531158447265625e-06, -1.5713257789611816, 0.0, -0.0002307891845703125, -2.288818359375e-05, -1.9073486328125e-05, -7.62939453125e-06, -6.103515625e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -4.38690185546875e-05, -0.0001087188720703125, 0.0, -1.71661376953125e-05, 0.0, -4.541872476693243e-05, 0.0, -0.0005931854248046875, -0.0001430511474609375, -0.003631591796875, -0.00018608570098876953, 0.0, -0.0001354217529296875, -2.86102294921875e-05, -9.1552734375e-05, -5.7220458984375e-06, -0.0001068115234375, -3.099436753473128e-06, -2.0265558760002023e-06, -4.76837158203125e-05, -0.0001068115234375, -1.1444091796875e-05, -0.00014495849609375, -0.00013530254364013672, -4.768370445162873e-07, -0.00040292664198204875, -1.9073468138230965e-06, -9.5367431640625e-06], "score": -8.630014299326035, "model_output": {"hole4": "player", "hole0": "Fireball", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Fireball", "_type": "Str"}, {"_type": "Template67"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 5, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}], "index": 32}
{"beams": [{"choice_history": [121, 200, "Flamestrike", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "4", "<EOS>", 110], "score_history": [-0.0001068115234375, -0.00014495849609375, -2.7179703465662897e-05, -1.811964830267243e-05, -7.977010682225227e-06, -4.589557647705078e-05, -2.491474151611328e-05, -0.0035877227783203125, -0.003887176513671875, -0.00011444091796875, -2.2292111680144444e-05, -1.9073486328125e-06, -0.0001990600721910596, -1.9073486328125e-06, -0.0013867616653442383, -7.62939453125e-06, -7.62939453125e-06, 0.0, -8.797636110102758e-05, 0.0, -3.814697265625e-06, -0.000408172607421875, -1.33514404296875e-05, -3.063678741455078e-05, 0.0, -0.047760009765625, -6.29425048828125e-05, -0.0002288818359375, -0.0001392364501953125, -0.00025177001953125, -1.52587890625e-05, -0.00018214115698356181, -4.41074053014745e-06, -0.000492095947265625, -0.0001430511474609375, -1.52587890625e-05, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -0.00016415117715951055, -1.9073486328125e-05, -0.00015747534052934498, 0.0, -3.62396240234375e-05, -0.0001163482666015625, 0.0, -0.0002040863037109375, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -6.866455078125e-05, -2.3841855067985307e-07, -0.0007047652616165578, -1.1920928244535389e-07, -0.00024043567827902734, -1.1444091796875e-05, -0.000308990478515625, -1.52587890625e-05, -6.67572021484375e-05, -0.00011444091796875, -1.9073486328125e-06, -0.00017249576922040433, -6.19869097135961e-05, -0.0001623489079065621, -1.1920928244535389e-07, -6.29425048828125e-05, -0.0023851394653320312, -1.52587890625e-05, -3.24249267578125e-05, -1.8715856640483253e-05, -3.6954863844584906e-06, -0.0011484355200082064, -2.0265579223632812e-06, -0.00054931640625], "score": -0.06632056475855563, "model_output": {"hole4": "player", "hole0": "Flamestrike", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 7, "hole2": "MAGE", "_type": "Template14", "hole0": "Flamestrike"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(4), self)\n"}, {"choice_history": [121, 200, "Flamestrike", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "hero", "<EOS>"], "score_history": [-0.0001068115234375, -0.00014495849609375, -2.7179703465662897e-05, -1.811964830267243e-05, -7.977010682225227e-06, -4.589557647705078e-05, -2.491474151611328e-05, -0.0035877227783203125, -0.003887176513671875, -0.00011444091796875, -2.2292111680144444e-05, -1.9073486328125e-06, -0.0001990600721910596, -1.9073486328125e-06, -0.0013867616653442383, -7.62939453125e-06, -7.62939453125e-06, 0.0, -8.797636110102758e-05, 0.0, -3.814697265625e-06, -0.000408172607421875, -1.33514404296875e-05, -3.063678741455078e-05, 0.0, -3.123414993286133, -4.9591064453125e-05, -0.021266937255859375, -2.6702880859375e-05, -1.33514404296875e-05, -0.0029277801513671875, -5.7220458984375e-06, -0.022071242332458496, -3.457069396972656e-05, -1.33514404296875e-05, -6.29425048828125e-05, -7.62939453125e-06, -3.814697265625e-06, -0.00032806396484375, -1.9073486328125e-06, -0.0004225969023536891, -5.53131103515625e-05, -0.0002290010015713051, 0.0, -0.0002002716064453125, -0.0003337860107421875, 0.0, -0.0002231597900390625, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -6.4849853515625e-05, -2.3841855067985307e-07, -0.0009584426297806203, 0.0, -9.822782885748893e-05, -1.1444091796875e-05, -6.29425048828125e-05, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -0.0034933090209960938, -6.866455078125e-05, -0.010709160938858986, -2.09808349609375e-05, -0.0003032684326171875, -4.9591064453125e-05, 0.0, -0.0001888275146484375, -0.0010776519775390625, -1.9073486328125e-06, 0.0, -0.00098419189453125, 0.0, -0.008671283721923828, -0.000102996826171875, -0.0003300905227661133, -7.62939453125e-06, -0.3648557662963867, -0.000156402587890625, -1.33514404296875e-05, 0.0, -0.0021076202392578125, -3.62396240234375e-05, -0.23926091194152832, 0.0, -1.9073486328125e-05, -0.0019283294677734375, 0.0, -2.288818359375e-05, -0.0001468658447265625, -6.103515625e-05, 0.0, -0.0021266937255859375, 0.0, -0.019335508346557617, -5.7220458984375e-06, -0.28224384784698486, -2.0265579223632812e-06], "score": -4.121399008894485, "model_output": {"hole4": "player", "hole0": "Flamestrike", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"hole1": "append", "hole2": [{"attr": "hero", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole1": 7, "hole2": "MAGE", "_type": "Template14", "hole0": "Flamestrike"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.current_player.hero)\n"}, {"choice_history": [121, 200, "Flamestrike", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 25, 186, "targets", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "4", "<EOS>", 110], "score_history": [-0.0001068115234375, -0.00014495849609375, -2.7179703465662897e-05, -1.811964830267243e-05, -7.977010682225227e-06, -4.589557647705078e-05, -2.491474151611328e-05, -0.0035877227783203125, -0.003887176513671875, -0.00011444091796875, -2.2292111680144444e-05, -1.9073486328125e-06, -0.0001990600721910596, -1.9073486328125e-06, -0.0013867616653442383, -7.62939453125e-06, -7.62939453125e-06, 0.0, -8.797636110102758e-05, 0.0, -3.814697265625e-06, -0.000408172607421875, -1.33514404296875e-05, -3.063678741455078e-05, 0.0, -3.123414993286133, -4.9591064453125e-05, -0.021266937255859375, -2.6702880859375e-05, -1.33514404296875e-05, -0.0029277801513671875, -5.7220458984375e-06, -0.022071242332458496, -3.457069396972656e-05, -1.33514404296875e-05, -6.29425048828125e-05, -7.62939453125e-06, -3.814697265625e-06, -0.00032806396484375, -1.9073486328125e-06, -0.0004225969023536891, -5.53131103515625e-05, -0.0002290010015713051, 0.0, -0.0002002716064453125, -0.0003337860107421875, 0.0, -0.0002231597900390625, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -6.4849853515625e-05, -2.3841855067985307e-07, -0.0009584426297806203, 0.0, -9.822782885748893e-05, -1.1444091796875e-05, -6.29425048828125e-05, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -0.0034933090209960938, -6.866455078125e-05, -0.010709160938858986, -2.09808349609375e-05, -0.0003032684326171875, -4.9591064453125e-05, 0.0, -0.0001888275146484375, -0.0010776519775390625, -1.9073486328125e-06, 0.0, -0.00098419189453125, 0.0, -0.008671283721923828, -0.000102996826171875, -0.0003300905227661133, -7.62939453125e-06, -1.2014894485473633, -4.57763671875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0011653900146484375, 0.0, -0.009382247924804688, -9.5367431640625e-06, -0.0015573501586914062, -1.33514404296875e-05, -0.001171112060546875, -0.025897979736328125, -0.000339508056640625, -0.000263214111328125, 0.0, -4.398781311465427e-05, -7.915378955658525e-05, -0.0040283845737576485, 0.0, -3.814697265625e-05, -0.0003261566162109375, -7.62939453125e-06, -3.62396240234375e-05, -1.3709068298339844e-05, -2.9802317840221804e-06, -0.0022202979307621717, -1.9073486328125e-06, -0.00011444091796875], "score": -4.457328490243043, "model_output": {"hole4": "player", "hole0": "Flamestrike", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole1": 7, "hole2": "MAGE", "_type": "Template14", "hole0": "Flamestrike"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(4), self)\n"}, {"choice_history": [121, 200, "Flamestrike", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>"], "score_history": [-0.0001068115234375, -0.00014495849609375, -2.7179703465662897e-05, -1.811964830267243e-05, -7.977010682225227e-06, -4.589557647705078e-05, -2.491474151611328e-05, -0.0035877227783203125, -0.003887176513671875, -0.00011444091796875, -2.2292111680144444e-05, -1.9073486328125e-06, -0.0001990600721910596, -1.9073486328125e-06, -0.0013867616653442383, -7.62939453125e-06, -7.62939453125e-06, 0.0, -8.797636110102758e-05, 0.0, -3.814697265625e-06, -0.000408172607421875, -1.33514404296875e-05, -3.063678741455078e-05, 0.0, -3.123414993286133, -4.9591064453125e-05, -0.021266937255859375, -2.6702880859375e-05, -1.33514404296875e-05, -0.0029277801513671875, -5.7220458984375e-06, -0.022071242332458496, -3.457069396972656e-05, -1.33514404296875e-05, -6.29425048828125e-05, -7.62939453125e-06, -3.814697265625e-06, -0.00032806396484375, -1.9073486328125e-06, -0.0004225969023536891, -5.53131103515625e-05, -0.0002290010015713051, 0.0, -0.0002002716064453125, -0.0003337860107421875, 0.0, -0.0002231597900390625, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -6.4849853515625e-05, -2.3841855067985307e-07, -0.0009584426297806203, 0.0, -9.822782885748893e-05, -1.1444091796875e-05, -6.29425048828125e-05, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -0.0034933090209960938, -6.866455078125e-05, -0.010709160938858986, -2.09808349609375e-05, -0.0003032684326171875, -4.9591064453125e-05, 0.0, -0.0001888275146484375, -0.0010776519775390625, -1.9073486328125e-06, 0.0, -0.00098419189453125, 0.0, -0.008671283721923828, -0.000102996826171875, -0.0003300905227661133, -7.62939453125e-06, -0.3648557662963867, -0.000156402587890625, -1.33514404296875e-05, 0.0, -0.0021076202392578125, -3.62396240234375e-05, -1.5753405094146729, -1.9073486328125e-06, -0.0075531005859375, -4.76837158203125e-05, -1.9073486328125e-06, -3.4332275390625e-05, -0.0001392364501953125, -2.09808349609375e-05, 0.0, -0.001819610595703125, 0.0, -0.007921338081359863, -4.9591064453125e-05, -0.004524350166320801, -7.62939453125e-06], "score": -5.173708283567947, "model_output": {"hole4": "player", "hole0": "Flamestrike", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole1": 7, "hole2": "MAGE", "_type": "Template14", "hole0": "Flamestrike"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.extend(game.current_player.minions)\n"}, {"choice_history": [121, 200, "Flamestrike", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>"], "score_history": [-0.0001068115234375, -0.00014495849609375, -2.7179703465662897e-05, -1.811964830267243e-05, -7.977010682225227e-06, -4.589557647705078e-05, -2.491474151611328e-05, -0.0035877227783203125, -0.003887176513671875, -0.00011444091796875, -2.2292111680144444e-05, -1.9073486328125e-06, -0.0001990600721910596, -1.9073486328125e-06, -0.0013867616653442383, -7.62939453125e-06, -7.62939453125e-06, 0.0, -8.797636110102758e-05, 0.0, -3.814697265625e-06, -0.000408172607421875, -1.33514404296875e-05, -3.063678741455078e-05, 0.0, -3.123414993286133, -4.9591064453125e-05, -0.021266937255859375, -2.6702880859375e-05, -1.33514404296875e-05, -0.0029277801513671875, -5.7220458984375e-06, -0.022071242332458496, -3.457069396972656e-05, -1.33514404296875e-05, -6.29425048828125e-05, -7.62939453125e-06, -3.814697265625e-06, -0.00032806396484375, -1.9073486328125e-06, -0.0004225969023536891, -5.53131103515625e-05, -0.0002290010015713051, 0.0, -0.0002002716064453125, -0.0003337860107421875, 0.0, -0.0002231597900390625, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -6.4849853515625e-05, -2.3841855067985307e-07, -0.0009584426297806203, 0.0, -9.822782885748893e-05, -1.1444091796875e-05, -6.29425048828125e-05, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -0.0034933090209960938, -6.866455078125e-05, -0.010709160938858986, -2.09808349609375e-05, -0.0003032684326171875, -4.9591064453125e-05, 0.0, -0.0001888275146484375, -0.0010776519775390625, -1.9073486328125e-06, 0.0, -0.00098419189453125, 0.0, -0.008671283721923828, -0.000102996826171875, -0.0003300905227661133, -7.62939453125e-06, -0.3648557662963867, -0.000156402587890625, -1.33514404296875e-05, 0.0, -0.0021076202392578125, -3.62396240234375e-05, -0.23926091194152832, 0.0, -1.9073486328125e-05, -0.0019283294677734375, 0.0, -2.288818359375e-05, -0.0001468658447265625, -6.103515625e-05, 0.0, -0.0021266937255859375, 0.0, -0.019335508346557617, -5.7220458984375e-06, -1.415333867073059, -5.7220458984375e-06], "score": -5.254492723608536, "model_output": {"hole4": "player", "hole0": "Flamestrike", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"hole1": "append", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole1": 7, "hole2": "MAGE", "_type": "Template14", "hole0": "Flamestrike"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.current_player.minions)\n"}, {"choice_history": [121, 200, "Flamestrike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "4", "<EOS>", 110], "score_history": [-0.0001068115234375, -0.00014495849609375, -2.7179703465662897e-05, -1.811964830267243e-05, -7.977010682225227e-06, -4.589557647705078e-05, -2.491474151611328e-05, -0.0035877227783203125, -5.673966407775879, -0.000850677490234375, -4.053114935231861e-06, 0.0, -5.6028297876764555e-06, 0.0, -0.008083343505859375, -2.288818359375e-05, -0.32869529724121094, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -5.841253368998878e-06, 0.0, -3.814697265625e-06, -0.0003528594970703125, -1.33514404296875e-05, -2.288818359375e-05, 0.0, -0.17695999145507812, -0.0001697540283203125, -0.000213623046875, -0.0001201629638671875, -0.000171661376953125, -1.33514404296875e-05, -0.00014662214380223304, -3.933904736186378e-06, -0.0004253387451171875, -0.0003223419189453125, -1.1444091796875e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -0.00015473364328499883, -2.09808349609375e-05, -0.00015664086095057428, 0.0, -3.814697265625e-05, -0.0001220703125, 0.0, -0.0002040863037109375, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -7.2479248046875e-05, -2.3841855067985307e-07, -0.0007257460965774953, -1.1920928244535389e-07, -0.0002468720485921949, -1.1444091796875e-05, -0.0002899169921875, -1.52587890625e-05, -6.67572021484375e-05, -0.0001163482666015625, -1.9073486328125e-06, -0.00017631046648602933, -6.222531374078244e-05, -0.0001635407970752567, -1.1920928244535389e-07, -6.29425048828125e-05, -0.0023012161254882812, -1.52587890625e-05, -3.24249267578125e-05, -1.8715856640483253e-05, -3.6954863844584906e-06, -0.001136038452386856, -2.0265579223632812e-06, -0.000545501708984375], "score": -6.201362183706536, "model_output": {"hole4": "player", "hole0": "Flamestrike", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 7, "hole2": "MAGE", "_type": "Template15", "hole3": "COMMON", "hole0": "Flamestrike"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(4), self)\n"}, {"choice_history": [121, 200, "Flamestrike", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110], "score_history": [-0.0001068115234375, -0.00014495849609375, -2.7179703465662897e-05, -1.811964830267243e-05, -7.977010682225227e-06, -4.589557647705078e-05, -2.491474151611328e-05, -0.0035877227783203125, -0.003887176513671875, -0.00011444091796875, -2.2292111680144444e-05, -1.9073486328125e-06, -0.0001990600721910596, -1.9073486328125e-06, -0.0013867616653442383, -7.62939453125e-06, -7.62939453125e-06, 0.0, -8.797636110102758e-05, 0.0, -3.814697265625e-06, -0.000408172607421875, -1.33514404296875e-05, -3.063678741455078e-05, 0.0, -0.047760009765625, -6.29425048828125e-05, -0.0002288818359375, -0.0001392364501953125, -0.00025177001953125, -1.52587890625e-05, -0.00018214115698356181, -4.41074053014745e-06, -0.000492095947265625, -0.0001430511474609375, -1.52587890625e-05, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -0.00016415117715951055, -1.9073486328125e-05, -0.00015747534052934498, 0.0, -3.62396240234375e-05, -0.0001163482666015625, 0.0, -0.0002040863037109375, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -6.866455078125e-05, -2.3841855067985307e-07, -0.0007047652616165578, -1.1920928244535389e-07, -0.00024043567827902734, -1.1444091796875e-05, -0.000308990478515625, -1.52587890625e-05, -6.67572021484375e-05, -0.00011444091796875, -1.9073486328125e-06, -0.00017249576922040433, -6.19869097135961e-05, -0.0001623489079065621, -1.1920928244535389e-07, -6.29425048828125e-05, -0.0023851394653320312, -1.52587890625e-05, -3.24249267578125e-05, -1.8715856640483253e-05, -3.6954863844584906e-06, -7.013922214508057, -8.344646857949556e-07, -4.38690185546875e-05], "score": -7.078587704265672, "model_output": {"hole4": "player", "hole0": "Flamestrike", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 7, "hole2": "MAGE", "_type": "Template14", "hole0": "Flamestrike"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n"}, {"choice_history": [121, 200, "Flamestrike", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "4", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "4", "<EOS>", 110], "score_history": [-0.0001068115234375, -0.00014495849609375, -2.7179703465662897e-05, -1.811964830267243e-05, -7.977010682225227e-06, -4.589557647705078e-05, -2.491474151611328e-05, -0.0035877227783203125, -0.003887176513671875, -0.00011444091796875, -2.2292111680144444e-05, -1.9073486328125e-06, -0.0001990600721910596, -1.9073486328125e-06, -0.0013867616653442383, -7.62939453125e-06, -7.62939453125e-06, 0.0, -8.797636110102758e-05, 0.0, -3.814697265625e-06, -0.000408172607421875, -1.33514404296875e-05, -3.063678741455078e-05, 0.0, -6.325559616088867, -0.0002193450927734375, -0.007091522216796875, -4.76837158203125e-05, -0.0001544952392578125, -3.814697265625e-05, -5.4239942983258516e-05, -6.556510470545618e-06, -0.00078582763671875, -4.1961669921875e-05, -4.57763671875e-05, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -0.00017201899026986212, -1.9073486328125e-05, -0.000122904748423025, 0.0, -3.0517578125e-05, -0.0001087188720703125, 0.0, -0.00022125244140625, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -6.29425048828125e-05, -2.3841855067985307e-07, -0.000661611498799175, -1.1920928244535389e-07, -0.00022100562637206167, -1.1444091796875e-05, -0.0002231597900390625, -1.33514404296875e-05, -5.340576171875e-05, -0.0001220703125, -1.9073486328125e-06, -0.00017964831204153597, -6.818538531661034e-05, -0.0001714070822345093, -1.1920928244535389e-07, -5.91278076171875e-05, -0.0024290084838867188, -1.52587890625e-05, -3.24249267578125e-05, -1.8715856640483253e-05, -3.4570680327306036e-06, -0.0011971878120675683, -2.0265579223632812e-06, -0.0005550384521484375, -0.3046903610229492, -0.0003337860107421875, -9.5367431640625e-05, -1.9073486328125e-06, -1.5497207641601562e-05, -2.300739288330078e-05, -0.38347339630126953, -1.9073486328125e-06, -0.07904434204101562, -2.09808349609375e-05, -0.00014495849609375, 0.0, -0.000186920166015625, 0.0, -0.047803521156311035, -1.0728830375228426e-06, -0.008461949415504932, -3.814697265625e-06, -0.0003147125244140625, -1.33514404296875e-05, -6.103515625e-05, -0.0011310577392578125, -3.814697265625e-06, -3.468988506938331e-05, -3.0636696465080604e-05, -0.01966593600809574, 0.0, -0.000148773193359375, -0.0010433197021484375, -2.09808349609375e-05, -2.6702880859375e-05, -1.1682510375976562e-05, -5.960462772236497e-07, -0.001361284637823701, -1.9073486328125e-06, -0.0002765655517578125], "score": -7.199450653733166, "model_output": {"hole4": "player", "hole0": "Flamestrike", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 7, "hole2": "MAGE", "_type": "Template14", "hole0": "Flamestrike"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(4), self)\n        for minion in game.other_player.minions:\n            minion.damage(player.effective_spell_damage(4), self)\n"}, {"choice_history": [121, 200, "Flamestrike", "<EOS>", "Spell", "Card", "<EOS>", 333, 139, 204, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "minion", "<EOS>", "deathrattle", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "4", "<EOS>", 110], "score_history": [-0.0001068115234375, -0.00014495849609375, -2.7179703465662897e-05, -1.811964830267243e-05, -7.977010682225227e-06, -4.589557647705078e-05, -2.491474151611328e-05, -5.976707458496094, -0.3745851516723633, -0.000484466552734375, -7.987013304955326e-06, -7.62939453125e-06, -0.00017152995860669762, -3.814697265625e-06, -0.0017606019973754883, -7.62939453125e-06, -0.48036956787109375, -5.14984130859375e-05, -0.00042724609375, -0.033931732177734375, 0.0, -0.0009593963623046875, 0.0, -0.011393547058105469, -2.0265579223632812e-06, -0.1798762083053589, 0.0, -0.0006046295166015625, -0.00017547607421875, -0.0874176025390625, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.06377518177032471, -7.43865966796875e-05, -0.00011479854583740234, 0.0, -9.1552734375e-05, -0.001220703125, 0.0, -0.0001697540283203125, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -6.4849853515625e-05, -2.3841855067985307e-07, -0.0006930828094482422, -2.3841855067985307e-07, -0.00017511671467218548, -1.33514404296875e-05, -0.0021605491638183594, 0.0, -0.0005242960760369897, 0.0, -0.013738632202148438, -0.0003070831298828125, -6.4849853515625e-05, -2.5153160095214844e-05, 0.0, -0.18511104583740234, -1.33514404296875e-05, -0.0011081695556640625, -6.4849853515625e-05, -0.0001811981201171875, -1.9073486328125e-05, -0.0003786659799516201, -6.914126061019488e-06, -0.00054168701171875, -9.5367431640625e-05, -5.7220458984375e-05, -1.33514404296875e-05, -2.09808349609375e-05, 0.0, -0.00024437898537144065, -3.4332275390625e-05, -0.0001647471362957731, 0.0, -3.4332275390625e-05, -0.0001239776611328125, 0.0, -0.0002651214599609375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -6.866455078125e-05, -2.3841855067985307e-07, -0.000768423022236675, -1.1920928244535389e-07, -0.00022315300884656608, -1.1444091796875e-05, -0.000347137451171875, -1.71661376953125e-05, -6.29425048828125e-05, -0.000118255615234375, -1.9073486328125e-06, -0.0001716613187454641, -5.817244164063595e-05, -0.0001619913091417402, -1.1920928244535389e-07, -6.67572021484375e-05, -0.0026960372924804688, -1.52587890625e-05, -3.24249267578125e-05, -1.8715856640483253e-05, -3.576277322281385e-06, -0.0011762097710743546, -2.0265579223632812e-06, -0.00054168701171875], "score": -7.427659745572228, "model_output": {"hole4": "player", "hole0": "Flamestrike", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 7, "hole2": "MAGE", "_type": "Template14", "hole0": "Flamestrike"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"attr": "deathrattle", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}], "_type": "Assign"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n        minion.deathrattle = copy.copy(game.other_player.minions)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(4), self)\n"}, {"choice_history": [121, 200, "Flamestrike", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 321, 102, 104, 110], "score_history": [-0.0001068115234375, -0.00014495849609375, -2.7179703465662897e-05, -1.811964830267243e-05, -7.977010682225227e-06, -4.589557647705078e-05, -2.491474151611328e-05, -0.0035877227783203125, -0.003887176513671875, -0.00011444091796875, -2.2292111680144444e-05, -1.9073486328125e-06, -0.0001990600721910596, -1.9073486328125e-06, -0.0013867616653442383, -7.62939453125e-06, -7.62939453125e-06, 0.0, -8.797636110102758e-05, 0.0, -3.814697265625e-06, -0.000408172607421875, -1.33514404296875e-05, -3.063678741455078e-05, 0.0, -0.047760009765625, -6.29425048828125e-05, -0.0002288818359375, -0.0001392364501953125, -0.00025177001953125, -1.52587890625e-05, -0.00018214115698356181, -4.41074053014745e-06, -0.000492095947265625, -0.0001430511474609375, -1.52587890625e-05, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -0.00016415117715951055, -1.9073486328125e-05, -0.00015747534052934498, 0.0, -3.62396240234375e-05, -0.0001163482666015625, 0.0, -0.0002040863037109375, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -6.866455078125e-05, -2.3841855067985307e-07, -0.0007047652616165578, -1.1920928244535389e-07, -0.00024043567827902734, -1.1444091796875e-05, -0.000308990478515625, -1.52587890625e-05, -6.67572021484375e-05, -0.00011444091796875, -1.9073486328125e-06, -0.00017249576922040433, -6.19869097135961e-05, -0.0001623489079065621, -1.1920928244535389e-07, -6.29425048828125e-05, -6.57869815826416, -0.0015087127685546875, -0.0006275177001953125, -1.9073486328125e-06, -0.000179290771484375, -0.0073108673095703125, 0.0, -9.5367431640625e-06, -0.17354393005371094, -0.005738258361816406, -0.002044677734375, -1.9073486328125e-06, -0.000598907470703125, -1.9073486328125e-06, -0.006923556327819824, -5.960462772236497e-07, -0.49192750453948975, -2.3841855067985307e-07, -0.2457141876220703, -0.12974834442138672, -0.00469207763671875, -0.008466720581054688], "score": -7.7199043565671985, "model_output": {"hole4": "player", "hole0": "Flamestrike", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"func": {"attr": "effective_spell_damage", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"func": {"attr": "<UNK>", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Template59"}, {"_type": "Template61"}]}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 7, "hole2": "MAGE", "_type": "Template14", "hole0": "Flamestrike"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(game.<UNK>(2, 3)), self\n                )\n"}, {"choice_history": [121, 200, "Flamestrike", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "4", "<EOS>", 110], "score_history": [-0.0001068115234375, -0.00014495849609375, -2.7179703465662897e-05, -1.811964830267243e-05, -7.977010682225227e-06, -4.589557647705078e-05, -2.491474151611328e-05, -0.0035877227783203125, -0.003887176513671875, -0.00011444091796875, -2.2292111680144444e-05, -1.9073486328125e-06, -0.0001990600721910596, -1.9073486328125e-06, -0.0013867616653442383, -7.62939453125e-06, -7.62939453125e-06, 0.0, -8.797636110102758e-05, 0.0, -3.814697265625e-06, -0.000408172607421875, -1.33514404296875e-05, -3.063678741455078e-05, 0.0, -0.047760009765625, -6.29425048828125e-05, -0.0002288818359375, -0.0001392364501953125, -0.00025177001953125, -1.52587890625e-05, -0.00018214115698356181, -4.41074053014745e-06, -0.000492095947265625, -0.0001430511474609375, -1.52587890625e-05, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -0.00016415117715951055, -1.9073486328125e-05, -0.00015747534052934498, 0.0, -3.62396240234375e-05, -0.0001163482666015625, 0.0, -0.0002040863037109375, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -6.866455078125e-05, -2.3841855067985307e-07, -7.716538429260254, -2.09808349609375e-05, -0.00010621546971378848, -9.5367431640625e-06, -0.00012969970703125, -0.00018310546875, -8.0108642578125e-05, -0.0001220703125, -1.9073486328125e-06, -0.00019264218281023204, -3.373566141817719e-05, -0.00017486368597019464, -1.1920928244535389e-07, -6.4849853515625e-05, -0.0020265579223632812, -1.52587890625e-05, -3.0517578125e-05, -1.8835065930034034e-05, -4.053113570989808e-06, -0.0010393676348030567, -2.0265579223632812e-06, -0.0005931854248046875], "score": -7.781629605939052, "model_output": {"hole4": "player", "hole0": "Flamestrike", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 7, "hole2": "MAGE", "_type": "Template14", "hole0": "Flamestrike"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.current_player.minions):\n            minion.damage(player.effective_spell_damage(4), self)\n"}, {"choice_history": [121, 200, "Flamestrike", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>"], "score_history": [-0.0001068115234375, -0.00014495849609375, -2.7179703465662897e-05, -1.811964830267243e-05, -7.977010682225227e-06, -4.589557647705078e-05, -2.491474151611328e-05, -0.0035877227783203125, -0.003887176513671875, -0.00011444091796875, -2.2292111680144444e-05, -1.9073486328125e-06, -0.0001990600721910596, -1.9073486328125e-06, -0.0013867616653442383, -7.62939453125e-06, -7.62939453125e-06, 0.0, -8.797636110102758e-05, 0.0, -3.814697265625e-06, -0.000408172607421875, -1.33514404296875e-05, -3.063678741455078e-05, 0.0, -3.123414993286133, -4.9591064453125e-05, -0.021266937255859375, -2.6702880859375e-05, -1.33514404296875e-05, -0.0029277801513671875, -5.7220458984375e-06, -0.022071242332458496, -3.457069396972656e-05, -1.33514404296875e-05, -6.29425048828125e-05, -7.62939453125e-06, -3.814697265625e-06, -0.00032806396484375, -1.9073486328125e-06, -0.0004225969023536891, -5.53131103515625e-05, -0.0002290010015713051, 0.0, -0.0002002716064453125, -0.0003337860107421875, 0.0, -0.0002231597900390625, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -6.4849853515625e-05, -2.3841855067985307e-07, -0.0009584426297806203, 0.0, -9.822782885748893e-05, -1.1444091796875e-05, -6.29425048828125e-05, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -0.0034933090209960938, -6.866455078125e-05, -0.010709160938858986, -2.09808349609375e-05, -0.0003032684326171875, -4.9591064453125e-05, 0.0, -0.0001888275146484375, -0.0010776519775390625, -1.9073486328125e-06, 0.0, -0.00098419189453125, 0.0, -0.008671283721923828, -0.000102996826171875, -0.0003300905227661133, -7.62939453125e-06, -0.3648557662963867, -0.000156402587890625, -1.33514404296875e-05, 0.0, -0.0021076202392578125, -3.62396240234375e-05, -0.23926091194152832, 0.0, -1.9073486328125e-05, -0.0019283294677734375, 0.0, -2.288818359375e-05, -0.0001468658447265625, -6.103515625e-05, 0.0, -0.0021266937255859375, 0.0, -4.000120639801025, 0.0, -0.054969191551208496, -5.841255187988281e-06], "score": -7.874907576704544, "model_output": {"hole4": "player", "hole0": "Flamestrike", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"hole1": "append", "hole2": [{"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole1": 7, "hole2": "MAGE", "_type": "Template14", "hole0": "Flamestrike"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.other_player.hero)\n"}, {"choice_history": [121, 200, "Flamestrike", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Flamestrike", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "4", "<EOS>", 110], "score_history": [-0.0001068115234375, -0.00014495849609375, -2.7179703465662897e-05, -1.811964830267243e-05, -7.977010682225227e-06, -4.589557647705078e-05, -2.491474151611328e-05, -0.0035877227783203125, -0.003887176513671875, -0.00011444091796875, -2.2292111680144444e-05, -1.9073486328125e-06, -0.0001990600721910596, -1.9073486328125e-06, -7.977821350097656, -0.0001735687255859375, -3.814697265625e-06, 0.0, -9.322101686848328e-05, 0.0, -1.9073486328125e-06, -0.000171661376953125, -1.1444091796875e-05, -1.52587890625e-05, 0.0, -0.03219413757324219, -0.000110626220703125, -0.0002841949462890625, -0.000118255615234375, -0.000213623046875, -9.5367431640625e-06, -0.0002038341626757756, -5.006785613659304e-06, -0.0005359649658203125, -0.00016021728515625, -1.33514404296875e-05, -5.7220458984375e-06, -2.288818359375e-05, 0.0, -0.00016999243234749883, -1.9073486328125e-05, -0.00016379341832362115, 0.0, -3.814697265625e-05, -0.0001239776611328125, 0.0, -0.0001811981201171875, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -7.05718994140625e-05, -2.3841855067985307e-07, -0.0007259845151565969, -1.1920928244535389e-07, -0.0002452033804729581, -1.1444091796875e-05, -0.00031280517578125, -1.52587890625e-05, -6.67572021484375e-05, -0.0001163482666015625, -1.9073486328125e-06, -0.00017237655993085355, -6.12716976320371e-05, -0.00016365997726097703, -1.1920928244535389e-07, -6.29425048828125e-05, -0.002376556396484375, -1.52587890625e-05, -3.24249267578125e-05, -1.8715856640483253e-05, -3.6954863844584906e-06, -0.001147958915680647, -2.0265579223632812e-06, -0.0005474090576171875], "score": -8.027242444061997, "model_output": {"hole4": "player", "hole0": "Flamestrike", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 7, "hole2": "PRIEST", "_type": "Template14", "hole0": "Flamestrike"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(4), self)\n"}, {"choice_history": [121, 200, "Flamestrike", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "4", "<EOS>", 110], "score_history": [-0.0001068115234375, -0.00014495849609375, -2.7179703465662897e-05, -1.811964830267243e-05, -7.977010682225227e-06, -4.589557647705078e-05, -2.491474151611328e-05, -0.0035877227783203125, -0.003887176513671875, -0.00011444091796875, -2.2292111680144444e-05, -1.9073486328125e-06, -0.0001990600721910596, -1.9073486328125e-06, -0.0013867616653442383, -7.62939453125e-06, -7.62939453125e-06, 0.0, -8.797636110102758e-05, 0.0, -3.814697265625e-06, -0.000408172607421875, -1.33514404296875e-05, -3.063678741455078e-05, 0.0, -0.047760009765625, -6.29425048828125e-05, -0.0002288818359375, -0.0001392364501953125, -0.00025177001953125, -1.52587890625e-05, -0.00018214115698356181, -4.41074053014745e-06, -7.972970962524414, -5.7220458984375e-06, -0.029085159301757812, -2.09808349609375e-05, -0.00045013427734375, 0.0, -0.000209808349609375, 0.0, -0.005010008811950684, -1.1920928244535389e-07, -0.005152449477463961, -3.814697265625e-06, -0.0003185272216796875, -7.62939453125e-06, -0.000152587890625, -0.0010929107666015625, 0.0, -7.021427154541016e-05, -8.34464663057588e-06, -0.02014746516942978, 0.0, -0.00030517578125, -0.0021686553955078125, -1.9073486328125e-05, -3.814697265625e-05, -1.1682510375976562e-05, -5.960462772236497e-07, -0.001146630384027958, 0.0, -0.000339508056640625], "score": -8.097517294925915, "model_output": {"hole4": "player", "hole0": "Flamestrike", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 7, "hole2": "MAGE", "_type": "Template14", "hole0": "Flamestrike"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.damage(player.effective_spell_damage(4), self)\n"}, {"choice_history": [121, 200, "Flamestrike", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Flamestrike", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "4", "<EOS>", 110], "score_history": [-0.0001068115234375, -0.00014495849609375, -2.7179703465662897e-05, -1.811964830267243e-05, -7.977010682225227e-06, -4.589557647705078e-05, -2.491474151611328e-05, -0.0035877227783203125, -0.003887176513671875, -0.00011444091796875, -2.2292111680144444e-05, -1.9073486328125e-06, -0.0001990600721910596, -1.9073486328125e-06, -8.173784255981445, -2.47955322265625e-05, -1.1444091796875e-05, 0.0, -9.679760114522651e-05, 0.0, -1.9073486328125e-06, -0.0003261566162109375, -1.1444091796875e-05, -2.288818359375e-05, 0.0, -0.07750320434570312, -0.0001087188720703125, -0.0002460479736328125, -0.0001544952392578125, -0.0002117156982421875, -1.52587890625e-05, -0.0001950146834133193, -4.768367489305092e-06, -0.0005092620849609375, -0.0001888275146484375, -1.33514404296875e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -0.00016820429300423712, -1.9073486328125e-05, -0.0001664160081418231, 0.0, -3.814697265625e-05, -0.0001239776611328125, 0.0, -0.000179290771484375, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -7.05718994140625e-05, -2.3841855067985307e-07, -0.0007219313993118703, -1.1920928244535389e-07, -0.000251163262873888, -1.1444091796875e-05, -0.0003032684326171875, -1.52587890625e-05, -6.67572021484375e-05, -0.000118255615234375, -1.9073486328125e-06, -0.00017368786211591214, -6.294052582234144e-05, -0.00016365997726097703, -1.1920928244535389e-07, -6.29425048828125e-05, -0.0023221969604492188, -1.52587890625e-05, -3.24249267578125e-05, -1.8715856640483253e-05, -3.6954863844584906e-06, -0.0011409258004277945, -2.0265579223632812e-06, -0.0005474090576171875], "score": -8.268464708293052, "model_output": {"hole4": "player", "hole0": "Flamestrike", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 7, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Flamestrike"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(4), self)\n"}], "index": 33}
{"beams": [{"choice_history": [121, 198, "Flametongue", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "2", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 320, 105], "score_history": [-0.0010662078857421875, -0.000133514404296875, -0.0001230164198204875, -1.8358061424805783e-05, -5.9604644775390625e-06, -1.1680458555929363e-05, -2.741813204920618e-06, -3.266334533691406e-05, -9.34600830078125e-05, -0.00030517578125, -0.001312255859375, -4.768370445162873e-07, -2.5153160095214844e-05, -4.172325134277344e-06, 0.0, -0.00010650604963302612, -1.9073486328125e-06, -0.002834320068359375, -1.9073486328125e-06, -0.01832258701324463, -1.9073486328125e-06, -0.003204345703125, -1.9073486328125e-06, -0.0005035400390625, 0.0, -1.52587890625e-05, 0.0, -0.007855892181396484, 0.0, -0.0017604827880859375, 0.0, -0.0001888275146484375, 0.0, -7.82012939453125e-05, -0.009801864624023438, -0.001590728759765625, -2.503394853192731e-06, -6.198863957251888e-06, -8.583047019783407e-06, -1.1920928244535389e-07, -0.0021195404697209597, -1.9073486328125e-06, -0.0003509521484375, -7.82012939453125e-05, -0.0013980865478515625, -0.0002536773681640625, -0.000148773193359375, -0.0001544952392578125, -0.000209808349609375, -0.017559250816702843, -4.8041343688964844e-05, -0.00091552734375, -0.0006999969482421875, -0.0003675222396850586, -7.98673354438506e-05, -2.062299427052494e-05, -0.0030548060312867165, -0.00011277198063908145, -6.866455078125e-05, -4.9591064453125e-05], "score": -0.07711453024068504, "model_output": {"hole4": "player", "hole0": "FlametongueTotem", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Flametongue Totem", "hole1": 2, "hole2": "SHAMAN", "_type": "Template11", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 2}, {"hole1": "Adjacent", "_type": "Template31", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 0}]}, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(\n            Adjacent()))])\n"}, {"choice_history": [121, 198, "Flametongue", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 93, 255, "Adjacent", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "0", "<EOS>", "3", "<EOS>"], "score_history": [-0.0010662078857421875, -0.000133514404296875, -0.0001230164198204875, -1.8358061424805783e-05, -5.9604644775390625e-06, -1.1680458555929363e-05, -2.741813204920618e-06, -3.266334533691406e-05, -9.34600830078125e-05, -0.00030517578125, -0.001312255859375, -4.768370445162873e-07, -2.5153160095214844e-05, -4.172325134277344e-06, 0.0, -0.00010650604963302612, -1.9073486328125e-06, -0.002834320068359375, -1.9073486328125e-06, -4.1422295570373535, 0.0, -0.20346546173095703, -0.05398368835449219, -0.2003556191921234, -3.278255098848604e-05, -0.0040283203125, -0.061203956604003906, -0.0008029937744140625, -0.012006467208266258, -5.7220458984375e-06, -0.8668034076690674, -1.1920928244535389e-07, 0.0, -0.0022863149642944336, 0.0, -0.00010657279926817864, 0.0, -5.340576171875e-05, -0.002407073974609375, -3.814697265625e-05, -0.00023815179883968085, -7.16447684681043e-05, -0.00122547778300941, -3.814697265625e-06], "score": -5.557428176923501, "model_output": {"hole4": "player", "hole0": "FlametongueTotem", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Template46", "hole0": "Adjacent"}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "Give"}, "hole0": "Flametongue Totem", "hole1": 2, "hole2": "SHAMAN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "_type": "Template32", "hole0": 0}]}, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(Adjacent()),\n            HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(0, 3)\n"}, {"choice_history": [121, 198, "Flametongue", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 93, 255, "Adjacent", "<EOS>", "Minion", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "0", "<EOS>", "3", "<EOS>"], "score_history": [-0.0010662078857421875, -0.000133514404296875, -0.0001230164198204875, -1.8358061424805783e-05, -5.9604644775390625e-06, -1.1680458555929363e-05, -2.741813204920618e-06, -3.266334533691406e-05, -9.34600830078125e-05, -0.00030517578125, -0.001312255859375, -4.768370445162873e-07, -2.5153160095214844e-05, -4.172325134277344e-06, 0.0, -0.00010650604963302612, -1.9073486328125e-06, -0.002834320068359375, -1.9073486328125e-06, -4.1422295570373535, 0.0, -0.20346546173095703, -0.05398368835449219, -0.2003556191921234, -3.278255098848604e-05, -0.0040283203125, -0.061203956604003906, -0.0008029937744140625, -0.012006467208266258, -5.7220458984375e-06, -1.1487351655960083, -1.9073486328125e-06, -1.9073486328125e-06, -0.0036696195602416992, 0.0, -9.894306276692078e-05, 0.0, -6.4849853515625e-05, -0.0020771026611328125, -3.814697265625e-05, -0.00030882356804795563, -6.496905552921817e-05, -0.0014404675457626581, -1.9073486328125e-06], "score": -5.840697856446582, "model_output": {"hole4": "player", "hole0": "FlametongueTotem", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Template46", "hole0": "Adjacent"}], "hole2": "MinionSelector", "_type": "Template22", "hole0": "Give"}, "hole0": "Flametongue Totem", "hole1": 2, "hole2": "SHAMAN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "_type": "Template32", "hole0": 0}]}, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(Adjacent()),\n            MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(0, 3)\n"}, {"choice_history": [121, 198, "Flametongue", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "6", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 320, 105], "score_history": [-0.0010662078857421875, -0.000133514404296875, -0.0001230164198204875, -1.8358061424805783e-05, -5.9604644775390625e-06, -1.1680458555929363e-05, -2.741813204920618e-06, -3.266334533691406e-05, -9.34600830078125e-05, -0.00030517578125, -0.001312255859375, -4.768370445162873e-07, -2.5153160095214844e-05, -4.172325134277344e-06, 0.0, -0.00010650604963302612, -1.9073486328125e-06, -0.002834320068359375, -1.9073486328125e-06, -0.01832258701324463, -1.9073486328125e-06, -0.003204345703125, -1.9073486328125e-06, -0.0005035400390625, 0.0, -1.52587890625e-05, 0.0, -0.007855892181396484, 0.0, -0.0017604827880859375, 0.0, -0.0001888275146484375, 0.0, -7.82012939453125e-05, -0.009801864624023438, -0.001590728759765625, -2.503394853192731e-06, -6.198863957251888e-06, -8.583047019783407e-06, -1.1920928244535389e-07, -0.0021195404697209597, -1.9073486328125e-06, -0.0003509521484375, -7.82012939453125e-05, -0.0013980865478515625, -0.0002536773681640625, -0.000148773193359375, -0.0001544952392578125, -0.000209808349609375, -5.852668285369873, -6.568431854248047e-05, -0.016023635864257812, -0.0006732940673828125, -0.0019040554761886597, -2.384175604674965e-05, -9.894321920000948e-06, -0.006044394802302122, -3.9696693420410156e-05, -1.1444091796875e-05, -7.2479248046875e-05], "score": -5.931674573601519, "model_output": {"hole4": "player", "hole0": "FlametongueTotem", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Flametongue Totem", "hole1": 2, "hole2": "SHAMAN", "_type": "Template11", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 6}, {"hole1": "Adjacent", "_type": "Template31", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 0}]}, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(6), MinionSelector(\n            Adjacent()))])\n"}, {"choice_history": [121, 198, "Flametongue", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "2", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 320, 105], "score_history": [-0.0010662078857421875, -0.000133514404296875, -0.0001230164198204875, -1.8358061424805783e-05, -5.9604644775390625e-06, -1.1680458555929363e-05, -2.741813204920618e-06, -3.266334533691406e-05, -9.34600830078125e-05, -0.00030517578125, -0.001312255859375, -4.768370445162873e-07, -2.5153160095214844e-05, -4.172325134277344e-06, 0.0, -0.00010650604963302612, -1.9073486328125e-06, -0.002834320068359375, -1.9073486328125e-06, -0.01832258701324463, -1.9073486328125e-06, -0.003204345703125, -1.9073486328125e-06, -0.0005035400390625, 0.0, -1.52587890625e-05, 0.0, -5.839395046234131, -1.9073486328125e-06, -0.000408172607421875, 0.0, -0.0001392364501953125, 0.0, -5.53131103515625e-05, -0.05319023132324219, -0.0009784698486328125, -2.622604142743512e-06, -4.887569048150908e-06, -1.03711727206246e-05, -1.1920928244535389e-07, -0.002199768554419279, -1.9073486328125e-06, -0.000316619873046875, -8.20159912109375e-05, -0.0013599395751953125, -0.0002689361572265625, -0.00014495849609375, -0.000152587890625, -0.000202178955078125, -0.016975369304418564, -4.2319297790527344e-05, -0.000911712646484375, -0.000713348388671875, -0.0003634989261627197, -7.8556127846241e-05, -2.062299427052494e-05, -0.0029791919514536858, -0.00010907649266300723, -6.4849853515625e-05, -4.76837158203125e-05], "score": -5.949350543974212, "model_output": {"hole4": "player", "hole0": "FlametongueTotem", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Flametongue Totem", "hole1": 2, "hole2": "SHAMAN", "_type": "Template11", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 2}, {"hole1": "Adjacent", "_type": "Template31", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 0}]}, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(\n            Adjacent()))])\n"}, {"choice_history": [121, 198, "Flametongue", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "4", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 320, 105], "score_history": [-0.0010662078857421875, -0.000133514404296875, -0.0001230164198204875, -1.8358061424805783e-05, -5.9604644775390625e-06, -1.1680458555929363e-05, -2.741813204920618e-06, -3.266334533691406e-05, -9.34600830078125e-05, -0.00030517578125, -0.001312255859375, -4.768370445162873e-07, -2.5153160095214844e-05, -4.172325134277344e-06, 0.0, -0.00010650604963302612, -1.9073486328125e-06, -0.002834320068359375, -1.9073486328125e-06, -0.01832258701324463, -1.9073486328125e-06, -0.003204345703125, -1.9073486328125e-06, -0.0005035400390625, 0.0, -1.52587890625e-05, 0.0, -0.007855892181396484, 0.0, -0.0017604827880859375, 0.0, -0.0001888275146484375, 0.0, -7.82012939453125e-05, -0.009801864624023438, -0.001590728759765625, -2.503394853192731e-06, -6.198863957251888e-06, -8.583047019783407e-06, -1.1920928244535389e-07, -0.0021195404697209597, -1.9073486328125e-06, -0.0003509521484375, -7.82012939453125e-05, -0.0013980865478515625, -0.0002536773681640625, -0.000148773193359375, -0.0001544952392578125, -0.000209808349609375, -5.924799919128418, -5.364418029785156e-05, -0.0018157958984375, -0.00086212158203125, -0.0005526542663574219, -4.088823334313929e-05, -1.4066597032069694e-05, -0.004385156091302633, -3.969668614445254e-05, -1.33514404296875e-05, -6.67572021484375e-05], "score": -5.986781918897684, "model_output": {"hole4": "player", "hole0": "FlametongueTotem", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Flametongue Totem", "hole1": 2, "hole2": "SHAMAN", "_type": "Template11", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 4}, {"hole1": "Adjacent", "_type": "Template31", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 0}]}, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(4), MinionSelector(\n            Adjacent()))])\n"}, {"choice_history": [121, 198, "Flametongue", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "3", "<EOS>", 328, 119, 310, "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "2", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 320, 105, 119, 310, "taunt", "<EOS>", 62], "score_history": [-0.0010662078857421875, -0.000133514404296875, -0.0001230164198204875, -1.8358061424805783e-05, -5.9604644775390625e-06, -1.1680458555929363e-05, -2.741813204920618e-06, -3.266334533691406e-05, -9.34600830078125e-05, -0.00030517578125, -0.001312255859375, -4.768370445162873e-07, -2.5153160095214844e-05, -4.172325134277344e-06, 0.0, -0.00010650604963302612, -1.9073486328125e-06, -0.002834320068359375, -1.9073486328125e-06, -0.01832258701324463, -1.9073486328125e-06, -0.003204345703125, -1.9073486328125e-06, -0.0005035400390625, 0.0, -1.52587890625e-05, 0.0, -0.007855892181396484, 0.0, -0.0017604827880859375, 0.0, -0.0001888275146484375, 0.0, -7.82012939453125e-05, -4.683807373046875, -0.0001850128173828125, -7.271765298355604e-06, -0.012142181396484375, -4.2915289668599144e-05, -9.536738616588991e-07, -8.606554911239073e-05, -3.576278118089249e-07, -0.08657073974609375, -0.000133514404296875, -1.9073486328125e-06, -0.4783898591995239, -3.814697265625e-06, -0.024295806884765625, -0.0001506805419921875, -0.00225067138671875, -0.002025604248046875, -0.00029754638671875, -0.000438690185546875, -0.0005340576171875, -0.027893900871276855, -8.392333984375e-05, -0.0013637542724609375, -0.000244140625, -0.00027170777320861816, -5.566939216805622e-05, -1.6331539882230572e-05, -0.0025600246153771877, -6.532669067382812e-05, -4.38690185546875e-05, -6.103515625e-05, -0.007488250732421875, -0.020608901977539062, -0.6623163223266602, 0.0, -0.02091217041015625], "score": -6.073362780288619, "model_output": {"hole4": "player", "hole0": "FlametongueTotem", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Flametongue Totem", "hole1": 2, "hole2": "SHAMAN", "_type": "Template11", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 3, "_type": "Template36", "hole3": [{"value": {"hole1": [{"_type": "Template38", "hole0": 2}, {"hole1": "Adjacent", "_type": "Template31", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "arg": "auras", "_type": "keyword"}, {"value": {"_type": "Template79"}, "arg": "taunt", "_type": "keyword"}], "hole0": "Minion"}]}, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(\n            Adjacent()))], taunt=True)\n"}, {"choice_history": [121, 198, "Flametongue", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "2", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 320, 105], "score_history": [-0.0010662078857421875, -0.000133514404296875, -0.0001230164198204875, -1.8358061424805783e-05, -5.9604644775390625e-06, -1.1680458555929363e-05, -2.741813204920618e-06, -3.266334533691406e-05, -9.34600830078125e-05, -0.00030517578125, -0.001312255859375, -4.768370445162873e-07, -2.5153160095214844e-05, -4.172325134277344e-06, 0.0, -0.00010650604963302612, -1.9073486328125e-06, -0.002834320068359375, -1.9073486328125e-06, -0.01832258701324463, -1.9073486328125e-06, -0.003204345703125, -1.9073486328125e-06, -0.0005035400390625, 0.0, -1.52587890625e-05, 0.0, -6.005815029144287, 0.0, -0.0004787445068359375, 0.0, -4.38690185546875e-05, 0.0, -9.5367431640625e-05, -0.03331756591796875, -0.0011043548583984375, -3.099440846199286e-06, -5.006777428206988e-06, -1.1205629562027752e-05, -1.1920928244535389e-07, -0.002164482604712248, -1.9073486328125e-06, -0.00031280517578125, -7.62939453125e-05, -0.0013561248779296875, -0.00025177001953125, -0.000148773193359375, -0.0001621246337890625, -0.000186920166015625, -0.016533223912119865, -4.0531158447265625e-05, -0.0009250640869140625, -0.0007152557373046875, -0.00036907196044921875, -7.807932706782594e-05, -2.0265373677830212e-05, -0.0030002647545188665, -0.00010716914403019473, -7.62939453125e-05, -5.14984130859375e-05], "score": -6.095581305668581, "model_output": {"hole4": "player", "hole0": "FlametongueTotem", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "DEMON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Flametongue Totem", "hole1": 2, "hole2": "SHAMAN", "_type": "Template11", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 2}, {"hole1": "Adjacent", "_type": "Template31", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 0}]}, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(\n            Adjacent()))])\n"}, {"choice_history": [121, 198, "Flametongue", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "2", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 320, 105], "score_history": [-0.0010662078857421875, -0.000133514404296875, -0.0001230164198204875, -1.8358061424805783e-05, -5.9604644775390625e-06, -1.1680458555929363e-05, -2.741813204920618e-06, -3.266334533691406e-05, -9.34600830078125e-05, -0.00030517578125, -0.001312255859375, -4.768370445162873e-07, -2.5153160095214844e-05, -4.172325134277344e-06, 0.0, -0.00010650604963302612, -1.9073486328125e-06, -0.002834320068359375, -1.9073486328125e-06, -0.01832258701324463, -1.9073486328125e-06, -6.026954650878906, -0.0016078948974609375, -1.9073486328125e-06, -0.006101846694946289, 0.0, -0.0003719329833984375, -0.06832313537597656, -0.000946044921875, -3.4570680327306036e-06, -5.8412379075889476e-06, -5.6028297876764555e-06, 0.0, -0.0011919682146981359, -1.9073486328125e-06, -0.0003814697265625, -8.20159912109375e-05, -0.0015468597412109375, -0.000278472900390625, -0.0001506805419921875, -0.00014495849609375, -0.0002079010009765625, -0.01817670650780201, -3.4809112548828125e-05, -0.00079345703125, -0.000827789306640625, -0.0002987086772918701, -8.403933316003531e-05, -2.3483953555114567e-05, -0.0025792866945266724, -0.00010359286534367129, -6.866455078125e-05, -5.53131103515625e-05], "score": -6.155758371417846, "model_output": {"hole4": "player", "hole0": "FlametongueTotem", "hole1": "MinionCard", "hole2": [{"hole4": {"_type": "Template53"}, "hole0": "Flametongue Totem", "hole1": 2, "hole2": "SHAMAN", "_type": "Template11", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 2}, {"hole1": "Adjacent", "_type": "Template31", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 0}]}, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(\n            Adjacent()))])\n"}, {"choice_history": [121, 198, "Flametongue", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "3", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 320, 105], "score_history": [-0.0010662078857421875, -0.000133514404296875, -0.0001230164198204875, -1.8358061424805783e-05, -5.9604644775390625e-06, -1.1680458555929363e-05, -2.741813204920618e-06, -3.266334533691406e-05, -9.34600830078125e-05, -0.00030517578125, -0.001312255859375, -4.768370445162873e-07, -2.5153160095214844e-05, -4.172325134277344e-06, 0.0, -0.00010650604963302612, -1.9073486328125e-06, -0.002834320068359375, -1.9073486328125e-06, -0.01832258701324463, -1.9073486328125e-06, -0.003204345703125, -1.9073486328125e-06, -0.0005035400390625, 0.0, -1.52587890625e-05, 0.0, -0.007855892181396484, 0.0, -0.0017604827880859375, 0.0, -0.0001888275146484375, 0.0, -7.82012939453125e-05, -0.009801864624023438, -0.001590728759765625, -2.503394853192731e-06, -6.198863957251888e-06, -8.583047019783407e-06, -1.1920928244535389e-07, -0.0021195404697209597, -1.9073486328125e-06, -0.0003509521484375, -7.82012939453125e-05, -0.0013980865478515625, -0.0002536773681640625, -0.000148773193359375, -0.0001544952392578125, -0.000209808349609375, -6.1391282081604, -0.0004658699035644531, -0.034618377685546875, -0.0009212493896484375, -0.008129073306918144, -2.157687231374439e-05, -5.245195097813848e-06, -0.007201112806797028, -4.2438507080078125e-05, -1.52587890625e-05, -0.0001087188720703125], "score": -6.244794997080241, "model_output": {"hole4": "player", "hole0": "FlametongueTotem", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Flametongue Totem", "hole1": 2, "hole2": "SHAMAN", "_type": "Template11", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 3}, {"hole1": "Adjacent", "_type": "Template31", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 0}]}, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(3), MinionSelector(\n            Adjacent()))])\n"}, {"choice_history": [121, 198, "Flametongue", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "5", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 320, 105], "score_history": [-0.0010662078857421875, -0.000133514404296875, -0.0001230164198204875, -1.8358061424805783e-05, -5.9604644775390625e-06, -1.1680458555929363e-05, -2.741813204920618e-06, -3.266334533691406e-05, -9.34600830078125e-05, -0.00030517578125, -0.001312255859375, -4.768370445162873e-07, -2.5153160095214844e-05, -4.172325134277344e-06, 0.0, -0.00010650604963302612, -1.9073486328125e-06, -0.002834320068359375, -1.9073486328125e-06, -0.01832258701324463, -1.9073486328125e-06, -0.003204345703125, -1.9073486328125e-06, -0.0005035400390625, 0.0, -1.52587890625e-05, 0.0, -0.007855892181396484, 0.0, -0.0017604827880859375, 0.0, -0.0001888275146484375, 0.0, -7.82012939453125e-05, -0.009801864624023438, -0.001590728759765625, -2.503394853192731e-06, -6.198863957251888e-06, -8.583047019783407e-06, -1.1920928244535389e-07, -0.0021195404697209597, -1.9073486328125e-06, -0.0003509521484375, -7.82012939453125e-05, -0.0013980865478515625, -0.0002536773681640625, -0.000148773193359375, -0.0001544952392578125, -0.000209808349609375, -6.384083271026611, -0.0021954774856567383, -0.004660606384277344, -0.000362396240234375, -0.0007992386817932129, -2.9206043109297752e-05, -9.298280929215252e-06, -0.003533354727551341, -3.1590458092978224e-05, -1.9073486328125e-05, -7.43865966796875e-05], "score": -6.449935767003005, "model_output": {"hole4": "player", "hole0": "FlametongueTotem", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Flametongue Totem", "hole1": 2, "hole2": "SHAMAN", "_type": "Template11", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 5}, {"hole1": "Adjacent", "_type": "Template31", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 0}]}, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(5), MinionSelector(\n            Adjacent()))])\n"}, {"choice_history": [121, 198, "Flametongue", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 93, 255, "Adjacent", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "0", "<EOS>", "3", "<EOS>"], "score_history": [-0.0010662078857421875, -0.000133514404296875, -0.0001230164198204875, -1.8358061424805783e-05, -5.9604644775390625e-06, -1.1680458555929363e-05, -2.741813204920618e-06, -3.266334533691406e-05, -9.34600830078125e-05, -0.00030517578125, -0.001312255859375, -4.768370445162873e-07, -2.5153160095214844e-05, -4.172325134277344e-06, 0.0, -0.00010650604963302612, -1.9073486328125e-06, -0.002834320068359375, -1.9073486328125e-06, -4.1422295570373535, 0.0, -0.20346546173095703, -0.05398368835449219, -0.2003556191921234, -3.278255098848604e-05, -0.0040283203125, -0.061203956604003906, -0.0008029937744140625, -0.012006467208266258, -5.7220458984375e-06, -2.05108380317688, -2.384185791015625e-06, 0.0, -0.003017425537109375, 0.0, -0.00018024203018285334, 0.0, -5.7220458984375e-05, -0.0026760101318359375, -3.62396240234375e-05, -0.0002379134384682402, -4.935263859806582e-05, -0.0015952441608533263, -1.9073486328125e-06], "score": -6.743131789256381, "model_output": {"hole4": "player", "hole0": "FlametongueTotem", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Template46", "hole0": "Adjacent"}], "hole2": "SelfSelector", "_type": "Template22", "hole0": "Give"}, "hole0": "Flametongue Totem", "hole1": 2, "hole2": "SHAMAN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "_type": "Template32", "hole0": 0}]}, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(Adjacent()),\n            SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(0, 3)\n"}, {"choice_history": [121, 198, "Flametongue", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "Self", "1", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 320, 105], "score_history": [-0.0010662078857421875, -0.000133514404296875, -0.0001230164198204875, -1.8358061424805783e-05, -5.9604644775390625e-06, -1.1680458555929363e-05, -2.741813204920618e-06, -3.266334533691406e-05, -9.34600830078125e-05, -0.00030517578125, -0.001312255859375, -4.768370445162873e-07, -2.5153160095214844e-05, -4.172325134277344e-06, 0.0, -0.00010650604963302612, -1.9073486328125e-06, -0.002834320068359375, -1.9073486328125e-06, -0.01832258701324463, -1.9073486328125e-06, -0.003204345703125, -1.9073486328125e-06, -0.0005035400390625, 0.0, -1.52587890625e-05, 0.0, -0.007855892181396484, 0.0, -0.0017604827880859375, 0.0, -0.0001888275146484375, 0.0, -7.82012939453125e-05, -0.009801864624023438, -0.001590728759765625, -2.503394853192731e-06, -6.198863957251888e-06, -8.583047019783407e-06, -1.1920928244535389e-07, -0.0021195404697209597, -1.9073486328125e-06, -0.0003509521484375, -7.82012939453125e-05, -0.0013980865478515625, -0.0002536773681640625, -0.000148773193359375, -0.0001544952392578125, -0.000209808349609375, -6.204875946044922, -0.5766669511795044, -1.621246337890625e-05, -0.003467559814453125, -0.00022125244140625, -0.0019252896308898926, -1.7642851162236184e-05, -6.198863957251888e-06, -0.005751771852374077, -3.600120544433594e-05, -2.09808349609375e-05, -6.67572021484375e-05], "score": -6.847210431976343, "model_output": {"hole4": "player", "hole0": "FlametongueTotem", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Flametongue Totem", "hole1": 2, "hole2": "SHAMAN", "_type": "Template11", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 0}, {"hole1": "Adjacent", "_type": "Template31", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 0}]}, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(0), MinionSelector(\n            Adjacent()))])\n"}, {"choice_history": [121, 198, "Flametongue", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 93, 255, "Adjacent", "<EOS>", "Target", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "0", "<EOS>", "3", "<EOS>"], "score_history": [-0.0010662078857421875, -0.000133514404296875, -0.0001230164198204875, -1.8358061424805783e-05, -5.9604644775390625e-06, -1.1680458555929363e-05, -2.741813204920618e-06, -3.266334533691406e-05, -9.34600830078125e-05, -0.00030517578125, -0.001312255859375, -4.768370445162873e-07, -2.5153160095214844e-05, -4.172325134277344e-06, 0.0, -0.00010650604963302612, -1.9073486328125e-06, -0.002834320068359375, -1.9073486328125e-06, -4.1422295570373535, 0.0, -0.20346546173095703, -0.05398368835449219, -0.2003556191921234, -3.278255098848604e-05, -0.0040283203125, -0.061203956604003906, -0.0008029937744140625, -0.012006467208266258, -5.7220458984375e-06, -2.2843973636627197, -8.022785186767578e-05, 0.0, -0.0016270875930786133, 0.0, -0.00018536792777013034, 0.0, -5.14984130859375e-05, -0.00234222412109375, -4.9591064453125e-05, -0.00024482590379193425, -6.103514169808477e-05, -0.0013235211372375488, -1.9073486328125e-06], "score": -6.974558696690451, "model_output": {"hole4": "player", "hole0": "FlametongueTotem", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Template46", "hole0": "Adjacent"}], "hole2": "TargetSelector", "_type": "Template22", "hole0": "Give"}, "hole0": "Flametongue Totem", "hole1": 2, "hole2": "SHAMAN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "_type": "Template32", "hole0": 0}]}, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(Adjacent()),\n            TargetSelector()))\n\n    def create_minion(self, player):\n        return Minion(0, 3)\n"}, {"choice_history": [121, 198, "Flametongue", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Adjacent", "<EOS>", 320, 93, 255, "Adjacent", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "0", "<EOS>", "3", "<EOS>"], "score_history": [-0.0010662078857421875, -0.000133514404296875, -0.0001230164198204875, -1.8358061424805783e-05, -5.9604644775390625e-06, -1.1680458555929363e-05, -2.741813204920618e-06, -3.266334533691406e-05, -9.34600830078125e-05, -0.00030517578125, -0.001312255859375, -4.768370445162873e-07, -2.5153160095214844e-05, -4.172325134277344e-06, 0.0, -0.00010650604963302612, -1.9073486328125e-06, -0.002834320068359375, -1.9073486328125e-06, -4.1422295570373535, 0.0, -0.20346546173095703, -0.05398368835449219, -1.708439588546753, -1.71661376953125e-05, -0.5333271026611328, -0.004109382629394531, -0.000293731689453125, -0.015061803162097931, -9.655952453613281e-06, -0.3614170551300049, -2.1457672119140625e-06, 0.0, -0.0016026496887207031, 0.0, -0.00012087784125469625, 0.0, -4.38690185546875e-05, -0.0021514892578125, -3.0517578125e-05, -0.00022396916756406426, -8.988378976937383e-05, -0.0010598287917673588, -3.814697265625e-06], "score": -7.033762716343858, "model_output": {"hole4": "player", "hole0": "FlametongueTotem", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Template46", "hole0": "Adjacent"}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "Adjacent"}, "hole0": "Flametongue Totem", "hole1": 2, "hole2": "SHAMAN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "_type": "Template32", "hole0": 0}]}, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Adjacent(Adjacent()),\n            HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(0, 3)\n"}], "index": 34}
{"beams": [{"choice_history": [121, 198, "Frog", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Frog", "<EOS>", 113, 95, 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.0010280609130859375, -0.0001964569091796875, -1.8715683836489916e-05, -0.00032925320556387305, -0.0008077323436737061, -1.1444091796875e-05, -4.458427429199219e-05, -0.00058746337890625, -0.03945636749267578, -1.71661376953125e-05, -6.103515625e-05, -0.003223419189453125, -2.86102294921875e-05, -0.0045032501220703125, -0.000102996826171875, -5.91278076171875e-05, -2.861022494471399e-06, -0.0005093812942504883, -0.009212493896484375, -0.0013103485107421875, -0.0012607574462890625, -9.918212890625e-05, -9.5367431640625e-05, -0.0019092559814453125, -0.0004787445068359375, -0.0006943941116333008, -0.0036334991455078125, -0.00092315673828125, -3.814697265625e-06, -0.01182246208190918, -0.0001163482666015625, -0.000232696533203125, -0.0008029937744140625, -8.20159912109375e-05, -8.261200127890334e-05, -3.4570634852570947e-06, -0.0001425640657544136, -2.622604142743512e-06, -0.0012872215593233705, 0.0, -2.47955322265625e-05], "score": -0.08520873014708741, "model_output": {"hole4": "p", "hole0": "Frog", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Frog", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}]}, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(0, 1, taunt=True)\n"}, {"choice_history": [121, 198, "Frog", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Frog", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.0010280609130859375, -0.0001964569091796875, -1.8715683836489916e-05, -0.00032925320556387305, -0.0008077323436737061, -1.1444091796875e-05, -4.458427429199219e-05, -0.00058746337890625, -3.349686622619629, -0.002162933349609375, -2.5510462364763953e-05, -0.001142740249633789, -0.11657748371362686, 0.0, -0.002622842788696289, 0.0, -0.0082855224609375, -3.814697265625e-06, -0.0005435943603515625, -0.000820159912109375, -1.9073486328125e-05, 0.0, -0.0001125335693359375, -5.7220458984375e-06, -0.0045986175537109375, -1.1444091796875e-05, -9.1552734375e-05, -1.9073486328125e-06, -0.2199993133544922, 0.0, -0.00023651123046875, -0.0005283355712890625, -0.0002288818359375, -7.033347174001392e-06, -3.576278118089249e-07, -6.043737448635511e-05, -4.172325134277344e-06, -0.001335262437351048, -1.9073486328125e-06, -5.340576171875e-05], "score": -3.7121914044591335, "model_output": {"hole4": "player", "hole0": "Frog", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Frog", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}]}, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(0, 1, taunt=True)\n"}, {"choice_history": [121, 198, "Frog", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Frog", "<EOS>", 113, 95, 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.0010280609130859375, -0.0001964569091796875, -1.8715683836489916e-05, -0.00032925320556387305, -0.0008077323436737061, -1.1444091796875e-05, -4.458427429199219e-05, -0.00058746337890625, -0.03945636749267578, -1.71661376953125e-05, -6.103515625e-05, -0.003223419189453125, -2.86102294921875e-05, -0.0045032501220703125, -0.000102996826171875, -5.91278076171875e-05, -2.861022494471399e-06, -0.0005093812942504883, -0.009212493896484375, -0.0013103485107421875, -0.0012607574462890625, -9.918212890625e-05, -9.5367431640625e-05, -0.0019092559814453125, -0.0004787445068359375, -0.0006943941116333008, -0.0036334991455078125, -0.00092315673828125, -3.814697265625e-06, -4.624082088470459, 0.0, -0.000576019287109375, -0.000675201416015625, -0.00011444091796875, -1.4901160284352954e-05, -4.529942543740617e-06, -6.18676858721301e-05, -4.29153169534402e-06, -0.0013579119695350528, -1.9073486328125e-06, -5.53131103515625e-05], "score": -4.697557413514005, "model_output": {"hole4": "player", "hole0": "Frog", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Frog", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}]}, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(0, 1, taunt=True)\n"}, {"choice_history": [121, 198, "Frog", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Frog", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.0010280609130859375, -0.0001964569091796875, -1.8715683836489916e-05, -0.00032925320556387305, -0.0008077323436737061, -1.1444091796875e-05, -4.458427429199219e-05, -0.00058746337890625, -0.03945636749267578, -1.71661376953125e-05, -6.103515625e-05, -0.003223419189453125, -2.86102294921875e-05, -0.0045032501220703125, -0.000102996826171875, -5.91278076171875e-05, -2.861022494471399e-06, -0.0005093812942504883, -4.824929237365723, -0.00109100341796875, -0.0012378692626953125, -8.20159912109375e-05, -0.0001506805419921875, -0.0008392333984375, -0.00067138671875, -0.0007592439651489258, -0.0001583099365234375, -0.0005321502685546875, -1.9073486328125e-06, -0.01882648468017578, -0.000125885009765625, -0.000255584716796875, -0.000652313232421875, -6.4849853515625e-05, -9.453294478589669e-05, -3.6954811548639555e-06, -0.00014208727225195616, -2.622604142743512e-06, -0.0011891121976077557, 0.0, -2.47955322265625e-05], "score": -4.902822927818988, "model_output": {"hole4": "p", "hole0": "Frog", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Frog", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}]}, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(0, 1, taunt=True)\n"}, {"choice_history": [121, 198, "Frog", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Frog", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.0010280609130859375, -0.0001964569091796875, -1.8715683836489916e-05, -0.00032925320556387305, -0.0008077323436737061, -1.1444091796875e-05, -4.458427429199219e-05, -0.00058746337890625, -3.349686622619629, -0.002162933349609375, -2.5510462364763953e-05, -0.001142740249633789, -0.11657748371362686, 0.0, -0.002622842788696289, 0.0, -0.0082855224609375, -3.814697265625e-06, -0.0005435943603515625, -0.000820159912109375, -1.9073486328125e-05, 0.0, -0.0001125335693359375, -5.7220458984375e-06, -0.0045986175537109375, -1.1444091796875e-05, -9.1552734375e-05, -1.9073486328125e-06, -1.6314268112182617, -0.0003795623779296875, -0.0002002716064453125, -0.00209808349609375, -0.0001678466796875, -1.3709059203392826e-05, -1.1920928244535389e-07, -9.083332406589761e-05, -2.0265579223632812e-06, -0.0011345143429934978, -1.9073486328125e-06, -2.288818359375e-05], "score": -5.125274359648749, "model_output": {"hole4": "p", "hole0": "Frog", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Frog", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}]}, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(0, 1, taunt=True)\n"}, {"choice_history": [121, 198, "Frog", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Frog", "<EOS>", "0", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.0010280609130859375, -0.0001964569091796875, -1.8715683836489916e-05, -0.00032925320556387305, -0.0008077323436737061, -1.1444091796875e-05, -4.458427429199219e-05, -0.00058746337890625, -3.349686622619629, -0.002162933349609375, -2.5510462364763953e-05, -0.001142740249633789, -2.2605082988739014, 0.0, -0.001407027244567871, 0.0, -0.001644134521484375, -1.9073486328125e-06, -0.0002727508544921875, -0.0003719329833984375, -1.9073486328125e-05, 0.0, -6.29425048828125e-05, -3.814697265625e-06, -0.0028629302978515625, -1.1444091796875e-05, -8.7738037109375e-05, -1.9073486328125e-06, -0.23488426208496094, 0.0, -0.00023651123046875, -0.0005130767822265625, -0.000213623046875, -7.033347174001392e-06, -3.576278118089249e-07, -6.019896318321116e-05, -4.172325134277344e-06, -0.0013436070876196027, -1.9073486328125e-06, -5.340576171875e-05], "score": -5.860615575377722, "model_output": {"hole4": "player", "hole0": "Frog", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Frog", "hole1": 0, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}]}, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(0, 1, taunt=True)\n"}, {"choice_history": [121, 198, "Frog", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Frog", "<EOS>", 113, 95, 94, 112, "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.0010280609130859375, -0.0001964569091796875, -1.8715683836489916e-05, -0.00032925320556387305, -0.0008077323436737061, -1.1444091796875e-05, -4.458427429199219e-05, -0.00058746337890625, -0.03945636749267578, -1.71661376953125e-05, -6.103515625e-05, -5.969377517700195, -0.0029811859130859375, -0.05311012268066406, -0.0041370391845703125, -6.4849853515625e-05, -5.602820692729438e-06, -0.0008374452590942383, -0.003246307373046875, -0.00030517578125, -0.000339508056640625, -1.9073486328125e-05, -6.520747410831973e-05, -9.5367431640625e-06, -0.00105786242056638, -0.0069637298583984375, -0.0001621246337890625, -0.0014171600341796875, -0.0001239776611328125, -3.0279152269940823e-05, -5.960446742392378e-06, -0.0001220627746079117, -5.364416665543104e-06, -0.001448748866096139, -1.9073486328125e-06, -2.09808349609375e-05], "score": -6.088417010361354, "model_output": {"hole4": "p", "hole0": "Frog", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Frog", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}]}, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False)\n\n    def create_minion(self, p):\n        return Minion(0, 1, taunt=True)\n"}, {"choice_history": [121, 198, "Frog", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Frog", "<EOS>", 113, 95, 94, 112, 327, 118, 248, "BEAST", "Card", "Selector", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.0010280609130859375, -0.0001964569091796875, -1.8715683836489916e-05, -0.00032925320556387305, -0.0008077323436737061, -1.1444091796875e-05, -4.458427429199219e-05, -0.00058746337890625, -0.03945636749267578, -1.71661376953125e-05, -6.103515625e-05, -0.003223419189453125, -2.86102294921875e-05, -0.0045032501220703125, -0.000102996826171875, -5.91278076171875e-05, -2.861022494471399e-06, -0.0005093812942504883, -0.009212493896484375, -0.0013103485107421875, -0.0012607574462890625, -9.918212890625e-05, -9.5367431640625e-05, -0.0019092559814453125, -0.0004787445068359375, -0.0006943941116333008, -6.650938034057617, -0.0029735565185546875, 0.0, -0.0002155303955078125, -1.9073486328125e-06, -0.017555832862854004, -1.9073486328125e-05, -0.0007343292236328125, -0.0006103515625, -0.0001926422119140625, -2.4914723326219246e-05, -1.5497195136049413e-06, -0.000128380095702596, -2.622604142743512e-06, -0.0012321468675509095, 0.0, -2.6702880859375e-05], "score": -6.7407060446511196, "model_output": {"hole4": "p", "hole0": "Frog", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEASTCardSelector"}], "_type": "Call", "args": [{"s": "Frog", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}]}, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEASTCardSelector)\n\n    def create_minion(self, p):\n        return Minion(0, 1, taunt=True)\n"}, {"choice_history": [121, 198, "Frog", "<EOS>", "Minion", "Card", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.0010280609130859375, -0.0001964569091796875, -1.8715683836489916e-05, -0.00032925320556387305, -0.0008077323436737061, -1.1444091796875e-05, -4.458427429199219e-05, -0.00058746337890625, -5.9333038330078125, -0.010869026184082031, -3.576278118089249e-07, -2.622600959512056e-06, -0.00017319549806416035, -3.933904736186378e-06, -0.007273435592651367, 0.0, -0.0001506805419921875, -0.4480733871459961, 0.0, -0.3281362056732178, 0.0, -0.002490997314453125, -0.0172882080078125, -7.05718994140625e-05, -7.295407704077661e-05, -4.768370445162873e-07, -0.00019989395514130592, -7.152555099310121e-07, -0.0019210577011108398, 0.0, -7.05718994140625e-05], "score": -6.7531258355245996, "model_output": {"hole4": "player", "hole0": "Frog", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}]}, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        return Minion(0, 1, taunt=True)\n\n    def create_minion(self, player):\n        return Minion(0, 1, taunt=True)\n"}, {"choice_history": [121, 198, "Frog", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Frog", "<EOS>", 113, 95, 94, 112, 327, 118, 248, "BEAST", "COMMON", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.0010280609130859375, -0.0001964569091796875, -1.8715683836489916e-05, -0.00032925320556387305, -0.0008077323436737061, -1.1444091796875e-05, -4.458427429199219e-05, -0.00058746337890625, -0.03945636749267578, -1.71661376953125e-05, -6.103515625e-05, -0.003223419189453125, -2.86102294921875e-05, -0.0045032501220703125, -0.000102996826171875, -5.91278076171875e-05, -2.861022494471399e-06, -0.0005093812942504883, -0.009212493896484375, -0.0013103485107421875, -0.0012607574462890625, -9.918212890625e-05, -9.5367431640625e-05, -0.0019092559814453125, -0.0004787445068359375, -0.0006943941116333008, -7.081062316894531, -0.00162506103515625, -0.000858306884765625, -1.9073486328125e-06, -0.018624544143676758, -5.340576171875e-05, -0.000438690185546875, -0.000576019287109375, -0.0001506805419921875, -3.9577458665007725e-05, -3.099436753473128e-06, -0.00012134763528592885, -2.741813204920618e-06, -0.0012408490292727947, 0.0, -2.09808349609375e-05], "score": -7.1708679983837555, "model_output": {"hole4": "p", "hole0": "Frog", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEASTCOMMON"}], "_type": "Call", "args": [{"s": "Frog", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}]}, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEASTCOMMON)\n\n    def create_minion(self, p):\n        return Minion(0, 1, taunt=True)\n"}, {"choice_history": [121, 198, "Frog", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Frog", "<EOS>", "0", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.0010280609130859375, -0.0001964569091796875, -1.8715683836489916e-05, -0.00032925320556387305, -0.0008077323436737061, -1.1444091796875e-05, -4.458427429199219e-05, -0.00058746337890625, -3.349686622619629, -0.002162933349609375, -2.5510462364763953e-05, -0.001142740249633789, -2.2605082988739014, 0.0, -0.001407027244567871, 0.0, -0.001644134521484375, -1.9073486328125e-06, -0.0002727508544921875, -0.0003719329833984375, -1.9073486328125e-05, 0.0, -6.29425048828125e-05, -3.814697265625e-06, -0.0028629302978515625, -1.1444091796875e-05, -8.7738037109375e-05, -1.9073486328125e-06, -1.5724763870239258, -0.00037384033203125, -0.000202178955078125, -0.0020580291748046875, -0.0001544952392578125, -1.5735617125756107e-05, -1.1920928244535389e-07, -9.214450255967677e-05, -2.0265579223632812e-06, -0.0011348719708621502, -1.9073486328125e-06, -2.288818359375e-05], "score": -7.1998320438869925, "model_output": {"hole4": "p", "hole0": "Frog", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Frog", "hole1": 0, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}]}, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(0, 1, taunt=True)\n"}, {"choice_history": [121, 198, "Frog", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Frog", "<EOS>", 113, 95, 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "Card", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.0010280609130859375, -0.0001964569091796875, -1.8715683836489916e-05, -0.00032925320556387305, -0.0008077323436737061, -1.1444091796875e-05, -4.458427429199219e-05, -0.00058746337890625, -0.03945636749267578, -1.71661376953125e-05, -6.103515625e-05, -0.003223419189453125, -2.86102294921875e-05, -0.0045032501220703125, -0.000102996826171875, -5.91278076171875e-05, -2.861022494471399e-06, -0.0005093812942504883, -0.009212493896484375, -0.0013103485107421875, -0.0012607574462890625, -9.918212890625e-05, -9.5367431640625e-05, -0.0019092559814453125, -0.0004787445068359375, -0.0006943941116333008, -0.0036334991455078125, -0.00092315673828125, -3.814697265625e-06, -7.144941806793213, -5.7220458984375e-06, -0.000606536865234375, -0.0005855560302734375, -7.05718994140625e-05, -1.263618378288811e-05, -7.986990567587782e-06, -3.385485979379155e-05, -1.7881377516459906e-06, -0.0016767827328294516, 0.0, -2.47955322265625e-05], "score": -7.218576978744522, "model_output": {"hole4": "Card", "hole0": "Frog", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Frog", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}]}, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, Card):\n        return Minion(0, 1, taunt=True)\n"}, {"choice_history": [121, 198, "Frog", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Frog", "<EOS>", 113, 95, 94, 112, 327, 118, 248, "BEAST", "create_minion", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.0010280609130859375, -0.0001964569091796875, -1.8715683836489916e-05, -0.00032925320556387305, -0.0008077323436737061, -1.1444091796875e-05, -4.458427429199219e-05, -0.00058746337890625, -0.03945636749267578, -1.71661376953125e-05, -6.103515625e-05, -0.003223419189453125, -2.86102294921875e-05, -0.0045032501220703125, -0.000102996826171875, -5.91278076171875e-05, -2.861022494471399e-06, -0.0005093812942504883, -0.009212493896484375, -0.0013103485107421875, -0.0012607574462890625, -9.918212890625e-05, -9.5367431640625e-05, -0.0019092559814453125, -0.0004787445068359375, -0.0006943941116333008, -7.198980331420898, -5.7220458984375e-06, -0.0011539459228515625, -1.9073486328125e-06, -0.01037299633026123, -5.340576171875e-05, -0.0003528594970703125, -0.0007114410400390625, -8.58306884765625e-05, -4.231927960063331e-05, -2.50339189733495e-06, -0.00014935799117665738, -2.622604142743512e-06, -0.0012718435609713197, 0.0, -2.6702880859375e-05], "score": -7.279262259856978, "model_output": {"hole4": "p", "hole0": "Frog", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEASTcreate_minion"}], "_type": "Call", "args": [{"s": "Frog", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}]}, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEASTcreate_minion)\n\n    def create_minion(self, p):\n        return Minion(0, 1, taunt=True)\n"}, {"choice_history": [121, 198, "Frog", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Frog", "<EOS>", 113, 95, 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "windfury", "<EOS>", 62], "score_history": [-0.0010280609130859375, -0.0001964569091796875, -1.8715683836489916e-05, -0.00032925320556387305, -0.0008077323436737061, -1.1444091796875e-05, -4.458427429199219e-05, -0.00058746337890625, -0.03945636749267578, -1.71661376953125e-05, -6.103515625e-05, -0.003223419189453125, -2.86102294921875e-05, -0.0045032501220703125, -0.000102996826171875, -5.91278076171875e-05, -2.861022494471399e-06, -0.0005093812942504883, -0.009212493896484375, -0.0013103485107421875, -0.0012607574462890625, -9.918212890625e-05, -9.5367431640625e-05, -0.0019092559814453125, -0.0004787445068359375, -0.0006943941116333008, -0.0036334991455078125, -0.00092315673828125, -3.814697265625e-06, -0.01182246208190918, -0.0001163482666015625, -0.000232696533203125, -0.0008029937744140625, -8.20159912109375e-05, -8.261200127890334e-05, -3.4570634852570947e-06, -0.0001425640657544136, -2.622604142743512e-06, -7.4454779624938965, -6.67572021484375e-05, -7.05718994140625e-05], "score": -7.5295120046509965, "model_output": {"hole4": "p", "hole0": "Frog", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Frog", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "windfury", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}]}, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(0, 1, windfury=True)\n"}, {"choice_history": [121, 198, "Frog", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Frog", "<EOS>", 113, 95, 110, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.0010280609130859375, -0.0001964569091796875, -1.8715683836489916e-05, -0.00032925320556387305, -0.0008077323436737061, -1.1444091796875e-05, -4.458427429199219e-05, -0.00058746337890625, -0.03945636749267578, -1.71661376953125e-05, -6.103515625e-05, -0.003223419189453125, -2.86102294921875e-05, -0.0045032501220703125, -0.000102996826171875, -5.91278076171875e-05, -2.861022494471399e-06, -0.0005093812942504883, -0.009212493896484375, -0.0013103485107421875, -7.596014976501465, -0.05505561828613281, -0.0001773834228515625, -0.001911163330078125, -0.001384735107421875, -0.0005800724029541016, -0.005077362060546875, -0.0005340576171875, -3.814697265625e-06, -0.020717859268188477, -9.918212890625e-05, -0.0002288818359375, -0.0009765625, -8.20159912109375e-05, -0.00012779231474269181, -3.3378546504536644e-06, -0.00014685495989397168, -2.622604142743512e-06, -0.0012506243074312806, 0.0, -2.47955322265625e-05], "score": -7.745910481208966, "model_output": {"hole4": "p", "hole0": "Frog", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Frog", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template68"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 0}]}, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, self, False,\n            minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(0, 1, taunt=True)\n"}], "index": 35}
{"beams": [{"choice_history": [121, 200, "Frost", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.0001506805419921875, -0.0001850128173828125, -1.4305104514278355e-06, -1.4424220353248529e-05, -1.1920928244535389e-07, -4.490651190280914e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000789642333984375, -0.000362396240234375, -0.000339508056640625, -1.3589766240329482e-05, -3.62396240234375e-05, -4.410734163684538e-06, 0.0, -0.000608854228630662, 0.0, -0.0016632080078125, 0.0, -1.52587890625e-05, 0.0, -2.8491003831732087e-05, 0.0, -1.33514404296875e-05, -0.00011444091796875, -1.52587890625e-05, -7.2479248046875e-05, 0.0, -0.00461578369140625, -7.62939453125e-05, -9.34600830078125e-05, -7.62939453125e-06, -3.24249267578125e-05, -9.5367431640625e-06, -5.924701690673828e-05, 0.0, -0.0004711151123046875, -1.52587890625e-05, -0.0047779083251953125, -0.000274658203125, -0.000133514404296875, 0.0, -0.0006923675537109375, 0.0, -0.0019407272338867188, 0.0, -0.00131618685554713, -1.9073486328125e-06, -6.67572021484375e-05, -1.52587890625e-05, -5.340576171875e-05, -0.0008258819580078125, -1.9073486328125e-06, -0.0002480745315551758, -7.62939453125e-06, -0.02221982181072235, 0.0, -5.91278076171875e-05, -0.002307891845703125, -0.00136566162109375, -0.002352118259295821, -3.814697265625e-06], "score": -0.04852670304023121, "model_output": {"hole4": "player", "hole0": "FrostNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Frost Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.0001506805419921875, -0.0001850128173828125, -1.4305104514278355e-06, -1.4424220353248529e-05, -1.1920928244535389e-07, -4.490651190280914e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000789642333984375, -0.000362396240234375, -0.000339508056640625, -1.3589766240329482e-05, -3.62396240234375e-05, -4.410734163684538e-06, 0.0, -0.000608854228630662, 0.0, -0.0016632080078125, 0.0, -1.52587890625e-05, 0.0, -2.8491003831732087e-05, 0.0, -1.33514404296875e-05, -0.00011444091796875, -1.52587890625e-05, -7.2479248046875e-05, 0.0, -0.00461578369140625, -7.62939453125e-05, -9.34600830078125e-05, -7.62939453125e-06, -3.24249267578125e-05, -9.5367431640625e-06, -5.924701690673828e-05, 0.0, -0.0004711151123046875, -1.52587890625e-05, -5.533716201782227, -0.09187889099121094, -1.9073486328125e-06, -1.71661376953125e-05, -7.82012939453125e-05, -7.62939453125e-05, -0.0012836456298828125, -5.7220458984375e-06, -0.00023651123046875, -1.1444091796875e-05, -0.07969210296869278, 0.0, -8.58306884765625e-05, -0.0075531005859375, -0.0025424957275390625, -0.003889799118041992, -3.814697265625e-06], "score": -5.730935210371506, "model_output": {"hole4": "player", "hole0": "FrostNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Frost Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "3", "<EOS>", 110], "score_history": [-0.0001506805419921875, -0.0001850128173828125, -1.4305104514278355e-06, -1.4424220353248529e-05, -1.1920928244535389e-07, -4.490651190280914e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000789642333984375, -0.000362396240234375, -0.000339508056640625, -1.3589766240329482e-05, -3.62396240234375e-05, -4.410734163684538e-06, 0.0, -0.000608854228630662, 0.0, -0.0016632080078125, 0.0, -1.52587890625e-05, 0.0, -2.8491003831732087e-05, 0.0, -1.33514404296875e-05, -0.00011444091796875, -1.52587890625e-05, -7.2479248046875e-05, 0.0, -0.00461578369140625, -7.62939453125e-05, -9.34600830078125e-05, -7.62939453125e-06, -3.24249267578125e-05, -9.5367431640625e-06, -5.924701690673828e-05, 0.0, -0.0004711151123046875, -1.52587890625e-05, -0.0047779083251953125, -0.000274658203125, -0.000133514404296875, 0.0, -0.0006923675537109375, 0.0, -0.0019407272338867188, 0.0, -0.00131618685554713, -1.9073486328125e-06, -6.67572021484375e-05, -1.52587890625e-05, -5.340576171875e-05, -0.0008258819580078125, -1.9073486328125e-06, -0.0002480745315551758, -7.62939453125e-06, -5.237846851348877, -3.814697265625e-06, -0.000701904296875, -0.010637283325195312, -2.47955322265625e-05, -0.00098419189453125, -0.32645225524902344, 0.0, -0.27226492762565613, -5.841255187988281e-06, -0.000186920166015625], "score": -5.869327052389387, "model_output": {"hole4": "player", "hole0": "FrostNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Frost Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.heal(player.effective_heal_power(3), self)\n"}, {"choice_history": [121, 200, "Frost", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "die", "<EOS>", 320, 110], "score_history": [-0.0001506805419921875, -0.0001850128173828125, -1.4305104514278355e-06, -1.4424220353248529e-05, -1.1920928244535389e-07, -4.490651190280914e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000789642333984375, -0.000362396240234375, -0.000339508056640625, -1.3589766240329482e-05, -3.62396240234375e-05, -4.410734163684538e-06, 0.0, -0.000608854228630662, 0.0, -0.0016632080078125, 0.0, -1.52587890625e-05, 0.0, -2.8491003831732087e-05, 0.0, -1.33514404296875e-05, -0.00011444091796875, -1.52587890625e-05, -7.2479248046875e-05, 0.0, -0.00461578369140625, -7.62939453125e-05, -9.34600830078125e-05, -7.62939453125e-06, -3.24249267578125e-05, -9.5367431640625e-06, -5.924701690673828e-05, 0.0, -0.0004711151123046875, -1.52587890625e-05, -0.0047779083251953125, -0.000274658203125, -0.000133514404296875, 0.0, -0.0006923675537109375, 0.0, -0.0019407272338867188, 0.0, -0.00131618685554713, -1.9073486328125e-06, -6.67572021484375e-05, -1.52587890625e-05, -5.340576171875e-05, -0.0008258819580078125, -1.9073486328125e-06, -0.0002480745315551758, -7.62939453125e-06, -5.950371265411377, -5.7220458984375e-06, -0.0001735687255859375, -0.13274765014648438], "score": -6.103516473327879, "model_output": {"hole4": "player", "hole0": "FrostNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Frost Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.die(self)\n"}, {"choice_history": [121, 200, "Frost", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "score_history": [-0.0001506805419921875, -0.0001850128173828125, -1.4305104514278355e-06, -1.4424220353248529e-05, -1.1920928244535389e-07, -4.490651190280914e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000789642333984375, -0.000362396240234375, -0.000339508056640625, -1.3589766240329482e-05, -3.62396240234375e-05, -4.410734163684538e-06, 0.0, -0.000608854228630662, 0.0, -0.0016632080078125, 0.0, -1.52587890625e-05, 0.0, -2.8491003831732087e-05, 0.0, -1.33514404296875e-05, -0.00011444091796875, -1.52587890625e-05, -7.2479248046875e-05, 0.0, -0.00461578369140625, -7.62939453125e-05, -9.34600830078125e-05, -7.62939453125e-06, -3.24249267578125e-05, -9.5367431640625e-06, -5.924701690673828e-05, 0.0, -0.0004711151123046875, -1.52587890625e-05, -0.0047779083251953125, -0.000274658203125, -0.000133514404296875, 0.0, -0.0006923675537109375, 0.0, -0.0019407272338867188, 0.0, -0.00131618685554713, -1.9073486328125e-06, -6.67572021484375e-05, -1.52587890625e-05, -5.340576171875e-05, -0.0008258819580078125, -1.9073486328125e-06, -0.0002480745315551758, -7.62939453125e-06, -0.02221982181072235, 0.0, -5.91278076171875e-05, -0.002307891845703125, -0.00136566162109375, -6.562803745269775, -0.001007080078125], "score": -6.60998159543157, "model_output": {"hole4": "player", "hole0": "FrostNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "<UNK>"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Frost Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.add_buff(Buff(<UNK>()))\n"}, {"choice_history": [121, 200, "Frost", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.0001506805419921875, -0.0001850128173828125, -1.4305104514278355e-06, -1.4424220353248529e-05, -1.1920928244535389e-07, -4.490651190280914e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000789642333984375, -0.000362396240234375, -0.000339508056640625, -1.3589766240329482e-05, -3.62396240234375e-05, -4.410734163684538e-06, 0.0, -0.000608854228630662, 0.0, -0.0016632080078125, 0.0, -1.52587890625e-05, 0.0, -2.8491003831732087e-05, 0.0, -1.33514404296875e-05, -0.00011444091796875, -1.52587890625e-05, -7.2479248046875e-05, 0.0, -0.00461578369140625, -7.62939453125e-05, -9.34600830078125e-05, -7.62939453125e-06, -3.24249267578125e-05, -9.5367431640625e-06, -5.924701690673828e-05, 0.0, -0.0004711151123046875, -1.52587890625e-05, -0.0047779083251953125, -0.000274658203125, -0.000133514404296875, 0.0, -0.0006923675537109375, 0.0, -6.618640899658203, -2.288818359375e-05, -0.0007815361022949219, -1.9073486328125e-06, -2.47955322265625e-05, -0.000148773193359375, -6.67572021484375e-05, -0.0014057159423828125, -1.9073486328125e-06, -0.0002537965774536133, -5.7220458984375e-06, -0.020359449088573456, 0.0, -6.29425048828125e-05, -0.00229644775390625, -0.0014019012451171875, -0.0022401807364076376, -3.814697265625e-06], "score": -6.66345996573579, "model_output": {"hole4": "player", "hole0": "FrostNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Frost Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.current_player.minions:\n            minion.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "deathrattle", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.0001506805419921875, -0.0001850128173828125, -1.4305104514278355e-06, -1.4424220353248529e-05, -1.1920928244535389e-07, -4.490651190280914e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000789642333984375, -0.000362396240234375, -0.000339508056640625, -1.3589766240329482e-05, -3.62396240234375e-05, -4.410734163684538e-06, 0.0, -0.000608854228630662, 0.0, -0.0016632080078125, 0.0, -1.52587890625e-05, 0.0, -2.8491003831732087e-05, 0.0, -1.33514404296875e-05, -0.00011444091796875, -1.52587890625e-05, -7.2479248046875e-05, 0.0, -0.00461578369140625, -7.62939453125e-05, -9.34600830078125e-05, -7.62939453125e-06, -3.24249267578125e-05, -9.5367431640625e-06, -5.924701690673828e-05, 0.0, -0.0004711151123046875, -1.52587890625e-05, -0.0047779083251953125, -0.000274658203125, -0.000133514404296875, 0.0, -0.0006923675537109375, 0.0, -0.0019407272338867188, 0.0, -0.00131618685554713, -1.9073486328125e-06, -6.67572021484375e-05, -1.52587890625e-05, -5.340576171875e-05, -0.0008258819580078125, -1.9073486328125e-06, -0.0002480745315551758, -7.62939453125e-06, -5.791155815124512, -0.00016558170318603516, -0.0009212493896484375, -0.9810304641723633, -0.001865386962890625, -0.0024677515029907227, -1.9073486328125e-06], "score": -6.797826423202757, "model_output": {"hole4": "player", "hole0": "FrostNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "deathrattle", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Frost Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.deathrattle(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score_history": [-0.0001506805419921875, -0.0001850128173828125, -1.4305104514278355e-06, -1.4424220353248529e-05, -1.1920928244535389e-07, -4.490651190280914e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000789642333984375, -0.000362396240234375, -0.000339508056640625, -1.3589766240329482e-05, -3.62396240234375e-05, -4.410734163684538e-06, 0.0, -0.000608854228630662, 0.0, -0.0016632080078125, 0.0, -1.52587890625e-05, 0.0, -2.8491003831732087e-05, 0.0, -1.33514404296875e-05, -0.00011444091796875, -1.52587890625e-05, -7.2479248046875e-05, 0.0, -0.00461578369140625, -7.62939453125e-05, -9.34600830078125e-05, -7.62939453125e-06, -3.24249267578125e-05, -9.5367431640625e-06, -5.924701690673828e-05, 0.0, -0.0004711151123046875, -1.52587890625e-05, -0.0047779083251953125, -0.000274658203125, -0.000133514404296875, 0.0, -0.0006923675537109375, 0.0, -0.0019407272338867188, 0.0, -0.00131618685554713, -1.9073486328125e-06, -6.67572021484375e-05, -1.52587890625e-05, -5.340576171875e-05, -0.0008258819580078125, -1.9073486328125e-06, -0.0002480745315551758, -7.62939453125e-06, -5.237846851348877, -3.814697265625e-06, -0.000701904296875, -0.010637283325195312, -2.47955322265625e-05, -0.00098419189453125, -1.3425712585449219, 0.0, -0.23112159967422485, -2.0265579223632812e-06, -0.0002155303955078125], "score": -6.844327523266081, "model_output": {"hole4": "player", "hole0": "FrostNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Frost Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.heal(player.effective_spell_damage(3), self)\n"}, {"choice_history": [121, 200, "Frost", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "unbind", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.0001506805419921875, -0.0001850128173828125, -1.4305104514278355e-06, -1.4424220353248529e-05, -1.1920928244535389e-07, -4.490651190280914e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000789642333984375, -0.000362396240234375, -0.000339508056640625, -1.3589766240329482e-05, -3.62396240234375e-05, -4.410734163684538e-06, 0.0, -0.000608854228630662, 0.0, -0.0016632080078125, 0.0, -1.52587890625e-05, 0.0, -2.8491003831732087e-05, 0.0, -1.33514404296875e-05, -0.00011444091796875, -1.52587890625e-05, -7.2479248046875e-05, 0.0, -0.00461578369140625, -7.62939453125e-05, -9.34600830078125e-05, -7.62939453125e-06, -3.24249267578125e-05, -9.5367431640625e-06, -5.924701690673828e-05, 0.0, -0.0004711151123046875, -1.52587890625e-05, -0.0047779083251953125, -0.000274658203125, -0.000133514404296875, 0.0, -0.0006923675537109375, 0.0, -0.0019407272338867188, 0.0, -0.00131618685554713, -1.9073486328125e-06, -6.67572021484375e-05, -1.52587890625e-05, -5.340576171875e-05, -0.0008258819580078125, -1.9073486328125e-06, -0.0002480745315551758, -7.62939453125e-06, -6.066864967346191, 0.0, -0.01581573486328125, -0.8279542922973633, -0.0044269561767578125, -0.003281235694885254, -1.9073486328125e-06], "score": -6.938563360725645, "model_output": {"hole4": "player", "hole0": "FrostNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "unbind", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Frost Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.unbind(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.0001506805419921875, -0.0001850128173828125, -1.4305104514278355e-06, -1.4424220353248529e-05, -1.1920928244535389e-07, -4.490651190280914e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000789642333984375, -0.000362396240234375, -0.000339508056640625, -1.3589766240329482e-05, -3.62396240234375e-05, -4.410734163684538e-06, 0.0, -0.000608854228630662, 0.0, -0.0016632080078125, 0.0, -1.52587890625e-05, 0.0, -2.8491003831732087e-05, 0.0, -1.33514404296875e-05, -0.00011444091796875, -1.52587890625e-05, -7.2479248046875e-05, 0.0, -5.908734321594238, -0.0001049041748046875, -0.03401947021484375, -1.52587890625e-05, -3.814697265625e-06, -0.025028228759765625, 0.0, -0.035765767097473145, -3.0517578125e-05, -1.71661376953125e-05, -9.72747802734375e-05, -7.62939453125e-06, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.0018787384033203125, -1.1444091796875e-05, -0.0001541373203508556, 0.0, -7.2479248046875e-05, -0.0006999969482421875, 0.0, -0.0028820037841796875, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -0.000278472900390625, -1.1920928244535389e-07, -0.0004856586456298828, 0.0, -5.483611312229186e-05, -1.52587890625e-05, -0.00026702880859375, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.0006160736083984375, -2.09808349609375e-05, -0.03210937976837158, -3.814697265625e-06, -0.000217437744140625, -2.288818359375e-05, 0.0, -0.0020542144775390625, -0.0002841949462890625, -5.7220458984375e-05, 0.0, -0.0007266998291015625, 0.0, -0.08378231525421143, -2.09808349609375e-05, -7.62939453125e-05, -5.7220458984375e-06, -0.05222606658935547, -6.103515625e-05, 0.0, 0.0, -0.0024929046630859375, 0.0, -0.7429733276367188, -7.62939453125e-06, -0.16655635833740234, -3.24249267578125e-05, -5.7220458984375e-05, 0.0, -0.0010890960693359375, 0.0, -0.0018581151962280273, 0.0, -0.0002294711011927575, -1.33514404296875e-05, -0.0001068115234375, -2.288818359375e-05, -2.09808349609375e-05, -0.0002269744873046875, 0.0, -0.00034737586975097656, -5.841255187988281e-06, -0.022075075656175613, 0.0, -8.58306884765625e-05, -0.002376556396484375, -0.0017375946044921875, -0.0029314749408513308, -7.62939453125e-06], "score": -7.132825402072157, "model_output": {"hole4": "player", "hole0": "FrostNova", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"body": [{"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Frost Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in game.other_player.minions:\n            minion.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.0001506805419921875, -0.0001850128173828125, -1.4305104514278355e-06, -1.4424220353248529e-05, -1.1920928244535389e-07, -4.490651190280914e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000789642333984375, -0.000362396240234375, -0.000339508056640625, -1.3589766240329482e-05, -3.62396240234375e-05, -4.410734163684538e-06, 0.0, -0.000608854228630662, 0.0, -7.101097106933594, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -3.5285895137349144e-05, 0.0, -1.52587890625e-05, -0.0001239776611328125, -1.71661376953125e-05, -5.53131103515625e-05, 0.0, -0.005001068115234375, -9.34600830078125e-05, -9.5367431640625e-05, -9.5367431640625e-06, -2.47955322265625e-05, -7.62939453125e-06, -5.924701690673828e-05, 0.0, -0.0004425048828125, -1.52587890625e-05, -0.0044403076171875, -0.0002841949462890625, -0.0001277923583984375, 0.0, -0.000690460205078125, 0.0, -0.0019941329956054688, 0.0, -0.0015941828023642302, -1.9073486328125e-06, -6.67572021484375e-05, -1.71661376953125e-05, -5.340576171875e-05, -0.0008373260498046875, -1.9073486328125e-06, -0.0002461671829223633, -7.62939453125e-06, -0.02224021404981613, 0.0, -5.91278076171875e-05, -0.0022602081298828125, -0.0013637542724609375, -0.002342939144000411, -3.814697265625e-06], "score": -7.148306196992387, "model_output": {"hole4": "player", "hole0": "FrostNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "PRIEST", "_type": "Template14", "hole0": "Frost Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.0001506805419921875, -0.0001850128173828125, -1.4305104514278355e-06, -1.4424220353248529e-05, -1.1920928244535389e-07, -4.490651190280914e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000789642333984375, -0.000362396240234375, -0.000339508056640625, -1.3589766240329482e-05, -3.62396240234375e-05, -4.410734163684538e-06, 0.0, -0.000608854228630662, 0.0, -0.0016632080078125, 0.0, -1.52587890625e-05, 0.0, -2.8491003831732087e-05, 0.0, -1.33514404296875e-05, -0.00011444091796875, -1.52587890625e-05, -7.2479248046875e-05, 0.0, -0.00461578369140625, -7.62939453125e-05, -9.34600830078125e-05, -7.62939453125e-06, -3.24249267578125e-05, -9.5367431640625e-06, -5.924701690673828e-05, 0.0, -0.0004711151123046875, -1.52587890625e-05, -0.0047779083251953125, -0.000274658203125, -0.000133514404296875, 0.0, -0.0006923675537109375, 0.0, -0.0019407272338867188, 0.0, -7.101545810699463, -5.7220458984375e-06, -0.0015811920166015625, -1.33514404296875e-05, -4.38690185546875e-05, -0.0034694671630859375, -5.7220458984375e-06, -7.140636444091797e-05, -5.7220458984375e-06, -0.02758803777396679, 0.0, -9.34600830078125e-05, -0.0020599365234375, -0.0015125274658203125, -0.001945018069818616, -3.814697265625e-06], "score": -7.157626315262284, "model_output": {"hole4": "player", "hole0": "FrostNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Frost Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.hero:\n            minion.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 25, 186, "targets", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.0001506805419921875, -0.0001850128173828125, -1.4305104514278355e-06, -1.4424220353248529e-05, -1.1920928244535389e-07, -4.490651190280914e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000789642333984375, -0.000362396240234375, -0.000339508056640625, -1.3589766240329482e-05, -3.62396240234375e-05, -4.410734163684538e-06, 0.0, -0.000608854228630662, 0.0, -0.0016632080078125, 0.0, -1.52587890625e-05, 0.0, -2.8491003831732087e-05, 0.0, -1.33514404296875e-05, -0.00011444091796875, -1.52587890625e-05, -7.2479248046875e-05, 0.0, -5.908734321594238, -0.0001049041748046875, -0.03401947021484375, -1.52587890625e-05, -3.814697265625e-06, -0.025028228759765625, 0.0, -0.035765767097473145, -3.0517578125e-05, -1.71661376953125e-05, -9.72747802734375e-05, -7.62939453125e-06, 0.0, -0.000118255615234375, -1.9073486328125e-06, -0.0018787384033203125, -1.1444091796875e-05, -0.0001541373203508556, 0.0, -7.2479248046875e-05, -0.0006999969482421875, 0.0, -0.0028820037841796875, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -0.000278472900390625, -1.1920928244535389e-07, -0.0004856586456298828, 0.0, -5.483611312229186e-05, -1.52587890625e-05, -0.00026702880859375, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.0006160736083984375, -2.09808349609375e-05, -0.03210937976837158, -3.814697265625e-06, -0.000217437744140625, -2.288818359375e-05, 0.0, -0.0020542144775390625, -0.0002841949462890625, -5.7220458984375e-05, 0.0, -0.0007266998291015625, 0.0, -0.08378231525421143, -2.09808349609375e-05, -7.62939453125e-05, -5.7220458984375e-06, -0.05222606658935547, -6.103515625e-05, 0.0, 0.0, -0.0024929046630859375, 0.0, -0.7172040939331055, -9.5367431640625e-06, -0.009661674499511719, -5.7220458984375e-06, -0.0006275177001953125, -0.018001556396484375, -0.0002079010009765625, -0.0036678314208984375, -1.9073486328125e-06, -2.8967857360839844e-05, -3.933906555175781e-06, -0.48561418056488037, 0.0, -6.29425048828125e-05, -0.0046100616455078125, -0.00194549560546875, -0.002569434465840459, -7.62939453125e-06], "score": -7.434293760709224, "model_output": {"hole4": "player", "hole0": "FrostNova", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"body": [{"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Frost Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 110], "score_history": [-0.0001506805419921875, -0.0001850128173828125, -1.4305104514278355e-06, -1.4424220353248529e-05, -1.1920928244535389e-07, -4.490651190280914e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000789642333984375, -0.000362396240234375, -0.000339508056640625, -1.3589766240329482e-05, -3.62396240234375e-05, -4.410734163684538e-06, 0.0, -0.000608854228630662, 0.0, -0.0016632080078125, 0.0, -1.52587890625e-05, 0.0, -2.8491003831732087e-05, 0.0, -1.33514404296875e-05, -0.00011444091796875, -1.52587890625e-05, -7.2479248046875e-05, 0.0, -0.00461578369140625, -7.62939453125e-05, -9.34600830078125e-05, -7.62939453125e-06, -3.24249267578125e-05, -9.5367431640625e-06, -5.924701690673828e-05, 0.0, -0.0004711151123046875, -1.52587890625e-05, -0.0047779083251953125, -0.000274658203125, -0.000133514404296875, 0.0, -0.0006923675537109375, 0.0, -0.0019407272338867188, 0.0, -0.00131618685554713, -1.9073486328125e-06, -6.67572021484375e-05, -1.52587890625e-05, -5.340576171875e-05, -0.0008258819580078125, -1.9073486328125e-06, -0.0002480745315551758, -7.62939453125e-06, -0.02221982181072235, 0.0, -5.91278076171875e-05, -7.478236198425293], "score": -7.520733415042166, "model_output": {"hole4": "player", "hole0": "FrostNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "add_buff", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Frost Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.add_buff(self)\n"}, {"choice_history": [121, 200, "Frost", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "hero", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.0001506805419921875, -0.0001850128173828125, -1.4305104514278355e-06, -1.4424220353248529e-05, -1.1920928244535389e-07, -4.490651190280914e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000789642333984375, -0.000362396240234375, -0.000339508056640625, -1.3589766240329482e-05, -3.62396240234375e-05, -4.410734163684538e-06, 0.0, -0.000608854228630662, 0.0, -0.0016632080078125, 0.0, -1.52587890625e-05, 0.0, -2.8491003831732087e-05, 0.0, -1.33514404296875e-05, -0.00011444091796875, -1.52587890625e-05, -7.2479248046875e-05, 0.0, -0.00461578369140625, -7.62939453125e-05, -9.34600830078125e-05, -7.62939453125e-06, -3.24249267578125e-05, -9.5367431640625e-06, -5.924701690673828e-05, 0.0, -0.0004711151123046875, -1.52587890625e-05, -5.533716201782227, -2.5146169662475586, -9.5367431640625e-06, -0.0005474090576171875, -0.00012969970703125, -0.0001468658447265625, -0.005237579345703125, -5.7220458984375e-06, -0.0001010894775390625, -9.5367431640625e-06, -0.1339138001203537, 0.0, -0.0001010894775390625, -0.006389617919921875, -0.0025310516357421875, -0.003453135257586837, -3.814697265625e-06], "score": -8.21077519819152, "model_output": {"hole4": "player", "hole0": "FrostNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "MAGE", "_type": "Template14", "hole0": "Frost Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.hero:\n            minion.add_buff(Buff(Frozen()))\n"}], "index": 36}
{"beams": [{"choice_history": [121, 200, "Frost", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Frost", " ", "Shock", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.00272369384765625, -7.62939453125e-05, -1.1920928955078125e-06, -4.41074053014745e-06, -1.7166130419354886e-05, -1.1920201359316707e-07, -2.7894973754882812e-05, -4.875659942626953e-05, -0.0002384185791015625, -0.000514984130859375, -1.9073486328125e-06, -0.000316619873046875, -0.0016155242919921875, -9.5367431640625e-06, -0.000225067138671875, -7.62939453125e-05, -0.0001735687255859375, -8.106198947643861e-06, -5.4120995628181845e-05, -3.313969500595704e-05, 0.0, -0.0048732757568359375, -3.62396240234375e-05, 0.0, -0.000720977783203125, -3.0517578125e-05, -0.0003566741943359375, -0.0003681182861328125, -0.01307988166809082, -3.814697265625e-06, -0.004139900207519531, -0.0002346038818359375, -0.0002422332763671875, -0.0001926422119140625, -0.000621795654296875, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -0.0002155303955078125, -0.009158134460449219, -0.0003871917724609375, -1.811981201171875e-05, 0.0, -1.1682508556987159e-05, 0.0, -1.33514404296875e-05, -2.86102294921875e-05, -0.00011444091796875, -6.902217864990234e-05, 0.0, -0.02244281768798828, -2.09808349609375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -8.58306884765625e-05, -0.0004978138022124767, 0.0, -0.0001049041748046875, -0.009139060974121094, -3.814697265625e-06, -7.62939453125e-06, -5.2809715270996094e-05, -1.1920928244535389e-07, -0.0009260978549718857, 0.0, -9.5367431640625e-06, -0.0014629364013671875, -3.4332275390625e-05, -0.0053272247314453125, -0.026924727484583855, -1.52587890625e-05, -0.000110626220703125, -0.004656791687011719, -0.00025177001953125, -0.002291321288794279, -0.00016796588897705078], "score": -0.11570949703172317, "model_output": {"hole4": "player", "hole0": "FrostShock", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Frost Shock", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Frost", " ", "Shock", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "1", "<EOS>", 110], "score_history": [-0.00272369384765625, -7.62939453125e-05, -1.1920928955078125e-06, -4.41074053014745e-06, -1.7166130419354886e-05, -1.1920201359316707e-07, -2.7894973754882812e-05, -4.875659942626953e-05, -0.0002384185791015625, -0.000514984130859375, -1.9073486328125e-06, -0.000316619873046875, -0.0016155242919921875, -9.5367431640625e-06, -0.000225067138671875, -7.62939453125e-05, -0.0001735687255859375, -8.106198947643861e-06, -5.4120995628181845e-05, -3.313969500595704e-05, 0.0, -0.0048732757568359375, -3.62396240234375e-05, 0.0, -0.000720977783203125, -3.0517578125e-05, -0.0003566741943359375, -0.0003681182861328125, -0.01307988166809082, -3.814697265625e-06, -0.004139900207519531, -0.0002346038818359375, -0.0002422332763671875, -0.0001926422119140625, -0.000621795654296875, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -0.0002155303955078125, -0.009158134460449219, -0.0003871917724609375, -1.811981201171875e-05, 0.0, -1.1682508556987159e-05, 0.0, -1.33514404296875e-05, -2.86102294921875e-05, -0.00011444091796875, -6.902217864990234e-05, 0.0, -0.02244281768798828, -2.09808349609375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -8.58306884765625e-05, -0.0004978138022124767, 0.0, -0.0001049041748046875, -0.009139060974121094, -3.814697265625e-06, -7.62939453125e-06, -5.2809715270996094e-05, -1.1920928244535389e-07, -0.0009260978549718857, 0.0, -9.5367431640625e-06, -0.0014629364013671875, -3.4332275390625e-05, -0.0053272247314453125, -4.036030292510986, -0.0007848739624023438, -3.814697265625e-05, -0.0004749298095703125, -7.62939453125e-06, -3.0517578125e-05, -0.45939159393310547, -1.9073486328125e-06, -0.0014400705695152283, -1.9073486328125e-06, -3.4332275390625e-05], "score": -4.579527237356608, "model_output": {"hole4": "player", "hole0": "FrostShock", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Frost Shock", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.heal(player.effective_heal_power(1), self)\n"}, {"choice_history": [121, 200, "Frost", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Frost", " ", "Shock", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-0.00272369384765625, -7.62939453125e-05, -1.1920928955078125e-06, -4.41074053014745e-06, -1.7166130419354886e-05, -1.1920201359316707e-07, -2.7894973754882812e-05, -4.875659942626953e-05, -0.0002384185791015625, -0.000514984130859375, -1.9073486328125e-06, -0.000316619873046875, -0.0016155242919921875, -9.5367431640625e-06, -0.000225067138671875, -7.62939453125e-05, -0.0001735687255859375, -8.106198947643861e-06, -5.4120995628181845e-05, -3.313969500595704e-05, 0.0, -0.0048732757568359375, -3.62396240234375e-05, 0.0, -0.000720977783203125, -3.0517578125e-05, -0.0003566741943359375, -0.0003681182861328125, -0.01307988166809082, -3.814697265625e-06, -0.004139900207519531, -0.0002346038818359375, -0.0002422332763671875, -0.0001926422119140625, -0.000621795654296875, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -0.0002155303955078125, -0.009158134460449219, -0.0003871917724609375, -1.811981201171875e-05, 0.0, -1.1682508556987159e-05, 0.0, -1.33514404296875e-05, -2.86102294921875e-05, -0.00011444091796875, -6.902217864990234e-05, 0.0, -4.621006011962891, -2.288818359375e-05, -0.0001010894775390625, -0.000118255615234375, -2.86102294921875e-05, -8.439673547400162e-05, -9.536738616588991e-07, -0.0001068115234375, -0.0078105926513671875, -5.7220458984375e-06, -7.62939453125e-06, -6.413459777832031e-05, -1.1920928244535389e-07, -0.0007637329399585724, 0.0, -1.1444091796875e-05], "score": -4.671277001221817, "model_output": {"hole4": "player", "hole0": "FrostShock", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Frost Shock", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Frost", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Frost", " ", "Shock", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.00272369384765625, -7.62939453125e-05, -1.1920928955078125e-06, -4.41074053014745e-06, -1.7166130419354886e-05, -1.1920201359316707e-07, -2.7894973754882812e-05, -4.875659942626953e-05, -0.0002384185791015625, -0.000514984130859375, -1.9073486328125e-06, -0.000316619873046875, -0.0016155242919921875, -9.5367431640625e-06, -0.000225067138671875, -7.62939453125e-05, -0.0001735687255859375, -8.106198947643861e-06, -5.4120995628181845e-05, -3.313969500595704e-05, 0.0, -0.0048732757568359375, -3.62396240234375e-05, 0.0, -0.000720977783203125, -3.0517578125e-05, -0.0003566741943359375, -0.0003681182861328125, -0.01307988166809082, -3.814697265625e-06, -0.004139900207519531, -0.0002346038818359375, -0.0002422332763671875, -0.0001926422119140625, -0.000621795654296875, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -0.0002155303955078125, -5.025028228759766, -5.7220458984375e-06, -9.5367431640625e-06, 0.0, -1.2993811651540454e-05, 0.0, -1.1444091796875e-05, -1.52587890625e-05, -8.96453857421875e-05, -6.902217864990234e-05, 0.0, -0.01739978790283203, -2.288818359375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -8.7738037109375e-05, -0.0005013882764615119, 0.0, -0.000102996826171875, -0.009609222412109375, -3.814697265625e-06, -7.62939453125e-06, -5.2809715270996094e-05, -1.1920928244535389e-07, -0.0009272992610931396, 0.0, -9.5367431640625e-06, -0.0015201568603515625, -3.24249267578125e-05, -0.010190963745117188, -0.02505636215209961, -1.52587890625e-05, -0.000110626220703125, -0.004601478576660156, -0.000244140625, -0.0023188588675111532, -0.00016987323760986328], "score": -5.129601799613276, "model_output": {"hole4": "player", "hole0": "FrostShock", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Frost Shock", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Frost", " ", "Shock", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-0.00272369384765625, -7.62939453125e-05, -1.1920928955078125e-06, -4.41074053014745e-06, -1.7166130419354886e-05, -1.1920201359316707e-07, -2.7894973754882812e-05, -4.875659942626953e-05, -0.0002384185791015625, -0.000514984130859375, -1.9073486328125e-06, -0.000316619873046875, -0.0016155242919921875, -9.5367431640625e-06, -0.000225067138671875, -7.62939453125e-05, -0.0001735687255859375, -8.106198947643861e-06, -5.4120995628181845e-05, -3.313969500595704e-05, 0.0, -0.0048732757568359375, -3.62396240234375e-05, 0.0, -0.000720977783203125, -3.0517578125e-05, -0.0003566741943359375, -0.0003681182861328125, -0.01307988166809082, -3.814697265625e-06, -0.004139900207519531, -0.0002346038818359375, -0.0002422332763671875, -0.0001926422119140625, -0.000621795654296875, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -0.0002155303955078125, -0.009158134460449219, -0.0003871917724609375, -1.811981201171875e-05, 0.0, -1.1682508556987159e-05, 0.0, -1.33514404296875e-05, -2.86102294921875e-05, -0.00011444091796875, -6.902217864990234e-05, 0.0, -0.02244281768798828, -2.09808349609375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -8.58306884765625e-05, -0.0004978138022124767, 0.0, -0.0001049041748046875, -0.009139060974121094, -3.814697265625e-06, -7.62939453125e-06, -5.2809715270996094e-05, -1.1920928244535389e-07, -0.0009260978549718857, 0.0, -9.5367431640625e-06, -0.0014629364013671875, -3.4332275390625e-05, -0.0053272247314453125, -4.036030292510986, -0.0007848739624023438, -3.814697265625e-05, -0.0004749298095703125, -7.62939453125e-06, -3.0517578125e-05, -1.0239486694335938, 0.0, -0.0014312779530882835, -1.9073486328125e-06, -3.0517578125e-05], "score": -5.144069798194771, "model_output": {"hole4": "player", "hole0": "FrostShock", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Frost Shock", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.heal(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Frost", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Frost", " ", "Shock", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "TOTEM", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.00272369384765625, -7.62939453125e-05, -1.1920928955078125e-06, -4.41074053014745e-06, -1.7166130419354886e-05, -1.1920201359316707e-07, -2.7894973754882812e-05, -4.875659942626953e-05, -0.0002384185791015625, -0.000514984130859375, -1.9073486328125e-06, -0.000316619873046875, -0.0016155242919921875, -9.5367431640625e-06, -0.000225067138671875, -7.62939453125e-05, -0.0001735687255859375, -8.106198947643861e-06, -5.4120995628181845e-05, -3.313969500595704e-05, 0.0, -0.0048732757568359375, -3.62396240234375e-05, 0.0, -0.000720977783203125, -3.0517578125e-05, -0.0003566741943359375, -0.0003681182861328125, -5.237163543701172, 0.0, -0.00677490234375, -6.29425048828125e-05, -0.00026702880859375, -0.000377655029296875, -0.0003528594970703125, -3.814697265625e-06, -7.62939453125e-05, 0.0, -0.0001163482666015625, -0.024860382080078125, -0.000415802001953125, -1.7523765563964844e-05, 0.0, -1.1444089977885596e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, -0.000110626220703125, -6.902217864990234e-05, 0.0, -0.02023792266845703, -2.09808349609375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -8.58306884765625e-05, -0.0005026989383623004, 0.0, -0.000102996826171875, -0.009991645812988281, -3.814697265625e-06, -7.62939453125e-06, -5.2809715270996094e-05, -1.1920928244535389e-07, -0.0009224396198987961, 0.0, -9.5367431640625e-06, -0.001453399658203125, -3.4332275390625e-05, -0.005615234375, -0.026418326422572136, -1.52587890625e-05, -0.000110626220703125, -0.0045623779296875, -0.0002498626708984375, -0.0022912020795047283, -0.00016796588897705078], "score": -5.356158483561096, "model_output": {"hole4": "player", "hole0": "FrostShock", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Frost Shock", "_type": "Str"}, {"_type": "Template60"}, {"attr": "TOTEM", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.TOTEM,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Frost", " ", "Shock", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.00272369384765625, -7.62939453125e-05, -1.1920928955078125e-06, -4.41074053014745e-06, -1.7166130419354886e-05, -1.1920201359316707e-07, -2.7894973754882812e-05, -4.875659942626953e-05, -0.0002384185791015625, -0.000514984130859375, -1.9073486328125e-06, -0.000316619873046875, -0.0016155242919921875, -9.5367431640625e-06, -0.000225067138671875, -7.62939453125e-05, -0.0001735687255859375, -8.106198947643861e-06, -5.4120995628181845e-05, -3.313969500595704e-05, 0.0, -5.474414825439453, -7.62939453125e-06, 0.0, -9.918212890625e-05, -1.71661376953125e-05, -0.000698089599609375, -0.001247406005859375, -0.018219709396362305, -7.62939453125e-06, -0.0049228668212890625, -0.000316619873046875, -0.0002193450927734375, -0.0003528594970703125, -0.000774383544921875, -5.7220458984375e-06, -7.62939453125e-05, 0.0, -0.000225067138671875, -0.009275436401367188, -0.00040435791015625, -1.811981201171875e-05, 0.0, -1.3589857189799659e-05, 0.0, -1.33514404296875e-05, -3.0517578125e-05, -0.0001163482666015625, -6.902217864990234e-05, 0.0, -0.022096633911132812, -2.09808349609375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -8.58306884765625e-05, -0.000494000967592001, 0.0, -0.000102996826171875, -0.009033203125, -3.814697265625e-06, -7.62939453125e-06, -5.2809715270996094e-05, -1.1920928244535389e-07, -0.0009277309291064739, 0.0, -9.5367431640625e-06, -0.001453399658203125, -3.4332275390625e-05, -0.005367279052734375, -0.026926396414637566, -1.52587890625e-05, -0.000110626220703125, -0.0046367645263671875, -0.00025177001953125, -0.0022894139401614666, -0.00016796588897705078], "score": -5.5918313655042695, "model_output": {"hole4": "player", "hole0": "FrostShock", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Frost Shock", "_type": "Str"}, {"_type": "Template59"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Frost", " ", "Shock", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-0.00272369384765625, -7.62939453125e-05, -1.1920928955078125e-06, -4.41074053014745e-06, -1.7166130419354886e-05, -1.1920201359316707e-07, -2.7894973754882812e-05, -4.875659942626953e-05, -0.0002384185791015625, -0.000514984130859375, -1.9073486328125e-06, -0.000316619873046875, -0.0016155242919921875, -9.5367431640625e-06, -0.000225067138671875, -7.62939453125e-05, -0.0001735687255859375, -8.106198947643861e-06, -5.4120995628181845e-05, -3.313969500595704e-05, 0.0, -0.0048732757568359375, -3.62396240234375e-05, 0.0, -0.000720977783203125, -3.0517578125e-05, -0.0003566741943359375, -0.0003681182861328125, -0.01307988166809082, -3.814697265625e-06, -0.004139900207519531, -0.0002346038818359375, -0.0002422332763671875, -0.0001926422119140625, -0.000621795654296875, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -0.0002155303955078125, -0.009158134460449219, -0.0003871917724609375, -1.811981201171875e-05, 0.0, -1.1682508556987159e-05, 0.0, -1.33514404296875e-05, -2.86102294921875e-05, -0.00011444091796875, -6.902217864990234e-05, 0.0, -0.02244281768798828, -2.09808349609375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -8.58306884765625e-05, -0.0004978138022124767, 0.0, -0.0001049041748046875, -0.009139060974121094, -3.814697265625e-06, -7.62939453125e-06, -5.2809715270996094e-05, -1.1920928244535389e-07, -0.0009260978549718857, 0.0, -9.5367431640625e-06, -0.0014629364013671875, -3.4332275390625e-05, -0.0053272247314453125, -5.895054340362549, -3.814697265625e-06, -4.76837158203125e-05, -0.0006256103515625, -3.814697265625e-06, -1.52587890625e-05, -0.001102447509765625, 0.0, -0.0006713983602821827, 0.0, -2.09808349609375e-05], "score": -5.9788363849715935, "model_output": {"hole4": "player", "hole0": "FrostShock", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Frost Shock", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.damage(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Frost", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Frost", " ", "Shock", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 110], "score_history": [-0.00272369384765625, -7.62939453125e-05, -1.1920928955078125e-06, -4.41074053014745e-06, -1.7166130419354886e-05, -1.1920201359316707e-07, -2.7894973754882812e-05, -4.875659942626953e-05, -0.0002384185791015625, -0.000514984130859375, -1.9073486328125e-06, -0.000316619873046875, -0.0016155242919921875, -9.5367431640625e-06, -0.000225067138671875, -7.62939453125e-05, -0.0001735687255859375, -8.106198947643861e-06, -5.4120995628181845e-05, -3.313969500595704e-05, 0.0, -0.0048732757568359375, -3.62396240234375e-05, 0.0, -0.000720977783203125, -3.0517578125e-05, -0.0003566741943359375, -0.0003681182861328125, -0.01307988166809082, -3.814697265625e-06, -0.004139900207519531, -0.0002346038818359375, -0.0002422332763671875, -0.0001926422119140625, -0.000621795654296875, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -0.0002155303955078125, -0.009158134460449219, -0.0003871917724609375, -1.811981201171875e-05, 0.0, -1.1682508556987159e-05, 0.0, -1.33514404296875e-05, -2.86102294921875e-05, -0.00011444091796875, -6.902217864990234e-05, 0.0, -0.02244281768798828, -2.09808349609375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -8.58306884765625e-05, -0.0004978138022124767, 0.0, -0.0001049041748046875, -0.009139060974121094, -3.814697265625e-06, -7.62939453125e-06, -5.2809715270996094e-05, -1.1920928244535389e-07, -0.0009260978549718857, 0.0, -9.5367431640625e-06, -0.0014629364013671875, -3.4332275390625e-05, -0.0053272247314453125, -0.026924727484583855, -1.52587890625e-05, -0.000110626220703125, -6.066187858581543], "score": -6.174529506728952, "model_output": {"hole4": "player", "hole0": "FrostShock", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Frost Shock", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.add_buff(self)\n"}, {"choice_history": [121, 200, "Frost", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Frost", " ", "Shock", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "1", "<EOS>", 110], "score_history": [-0.00272369384765625, -7.62939453125e-05, -1.1920928955078125e-06, -4.41074053014745e-06, -1.7166130419354886e-05, -1.1920201359316707e-07, -2.7894973754882812e-05, -4.875659942626953e-05, -0.0002384185791015625, -0.000514984130859375, -1.9073486328125e-06, -0.000316619873046875, -0.0016155242919921875, -9.5367431640625e-06, -0.000225067138671875, -7.62939453125e-05, -0.0001735687255859375, -8.106198947643861e-06, -5.4120995628181845e-05, -3.313969500595704e-05, 0.0, -0.0048732757568359375, -3.62396240234375e-05, 0.0, -0.000720977783203125, -3.0517578125e-05, -0.0003566741943359375, -0.0003681182861328125, -0.01307988166809082, -3.814697265625e-06, -0.004139900207519531, -0.0002346038818359375, -0.0002422332763671875, -0.0001926422119140625, -0.000621795654296875, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -0.0002155303955078125, -0.009158134460449219, -0.0003871917724609375, -1.811981201171875e-05, 0.0, -1.1682508556987159e-05, 0.0, -1.33514404296875e-05, -2.86102294921875e-05, -0.00011444091796875, -6.902217864990234e-05, 0.0, -0.02244281768798828, -2.09808349609375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -8.58306884765625e-05, -0.0004978138022124767, 0.0, -0.0001049041748046875, -0.009139060974121094, -3.814697265625e-06, -7.62939453125e-06, -5.2809715270996094e-05, -1.1920928244535389e-07, -0.0009260978549718857, 0.0, -9.5367431640625e-06, -0.0014629364013671875, -3.4332275390625e-05, -5.393536567687988, 0.0, -0.7059402465820312, -0.00231170654296875, -1.9073486328125e-06, -0.01993856206536293, 0.0, -6.67572021484375e-05, -0.0007419586181640625, -7.62939453125e-06, -3.24249267578125e-05, -0.0152435302734375, -1.9073486328125e-06, -0.0013847742229700089, 0.0, -2.6702880859375e-05], "score": -6.215198486016099, "model_output": {"hole4": "player", "hole0": "FrostShock", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Frost Shock", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        player.hero.heal(player.effective_heal_power(1), self)\n"}, {"choice_history": [121, 200, "Frost", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Frost", " ", "Shock", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.00272369384765625, -7.62939453125e-05, -1.1920928955078125e-06, -4.41074053014745e-06, -1.7166130419354886e-05, -1.1920201359316707e-07, -2.7894973754882812e-05, -4.875659942626953e-05, -0.0002384185791015625, -0.000514984130859375, -1.9073486328125e-06, -0.000316619873046875, -0.0016155242919921875, -9.5367431640625e-06, -0.000225067138671875, -7.62939453125e-05, -0.0001735687255859375, -8.106198947643861e-06, -5.4120995628181845e-05, -3.313969500595704e-05, 0.0, -0.0048732757568359375, -3.62396240234375e-05, 0.0, -0.000720977783203125, -3.0517578125e-05, -0.0003566741943359375, -0.0003681182861328125, -0.01307988166809082, -3.814697265625e-06, -6.1438751220703125, -0.00012969970703125, -0.00054168701171875, -0.002048492431640625, -0.006435394287109375, -5.7220458984375e-06, -9.1552734375e-05, 0.0, -0.0002288818359375, -0.017241477966308594, -0.000308990478515625, -1.442432312614983e-05, 0.0, -1.7642971215536818e-05, 0.0, -1.33514404296875e-05, -2.86102294921875e-05, -0.000110626220703125, -7.474422454833984e-05, 0.0, -0.020911216735839844, -1.71661376953125e-05, -2.09808349609375e-05, -1.1444091796875e-05, -8.58306884765625e-05, -0.0004631405172403902, 0.0, -0.000102996826171875, -0.008759498596191406, -3.814697265625e-06, -7.62939453125e-06, -5.2809715270996094e-05, -1.1920928244535389e-07, -0.0009329821914434433, 0.0, -9.5367431640625e-06, -0.0014667510986328125, -3.24249267578125e-05, -0.0054759979248046875, -0.02726900391280651, -1.52587890625e-05, -0.000110626220703125, -0.0046539306640625, -0.00025177001953125, -0.0022977585904300213, -0.00016987323760986328], "score": -6.269925296528065, "model_output": {"hole4": "player", "hole0": "FrostShock", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Frost Shock", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template49"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Frost", " ", "Shock", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.00272369384765625, -7.62939453125e-05, -1.1920928955078125e-06, -4.41074053014745e-06, -1.7166130419354886e-05, -1.1920201359316707e-07, -2.7894973754882812e-05, -4.875659942626953e-05, -0.0002384185791015625, -0.000514984130859375, -1.9073486328125e-06, -0.000316619873046875, -0.0016155242919921875, -9.5367431640625e-06, -0.000225067138671875, -7.62939453125e-05, -0.0001735687255859375, -8.106198947643861e-06, -5.4120995628181845e-05, -3.313969500595704e-05, 0.0, -0.0048732757568359375, -3.62396240234375e-05, 0.0, -0.000720977783203125, -3.0517578125e-05, -0.0003566741943359375, -0.0003681182861328125, -6.2871809005737305, 0.0, -0.0011119842529296875, -0.0001049041748046875, -0.001178741455078125, -0.000492095947265625, -0.000225067138671875, -1.9073486328125e-06, -0.0001583099365234375, 0.0, -8.96453857421875e-05, -0.013975143432617188, -0.0004329681396484375, -1.800060272216797e-05, 0.0, -1.1682508556987159e-05, 0.0, -1.33514404296875e-05, -3.0517578125e-05, -0.0001163482666015625, -6.902217864990234e-05, 0.0, -0.022918701171875, -2.288818359375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -8.58306884765625e-05, -0.0005018648807890713, 0.0, -0.0001049041748046875, -0.009238243103027344, -3.814697265625e-06, -7.62939453125e-06, -5.2809715270996094e-05, -1.1920928244535389e-07, -0.0009245434775948524, 0.0, -9.5367431640625e-06, -0.00151824951171875, -3.4332275390625e-05, -0.0055141448974609375, -0.026661155745387077, -1.52587890625e-05, -0.0001087188720703125, -0.004730224609375, -0.00025177001953125, -0.0022912020795047283, -0.00016605854034423828], "score": -6.39295572713899, "model_output": {"hole4": "player", "hole0": "FrostShock", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Frost Shock", "_type": "Str"}, {"_type": "Template60"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Frost", " ", "Shock", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.00272369384765625, -7.62939453125e-05, -1.1920928955078125e-06, -4.41074053014745e-06, -1.7166130419354886e-05, -1.1920201359316707e-07, -2.7894973754882812e-05, -4.875659942626953e-05, -0.0002384185791015625, -0.000514984130859375, -1.9073486328125e-06, -0.000316619873046875, -0.0016155242919921875, -9.5367431640625e-06, -0.000225067138671875, -7.62939453125e-05, -0.0001735687255859375, -8.106198947643861e-06, -5.4120995628181845e-05, -3.313969500595704e-05, 0.0, -0.0048732757568359375, -3.62396240234375e-05, 0.0, -0.000720977783203125, -3.0517578125e-05, -0.0003566741943359375, -0.0003681182861328125, -6.380674362182617, -5.7220458984375e-06, -0.009122848510742188, -5.53131103515625e-05, -0.0009517669677734375, -0.00026702880859375, -0.000400543212890625, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0001163482666015625, -0.0065860748291015625, -0.0003261566162109375, -2.9087066650390625e-05, 0.0, -1.20401346066501e-05, 0.0, -1.33514404296875e-05, -2.86102294921875e-05, -0.00011444091796875, -6.711483001708984e-05, 0.0, -0.02126598358154297, -2.09808349609375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -8.58306884765625e-05, -0.0005068691680207849, 0.0, -0.000102996826171875, -0.009833335876464844, -3.814697265625e-06, -7.62939453125e-06, -5.2809715270996094e-05, -1.1920928244535389e-07, -0.000923836138099432, 0.0, -9.5367431640625e-06, -0.0014801025390625, -3.4332275390625e-05, -0.005584716796875, -0.026535270735621452, -1.52587890625e-05, -0.000110626220703125, -0.0046329498291015625, -0.0002498626708984375, -0.00229299021884799, -0.00016796588897705078], "score": -6.485309910979133, "model_output": {"hole4": "player", "hole0": "FrostShock", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Frost Shock", "_type": "Str"}, {"_type": "Template60"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Frost", " ", "Shock", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 41, "add_effect", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.00272369384765625, -7.62939453125e-05, -1.1920928955078125e-06, -4.41074053014745e-06, -1.7166130419354886e-05, -1.1920201359316707e-07, -2.7894973754882812e-05, -4.875659942626953e-05, -0.0002384185791015625, -0.000514984130859375, -1.9073486328125e-06, -0.000316619873046875, -0.0016155242919921875, -9.5367431640625e-06, -0.000225067138671875, -7.62939453125e-05, -0.0001735687255859375, -8.106198947643861e-06, -5.4120995628181845e-05, -3.313969500595704e-05, 0.0, -0.0048732757568359375, -3.62396240234375e-05, 0.0, -0.000720977783203125, -3.0517578125e-05, -0.0003566741943359375, -0.0003681182861328125, -0.01307988166809082, -3.814697265625e-06, -0.004139900207519531, -0.0002346038818359375, -0.0002422332763671875, -0.0001926422119140625, -0.000621795654296875, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -0.0002155303955078125, -0.009158134460449219, -0.0003871917724609375, -1.811981201171875e-05, 0.0, -1.1682508556987159e-05, 0.0, -1.33514404296875e-05, -2.86102294921875e-05, -0.00011444091796875, -6.902217864990234e-05, 0.0, -0.02244281768798828, -2.09808349609375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -8.58306884765625e-05, -0.0004978138022124767, 0.0, -0.0001049041748046875, -0.009139060974121094, -3.814697265625e-06, -7.62939453125e-06, -5.2809715270996094e-05, -1.1920928244535389e-07, -0.0009260978549718857, 0.0, -9.5367431640625e-06, -0.0014629364013671875, -3.4332275390625e-05, -0.0053272247314453125, -6.176284313201904, -0.001718759536743164, -0.0013275146484375, -0.2587099075317383, -0.0001621246337890625, -0.006286144256591797, -8.20159912109375e-05], "score": -6.525861815453474, "model_output": {"hole4": "player", "hole0": "FrostShock", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_effect", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Frost Shock", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.add_effect(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frost", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Frost", " ", "Shock", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.00272369384765625, -7.62939453125e-05, -1.1920928955078125e-06, -4.41074053014745e-06, -1.7166130419354886e-05, -1.1920201359316707e-07, -2.7894973754882812e-05, -4.875659942626953e-05, -0.0002384185791015625, -0.000514984130859375, -1.9073486328125e-06, -0.000316619873046875, -0.0016155242919921875, -9.5367431640625e-06, -0.000225067138671875, -7.62939453125e-05, -0.0001735687255859375, -8.106198947643861e-06, -5.4120995628181845e-05, -3.313969500595704e-05, 0.0, -0.0048732757568359375, -3.62396240234375e-05, 0.0, -0.000720977783203125, -3.0517578125e-05, -0.0003566741943359375, -0.0003681182861328125, -6.5810394287109375, -1.9073486328125e-06, -0.0035839080810546875, -0.0002269744873046875, -0.0007534027099609375, -0.000629425048828125, -9.5367431640625e-05, -3.814697265625e-06, -0.000141143798828125, 0.0, -0.0001010894775390625, -0.007747650146484375, -0.0003871917724609375, -1.5735626220703125e-05, 0.0, -1.1444089977885596e-05, 0.0, -1.33514404296875e-05, -2.6702880859375e-05, -0.000110626220703125, -6.902217864990234e-05, 0.0, -0.02316570281982422, -2.288818359375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -8.7738037109375e-05, -0.0005140180583111942, 0.0, -0.000102996826171875, -0.010287284851074219, -3.814697265625e-06, -7.62939453125e-06, -5.4717063903808594e-05, -1.1920928244535389e-07, -0.0009218254126608372, 0.0, -9.5367431640625e-06, -0.0014514923095703125, -3.24249267578125e-05, -0.0057086944580078125, -0.026700494810938835, -1.52587890625e-05, -0.000110626220703125, -0.0046558380126953125, -0.0002498626708984375, -0.0022988314740359783, -0.00016796588897705078], "score": -6.684111083005057, "model_output": {"hole4": "player", "hole0": "FrostShock", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Frost Shock", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.add_buff(Buff(Frozen()))\n"}], "index": 37}
{"beams": [{"choice_history": [121, 200, "Frostbolt", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.000156402587890625, -4.9591064453125e-05, -5.328649785951711e-05, -4.768371127283899e-06, -6.793939974159002e-06, -1.1444091796875e-05, -0.0001850128173828125, -0.0002536773681640625, -0.00075531005859375, -7.82012939453125e-05, -0.0002110004425048828, -1.9073486328125e-06, -5.125981260789558e-06, -1.9073486328125e-06, -0.004039764404296875, -0.000209808349609375, -0.0003833770751953125, 0.0, -6.67572021484375e-05, 0.0, -0.0001430511474609375, -0.0008935928344726562, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.633167266845703e-05, 0.0, -7.62939453125e-06, -2.288818359375e-05, -4.00543212890625e-05, -7.867813110351562e-05, -5.841255187988281e-06, -0.009543418884277344, -2.6702880859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -0.0001373291015625, -0.002818891080096364, -1.1920928244535389e-07, -5.53131103515625e-05, -0.000690460205078125, -1.9073486328125e-06, -6.4849853515625e-05, -3.4809112548828125e-05, 0.0, -7.891452696640044e-05, -4.5299530029296875e-06, -2.288818359375e-05, -0.000133514404296875, -7.62939453125e-06, -0.10167884826660156, -0.01749098300933838, -1.9073486328125e-06, -0.000171661376953125, -0.0071277618408203125, -0.0009517669677734375, -0.0015590187394991517, -3.814697265625e-06], "score": -0.15032548230328047, "model_output": {"hole4": "player", "hole0": "Frostbolt", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Frostbolt", "hole1": 2, "hole2": "MAGE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frostbolt", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score_history": [-0.000156402587890625, -4.9591064453125e-05, -5.328649785951711e-05, -4.768371127283899e-06, -6.793939974159002e-06, -1.1444091796875e-05, -0.0001850128173828125, -0.0002536773681640625, -0.00075531005859375, -7.82012939453125e-05, -0.0002110004425048828, -1.9073486328125e-06, -5.125981260789558e-06, -1.9073486328125e-06, -0.004039764404296875, -0.000209808349609375, -0.0003833770751953125, 0.0, -6.67572021484375e-05, 0.0, -0.0001430511474609375, -0.0008935928344726562, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.633167266845703e-05, 0.0, -7.62939453125e-06, -2.288818359375e-05, -4.00543212890625e-05, -7.867813110351562e-05, -5.841255187988281e-06, -0.009543418884277344, -2.6702880859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -0.0001373291015625, -0.002818891080096364, -1.1920928244535389e-07, -5.53131103515625e-05, -0.000690460205078125, -1.9073486328125e-06, -6.4849853515625e-05, -3.4809112548828125e-05, 0.0, -7.891452696640044e-05, -4.5299530029296875e-06, -2.288818359375e-05, -0.000133514404296875, -7.62939453125e-06, -2.372447967529297, -1.9073486328125e-06, -1.1727848052978516, -0.0034590959548950195, 0.0, -0.048204272985458374, 0.0, -1.1444091796875e-05, -0.0002422332763671875, -1.9073486328125e-06, -2.09808349609375e-05, -0.11057853698730469, 0.0, -0.0034970585256814957, -1.0251998901367188e-05, -0.000110626220703125], "score": -3.732710808456879, "model_output": {"hole4": "player", "hole0": "Frostbolt", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Frostbolt", "hole1": 2, "hole2": "MAGE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.hero.heal(player.effective_spell_damage(3), self)\n"}, {"choice_history": [121, 200, "Frostbolt", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 17, 156, 41, "card", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.000156402587890625, -4.9591064453125e-05, -5.328649785951711e-05, -4.768371127283899e-06, -6.793939974159002e-06, -1.1444091796875e-05, -0.0001850128173828125, -0.0002536773681640625, -0.00075531005859375, -7.82012939453125e-05, -0.0002110004425048828, -1.9073486328125e-06, -5.125981260789558e-06, -1.9073486328125e-06, -0.004039764404296875, -0.000209808349609375, -0.0003833770751953125, 0.0, -6.67572021484375e-05, 0.0, -0.0001430511474609375, -0.0008935928344726562, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.633167266845703e-05, 0.0, -7.62939453125e-06, -2.288818359375e-05, -4.00543212890625e-05, -7.867813110351562e-05, -5.841255187988281e-06, -0.009543418884277344, -2.6702880859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -0.0001373291015625, -0.002818891080096364, -1.1920928244535389e-07, -5.53131103515625e-05, -0.000690460205078125, -1.9073486328125e-06, -6.4849853515625e-05, -3.4809112548828125e-05, 0.0, -7.891452696640044e-05, -4.5299530029296875e-06, -2.288818359375e-05, -0.000133514404296875, -7.62939453125e-06, -2.372447967529297, -1.9073486328125e-06, -1.1013946533203125, -0.044585347175598145, -3.814697265625e-05, -0.1199072077870369, -1.9073486328125e-06, -0.0009593963623046875, -0.0043544769287109375, -0.15625667572021484, -0.0013904569204896688, -1.33514404296875e-05], "score": -3.822691214910712, "model_output": {"hole4": "player", "hole0": "Frostbolt", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Frostbolt", "hole1": 2, "hole2": "MAGE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.card.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frostbolt", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score_history": [-0.000156402587890625, -4.9591064453125e-05, -5.328649785951711e-05, -4.768371127283899e-06, -6.793939974159002e-06, -1.1444091796875e-05, -0.0001850128173828125, -0.0002536773681640625, -0.00075531005859375, -7.82012939453125e-05, -0.0002110004425048828, -1.9073486328125e-06, -5.125981260789558e-06, -1.9073486328125e-06, -0.004039764404296875, -0.000209808349609375, -0.0003833770751953125, 0.0, -6.67572021484375e-05, 0.0, -0.0001430511474609375, -0.0008935928344726562, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.633167266845703e-05, 0.0, -7.62939453125e-06, -2.288818359375e-05, -4.00543212890625e-05, -7.867813110351562e-05, -5.841255187988281e-06, -0.009543418884277344, -2.6702880859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -0.0001373291015625, -0.002818891080096364, -1.1920928244535389e-07, -5.53131103515625e-05, -0.000690460205078125, -1.9073486328125e-06, -6.4849853515625e-05, -3.4809112548828125e-05, 0.0, -7.891452696640044e-05, -4.5299530029296875e-06, -2.288818359375e-05, -0.000133514404296875, -7.62939453125e-06, -2.372447967529297, -1.9073486328125e-06, -2.093351364135742, -5.7220458984375e-06, -0.13959693908691406, 0.0, -0.0005408525466918945, -4.410734163684538e-06, -0.02130281738936901, -1.1920928244535389e-07, -0.0009480392909608781, -3.576272320060525e-06, -0.0006197052425704896, 0.0, -2.86102294921875e-05, -0.0001239776611328125, -1.9073486328125e-06, -0.0001697540283203125, -5.543231964111328e-05, 0.0, -0.0003167004615534097, -3.933906555175781e-06, -4.1961669921875e-05], "score": -4.650905418513489, "model_output": {"hole4": "player", "hole0": "Frostbolt", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Frostbolt", "hole1": 2, "hole2": "MAGE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n"}, {"choice_history": [121, 200, "Frostbolt", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score_history": [-0.000156402587890625, -4.9591064453125e-05, -5.328649785951711e-05, -4.768371127283899e-06, -6.793939974159002e-06, -1.1444091796875e-05, -0.0001850128173828125, -0.0002536773681640625, -0.00075531005859375, -7.82012939453125e-05, -0.0002110004425048828, -1.9073486328125e-06, -5.125981260789558e-06, -1.9073486328125e-06, -0.004039764404296875, -0.000209808349609375, -0.0003833770751953125, 0.0, -6.67572021484375e-05, 0.0, -0.0001430511474609375, -0.0008935928344726562, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.633167266845703e-05, 0.0, -7.62939453125e-06, -2.288818359375e-05, -4.00543212890625e-05, -7.867813110351562e-05, -5.841255187988281e-06, -0.009543418884277344, -2.6702880859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -0.0001373291015625, -0.002818891080096364, -1.1920928244535389e-07, -5.53131103515625e-05, -0.000690460205078125, -1.9073486328125e-06, -6.4849853515625e-05, -3.4809112548828125e-05, 0.0, -7.891452696640044e-05, -4.5299530029296875e-06, -2.288818359375e-05, -0.000133514404296875, -7.62939453125e-06, -0.10167884826660156, -4.5645060539245605, -0.0002498626708984375, -2.09808349609375e-05, -0.000652313232421875, -3.814697265625e-06, -4.57763671875e-05, -0.033616065979003906, 0.0, -0.005980102811008692, -1.71661376953125e-05, -8.0108642578125e-05], "score": -4.728190813620579, "model_output": {"hole4": "player", "hole0": "Frostbolt", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Frostbolt", "hole1": 2, "hole2": "MAGE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.heal(player.effective_spell_damage(3), self)\n"}, {"choice_history": [121, 200, "Frostbolt", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.000156402587890625, -4.9591064453125e-05, -5.328649785951711e-05, -4.768371127283899e-06, -6.793939974159002e-06, -1.1444091796875e-05, -0.0001850128173828125, -0.0002536773681640625, -0.00075531005859375, -7.82012939453125e-05, -0.0002110004425048828, -1.9073486328125e-06, -5.125981260789558e-06, -1.9073486328125e-06, -0.004039764404296875, -0.000209808349609375, -0.0003833770751953125, 0.0, -6.67572021484375e-05, 0.0, -0.0001430511474609375, -0.0008935928344726562, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.633167266845703e-05, 0.0, -7.62939453125e-06, -2.288818359375e-05, -4.00543212890625e-05, -7.867813110351562e-05, -5.841255187988281e-06, -0.009543418884277344, -2.6702880859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -0.0001373291015625, -0.002818891080096364, -1.1920928244535389e-07, -5.53131103515625e-05, -0.000690460205078125, -1.9073486328125e-06, -6.4849853515625e-05, -3.4809112548828125e-05, 0.0, -7.891452696640044e-05, -4.5299530029296875e-06, -2.288818359375e-05, -0.000133514404296875, -7.62939453125e-06, -2.372447967529297, -1.9073486328125e-06, -1.4974403381347656, -1.9073486328125e-06, -0.14242208003997803, -1.9788742065429688e-05, -0.49463871121406555, 0.0, -0.49249643087387085, 0.0, -0.001659393310546875, -0.013924598693847656, -0.06276416778564453, -0.0017800331115722656, -5.7220458984375e-06], "score": -5.100942766235214, "model_output": {"hole4": "player", "hole0": "Frostbolt", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"attr": "card", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Frostbolt", "hole1": 2, "hole2": "MAGE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        minion.card.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frostbolt", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 110], "score_history": [-0.000156402587890625, -4.9591064453125e-05, -5.328649785951711e-05, -4.768371127283899e-06, -6.793939974159002e-06, -1.1444091796875e-05, -0.0001850128173828125, -0.0002536773681640625, -0.00075531005859375, -7.82012939453125e-05, -0.0002110004425048828, -1.9073486328125e-06, -5.125981260789558e-06, -1.9073486328125e-06, -0.004039764404296875, -0.000209808349609375, -0.0003833770751953125, 0.0, -6.67572021484375e-05, 0.0, -0.0001430511474609375, -0.0008935928344726562, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.633167266845703e-05, 0.0, -7.62939453125e-06, -2.288818359375e-05, -4.00543212890625e-05, -7.867813110351562e-05, -5.841255187988281e-06, -0.009543418884277344, -2.6702880859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -0.0001373291015625, -0.002818891080096364, -1.1920928244535389e-07, -5.53131103515625e-05, -0.000690460205078125, -1.9073486328125e-06, -6.4849853515625e-05, -3.4809112548828125e-05, 0.0, -7.891452696640044e-05, -4.5299530029296875e-06, -2.288818359375e-05, -0.000133514404296875, -7.62939453125e-06, -0.10167884826660156, -0.01749098300933838, -1.9073486328125e-06, -0.000171661376953125, -5.198083877563477], "score": -5.3387669976213985, "model_output": {"hole4": "player", "hole0": "Frostbolt", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Frostbolt", "hole1": 2, "hole2": "MAGE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.add_buff(self)\n"}, {"choice_history": [121, 200, "Frostbolt", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "3", "<EOS>", 110], "score_history": [-0.000156402587890625, -4.9591064453125e-05, -5.328649785951711e-05, -4.768371127283899e-06, -6.793939974159002e-06, -1.1444091796875e-05, -0.0001850128173828125, -0.0002536773681640625, -0.00075531005859375, -7.82012939453125e-05, -0.0002110004425048828, -1.9073486328125e-06, -5.125981260789558e-06, -1.9073486328125e-06, -0.004039764404296875, -0.000209808349609375, -0.0003833770751953125, 0.0, -6.67572021484375e-05, 0.0, -0.0001430511474609375, -0.0008935928344726562, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.633167266845703e-05, 0.0, -7.62939453125e-06, -2.288818359375e-05, -4.00543212890625e-05, -7.867813110351562e-05, -5.841255187988281e-06, -0.009543418884277344, -2.6702880859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -0.0001373291015625, -0.002818891080096364, -1.1920928244535389e-07, -5.53131103515625e-05, -0.000690460205078125, -1.9073486328125e-06, -6.4849853515625e-05, -3.4809112548828125e-05, 0.0, -7.891452696640044e-05, -4.5299530029296875e-06, -2.288818359375e-05, -0.000133514404296875, -7.62939453125e-06, -2.372447967529297, -1.9073486328125e-06, -1.1727848052978516, -0.0034590959548950195, 0.0, -0.048204272985458374, 0.0, -1.1444091796875e-05, -0.0002422332763671875, -1.9073486328125e-06, -2.09808349609375e-05, -2.295930862426758, 0.0, -0.0026579471305012703, -1.3709068298339844e-05, -0.00014495849609375], "score": -5.91726181184594, "model_output": {"hole4": "player", "hole0": "Frostbolt", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Frostbolt", "hole1": 2, "hole2": "MAGE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.hero.heal(player.effective_heal_power(3), self)\n"}, {"choice_history": [121, 200, "Frostbolt", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.000156402587890625, -4.9591064453125e-05, -5.328649785951711e-05, -4.768371127283899e-06, -6.793939974159002e-06, -1.1444091796875e-05, -0.0001850128173828125, -0.0002536773681640625, -0.00075531005859375, -7.82012939453125e-05, -0.0002110004425048828, -1.9073486328125e-06, -5.125981260789558e-06, -1.9073486328125e-06, -0.004039764404296875, -0.000209808349609375, -0.0003833770751953125, 0.0, -6.67572021484375e-05, 0.0, -0.0001430511474609375, -0.0008935928344726562, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.633167266845703e-05, 0.0, -7.62939453125e-06, -2.288818359375e-05, -4.00543212890625e-05, -7.867813110351562e-05, -5.841255187988281e-06, -0.009543418884277344, -2.6702880859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -0.0001373291015625, -5.893442630767822, -4.5299530029296875e-06, -0.000110626220703125, -0.0006237030029296875, -1.9073486328125e-06, -0.0001049041748046875, -0.00043129920959472656, 0.0, -0.00019000373140443116, -4.172325134277344e-06, -4.00543212890625e-05, -0.000186920166015625, -9.5367431640625e-06, -0.18594741821289062, -0.018967509269714355, -1.9073486328125e-06, -0.0001850128173828125, -0.008900642395019531, -0.000919342041015625, -0.0016921752830967307, -3.814697265625e-06], "score": -6.129194003704015, "model_output": {"hole4": "player", "hole0": "Frostbolt", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Frostbolt", "hole1": 2, "hole2": "MAGE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(3), self)\n        self.target.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frostbolt", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 17, 156, 41, "card", "<EOS>", "add_buff", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 151, 17, 156, 25, 186, "minion", "<EOS>", "<UNK>", "<EOS>"], "score_history": [-0.000156402587890625, -4.9591064453125e-05, -5.328649785951711e-05, -4.768371127283899e-06, -6.793939974159002e-06, -1.1444091796875e-05, -0.0001850128173828125, -0.0002536773681640625, -0.00075531005859375, -7.82012939453125e-05, -0.0002110004425048828, -1.9073486328125e-06, -5.125981260789558e-06, -1.9073486328125e-06, -0.004039764404296875, -0.000209808349609375, -0.0003833770751953125, 0.0, -6.67572021484375e-05, 0.0, -0.0001430511474609375, -0.0008935928344726562, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.633167266845703e-05, 0.0, -7.62939453125e-06, -2.288818359375e-05, -4.00543212890625e-05, -7.867813110351562e-05, -5.841255187988281e-06, -0.009543418884277344, -2.6702880859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -0.0001373291015625, -0.002818891080096364, -1.1920928244535389e-07, -5.53131103515625e-05, -0.000690460205078125, -1.9073486328125e-06, -6.4849853515625e-05, -3.4809112548828125e-05, 0.0, -7.891452696640044e-05, -4.5299530029296875e-06, -2.288818359375e-05, -0.000133514404296875, -7.62939453125e-06, -2.372447967529297, -1.9073486328125e-06, -1.1013946533203125, -0.044585347175598145, -3.814697265625e-05, -0.1199072077870369, -1.9073486328125e-06, -0.0009593963623046875, -0.0043544769287109375, -1.9747238159179688, -0.0028400421142578125, -0.00107574462890625, -0.000408172607421875, -0.001468658447265625, -0.043834686279296875, -0.0005893707275390625, -0.16658592224121094, -0.014195442199707031, -3.814697265625e-06, -0.0034961700439453125, 0.0, -0.3134598731994629, 0.0, -0.06708987802267075, 0.0], "score": -6.254802321956497, "model_output": {"hole4": "player", "hole0": "Frostbolt", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"hole1": [{"_type": "UnaryOp", "operand": {"attr": "<UNK>", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}, "op": {"_type": "Not"}}], "_type": "Template30", "hole0": "ManaChange"}], "_type": "Template44", "hole0": {"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Frostbolt", "hole1": 2, "hole2": "MAGE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.card.add_buff(Buff(ManaChange(not minion.<UNK>)))\n"}, {"choice_history": [121, 200, "Frostbolt", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Frostbolt", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.000156402587890625, -4.9591064453125e-05, -5.328649785951711e-05, -4.768371127283899e-06, -6.793939974159002e-06, -1.1444091796875e-05, -0.0001850128173828125, -0.0002536773681640625, -0.00075531005859375, -7.82012939453125e-05, -0.0002110004425048828, -1.9073486328125e-06, -5.125981260789558e-06, -1.9073486328125e-06, -6.159661293029785, -0.0007762908935546875, -0.0006256103515625, 0.0, -9.1552734375e-05, 0.0, -8.0108642578125e-05, -0.0005970001220703125, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.6450881958007812e-05, 0.0, -7.62939453125e-06, -2.288818359375e-05, -3.62396240234375e-05, -5.936622619628906e-05, -1.52587890625e-05, -0.0057697296142578125, -2.288818359375e-05, -1.71661376953125e-05, -9.5367431640625e-06, -0.000133514404296875, -0.002625703113153577, -1.1920928244535389e-07, -4.9591064453125e-05, -0.000629425048828125, -1.9073486328125e-06, -5.7220458984375e-05, -3.4928321838378906e-05, 0.0, -8.141787839122117e-05, -4.410743713378906e-06, -2.09808349609375e-05, -0.0001373291015625, -9.5367431640625e-06, -0.08554744720458984, -0.01641368865966797, -1.9073486328125e-06, -0.000171661376953125, -0.0068225860595703125, -0.000934600830078125, -0.001561045297421515, -3.814697265625e-06], "score": -6.284833903904193, "model_output": {"hole4": "player", "hole0": "Frostbolt", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Frostbolt", "hole1": 2, "hole2": "WARRIOR", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.add_buff(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Frostbolt", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "deathrattle", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score_history": [-0.000156402587890625, -4.9591064453125e-05, -5.328649785951711e-05, -4.768371127283899e-06, -6.793939974159002e-06, -1.1444091796875e-05, -0.0001850128173828125, -0.0002536773681640625, -0.00075531005859375, -7.82012939453125e-05, -0.0002110004425048828, -1.9073486328125e-06, -5.125981260789558e-06, -1.9073486328125e-06, -0.004039764404296875, -0.000209808349609375, -0.0003833770751953125, 0.0, -6.67572021484375e-05, 0.0, -0.0001430511474609375, -0.0008935928344726562, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.633167266845703e-05, 0.0, -7.62939453125e-06, -2.288818359375e-05, -4.00543212890625e-05, -7.867813110351562e-05, -5.841255187988281e-06, -0.009543418884277344, -2.6702880859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -0.0001373291015625, -0.002818891080096364, -1.1920928244535389e-07, -5.53131103515625e-05, -0.000690460205078125, -1.9073486328125e-06, -6.4849853515625e-05, -3.4809112548828125e-05, 0.0, -7.891452696640044e-05, -4.5299530029296875e-06, -2.288818359375e-05, -0.000133514404296875, -7.62939453125e-06, -2.372447967529297, -1.9073486328125e-06, -1.4974403381347656, -1.9073486328125e-06, -0.14242208003997803, -1.9788742065429688e-05, -1.8821589946746826, -1.9073486328125e-06, -0.5067148804664612, 0.0, -1.9073486328125e-05, -0.00028228759765625, -3.814697265625e-06, -2.86102294921875e-05, -0.02763199806213379, 0.0, -0.0009026529151014984, -3.933906555175781e-06, -4.1961669921875e-05], "score": -6.451463824253999, "model_output": {"hole4": "player", "hole0": "Frostbolt", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "deathrattle", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Frostbolt", "hole1": 2, "hole2": "MAGE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        minion.deathrattle.heal(player.effective_spell_damage(3), self)\n"}, {"choice_history": [121, 200, "Frostbolt", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score_history": [-0.000156402587890625, -4.9591064453125e-05, -5.328649785951711e-05, -4.768371127283899e-06, -6.793939974159002e-06, -1.1444091796875e-05, -0.0001850128173828125, -0.0002536773681640625, -0.00075531005859375, -7.82012939453125e-05, -0.0002110004425048828, -1.9073486328125e-06, -5.125981260789558e-06, -1.9073486328125e-06, -0.004039764404296875, -0.000209808349609375, -0.0003833770751953125, 0.0, -6.67572021484375e-05, 0.0, -0.0001430511474609375, -0.0008935928344726562, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.633167266845703e-05, 0.0, -7.62939453125e-06, -2.288818359375e-05, -4.00543212890625e-05, -7.867813110351562e-05, -5.841255187988281e-06, -6.5027642250061035, -0.0012454986572265625, -9.1552734375e-05, -7.43865966796875e-05, -5.91278076171875e-05, -0.0016570594161748886, -1.5497195136049413e-06, -3.62396240234375e-05, -0.0005092620849609375, -3.814697265625e-06, -6.103515625e-05, -3.6597251892089844e-05, 0.0, -0.0001106224735849537, -4.0531158447265625e-06, -5.7220458984375e-05], "score": -6.514402077378804, "model_output": {"hole4": "player", "hole0": "Frostbolt", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Frostbolt", "hole1": 2, "hole2": "MAGE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n"}, {"choice_history": [121, 200, "Frostbolt", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 338, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score_history": [-0.000156402587890625, -4.9591064453125e-05, -5.328649785951711e-05, -4.768371127283899e-06, -6.793939974159002e-06, -1.1444091796875e-05, -0.0001850128173828125, -0.0002536773681640625, -0.00075531005859375, -7.82012939453125e-05, -0.0002110004425048828, -1.9073486328125e-06, -5.125981260789558e-06, -1.9073486328125e-06, -0.004039764404296875, -0.000209808349609375, -0.0003833770751953125, 0.0, -6.67572021484375e-05, 0.0, -0.0001430511474609375, -0.0008935928344726562, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.633167266845703e-05, 0.0, -7.62939453125e-06, -2.288818359375e-05, -4.00543212890625e-05, -7.867813110351562e-05, -5.841255187988281e-06, -6.184828281402588, -0.027919769287109375, -0.0040836334228515625, -5.340576171875e-05, -3.4332275390625e-05, -0.020144307985901833, -4.768370445162873e-07, -5.14984130859375e-05, -0.006388664245605469, -1.9073486328125e-06, -0.0001049041748046875, -3.707408905029297e-05, 0.0, -0.00011503179848659784, -4.768371127283899e-06, -2.09808349609375e-05, -0.011724472045898438, -7.43865966796875e-05, -0.00131988525390625, -0.020386217162013054, -1.9073486328125e-06, -0.0002803802490234375, -0.021219253540039062, -0.0006923675537109375, -0.0012233256129547954, -7.62939453125e-06, -0.01256561279296875, -1.9073486328125e-06, -0.26449108123779297, -3.814697265625e-06, -0.04726207256317139, -3.695460327435285e-05, -0.06201902776956558, 0.0, -0.000125885009765625, -0.0006389617919921875, -9.5367431640625e-06, -7.62939453125e-06, -7.62939453125e-05, 0.0, -0.006325503811240196, -1.9073486328125e-06, -0.00164794921875, -0.0078067779541015625, -2.86102294921875e-05, -0.0003681182861328125, -0.01287078857421875, -1.9073486328125e-06, -0.0002079010009765625, -0.008678436279296875, -0.00069427490234375, -0.0016852614935487509, -9.5367431640625e-06, -0.008853912353515625, -3.814697265625e-06, -0.6121711730957031, -0.1649414300918579, -1.9073486328125e-06, -0.0037288665771484375, -0.06575870513916016, -0.0009136199951171875, -0.0014266949146986008, -1.33514404296875e-05, -0.005696296691894531, -1.9073486328125e-06, -0.11893177032470703, -3.814697265625e-06, -0.01734030246734619, -4.7683533921372145e-05, -0.08175314962863922, 0.0, -6.67572021484375e-05, -0.00060272216796875, -2.09808349609375e-05, -7.62939453125e-06, -6.4849853515625e-05, 0.0, -0.007705921772867441, -1.9073486328125e-06, -0.00574493408203125], "score": -7.831778547674617, "model_output": {"hole4": "player", "hole0": "Frostbolt", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Frostbolt", "hole1": 2, "hole2": "MAGE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.add_buff(Buff(Frozen()))\n        minion.damage(player.effective_spell_damage(3), self)\n        self.target.add_buff(Buff(Frozen()))\n        self.target.add_buff(Buff(Frozen()))\n        minion.damage(player.effective_spell_damage(3), self)\n"}, {"choice_history": [121, 200, "Frostbolt", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.000156402587890625, -4.9591064453125e-05, -5.328649785951711e-05, -4.768371127283899e-06, -6.793939974159002e-06, -1.1444091796875e-05, -0.0001850128173828125, -0.0002536773681640625, -7.3596906661987305, -9.918212890625e-05, -0.000136254180688411, -7.62939453125e-06, -4.255503154126927e-05, 0.0, -0.6479816436767578, -5.340576171875e-05, -5.7220458984375e-06, 0.0, -5.48362331755925e-05, 0.0, -1.9073486328125e-06, -0.0001163482666015625, -5.7220458984375e-06, -3.838539123535156e-05, -2.0265579223632812e-06, -0.12958240509033203, -0.00019073486328125, -7.82012939453125e-05, -7.62939453125e-06, -0.0003490447998046875, -0.0019005256472155452, -1.1920928244535389e-07, -3.4332275390625e-05, -0.000949859619140625, -1.9073486328125e-06, -4.00543212890625e-05, -3.6716461181640625e-05, 0.0, -6.830562779214233e-05, -4.410743713378906e-06, -2.09808349609375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.10714340209960938, -0.01881706714630127, -1.9073486328125e-06, -0.0001964569091796875, -0.007380485534667969, -0.0009403228759765625, -0.0016298290574923158, -3.814697265625e-06], "score": -8.27844640042121, "model_output": {"hole4": "player", "hole0": "Frostbolt", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template14", "hole0": "Frostbolt"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.add_buff(Buff(Frozen()))\n"}], "index": 38}
{"beams": [{"choice_history": [121, 198, "Frostwolf", "Grunt", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-1.52587890625e-05, -3.814697265625e-05, -0.0037100547924637794, -0.0031607276760041714, -1.0013561222876888e-05, -4.767935024574399e-07, -7.62939453125e-06, -9.894371032714844e-06, -4.9591064453125e-05, -0.003482818603515625, -0.0003452301025390625, -6.05564855504781e-05, -3.6597251892089844e-05, -4.1723224057932384e-06, 0.0, -0.0009820330888032913, 0.0, -0.000766754150390625, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.0016309022903442383, 0.0, -0.0001678466796875, -0.000484466552734375, -2.6702880859375e-05, -3.576278118089249e-07, 0.0, -0.00014219718286767602, 0.0, -0.0002874135971069336, 0.0, -0.00054931640625], "score": -0.016011120307609872, "model_output": {"hole4": "player", "hole0": "FrostwolfGrunt", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Frostwolf Grunt"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}, {"choice_history": [121, 198, "<UNK>", "Grunt", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-1.52587890625e-05, -3.814697265625e-05, -5.604834079742432, -0.0031607276760041714, -1.0013561222876888e-05, -4.767935024574399e-07, -7.62939453125e-06, -9.894371032714844e-06, -4.9591064453125e-05, -0.003482818603515625, -0.0003452301025390625, -6.05564855504781e-05, -3.6597251892089844e-05, -4.1723224057932384e-06, 0.0, -0.0009820330888032913, 0.0, -0.000766754150390625, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.0016309022903442383, 0.0, -0.0001678466796875, -0.000484466552734375, -2.6702880859375e-05, -3.576278118089249e-07, 0.0, -0.00014219718286767602, 0.0, -0.0002874135971069336, 0.0, -0.00054931640625], "score": -5.617135145257578, "model_output": {"hole4": "player", "hole0": "<UNK>Grunt", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Frostwolf Grunt"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class <UNK>Grunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Frostwolf", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-1.52587890625e-05, -3.814697265625e-05, -0.0037100547924637794, -5.769262790679932, -1.0013561222876888e-05, -4.767935024574399e-07, -7.62939453125e-06, -9.894371032714844e-06, -4.9591064453125e-05, -0.003482818603515625, -0.0003452301025390625, -6.05564855504781e-05, -3.6597251892089844e-05, -4.1723224057932384e-06, 0.0, -0.0009820330888032913, 0.0, -0.000766754150390625, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.0016309022903442383, 0.0, -0.0001678466796875, -0.000484466552734375, -2.6702880859375e-05, -3.576278118089249e-07, 0.0, -0.00014219718286767602, 0.0, -0.0002874135971069336, 0.0, -0.00054931640625], "score": -5.782113183311537, "model_output": {"hole4": "player", "hole0": "Frostwolf<UNK>", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Frostwolf Grunt"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class Frostwolf<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Frostwolf", "Grunt", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-1.52587890625e-05, -3.814697265625e-05, -0.0037100547924637794, -0.0031607276760041714, -1.0013561222876888e-05, -4.767935024574399e-07, -7.62939453125e-06, -9.894371032714844e-06, -4.9591064453125e-05, -0.003482818603515625, -0.0003452301025390625, -6.05564855504781e-05, -3.6597251892089844e-05, -4.1723224057932384e-06, 0.0, -0.0009820330888032913, 0.0, -0.000766754150390625, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -6.58115291595459, -5.7220458984375e-06, -0.00020599365234375, -0.0012416839599609375, -1.71661376953125e-05, -2.3841855067985307e-07, 0.0, -0.00015582441119477153, 0.0, -0.00026404857635498047, 0.0, -0.0003795623779296875], "score": -6.596145072624466, "model_output": {"hole4": "p", "hole0": "FrostwolfGrunt", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Frostwolf Grunt"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, p):\n        return Minion(2, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Frostwolf", "Grunt", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-1.52587890625e-05, -3.814697265625e-05, -0.0037100547924637794, -0.0031607276760041714, -1.0013561222876888e-05, -4.767935024574399e-07, -7.62939453125e-06, -9.894371032714844e-06, -4.9591064453125e-05, -6.018662452697754, -0.0002307891845703125, -5.054364737588912e-05, -7.438563625328243e-05, -8.70227722771233e-06, -1.9073486328125e-06, -2.0885971025563776e-05, 0.0, -0.0003300905227661133, -5.7220458984375e-06, -0.05520439147949219, -3.24249267578125e-05, -0.015769004821777344, -0.0017604827880859375, -0.0002288818359375, -1.9073486328125e-06, -8.96453857421875e-05, -8.96453857421875e-05, -0.776922345161438, -0.0001697540283203125, -2.86102294921875e-05, 0.0, -0.000293731689453125, 0.0, -0.0003261566162109375, -0.000362396240234375, -8.58306884765625e-05, -2.3841843699301535e-07, -1.1920928244535389e-07, -0.00025195401394739747, 0.0, -0.00031363964080810547, 0.0, -0.0007686614990234375], "score": -6.879087094153725, "model_output": {"hole4": "player", "hole0": "FrostwolfGrunt", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Frostwolf Grunt", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Frostwolf", "Grunt", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Frostwolf", " ", "Grunt", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-1.52587890625e-05, -3.814697265625e-05, -0.0037100547924637794, -0.0031607276760041714, -1.0013561222876888e-05, -4.767935024574399e-07, -7.62939453125e-06, -9.894371032714844e-06, -4.9591064453125e-05, -0.003482818603515625, -0.0003452301025390625, -6.05564855504781e-05, -3.6597251892089844e-05, -4.1723224057932384e-06, 0.0, -7.01465368270874, 0.0, -0.0014153718948364258, -7.62939453125e-06, -3.4332275390625e-05, 0.0, -0.0024167299270629883, 0.0, -0.0001773834228515625, -0.000606536865234375, -2.6702880859375e-05, -1.1920926823449918e-07, 0.0, -0.00013790797675028443, 0.0, -0.0002874135971069336, 0.0, -0.0005168914794921875], "score": -7.031211869812957, "model_output": {"hole4": "player", "hole0": "FrostwolfGrunt", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "ALL", "_type": "Template14", "hole0": "Frostwolf Grunt"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Frostwolf", "Grunt", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-1.52587890625e-05, -3.814697265625e-05, -0.0037100547924637794, -0.0031607276760041714, -1.0013561222876888e-05, -4.767935024574399e-07, -7.62939453125e-06, -9.894371032714844e-06, -4.9591064453125e-05, -6.018662452697754, -0.0002307891845703125, -5.054364737588912e-05, -7.438563625328243e-05, -8.70227722771233e-06, -1.9073486328125e-06, -2.0885971025563776e-05, 0.0, -0.0003300905227661133, -5.7220458984375e-06, -0.05520439147949219, -3.24249267578125e-05, -0.015769004821777344, -0.0017604827880859375, -0.0002288818359375, -1.9073486328125e-06, -8.96453857421875e-05, -8.96453857421875e-05, -1.0967780351638794, -1.1444091796875e-05, -2.288818359375e-05, 0.0, -0.000804901123046875, 0.0, -0.000682830810546875, -0.0027179718017578125, -0.0001544952392578125, -1.1920918296937089e-07, 0.0, -0.0003362261631991714, 0.0, -0.00028324127197265625, 0.0, -0.0009613037109375], "score": -7.202317113487773, "model_output": {"hole4": "player", "hole0": "FrostwolfGrunt", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Frostwolf Grunt", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Frostwolf", "Grunt", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-1.52587890625e-05, -3.814697265625e-05, -0.0037100547924637794, -0.0031607276760041714, -1.0013561222876888e-05, -4.767935024574399e-07, -7.62939453125e-06, -9.894371032714844e-06, -4.9591064453125e-05, -7.351621627807617, -0.00034332275390625, -3.218599158572033e-05, -2.3245811462402344e-05, -5.102036811877042e-05, 0.0, -0.00010775902774184942, 0.0, -0.0027829408645629883, -6.866455078125e-05, -0.005756497383117676, 0.0, -5.7220458984375e-06, 0.0, -0.000881195068359375, 0.0, -0.000156402587890625, -0.0012359619140625, -3.0517578125e-05, -1.1920928244535389e-07, 0.0, -0.00012680166400969028, 0.0, -0.0002894401550292969, 0.0, -0.000759124755859375], "score": -7.37127434295234, "model_output": {"hole4": "player", "hole0": "FrostwolfGrunt", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template15", "hole3": "COMMON", "hole0": "Frostwolf Grunt"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Frostwolf", "Grunt", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-1.52587890625e-05, -3.814697265625e-05, -0.0037100547924637794, -0.0031607276760041714, -1.0013561222876888e-05, -4.767935024574399e-07, -7.62939453125e-06, -9.894371032714844e-06, -4.9591064453125e-05, -0.003482818603515625, -0.0003452301025390625, -6.05564855504781e-05, -3.6597251892089844e-05, -4.1723224057932384e-06, 0.0, -0.0009820330888032913, 0.0, -8.160285949707031, -5.7220458984375e-06, -9.918212890625e-05, 0.0, -0.012790799140930176, 0.0, -0.00018310546875, -0.0005474090576171875, -3.24249267578125e-05, -3.576278118089249e-07, 0.0, -0.0001315884874202311, 0.0, -0.0002815723419189453, 0.0, -0.000583648681640625], "score": -8.186854960884318, "model_output": {"hole4": "player", "hole0": "FrostwolfGrunt", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template14", "hole0": "Frostwolf Grunt"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Frostwolf", "Grunt", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "taunt", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-1.52587890625e-05, -3.814697265625e-05, -0.0037100547924637794, -0.0031607276760041714, -1.0013561222876888e-05, -4.767935024574399e-07, -7.62939453125e-06, -9.894371032714844e-06, -4.9591064453125e-05, -6.018662452697754, -0.0002307891845703125, -5.054364737588912e-05, -7.438563625328243e-05, -8.70227722771233e-06, -1.9073486328125e-06, -2.0885971025563776e-05, 0.0, -0.0003300905227661133, -5.7220458984375e-06, -0.05520439147949219, -3.24249267578125e-05, -0.015769004821777344, -0.0017604827880859375, -0.0002288818359375, -1.9073486328125e-06, -8.96453857421875e-05, -8.96453857421875e-05, -2.2136974334716797, 0.0, -4.00543212890625e-05, 0.0, -0.000415802001953125, 0.0, -0.00045013427734375, -0.0004367828369140625, -7.62939453125e-05, -4.7683681714261184e-07, 0.0, -0.000263637222815305, 0.0, -0.00029075145721435547, 0.0, -0.0007610321044921875], "score": -8.315996055194432, "model_output": {"hole4": "player", "hole0": "FrostwolfGrunt", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "taunt", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Frostwolf Grunt", "hole1": 2, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.taunt)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Frostwolf", "Grunt", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-1.52587890625e-05, -3.814697265625e-05, -0.0037100547924637794, -0.0031607276760041714, -1.0013561222876888e-05, -4.767935024574399e-07, -7.62939453125e-06, -9.894371032714844e-06, -4.9591064453125e-05, -0.003482818603515625, -0.0003452301025390625, -6.05564855504781e-05, -3.6597251892089844e-05, -4.1723224057932384e-06, 0.0, -0.0009820330888032913, 0.0, -8.347735404968262, -1.1444091796875e-05, -0.00016021728515625, 0.0, -0.009473919868469238, 0.0, -0.0001354217529296875, -0.00083160400390625, -2.6702880859375e-05, -2.3841855067985307e-07, 0.0, -0.000130160478875041, 0.0, -0.0002892017364501953, 0.0, -0.0006427764892578125], "score": -8.371350293244149, "model_output": {"hole4": "player", "hole0": "FrostwolfGrunt", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Frostwolf Grunt"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Frostwolf", "Grunt", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-1.52587890625e-05, -3.814697265625e-05, -0.0037100547924637794, -0.0031607276760041714, -1.0013561222876888e-05, -4.767935024574399e-07, -7.62939453125e-06, -9.894371032714844e-06, -4.9591064453125e-05, -0.003482818603515625, -0.0003452301025390625, -6.05564855504781e-05, -3.6597251892089844e-05, -4.1723224057932384e-06, 0.0, -0.0009820330888032913, 0.0, -8.403132438659668, 0.0, -1.9073486328125e-06, 0.0, -0.000827789306640625, 0.0, -0.0001468658447265625, -0.0007762908935546875, -3.24249267578125e-05, -3.576278118089249e-07, 0.0, -0.00013574986951425672, 0.0, -0.0002815723419189453, 0.0, -0.000507354736328125], "score": -8.417755952825189, "model_output": {"hole4": "player", "hole0": "FrostwolfGrunt", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "COMMON", "_type": "Template14", "hole0": "Frostwolf Grunt"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.COMMON,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Frostwolf", "Grunt", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 46], "score_history": [-1.52587890625e-05, -3.814697265625e-05, -0.0037100547924637794, -0.0031607276760041714, -1.0013561222876888e-05, -4.767935024574399e-07, -7.62939453125e-06, -9.894371032714844e-06, -4.9591064453125e-05, -0.003482818603515625, -0.0003452301025390625, -6.05564855504781e-05, -3.6597251892089844e-05, -4.1723224057932384e-06, 0.0, -0.0009820330888032913, 0.0, -0.000766754150390625, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.0016309022903442383, 0.0, -0.0001678466796875, -0.000484466552734375, -2.6702880859375e-05, -3.576278118089249e-07, 0.0, -0.00014219718286767602, 0.0, -0.0002874135971069336, 0.0, -8.675759315490723], "score": -8.691221119392083, "model_output": {"hole4": "player", "hole0": "FrostwolfGrunt", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Frostwolf Grunt"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 2}]}, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=1)\n"}, {"choice_history": [121, 198, "Frostwolf", "Grunt", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 328, 119, 310, "taunt", "<EOS>", 62, 119, 310, "taunt", "<EOS>", 62], "score_history": [-1.52587890625e-05, -3.814697265625e-05, -0.0037100547924637794, -0.0031607276760041714, -1.0013561222876888e-05, -4.767935024574399e-07, -7.62939453125e-06, -9.894371032714844e-06, -4.9591064453125e-05, -0.003482818603515625, -0.0003452301025390625, -6.05564855504781e-05, -3.6597251892089844e-05, -4.1723224057932384e-06, 0.0, -0.0009820330888032913, 0.0, -0.000766754150390625, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.0016309022903442383, 0.0, -0.0001678466796875, -8.811080932617188, -0.030220985412597656, -1.2636031897272915e-05, -0.000339508056640625, -1.2516895367298275e-05, -1.1920928244535389e-07, -8.071729098446667e-05, 0.0, -0.000225067138671875, -7.05718994140625e-05, 0.0, -0.00832366943359375, -1.9073486328125e-06, -4.76837158203125e-05, -1.9073486328125e-05, -0.00045013427734375, -0.0016574859619140625, 0.0, -0.0002422332763671875], "score": -8.867305908112023, "model_output": {"hole4": "player", "hole0": "FrostwolfGrunt", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Frostwolf Grunt"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": 2, "_type": "Template36", "hole3": [{"value": {"_type": "Template79"}, "arg": "taunt", "_type": "keyword"}, {"value": {"_type": "Template79"}, "arg": "taunt", "_type": "keyword"}], "hole0": "Minion"}]}, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True, taunt=True)\n"}, {"choice_history": [121, 198, "Frostwolf", "Grunt", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "windfury", "<EOS>", 62], "score_history": [-1.52587890625e-05, -3.814697265625e-05, -0.0037100547924637794, -0.0031607276760041714, -1.0013561222876888e-05, -4.767935024574399e-07, -7.62939453125e-06, -9.894371032714844e-06, -4.9591064453125e-05, -0.003482818603515625, -0.0003452301025390625, -6.05564855504781e-05, -3.6597251892089844e-05, -4.1723224057932384e-06, 0.0, -0.0009820330888032913, 0.0, -0.000766754150390625, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.0016309022903442383, 0.0, -0.0001678466796875, -0.000484466552734375, -2.6702880859375e-05, -3.576278118089249e-07, 0.0, -0.00014219718286767602, 0.0, -9.228878021240234, -0.00047969818115234375, -0.001949310302734375], "score": -9.246481420028374, "model_output": {"hole4": "player", "hole0": "FrostwolfGrunt", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Frostwolf Grunt"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "windfury", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, windfury=True)\n"}], "index": 39}
{"beams": [{"choice_history": [121, 198, "Goldshire", "Footman", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -4.3748852476710454e-05, -2.3722410332993604e-05, -5.125998541188892e-06, -4.7681533033028245e-07, -3.814697265625e-06, -4.2557716369628906e-05, -0.0001049041748046875, -0.0037593841552734375, -7.82012939453125e-05, -1.5497195136049413e-06, -2.431869324936997e-05, -1.1920928244535389e-07, 0.0, -2.6460897061042488e-05, 0.0, -0.0015298128128051758, -9.5367431640625e-06, -3.814697265625e-05, 0.0, -0.0019378662109375, 0.0, -0.00014495849609375, -0.0004978179931640625, -1.9073486328125e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -0.00015436655667144805, 0.0, -0.00024712085723876953, 0.0, -0.000537872314453125], "score": -0.009260044143545088, "model_output": {"hole4": "player", "hole0": "GoldshireFootman", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "ALL", "_type": "Template14", "hole0": "Goldshire Footman"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 1}]}, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Goldshire", "Footman", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -4.3748852476710454e-05, -2.3722410332993604e-05, -5.125998541188892e-06, -4.7681533033028245e-07, -3.814697265625e-06, -4.2557716369628906e-05, -0.0001049041748046875, -0.0037593841552734375, -7.82012939453125e-05, -1.5497195136049413e-06, -2.431869324936997e-05, -1.1920928244535389e-07, 0.0, -2.6460897061042488e-05, 0.0, -0.0015298128128051758, -9.5367431640625e-06, -3.814697265625e-05, 0.0, -6.331315994262695, -3.814697265625e-06, -0.000225067138671875, -0.00031280517578125, -1.71661376953125e-05, 0.0, -3.576278118089249e-07, -0.0001662846188992262, 0.0, -0.00025713443756103516, 0.0, -0.000324249267578125], "score": -6.338343364755524, "model_output": {"hole4": "p", "hole0": "GoldshireFootman", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "ALL", "_type": "Template14", "hole0": "Goldshire Footman"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 1}]}, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, p):\n        return Minion(1, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Goldshire", "Footman", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -4.3748852476710454e-05, -2.3722410332993604e-05, -5.125998541188892e-06, -4.7681533033028245e-07, -3.814697265625e-06, -4.2557716369628906e-05, -0.0001049041748046875, -6.5712175369262695, -4.57763671875e-05, -4.768370445162873e-07, -2.002716064453125e-05, -3.2186455882765586e-06, 0.0, -2.4913235392887145e-05, 0.0, -0.005119442939758301, -4.9591064453125e-05, -0.005985260009765625, 0.0, -1.52587890625e-05, 0.0, -0.0008563995361328125, 0.0, -0.000164031982421875, -0.0011539459228515625, -2.86102294921875e-05, 0.0, -3.576278118089249e-07, -0.0002034734789049253, 0.0, -0.0002186298370361328, 0.0, -0.0006389617919921875], "score": -6.585998873276424, "model_output": {"hole4": "player", "hole0": "GoldshireFootman", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "ALL", "_type": "Template15", "hole3": "COMMON", "hole0": "Goldshire Footman"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 1}]}, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Goldshire", "Footman", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -4.3748852476710454e-05, -2.3722410332993604e-05, -5.125998541188892e-06, -4.7681533033028245e-07, -3.814697265625e-06, -4.2557716369628906e-05, -0.0001049041748046875, -0.0037593841552734375, -7.82012939453125e-05, -1.5497195136049413e-06, -2.431869324936997e-05, -1.1920928244535389e-07, 0.0, -2.6460897061042488e-05, 0.0, -6.673980712890625, -1.71661376953125e-05, -7.62939453125e-05, 0.0, -0.0086212158203125, 0.0, -0.00014495849609375, -0.0004558563232421875, -1.52587890625e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -0.0001630673068575561, 0.0, -0.00024139881134033203, 0.0, -0.00055694580078125], "score": -6.688416346021356, "model_output": {"hole4": "player", "hole0": "GoldshireFootman", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "MAGE", "_type": "Template14", "hole0": "Goldshire Footman"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 1}]}, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Goldshire", "Footman", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -4.3748852476710454e-05, -2.3722410332993604e-05, -5.125998541188892e-06, -4.7681533033028245e-07, -3.814697265625e-06, -4.2557716369628906e-05, -0.0001049041748046875, -6.3189496994018555, -0.001007080078125, -9.65590606938349e-06, -7.80809496063739e-05, -4.649161837733118e-06, 0.0, -2.467628837621305e-05, 0.0, -5.7578086853027344e-05, -1.9073486328125e-06, -0.06524372100830078, -2.09808349609375e-05, -0.0071868896484375, -0.002170562744140625, -6.29425048828125e-05, -1.9073486328125e-06, -0.00023651123046875, -4.57763671875e-05, -0.8426933288574219, -0.0001087188720703125, -3.62396240234375e-05, 0.0, -0.0005340576171875, 0.0, -0.0003223419189453125, -0.0002498626708984375, -7.2479248046875e-05, -2.0265579223632812e-06, -3.576278118089249e-07, -0.0002767719270195812, 0.0, -0.00026977062225341797, 0.0, -0.0006427764892578125], "score": -7.24056431183584, "model_output": {"hole4": "player", "hole0": "GoldshireFootman", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Goldshire Footman", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 1}]}, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Goldshire", "Footman", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -4.3748852476710454e-05, -2.3722410332993604e-05, -5.125998541188892e-06, -4.7681533033028245e-07, -3.814697265625e-06, -4.2557716369628906e-05, -0.0001049041748046875, -6.3189496994018555, -0.001007080078125, -9.65590606938349e-06, -7.80809496063739e-05, -4.649161837733118e-06, 0.0, -2.467628837621305e-05, 0.0, -5.7578086853027344e-05, -1.9073486328125e-06, -0.06524372100830078, -2.09808349609375e-05, -0.0071868896484375, -0.002170562744140625, -6.29425048828125e-05, -1.9073486328125e-06, -0.00023651123046875, -4.57763671875e-05, -0.9660396575927734, -3.814697265625e-06, -2.6702880859375e-05, 0.0, -0.001911163330078125, 0.0, -0.000392913818359375, -0.008398056030273438, -0.0001316070556640625, -4.0531158447265625e-06, -2.3841855067985307e-07, -0.0006072036339901388, 0.0, -0.00023949146270751953, 0.0, -0.000881195068359375], "score": -7.373991676907707, "model_output": {"hole4": "player", "hole0": "GoldshireFootman", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Goldshire Footman", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 1}]}, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Goldshire", "Footman", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -4.3748852476710454e-05, -2.3722410332993604e-05, -5.125998541188892e-06, -4.7681533033028245e-07, -3.814697265625e-06, -4.2557716369628906e-05, -0.0001049041748046875, -0.0037593841552734375, -7.82012939453125e-05, -1.5497195136049413e-06, -2.431869324936997e-05, -1.1920928244535389e-07, 0.0, -2.6460897061042488e-05, 0.0, -8.421196937561035, -8.20159912109375e-05, -0.000217437744140625, 0.0, -0.00687408447265625, 0.0, -0.000110626220703125, -0.000743865966796875, -1.33514404296875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -0.00013219600077718496, 0.0, -0.0002588033676147461, 0.0, -0.00052642822265625], "score": -8.434299218688054, "model_output": {"hole4": "player", "hole0": "GoldshireFootman", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Goldshire Footman"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 1}]}, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Goldshire", "Footman", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "taunt", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -4.3748852476710454e-05, -2.3722410332993604e-05, -5.125998541188892e-06, -4.7681533033028245e-07, -3.814697265625e-06, -4.2557716369628906e-05, -0.0001049041748046875, -6.3189496994018555, -0.001007080078125, -9.65590606938349e-06, -7.80809496063739e-05, -4.649161837733118e-06, 0.0, -2.467628837621305e-05, 0.0, -5.7578086853027344e-05, -1.9073486328125e-06, -0.06524372100830078, -2.09808349609375e-05, -0.0071868896484375, -0.002170562744140625, -6.29425048828125e-05, -1.9073486328125e-06, -0.00023651123046875, -4.57763671875e-05, -2.1794776916503906, 0.0, -4.9591064453125e-05, 0.0, -0.0009860992431640625, 0.0, -0.000385284423828125, -0.00035858154296875, -7.43865966796875e-05, -4.0531158447265625e-06, -2.3841855067985307e-07, -0.000364246079698205, 0.0, -0.00025081634521484375, 0.0, -0.0007495880126953125], "score": -8.57805615629647, "model_output": {"hole4": "player", "hole0": "GoldshireFootman", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "taunt", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Goldshire Footman", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 1}]}, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.taunt)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Goldshire", "Footman", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 46], "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -4.3748852476710454e-05, -2.3722410332993604e-05, -5.125998541188892e-06, -4.7681533033028245e-07, -3.814697265625e-06, -4.2557716369628906e-05, -0.0001049041748046875, -0.0037593841552734375, -7.82012939453125e-05, -1.5497195136049413e-06, -2.431869324936997e-05, -1.1920928244535389e-07, 0.0, -2.6460897061042488e-05, 0.0, -0.0015298128128051758, -9.5367431640625e-06, -3.814697265625e-05, 0.0, -0.0019378662109375, 0.0, -0.00014495849609375, -0.0004978179931640625, -1.9073486328125e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -0.00015436655667144805, 0.0, -0.00024712085723876953, 0.0, -8.61468505859375], "score": -8.623407230422842, "model_output": {"hole4": "player", "hole0": "GoldshireFootman", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "ALL", "_type": "Template14", "hole0": "Goldshire Footman"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 1}]}, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=1)\n"}, {"choice_history": [121, 198, "Goldshire", "Footman", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "2", "<EOS>", 328, 119, 310, "taunt", "<EOS>", 62, 119, 310, "taunt", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -4.3748852476710454e-05, -2.3722410332993604e-05, -5.125998541188892e-06, -4.7681533033028245e-07, -3.814697265625e-06, -4.2557716369628906e-05, -0.0001049041748046875, -0.0037593841552734375, -7.82012939453125e-05, -1.5497195136049413e-06, -2.431869324936997e-05, -1.1920928244535389e-07, 0.0, -2.6460897061042488e-05, 0.0, -0.0015298128128051758, -9.5367431640625e-06, -3.814697265625e-05, 0.0, -0.0019378662109375, 0.0, -0.00014495849609375, -8.572993278503418, -0.03880119323730469, -4.0530958358431235e-06, -9.1552734375e-05, -1.227848042617552e-05, -1.1920928244535389e-07, -3.5047334677074105e-05, 0.0, -0.0001735687255859375, -6.29425048828125e-05, 0.0, -0.011384963989257812, -1.9073486328125e-06, -4.57763671875e-05, -1.71661376953125e-05, -0.000270843505859375, -0.00171661376953125, 0.0, -0.000244140625], "score": -8.633658761667547, "model_output": {"hole4": "player", "hole0": "GoldshireFootman", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "ALL", "_type": "Template14", "hole0": "Goldshire Footman"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": 2, "_type": "Template36", "hole3": [{"value": {"_type": "Template79"}, "arg": "taunt", "_type": "keyword"}, {"value": {"_type": "Template79"}, "arg": "taunt", "_type": "keyword"}], "hole0": "Minion"}]}, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=True, taunt=True)\n"}, {"choice_history": [121, 198, "Goldshire", "Footman", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -4.3748852476710454e-05, -2.3722410332993604e-05, -5.125998541188892e-06, -4.7681533033028245e-07, -3.814697265625e-06, -4.2557716369628906e-05, -0.0001049041748046875, -0.0037593841552734375, -7.82012939453125e-05, -1.5497195136049413e-06, -2.431869324936997e-05, -1.1920928244535389e-07, 0.0, -2.6460897061042488e-05, 0.0, -0.0015298128128051758, -9.5367431640625e-06, -3.814697265625e-05, 0.0, -0.0019378662109375, 0.0, -0.00014495849609375, -0.0004978179931640625, -1.9073486328125e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -8.996342658996582, 0.0, -0.00021946430206298828, 0.0, -0.0005321502685546875], "score": -9.005414957982381, "model_output": {"hole4": "player", "hole0": "GoldshireFootman", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "ALL", "_type": "Template14", "hole0": "Goldshire Footman"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 1}]}, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, taunt=True)\n"}, {"choice_history": [121, 198, "Goldshire", "Footman", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Goldshire", " ", "Footman", "<EOS>", 103, 95, 94, 112, "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -4.3748852476710454e-05, -2.3722410332993604e-05, -5.125998541188892e-06, -4.7681533033028245e-07, -3.814697265625e-06, -4.2557716369628906e-05, -0.0001049041748046875, -8.735390663146973, -2.47955322265625e-05, -3.814697265625e-06, -0.5174446105957031, -4.1961669921875e-05, -0.003902435302734375, -0.000148773193359375, -8.392333984375e-05, -8.344646857949556e-07, -0.00011908839223906398, -0.013035135343670845, 0.0, -0.008432388305664062, -0.04287910461425781, -0.0022754669189453125, -6.4849853515625e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.01706242561340332, -3.0517578125e-05, -0.000179290771484375, -0.0002422332763671875, -4.9591064453125e-05, -3.576278118089249e-07, -7.152555099310121e-07, -0.00015055135008879006, 0.0, -0.00028192996978759766, 0.0, -0.0002994537353515625], "score": -9.34243029743476, "model_output": {"hole4": "p", "hole0": "GoldshireFootman", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Goldshire Footman", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 1}]}, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False)\n\n    def create_minion(self, p):\n        return Minion(1, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Goldshire", "Footman", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 58], "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -4.3748852476710454e-05, -2.3722410332993604e-05, -5.125998541188892e-06, -4.7681533033028245e-07, -3.814697265625e-06, -4.2557716369628906e-05, -0.0001049041748046875, -0.0037593841552734375, -7.82012939453125e-05, -1.5497195136049413e-06, -2.431869324936997e-05, -1.1920928244535389e-07, 0.0, -2.6460897061042488e-05, 0.0, -0.0015298128128051758, -9.5367431640625e-06, -3.814697265625e-05, 0.0, -0.0019378662109375, 0.0, -0.00014495849609375, -0.0004978179931640625, -1.9073486328125e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -0.00015436655667144805, 0.0, -0.00024712085723876953, 0.0, -9.339040756225586], "score": -9.347762928054678, "model_output": {"hole4": "player", "hole0": "GoldshireFootman", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "ALL", "_type": "Template14", "hole0": "Goldshire Footman"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template75"}, "hole0": 1}]}, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=False)\n"}, {"choice_history": [121, 198, "Goldshire", "Footman", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "2", "<EOS>", "windfury", "<EOS>", 62], "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -4.3748852476710454e-05, -2.3722410332993604e-05, -5.125998541188892e-06, -4.7681533033028245e-07, -3.814697265625e-06, -4.2557716369628906e-05, -0.0001049041748046875, -0.0037593841552734375, -7.82012939453125e-05, -1.5497195136049413e-06, -2.431869324936997e-05, -1.1920928244535389e-07, 0.0, -2.6460897061042488e-05, 0.0, -0.0015298128128051758, -9.5367431640625e-06, -3.814697265625e-05, 0.0, -0.0019378662109375, 0.0, -0.00014495849609375, -0.0004978179931640625, -1.9073486328125e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -0.00015436655667144805, 0.0, -9.376909255981445, -0.000171661376953125, -0.002288818359375], "score": -9.387844786689627, "model_output": {"hole4": "player", "hole0": "GoldshireFootman", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "ALL", "_type": "Template14", "hole0": "Goldshire Footman"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "windfury", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 1}]}, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, windfury=True)\n"}, {"choice_history": [121, 198, "Goldshire", "Footman", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "2", "<EOS>"], "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -4.3748852476710454e-05, -2.3722410332993604e-05, -5.125998541188892e-06, -4.7681533033028245e-07, -3.814697265625e-06, -4.2557716369628906e-05, -0.0001049041748046875, -0.0037593841552734375, -7.82012939453125e-05, -1.5497195136049413e-06, -2.431869324936997e-05, -1.1920928244535389e-07, 0.0, -2.6460897061042488e-05, 0.0, -0.0015298128128051758, -9.5367431640625e-06, -3.814697265625e-05, 0.0, -0.0019378662109375, 0.0, -0.00014495849609375, -9.764572143554688, -5.14984130859375e-05, -4.649161837733118e-06, 0.0, -0.0004020158958155662, 0.0], "score": -9.772833623124022, "model_output": {"hole4": "player", "hole0": "GoldshireFootman", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "ALL", "_type": "Template14", "hole0": "Goldshire Footman"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2)\n"}], "index": 40}
{"beams": [{"choice_history": [121, 198, "Grimscale", "Oracle", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 68, 163, 57, 321, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-0.0004520416259765625, -0.0001010894775390625, -0.00019977481861133128, -7.987004210008308e-06, -2.2649765014648438e-06, -3.218265192117542e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0011157989501953125, -0.000637054443359375, -5.590759246842936e-05, -7.367130456259474e-05, -2.3841855067985307e-07, 0.0, -6.083240805310197e-06, 0.0, -0.002140045166015625, 0.0, -4.839869507122785e-05, -1.9073486328125e-06, -0.0006122589111328125, -3.24249267578125e-05, -0.0003147125244140625, 0.0, -0.0001010894775390625, 0.0, -0.0015323162078857422, -1.1444091796875e-05, -1.919269561767578e-05, 0.0, -5.602834789897315e-06, 0.0, -1.33514404296875e-05, -0.0022411346435546875, -7.62939453125e-06, -1.1920928244535389e-07, -7.152555099310121e-07, -9.199080523103476e-06, -1.1920928244535389e-07, -0.0039997100830078125, 0.0, -0.000396728515625, -1.9073486328125e-05, -0.0002498626708984375, -8.0108642578125e-05, -0.000141143798828125, -4.1961669921875e-05, -0.000102996826171875, -0.0007550716982223094, -5.7220458984375e-06, -0.004727363586425781, -0.001865386962890625, -0.0046234130859375, -0.0001068115234375, -0.004505157470703125, -0.00041961669921875, -0.0002346038818359375, 0.0, -0.000485299649881199, -0.0039667291566729546, -1.1920922133867862e-06, -4.57763671875e-05, -0.0002918243408203125, -1.1444091796875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0010528564453125, -1.9073486328125e-06, -0.0027114152908325195, -5.53131103515625e-05, -0.000244140625, -9.5367431640625e-06, -0.0004469743580557406, -8.428096771240234e-05, -2.6702880859375e-05, -7.62939453125e-06, -0.00012969970703125], "score": -0.041661003650872885, "model_output": {"hole4": "player", "hole0": "GrimscaleOracle", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Grimscale Oracle", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 1}]}, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MURLOC), BothPlayer()))])\n"}, {"choice_history": [121, 198, "Grimscale", "Oracle", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 320, 105], "score_history": [-0.0004520416259765625, -0.0001010894775390625, -0.00019977481861133128, -7.987004210008308e-06, -2.2649765014648438e-06, -3.218265192117542e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0011157989501953125, -0.000637054443359375, -5.590759246842936e-05, -7.367130456259474e-05, -2.3841855067985307e-07, 0.0, -6.083240805310197e-06, 0.0, -0.002140045166015625, 0.0, -4.839869507122785e-05, -1.9073486328125e-06, -0.0006122589111328125, -3.24249267578125e-05, -0.0003147125244140625, 0.0, -0.0001010894775390625, 0.0, -0.0015323162078857422, -1.1444091796875e-05, -1.919269561767578e-05, 0.0, -5.602834789897315e-06, 0.0, -1.33514404296875e-05, -0.0022411346435546875, -7.62939453125e-06, -1.1920928244535389e-07, -7.152555099310121e-07, -9.199080523103476e-06, -1.1920928244535389e-07, -0.0039997100830078125, 0.0, -0.000396728515625, -1.9073486328125e-05, -0.0002498626708984375, -8.0108642578125e-05, -0.000141143798828125, -4.1961669921875e-05, -0.000102996826171875, -0.0007550716982223094, -5.7220458984375e-06, -0.004727363586425781, -0.001865386962890625, -5.566144943237305, -3.814697265625e-06, -0.029681682586669922, -0.002374819479882717, -2.861022494471399e-06, -9.34600830078125e-05, -0.0003223419189453125, -1.9073486328125e-06, -5.7220458984375e-05, -3.814697265625e-06, -0.0002593994140625, -1.9073486328125e-06, -0.004258513450622559, -3.24249267578125e-05, -0.11452865600585938, -0.001445770263671875], "score": -5.741396956570682, "model_output": {"hole4": "player", "hole0": "GrimscaleOracle", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Grimscale Oracle", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 1}]}, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), IsType(MINION_TYPE\n            .MURLOC))])\n"}, {"choice_history": [121, 198, "Grimscale", "Oracle", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 68, 163, 57, 321, 68, 163, 25, 186, "Is", "Minion", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-0.0004520416259765625, -0.0001010894775390625, -0.00019977481861133128, -7.987004210008308e-06, -2.2649765014648438e-06, -3.218265192117542e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0011157989501953125, -0.000637054443359375, -5.590759246842936e-05, -7.367130456259474e-05, -2.3841855067985307e-07, 0.0, -6.083240805310197e-06, 0.0, -0.002140045166015625, 0.0, -4.839869507122785e-05, -1.9073486328125e-06, -0.0006122589111328125, -3.24249267578125e-05, -0.0003147125244140625, 0.0, -0.0001010894775390625, 0.0, -0.0015323162078857422, -1.1444091796875e-05, -1.919269561767578e-05, 0.0, -5.602834789897315e-06, 0.0, -1.33514404296875e-05, -0.0022411346435546875, -7.62939453125e-06, -1.1920928244535389e-07, -7.152555099310121e-07, -9.199080523103476e-06, -1.1920928244535389e-07, -0.0039997100830078125, 0.0, -0.000396728515625, -1.9073486328125e-05, -0.0002498626708984375, -8.0108642578125e-05, -0.000141143798828125, -4.1961669921875e-05, -0.000102996826171875, -0.0007550716982223094, -5.7220458984375e-06, -0.004727363586425781, -0.001865386962890625, -0.0046234130859375, -0.0001068115234375, -0.004505157470703125, -0.00041961669921875, -0.0002346038818359375, 0.0, -0.000485299649881199, -5.663083553314209, -0.04517173767089844, -0.05715179443359375, -0.00266265869140625, -3.4332275390625e-05, -2.86102294921875e-05, -1.9073486328125e-06, -0.0044002532958984375, -1.9073486328125e-06, -0.002985835075378418, -6.866455078125e-05, -0.0002689361572265625, -1.33514404296875e-05, -0.0005031154723837972, -9.286402928410098e-05, -2.6702880859375e-05, -7.62939453125e-06, -0.0001506805419921875], "score": -5.809212856092657, "model_output": {"hole4": "player", "hole0": "GrimscaleOracle", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Grimscale Oracle", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsMinion"}, "_type": "Call", "args": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 1}]}, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsMinion(MINION_TYPE.MURLOC), BothPlayer()))])\n"}, {"choice_history": [121, 198, "Grimscale", "Oracle", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 68, 163, 57, 321, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-0.0004520416259765625, -0.0001010894775390625, -0.00019977481861133128, -7.987004210008308e-06, -2.2649765014648438e-06, -3.218265192117542e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0011157989501953125, -0.000637054443359375, -5.590759246842936e-05, -7.367130456259474e-05, -2.3841855067985307e-07, 0.0, -6.083240805310197e-06, 0.0, -0.002140045166015625, 0.0, -4.839869507122785e-05, -1.9073486328125e-06, -0.0006122589111328125, -3.24249267578125e-05, -0.0003147125244140625, 0.0, -0.0001010894775390625, 0.0, -0.0015323162078857422, -1.1444091796875e-05, -1.919269561767578e-05, 0.0, -5.602834789897315e-06, 0.0, -1.33514404296875e-05, -0.0022411346435546875, -7.62939453125e-06, -1.1920928244535389e-07, -7.152555099310121e-07, -9.199080523103476e-06, -1.1920928244535389e-07, -6.312864303588867, -5.7220458984375e-06, -0.0007190704345703125, -3.814697265625e-05, -0.0004025697708129883, -5.7220458984375e-05, -0.0001010894775390625, -3.814697265625e-05, -0.0001068115234375, -0.0005282163619995117, -3.814697265625e-06, -0.008741378784179688, -0.0025691986083984375, -0.004094123840332031, -0.0001068115234375, -0.012017250061035156, -0.0001678466796875, -0.00020599365234375, 0.0, -0.0005214209668338299, -0.0022343574091792107, -8.344646857949556e-07, -3.4332275390625e-05, -0.0002040863037109375, -1.1444091796875e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.0012149810791015625, -1.9073486328125e-06, -0.0027312040328979492, -5.14984130859375e-05, -0.000263214111328125, -9.5367431640625e-06, -0.00044185141450725496, -7.2479248046875e-05, -2.6702880859375e-05, -5.7220458984375e-06, -8.96453857421875e-05], "score": -6.3605041114963825, "model_output": {"hole4": "player", "hole0": "GrimscaleOracle", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Grimscale Oracle", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "enrage", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 1}]}, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, enrage=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MURLOC), BothPlayer()))])\n"}, {"choice_history": [121, 198, "Grimscale", "Oracle", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 68, 163, 57, 321, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-0.0004520416259765625, -0.0001010894775390625, -0.00019977481861133128, -7.987004210008308e-06, -2.2649765014648438e-06, -3.218265192117542e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0011157989501953125, -0.000637054443359375, -5.590759246842936e-05, -7.367130456259474e-05, -2.3841855067985307e-07, 0.0, -6.083240805310197e-06, 0.0, -6.423495292663574, 0.0, -3.9696395106147975e-05, -1.9073486328125e-06, -0.00040435791015625, -1.9073486328125e-05, -0.0003070831298828125, 0.0, -4.76837158203125e-05, 0.0, -0.001494288444519043, -5.7220458984375e-06, -1.728534698486328e-05, 0.0, -5.602834789897315e-06, 0.0, -1.52587890625e-05, -0.0023250579833984375, -7.62939453125e-06, -1.1920928244535389e-07, -7.152555099310121e-07, -9.082956239581108e-06, -1.1920928244535389e-07, -0.0039920806884765625, 0.0, -0.000396728515625, -1.9073486328125e-05, -0.000247955322265625, -8.0108642578125e-05, -0.000141143798828125, -4.1961669921875e-05, -0.000102996826171875, -0.0007588863954879344, -5.7220458984375e-06, -0.004599571228027344, -0.0018596649169921875, -0.004664421081542969, -0.0001068115234375, -0.00439453125, -0.0004215240478515625, -0.0002346038818359375, 0.0, -0.0004870877892244607, -0.003974569030106068, -1.311301275563892e-06, -4.57763671875e-05, -0.0002918243408203125, -1.1444091796875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0010547637939453125, -1.9073486328125e-06, -0.0027104616165161133, -5.53131103515625e-05, -0.000244140625, -9.5367431640625e-06, -0.0004467360267881304, -8.428096771240234e-05, -2.47955322265625e-05, -7.62939453125e-06, -0.00012969970703125], "score": -6.4625669265467, "model_output": {"hole4": "player", "hole0": "GrimscaleOracle", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Grimscale Oracle", "hole1": 1, "hole2": "FREE", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 1}]}, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MURLOC), BothPlayer()))])\n"}, {"choice_history": [121, 198, "Grimscale", "Oracle", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 320, 105], "score_history": [-0.0004520416259765625, -0.0001010894775390625, -0.00019977481861133128, -7.987004210008308e-06, -2.2649765014648438e-06, -3.218265192117542e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0011157989501953125, -0.000637054443359375, -5.590759246842936e-05, -7.367130456259474e-05, -2.3841855067985307e-07, 0.0, -6.083240805310197e-06, 0.0, -0.002140045166015625, 0.0, -4.839869507122785e-05, -1.9073486328125e-06, -0.0006122589111328125, -3.24249267578125e-05, -0.0003147125244140625, 0.0, -0.0001010894775390625, 0.0, -0.0015323162078857422, -1.1444091796875e-05, -1.919269561767578e-05, 0.0, -5.602834789897315e-06, 0.0, -1.33514404296875e-05, -0.0022411346435546875, -7.62939453125e-06, -1.1920928244535389e-07, -7.152555099310121e-07, -9.199080523103476e-06, -1.1920928244535389e-07, -0.0039997100830078125, 0.0, -0.000396728515625, -1.9073486328125e-05, -0.0002498626708984375, -8.0108642578125e-05, -0.000141143798828125, -4.1961669921875e-05, -0.000102996826171875, -0.0007550716982223094, -5.7220458984375e-06, -6.480478286743164, -0.000797271728515625, -0.0017079859972000122, -3.62396240234375e-05, -2.384185791015625e-06, -0.0003643035888671875, 0.0, -0.0001239776611328125, -0.0006525516510009766, -1.1444091796875e-05, -9.34600830078125e-05, -0.0016536712646484375, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -0.029073715209960938, -1.9073486328125e-06, -0.03310203552246094, -0.0013885498046875], "score": -6.565116600558852, "model_output": {"hole4": "player", "hole0": "GrimscaleOracle", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Grimscale Oracle", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"hole1": {"_type": "Name", "id": "IsType"}, "hole2": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Template35", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 1}]}, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MURLOC)))])\n"}, {"choice_history": [121, 198, "Grimscale", "Oracle", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 68, 163, 57, 321, 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-0.0004520416259765625, -0.0001010894775390625, -0.00019977481861133128, -7.987004210008308e-06, -2.2649765014648438e-06, -3.218265192117542e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0011157989501953125, -0.000637054443359375, -5.590759246842936e-05, -7.367130456259474e-05, -2.3841855067985307e-07, 0.0, -6.083240805310197e-06, 0.0, -0.002140045166015625, 0.0, -4.839869507122785e-05, -1.9073486328125e-06, -0.0006122589111328125, -3.24249267578125e-05, -0.0003147125244140625, 0.0, -0.0001010894775390625, 0.0, -0.0015323162078857422, -1.1444091796875e-05, -1.919269561767578e-05, 0.0, -5.602834789897315e-06, 0.0, -1.33514404296875e-05, -0.0022411346435546875, -7.62939453125e-06, -1.1920928244535389e-07, -7.152555099310121e-07, -9.199080523103476e-06, -1.1920928244535389e-07, -0.0039997100830078125, 0.0, -0.000396728515625, -1.9073486328125e-05, -0.0002498626708984375, -8.0108642578125e-05, -0.000141143798828125, -4.1961669921875e-05, -0.000102996826171875, -0.0007550716982223094, -5.7220458984375e-06, -0.004727363586425781, -0.001865386962890625, -0.0046234130859375, -0.0001068115234375, -6.247175216674805, -0.0003566741943359375, -0.7389107346534729, -0.023129582405090332, -2.0265579223632812e-06, -7.2479248046875e-05, 0.0, -0.0004961490631103516, -0.0007960796356201172, -1.1444091796875e-05, -0.0004749298095703125, -0.000247955322265625, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.34600830078125e-05, -3.814697265625e-06, -0.02752685546875, -3.814697265625e-06, -0.0003032684326171875, -1.9073486328125e-05, -0.00018727770657278597, -5.9723854064941406e-05, -2.6702880859375e-05, -1.1444091796875e-05, -6.866455078125e-05], "score": -7.0669043672857725, "model_output": {"hole4": "player", "hole0": "GrimscaleOracle", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Grimscale Oracle", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"hole1": {"_type": "Name", "id": "IsType"}, "hole2": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Template35", "hole0": "MinionSelector"}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 1}]}, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            MinionSelector(IsType(MINION_TYPE.MURLOC)), BothPlayer()))])\n"}, {"choice_history": [121, 198, "Grimscale", "Oracle", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "buffs", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 68, 163, 57, 321, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-0.0004520416259765625, -0.0001010894775390625, -0.00019977481861133128, -7.987004210008308e-06, -2.2649765014648438e-06, -3.218265192117542e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0011157989501953125, -0.000637054443359375, -5.590759246842936e-05, -7.367130456259474e-05, -2.3841855067985307e-07, 0.0, -6.083240805310197e-06, 0.0, -0.002140045166015625, 0.0, -4.839869507122785e-05, -1.9073486328125e-06, -0.0006122589111328125, -3.24249267578125e-05, -0.0003147125244140625, 0.0, -0.0001010894775390625, 0.0, -0.0015323162078857422, -1.1444091796875e-05, -1.919269561767578e-05, 0.0, -5.602834789897315e-06, 0.0, -1.33514404296875e-05, -0.0022411346435546875, -7.62939453125e-06, -1.1920928244535389e-07, -7.152555099310121e-07, -9.199080523103476e-06, -1.1920928244535389e-07, -7.044835090637207, -0.0001544952392578125, -0.013934135437011719, -5.14984130859375e-05, -0.08924031257629395, -7.05718994140625e-05, -0.0001506805419921875, -5.91278076171875e-05, -3.814697265625e-05, -0.0006738903466612101, -5.7220458984375e-06, -0.003490447998046875, -0.00380706787109375, -0.0037689208984375, -0.0003376007080078125, -0.0050716400146484375, -0.0007152557373046875, -0.00025177001953125, 0.0, -0.0005341762444004416, -0.0025993676390498877, -7.152555099310121e-07, -3.24249267578125e-05, -0.0003814697265625, -1.52587890625e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.0017852783203125, -1.9073486328125e-06, -0.0026139020919799805, -5.340576171875e-05, -0.0002231597900390625, -7.62939453125e-06, -0.00042278601904399693, -8.416175842285156e-05, -2.86102294921875e-05, -3.814697265625e-06, -0.000110626220703125], "score": -7.185370525159172, "model_output": {"hole4": "player", "hole0": "GrimscaleOracle", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Grimscale Oracle", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "buffs", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 1}]}, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, buffs=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MURLOC), BothPlayer()))])\n"}, {"choice_history": [121, 198, "Grimscale", "Oracle", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Minion", "Selector", "<EOS>", 320, 105], "score_history": [-0.0004520416259765625, -0.0001010894775390625, -0.00019977481861133128, -7.987004210008308e-06, -2.2649765014648438e-06, -3.218265192117542e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0011157989501953125, -0.000637054443359375, -5.590759246842936e-05, -7.367130456259474e-05, -2.3841855067985307e-07, 0.0, -6.083240805310197e-06, 0.0, -0.002140045166015625, 0.0, -4.839869507122785e-05, -1.9073486328125e-06, -0.0006122589111328125, -3.24249267578125e-05, -0.0003147125244140625, 0.0, -0.0001010894775390625, 0.0, -0.0015323162078857422, -1.1444091796875e-05, -1.919269561767578e-05, 0.0, -5.602834789897315e-06, 0.0, -1.33514404296875e-05, -0.0022411346435546875, -7.62939453125e-06, -1.1920928244535389e-07, -7.152555099310121e-07, -9.199080523103476e-06, -1.1920928244535389e-07, -0.0039997100830078125, 0.0, -0.000396728515625, -1.9073486328125e-05, -0.0002498626708984375, -8.0108642578125e-05, -0.000141143798828125, -4.1961669921875e-05, -0.000102996826171875, -0.0007550716982223094, -5.7220458984375e-06, -7.20065450668335, -7.43865966796875e-05, -0.00018180441111326218, -1.33514404296875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0044727325439453125], "score": -7.2209931728027215, "model_output": {"hole4": "player", "hole0": "GrimscaleOracle", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Grimscale Oracle", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"_type": "Template46", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 1}]}, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector())])\n"}, {"choice_history": [121, 198, "Grimscale", "Oracle", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 68, 163, 57, 321, 86, 244, "1", "<EOS>", 68, 163, 57, 321, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-0.0004520416259765625, -0.0001010894775390625, -0.00019977481861133128, -7.987004210008308e-06, -2.2649765014648438e-06, -3.218265192117542e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0011157989501953125, -0.000637054443359375, -5.590759246842936e-05, -7.367130456259474e-05, -2.3841855067985307e-07, 0.0, -6.083240805310197e-06, 0.0, -0.002140045166015625, 0.0, -4.839869507122785e-05, -1.9073486328125e-06, -0.0006122589111328125, -3.24249267578125e-05, -0.0003147125244140625, 0.0, -0.0001010894775390625, 0.0, -0.0015323162078857422, -1.1444091796875e-05, -1.919269561767578e-05, 0.0, -5.602834789897315e-06, 0.0, -1.33514404296875e-05, -0.0022411346435546875, -7.62939453125e-06, -1.1920928244535389e-07, -7.152555099310121e-07, -9.199080523103476e-06, -1.1920928244535389e-07, -0.0039997100830078125, 0.0, -0.000396728515625, -1.9073486328125e-05, -0.0002498626708984375, -8.0108642578125e-05, -0.000141143798828125, -4.1961669921875e-05, -0.000102996826171875, -0.0007550716982223094, -5.7220458984375e-06, -0.004727363586425781, -0.001865386962890625, -0.0046234130859375, -0.0001068115234375, -7.010385513305664, -0.0027980804443359375, -0.004608772695064545, -5.7220458984375e-06, -0.10357952117919922, -0.08809471130371094, -0.0034332275390625, -6.67572021484375e-05, -0.009440422058105469, -0.00244903564453125, -0.000110626220703125, 0.0, -0.00045192119432613254, -0.0042967116460204124, -8.344646857949556e-07, -8.58306884765625e-05, -0.0002269744873046875, -1.1444091796875e-05, -1.71661376953125e-05, -3.814697265625e-06, -0.0019741058349609375, -1.9073486328125e-06, -0.002741694450378418, -4.1961669921875e-05, -0.00019073486328125, -7.62939453125e-06, -0.00048213041736744344, -5.3524967370321974e-05, -3.24249267578125e-05, -7.62939453125e-06, -0.0001125335693359375], "score": -7.2626270081230615, "model_output": {"hole4": "player", "hole0": "GrimscaleOracle", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Grimscale Oracle", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "BothPlayer"}]}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 1}]}, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            ChangeAttack(1), MinionSelector(IsType(MINION_TYPE.MURLOC),\n            BothPlayer())))])\n"}, {"choice_history": [121, 198, "Grimscale", "Oracle", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 68, 163, 57, 321, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-0.0004520416259765625, -0.0001010894775390625, -0.00019977481861133128, -7.987004210008308e-06, -2.2649765014648438e-06, -3.218265192117542e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0011157989501953125, -0.000637054443359375, -5.590759246842936e-05, -7.367130456259474e-05, -2.3841855067985307e-07, 0.0, -6.083240805310197e-06, 0.0, -0.002140045166015625, 0.0, -4.839869507122785e-05, -1.9073486328125e-06, -7.665493965148926, -0.000782012939453125, 0.0, -4.291534423828125e-06, 0.0, -0.0003814697265625, -0.0029582977294921875, -4.57763671875e-05, -1.1920928244535389e-07, -1.7881377516459906e-06, -4.427041858434677e-06, -1.1920928244535389e-07, -0.002490520477294922, 0.0, -0.0005283355712890625, -1.9073486328125e-05, -0.00023090839385986328, -6.29425048828125e-05, -0.000141143798828125, -4.1961669921875e-05, -0.0001277923583984375, -0.000775933382101357, -3.814697265625e-06, -0.004508018493652344, -0.0017566680908203125, -0.0044002532958984375, -0.0001201629638671875, -0.004878997802734375, -0.0004291534423828125, -0.000270843505859375, 0.0, -0.00046074241981841624, -0.004050226882100105, -1.1920922133867862e-06, -4.57763671875e-05, -0.00030517578125, -1.1444091796875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0010890960693359375, -1.9073486328125e-06, -0.0027028322219848633, -5.53131103515625e-05, -0.000240325927734375, -9.5367431640625e-06, -0.00044292263919487596, -8.428096771240234e-05, -2.6702880859375e-05, -5.7220458984375e-06, -0.0001220703125], "score": -7.70502629741118, "model_output": {"hole4": "player", "hole0": "GrimscaleOracle", "hole1": "MinionCard", "hole2": [{"hole4": {"_type": "Template53"}, "hole0": "Grimscale Oracle", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 1}]}, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MURLOC), BothPlayer()))])\n"}, {"choice_history": [121, 198, "Grimscale", "Oracle", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Grimscale", " ", "Oracle", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 94, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 68, 163, 57, 321, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-0.0004520416259765625, -0.0001010894775390625, -0.00019977481861133128, -7.987004210008308e-06, -2.2649765014648438e-06, -3.218265192117542e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -7.07301139831543, -0.0001392364501953125, -8.392333984375e-05, -0.015905380249023438, -2.86102294921875e-05, -0.12503433227539062, -8.7738037109375e-05, -1.33514404296875e-05, -2.622600959512056e-06, -0.0005371570587158203, -7.033334895822918e-06, 0.0, -0.0005435943603515625, -0.000885009765625, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.00011658668518066406, -7.748603820800781e-06, -0.32616448402404785, -7.62939453125e-06, -0.1395120620727539, -0.0007953643798828125, -0.016633987426757812, -0.000400543212890625, -0.0835123062133789, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -4.768371127283899e-06, 0.0, -1.33514404296875e-05, -0.004161834716796875, -9.5367431640625e-06, -1.1920928244535389e-07, -8.344646857949556e-07, -6.142829079180956e-06, -2.3841855067985307e-07, -0.0030863285064697266, 0.0, -0.00038909912109375, -1.52587890625e-05, -0.0002422332763671875, -5.91278076171875e-05, -0.0001659393310546875, -4.1961669921875e-05, -0.0001068115234375, -0.0007188320741988719, -5.7220458984375e-06, -0.005817413330078125, -0.001873016357421875, -0.004139900207519531, -0.0001049041748046875, -0.0060863494873046875, -0.00048828125, -0.000244140625, 0.0, -0.00044023850932717323, -0.0038160658441483974, -1.0728830375228426e-06, -4.76837158203125e-05, -0.000278472900390625, -1.1444091796875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0010929107666015625, -1.9073486328125e-06, -0.002705693244934082, -5.53131103515625e-05, -0.0002460479736328125, -9.5367431640625e-06, -0.0004482845251914114, -8.058547973632812e-05, -2.47955322265625e-05, -7.62939453125e-06, -0.000133514404296875], "score": -7.821490444097627, "model_output": {"hole4": "player", "hole0": "GrimscaleOracle", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Grimscale Oracle", "_type": "Str"}, {"_type": "Template60"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 1}]}, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MURLOC), BothPlayer()))])\n"}, {"choice_history": [121, 198, "Grimscale", "Oracle", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 68, 163, 57, 321, 84, 239, "Change", "Attack", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-0.0004520416259765625, -0.0001010894775390625, -0.00019977481861133128, -7.987004210008308e-06, -2.2649765014648438e-06, -3.218265192117542e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0011157989501953125, -0.000637054443359375, -5.590759246842936e-05, -7.367130456259474e-05, -2.3841855067985307e-07, 0.0, -6.083240805310197e-06, 0.0, -0.002140045166015625, 0.0, -4.839869507122785e-05, -1.9073486328125e-06, -0.0006122589111328125, -3.24249267578125e-05, -0.0003147125244140625, 0.0, -0.0001010894775390625, 0.0, -0.0015323162078857422, -1.1444091796875e-05, -1.919269561767578e-05, 0.0, -5.602834789897315e-06, 0.0, -1.33514404296875e-05, -0.0022411346435546875, -7.62939453125e-06, -1.1920928244535389e-07, -7.152555099310121e-07, -9.199080523103476e-06, -1.1920928244535389e-07, -0.0039997100830078125, 0.0, -0.000396728515625, -1.9073486328125e-05, -0.0002498626708984375, -8.0108642578125e-05, -0.000141143798828125, -4.1961669921875e-05, -0.000102996826171875, -0.0007550716982223094, -5.7220458984375e-06, -0.004727363586425781, -0.001865386962890625, -0.0046234130859375, -0.0001068115234375, -6.247175216674805, -0.0003566741943359375, -1.4941959381103516, -0.03752366080880165, -6.556510470545618e-06, -0.0001888275146484375, 0.0, -0.0066825151443481445, -0.0011570453643798828, -8.20159912109375e-05, -0.0012912750244140625, -0.0002689361572265625, -1.33514404296875e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.000179290771484375, -9.5367431640625e-06, -0.0052950382232666016, -9.5367431640625e-06, -0.00037384033203125, -1.33514404296875e-05, -0.0001491305883973837, -5.4001808166503906e-05, -2.86102294921875e-05, -1.1444091796875e-05, -6.103515625e-05], "score": -7.822053824743492, "model_output": {"hole4": "player", "hole0": "GrimscaleOracle", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Grimscale Oracle", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"hole1": {"_type": "Name", "id": "IsType"}, "hole2": [{"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Template35", "hole0": "ChangeAttack"}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 1}]}, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            ChangeAttack(IsType(MINION_TYPE.MURLOC)), BothPlayer()))])\n"}, {"choice_history": [121, 198, "Grimscale", "Oracle", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 68, 163, 57, 321, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "Character", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-0.0004520416259765625, -0.0001010894775390625, -0.00019977481861133128, -7.987004210008308e-06, -2.2649765014648438e-06, -3.218265192117542e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0011157989501953125, -0.000637054443359375, -5.590759246842936e-05, -7.367130456259474e-05, -2.3841855067985307e-07, 0.0, -6.083240805310197e-06, 0.0, -0.002140045166015625, 0.0, -4.839869507122785e-05, -1.9073486328125e-06, -0.0006122589111328125, -3.24249267578125e-05, -0.0003147125244140625, 0.0, -0.0001010894775390625, 0.0, -0.0015323162078857422, -1.1444091796875e-05, -1.919269561767578e-05, 0.0, -5.602834789897315e-06, 0.0, -1.33514404296875e-05, -0.0022411346435546875, -7.62939453125e-06, -1.1920928244535389e-07, -7.152555099310121e-07, -9.199080523103476e-06, -1.1920928244535389e-07, -0.0039997100830078125, 0.0, -0.000396728515625, -1.9073486328125e-05, -0.0002498626708984375, -8.0108642578125e-05, -0.000141143798828125, -4.1961669921875e-05, -0.000102996826171875, -0.0007550716982223094, -5.7220458984375e-06, -0.004727363586425781, -0.001865386962890625, -0.0046234130859375, -0.0001068115234375, -0.004505157470703125, -0.00041961669921875, -0.0002346038818359375, 0.0, -0.000485299649881199, -0.0039667291566729546, -1.1920922133867862e-06, -4.57763671875e-05, -0.0002918243408203125, -1.1444091796875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0010528564453125, -1.9073486328125e-06, -7.672920227050781, -0.21443569660186768, -0.0023708343505859375, -5.7220458984375e-06, -0.001124354312196374, -1.9550323486328125e-05, -1.9073486328125e-05, -1.33514404296875e-05, -9.72747802734375e-05], "score": -7.928951394965182, "model_output": {"hole4": "player", "hole0": "GrimscaleOracle", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Grimscale Oracle", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "Character", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 1}]}, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.Character), BothPlayer()))])\n"}, {"choice_history": [121, 198, "Grimscale", "Oracle", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.0004520416259765625, -0.0001010894775390625, -0.00019977481861133128, -7.987004210008308e-06, -2.2649765014648438e-06, -3.218265192117542e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0011157989501953125, -0.000637054443359375, -5.590759246842936e-05, -7.367130456259474e-05, -2.3841855067985307e-07, 0.0, -6.083240805310197e-06, 0.0, -0.002140045166015625, 0.0, -4.839869507122785e-05, -1.9073486328125e-06, -0.0006122589111328125, -3.24249267578125e-05, -0.0003147125244140625, 0.0, -0.0001010894775390625, 0.0, -0.0015323162078857422, -1.1444091796875e-05, -1.919269561767578e-05, 0.0, -5.602834789897315e-06, 0.0, -1.33514404296875e-05, -8.78759479522705, -0.0028553009033203125, -5.960462772236497e-07, -1.1920928244535389e-07, -7.174850907176733e-06, 0.0], "score": -8.79799735908798, "model_output": {"hole4": "player", "hole0": "GrimscaleOracle", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Grimscale Oracle", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 1}]}, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}], "index": 41}
{"beams": [{"choice_history": [121, 198, "Guardian", "Of", "Kings", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Heal", "<EOS>", 320, 75, 190, "6", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "6", "<EOS>"], "score_history": [-8.20159912109375e-05, -0.0002307891845703125, -8.141678699757904e-05, -0.0006724100676365197, -0.0005395148764364421, -7.963177631609142e-05, -6.914031473570503e-06, -1.3589840818895027e-05, -2.3007385607343167e-05, -8.20159912109375e-05, -0.002269744873046875, -0.0002803802490234375, -4.768370445162873e-07, -1.728534698486328e-05, -2.837163265212439e-05, -8.0108642578125e-05, -0.00033923896262422204, -7.62939453125e-06, -0.000196087101357989, -5.7220458984375e-06, -0.0041065216064453125, 0.0, -0.0008470993489027023, -1.9073486328125e-06, -0.007267951965332031, -0.0013456344604492188, -0.014570293016731739, -4.303455352783203e-05, -3.62396240234375e-05, -0.005360603332519531, -0.0005016326904296875, -0.006096423137933016, -0.00010371208190917969, -0.00195467472076416, -7.748603820800781e-06, -5.7220458984375e-06, -0.0014667510986328125, -0.000118255615234375, -0.0001020424606394954, 0.0, -0.000148773193359375, -7.62939453125e-05, -7.62939453125e-06, -4.291534423828125e-06, -3.814697265625e-05, -0.0005855558556504548, -5.53131103515625e-05], "score": -0.04988860273613227, "model_output": {"hole4": "player", "hole0": "GuardianOfKings", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Num", "n": 6}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "Heal"}, "hole0": "Guardian of Kings", "hole1": 7, "hole2": "PALADIN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n"}, {"choice_history": [121, 198, "Guardian", "Of", "Kings", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Restore", "<EOS>", 320, 75, 190, "6", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "6", "<EOS>"], "score_history": [-8.20159912109375e-05, -0.0002307891845703125, -8.141678699757904e-05, -0.0006724100676365197, -0.0005395148764364421, -7.963177631609142e-05, -6.914031473570503e-06, -1.3589840818895027e-05, -2.3007385607343167e-05, -8.20159912109375e-05, -0.002269744873046875, -0.0002803802490234375, -4.768370445162873e-07, -1.728534698486328e-05, -2.837163265212439e-05, -8.0108642578125e-05, -0.00033923896262422204, -7.62939453125e-06, -0.000196087101357989, -5.7220458984375e-06, -0.0041065216064453125, 0.0, -0.0008470993489027023, -1.9073486328125e-06, -0.007267951965332031, -0.0013456344604492188, -4.996889591217041, -0.00011419815564295277, -3.0517578125e-05, -0.10898017883300781, -0.0011463165283203125, -0.004260340705513954, -3.349781036376953e-05, -0.0019943714141845703, -5.841255187988281e-06, -5.7220458984375e-06, -0.00154876708984375, -0.0001163482666015625, -8.01083369879052e-05, 0.0, -0.0001583099365234375, -7.82012939453125e-05, -7.62939453125e-06, -4.291534423828125e-06, -3.814697265625e-05, -0.0005897281807847321, -5.340576171875e-05], "score": -5.134740978059085, "model_output": {"hole4": "player", "hole0": "GuardianOfKings", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Num", "n": 6}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "Restore"}, "hole0": "Guardian of Kings", "hole1": 7, "hole2": "PALADIN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Restore(6), HeroSelector())\n            )\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n"}, {"choice_history": [121, 198, "Guardian", "Of", "Kings", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Heal", "<EOS>", 320, 75, 190, "5", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "6", "<EOS>"], "score_history": [-8.20159912109375e-05, -0.0002307891845703125, -8.141678699757904e-05, -0.0006724100676365197, -0.0005395148764364421, -7.963177631609142e-05, -6.914031473570503e-06, -1.3589840818895027e-05, -2.3007385607343167e-05, -8.20159912109375e-05, -0.002269744873046875, -0.0002803802490234375, -4.768370445162873e-07, -1.728534698486328e-05, -2.837163265212439e-05, -8.0108642578125e-05, -0.00033923896262422204, -7.62939453125e-06, -0.000196087101357989, -5.7220458984375e-06, -0.0041065216064453125, 0.0, -0.0008470993489027023, -1.9073486328125e-06, -0.007267951965332031, -0.0013456344604492188, -0.014570293016731739, -4.303455352783203e-05, -3.62396240234375e-05, -0.005360603332519531, -0.0005016326904296875, -5.715094089508057, -0.00033032888313755393, -0.0040999650955200195, -1.3470649719238281e-05, -5.7220458984375e-06, -0.0014286041259765625, -0.000148773193359375, -6.580328772542998e-05, 0.0, -0.0002994537353515625, -6.866455078125e-05, -7.62939453125e-06, -6.556510470545618e-06, -3.4332275390625e-05, -0.0006477830465883017, -5.14984130859375e-05], "score": -5.7614199436806075, "model_output": {"hole4": "player", "hole0": "GuardianOfKings", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Num", "n": 5}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "Heal"}, "hole0": "Guardian of Kings", "hole1": 7, "hole2": "PALADIN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(5), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n"}, {"choice_history": [121, 198, "Guardian", "Of", "Kings", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Heal", "<EOS>", 320, 109, "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "6", "<EOS>"], "score_history": [-8.20159912109375e-05, -0.0002307891845703125, -8.141678699757904e-05, -0.0006724100676365197, -0.0005395148764364421, -7.963177631609142e-05, -6.914031473570503e-06, -1.3589840818895027e-05, -2.3007385607343167e-05, -8.20159912109375e-05, -0.002269744873046875, -0.0002803802490234375, -4.768370445162873e-07, -1.728534698486328e-05, -2.837163265212439e-05, -8.0108642578125e-05, -0.00033923896262422204, -7.62939453125e-06, -0.000196087101357989, -5.7220458984375e-06, -0.0041065216064453125, 0.0, -0.0008470993489027023, -1.9073486328125e-06, -0.007267951965332031, -0.0013456344604492188, -0.014570293016731739, -4.303455352783203e-05, -3.62396240234375e-05, -5.998811721801758, -0.0067382687702775, -7.748603820800781e-06, -1.9073486328125e-06, -0.0015507936477661133, -6.103515625e-05, -0.00010871828271774575, 0.0, -0.00018310546875, -7.62939453125e-05, -7.62939453125e-06, -4.410743713378906e-06, -4.00543212890625e-05, -0.0005434750346466899, -6.29425048828125e-05], "score": -6.041453137966414, "model_output": {"hole4": "player", "hole0": "GuardianOfKings", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Template67"}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "Heal"}, "hole0": "Guardian of Kings", "hole1": 7, "hole2": "PALADIN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(5), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n"}, {"choice_history": [121, 198, "Guardian", "Of", "Kings", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "DRUID", "<EOS>", "battlecry", "<EOS>", 29, 216, "Heal", "<EOS>", 320, 75, 190, "6", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "6", "<EOS>"], "score_history": [-8.20159912109375e-05, -0.0002307891845703125, -8.141678699757904e-05, -0.0006724100676365197, -0.0005395148764364421, -7.963177631609142e-05, -6.914031473570503e-06, -1.3589840818895027e-05, -2.3007385607343167e-05, -8.20159912109375e-05, -0.002269744873046875, -0.0002803802490234375, -4.768370445162873e-07, -1.728534698486328e-05, -2.837163265212439e-05, -8.0108642578125e-05, -0.00033923896262422204, -7.62939453125e-06, -0.000196087101357989, -5.7220458984375e-06, -6.06771183013916, 0.0, -0.02777087688446045, -1.9073486328125e-06, -0.00391387939453125, -0.0036249160766601562, -0.011483682319521904, -2.5510787963867188e-05, -5.14984130859375e-05, -0.003635406494140625, -0.0004749298095703125, -0.005934839136898518, -0.0001035928726196289, -0.0018421411514282227, -7.867813110351562e-06, -5.7220458984375e-06, -0.00142669677734375, -0.0001087188720703125, -0.00015032044029794633, 0.0, -8.96453857421875e-05, -7.82012939453125e-05, -7.62939453125e-06, -4.291534423828125e-06, -3.62396240234375e-05, -0.0005890129250474274, -5.53131103515625e-05], "score": -6.13417102106348, "model_output": {"hole4": "player", "hole0": "GuardianOfKings", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Num", "n": 6}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "Heal"}, "hole0": "Guardian of Kings", "hole1": 7, "hole2": "DRUID", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n"}, {"choice_history": [121, 198, "Guardian", "Of", "Kings", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "6", "<EOS>", 320, 75, 190, "6", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "6", "<EOS>"], "score_history": [-8.20159912109375e-05, -0.0002307891845703125, -8.141678699757904e-05, -0.0006724100676365197, -0.0005395148764364421, -7.963177631609142e-05, -6.914031473570503e-06, -1.3589840818895027e-05, -2.3007385607343167e-05, -8.20159912109375e-05, -0.002269744873046875, -0.0002803802490234375, -4.768370445162873e-07, -1.728534698486328e-05, -2.837163265212439e-05, -8.0108642578125e-05, -0.00033923896262422204, -7.62939453125e-06, -0.000196087101357989, -5.7220458984375e-06, -0.0041065216064453125, 0.0, -0.0008470993489027023, -1.9073486328125e-06, -0.007267951965332031, -0.0013456344604492188, -5.586513042449951, -5.7220458984375e-06, -9.5367431640625e-06, -1.1247062683105469, -0.00146484375, -0.005324549973011017, -3.993511199951172e-05, -0.0018483400344848633, -7.867813110351562e-06, -3.814697265625e-06, -0.0011578798294067383, -0.000164031982421875, -0.00014471844770014286, 0.0, -0.000148773193359375, -7.62939453125e-05, -7.62939453125e-06, -6.198883056640625e-06, -3.814697265625e-05, -0.0005884168203920126, -5.53131103515625e-05], "score": -6.740916789256403, "model_output": {"hole4": "player", "hole0": "GuardianOfKings", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Num", "n": 6}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "6"}, "hole0": "Guardian of Kings", "hole1": 7, "hole2": "PALADIN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(6(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n"}, {"choice_history": [121, 198, "Guardian", "Of", "Kings", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Heal", "<EOS>", 320, 75, 190, "<cost>", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "6", "<EOS>"], "score_history": [-8.20159912109375e-05, -0.0002307891845703125, -8.141678699757904e-05, -0.0006724100676365197, -0.0005395148764364421, -7.963177631609142e-05, -6.914031473570503e-06, -1.3589840818895027e-05, -2.3007385607343167e-05, -8.20159912109375e-05, -0.002269744873046875, -0.0002803802490234375, -4.768370445162873e-07, -1.728534698486328e-05, -2.837163265212439e-05, -8.0108642578125e-05, -0.00033923896262422204, -7.62939453125e-06, -0.000196087101357989, -5.7220458984375e-06, -0.0041065216064453125, 0.0, -0.0008470993489027023, -1.9073486328125e-06, -0.007267951965332031, -0.0013456344604492188, -0.014570293016731739, -4.303455352783203e-05, -3.62396240234375e-05, -0.005360603332519531, -0.0005016326904296875, -6.7152605056762695, -0.0003988400858361274, -0.005051732063293457, -5.7220458984375e-06, -3.814697265625e-06, -0.0020313262939453125, -4.9591064453125e-05, -8.606879418948665e-05, 0.0, -0.0002956390380859375, -6.67572021484375e-05, -7.62939453125e-06, -4.5299530029296875e-06, -3.62396240234375e-05, -0.0006399152334779501, -5.340576171875e-05], "score": -6.763108985893155, "model_output": {"hole4": "player", "hole0": "GuardianOfKings", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Num", "n": 0}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "Heal"}, "hole0": "Guardian of Kings", "hole1": 7, "hole2": "PALADIN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(0), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n"}, {"choice_history": [121, 198, "Guardian", "Of", "Kings", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 29, 216, "Heal", "<EOS>", 320, 75, 190, "6", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "6", "<EOS>"], "score_history": [-8.20159912109375e-05, -0.0002307891845703125, -8.141678699757904e-05, -0.0006724100676365197, -0.0005395148764364421, -7.963177631609142e-05, -6.914031473570503e-06, -1.3589840818895027e-05, -2.3007385607343167e-05, -8.20159912109375e-05, -0.002269744873046875, -0.0002803802490234375, -4.768370445162873e-07, -1.728534698486328e-05, -2.837163265212439e-05, -8.0108642578125e-05, -0.00033923896262422204, -7.62939453125e-06, -0.000196087101357989, -5.7220458984375e-06, -6.783759117126465, -3.814697265625e-06, -0.008365869522094727, -1.9073486328125e-06, -0.0029697418212890625, -0.00604248046875, -0.016908761113882065, -2.1457672119140625e-05, -4.9591064453125e-05, -0.003968238830566406, -0.0004253387451171875, -0.006046717055141926, -9.799003601074219e-05, -0.0020270347595214844, -5.9604644775390625e-06, -5.7220458984375e-06, -0.0014630556106567383, -0.000118255615234375, -0.00012695640907622874, 0.0, -0.0001201629638671875, -7.62939453125e-05, -7.62939453125e-06, -4.291534423828125e-06, -3.62396240234375e-05, -0.0005927084130235016, -5.53131103515625e-05], "score": -6.838337000410206, "model_output": {"hole4": "player", "hole0": "GuardianOfKings", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Num", "n": 6}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "Heal"}, "hole0": "Guardian of Kings", "hole1": 7, "hole2": "PRIEST", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n"}, {"choice_history": [121, 198, "Guardian", "Of", "Kings", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Heal", "<EOS>", 320, 75, 190, "6", "<EOS>", "DRUID", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "6", "<EOS>"], "score_history": [-8.20159912109375e-05, -0.0002307891845703125, -8.141678699757904e-05, -0.0006724100676365197, -0.0005395148764364421, -7.963177631609142e-05, -6.914031473570503e-06, -1.3589840818895027e-05, -2.3007385607343167e-05, -8.20159912109375e-05, -0.002269744873046875, -0.0002803802490234375, -4.768370445162873e-07, -1.728534698486328e-05, -2.837163265212439e-05, -8.0108642578125e-05, -0.00033923896262422204, -7.62939453125e-06, -0.000196087101357989, -5.7220458984375e-06, -0.0041065216064453125, 0.0, -0.0008470993489027023, -1.9073486328125e-06, -0.007267951965332031, -0.0013456344604492188, -0.014570293016731739, -4.303455352783203e-05, -3.62396240234375e-05, -0.005360603332519531, -0.0005016326904296875, -0.006096423137933016, -0.00010371208190917969, -6.8675150871276855, -0.07257652282714844, 0.0, -0.0005437135696411133, -1.52587890625e-05, -8.797630289336666e-05, 0.0, -0.0006313323974609375, -5.7220458984375e-05, -7.62939453125e-06, -5.7220440794480965e-06, -2.47955322265625e-05, -0.0007848736131563783, -4.38690185546875e-05], "score": -6.987611405260282, "model_output": {"hole4": "player", "hole0": "GuardianOfKings", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Num", "n": 6}], "hole2": "DRUIDSelector", "_type": "Template22", "hole0": "Heal"}, "hole0": "Guardian of Kings", "hole1": 7, "hole2": "PALADIN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(6), DRUIDSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n"}, {"choice_history": [121, 198, "Guardian", "Of", "Kings", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Damage", "<EOS>", 320, 75, 190, "6", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "6", "<EOS>"], "score_history": [-8.20159912109375e-05, -0.0002307891845703125, -8.141678699757904e-05, -0.0006724100676365197, -0.0005395148764364421, -7.963177631609142e-05, -6.914031473570503e-06, -1.3589840818895027e-05, -2.3007385607343167e-05, -8.20159912109375e-05, -0.002269744873046875, -0.0002803802490234375, -4.768370445162873e-07, -1.728534698486328e-05, -2.837163265212439e-05, -8.0108642578125e-05, -0.00033923896262422204, -7.62939453125e-06, -0.000196087101357989, -5.7220458984375e-06, -0.0041065216064453125, 0.0, -0.0008470993489027023, -1.9073486328125e-06, -0.007267951965332031, -0.0013456344604492188, -6.757255554199219, -0.00018250897119287401, -1.9073486328125e-06, -0.20370101928710938, -0.0002288818359375, -0.00869116373360157, -5.269050598144531e-05, -0.0016617774963378906, -1.0013580322265625e-05, -1.9073486328125e-06, -0.0011501312255859375, -0.000152587890625, -0.0001639105612412095, 0.0, -0.0001773834228515625, -8.0108642578125e-05, -7.62939453125e-06, -6.198883056640625e-06, -3.62396240234375e-05, -0.000577807251829654, -5.7220458984375e-05], "score": -6.992802107410057, "model_output": {"hole4": "player", "hole0": "GuardianOfKings", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Num", "n": 6}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Guardian of Kings", "hole1": 7, "hole2": "PALADIN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n"}, {"choice_history": [121, 198, "Guardian", "Of", "Kings", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "COMMON", "<EOS>", "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "6", "<EOS>"], "score_history": [-8.20159912109375e-05, -0.0002307891845703125, -8.141678699757904e-05, -0.0006724100676365197, -0.0005395148764364421, -7.963177631609142e-05, -6.914031473570503e-06, -1.3589840818895027e-05, -2.3007385607343167e-05, -8.20159912109375e-05, -6.368095397949219, -0.4867229461669922, -0.0007267328328453004, -0.00011074534268118441, -0.00021014771482441574, -0.0002294778823852539, -0.00031945493537932634, -0.0002536773681640625, -0.0003287586441729218, -9.894371032714844e-06, -0.006851911544799805, -9.5367431640625e-06, -0.09888781607151031, -2.8371459848131053e-05, -9.5367431640625e-06, -0.0518798828125, -0.0005731582059524953, -2.2053714928915724e-05, 0.0, -0.0012320280075073242, -2.288818359375e-05, -0.00012218940537422895, 0.0, -0.00018310546875, -3.814697265625e-05, -2.288818359375e-05, -6.914134246471804e-06, -8.785724639892578e-05, -0.0007797477883286774, -6.115436553955078e-05], "score": -7.0196377261918315, "model_output": {"hole4": "player", "hole0": "GuardianOfKings", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template63"}], "hole0": "Guardian of Kings", "hole1": 7, "hole2": "COMMON", "_type": "Template6", "hole3": "Heal", "hole5": "HeroSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(4), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n"}, {"choice_history": [121, 198, "Guardian", "Of", "Kings", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Heal", "<EOS>", 320, 75, 190, "6", "<EOS>", "Hero", "Selector", "<EOS>", "use", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "6", "<EOS>"], "score_history": [-8.20159912109375e-05, -0.0002307891845703125, -8.141678699757904e-05, -0.0006724100676365197, -0.0005395148764364421, -7.963177631609142e-05, -6.914031473570503e-06, -1.3589840818895027e-05, -2.3007385607343167e-05, -8.20159912109375e-05, -0.002269744873046875, -0.0002803802490234375, -4.768370445162873e-07, -1.728534698486328e-05, -2.837163265212439e-05, -8.0108642578125e-05, -0.00033923896262422204, -7.62939453125e-06, -0.000196087101357989, -5.7220458984375e-06, -0.0041065216064453125, 0.0, -0.0008470993489027023, -1.9073486328125e-06, -0.007267951965332031, -0.0013456344604492188, -0.014570293016731739, -4.303455352783203e-05, -3.62396240234375e-05, -0.005360603332519531, -0.0005016326904296875, -0.006096423137933016, -0.00010371208190917969, -0.00195467472076416, -7.748603820800781e-06, -5.7220458984375e-06, -7.311074256896973, -6.67572021484375e-05, -0.00011014705523848534, -1.9073486328125e-06, -0.00038909912109375, -0.0006046295166015625, -1.1444091796875e-05, -4.172325134277344e-06, -2.09808349609375e-05, -0.0006206033867783844, -3.4332275390625e-05], "score": -7.360223879610089, "model_output": {"hole4": "player", "hole0": "GuardianOfKings", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Num", "n": 6}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "Heal"}, "hole0": "Guardian of Kings", "hole1": 7, "hole2": "PALADIN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "use", "hole6": [{"hole1": 6, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(6), HeroSelector()))\n\n    def use(self, player):\n        return Minion(5, 6)\n"}, {"choice_history": [121, 198, "Guardian", "Of", "Kings", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "6", "<EOS>", 320, 93, 255, "Battle", "Axe", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "6", "<EOS>"], "score_history": [-8.20159912109375e-05, -0.0002307891845703125, -8.141678699757904e-05, -0.0006724100676365197, -0.0005395148764364421, -7.963177631609142e-05, -6.914031473570503e-06, -1.3589840818895027e-05, -2.3007385607343167e-05, -8.20159912109375e-05, -0.002269744873046875, -0.0002803802490234375, -4.768370445162873e-07, -1.728534698486328e-05, -2.837163265212439e-05, -8.0108642578125e-05, -0.00033923896262422204, -7.62939453125e-06, -0.000196087101357989, -5.7220458984375e-06, -0.0041065216064453125, 0.0, -0.0008470993489027023, -1.9073486328125e-06, -0.007267951965332031, -0.0013456344604492188, -5.586513042449951, -5.7220458984375e-06, -9.5367431640625e-06, -0.907811164855957, -9.34600830078125e-05, -0.7957632541656494, -0.13120108842849731, -5.161762237548828e-05, -0.010657668113708496, -3.933906555175781e-06, 0.0, -0.0005664825439453125, -7.62939453125e-06, -2.6702879040385596e-05, 0.0, -0.000568389892578125, -5.53131103515625e-05, -7.62939453125e-06, -9.179109838441946e-06, -2.09808349609375e-05, -0.00111555983312428, -3.814697265625e-05], "score": -7.453131968128105, "model_output": {"hole4": "player", "hole0": "GuardianOfKings", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Template46", "hole0": "BattleAxe"}], "hole2": "PlayerSelector", "_type": "Template22", "hole0": "6"}, "hole0": "Guardian of Kings", "hole1": 7, "hole2": "PALADIN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(6(BattleAxe()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n"}, {"choice_history": [121, 198, "Guardian", "Of", "Kings", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Heal", "<EOS>", 320, 75, 190, "6", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "5", "<EOS>"], "score_history": [-8.20159912109375e-05, -0.0002307891845703125, -8.141678699757904e-05, -0.0006724100676365197, -0.0005395148764364421, -7.963177631609142e-05, -6.914031473570503e-06, -1.3589840818895027e-05, -2.3007385607343167e-05, -8.20159912109375e-05, -0.002269744873046875, -0.0002803802490234375, -4.768370445162873e-07, -1.728534698486328e-05, -2.837163265212439e-05, -8.0108642578125e-05, -0.00033923896262422204, -7.62939453125e-06, -0.000196087101357989, -5.7220458984375e-06, -0.0041065216064453125, 0.0, -0.0008470993489027023, -1.9073486328125e-06, -0.007267951965332031, -0.0013456344604492188, -0.014570293016731739, -4.303455352783203e-05, -3.62396240234375e-05, -0.005360603332519531, -0.0005016326904296875, -0.006096423137933016, -0.00010371208190917969, -0.00195467472076416, -7.748603820800781e-06, -5.7220458984375e-06, -0.0014667510986328125, -0.000118255615234375, -0.0001020424606394954, 0.0, -0.000148773193359375, -7.62939453125e-05, -7.62939453125e-06, -4.291534423828125e-06, -3.814697265625e-05, -7.479406356811523, -3.24249267578125e-05], "score": -7.5286865155084115, "model_output": {"hole4": "player", "hole0": "GuardianOfKings", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Num", "n": 6}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "Heal"}, "hole0": "Guardian of Kings", "hole1": 7, "hole2": "PALADIN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 5)\n"}, {"choice_history": [121, 198, "Guardian", "Of", "Kings", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Heal", "<EOS>", 320, 75, 190, "3", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "6", "<EOS>"], "score_history": [-8.20159912109375e-05, -0.0002307891845703125, -8.141678699757904e-05, -0.0006724100676365197, -0.0005395148764364421, -7.963177631609142e-05, -6.914031473570503e-06, -1.3589840818895027e-05, -2.3007385607343167e-05, -8.20159912109375e-05, -0.002269744873046875, -0.0002803802490234375, -4.768370445162873e-07, -1.728534698486328e-05, -2.837163265212439e-05, -8.0108642578125e-05, -0.00033923896262422204, -7.62939453125e-06, -0.000196087101357989, -5.7220458984375e-06, -0.0041065216064453125, 0.0, -0.0008470993489027023, -1.9073486328125e-06, -0.007267951965332031, -0.0013456344604492188, -0.014570293016731739, -4.303455352783203e-05, -3.62396240234375e-05, -0.005360603332519531, -0.0005016326904296875, -7.60331916809082, -2.431869324936997e-05, -0.002066969871520996, -9.655952453613281e-06, -1.9073486328125e-06, -0.0012454986572265625, -7.62939453125e-05, -5.233282354311086e-05, 0.0, -0.000797271728515625, -6.103515625e-05, -7.62939453125e-06, -5.125998541188892e-06, -2.86102294921875e-05, -0.0007253882940858603, -5.14984130859375e-05], "score": -7.647589973562276, "model_output": {"hole4": "player", "hole0": "GuardianOfKings", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Num", "n": 3}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "Heal"}, "hole0": "Guardian of Kings", "hole1": 7, "hole2": "PALADIN", "_type": "Template11", "hole3": "battlecry"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template32", "hole0": 5}]}, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(3), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n"}], "index": 42}
{"beams": [{"choice_history": [121, 198, "Gurubashi", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 38, 252, "Effect", "<EOS>", 321, 68, 162, 25, 186, "Character", "Damaged", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Minion", "Is", "Target", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -0.08478090912103653, -0.009039228782057762, -6.0795613535447046e-05, -1.1920883480343036e-07, -5.9604644775390625e-06, -3.6954863844584906e-06, -2.288818359375e-05, -0.000263214111328125, -0.0001888275146484375, -2.6702524337451905e-05, -1.7523765563964844e-05, -9.179088920063805e-06, 0.0, -0.0003041938762180507, 0.0, -0.0007078647613525391, -1.9073486328125e-06, -6.914138793945312e-05, 0.0, -0.00013494490121956915, 0.0, -1.71661376953125e-05, -0.00241851806640625, -9.5367431640625e-06, -1.9073486328125e-06, -7.390948667307384e-06, -7.390969585685525e-06, -2.622600959512056e-06, -0.001887319260276854, 0.0, -0.0016937255859375, -0.00028228759765625, -0.0003497600555419922, 0.0, -0.0004253387451171875, -0.0008716583251953125, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, -0.0012898445129394531, -0.0003359317488502711, -5.7220458984375e-06, -0.000606536865234375, -3.0517578125e-05, -1.52587890625e-05, -0.005012631416320801, 0.0, -0.0003757476806640625, -7.62939453125e-06, -0.007806132081896067, -0.00039958953857421875, -0.011792661622166634, -0.0010443925857543945, -0.000293731689453125, -0.0006561279296875, -0.0009291172027587891, -2.8848648071289062e-05, -1.9073486328125e-06, -0.0008144378662109375, -0.0001125335693359375, -0.0011821985244750977, -0.0003376007080078125, -0.0003376007080078125, -4.57763671875e-05, 0.0, -4.38690185546875e-05, -9.72747802734375e-05], "score": -0.13737174133348162, "model_output": {"hole4": "player", "hole0": "GurubashiBerserker", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Gurubashi Berserker"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 7, "hole2": "effects", "_type": "Template27", "hole3": {"hole1": [{"func": {"_type": "Name", "id": "CharacterDamaged"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "MinionIsTarget"}, "arg": "condition", "_type": "keyword"}]}, {"hole1": [{"_type": "Template38", "hole0": 3}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Give"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Effect"}, "hole0": 2}]}, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsTarget()), ActionTag(Give(ChangeAttack(3)),\n            SelfSelector()))])\n"}, {"choice_history": [121, 198, "<UNK>", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 38, 252, "Effect", "<EOS>", 321, 68, 162, 25, 186, "Character", "Damaged", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Minion", "Is", "Target", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -2.541696548461914, -0.009039228782057762, -6.0795613535447046e-05, -1.1920883480343036e-07, -5.9604644775390625e-06, -3.6954863844584906e-06, -2.288818359375e-05, -0.000263214111328125, -0.0001888275146484375, -2.6702524337451905e-05, -1.7523765563964844e-05, -9.179088920063805e-06, 0.0, -0.0003041938762180507, 0.0, -0.0007078647613525391, -1.9073486328125e-06, -6.914138793945312e-05, 0.0, -0.00013494490121956915, 0.0, -1.71661376953125e-05, -0.00241851806640625, -9.5367431640625e-06, -1.9073486328125e-06, -7.390948667307384e-06, -7.390969585685525e-06, -2.622600959512056e-06, -0.001887319260276854, 0.0, -0.0016937255859375, -0.00028228759765625, -0.0003497600555419922, 0.0, -0.0004253387451171875, -0.0008716583251953125, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, -0.0012898445129394531, -0.0003359317488502711, -5.7220458984375e-06, -0.000606536865234375, -3.0517578125e-05, -1.52587890625e-05, -0.005012631416320801, 0.0, -0.0003757476806640625, -7.62939453125e-06, -0.007806132081896067, -0.00039958953857421875, -0.011792661622166634, -0.0010443925857543945, -0.000293731689453125, -0.0006561279296875, -0.0009291172027587891, -2.8848648071289062e-05, -1.9073486328125e-06, -0.0008144378662109375, -0.0001125335693359375, -0.0011821985244750977, -0.0003376007080078125, -0.0003376007080078125, -4.57763671875e-05, 0.0, -4.38690185546875e-05, -9.72747802734375e-05], "score": -2.594287380674359, "model_output": {"hole4": "player", "hole0": "<UNK>Berserker", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Gurubashi Berserker"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 7, "hole2": "effects", "_type": "Template27", "hole3": {"hole1": [{"func": {"_type": "Name", "id": "CharacterDamaged"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "MinionIsTarget"}, "arg": "condition", "_type": "keyword"}]}, {"hole1": [{"_type": "Template38", "hole0": 3}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Give"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Effect"}, "hole0": 2}]}, "inferred_code": "class <UNK>Berserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsTarget()), ActionTag(Give(ChangeAttack(3)),\n            SelfSelector()))])\n"}, {"choice_history": [121, 198, "Gurubashi", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 38, 252, "Effect", "<EOS>", 321, 68, 162, 25, 186, "Character", "Damaged", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Minion", "Is", "Target", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -0.08478090912103653, -4.722259998321533, -5.233219053479843e-05, 0.0, -4.0531158447265625e-06, -3.933904736186378e-06, -2.6702880859375e-05, -0.0002880096435546875, -0.0001392364501953125, -6.16293036728166e-05, -1.7523765563964844e-05, -7.152543730626348e-06, 0.0, -0.0002834557672031224, 0.0, -0.0007097721099853516, -1.9073486328125e-06, -7.104873657226562e-05, 0.0, -0.0001389980170642957, 0.0, -1.71661376953125e-05, -0.0025234222412109375, -7.62939453125e-06, -1.9073486328125e-06, -7.510157047363464e-06, -7.390969585685525e-06, -2.622600959512056e-06, -0.001901982119306922, 0.0, -0.0017375946044921875, -0.0002803802490234375, -0.0003497600555419922, 0.0, -0.0004291534423828125, -0.0008869171142578125, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, -0.0012917518615722656, -0.00033688542316667736, -5.7220458984375e-06, -0.00060272216796875, -3.0517578125e-05, -1.52587890625e-05, -0.005087018013000488, 0.0, -0.0003757476806640625, -7.62939453125e-06, -0.00776303093880415, -0.00039970874786376953, -0.011806013062596321, -0.001038670539855957, -0.000293731689453125, -0.0006561279296875, -0.0009272098541259766, -2.8848648071289062e-05, -1.9073486328125e-06, -0.0008144378662109375, -0.0001125335693359375, -0.0011821985244750977, -0.000335693359375, -0.0003376007080078125, -4.57763671875e-05, 0.0, -4.57763671875e-05, -9.72747802734375e-05], "score": -4.850796295498412, "model_output": {"hole4": "player", "hole0": "Gurubashi<UNK>", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Gurubashi Berserker"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 7, "hole2": "effects", "_type": "Template27", "hole3": {"hole1": [{"func": {"_type": "Name", "id": "CharacterDamaged"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "MinionIsTarget"}, "arg": "condition", "_type": "keyword"}]}, {"hole1": [{"_type": "Template38", "hole0": 3}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Give"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Effect"}, "hole0": 2}]}, "inferred_code": "class Gurubashi<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsTarget()), ActionTag(Give(ChangeAttack(3)),\n            SelfSelector()))])\n"}, {"choice_history": [121, 198, "Gurubashi", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 38, 252, "Effect", "<EOS>", 321, 68, 162, 25, 186, "Character", "Damaged", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Is", "Minion", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -0.08478090912103653, -0.009039228782057762, -6.0795613535447046e-05, -1.1920883480343036e-07, -5.9604644775390625e-06, -3.6954863844584906e-06, -2.288818359375e-05, -0.000263214111328125, -0.0001888275146484375, -2.6702524337451905e-05, -1.7523765563964844e-05, -9.179088920063805e-06, 0.0, -0.0003041938762180507, 0.0, -0.0007078647613525391, -1.9073486328125e-06, -6.914138793945312e-05, 0.0, -0.00013494490121956915, 0.0, -1.71661376953125e-05, -0.00241851806640625, -9.5367431640625e-06, -1.9073486328125e-06, -7.390948667307384e-06, -7.390969585685525e-06, -2.622600959512056e-06, -0.001887319260276854, 0.0, -0.0016937255859375, -0.00028228759765625, -0.0003497600555419922, 0.0, -0.0004253387451171875, -0.0008716583251953125, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, -0.0012898445129394531, -0.0003359317488502711, -5.7220458984375e-06, -0.000606536865234375, -3.0517578125e-05, -1.52587890625e-05, -0.005012631416320801, 0.0, -0.0003757476806640625, -7.62939453125e-06, -4.9968156814575195, -0.3449150323867798, -4.971027374267578e-05, -0.0003509521484375, -0.008274078369140625, -0.0009995698928833008, -2.872943878173828e-05, -1.9073486328125e-06, -0.0014667510986328125, -9.918212890625e-05, -0.0010803935583680868, -0.00047969818115234375, -0.000240325927734375, -4.9591064453125e-05, 0.0, -5.14984130859375e-05, -9.34600830078125e-05], "score": -5.466444502915692, "model_output": {"hole4": "player", "hole0": "GurubashiBerserker", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Gurubashi Berserker"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 7, "hole2": "effects", "_type": "Template27", "hole3": {"hole1": [{"func": {"_type": "Name", "id": "CharacterDamaged"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "IsMinion"}, "arg": "condition", "_type": "keyword"}]}, {"hole1": [{"_type": "Template38", "hole0": 3}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Give"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Effect"}, "hole0": 2}]}, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            IsMinion()), ActionTag(Give(ChangeAttack(3)), SelfSelector()))])\n"}, {"choice_history": [121, 198, "Gurubashi", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 38, 252, "Effect", "<EOS>", 321, 68, 162, 25, 186, "Character", "Damaged", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Minion", "Is", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -0.08478090912103653, -0.009039228782057762, -6.0795613535447046e-05, -1.1920883480343036e-07, -5.9604644775390625e-06, -3.6954863844584906e-06, -2.288818359375e-05, -0.000263214111328125, -0.0001888275146484375, -2.6702524337451905e-05, -1.7523765563964844e-05, -9.179088920063805e-06, 0.0, -0.0003041938762180507, 0.0, -0.0007078647613525391, -1.9073486328125e-06, -6.914138793945312e-05, 0.0, -0.00013494490121956915, 0.0, -1.71661376953125e-05, -0.00241851806640625, -9.5367431640625e-06, -1.9073486328125e-06, -7.390948667307384e-06, -7.390969585685525e-06, -2.622600959512056e-06, -0.001887319260276854, 0.0, -0.0016937255859375, -0.00028228759765625, -0.0003497600555419922, 0.0, -0.0004253387451171875, -0.0008716583251953125, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, -0.0012898445129394531, -0.0003359317488502711, -5.7220458984375e-06, -0.000606536865234375, -3.0517578125e-05, -1.52587890625e-05, -0.005012631416320801, 0.0, -0.0003757476806640625, -7.62939453125e-06, -0.007806132081896067, -0.00039958953857421875, -5.342019557952881, -0.0032367706298828125, -0.0003948211669921875, -0.0017246007919311523, -1.537799835205078e-05, 0.0, -0.001026153564453125, -0.0001049041748046875, -0.0011835095938295126, -0.00041294097900390625, -0.0002518892288208008, -9.5367431640625e-05, 0.0, -6.103515625e-05, -8.0108642578125e-05], "score": -5.470260700076324, "model_output": {"hole4": "player", "hole0": "GurubashiBerserker", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Gurubashi Berserker"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 7, "hole2": "effects", "_type": "Template27", "hole3": {"hole1": [{"func": {"_type": "Name", "id": "CharacterDamaged"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "MinionIs"}, "arg": "condition", "_type": "keyword"}]}, {"hole1": [{"_type": "Template38", "hole0": 3}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Give"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Effect"}, "hole0": 2}]}, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIs()), ActionTag(Give(ChangeAttack(3)), SelfSelector()))])\n"}, {"choice_history": [121, 198, "Gurubashi", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 38, 252, "Effect", "<EOS>", 321, 68, 162, 25, 186, "Character", "Damaged", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Minion", "Is", "Minion", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -0.08478090912103653, -0.009039228782057762, -6.0795613535447046e-05, -1.1920883480343036e-07, -5.9604644775390625e-06, -3.6954863844584906e-06, -2.288818359375e-05, -0.000263214111328125, -0.0001888275146484375, -2.6702524337451905e-05, -1.7523765563964844e-05, -9.179088920063805e-06, 0.0, -0.0003041938762180507, 0.0, -0.0007078647613525391, -1.9073486328125e-06, -6.914138793945312e-05, 0.0, -0.00013494490121956915, 0.0, -1.71661376953125e-05, -0.00241851806640625, -9.5367431640625e-06, -1.9073486328125e-06, -7.390948667307384e-06, -7.390969585685525e-06, -2.622600959512056e-06, -0.001887319260276854, 0.0, -0.0016937255859375, -0.00028228759765625, -0.0003497600555419922, 0.0, -0.0004253387451171875, -0.0008716583251953125, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, -0.0012898445129394531, -0.0003359317488502711, -5.7220458984375e-06, -0.000606536865234375, -3.0517578125e-05, -1.52587890625e-05, -0.005012631416320801, 0.0, -0.0003757476806640625, -7.62939453125e-06, -0.007806132081896067, -0.00039958953857421875, -5.78393030166626, -0.0006717443466186523, -5.7220458984375e-05, -0.003970146179199219, -0.0005309581756591797, -4.208087921142578e-05, 0.0, -0.0010166168212890625, -0.0001087188720703125, -0.0010710954666137695, -0.00031948089599609375, -0.0002307891845703125, -4.9591064453125e-05, 0.0, -4.1961669921875e-05, -0.0001087188720703125], "score": -5.911803087317821, "model_output": {"hole4": "player", "hole0": "GurubashiBerserker", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Gurubashi Berserker"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 7, "hole2": "effects", "_type": "Template27", "hole3": {"hole1": [{"func": {"_type": "Name", "id": "CharacterDamaged"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "MinionIsMinion"}, "arg": "condition", "_type": "keyword"}]}, {"hole1": [{"_type": "Template38", "hole0": 3}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Give"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Effect"}, "hole0": 2}]}, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsMinion()), ActionTag(Give(ChangeAttack(3)),\n            SelfSelector()))])\n"}, {"choice_history": [121, 198, "Gurubashi", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 38, 252, "Effect", "<EOS>", 321, 68, 162, 25, 186, "Character", "Damaged", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Is", "Target", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -0.08478090912103653, -0.009039228782057762, -6.0795613535447046e-05, -1.1920883480343036e-07, -5.9604644775390625e-06, -3.6954863844584906e-06, -2.288818359375e-05, -0.000263214111328125, -0.0001888275146484375, -2.6702524337451905e-05, -1.7523765563964844e-05, -9.179088920063805e-06, 0.0, -0.0003041938762180507, 0.0, -0.0007078647613525391, -1.9073486328125e-06, -6.914138793945312e-05, 0.0, -0.00013494490121956915, 0.0, -1.71661376953125e-05, -0.00241851806640625, -9.5367431640625e-06, -1.9073486328125e-06, -7.390948667307384e-06, -7.390969585685525e-06, -2.622600959512056e-06, -0.001887319260276854, 0.0, -0.0016937255859375, -0.00028228759765625, -0.0003497600555419922, 0.0, -0.0004253387451171875, -0.0008716583251953125, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, -0.0012898445129394531, -0.0003359317488502711, -5.7220458984375e-06, -0.000606536865234375, -3.0517578125e-05, -1.52587890625e-05, -0.005012631416320801, 0.0, -0.0003757476806640625, -7.62939453125e-06, -4.9968156814575195, -1.2979106903076172, -5.352497100830078e-05, -0.0057735443115234375, -0.0007658004760742188, -0.0015728473663330078, -1.728534698486328e-05, -1.9073486328125e-06, -0.0009098052978515625, -9.34600830078125e-05, -0.0011677740840241313, -0.000431060791015625, -0.00026726722717285156, -5.340576171875e-05, 0.0, -4.38690185546875e-05, -6.866455078125e-05], "score": -6.417394529544254, "model_output": {"hole4": "player", "hole0": "GurubashiBerserker", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Gurubashi Berserker"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 7, "hole2": "effects", "_type": "Template27", "hole3": {"hole1": [{"func": {"_type": "Name", "id": "CharacterDamaged"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "IsTarget"}, "arg": "condition", "_type": "keyword"}]}, {"hole1": [{"_type": "Template38", "hole0": 3}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Give"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Effect"}, "hole0": 2}]}, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            IsTarget()), ActionTag(Give(ChangeAttack(3)), SelfSelector()))])\n"}, {"choice_history": [121, 198, "Force", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 38, 252, "Effect", "<EOS>", 321, 68, 162, 25, 186, "Character", "Damaged", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Minion", "Is", "Target", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -6.211118698120117, -0.18817976117134094, -0.0006938151782378554, -2.3841721485950984e-07, -1.728534698486328e-05, -3.4570680327306036e-06, -2.288818359375e-05, -0.0003662109375, -0.000209808349609375, -2.2172682292875834e-05, -1.9311904907226562e-05, -1.6927606338867918e-05, 0.0, -0.0005132179940119386, 0.0, -0.0007587671279907227, -1.9073486328125e-06, -6.914138793945312e-05, 0.0, -0.0001244544837391004, 0.0, -1.71661376953125e-05, -0.0024204254150390625, -9.5367431640625e-06, -1.9073486328125e-06, -7.271740287251305e-06, -7.271760750882095e-06, -2.622600959512056e-06, -0.0018570401007309556, 0.0, -0.0016765594482421875, -0.0002803802490234375, -0.00035178661346435547, 0.0, -0.00041961669921875, -0.0008602142333984375, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, -0.0012879371643066406, -0.0003341436095070094, -5.7220458984375e-06, -0.0006084442138671875, -3.0517578125e-05, -1.52587890625e-05, -0.005020260810852051, 0.0, -0.0003757476806640625, -7.62939453125e-06, -0.007832054048776627, -0.00039958953857421875, -0.01177264004945755, -0.0010482072830200195, -0.000293731689453125, -0.0006551742553710938, -0.0009291172027587891, -2.8848648071289062e-05, -1.9073486328125e-06, -0.00081634521484375, -0.0001125335693359375, -0.0011821985244750977, -0.0003376007080078125, -0.0003376007080078125, -4.57763671875e-05, 0.0, -4.38690185546875e-05, -9.72747802734375e-05], "score": -6.443826395228598, "model_output": {"hole4": "player", "hole0": "ForceBerserker", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Gurubashi Berserker"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 7, "hole2": "effects", "_type": "Template27", "hole3": {"hole1": [{"func": {"_type": "Name", "id": "CharacterDamaged"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "MinionIsTarget"}, "arg": "condition", "_type": "keyword"}]}, {"hole1": [{"_type": "Template38", "hole0": 3}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Give"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Effect"}, "hole0": 2}]}, "inferred_code": "class ForceBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsTarget()), ActionTag(Give(ChangeAttack(3)),\n            SelfSelector()))])\n"}, {"choice_history": [121, 198, "Gurubashi", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 38, 252, "Effect", "<EOS>", 321, 68, 162, 25, 186, "Character", "Damaged", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -0.08478090912103653, -0.009039228782057762, -6.0795613535447046e-05, -1.1920883480343036e-07, -5.9604644775390625e-06, -3.6954863844584906e-06, -2.288818359375e-05, -0.000263214111328125, -0.0001888275146484375, -2.6702524337451905e-05, -1.7523765563964844e-05, -9.179088920063805e-06, 0.0, -0.0003041938762180507, 0.0, -0.0007078647613525391, -1.9073486328125e-06, -6.914138793945312e-05, 0.0, -0.00013494490121956915, 0.0, -1.71661376953125e-05, -0.00241851806640625, -9.5367431640625e-06, -1.9073486328125e-06, -7.390948667307384e-06, -7.390969585685525e-06, -2.622600959512056e-06, -0.001887319260276854, 0.0, -0.0016937255859375, -0.00028228759765625, -0.0003497600555419922, 0.0, -0.0004253387451171875, -0.0008716583251953125, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, -0.0012898445129394531, -0.0003359317488502711, -5.7220458984375e-06, -0.000606536865234375, -3.0517578125e-05, -1.52587890625e-05, -6.155282020568848, 0.0, -5.7220458984375e-06, -7.62939453125e-06, -0.20188665390014648, -2.717962343012914e-05, -7.152555099310121e-07, -6.866455078125e-05, -0.0012044906616210938, -0.00024247169494628906, -4.57763671875e-05, -1.9073486328125e-06, -0.000911712646484375, -7.05718994140625e-05, -0.0011788606643676758, -0.000701904296875, -0.0003663301467895508, -7.82012939453125e-05, 0.0, -0.0001239776611328125, -6.866455078125e-05], "score": -6.46832538722424, "model_output": {"hole4": "player", "hole0": "GurubashiBerserker", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Gurubashi Berserker"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 7, "hole2": "effects", "_type": "Template27", "hole3": {"hole1": [{"func": {"_type": "Name", "id": "CharacterDamaged"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "player", "_type": "keyword"}]}, {"hole1": [{"_type": "Template38", "hole0": 3}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Give"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Effect"}, "hole0": 2}]}, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(player=\n            BothPlayer()), ActionTag(Give(ChangeAttack(3)), SelfSelector()))])\n"}, {"choice_history": [121, 198, "Gurubashi", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "7", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -0.08478090912103653, -0.009039228782057762, -6.0795613535447046e-05, -1.1920883480343036e-07, -5.9604644775390625e-06, -3.6954863844584906e-06, -2.288818359375e-05, -0.000263214111328125, -0.0001888275146484375, -2.6702524337451905e-05, -1.7523765563964844e-05, -9.179088920063805e-06, 0.0, -0.0003041938762180507, 0.0, -0.0007078647613525391, -1.9073486328125e-06, -6.914138793945312e-05, 0.0, -0.00013494490121956915, 0.0, -1.71661376953125e-05, -6.190116882324219, -1.9073486328125e-06, -1.1920928244535389e-07, -2.491467421350535e-05, -5.960462772236497e-07, -2.861018856492592e-06, -3.778933751164004e-05, -3.576272320060525e-06, -0.0003147125244140625, -1.52587890625e-05, -0.003932952880859375, -0.159834623336792, -0.000510177225805819, -1.71661376953125e-05, -0.00042724609375, -0.008195877075195312, -0.0005381102673709393, -4.57763671875e-05, -2.288818359375e-05, -0.111328125, -0.0014438629150390625, -0.0074617862701416016, -0.00054931640625, -0.0008469820022583008, -3.0517578125e-05, 0.0, 0.0, -7.05718994140625e-05], "score": -6.581543300380012, "model_output": {"hole4": "player", "hole0": "GurubashiBerserker", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Gurubashi Berserker"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": 7, "_type": "Template36", "hole3": [{"hole2": [{"hole1": [{"_type": "Template38", "hole0": 3}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Give"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "Damaged"}], "hole0": "Minion"}]}, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(Damaged(), ActionTag(Give(\n            ChangeAttack(3)), SelfSelector()))])\n"}, {"choice_history": [121, 198, "Gurubashi", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 38, 252, "Effect", "<EOS>", 321, 68, 162, 25, 186, "Character", "Damaged", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -0.08478090912103653, -0.009039228782057762, -6.0795613535447046e-05, -1.1920883480343036e-07, -5.9604644775390625e-06, -3.6954863844584906e-06, -2.288818359375e-05, -0.000263214111328125, -0.0001888275146484375, -2.6702524337451905e-05, -1.7523765563964844e-05, -9.179088920063805e-06, 0.0, -0.0003041938762180507, 0.0, -0.0007078647613525391, -1.9073486328125e-06, -6.914138793945312e-05, 0.0, -0.00013494490121956915, 0.0, -1.71661376953125e-05, -0.00241851806640625, -9.5367431640625e-06, -1.9073486328125e-06, -7.390948667307384e-06, -7.390969585685525e-06, -2.622600959512056e-06, -0.001887319260276854, 0.0, -0.0016937255859375, -0.00028228759765625, -0.0003497600555419922, 0.0, -0.0004253387451171875, -0.0008716583251953125, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, -0.0012898445129394531, -0.0003359317488502711, -5.7220458984375e-06, -0.000606536865234375, -3.0517578125e-05, -1.52587890625e-05, -6.0551347732543945, 0.0, -1.1444091796875e-05, -5.7220458984375e-06, -0.5944980382919312, -0.00012206951214466244, -3.218649908376392e-06, -0.0001125335693359375, -0.001514434814453125, -0.0002446174621582031, -5.53131103515625e-05, -3.814697265625e-06, -0.00103759765625, -7.05718994140625e-05, -0.001215219497680664, -0.000667572021484375, -0.0003739595413208008, -8.0108642578125e-05, 0.0, -0.0001316070556640625, -7.05718994140625e-05], "score": -6.761405120366362, "model_output": {"hole4": "player", "hole0": "GurubashiBerserker", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Gurubashi Berserker"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 7, "hole2": "effects", "_type": "Template27", "hole3": {"hole1": [{"func": {"_type": "Name", "id": "CharacterDamaged"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}]}, {"hole1": [{"_type": "Template38", "hole0": 3}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Give"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Effect"}, "hole0": 2}]}, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(players=\n            BothPlayer()), ActionTag(Give(ChangeAttack(3)), SelfSelector()))])\n"}, {"choice_history": [121, 198, "Gurubashi", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 38, 252, "Effect", "<EOS>", 321, 68, 162, 25, 186, "Character", "Damaged", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Minion", "Is", "Target", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -0.08478090912103653, -0.009039228782057762, -6.0795613535447046e-05, -1.1920883480343036e-07, -5.9604644775390625e-06, -3.6954863844584906e-06, -2.288818359375e-05, -0.000263214111328125, -0.0001888275146484375, -2.6702524337451905e-05, -1.7523765563964844e-05, -9.179088920063805e-06, 0.0, -0.0003041938762180507, 0.0, -0.0007078647613525391, -1.9073486328125e-06, -6.914138793945312e-05, 0.0, -0.00013494490121956915, 0.0, -1.71661376953125e-05, -0.00241851806640625, -9.5367431640625e-06, -1.9073486328125e-06, -7.390948667307384e-06, -7.390969585685525e-06, -2.622600959512056e-06, -0.001887319260276854, 0.0, -0.0016937255859375, -0.00028228759765625, -0.0003497600555419922, 0.0, -0.0004253387451171875, -0.0008716583251953125, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, -0.0012898445129394531, -0.0003359317488502711, -5.7220458984375e-06, -0.000606536865234375, -3.0517578125e-05, -1.52587890625e-05, -6.0551347732543945, 0.0, -1.1444091796875e-05, -5.7220458984375e-06, -0.8080863952636719, -0.0037020444869995117, -0.006018486339598894, -0.0015641450881958008, -0.0001010894775390625, -0.00102996826171875, -0.0007594823837280273, -2.491474151611328e-05, -1.9073486328125e-06, -0.0008106231689453125, -0.000102996826171875, -0.0010296106338500977, -0.000263214111328125, -0.0003472566604614258, -4.00543212890625e-05, 0.0, -5.14984130859375e-05, -0.0001010894775390625], "score": -6.985238649049279, "model_output": {"hole4": "player", "hole0": "GurubashiBerserker", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Gurubashi Berserker"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 7, "hole2": "effects", "_type": "Template27", "hole3": {"hole1": [{"func": {"_type": "Name", "id": "CharacterDamaged"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "MinionIsTarget"}, "arg": "players", "_type": "keyword"}]}, {"hole1": [{"_type": "Template38", "hole0": 3}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Give"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Effect"}, "hole0": 2}]}, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(players=\n            MinionIsTarget()), ActionTag(Give(ChangeAttack(3)),\n            SelfSelector()))])\n"}, {"choice_history": [121, 198, "Gurubashi", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 38, 252, "Effect", "<EOS>", 321, 68, 162, 25, 186, "Character", "Damaged", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Minion", "Is", "Target", "Target", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -0.08478090912103653, -0.009039228782057762, -6.0795613535447046e-05, -1.1920883480343036e-07, -5.9604644775390625e-06, -3.6954863844584906e-06, -2.288818359375e-05, -0.000263214111328125, -0.0001888275146484375, -2.6702524337451905e-05, -1.7523765563964844e-05, -9.179088920063805e-06, 0.0, -0.0003041938762180507, 0.0, -0.0007078647613525391, -1.9073486328125e-06, -6.914138793945312e-05, 0.0, -0.00013494490121956915, 0.0, -1.71661376953125e-05, -0.00241851806640625, -9.5367431640625e-06, -1.9073486328125e-06, -7.390948667307384e-06, -7.390969585685525e-06, -2.622600959512056e-06, -0.001887319260276854, 0.0, -0.0016937255859375, -0.00028228759765625, -0.0003497600555419922, 0.0, -0.0004253387451171875, -0.0008716583251953125, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, -0.0012898445129394531, -0.0003359317488502711, -5.7220458984375e-06, -0.000606536865234375, -3.0517578125e-05, -1.52587890625e-05, -0.005012631416320801, 0.0, -0.0003757476806640625, -7.62939453125e-06, -0.007806132081896067, -0.00039958953857421875, -0.011792661622166634, -6.995170593261719, -0.02137565240263939, -0.0001277923583984375, -0.0010938644409179688, -0.0007780790328979492, -3.266334533691406e-05, -1.9073486328125e-06, -0.000865936279296875, -0.0001220703125, -0.0011203289031982422, -0.0002193450927734375, -0.00035858154296875, -3.62396240234375e-05, 0.0, -3.4332275390625e-05, -9.918212890625e-05], "score": -7.15288289273667, "model_output": {"hole4": "player", "hole0": "GurubashiBerserker", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Gurubashi Berserker"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 7, "hole2": "effects", "_type": "Template27", "hole3": {"hole1": [{"func": {"_type": "Name", "id": "CharacterDamaged"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "MinionIsTargetTarget"}, "arg": "condition", "_type": "keyword"}]}, {"hole1": [{"_type": "Template38", "hole0": 3}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Give"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Effect"}, "hole0": 2}]}, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsTargetTarget()), ActionTag(Give(ChangeAttack(3)),\n            SelfSelector()))])\n"}, {"choice_history": [121, 198, "<UNK>", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 38, 252, "Effect", "<EOS>", 321, 68, 162, 25, 186, "Character", "Damaged", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Minion", "Is", "Target", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -2.541696548461914, -4.722259998321533, -5.233219053479843e-05, 0.0, -4.0531158447265625e-06, -3.933904736186378e-06, -2.6702880859375e-05, -0.0002880096435546875, -0.0001392364501953125, -6.16293036728166e-05, -1.7523765563964844e-05, -7.152543730626348e-06, 0.0, -0.0002834557672031224, 0.0, -0.0007097721099853516, -1.9073486328125e-06, -7.104873657226562e-05, 0.0, -0.0001389980170642957, 0.0, -1.71661376953125e-05, -0.0025234222412109375, -7.62939453125e-06, -1.9073486328125e-06, -7.510157047363464e-06, -7.390969585685525e-06, -2.622600959512056e-06, -0.001901982119306922, 0.0, -0.0017375946044921875, -0.0002803802490234375, -0.0003497600555419922, 0.0, -0.0004291534423828125, -0.0008869171142578125, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, -0.0012917518615722656, -0.00033688542316667736, -5.7220458984375e-06, -0.00060272216796875, -3.0517578125e-05, -1.52587890625e-05, -0.005087018013000488, 0.0, -0.0003757476806640625, -7.62939453125e-06, -0.00776303093880415, -0.00039970874786376953, -0.011806013062596321, -0.001038670539855957, -0.000293731689453125, -0.0006561279296875, -0.0009272098541259766, -2.8848648071289062e-05, -1.9073486328125e-06, -0.0008144378662109375, -0.0001125335693359375, -0.0011821985244750977, -0.000335693359375, -0.0003376007080078125, -4.57763671875e-05, 0.0, -4.57763671875e-05, -9.72747802734375e-05], "score": -7.30771193483929, "model_output": {"hole4": "player", "hole0": "<UNK><UNK>", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Gurubashi Berserker"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 7, "hole2": "effects", "_type": "Template27", "hole3": {"hole1": [{"func": {"_type": "Name", "id": "CharacterDamaged"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "MinionIsTarget"}, "arg": "condition", "_type": "keyword"}]}, {"hole1": [{"_type": "Template38", "hole0": 3}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Give"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Effect"}, "hole0": 2}]}, "inferred_code": "class <UNK><UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsTarget()), ActionTag(Give(ChangeAttack(3)),\n            SelfSelector()))])\n"}, {"choice_history": [121, 198, "Gurubashi", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 38, 252, "Effect", "<EOS>", 321, 68, 162, 25, 186, "Character", "Damaged", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Minion", "Is", "Spell", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -0.08478090912103653, -0.009039228782057762, -6.0795613535447046e-05, -1.1920883480343036e-07, -5.9604644775390625e-06, -3.6954863844584906e-06, -2.288818359375e-05, -0.000263214111328125, -0.0001888275146484375, -2.6702524337451905e-05, -1.7523765563964844e-05, -9.179088920063805e-06, 0.0, -0.0003041938762180507, 0.0, -0.0007078647613525391, -1.9073486328125e-06, -6.914138793945312e-05, 0.0, -0.00013494490121956915, 0.0, -1.71661376953125e-05, -0.00241851806640625, -9.5367431640625e-06, -1.9073486328125e-06, -7.390948667307384e-06, -7.390969585685525e-06, -2.622600959512056e-06, -0.001887319260276854, 0.0, -0.0016937255859375, -0.00028228759765625, -0.0003497600555419922, 0.0, -0.0004253387451171875, -0.0008716583251953125, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, -0.0012898445129394531, -0.0003359317488502711, -5.7220458984375e-06, -0.000606536865234375, -3.0517578125e-05, -1.52587890625e-05, -0.005012631416320801, 0.0, -0.0003757476806640625, -7.62939453125e-06, -0.007806132081896067, -0.00039958953857421875, -7.388339996337891, -0.014284729957580566, -0.000438690185546875, -0.0005168914794921875, -0.0007990598678588867, -5.936622619628906e-05, -1.9073486328125e-06, -0.00063323974609375, -0.000102996826171875, -0.0010514259338378906, -0.00032806396484375, -0.00023090839385986328, -4.57763671875e-05, 0.0, -6.866455078125e-05, -9.1552734375e-05], "score": -7.526646932685253, "model_output": {"hole4": "player", "hole0": "GurubashiBerserker", "hole1": "MinionCard", "hole2": [{"hole1": 5, "hole2": "ALL", "_type": "Template14", "hole0": "Gurubashi Berserker"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 7, "hole2": "effects", "_type": "Template27", "hole3": {"hole1": [{"func": {"_type": "Name", "id": "CharacterDamaged"}, "_type": "Call", "keywords": [{"value": {"_type": "Template46", "hole0": "MinionIsSpell"}, "arg": "condition", "_type": "keyword"}]}, {"hole1": [{"_type": "Template38", "hole0": 3}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Give"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Effect"}, "hole0": 2}]}, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsSpell()), ActionTag(Give(ChangeAttack(3)), SelfSelector\n            ()))])\n"}], "index": 43}
{"beams": [{"choice_history": [121, 200, "Hammer", "Of", "Wrath", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-5.340576171875e-05, -0.0001220703125, -6.925819616299123e-05, -0.00020658571156673133, -0.0014205592451617122, -0.0005509853363037109, -4.526693373918533e-06, -7.62939453125e-06, -5.7220458984375e-06, -6.103515625e-05, -0.00074005126953125, -0.0001068115234375, -0.0001659393310546875, -6.4849853515625e-05, -6.103515625e-05, -2.09808349609375e-05, -5.91278076171875e-05, -0.008419036865234375, -3.2186455882765586e-06, -0.002082227263599634, -0.0001887042890302837, -0.00011897087097167969, -0.004147528205066919, -6.103515625e-05, -0.0015516281127929688, -5.340576171875e-05, 0.0, -0.0003910064697265625, -0.000102996826171875, -0.0002537965774536133, -5.9604644775390625e-05, -0.021944880485534668, 0.0, -0.0014095306396484375, -1.9073486328125e-05, -0.0002593994140625, -5.91278076171875e-05, -0.0035533905029296875, -2.0265579223632812e-06, -2.86102294921875e-05, -7.62939453125e-06, -0.0001049041748046875, -0.00024449825286865234, 0.0, -7.62939453125e-06, 0.0, -0.00019001959299203008, 0.0, -3.24249267578125e-05, -2.6702880859375e-05, -0.000148773193359375, -0.00019454903667792678, -2.384185791015625e-06, -0.005333900451660156, -0.0002231597900390625, -3.0517578125e-05, -5.7220458984375e-06, -6.866455078125e-05, -0.00010835530702024698, 0.0, -5.14984130859375e-05, -0.000545501708984375, -3.0517578125e-05, -1.1444091796875e-05, -0.00012457156844902784, -7.152555099310121e-07, -0.001215219497680664, -5.829278234159574e-05, -2.6702880859375e-05, -0.0023136138916015625, -4.9591064453125e-05, -8.0108642578125e-05, -0.0003414154052734375, -0.0003223419189453125, -0.0003824232844635844, -3.814697265625e-06], "score": -0.060717379879861255, "model_output": {"hole4": "player", "hole0": "HammerOfWrath", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hammer of Wrath", "_type": "Str"}, {"_type": "Template63"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Hammer", "Of", "Wrath", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "Hero", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-5.340576171875e-05, -0.0001220703125, -6.925819616299123e-05, -0.00020658571156673133, -0.0014205592451617122, -0.0005509853363037109, -4.526693373918533e-06, -7.62939453125e-06, -5.7220458984375e-06, -6.103515625e-05, -0.00074005126953125, -0.0001068115234375, -0.0001659393310546875, -6.4849853515625e-05, -6.103515625e-05, -2.09808349609375e-05, -5.91278076171875e-05, -0.008419036865234375, -3.2186455882765586e-06, -0.002082227263599634, -0.0001887042890302837, -0.00011897087097167969, -0.004147528205066919, -6.103515625e-05, -0.0015516281127929688, -5.340576171875e-05, 0.0, -0.0003910064697265625, -0.000102996826171875, -0.0002537965774536133, -5.9604644775390625e-05, -5.0480756759643555, -0.027711868286132812, -0.012619972229003906, -2.6702880859375e-05, -0.0004749298095703125, -0.000118255615234375, -0.007880925200879574, -1.9073486328125e-06, -3.24249267578125e-05, -7.62939453125e-06, -0.0001316070556640625, -0.00025403499603271484, 0.0, -1.728534698486328e-05, 0.0, -0.00017666813801042736, 0.0, -2.6702880859375e-05, -2.47955322265625e-05, -0.000148773193359375, -0.0001745221670717001, -2.1457672119140625e-06, -0.0042667388916015625, -0.0002269744873046875, -3.0517578125e-05, -5.7220458984375e-06, -6.67572021484375e-05, -0.00011252717376919463, 0.0, -5.14984130859375e-05, -0.0005359649658203125, -3.0517578125e-05, -1.1444091796875e-05, -0.0001225451414939016, -7.152555099310121e-07, -0.0012133121490478516, -5.745834278059192e-05, -2.6702880859375e-05, -0.0024051666259765625, -5.14984130859375e-05, -7.82012939453125e-05, -0.000335693359375, -0.0003108978271484375, -0.0003824232844635844, -3.814697265625e-06], "score": -5.129387651750221, "model_output": {"hole4": "player", "hole0": "HammerOfWrath", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hammer of Wrath", "_type": "Str"}, {"_type": "Template63"}, {"attr": "Hero", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.Hero,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Hammer", "Of", "Wrath", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "EPIC", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-5.340576171875e-05, -0.0001220703125, -6.925819616299123e-05, -0.00020658571156673133, -0.0014205592451617122, -0.0005509853363037109, -4.526693373918533e-06, -7.62939453125e-06, -5.7220458984375e-06, -6.103515625e-05, -0.00074005126953125, -0.0001068115234375, -0.0001659393310546875, -6.4849853515625e-05, -6.103515625e-05, -2.09808349609375e-05, -5.91278076171875e-05, -0.008419036865234375, -3.2186455882765586e-06, -0.002082227263599634, -0.0001887042890302837, -0.00011897087097167969, -0.004147528205066919, -6.103515625e-05, -0.0015516281127929688, -5.340576171875e-05, 0.0, -0.0003910064697265625, -0.000102996826171875, -0.0002537965774536133, -5.9604644775390625e-05, -5.589292526245117, 0.0, -0.0028095245361328125, -1.1444091796875e-05, -0.000110626220703125, -4.1961669921875e-05, -0.0063124895095825195, -1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -0.0001125335693359375, -0.00023877620697021484, 0.0, -1.728534698486328e-05, 0.0, -0.0001702308509266004, 0.0, -2.6702880859375e-05, -2.47955322265625e-05, -0.000148773193359375, -0.00018203230865765363, -2.2649765014648438e-06, -0.004492759704589844, -0.0002269744873046875, -3.0517578125e-05, -5.7220458984375e-06, -6.866455078125e-05, -0.00011419590009609237, 0.0, -5.14984130859375e-05, -0.0005359649658203125, -3.0517578125e-05, -1.1444091796875e-05, -0.00012206833343952894, -7.152555099310121e-07, -0.0012171268463134766, -5.745834278059192e-05, -2.6702880859375e-05, -0.00238800048828125, -5.14984130859375e-05, -7.62939453125e-05, -0.000335693359375, -0.00031280517578125, -0.0003825424937531352, -3.814697265625e-06], "score": -5.631238734325962, "model_output": {"hole4": "player", "hole0": "HammerOfWrath", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hammer of Wrath", "_type": "Str"}, {"_type": "Template63"}, {"attr": "EPIC", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.EPIC,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Hammer", "Of", "Wrath", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hammer", " ", "of", " ", "of", " ", "Wrath", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-5.340576171875e-05, -0.0001220703125, -6.925819616299123e-05, -0.00020658571156673133, -0.0014205592451617122, -0.0005509853363037109, -4.526693373918533e-06, -7.62939453125e-06, -5.7220458984375e-06, -6.103515625e-05, -0.00074005126953125, -0.0001068115234375, -0.0001659393310546875, -6.4849853515625e-05, -6.103515625e-05, -2.09808349609375e-05, -5.91278076171875e-05, -0.008419036865234375, -3.2186455882765586e-06, -0.002082227263599634, -0.0001887042890302837, -0.00011897087097167969, -5.5404767990112305, -0.038079023361206055, -0.00019407151557970792, -1.9073486328125e-06, -0.0011081695556640625, -4.1961669921875e-05, 0.0, -0.0003948211669921875, -4.76837158203125e-05, -0.0005818605422973633, -0.0016809701919555664, -0.02132546901702881, 0.0, -0.0025768280029296875, -2.6702880859375e-05, -0.000240325927734375, -8.58306884765625e-05, -0.012332916259765625, -2.0265579223632812e-06, -4.9591064453125e-05, -1.33514404296875e-05, -0.0001277923583984375, -0.00027501583099365234, 0.0, -9.5367431640625e-06, 0.0, -0.00019359587167855352, 0.0, -3.0517578125e-05, -2.86102294921875e-05, -0.000148773193359375, -0.00018513166287448257, -2.2649765014648438e-06, -0.004336357116699219, -0.00022125244140625, -3.0517578125e-05, -5.7220458984375e-06, -6.67572021484375e-05, -0.00010632896737661213, 0.0, -5.14984130859375e-05, -0.00055694580078125, -3.0517578125e-05, -1.1444091796875e-05, -0.00012731319293379784, -7.152555099310121e-07, -0.0012171268463134766, -5.841198799316771e-05, -2.6702880859375e-05, -0.0023479461669921875, -4.9591064453125e-05, -8.0108642578125e-05, -0.000339508056640625, -0.0003147125244140625, -0.0003843306330963969, -3.814697265625e-06], "score": -5.645161903112239, "model_output": {"hole4": "player", "hole0": "HammerOfWrath", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hammer of of Wrath", "_type": "Str"}, {"_type": "Template63"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of of Wrath', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Hammer", "Of", "Wrath", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-5.340576171875e-05, -0.0001220703125, -6.925819616299123e-05, -0.00020658571156673133, -0.0014205592451617122, -0.0005509853363037109, -4.526693373918533e-06, -7.62939453125e-06, -5.7220458984375e-06, -6.103515625e-05, -0.00074005126953125, -0.0001068115234375, -0.0001659393310546875, -6.4849853515625e-05, -6.103515625e-05, -2.09808349609375e-05, -5.91278076171875e-05, -0.008419036865234375, -3.2186455882765586e-06, -0.002082227263599634, -0.0001887042890302837, -0.00011897087097167969, -0.004147528205066919, -6.103515625e-05, -0.0015516281127929688, -5.340576171875e-05, 0.0, -0.0003910064697265625, -0.000102996826171875, -0.0002537965774536133, -5.9604644775390625e-05, -5.724452018737793, 0.0, -0.002040863037109375, -2.47955322265625e-05, -6.67572021484375e-05, -8.96453857421875e-05, -0.008153438568115234, -1.9073486328125e-06, -3.24249267578125e-05, -9.5367431640625e-06, -0.0001392364501953125, -0.0003285408020019531, 0.0, -1.728534698486328e-05, 0.0, -0.00017333027790300548, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -0.0001430511474609375, -0.00017130353080574423, -2.1457672119140625e-06, -0.004038810729980469, -0.000225067138671875, -3.0517578125e-05, -5.7220458984375e-06, -6.67572021484375e-05, -0.00011348073894623667, 0.0, -4.9591064453125e-05, -0.0005340576171875, -3.0517578125e-05, -1.33514404296875e-05, -0.0001245716994162649, -7.152555099310121e-07, -0.0012115240097045898, -5.721993511542678e-05, -2.6702880859375e-05, -0.0024204254150390625, -5.14984130859375e-05, -7.62939453125e-05, -0.0003299713134765625, -0.0003070831298828125, -0.0003825424937531352, -3.814697265625e-06], "score": -5.767149841509308, "model_output": {"hole4": "player", "hole0": "HammerOfWrath", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hammer of Wrath", "_type": "Str"}, {"_type": "Template63"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Hammer", "Of", "Wrath", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "Player", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-5.340576171875e-05, -0.0001220703125, -6.925819616299123e-05, -0.00020658571156673133, -0.0014205592451617122, -0.0005509853363037109, -4.526693373918533e-06, -7.62939453125e-06, -5.7220458984375e-06, -6.103515625e-05, -0.00074005126953125, -0.0001068115234375, -0.0001659393310546875, -6.4849853515625e-05, -6.103515625e-05, -2.09808349609375e-05, -5.91278076171875e-05, -0.008419036865234375, -3.2186455882765586e-06, -0.002082227263599634, -0.0001887042890302837, -0.00011897087097167969, -0.004147528205066919, -6.103515625e-05, -0.0015516281127929688, -5.340576171875e-05, 0.0, -0.0003910064697265625, -0.000102996826171875, -0.0002537965774536133, -5.9604644775390625e-05, -0.021944880485534668, 0.0, -0.0014095306396484375, -1.9073486328125e-05, -0.0002593994140625, -5.91278076171875e-05, -5.688687324523926, -0.032642364501953125, -0.05525779724121094, -9.5367431640625e-06, -0.001827239990234375, -0.0006461143493652344, 0.0, -9.5367431640625e-06, 0.0, -0.0010938644409179688, 0.0, -3.814697265625e-05, -2.86102294921875e-05, -0.0001506805419921875, -0.00019574131874833256, -2.2649765014648438e-06, -0.0048274993896484375, -0.000209808349609375, -3.24249267578125e-05, -5.7220458984375e-06, -6.67572021484375e-05, -0.00010418343299534172, 0.0, -5.340576171875e-05, -0.0005397796630859375, -3.0517578125e-05, -1.1444091796875e-05, -0.00012516768765635788, -7.152555099310121e-07, -0.0012058019638061523, -5.555099414777942e-05, -2.6702880859375e-05, -0.0023136138916015625, -5.7220458984375e-05, -7.05718994140625e-05, -0.000362396240234375, -0.0002994537353515625, -0.0003813504008576274, -3.933906555175781e-06], "score": -5.836218989481495, "model_output": {"hole4": "player", "hole0": "HammerOfWrath", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "Player", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hammer of Wrath", "_type": "Str"}, {"_type": "Template63"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, Player=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Hammer", "Of", "Wrath", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score_history": [-5.340576171875e-05, -0.0001220703125, -6.925819616299123e-05, -0.00020658571156673133, -0.0014205592451617122, -0.0005509853363037109, -4.526693373918533e-06, -7.62939453125e-06, -5.7220458984375e-06, -6.103515625e-05, -0.00074005126953125, -0.0001068115234375, -0.0001659393310546875, -6.4849853515625e-05, -6.103515625e-05, -2.09808349609375e-05, -5.91278076171875e-05, -0.008419036865234375, -3.2186455882765586e-06, -0.002082227263599634, -0.0001887042890302837, -0.00011897087097167969, -0.004147528205066919, -6.103515625e-05, -0.0015516281127929688, -5.340576171875e-05, 0.0, -0.0003910064697265625, -0.000102996826171875, -0.0002537965774536133, -5.9604644775390625e-05, -0.021944880485534668, 0.0, -0.0014095306396484375, -1.9073486328125e-05, -0.0002593994140625, -5.91278076171875e-05, -0.0035533905029296875, -2.0265579223632812e-06, -2.86102294921875e-05, -7.62939453125e-06, -0.0001049041748046875, -0.00024449825286865234, 0.0, -7.62939453125e-06, 0.0, -0.00019001959299203008, 0.0, -3.24249267578125e-05, -2.6702880859375e-05, -0.000148773193359375, -0.00019454903667792678, -2.384185791015625e-06, -6.529863357543945, -0.0015010833740234375, -0.001178741455078125, -5.14984130859375e-05, -9.34600830078125e-05, -0.0002197975554736331, -5.960462772236497e-07, -0.00018310546875, -0.0009317398071289062, -2.47955322265625e-05, -2.86102294921875e-05, -0.00015508993237745017, -5.960462772236497e-07, -0.0011063814163208008, -2.562992085586302e-05, -7.62939453125e-05], "score": -6.5848300642445565, "model_output": {"hole4": "player", "hole0": "HammerOfWrath", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hammer of Wrath", "_type": "Str"}, {"_type": "Template63"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n"}, {"choice_history": [121, 200, "Hammer", "Of", "Wrath", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-5.340576171875e-05, -0.0001220703125, -6.925819616299123e-05, -0.00020658571156673133, -0.0014205592451617122, -0.0005509853363037109, -4.526693373918533e-06, -7.62939453125e-06, -5.7220458984375e-06, -6.103515625e-05, -0.00074005126953125, -0.0001068115234375, -0.0001659393310546875, -6.4849853515625e-05, -6.103515625e-05, -2.09808349609375e-05, -5.91278076171875e-05, -0.008419036865234375, -3.2186455882765586e-06, -0.002082227263599634, -0.0001887042890302837, -0.00011897087097167969, -0.004147528205066919, -6.103515625e-05, -0.0015516281127929688, -5.340576171875e-05, 0.0, -0.0003910064697265625, -0.000102996826171875, -0.0002537965774536133, -5.9604644775390625e-05, -6.844892501831055, 0.0, -0.0049686431884765625, -1.52587890625e-05, -6.29425048828125e-05, -4.00543212890625e-05, -0.007431745529174805, -1.9073486328125e-06, -4.76837158203125e-05, -7.62939453125e-06, -0.0001049041748046875, -0.00024247169494628906, 0.0, -1.3470649719238281e-05, 0.0, -0.00018656252359505743, 0.0, -2.6702880859375e-05, -2.47955322265625e-05, -0.00014495849609375, -0.000166058394825086, -4.0531158447265625e-06, -0.0036745071411132812, -0.0002307891845703125, -3.0517578125e-05, -5.7220458984375e-06, -6.67572021484375e-05, -0.00011467269359854981, 0.0, -4.9591064453125e-05, -0.0005321502685546875, -3.0517578125e-05, -1.33514404296875e-05, -0.00012314114428590983, -7.152555099310121e-07, -0.0012115240097045898, -5.721993511542678e-05, -2.6702880859375e-05, -0.002437591552734375, -5.14984130859375e-05, -7.43865966796875e-05, -0.0003261566162109375, -0.000301361083984375, -0.0003845690516754985, -3.814697265625e-06], "score": -6.889283334838183, "model_output": {"hole4": "player", "hole0": "HammerOfWrath", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hammer of Wrath", "_type": "Str"}, {"_type": "Template63"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Hammer", "Of", "Wrath", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "other_player", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-5.340576171875e-05, -0.0001220703125, -6.925819616299123e-05, -0.00020658571156673133, -0.0014205592451617122, -0.0005509853363037109, -4.526693373918533e-06, -7.62939453125e-06, -5.7220458984375e-06, -6.103515625e-05, -0.00074005126953125, -0.0001068115234375, -0.0001659393310546875, -6.4849853515625e-05, -6.103515625e-05, -2.09808349609375e-05, -5.91278076171875e-05, -0.008419036865234375, -3.2186455882765586e-06, -0.002082227263599634, -0.0001887042890302837, -0.00011897087097167969, -0.004147528205066919, -6.103515625e-05, -0.0015516281127929688, -5.340576171875e-05, 0.0, -0.0003910064697265625, -0.000102996826171875, -0.0002537965774536133, -5.9604644775390625e-05, -6.861520290374756, 0.0, -0.00827789306640625, -1.33514404296875e-05, -0.0001506805419921875, -7.2479248046875e-05, -0.007457375526428223, -1.9073486328125e-06, -2.86102294921875e-05, -7.62939453125e-06, -0.000171661376953125, -0.00036323070526123047, 0.0, -1.537799835205078e-05, 0.0, -0.00017333027790300548, 0.0, -2.6702880859375e-05, -2.47955322265625e-05, -0.0001506805419921875, -0.0001835819857660681, -2.2649765014648438e-06, -0.0047016143798828125, -0.0002307891845703125, -3.0517578125e-05, -5.7220458984375e-06, -6.67572021484375e-05, -0.00011324233491905034, 0.0, -5.14984130859375e-05, -0.000537872314453125, -3.0517578125e-05, -1.1444091796875e-05, -0.0001226643507834524, -7.152555099310121e-07, -0.0012134313583374023, -5.7577548432163894e-05, -2.6702880859375e-05, -0.00238037109375, -5.14984130859375e-05, -7.82012939453125e-05, -0.000331878662109375, -0.000316619873046875, -0.0003825424937531352, -3.814697265625e-06], "score": -6.910541569808629, "model_output": {"hole4": "player", "hole0": "HammerOfWrath", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hammer of Wrath", "_type": "Str"}, {"_type": "Template63"}, {"attr": "other_player", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.other_player,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Hammer", "Of", "Wrath", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "Draw", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-5.340576171875e-05, -0.0001220703125, -6.925819616299123e-05, -0.00020658571156673133, -0.0014205592451617122, -0.0005509853363037109, -4.526693373918533e-06, -7.62939453125e-06, -5.7220458984375e-06, -6.103515625e-05, -0.00074005126953125, -0.0001068115234375, -0.0001659393310546875, -6.4849853515625e-05, -6.103515625e-05, -2.09808349609375e-05, -5.91278076171875e-05, -0.008419036865234375, -3.2186455882765586e-06, -0.002082227263599634, -0.0001887042890302837, -0.00011897087097167969, -0.004147528205066919, -6.103515625e-05, -0.0015516281127929688, -5.340576171875e-05, 0.0, -0.0003910064697265625, -0.000102996826171875, -0.0002537965774536133, -5.9604644775390625e-05, -0.021944880485534668, 0.0, -0.0014095306396484375, -1.9073486328125e-05, -0.0002593994140625, -5.91278076171875e-05, -0.0035533905029296875, -2.0265579223632812e-06, -2.86102294921875e-05, -7.62939453125e-06, -0.0001049041748046875, -0.00024449825286865234, 0.0, -7.62939453125e-06, 0.0, -0.00019001959299203008, 0.0, -3.24249267578125e-05, -2.6702880859375e-05, -0.000148773193359375, -0.00019454903667792678, -2.384185791015625e-06, -0.005333900451660156, -0.0002231597900390625, -3.0517578125e-05, -5.7220458984375e-06, -6.866455078125e-05, -0.00010835530702024698, 0.0, -5.14984130859375e-05, -0.000545501708984375, -3.0517578125e-05, -1.1444091796875e-05, -0.00012457156844902784, -7.152555099310121e-07, -6.877844333648682, -4.8040277761174366e-05, -7.82012939453125e-05, -0.0014553070068359375, -0.0012569427490234375, -1.71661376953125e-05, -0.00031280517578125, -0.0002536773681640625, -0.0004390474350657314, -3.933906555175781e-06], "score": -6.937633310813908, "model_output": {"hole4": "player", "hole0": "HammerOfWrath", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hammer of Wrath", "_type": "Str"}, {"_type": "Template63"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(0), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Hammer", "Of", "Wrath", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "use", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-5.340576171875e-05, -0.0001220703125, -6.925819616299123e-05, -0.00020658571156673133, -0.0014205592451617122, -0.0005509853363037109, -4.526693373918533e-06, -7.62939453125e-06, -5.7220458984375e-06, -6.103515625e-05, -0.00074005126953125, -0.0001068115234375, -0.0001659393310546875, -6.4849853515625e-05, -6.103515625e-05, -2.09808349609375e-05, -5.91278076171875e-05, -0.008419036865234375, -3.2186455882765586e-06, -0.002082227263599634, -0.0001887042890302837, -0.00011897087097167969, -0.004147528205066919, -6.103515625e-05, -0.0015516281127929688, -5.340576171875e-05, 0.0, -0.0003910064697265625, -0.000102996826171875, -0.0002537965774536133, -5.9604644775390625e-05, -6.958735942840576, 0.0, -0.003292083740234375, -7.62939453125e-06, -5.7220458984375e-05, -2.288818359375e-05, -0.011240601539611816, -1.9073486328125e-06, -2.47955322265625e-05, -7.62939453125e-06, -0.0001087188720703125, -0.00024831295013427734, 0.0, -9.5367431640625e-06, 0.0, -0.00018823145364876837, 0.0, -3.0517578125e-05, -2.6702880859375e-05, -0.0001468658447265625, -0.00018393959908280522, -2.2649765014648438e-06, -0.0046710968017578125, -0.0002346038818359375, -3.0517578125e-05, -5.7220458984375e-06, -6.866455078125e-05, -0.00011467267904663458, 0.0, -5.14984130859375e-05, -0.0005397796630859375, -3.0517578125e-05, -1.1444091796875e-05, -0.00012326033902354538, -7.152555099310121e-07, -0.0012133121490478516, -5.793516538687982e-05, -2.6702880859375e-05, -0.0023555755615234375, -5.14984130859375e-05, -7.82012939453125e-05, -0.000335693359375, -0.000316619873046875, -0.0003824232844635844, -3.814697265625e-06], "score": -7.006193792205522, "model_output": {"hole4": "player", "hole0": "HammerOfWrath", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hammer of Wrath", "_type": "Str"}, {"_type": "Template63"}, {"attr": "use", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.use,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Hammer", "Of", "The", "Wrath", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-5.340576171875e-05, -0.0001220703125, -6.925819616299123e-05, -0.00020658571156673133, -6.73716402053833, -0.0012397672981023788, -0.0006438493728637695, -4.17075352743268e-06, -5.7220458984375e-06, -3.814697265625e-06, -3.4332275390625e-05, -0.0005970001220703125, -0.0001010894775390625, -0.0001697540283203125, -5.91278076171875e-05, -6.103515625e-05, -2.09808349609375e-05, -8.20159912109375e-05, -0.0074481964111328125, -2.622600959512056e-06, -0.0020679226145148277, -0.00018810995970852673, -0.0001074075698852539, -0.2973783016204834, -0.0074787139892578125, -0.0017156600952148438, -4.57763671875e-05, 0.0, -0.0001926422119140625, -0.0001811981201171875, -0.00017368793487548828, -2.9206275939941406e-05, -0.022743582725524902, 0.0, -0.0014629364013671875, -2.09808349609375e-05, -0.000293731689453125, -5.14984130859375e-05, -0.0023870468139648438, -2.0265579223632812e-06, -2.47955322265625e-05, -7.62939453125e-06, -9.918212890625e-05, -0.00024259090423583984, 0.0, -7.62939453125e-06, 0.0, -0.00018811224435921758, 0.0, -3.24249267578125e-05, -2.6702880859375e-05, -0.000148773193359375, -0.00020229749497957528, -2.384185791015625e-06, -0.0058460235595703125, -0.000217437744140625, -3.24249267578125e-05, -5.7220458984375e-06, -6.866455078125e-05, -0.0001077593260561116, 0.0, -5.14984130859375e-05, -0.0005435943603515625, -3.0517578125e-05, -1.1444091796875e-05, -0.00012421395513229072, -7.152555099310121e-07, -0.001215219497680664, -5.841198799316771e-05, -2.47955322265625e-05, -0.00229644775390625, -4.9591064453125e-05, -8.0108642578125e-05, -0.00034332275390625, -0.0003261566162109375, -0.0003824232844635844, -3.814697265625e-06], "score": -7.097412079507194, "model_output": {"hole4": "player", "hole0": "HammerOfTheWrath", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hammer of Wrath", "_type": "Str"}, {"_type": "Template63"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HammerOfTheWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Hammer", "Of", "Wrath", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "current_player", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-5.340576171875e-05, -0.0001220703125, -6.925819616299123e-05, -0.00020658571156673133, -0.0014205592451617122, -0.0005509853363037109, -4.526693373918533e-06, -7.62939453125e-06, -5.7220458984375e-06, -6.103515625e-05, -0.00074005126953125, -0.0001068115234375, -0.0001659393310546875, -6.4849853515625e-05, -6.103515625e-05, -2.09808349609375e-05, -5.91278076171875e-05, -0.008419036865234375, -3.2186455882765586e-06, -0.002082227263599634, -0.0001887042890302837, -0.00011897087097167969, -0.004147528205066919, -6.103515625e-05, -0.0015516281127929688, -5.340576171875e-05, 0.0, -0.0003910064697265625, -0.000102996826171875, -0.0002537965774536133, -5.9604644775390625e-05, -7.3918280601501465, -3.62396240234375e-05, -0.00215911865234375, -1.1444091796875e-05, -0.0001506805419921875, -9.1552734375e-05, -0.005407214164733887, -1.9073486328125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -0.0001316070556640625, -0.00026738643646240234, 0.0, -1.728534698486328e-05, 0.0, -0.0001745223707985133, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -0.000148773193359375, -0.00017261484754271805, -2.1457672119140625e-06, -0.004047393798828125, -0.000225067138671875, -3.0517578125e-05, -5.7220458984375e-06, -6.67572021484375e-05, -0.00011336154420860112, 0.0, -4.9591064453125e-05, -0.0005340576171875, -3.0517578125e-05, -1.1444091796875e-05, -0.00012218754272907972, -7.152555099310121e-07, -0.0012133121490478516, -5.7339137129019946e-05, -2.6702880859375e-05, -0.002414703369140625, -5.14984130859375e-05, -7.62939453125e-05, -0.000331878662109375, -0.0003070831298828125, -0.0003825424937531352, -3.814697265625e-06], "score": -7.431940710319395, "model_output": {"hole4": "player", "hole0": "HammerOfWrath", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hammer of Wrath", "_type": "Str"}, {"_type": "Template63"}, {"attr": "current_player", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.\n            current_player, CARD_RARITY.FREE, target_func=hearthbreaker.\n            targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Hammer", "Of", "Wrath", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Hammer", " ", "of", " ", "Wrath", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-5.340576171875e-05, -0.0001220703125, -6.925819616299123e-05, -0.00020658571156673133, -0.0014205592451617122, -0.0005509853363037109, -4.526693373918533e-06, -7.62939453125e-06, -5.7220458984375e-06, -6.103515625e-05, -7.335577964782715, -0.0002117156982421875, -7.152555099310121e-07, -0.0001087188720703125, -0.00015556735161226243, -8.96453857421875e-05, -0.0005013942718505859, -2.86102294921875e-05, -0.0001250456552952528, 0.0, -0.1785297393798828, -3.814697265625e-06, -0.002144455909729004, -3.814697265625e-06, -2.5987625122070312e-05, 0.0, -0.00019275987870059907, 0.0, -7.62939453125e-06, -5.7220458984375e-05, -1.33514404296875e-05, -8.833168249111623e-05, -1.9431114196777344e-05, -0.0022344589233398438, -0.0010776519775390625, -0.0074367523193359375, -1.9073486328125e-06, -0.00357818603515625, -2.8729014957207255e-05, -3.576278118089249e-07, -1.9073486328125e-05, -0.0018863677978515625, -3.814697265625e-05, -1.52587890625e-05, -0.00023245590273290873, -5.960462772236497e-07, -0.0016204118728637695, -4.637209349311888e-05, -3.4332275390625e-05, -0.0018787384033203125, -3.814697265625e-05, -6.103515625e-05, -0.0005950927734375, -0.000274658203125, -0.00044774997513741255, -3.933906555175781e-06], "score": -7.541938105508507, "model_output": {"hole4": "player", "hole0": "HammerOfWrath", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole1": 4, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Hammer of Wrath"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Hammer", "Of", "Wrath", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "3", "<EOS>", 110], "score_history": [-5.340576171875e-05, -0.0001220703125, -6.925819616299123e-05, -0.00020658571156673133, -0.0014205592451617122, -0.0005509853363037109, -4.526693373918533e-06, -7.62939453125e-06, -5.7220458984375e-06, -6.103515625e-05, -0.00074005126953125, -0.0001068115234375, -0.0001659393310546875, -6.4849853515625e-05, -6.103515625e-05, -2.09808349609375e-05, -5.91278076171875e-05, -0.008419036865234375, -3.2186455882765586e-06, -0.002082227263599634, -0.0001887042890302837, -0.00011897087097167969, -0.004147528205066919, -6.103515625e-05, -0.0015516281127929688, -5.340576171875e-05, 0.0, -0.0003910064697265625, -0.000102996826171875, -0.0002537965774536133, -5.9604644775390625e-05, -0.021944880485534668, 0.0, -0.0014095306396484375, -1.9073486328125e-05, -0.0002593994140625, -5.91278076171875e-05, -0.0035533905029296875, -2.0265579223632812e-06, -2.86102294921875e-05, -7.62939453125e-06, -0.0001049041748046875, -0.00024449825286865234, 0.0, -7.62939453125e-06, 0.0, -0.00019001959299203008, 0.0, -3.24249267578125e-05, -2.6702880859375e-05, -0.000148773193359375, -0.00019454903667792678, -2.384185791015625e-06, -0.005333900451660156, -0.0002231597900390625, -3.0517578125e-05, -5.7220458984375e-06, -6.866455078125e-05, -0.00010835530702024698, 0.0, -5.14984130859375e-05, -0.000545501708984375, -3.0517578125e-05, -1.1444091796875e-05, -0.00012457156844902784, -7.152555099310121e-07, -0.001215219497680664, -5.829278234159574e-05, -2.6702880859375e-05, -6.4581451416015625, -5.14984130859375e-05, -0.47542381286621094, -7.62939453125e-06, -0.0002651214599609375, -0.0405646413564682, -2.3841855067985307e-07, -0.6994106769561768, 0.0, -0.0001125335693359375, -0.0015859603881835938, -0.000244140625, -5.7220458984375e-06, -0.1247473955154419, -2.4199236577260308e-05, -0.000588536262512207, -0.0001620029506739229, -9.1552734375e-05], "score": -7.858654874769826, "model_output": {"hole4": "player", "hole0": "HammerOfWrath", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hammer of Wrath", "_type": "Str"}, {"_type": "Template63"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.hero.heal(player.effective_heal_power(3), self)\n"}], "index": 44}
{"beams": [{"choice_history": [121, 200, "Hand", "Of", "Protection", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hand", " ", "of", " ", "Protection", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 126, 155, 320, 65, 156, 41, "divine_shield", "<EOS>", 62], "score_history": [-0.0007343292236328125, -0.0001277923583984375, -0.00012194366718176752, -0.0003550850669853389, -9.476689592702314e-05, -3.2543870474910364e-05, -8.700677426531911e-06, -9.655952453613281e-06, -1.9073486328125e-06, -7.2479248046875e-05, -0.0002193450927734375, -1.33514404296875e-05, -6.67572021484375e-05, -0.000255584716796875, -6.866455078125e-05, -6.67572021484375e-05, -0.0001049041748046875, -0.002040863037109375, -2.861018856492592e-06, -0.004970229230821133, -0.000992536311969161, -0.00015604496002197266, -0.001084321876987815, -0.00013554096221923828, -0.0001773834228515625, -0.0003871917724609375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -6.341921834973618e-05, 0.0, -0.0066189696080982685, -1.9073486328125e-06, -3.24249267578125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.00054931640625, -1.9073486328125e-06, -0.0057239532470703125, -1.71661376953125e-05, 0.0, -0.00011002915562130511, 0.0, -9.5367431640625e-06, -0.0012664794921875, -2.86102294921875e-05, -7.629387982888147e-05, -5.91278076171875e-05, -0.0008754730224609375, -0.0002593994140625, -0.5190868377685547, -9.5367431640625e-06, -1.9073486328125e-05, -0.0071868896484375, -0.0009307861328125, -0.000377655029296875, -0.019262194633483887, -2.7060459615313448e-05, -0.0006084442138671875], "score": -0.5756470845312833, "model_output": {"hole4": "player", "hole0": "HandOfProtection", "hole6": [{"_type": "Template19"}, {"value": {"_type": "Template79"}, "targets": [{"attr": "divine_shield", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hand of Protection", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.divine_shield = True\n"}, {"choice_history": [121, 200, "Hand", "Of", "Protection", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hand", " ", "of", " ", "Protection", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "score_history": [-0.0007343292236328125, -0.0001277923583984375, -0.00012194366718176752, -0.0003550850669853389, -9.476689592702314e-05, -3.2543870474910364e-05, -8.700677426531911e-06, -9.655952453613281e-06, -1.9073486328125e-06, -7.2479248046875e-05, -0.0002193450927734375, -1.33514404296875e-05, -6.67572021484375e-05, -0.000255584716796875, -6.866455078125e-05, -6.67572021484375e-05, -0.0001049041748046875, -0.002040863037109375, -2.861018856492592e-06, -0.004970229230821133, -0.000992536311969161, -0.00015604496002197266, -0.001084321876987815, -0.00013554096221923828, -0.0001773834228515625, -0.0003871917724609375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -6.341921834973618e-05, 0.0, -0.0066189696080982685, -1.9073486328125e-06, -3.24249267578125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.00054931640625, -1.9073486328125e-06, -0.0057239532470703125, -1.71661376953125e-05, 0.0, -0.00011002915562130511, 0.0, -9.5367431640625e-06, -0.0012664794921875, -2.86102294921875e-05, -7.629387982888147e-05, -5.91278076171875e-05, -0.0008754730224609375, -0.0002593994140625, -1.1816930770874023, -0.0003261566162109375, -0.0002307891845703125, -0.17614266276359558, -8.535334200132638e-05, -0.0002460479736328125, -0.03623485565185547, -0.0041217803955078125, -0.010309219360351562, -7.62939453125e-06, -0.000469207763671875, -0.018724791705608368, -5.61460001335945e-05, -9.5367431640625e-06, -0.024621963500976562, -0.0048828125, -0.03932952880859375, -0.47777414321899414, -1.9073486328125e-06, -0.006206512451171875], "score": -2.0096127282263296, "model_output": {"hole4": "player", "hole0": "HandOfProtection", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hand of Protection", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n"}, {"choice_history": [121, 200, "Hand", "Of", "Protection", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hand", " ", "of", " ", "Protection", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110], "score_history": [-0.0007343292236328125, -0.0001277923583984375, -0.00012194366718176752, -0.0003550850669853389, -9.476689592702314e-05, -3.2543870474910364e-05, -8.700677426531911e-06, -9.655952453613281e-06, -1.9073486328125e-06, -7.2479248046875e-05, -0.0002193450927734375, -1.33514404296875e-05, -6.67572021484375e-05, -0.000255584716796875, -6.866455078125e-05, -6.67572021484375e-05, -0.0001049041748046875, -0.002040863037109375, -2.861018856492592e-06, -0.004970229230821133, -0.000992536311969161, -0.00015604496002197266, -0.001084321876987815, -0.00013554096221923828, -0.0001773834228515625, -0.0003871917724609375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -6.341921834973618e-05, 0.0, -0.0066189696080982685, -1.9073486328125e-06, -3.24249267578125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.00054931640625, -1.9073486328125e-06, -0.0057239532470703125, -1.71661376953125e-05, 0.0, -0.00011002915562130511, 0.0, -9.5367431640625e-06, -0.0012664794921875, -2.86102294921875e-05, -7.629387982888147e-05, -5.91278076171875e-05, -0.0008754730224609375, -0.0002593994140625, -1.1816930770874023, -0.0003261566162109375, -0.0002307891845703125, -0.17614266276359558, -8.535334200132638e-05, -0.0002460479736328125, -0.03623485565185547, -0.0041217803955078125, -0.010309219360351562, -7.62939453125e-06, -0.000469207763671875, -0.018724791705608368, -5.61460001335945e-05, -9.5367431640625e-06, -0.024621963500976562, -0.0048828125, -0.03932952880859375, -2.0493693351745605, 0.0, -0.009495735168457031], "score": -3.5844952355505484, "model_output": {"hole4": "player", "hole0": "HandOfProtection", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hand of Protection", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_attack()), self)\n"}, {"choice_history": [121, 200, "Hand", "Of", "Protection", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hand", " ", "of", " ", "Protection", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "Minion", "<EOS>", 110], "score_history": [-0.0007343292236328125, -0.0001277923583984375, -0.00012194366718176752, -0.0003550850669853389, -9.476689592702314e-05, -3.2543870474910364e-05, -8.700677426531911e-06, -9.655952453613281e-06, -1.9073486328125e-06, -7.2479248046875e-05, -0.0002193450927734375, -1.33514404296875e-05, -6.67572021484375e-05, -0.000255584716796875, -6.866455078125e-05, -6.67572021484375e-05, -0.0001049041748046875, -0.002040863037109375, -2.861018856492592e-06, -0.004970229230821133, -0.000992536311969161, -0.00015604496002197266, -0.001084321876987815, -0.00013554096221923828, -0.0001773834228515625, -0.0003871917724609375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -6.341921834973618e-05, 0.0, -0.0066189696080982685, -1.9073486328125e-06, -3.24249267578125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.00054931640625, -1.9073486328125e-06, -0.0057239532470703125, -1.71661376953125e-05, 0.0, -0.00011002915562130511, 0.0, -9.5367431640625e-06, -0.0012664794921875, -2.86102294921875e-05, -7.629387982888147e-05, -5.91278076171875e-05, -0.0008754730224609375, -0.0002593994140625, -1.1816930770874023, -0.0003261566162109375, -0.0002307891845703125, -0.17614266276359558, -8.535334200132638e-05, -0.0002460479736328125, -0.03623485565185547, -0.0041217803955078125, -0.010309219360351562, -7.62939453125e-06, -0.000469207763671875, -0.018724791705608368, -5.61460001335945e-05, -9.5367431640625e-06, -0.024621963500976562, -0.0048828125, -0.03932952880859375, -1.962510585784912, -0.02041339874267578, -0.3018827438354492], "score": -3.810436893570568, "model_output": {"hole4": "player", "hole0": "HandOfProtection", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "Minion", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hand of Protection", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.Minion()),\n            self)\n"}, {"choice_history": [121, 200, "Hand", "Of", "Protection", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hand", " ", "of", " ", "Protection", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "Divine", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "score_history": [-0.0007343292236328125, -0.0001277923583984375, -0.00012194366718176752, -0.0003550850669853389, -9.476689592702314e-05, -3.2543870474910364e-05, -8.700677426531911e-06, -9.655952453613281e-06, -1.9073486328125e-06, -7.2479248046875e-05, -0.0002193450927734375, -1.33514404296875e-05, -6.67572021484375e-05, -0.000255584716796875, -6.866455078125e-05, -6.67572021484375e-05, -0.0001049041748046875, -0.002040863037109375, -2.861018856492592e-06, -0.004970229230821133, -0.000992536311969161, -0.00015604496002197266, -0.001084321876987815, -0.00013554096221923828, -0.0001773834228515625, -0.0003871917724609375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -6.341921834973618e-05, 0.0, -0.0066189696080982685, -1.9073486328125e-06, -3.24249267578125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.00054931640625, -1.9073486328125e-06, -0.0057239532470703125, -1.71661376953125e-05, 0.0, -0.00011002915562130511, 0.0, -9.5367431640625e-06, -0.0012664794921875, -2.86102294921875e-05, -7.629387982888147e-05, -5.91278076171875e-05, -0.0008754730224609375, -0.0002593994140625, -1.1816930770874023, -0.0003261566162109375, -0.0002307891845703125, -1.9387294054031372, -0.3205130994319916, -0.029946327209472656, -0.08520126342773438, -0.0030670166015625, -0.03681659698486328, -3.814697265625e-06, -0.0018520355224609375, -0.01736530289053917, -5.972207145532593e-05, -9.5367431640625e-06, -0.02587127685546875, -0.0058422088623046875, -0.023542404174804688, -0.37880682945251465, -1.9073486328125e-06, -0.015685081481933594], "score": -4.093702458463213, "model_output": {"hole4": "player", "hole0": "HandOfProtection", "hole6": [{"_type": "Template19"}, {"hole1": "Divine", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hand of Protection", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.Divine(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n"}, {"choice_history": [121, 200, "Hand", "Of", "Protection", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hand", " ", "of", " ", "Protection", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "1", "<EOS>", 110], "score_history": [-0.0007343292236328125, -0.0001277923583984375, -0.00012194366718176752, -0.0003550850669853389, -9.476689592702314e-05, -3.2543870474910364e-05, -8.700677426531911e-06, -9.655952453613281e-06, -1.9073486328125e-06, -7.2479248046875e-05, -0.0002193450927734375, -1.33514404296875e-05, -6.67572021484375e-05, -0.000255584716796875, -6.866455078125e-05, -6.67572021484375e-05, -0.0001049041748046875, -0.002040863037109375, -2.861018856492592e-06, -0.004970229230821133, -0.000992536311969161, -0.00015604496002197266, -0.001084321876987815, -0.00013554096221923828, -0.0001773834228515625, -0.0003871917724609375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -6.341921834973618e-05, 0.0, -0.0066189696080982685, -1.9073486328125e-06, -3.24249267578125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.00054931640625, -1.9073486328125e-06, -0.0057239532470703125, -1.71661376953125e-05, 0.0, -0.00011002915562130511, 0.0, -9.5367431640625e-06, -0.0012664794921875, -2.86102294921875e-05, -7.629387982888147e-05, -5.91278076171875e-05, -0.0008754730224609375, -0.0002593994140625, -1.1816930770874023, -0.0003261566162109375, -0.0002307891845703125, -0.17614266276359558, -8.535334200132638e-05, -0.0002460479736328125, -3.6611881256103516, -5.14984130859375e-05, -0.000270843505859375, -0.022763943299651146, -2.384175604674965e-05, -0.010429619811475277, -2.0265579223632812e-06, -0.012600898742675781], "score": -5.094193491080205, "model_output": {"hole4": "player", "hole0": "HandOfProtection", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hand of Protection", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(1), self)\n"}, {"choice_history": [121, 200, "Hand", "Of", "Protection", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hand", " ", "of", " ", "Protection", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "change_attack", "change_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.0007343292236328125, -0.0001277923583984375, -0.00012194366718176752, -0.0003550850669853389, -9.476689592702314e-05, -3.2543870474910364e-05, -8.700677426531911e-06, -9.655952453613281e-06, -1.9073486328125e-06, -7.2479248046875e-05, -0.0002193450927734375, -1.33514404296875e-05, -6.67572021484375e-05, -0.000255584716796875, -6.866455078125e-05, -6.67572021484375e-05, -0.0001049041748046875, -0.002040863037109375, -2.861018856492592e-06, -0.004970229230821133, -0.000992536311969161, -0.00015604496002197266, -0.001084321876987815, -0.00013554096221923828, -0.0001773834228515625, -0.0003871917724609375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -6.341921834973618e-05, 0.0, -0.0066189696080982685, -1.9073486328125e-06, -3.24249267578125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.00054931640625, -1.9073486328125e-06, -0.0057239532470703125, -1.71661376953125e-05, 0.0, -0.00011002915562130511, 0.0, -9.5367431640625e-06, -0.0012664794921875, -2.86102294921875e-05, -7.629387982888147e-05, -5.91278076171875e-05, -0.0008754730224609375, -0.0002593994140625, -3.7448997497558594, -0.0021228790283203125, -0.0006046295166015625, -0.0075550079345703125, -0.000186920166015625, -0.016974685713648796, -1.549502968788147, -0.011180877685546875, -0.13644027709960938, -9.5367431640625e-06], "score": -5.4976161388472065, "model_output": {"hole4": "player", "hole0": "HandOfProtection", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attackchange_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hand of Protection", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attackchange_attack(3)\n"}, {"choice_history": [121, 200, "Hand", "Of", "Protection", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hand", " ", "of", " ", "Protection", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "3", "<EOS>"], "score_history": [-0.0007343292236328125, -0.0001277923583984375, -0.00012194366718176752, -0.0003550850669853389, -9.476689592702314e-05, -3.2543870474910364e-05, -8.700677426531911e-06, -9.655952453613281e-06, -1.9073486328125e-06, -7.2479248046875e-05, -0.0002193450927734375, -1.33514404296875e-05, -6.67572021484375e-05, -0.000255584716796875, -6.866455078125e-05, -6.67572021484375e-05, -0.0001049041748046875, -0.002040863037109375, -2.861018856492592e-06, -0.004970229230821133, -0.000992536311969161, -0.00015604496002197266, -0.001084321876987815, -0.00013554096221923828, -0.0001773834228515625, -0.0003871917724609375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -6.341921834973618e-05, 0.0, -0.0066189696080982685, -1.9073486328125e-06, -3.24249267578125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.00054931640625, -1.9073486328125e-06, -0.0057239532470703125, -1.71661376953125e-05, 0.0, -0.00011002915562130511, 0.0, -9.5367431640625e-06, -0.0012664794921875, -2.86102294921875e-05, -7.629387982888147e-05, -5.91278076171875e-05, -0.0008754730224609375, -0.0002593994140625, -3.7448997497558594, -0.0021228790283203125, -0.0006046295166015625, -0.0075550079345703125, -0.000186920166015625, -0.016974685713648796, -1.6015545129776, -0.17836764454841614, -3.0517578125e-05], "score": -5.58043515363488, "model_output": {"hole4": "player", "hole0": "HandOfProtection", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hand of Protection", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n"}, {"choice_history": [121, 200, "Hand", "Of", "Protection", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hand", " ", "of", " ", "Protection", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 126, 155, 320, 65, 156, 41, "taunt", "<EOS>", 62], "score_history": [-0.0007343292236328125, -0.0001277923583984375, -0.00012194366718176752, -0.0003550850669853389, -9.476689592702314e-05, -3.2543870474910364e-05, -8.700677426531911e-06, -9.655952453613281e-06, -1.9073486328125e-06, -7.2479248046875e-05, -0.0002193450927734375, -1.33514404296875e-05, -6.67572021484375e-05, -0.000255584716796875, -6.866455078125e-05, -6.67572021484375e-05, -0.0001049041748046875, -0.002040863037109375, -2.861018856492592e-06, -0.004970229230821133, -0.000992536311969161, -0.00015604496002197266, -0.001084321876987815, -0.00013554096221923828, -0.0001773834228515625, -0.0003871917724609375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -6.341921834973618e-05, 0.0, -0.0066189696080982685, -1.9073486328125e-06, -3.24249267578125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.00054931640625, -1.9073486328125e-06, -0.0057239532470703125, -1.71661376953125e-05, 0.0, -0.00011002915562130511, 0.0, -9.5367431640625e-06, -0.0012664794921875, -2.86102294921875e-05, -7.629387982888147e-05, -5.91278076171875e-05, -0.0008754730224609375, -0.0002593994140625, -0.5190868377685547, -9.5367431640625e-06, -1.9073486328125e-05, -0.0071868896484375, -0.0009307861328125, -0.000377655029296875, -5.140939235687256, 0.0, -0.0052433013916015625], "score": -5.701931922303174, "model_output": {"hole4": "player", "hole0": "HandOfProtection", "hole6": [{"_type": "Template19"}, {"value": {"_type": "Template79"}, "targets": [{"attr": "taunt", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hand of Protection", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.taunt = True\n"}, {"choice_history": [121, 200, "Hand", "Of", "Protection", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hand", " ", "of", " ", "Protection", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "change_attack", " ", "Shield", "<EOS>", "1", "<EOS>"], "score_history": [-0.0007343292236328125, -0.0001277923583984375, -0.00012194366718176752, -0.0003550850669853389, -9.476689592702314e-05, -3.2543870474910364e-05, -8.700677426531911e-06, -9.655952453613281e-06, -1.9073486328125e-06, -7.2479248046875e-05, -0.0002193450927734375, -1.33514404296875e-05, -6.67572021484375e-05, -0.000255584716796875, -6.866455078125e-05, -6.67572021484375e-05, -0.0001049041748046875, -0.002040863037109375, -2.861018856492592e-06, -0.004970229230821133, -0.000992536311969161, -0.00015604496002197266, -0.001084321876987815, -0.00013554096221923828, -0.0001773834228515625, -0.0003871917724609375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -6.341921834973618e-05, 0.0, -0.0066189696080982685, -1.9073486328125e-06, -3.24249267578125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.00054931640625, -1.9073486328125e-06, -0.0057239532470703125, -1.71661376953125e-05, 0.0, -0.00011002915562130511, 0.0, -9.5367431640625e-06, -0.0012664794921875, -2.86102294921875e-05, -7.629387982888147e-05, -5.91278076171875e-05, -0.0008754730224609375, -0.0002593994140625, -3.7448997497558594, -0.0021228790283203125, -0.0006046295166015625, -0.0075550079345703125, -0.000186920166015625, -0.016974685713648796, -1.8842989206314087, -0.20264437794685364, -7.62939453125e-06, -0.046052347868680954, 0.0], "score": -5.933485754372214, "model_output": {"hole4": "player", "hole0": "HandOfProtection", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack Shield", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hand of Protection", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack Shield(1)\n"}, {"choice_history": [121, 200, "Hand", "Of", "Protection", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hand", " ", "of", " ", "Protection", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "Divine", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-0.0007343292236328125, -0.0001277923583984375, -0.00012194366718176752, -0.0003550850669853389, -9.476689592702314e-05, -3.2543870474910364e-05, -8.700677426531911e-06, -9.655952453613281e-06, -1.9073486328125e-06, -7.2479248046875e-05, -0.0002193450927734375, -1.33514404296875e-05, -6.67572021484375e-05, -0.000255584716796875, -6.866455078125e-05, -6.67572021484375e-05, -0.0001049041748046875, -0.002040863037109375, -2.861018856492592e-06, -0.004970229230821133, -0.000992536311969161, -0.00015604496002197266, -0.001084321876987815, -0.00013554096221923828, -0.0001773834228515625, -0.0003871917724609375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -6.341921834973618e-05, 0.0, -0.0066189696080982685, -1.9073486328125e-06, -3.24249267578125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.00054931640625, -1.9073486328125e-06, -0.0057239532470703125, -1.71661376953125e-05, 0.0, -0.00011002915562130511, 0.0, -9.5367431640625e-06, -0.0012664794921875, -2.86102294921875e-05, -7.629387982888147e-05, -5.91278076171875e-05, -0.0008754730224609375, -0.0002593994140625, -1.1816930770874023, -0.0003261566162109375, -0.0002307891845703125, -1.9387294054031372, -0.3205130994319916, -0.029946327209472656, -2.605269432067871, -2.288818359375e-05, -0.0003986358642578125, -0.24236486852169037, -3.755035868380219e-05, -0.004297850653529167, -1.9073486328125e-06, -0.006916999816894531], "score": -6.358887594163662, "model_output": {"hole4": "player", "hole0": "HandOfProtection", "hole6": [{"_type": "Template19"}, {"hole1": "Divine", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hand of Protection", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.Divine(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Hand", "Of", "Protection", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hand", " ", "of", " ", "Protection", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 126, 155, 320, 65, 156, 41, "player", "<EOS>", 39, 255, "Both", "Player", "<EOS>"], "score_history": [-0.0007343292236328125, -0.0001277923583984375, -0.00012194366718176752, -0.0003550850669853389, -9.476689592702314e-05, -3.2543870474910364e-05, -8.700677426531911e-06, -9.655952453613281e-06, -1.9073486328125e-06, -7.2479248046875e-05, -0.0002193450927734375, -1.33514404296875e-05, -6.67572021484375e-05, -0.000255584716796875, -6.866455078125e-05, -6.67572021484375e-05, -0.0001049041748046875, -0.002040863037109375, -2.861018856492592e-06, -0.004970229230821133, -0.000992536311969161, -0.00015604496002197266, -0.001084321876987815, -0.00013554096221923828, -0.0001773834228515625, -0.0003871917724609375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -6.341921834973618e-05, 0.0, -0.0066189696080982685, -1.9073486328125e-06, -3.24249267578125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.00054931640625, -1.9073486328125e-06, -0.0057239532470703125, -1.71661376953125e-05, 0.0, -0.00011002915562130511, 0.0, -9.5367431640625e-06, -0.0012664794921875, -2.86102294921875e-05, -7.629387982888147e-05, -5.91278076171875e-05, -0.0008754730224609375, -0.0002593994140625, -0.5190868377685547, -9.5367431640625e-06, -1.9073486328125e-05, -0.0071868896484375, -0.0009307861328125, -0.000377655029296875, -5.210948467254639, -4.768370445162873e-07, -0.47290611267089844, -0.000606536865234375, -0.3889888823032379, -0.0072652180679142475, -5.197517748456448e-05], "score": -6.63651705440077, "model_output": {"hole4": "player", "hole0": "HandOfProtection", "hole6": [{"_type": "Template19"}, {"value": {"_type": "Template46", "hole0": "BothPlayer"}, "targets": [{"attr": "player", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hand of Protection", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.player = BothPlayer()\n"}, {"choice_history": [121, 200, "Hand", "Of", "Protection", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hand", " ", "of", " ", "Protection", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "change_attack", "Amount", "<EOS>", "3", "<EOS>"], "score_history": [-0.0007343292236328125, -0.0001277923583984375, -0.00012194366718176752, -0.0003550850669853389, -9.476689592702314e-05, -3.2543870474910364e-05, -8.700677426531911e-06, -9.655952453613281e-06, -1.9073486328125e-06, -7.2479248046875e-05, -0.0002193450927734375, -1.33514404296875e-05, -6.67572021484375e-05, -0.000255584716796875, -6.866455078125e-05, -6.67572021484375e-05, -0.0001049041748046875, -0.002040863037109375, -2.861018856492592e-06, -0.004970229230821133, -0.000992536311969161, -0.00015604496002197266, -0.001084321876987815, -0.00013554096221923828, -0.0001773834228515625, -0.0003871917724609375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -6.341921834973618e-05, 0.0, -0.0066189696080982685, -1.9073486328125e-06, -3.24249267578125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.00054931640625, -1.9073486328125e-06, -0.0057239532470703125, -1.71661376953125e-05, 0.0, -0.00011002915562130511, 0.0, -9.5367431640625e-06, -0.0012664794921875, -2.86102294921875e-05, -7.629387982888147e-05, -5.91278076171875e-05, -0.0008754730224609375, -0.0002593994140625, -3.7448997497558594, -0.0021228790283203125, -0.0006046295166015625, -0.0075550079345703125, -0.000186920166015625, -0.016974685713648796, -2.409369945526123, -0.001904606819152832, -0.5164362192153931, -7.62939453125e-06], "score": -6.728200879485939, "model_output": {"hole4": "player", "hole0": "HandOfProtection", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attackAmount", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hand of Protection", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attackAmount(3)\n"}, {"choice_history": [121, 200, "Hand", "Of", "Protection", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hand", " ", "of", " ", "Protection", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 134, 175, "hearthbreaker.cards.minions.druid", "<EOS>", 311, 306, "Hand", "Treant", "<EOS>", "0", "<EOS>"], "score_history": [-0.0007343292236328125, -0.0001277923583984375, -0.00012194366718176752, -0.0003550850669853389, -9.476689592702314e-05, -3.2543870474910364e-05, -8.700677426531911e-06, -9.655952453613281e-06, -1.9073486328125e-06, -7.2479248046875e-05, -0.0002193450927734375, -1.33514404296875e-05, -6.67572021484375e-05, -0.000255584716796875, -6.866455078125e-05, -6.67572021484375e-05, -0.0001049041748046875, -0.002040863037109375, -2.861018856492592e-06, -0.004970229230821133, -0.000992536311969161, -0.00015604496002197266, -0.001084321876987815, -0.00013554096221923828, -0.0001773834228515625, -0.0003871917724609375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -6.341921834973618e-05, 0.0, -0.0066189696080982685, -1.9073486328125e-06, -3.24249267578125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.00054931640625, -1.9073486328125e-06, -0.0057239532470703125, -1.71661376953125e-05, 0.0, -0.00011002915562130511, 0.0, -9.5367431640625e-06, -0.0012664794921875, -2.86102294921875e-05, -7.629387982888147e-05, -5.91278076171875e-05, -0.0008754730224609375, -0.0002593994140625, -4.973796367645264, -0.025819778442382812, -0.5488054156303406, -0.000744938850402832, -0.0025119781494140625, -0.005649566650390625, -0.16525711119174957, -1.0281050205230713, -2.5033763449755497e-05, -0.03989600017666817, -1.1444091796875e-05], "score": -6.818761261530653, "model_output": {"hole4": "player", "hole0": "HandOfProtection", "hole6": [{"_type": "Template19"}, {"level": 0, "module": "hearthbreaker.cards.minions.druid", "names": [{"_type": "alias", "name": "HandTreant"}], "_type": "ImportFrom"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hand of Protection", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import HandTreant\n"}, {"choice_history": [121, 200, "Hand", "Of", "Protection", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hand", " ", "of", " ", "Protection", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "change_attack", "Amount", "<EOS>", "1", "<EOS>"], "score_history": [-0.0007343292236328125, -0.0001277923583984375, -0.00012194366718176752, -0.0003550850669853389, -9.476689592702314e-05, -3.2543870474910364e-05, -8.700677426531911e-06, -9.655952453613281e-06, -1.9073486328125e-06, -7.2479248046875e-05, -0.0002193450927734375, -1.33514404296875e-05, -6.67572021484375e-05, -0.000255584716796875, -6.866455078125e-05, -6.67572021484375e-05, -0.0001049041748046875, -0.002040863037109375, -2.861018856492592e-06, -0.004970229230821133, -0.000992536311969161, -0.00015604496002197266, -0.001084321876987815, -0.00013554096221923828, -0.0001773834228515625, -0.0003871917724609375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -6.341921834973618e-05, 0.0, -0.0066189696080982685, -1.9073486328125e-06, -3.24249267578125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.00054931640625, -1.9073486328125e-06, -0.0057239532470703125, -1.71661376953125e-05, 0.0, -0.00011002915562130511, 0.0, -9.5367431640625e-06, -0.0012664794921875, -2.86102294921875e-05, -7.629387982888147e-05, -5.91278076171875e-05, -0.0008754730224609375, -0.0002593994140625, -3.7448997497558594, -0.0021228790283203125, -0.0006046295166015625, -0.0075550079345703125, -0.000186920166015625, -0.016974685713648796, -2.409369945526123, -0.001904606819152832, -0.9733538031578064, -1.9073486328125e-06], "score": -7.185112741382454, "model_output": {"hole4": "player", "hole0": "HandOfProtection", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attackAmount", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hand of Protection", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attackAmount(1)\n"}], "index": 45}
{"beams": [{"choice_history": [121, 198, "Healing", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Healing", " ", "Totem", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Heal", "<EOS>", 320, 103, "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.6702880859375e-05, -4.887569048150908e-06, -1.7881233361549675e-05, -2.0265579223632812e-06, -4.302110755816102e-05, -9.5367431640625e-06, -9.5367431640625e-06, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -3.0517578125e-05, -0.00916290283203125, -0.000255584716796875, -0.0014286041259765625, -8.20159912109375e-05, -7.62939453125e-06, -8.344646857949556e-07, -0.000222086877329275, -3.099440846199286e-06, 0.0, -7.05718994140625e-05, -0.0002460479736328125, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002574920654296875, -8.7738037109375e-05, -0.0034334659576416016, -2.86102294921875e-05, -0.0007877349853515625, -0.000339508056640625, -0.00051116943359375, -1.9073486328125e-06, -0.000209808349609375, -3.814697265625e-06, -0.0004444122314453125, -1.9073486328125e-06, -0.004180908203125, -1.9073486328125e-06, -0.00070953369140625, -3.814697265625e-06, -0.001407623291015625, 0.0, -0.0001659393310546875, -0.0001125335693359375, -0.0001010894775390625, -2.6225920919387136e-06, -8.785724639892578e-05, -5.960462772236497e-07, -2.3841855067985307e-07, -7.628720777574927e-05, -2.0265579223632812e-06, -0.00016021728515625, -0.000240325927734375, -0.0031147003173828125, -8.392333984375e-05, -0.0002613067626953125, -5.7220458984375e-06, -0.0002117156982421875, -0.0005626678466796875, -0.03779411315917969, -0.004804372787475586, -1.8477359844837338e-05, -0.0014629364013671875, -0.000335693359375, -0.0008360270876437426, -0.000301361083984375, 0.0, -0.0002155303955078125, -1.71661376953125e-05, -1.9073486328125e-06, -0.0006802082061767578, 0.0, -0.0020322799682617188, -0.0008258819580078125, -7.62939453125e-06, -1.71661376953125e-05, -1.52587890625e-05, -6.866455078125e-05], "score": -0.07875084063212512, "model_output": {"hole4": "player", "hole0": "HealingTotem", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Healing Totem", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}, {"_type": "Template75"}, {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 2, "_type": "Template36", "hole3": [{"hole2": [{"hole5": [{"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "_type": "Template23", "hole3": "MinionSelector", "hole0": "Heal"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}]}, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(condition=Null)))])\n"}, {"choice_history": [121, 198, "Healing", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Healing", " ", "Totem", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 221, "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.6702880859375e-05, -4.887569048150908e-06, -1.7881233361549675e-05, -2.0265579223632812e-06, -4.302110755816102e-05, -9.5367431640625e-06, -9.5367431640625e-06, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -3.0517578125e-05, -0.00916290283203125, -0.000255584716796875, -0.0014286041259765625, -8.20159912109375e-05, -7.62939453125e-06, -8.344646857949556e-07, -0.000222086877329275, -3.099440846199286e-06, 0.0, -7.05718994140625e-05, -0.0002460479736328125, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002574920654296875, -8.7738037109375e-05, -0.0034334659576416016, -2.86102294921875e-05, -0.0007877349853515625, -0.000339508056640625, -0.00051116943359375, -1.9073486328125e-06, -0.000209808349609375, -3.814697265625e-06, -0.0004444122314453125, -1.9073486328125e-06, -0.004180908203125, -1.9073486328125e-06, -0.00070953369140625, -3.814697265625e-06, -0.001407623291015625, 0.0, -0.0001659393310546875, -0.0001125335693359375, -0.0001010894775390625, -2.6225920919387136e-06, -8.785724639892578e-05, -5.960462772236497e-07, -2.3841855067985307e-07, -7.628720777574927e-05, -2.0265579223632812e-06, -0.00016021728515625, -0.000240325927734375, -0.0031147003173828125, -8.392333984375e-05, -0.0002613067626953125, -5.7220458984375e-06, -0.0002117156982421875, -0.0005626678466796875, -3.9632396697998047, -0.03952980041503906, 0.0, -0.002776026725769043, -0.0001468658447265625, -1.9073486328125e-06, -0.3197040557861328, -1.52587890625e-05, -1.9073486328125e-06, -0.00045418739318847656, -5.7220458984375e-06, -0.0019073486328125, -0.0004520416259765625, -7.62939453125e-06, -5.7220458984375e-06, -0.0011653900146484375, -3.62396240234375e-05, -0.0008869171142578125, 0.0, -0.0001373291015625, 0.0, -0.0002614259428810328, -7.319450378417969e-05, -5.7220458984375e-06, -7.62939453125e-06, -0.000247955322265625], "score": -4.360386112766861, "model_output": {"hole4": "player", "hole0": "HealingTotem", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Healing Totem", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}, {"_type": "Template75"}, {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 2, "_type": "Template36", "hole3": [{"hole2": [{"hole5": [{"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}], "_type": "Template23", "hole3": "MinionSelector", "hole0": "Kill"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}]}, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Kill(),\n            MinionSelector(condition=Null, players=BothPlayer())))])\n"}, {"choice_history": [121, 198, "Healing", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Healing", " ", "Totem", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 118, 248, "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Heal", "<EOS>", 320, 103, "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.6702880859375e-05, -4.887569048150908e-06, -1.7881233361549675e-05, -2.0265579223632812e-06, -4.302110755816102e-05, -9.5367431640625e-06, -9.5367431640625e-06, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -3.0517578125e-05, -4.712287902832031, -3.62396240234375e-05, -0.00074005126953125, -1.71661376953125e-05, -2.6702880859375e-05, -9.536738616588991e-07, -0.00017356869648210704, -7.748602001811378e-06, 0.0, -0.0035076141357421875, -7.62939453125e-06, 0.0, -1.9073486328125e-06, 0.0, -0.0002765655517578125, -9.5367431640625e-05, -0.023250699043273926, -2.47955322265625e-05, -0.2062997817993164, -0.0006046295166015625, -0.0037593841552734375, -0.0001049041748046875, -0.21053028106689453, 0.0, -0.0001068115234375, 0.0, -7.62939453125e-06, 0.0, -0.000736236572265625, -1.71661376953125e-05, -4.38690185546875e-05, -1.788135932656587e-06, -4.112720489501953e-05, -2.1457672119140625e-06, -1.311301275563892e-06, -4.219865513732657e-05, 0.0, -0.0002460479736328125, -2.288818359375e-05, -0.03747844696044922, -8.7738037109375e-05, -0.0014905929565429688, -9.5367431640625e-06, -0.00020599365234375, -0.000244140625, -0.046993255615234375, -0.008539438247680664, -1.5735575288999826e-05, -0.0013828277587890625, -0.0003223419189453125, -0.0010975105687975883, -0.0002994537353515625, -1.1920928244535389e-07, -0.0001735687255859375, -2.09808349609375e-05, -1.9073486328125e-06, -0.00046324729919433594, 0.0, -0.0026960372924804688, -0.0008754730224609375, -7.62939453125e-06, -1.52587890625e-05, -1.33514404296875e-05, -6.29425048828125e-05], "score": -5.265752489441859, "model_output": {"hole4": "player", "hole0": "HealingTotem", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "TOTEM"}], "_type": "Call", "args": [{"s": "Healing Totem", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 2, "_type": "Template36", "hole3": [{"hole2": [{"hole5": [{"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "_type": "Template23", "hole3": "MinionSelector", "hole0": "Heal"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}]}, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(condition=Null)))])\n"}, {"choice_history": [121, 198, "Healing", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Healing", " ", "Totem", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 221, "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.6702880859375e-05, -4.887569048150908e-06, -1.7881233361549675e-05, -2.0265579223632812e-06, -4.302110755816102e-05, -9.5367431640625e-06, -9.5367431640625e-06, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -3.0517578125e-05, -0.00916290283203125, -0.000255584716796875, -0.0014286041259765625, -8.20159912109375e-05, -7.62939453125e-06, -8.344646857949556e-07, -0.000222086877329275, -3.099440846199286e-06, 0.0, -7.05718994140625e-05, -0.0002460479736328125, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002574920654296875, -8.7738037109375e-05, -0.0034334659576416016, -2.86102294921875e-05, -0.0007877349853515625, -0.000339508056640625, -0.00051116943359375, -1.9073486328125e-06, -0.000209808349609375, -3.814697265625e-06, -0.0004444122314453125, -1.9073486328125e-06, -0.004180908203125, -1.9073486328125e-06, -0.00070953369140625, -3.814697265625e-06, -0.001407623291015625, 0.0, -0.0001659393310546875, -0.0001125335693359375, -0.0001010894775390625, -2.6225920919387136e-06, -8.785724639892578e-05, -5.960462772236497e-07, -2.3841855067985307e-07, -7.628720777574927e-05, -2.0265579223632812e-06, -0.00016021728515625, -0.000240325927734375, -0.0031147003173828125, -8.392333984375e-05, -0.0002613067626953125, -5.7220458984375e-06, -0.0002117156982421875, -0.0005626678466796875, -3.9632396697998047, -0.03952980041503906, 0.0, -0.002776026725769043, -0.0001468658447265625, -1.9073486328125e-06, -1.3039026260375977, -7.62939453125e-06, -1.9073486328125e-06, -0.008316516876220703, -4.00543212890625e-05, -0.0024967193603515625, -0.0006618499755859375, -1.1563301086425781e-05, -1.33514404296875e-05, -3.814697265625e-06, -4.9591064453125e-05], "score": -5.350516060458318, "model_output": {"hole4": "player", "hole0": "HealingTotem", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Healing Totem", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}, {"_type": "Template75"}, {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 2, "_type": "Template36", "hole3": [{"hole2": [{"hole5": [{"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}], "_type": "Template23", "hole3": "MinionSelector", "hole0": "Kill"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}]}, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Kill(),\n            MinionSelector(condition=Null)))])\n"}, {"choice_history": [121, 198, "Healing", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Healing", " ", "Totem", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "SHAMAN", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Heal", "<EOS>", 320, 103, "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.6702880859375e-05, -4.887569048150908e-06, -1.7881233361549675e-05, -2.0265579223632812e-06, -4.302110755816102e-05, -9.5367431640625e-06, -9.5367431640625e-06, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -3.0517578125e-05, -0.00916290283203125, -0.000255584716796875, -0.0014286041259765625, -8.20159912109375e-05, -7.62939453125e-06, -8.344646857949556e-07, -0.000222086877329275, -3.099440846199286e-06, 0.0, -7.05718994140625e-05, -0.0002460479736328125, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002574920654296875, -8.7738037109375e-05, -0.0034334659576416016, -2.86102294921875e-05, -0.0007877349853515625, -0.000339508056640625, -0.00051116943359375, -1.9073486328125e-06, -0.000209808349609375, -3.814697265625e-06, -0.0004444122314453125, -1.9073486328125e-06, -5.975197792053223, -1.52587890625e-05, -0.0003566741943359375, -3.814697265625e-06, -0.03175926208496094, 0.0, -7.05718994140625e-05, -0.0001926422119140625, -0.000102996826171875, -2.8610038498300128e-06, -9.930133819580078e-05, -7.152555099310121e-07, -2.3841855067985307e-07, -0.00013313922681845725, -1.9073486328125e-06, -0.000209808349609375, -0.0002651214599609375, -0.0028934478759765625, -8.392333984375e-05, -0.00026702880859375, -5.7220458984375e-06, -0.000209808349609375, -0.00049591064453125, -0.035556793212890625, -0.0046002864837646484, -1.752369644236751e-05, -0.0015106201171875, -0.0003452301025390625, -0.0008342382498085499, -0.0003185272216796875, 0.0, -0.00022125244140625, -1.71661376953125e-05, -1.9073486328125e-06, -0.0006783008575439453, 0.0, -0.00202178955078125, -0.000823974609375, -7.62939453125e-06, -1.71661376953125e-05, -1.52587890625e-05, -6.866455078125e-05], "score": -6.077246884728623, "model_output": {"hole4": "player", "hole0": "HealingTotem", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Healing Totem", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}, {"_type": "Template75"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 2, "_type": "Template36", "hole3": [{"hole2": [{"hole5": [{"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "_type": "Template23", "hole3": "MinionSelector", "hole0": "Heal"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}]}, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, False, MINION_TYPE.SHAMAN)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(condition=Null)))])\n"}, {"choice_history": [121, 198, "Healing", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Healing", " ", "Totem", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Damage", "<EOS>", 320, 103, "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.6702880859375e-05, -4.887569048150908e-06, -1.7881233361549675e-05, -2.0265579223632812e-06, -4.302110755816102e-05, -9.5367431640625e-06, -9.5367431640625e-06, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -3.0517578125e-05, -0.00916290283203125, -0.000255584716796875, -0.0014286041259765625, -8.20159912109375e-05, -7.62939453125e-06, -8.344646857949556e-07, -0.000222086877329275, -3.099440846199286e-06, 0.0, -7.05718994140625e-05, -0.0002460479736328125, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002574920654296875, -8.7738037109375e-05, -0.0034334659576416016, -2.86102294921875e-05, -0.0007877349853515625, -0.000339508056640625, -0.00051116943359375, -1.9073486328125e-06, -0.000209808349609375, -3.814697265625e-06, -0.0004444122314453125, -1.9073486328125e-06, -0.004180908203125, -1.9073486328125e-06, -0.00070953369140625, -3.814697265625e-06, -0.001407623291015625, 0.0, -0.0001659393310546875, -0.0001125335693359375, -0.0001010894775390625, -2.6225920919387136e-06, -8.785724639892578e-05, -5.960462772236497e-07, -2.3841855067985307e-07, -7.628720777574927e-05, -2.0265579223632812e-06, -0.00016021728515625, -0.000240325927734375, -0.0031147003173828125, -8.392333984375e-05, -0.0002613067626953125, -5.7220458984375e-06, -0.0002117156982421875, -0.0005626678466796875, -0.03779411315917969, -6.4495930671691895, -4.088862624485046e-05, -0.0002307891845703125, -0.00507354736328125, -0.0020410094875842333, -9.72747802734375e-05, 0.0, -0.0001430511474609375, -1.9073486328125e-05, -1.9073486328125e-06, -0.0007102489471435547, 0.0, -0.0023241043090820312, -0.0008144378662109375, -7.62939453125e-06, -1.9073486328125e-05, -1.52587890625e-05, -6.4849853515625e-05], "score": -6.528306490905521, "model_output": {"hole4": "player", "hole0": "HealingTotem", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Healing Totem", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}, {"_type": "Template75"}, {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 2, "_type": "Template36", "hole3": [{"hole2": [{"hole5": [{"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "_type": "Template23", "hole3": "MinionSelector", "hole0": "Damage"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}]}, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Damage(1\n            ), MinionSelector(condition=Null)))])\n"}, {"choice_history": [121, 198, "Healing", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Healing", " ", "Totem", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "2", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.6702880859375e-05, -4.887569048150908e-06, -1.7881233361549675e-05, -2.0265579223632812e-06, -4.302110755816102e-05, -9.5367431640625e-06, -9.5367431640625e-06, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -3.0517578125e-05, -0.00916290283203125, -0.000255584716796875, -0.0014286041259765625, -8.20159912109375e-05, -7.62939453125e-06, -8.344646857949556e-07, -0.000222086877329275, -3.099440846199286e-06, 0.0, -7.05718994140625e-05, -0.0002460479736328125, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002574920654296875, -8.7738037109375e-05, -0.0034334659576416016, -2.86102294921875e-05, -0.0007877349853515625, -0.000339508056640625, -0.00051116943359375, -1.9073486328125e-06, -0.000209808349609375, -3.814697265625e-06, -0.0004444122314453125, -1.9073486328125e-06, -0.004180908203125, -1.9073486328125e-06, -0.00070953369140625, -3.814697265625e-06, -0.001407623291015625, 0.0, -0.0001659393310546875, -0.0001125335693359375, -0.0001010894775390625, -2.6225920919387136e-06, -8.785724639892578e-05, -5.960462772236497e-07, -2.3841855067985307e-07, -7.628720777574927e-05, -2.0265579223632812e-06, -0.00016021728515625, -0.000240325927734375, -0.0031147003173828125, -8.392333984375e-05, -0.0002613067626953125, -5.7220458984375e-06, -0.0002117156982421875, -0.0005626678466796875, -0.03779411315917969, -6.2235426902771, -0.0015654563903808594, -0.0001087188720703125, -0.05991363525390625, -0.000827789306640625, -0.09316527843475342, -5.53131103515625e-05, -0.12111127376556396, -5.53131103515625e-05, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -7.62939453125e-06, -0.020074844360351562, 0.0, -0.0072269439697265625, -9.1552734375e-05, -2.288818359375e-05, -5.340576171875e-05, -9.5367431640625e-06, -2.09808349609375e-05], "score": -6.595003584490911, "model_output": {"hole4": "player", "hole0": "HealingTotem", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Healing Totem", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}, {"_type": "Template75"}, {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 2, "_type": "Template36", "hole3": [{"hole2": [{"hole5": [{"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}], "hole1": [{"_type": "Template40", "hole0": 2}], "_type": "Template23", "hole3": "MinionSelector", "hole0": "Give"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}]}, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(2)), MinionSelector(condition=Null)))])\n"}, {"choice_history": [121, 198, "Healing", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Healing", " ", "Totem", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Heal", "<EOS>", 320, 103, "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.6702880859375e-05, -4.887569048150908e-06, -1.7881233361549675e-05, -2.0265579223632812e-06, -4.302110755816102e-05, -9.5367431640625e-06, -9.5367431640625e-06, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -3.0517578125e-05, -0.00916290283203125, -0.000255584716796875, -0.0014286041259765625, -8.20159912109375e-05, -7.62939453125e-06, -8.344646857949556e-07, -0.000222086877329275, -3.099440846199286e-06, 0.0, -7.05718994140625e-05, -0.0002460479736328125, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002574920654296875, -8.7738037109375e-05, -0.0034334659576416016, -2.86102294921875e-05, -0.0007877349853515625, -0.000339508056640625, -0.00051116943359375, -1.9073486328125e-06, -0.000209808349609375, -3.814697265625e-06, -0.0004444122314453125, -1.9073486328125e-06, -0.004180908203125, -1.9073486328125e-06, -0.00070953369140625, -3.814697265625e-06, -6.788448333740234, -0.000164031982421875, -1.33514404296875e-05, -0.0004444122314453125, -0.000179290771484375, -5.483575932885287e-06, -3.254413604736328e-05, -1.0728830375228426e-06, -1.1920928244535389e-07, -0.00021536221902351826, 0.0, -0.0004596710205078125, -0.0002384185791015625, -0.003253936767578125, -8.0108642578125e-05, -0.0002765655517578125, -5.7220458984375e-06, -0.0002002716064453125, -0.0004901885986328125, -0.036212921142578125, -0.004522204399108887, -1.81197356141638e-05, -0.0013904571533203125, -0.0003185272216796875, -0.0008740555495023727, -0.0003223419189453125, 0.0, -0.000225067138671875, -1.9073486328125e-05, -1.9073486328125e-06, -0.0006859302520751953, 0.0, -0.0020532608032226562, -0.000827789306640625, -7.62939453125e-06, -1.71661376953125e-05, -1.52587890625e-05, -7.05718994140625e-05], "score": -6.86480994022417, "model_output": {"hole4": "p", "hole0": "HealingTotem", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Healing Totem", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}, {"_type": "Template75"}, {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 2, "_type": "Template36", "hole3": [{"hole2": [{"hole5": [{"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "_type": "Template23", "hole3": "MinionSelector", "hole0": "Heal"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}]}, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion(self, p):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(condition=Null)))])\n"}, {"choice_history": [121, 198, "Healing", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Healing", " ", "Totem", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 97, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Heal", "<EOS>", 320, 103, "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.6702880859375e-05, -4.887569048150908e-06, -1.7881233361549675e-05, -2.0265579223632812e-06, -4.302110755816102e-05, -9.5367431640625e-06, -9.5367431640625e-06, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -3.0517578125e-05, -0.00916290283203125, -0.000255584716796875, -0.0014286041259765625, -8.20159912109375e-05, -7.62939453125e-06, -8.344646857949556e-07, -0.000222086877329275, -3.099440846199286e-06, 0.0, -7.05718994140625e-05, -0.0002460479736328125, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002574920654296875, -8.7738037109375e-05, -6.8718671798706055, -6.29425048828125e-05, -0.014348983764648438, -0.000133514404296875, -0.00157928466796875, -1.9073486328125e-06, -2.6702880859375e-05, -1.9073486328125e-06, -0.0007572174072265625, -1.9073486328125e-06, -0.00506591796875, -1.9073486328125e-06, -0.0006351470947265625, -3.814697265625e-06, -0.0015506744384765625, 0.0, -0.0001964569091796875, -0.0001392364501953125, -0.0001010894775390625, -2.7417986530053895e-06, -8.594989776611328e-05, -5.960462772236497e-07, -2.3841855067985307e-07, -8.403437095694244e-05, -2.0265579223632812e-06, -0.0001621246337890625, -0.0002536773681640625, -0.00305938720703125, -8.392333984375e-05, -0.0002613067626953125, -5.7220458984375e-06, -0.000213623046875, -0.0005550384521484375, -0.036789894104003906, -0.004762411117553711, -1.8477359844837338e-05, -0.001445770263671875, -0.000335693359375, -0.0008379339706152678, -0.00031280517578125, 0.0, -0.0002155303955078125, -1.71661376953125e-05, -1.9073486328125e-06, -0.0006802082061767578, 0.0, -0.002017974853515625, -0.00081634521484375, -7.62939453125e-06, -1.71661376953125e-05, -1.52587890625e-05, -6.866455078125e-05], "score": -6.961667289223584, "model_output": {"hole4": "player", "hole0": "HealingTotem", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Healing Totem", "_type": "Str"}, {"_type": "Template60"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}, {"_type": "Template75"}, {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 2, "_type": "Template36", "hole3": [{"hole2": [{"hole5": [{"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "_type": "Template23", "hole3": "MinionSelector", "hole0": "Heal"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}]}, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(condition=Null)))])\n"}, {"choice_history": [121, 198, "Healing", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Healing", " ", "Totem", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "TOTEM", "<EOS>", 97, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Heal", "<EOS>", 320, 103, "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.6702880859375e-05, -4.887569048150908e-06, -1.7881233361549675e-05, -2.0265579223632812e-06, -4.302110755816102e-05, -9.5367431640625e-06, -9.5367431640625e-06, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -3.0517578125e-05, -0.00916290283203125, -0.000255584716796875, -0.0014286041259765625, -8.20159912109375e-05, -7.62939453125e-06, -8.344646857949556e-07, -0.000222086877329275, -3.099440846199286e-06, 0.0, -7.05718994140625e-05, -0.0002460479736328125, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002574920654296875, -8.7738037109375e-05, -7.086095809936523, -1.9073486328125e-06, -0.01061248779296875, -0.0003032684326171875, -0.00164031982421875, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-06, -0.004192352294921875, -1.9073486328125e-06, -0.00064849853515625, -3.814697265625e-06, -0.0017242431640625, 0.0, -0.0002117156982421875, -0.0001068115234375, -0.0001049041748046875, -2.6225916371913627e-06, -9.167194366455078e-05, -5.960462772236497e-07, -2.3841855067985307e-07, -7.211549382191151e-05, -2.0265579223632812e-06, -0.000152587890625, -0.0002384185791015625, -0.003147125244140625, -8.392333984375e-05, -0.000263214111328125, -5.7220458984375e-06, -0.0002117156982421875, -0.0005512237548828125, -0.038987159729003906, -0.0048711299896240234, -1.8596565496409312e-05, -0.0014705657958984375, -0.000339508056640625, -0.0008587967604398727, -0.0003204345703125, 0.0, -0.0002117156982421875, -1.71661376953125e-05, -1.9073486328125e-06, -0.0006783008575439453, 0.0, -0.0020427703857421875, -0.00081634521484375, -7.62939453125e-06, -1.71661376953125e-05, -1.52587890625e-05, -7.05718994140625e-05], "score": -7.173833482585593, "model_output": {"hole4": "player", "hole0": "HealingTotem", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Healing Totem", "_type": "Str"}, {"_type": "Template60"}, {"attr": "TOTEM", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}, {"_type": "Template75"}, {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 2, "_type": "Template36", "hole3": [{"hole2": [{"hole5": [{"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "_type": "Template23", "hole3": "MinionSelector", "hole0": "Heal"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}]}, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.TOTEM,\n            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(condition=Null)))])\n"}, {"choice_history": [121, 198, "Healing", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Healing", " ", "Totem", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 118, 248, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Heal", "<EOS>", 320, 103, "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.6702880859375e-05, -4.887569048150908e-06, -1.7881233361549675e-05, -2.0265579223632812e-06, -4.302110755816102e-05, -9.5367431640625e-06, -9.5367431640625e-06, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -3.0517578125e-05, -4.712287902832031, -3.62396240234375e-05, -0.00074005126953125, -1.71661376953125e-05, -2.6702880859375e-05, -9.536738616588991e-07, -0.00017356869648210704, -7.748602001811378e-06, 0.0, -0.0035076141357421875, -7.62939453125e-06, 0.0, -1.9073486328125e-06, 0.0, -0.0002765655517578125, -9.5367431640625e-05, -0.023250699043273926, -2.47955322265625e-05, -0.2062997817993164, -0.0006046295166015625, -0.0037593841552734375, -0.0001049041748046875, -2.188190460205078, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.0010471343994140625, -3.24249267578125e-05, -5.340576171875e-05, -8.344640036739293e-07, -2.9087066650390625e-05, -2.1457672119140625e-06, -1.311301275563892e-06, -3.933773405151442e-05, 0.0, -0.000152587890625, -2.09808349609375e-05, -0.03891944885253906, -8.7738037109375e-05, -0.000919342041015625, -9.5367431640625e-06, -0.00018310546875, -0.0002384185791015625, -0.04862022399902344, -0.008900165557861328, -1.633161627978552e-05, -0.0013599395751953125, -0.000331878662109375, -0.0010857153683900833, -0.0002956390380859375, -1.1920928244535389e-07, -0.0001811981201171875, -2.09808349609375e-05, -1.9073486328125e-06, -0.00046515464782714844, 0.0, -0.002716064453125, -0.00089263916015625, -7.62939453125e-06, -1.52587890625e-05, -1.33514404296875e-05, -6.103515625e-05], "score": -7.246451916035191, "model_output": {"hole4": "player", "hole0": "HealingTotem", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "DEMON"}], "_type": "Call", "args": [{"s": "Healing Totem", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 2, "_type": "Template36", "hole3": [{"hole2": [{"hole5": [{"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "_type": "Template23", "hole3": "MinionSelector", "hole0": "Heal"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}]}, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(condition=Null)))])\n"}, {"choice_history": [121, 198, "Healing", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Healing", " ", "Totem", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Heal", "<EOS>", 320, 103, "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.6702880859375e-05, -4.887569048150908e-06, -1.7881233361549675e-05, -2.0265579223632812e-06, -4.302110755816102e-05, -9.5367431640625e-06, -9.5367431640625e-06, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -3.0517578125e-05, -0.00916290283203125, -0.000255584716796875, -0.0014286041259765625, -8.20159912109375e-05, -7.62939453125e-06, -8.344646857949556e-07, -0.000222086877329275, -3.099440846199286e-06, 0.0, -7.05718994140625e-05, -0.0002460479736328125, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002574920654296875, -8.7738037109375e-05, -0.0034334659576416016, -2.86102294921875e-05, -0.0007877349853515625, -0.000339508056640625, -0.00051116943359375, -1.9073486328125e-06, -0.000209808349609375, -3.814697265625e-06, -0.0004444122314453125, -1.9073486328125e-06, -7.217568397521973, -7.82012939453125e-05, -0.0007381439208984375, -1.9073486328125e-06, -0.007841110229492188, 0.0, -0.0007877349853515625, -0.0004749298095703125, -7.43865966796875e-05, -2.8610047593247145e-06, -0.00012028217315673828, -8.344646857949556e-07, -2.3841855067985307e-07, -0.00010393650882178918, -2.0265579223632812e-06, -0.000125885009765625, -0.000278472900390625, -0.00283050537109375, -8.58306884765625e-05, -0.0002593994140625, -5.7220458984375e-06, -0.0002117156982421875, -0.0004978179931640625, -0.03358745574951172, -0.004463076591491699, -1.728527968225535e-05, -0.00146484375, -0.000331878662109375, -0.0007637850940227509, -0.0002307891845703125, 0.0, -0.0002269744873046875, -1.9073486328125e-05, -1.9073486328125e-06, -0.0006687641143798828, 0.0, -0.002079010009765625, -0.000850677490234375, -7.62939453125e-06, -1.71661376953125e-05, -1.52587890625e-05, -6.866455078125e-05], "score": -7.294727189680515, "model_output": {"hole4": "player", "hole0": "HealingTotem", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Healing Totem", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}, {"_type": "Template75"}, {"attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 2, "_type": "Template36", "hole3": [{"hole2": [{"hole5": [{"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "_type": "Template23", "hole3": "MinionSelector", "hole0": "Heal"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}]}, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, False, MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(condition=Null)))])\n"}, {"choice_history": [121, 198, "Healing", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Healing", " ", "Totem", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Heal", "<EOS>", 320, 103, "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.6702880859375e-05, -4.887569048150908e-06, -1.7881233361549675e-05, -2.0265579223632812e-06, -4.302110755816102e-05, -9.5367431640625e-06, -9.5367431640625e-06, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -3.0517578125e-05, -0.00916290283203125, -0.000255584716796875, -0.0014286041259765625, -8.20159912109375e-05, -7.62939453125e-06, -8.344646857949556e-07, -0.000222086877329275, -3.099440846199286e-06, 0.0, -7.05718994140625e-05, -0.0002460479736328125, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002574920654296875, -8.7738037109375e-05, -7.275582313537598, -1.9073486328125e-06, -0.0025482177734375, -0.0001659393310546875, -0.0005893707275390625, -1.9073486328125e-06, -0.000133514404296875, -3.814697265625e-06, -0.0006122589111328125, 0.0, -0.0062255859375, -1.9073486328125e-06, -0.00061798095703125, -3.814697265625e-06, -0.00119781494140625, 0.0, -0.00016021728515625, -0.00014495849609375, -9.1552734375e-05, -2.503383257135283e-06, -7.832050323486328e-05, -5.960462772236497e-07, -2.3841855067985307e-07, -7.974357868079096e-05, -2.0265579223632812e-06, -0.0001678466796875, -0.0002422332763671875, -0.0030879974365234375, -8.392333984375e-05, -0.0002613067626953125, -5.7220458984375e-06, -0.000213623046875, -0.0005664825439453125, -0.03786277770996094, -0.004895925521850586, -1.895418972708285e-05, -0.00144195556640625, -0.0003414154052734375, -0.0008378159254789352, -0.00031280517578125, 0.0, -0.000217437744140625, -1.9073486328125e-05, -1.9073486328125e-06, -0.0006783008575439453, 0.0, -0.0020351409912109375, -0.00081634521484375, -7.62939453125e-06, -1.71661376953125e-05, -1.52587890625e-05, -7.05718994140625e-05], "score": -7.354526392421263, "model_output": {"hole4": "player", "hole0": "HealingTotem", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Healing Totem", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}, {"_type": "Template75"}, {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 2, "_type": "Template36", "hole3": [{"hole2": [{"hole5": [{"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "_type": "Template23", "hole3": "MinionSelector", "hole0": "Heal"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}]}, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(condition=Null)))])\n"}, {"choice_history": [121, 198, "Healing", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Healing", " ", "Totem", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 222, "Heal", "<EOS>", "Player", "Selector", "<EOS>", 320, 105, 320, 105], "score_history": [-7.62939453125e-06, -2.6702880859375e-05, -4.887569048150908e-06, -1.7881233361549675e-05, -2.0265579223632812e-06, -4.302110755816102e-05, -9.5367431640625e-06, -9.5367431640625e-06, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -3.0517578125e-05, -0.00916290283203125, -0.000255584716796875, -0.0014286041259765625, -8.20159912109375e-05, -7.62939453125e-06, -8.344646857949556e-07, -0.000222086877329275, -3.099440846199286e-06, 0.0, -7.05718994140625e-05, -0.0002460479736328125, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002574920654296875, -8.7738037109375e-05, -0.0034334659576416016, -2.86102294921875e-05, -0.0007877349853515625, -0.000339508056640625, -0.00051116943359375, -1.9073486328125e-06, -0.000209808349609375, -3.814697265625e-06, -0.0004444122314453125, -1.9073486328125e-06, -0.004180908203125, -1.9073486328125e-06, -0.00070953369140625, -3.814697265625e-06, -0.001407623291015625, 0.0, -0.0001659393310546875, -0.0001125335693359375, -0.0001010894775390625, -2.6225920919387136e-06, -8.785724639892578e-05, -5.960462772236497e-07, -2.3841855067985307e-07, -7.628720777574927e-05, -2.0265579223632812e-06, -0.00016021728515625, -0.000240325927734375, -0.0031147003173828125, -8.392333984375e-05, -0.0002613067626953125, -5.7220458984375e-06, -0.0002117156982421875, -0.0005626678466796875, -6.458505630493164, -0.7607767581939697, 0.0, -0.03528905659914017, -1.9073486328125e-06, 0.0, -0.0001983642578125, -0.2732429504394531, -0.0001468658447265625, -4.38690185546875e-05], "score": -7.557521568702356, "model_output": {"hole4": "player", "hole0": "HealingTotem", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Healing Totem", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}, {"_type": "Template75"}, {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 2, "_type": "Template36", "hole3": [{"hole2": [{"hole4": [{"_type": "Template62_expr_seq"}], "_type": "Template23", "hole3": "PlayerSelector", "hole0": "Heal"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}]}, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(),\n            PlayerSelector()))])\n"}, {"choice_history": [121, 198, "Healing", "Totem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Healing", " ", "Totem", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 223, "Heal", "<EOS>", 320, 103, "Self", "Selector", "<EOS>", 320, 105], "score_history": [-7.62939453125e-06, -2.6702880859375e-05, -4.887569048150908e-06, -1.7881233361549675e-05, -2.0265579223632812e-06, -4.302110755816102e-05, -9.5367431640625e-06, -9.5367431640625e-06, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -3.0517578125e-05, -0.00916290283203125, -0.000255584716796875, -0.0014286041259765625, -8.20159912109375e-05, -7.62939453125e-06, -8.344646857949556e-07, -0.000222086877329275, -3.099440846199286e-06, 0.0, -7.05718994140625e-05, -0.0002460479736328125, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002574920654296875, -8.7738037109375e-05, -0.0034334659576416016, -2.86102294921875e-05, -0.0007877349853515625, -0.000339508056640625, -0.00051116943359375, -1.9073486328125e-06, -0.000209808349609375, -3.814697265625e-06, -0.0004444122314453125, -1.9073486328125e-06, -0.004180908203125, -1.9073486328125e-06, -0.00070953369140625, -3.814697265625e-06, -0.001407623291015625, 0.0, -0.0001659393310546875, -0.0001125335693359375, -0.0001010894775390625, -2.6225920919387136e-06, -8.785724639892578e-05, -5.960462772236497e-07, -2.3841855067985307e-07, -7.628720777574927e-05, -2.0265579223632812e-06, -0.00016021728515625, -0.000240325927734375, -0.0031147003173828125, -8.392333984375e-05, -0.0002613067626953125, -5.7220458984375e-06, -0.0002117156982421875, -0.0005626678466796875, -7.427748203277588, -0.01689743995666504, -1.9073486328125e-06, -5.340576171875e-05, -0.009535789489746094, -0.0054187774658203125, -3.814697265625e-05, 0.0, -3.814697265625e-06, -0.28012847900390625], "score": -7.769142130480901, "model_output": {"hole4": "player", "hole0": "HealingTotem", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Healing Totem", "_type": "Str"}, {"_type": "Template60"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}, {"_type": "Template75"}, {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 2, "_type": "Template36", "hole3": [{"hole2": [{"hole1": [{"_type": "Template60"}], "_type": "Template23", "hole3": "SelfSelector", "hole0": "Heal"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}]}, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            SelfSelector()))])\n"}], "index": 46}
{"beams": [{"choice_history": [121, 200, "Healing", "Touch", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Healing", " ", "Touch", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "8", "<EOS>", 110], "score_history": [-0.000202178955078125, -0.0001049041748046875, -2.3841830625315197e-06, -7.5101784204889555e-06, -7.390974587906385e-06, -1.192074705613777e-07, -1.7642974853515625e-05, -1.3947486877441406e-05, -0.000118255615234375, -0.0012187957763671875, -3.814697265625e-06, -8.392333984375e-05, -5.7220458984375e-05, -1.71661376953125e-05, -0.0008697509765625, -7.62939453125e-06, -2.86102294921875e-05, -2.2172682292875834e-05, -0.00016271841013804078, -5.054364737588912e-05, -9.655952453613281e-06, -0.00475311279296875, -4.38690185546875e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -4.2319297790527344e-05, -1.9073486328125e-06, -0.010179638862609863, 0.0, -9.72747802734375e-05, -9.72747802734375e-05, -9.5367431640625e-06, -0.0006008148193359375, -9.5367431640625e-06, 0.0, -4.9591064453125e-05, -0.00017547607421875, -0.0001316070556640625, -0.0023126602172851562, -1.9073486328125e-06, -5.543231964111328e-05, 0.0, -3.504720370983705e-05, 0.0, -1.71661376953125e-05, -0.00016021728515625, -0.000316619873046875, -0.00012159276229795069, 0.0, -0.00164031982421875, -1.9073486328125e-06, -8.58306884765625e-05, -0.00052642822265625, -0.0005779266357421875, -0.009437091648578644, -3.62396240234375e-05, -0.0004711151123046875, -0.0030374526977539062, -6.67572021484375e-05, -0.00029754638671875, -0.0013246536254882812, -3.814697265625e-06, -0.00017476032371632755, -1.7404556274414062e-05, -0.00014495849609375], "score": -0.04006886711795232, "model_output": {"hole4": "player", "hole0": "HealingTouch", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 8, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Healing Touch", "_type": "Str"}, {"_type": "Template61"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n"}, {"choice_history": [121, 200, "Healing", "Touch", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Healing", " ", "Touch", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "8", "<EOS>", 110], "score_history": [-0.000202178955078125, -0.0001049041748046875, -2.3841830625315197e-06, -7.5101784204889555e-06, -7.390974587906385e-06, -1.192074705613777e-07, -1.7642974853515625e-05, -1.3947486877441406e-05, -0.000118255615234375, -0.0012187957763671875, -3.814697265625e-06, -8.392333984375e-05, -5.7220458984375e-05, -1.71661376953125e-05, -0.0008697509765625, -7.62939453125e-06, -2.86102294921875e-05, -2.2172682292875834e-05, -0.00016271841013804078, -5.054364737588912e-05, -9.655952453613281e-06, -0.00475311279296875, -4.38690185546875e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -4.2319297790527344e-05, -1.9073486328125e-06, -5.299812316894531, -5.7220458984375e-06, -0.0008907318115234375, -0.00012969970703125, -2.288818359375e-05, -0.000667572021484375, -9.5367431640625e-06, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -0.0002002716064453125, -0.0012159347534179688, 0.0, -2.872943878173828e-05, 0.0, -2.4199378458433785e-05, 0.0, -1.71661376953125e-05, -0.00012969970703125, -0.000385284423828125, -0.0001344677002634853, 0.0, -0.00150299072265625, -1.9073486328125e-06, -8.58306884765625e-05, -0.000484466552734375, -0.00064849853515625, -0.009874537587165833, -3.814697265625e-05, -0.000499725341796875, -0.0029592514038085938, -6.67572021484375e-05, -0.0002918243408203125, -0.001323699951171875, -3.814697265625e-06, -0.00017332978313788772, -1.7404556274414062e-05, -0.000141143798828125], "score": -5.329675148268507, "model_output": {"hole4": "player", "hole0": "HealingTouch", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 8, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Healing Touch", "_type": "Str"}, {"_type": "Template61"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n"}, {"choice_history": [121, 200, "Healing", "Touch", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Healing", " ", "Touch", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "8", "<EOS>", 110], "score_history": [-0.000202178955078125, -0.0001049041748046875, -2.3841830625315197e-06, -7.5101784204889555e-06, -7.390974587906385e-06, -1.192074705613777e-07, -1.7642974853515625e-05, -1.3947486877441406e-05, -0.000118255615234375, -0.0012187957763671875, -3.814697265625e-06, -8.392333984375e-05, -5.7220458984375e-05, -1.71661376953125e-05, -0.0008697509765625, -7.62939453125e-06, -2.86102294921875e-05, -2.2172682292875834e-05, -0.00016271841013804078, -5.054364737588912e-05, -9.655952453613281e-06, -0.00475311279296875, -4.38690185546875e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -4.2319297790527344e-05, -1.9073486328125e-06, -5.835750579833984, -1.9073486328125e-06, -0.0002574920654296875, -8.7738037109375e-05, -2.288818359375e-05, -0.0017414093017578125, -1.52587890625e-05, 0.0, -4.1961669921875e-05, -0.0001506805419921875, -0.0001430511474609375, -0.0018377304077148438, -1.9073486328125e-06, -5.352497100830078e-05, 0.0, -4.613332566805184e-05, 0.0, -1.71661376953125e-05, -0.0001277923583984375, -0.0002498626708984375, -0.0001217112730955705, 0.0, -0.0015964508056640625, -1.9073486328125e-06, -8.392333984375e-05, -0.0005016326904296875, -0.000591278076171875, -0.009414874017238617, -3.62396240234375e-05, -0.0004673004150390625, -0.0030660629272460938, -6.67572021484375e-05, -0.0003032684326171875, -0.0013217926025390625, -3.814697265625e-06, -0.00017666767234914005, -1.5497207641601562e-05, -0.0001468658447265625], "score": -5.8663163942728715, "model_output": {"hole4": "player", "hole0": "HealingTouch", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 8, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Healing Touch", "_type": "Str"}, {"_type": "Template61"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n"}, {"choice_history": [121, 200, "Healing", "Touch", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Healing", " ", "Touch", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "8", "<EOS>", 110], "score_history": [-0.000202178955078125, -0.0001049041748046875, -2.3841830625315197e-06, -7.5101784204889555e-06, -7.390974587906385e-06, -1.192074705613777e-07, -1.7642974853515625e-05, -1.3947486877441406e-05, -0.000118255615234375, -0.0012187957763671875, -3.814697265625e-06, -8.392333984375e-05, -5.7220458984375e-05, -1.71661376953125e-05, -0.0008697509765625, -7.62939453125e-06, -2.86102294921875e-05, -2.2172682292875834e-05, -0.00016271841013804078, -5.054364737588912e-05, -9.655952453613281e-06, -5.9646406173706055, -0.00023651123046875, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -6.520748138427734e-05, -1.9073486328125e-06, -0.015619516372680664, 0.0, -0.0002689361572265625, -0.000102996826171875, -7.62939453125e-06, -0.00052642822265625, -7.62939453125e-06, 0.0, -5.14984130859375e-05, -0.0001964569091796875, -0.000141143798828125, -0.0028448104858398438, -1.9073486328125e-06, -6.687641143798828e-05, 0.0, -3.8146565202623606e-05, 0.0, -1.71661376953125e-05, -0.000164031982421875, -0.0003376007080078125, -0.00011765892850235105, 0.0, -0.0016803741455078125, -1.9073486328125e-06, -8.392333984375e-05, -0.00054168701171875, -0.0005588531494140625, -0.009445634670555592, -3.62396240234375e-05, -0.0004711151123046875, -0.0030508041381835938, -6.67572021484375e-05, -0.0002956390380859375, -0.00131988525390625, -3.814697265625e-06, -0.0001748795184539631, -1.7404556274414062e-05, -0.0001468658447265625], "score": -6.006364426986693, "model_output": {"hole4": "player", "hole0": "HealingTouch", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 8, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Healing Touch", "_type": "Str"}, {"_type": "Template67"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 5, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n"}, {"choice_history": [121, 200, "Healing", "Touch", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Healing", " ", "Touch", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "8", "<EOS>", 110], "score_history": [-0.000202178955078125, -0.0001049041748046875, -2.3841830625315197e-06, -7.5101784204889555e-06, -7.390974587906385e-06, -1.192074705613777e-07, -1.7642974853515625e-05, -1.3947486877441406e-05, -0.000118255615234375, -0.0012187957763671875, -3.814697265625e-06, -8.392333984375e-05, -5.7220458984375e-05, -1.71661376953125e-05, -0.0008697509765625, -7.62939453125e-06, -2.86102294921875e-05, -2.2172682292875834e-05, -0.00016271841013804078, -5.054364737588912e-05, -9.655952453613281e-06, -0.00475311279296875, -4.38690185546875e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -4.2319297790527344e-05, -1.9073486328125e-06, -6.192708969116211, -1.9073486328125e-06, -0.00028228759765625, -0.00028228759765625, -4.1961669921875e-05, -0.000701904296875, -4.38690185546875e-05, 0.0, -0.0002040863037109375, -9.918212890625e-05, -0.0001811981201171875, -0.0023784637451171875, 0.0, -5.352497100830078e-05, 0.0, -3.683529939735308e-05, 0.0, -1.52587890625e-05, -0.0001220703125, -0.0003452301025390625, -0.00012147381494287401, 0.0, -0.001605987548828125, -1.9073486328125e-06, -8.96453857421875e-05, -0.0004730224609375, -0.0005207061767578125, -0.00966254249215126, -3.62396240234375e-05, -0.0004405975341796875, -0.0030841827392578125, -6.67572021484375e-05, -0.0002880096435546875, -0.0012979507446289062, -3.814697265625e-06, -0.0001806015061447397, -1.7404556274414062e-05, -0.0001430511474609375], "score": -6.223386196998035, "model_output": {"hole4": "player", "hole0": "HealingTouch", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 8, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Healing Touch", "_type": "Str"}, {"_type": "Template61"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n"}, {"choice_history": [121, 200, "Healing", "Touch", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Healing", " ", "Touch", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "#", "<EOS>", 320, 110], "score_history": [-0.000202178955078125, -0.0001049041748046875, -2.3841830625315197e-06, -7.5101784204889555e-06, -7.390974587906385e-06, -1.192074705613777e-07, -1.7642974853515625e-05, -1.3947486877441406e-05, -0.000118255615234375, -0.0012187957763671875, -3.814697265625e-06, -8.392333984375e-05, -5.7220458984375e-05, -1.71661376953125e-05, -0.0008697509765625, -7.62939453125e-06, -2.86102294921875e-05, -2.2172682292875834e-05, -0.00016271841013804078, -5.054364737588912e-05, -9.655952453613281e-06, -0.00475311279296875, -4.38690185546875e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -4.2319297790527344e-05, -1.9073486328125e-06, -0.010179638862609863, 0.0, -9.72747802734375e-05, -9.72747802734375e-05, -9.5367431640625e-06, -0.0006008148193359375, -9.5367431640625e-06, 0.0, -4.9591064453125e-05, -0.00017547607421875, -0.0001316070556640625, -0.0023126602172851562, -1.9073486328125e-06, -5.543231964111328e-05, 0.0, -3.504720370983705e-05, 0.0, -1.71661376953125e-05, -0.00016021728515625, -0.000316619873046875, -0.00012159276229795069, 0.0, -0.00164031982421875, -1.9073486328125e-06, -8.58306884765625e-05, -0.00052642822265625, -0.0005779266357421875, -6.381435394287109, -2.0265579223632812e-06, -3.62396240234375e-05, -0.2369537353515625], "score": -6.643484468568204, "model_output": {"hole4": "player", "hole0": "HealingTouch", "hole6": [{"_type": "Template19"}, {"hole1": "#", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Healing Touch", "_type": "Str"}, {"_type": "Template61"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.#(self)\n"}, {"choice_history": [121, 200, "Healing", "Touch", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Healing", " ", "Touch", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "8", "<EOS>", 110], "score_history": [-0.000202178955078125, -0.0001049041748046875, -2.3841830625315197e-06, -7.5101784204889555e-06, -7.390974587906385e-06, -1.192074705613777e-07, -1.7642974853515625e-05, -1.3947486877441406e-05, -0.000118255615234375, -0.0012187957763671875, -3.814697265625e-06, -8.392333984375e-05, -5.7220458984375e-05, -1.71661376953125e-05, -0.0008697509765625, -7.62939453125e-06, -2.86102294921875e-05, -2.2172682292875834e-05, -0.00016271841013804078, -5.054364737588912e-05, -9.655952453613281e-06, -6.768230438232422, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.161762237548828e-05, -1.9073486328125e-06, -0.011753082275390625, 0.0, -8.392333984375e-05, -9.5367431640625e-05, -7.62939453125e-06, -0.00048065185546875, -9.5367431640625e-06, 0.0, -5.14984130859375e-05, -0.000194549560546875, -0.000141143798828125, -0.0029277801513671875, -1.9073486328125e-06, -6.306171417236328e-05, 0.0, -3.8027355913072824e-05, 0.0, -1.71661376953125e-05, -0.000164031982421875, -0.0003452301025390625, -0.0001167053560493514, 0.0, -0.0016651153564453125, -1.9073486328125e-06, -8.392333984375e-05, -0.000537872314453125, -0.0005645751953125, -0.009422410279512405, -3.62396240234375e-05, -0.0004787445068359375, -0.0030374526977539062, -6.67572021484375e-05, -0.000293731689453125, -0.0013208389282226562, -3.814697265625e-06, -0.00017285297508351505, -1.7404556274414062e-05, -0.0001468658447265625], "score": -6.805651171660429, "model_output": {"hole4": "player", "hole0": "HealingTouch", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 8, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Healing Touch", "_type": "Str"}, {"_type": "Template63"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 4, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n"}, {"choice_history": [121, 200, "Healing", "Touch", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Healing", " ", "Touch", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "8", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "score_history": [-0.000202178955078125, -0.0001049041748046875, -2.3841830625315197e-06, -7.5101784204889555e-06, -7.390974587906385e-06, -1.192074705613777e-07, -1.7642974853515625e-05, -1.3947486877441406e-05, -0.000118255615234375, -0.0012187957763671875, -3.814697265625e-06, -8.392333984375e-05, -5.7220458984375e-05, -1.71661376953125e-05, -0.0008697509765625, -7.62939453125e-06, -2.86102294921875e-05, -2.2172682292875834e-05, -0.00016271841013804078, -5.054364737588912e-05, -9.655952453613281e-06, -0.00475311279296875, -4.38690185546875e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -4.2319297790527344e-05, -1.9073486328125e-06, -0.010179638862609863, 0.0, -9.72747802734375e-05, -9.72747802734375e-05, -9.5367431640625e-06, -0.0006008148193359375, -9.5367431640625e-06, 0.0, -4.9591064453125e-05, -0.00017547607421875, -0.0001316070556640625, -0.0023126602172851562, -1.9073486328125e-06, -5.543231964111328e-05, 0.0, -3.504720370983705e-05, 0.0, -1.71661376953125e-05, -0.00016021728515625, -0.000316619873046875, -0.00012159276229795069, 0.0, -6.599577903747559, -3.24249267578125e-05, -0.0001373291015625, -5.7220458984375e-06, -0.00865936279296875, -0.005418098997324705, -1.9073486328125e-06, -0.002468109130859375, -0.004124641418457031, -4.57763671875e-05, -0.00041961669921875, -0.002407073974609375, -2.0265579223632812e-06, -0.0001744031615089625, -7.748603820800781e-06, -0.0001049041748046875, -0.2592306137084961, -2.47955322265625e-05, -0.0004482269287109375, -0.0002727508544921875, -0.012136459350585938, -0.002743840217590332, -1.9073486328125e-06], "score": -6.920670303017687, "model_output": {"hole4": "player", "hole0": "HealingTouch", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 8, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "draw", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Healing Touch", "_type": "Str"}, {"_type": "Template61"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n        player.draw()\n"}, {"choice_history": [121, 200, "Healing", "Touch", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Healing", " ", "Touch", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "8", "<EOS>", 320, 110], "score_history": [-0.000202178955078125, -0.0001049041748046875, -2.3841830625315197e-06, -7.5101784204889555e-06, -7.390974587906385e-06, -1.192074705613777e-07, -1.7642974853515625e-05, -1.3947486877441406e-05, -0.000118255615234375, -0.0012187957763671875, -3.814697265625e-06, -8.392333984375e-05, -5.7220458984375e-05, -1.71661376953125e-05, -0.0008697509765625, -7.62939453125e-06, -2.86102294921875e-05, -2.2172682292875834e-05, -0.00016271841013804078, -5.054364737588912e-05, -9.655952453613281e-06, -0.00475311279296875, -4.38690185546875e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -4.2319297790527344e-05, -1.9073486328125e-06, -0.010179638862609863, 0.0, -9.72747802734375e-05, -9.72747802734375e-05, -9.5367431640625e-06, -0.0006008148193359375, -9.5367431640625e-06, 0.0, -4.9591064453125e-05, -0.00017547607421875, -0.0001316070556640625, -0.0023126602172851562, -1.9073486328125e-06, -5.543231964111328e-05, 0.0, -3.504720370983705e-05, 0.0, -1.71661376953125e-05, -0.00016021728515625, -0.000316619873046875, -0.00012159276229795069, 0.0, -0.00164031982421875, -1.9073486328125e-06, -8.58306884765625e-05, -0.00052642822265625, -0.0005779266357421875, -5.501017093658447, -3.933906555175781e-06, -7.43865966796875e-05, -1.4395313262939453], "score": -6.9656838132032135, "model_output": {"hole4": "player", "hole0": "HealingTouch", "hole6": [{"_type": "Template19"}, {"hole1": "8", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Healing Touch", "_type": "Str"}, {"_type": "Template61"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.8(self)\n"}, {"choice_history": [121, 200, "Healing", "Touch", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Healing", " ", "Touch", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "Healing", "<EOS>", 320, 110], "score_history": [-0.000202178955078125, -0.0001049041748046875, -2.3841830625315197e-06, -7.5101784204889555e-06, -7.390974587906385e-06, -1.192074705613777e-07, -1.7642974853515625e-05, -1.3947486877441406e-05, -0.000118255615234375, -0.0012187957763671875, -3.814697265625e-06, -8.392333984375e-05, -5.7220458984375e-05, -1.71661376953125e-05, -0.0008697509765625, -7.62939453125e-06, -2.86102294921875e-05, -2.2172682292875834e-05, -0.00016271841013804078, -5.054364737588912e-05, -9.655952453613281e-06, -0.00475311279296875, -4.38690185546875e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -4.2319297790527344e-05, -1.9073486328125e-06, -0.010179638862609863, 0.0, -9.72747802734375e-05, -9.72747802734375e-05, -9.5367431640625e-06, -0.0006008148193359375, -9.5367431640625e-06, 0.0, -4.9591064453125e-05, -0.00017547607421875, -0.0001316070556640625, -0.0023126602172851562, -1.9073486328125e-06, -5.543231964111328e-05, 0.0, -3.504720370983705e-05, 0.0, -1.71661376953125e-05, -0.00016021728515625, -0.000316619873046875, -0.00012159276229795069, 0.0, -0.00164031982421875, -1.9073486328125e-06, -8.58306884765625e-05, -0.00052642822265625, -0.0005779266357421875, -6.494888782501221, -0.0008454322814941406, -0.00011444091796875, -0.5596456527709961], "score": -7.080551381219266, "model_output": {"hole4": "player", "hole0": "HealingTouch", "hole6": [{"_type": "Template19"}, {"hole1": "Healing", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Healing Touch", "_type": "Str"}, {"_type": "Template61"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.Healing(self)\n"}, {"choice_history": [121, 200, "Healing", "Touch", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Healing", " ", "Touch", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "8", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "score_history": [-0.000202178955078125, -0.0001049041748046875, -2.3841830625315197e-06, -7.5101784204889555e-06, -7.390974587906385e-06, -1.192074705613777e-07, -1.7642974853515625e-05, -1.3947486877441406e-05, -0.000118255615234375, -0.0012187957763671875, -3.814697265625e-06, -8.392333984375e-05, -5.7220458984375e-05, -1.71661376953125e-05, -0.0008697509765625, -7.62939453125e-06, -2.86102294921875e-05, -2.2172682292875834e-05, -0.00016271841013804078, -5.054364737588912e-05, -9.655952453613281e-06, -0.00475311279296875, -4.38690185546875e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -4.2319297790527344e-05, -1.9073486328125e-06, -0.010179638862609863, 0.0, -9.72747802734375e-05, -9.72747802734375e-05, -9.5367431640625e-06, -0.0006008148193359375, -9.5367431640625e-06, 0.0, -4.9591064453125e-05, -0.00017547607421875, -0.0001316070556640625, -0.0023126602172851562, -1.9073486328125e-06, -5.543231964111328e-05, 0.0, -3.504720370983705e-05, 0.0, -1.71661376953125e-05, -0.00016021728515625, -0.000316619873046875, -0.00012159276229795069, 0.0, -0.00164031982421875, -1.9073486328125e-06, -8.58306884765625e-05, -0.00052642822265625, -0.0005779266357421875, -5.501017093658447, -3.933906555175781e-06, -7.43865966796875e-05, -0.7745075225830078, -0.01168060302734375, -0.849384605884552, -0.0025743204168975353], "score": -7.164299538821069, "model_output": {"hole4": "player", "hole0": "HealingTouch", "hole6": [{"_type": "Template19"}, {"hole1": "8", "hole2": [{"_type": "Template30", "hole0": "<UNK>"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Healing Touch", "_type": "Str"}, {"_type": "Template61"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.8(Buff(<UNK>()))\n"}, {"choice_history": [121, 200, "Healing", "Touch", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Healing", " ", "Touch", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "8", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.000202178955078125, -0.0001049041748046875, -2.3841830625315197e-06, -7.5101784204889555e-06, -7.390974587906385e-06, -1.192074705613777e-07, -1.7642974853515625e-05, -1.3947486877441406e-05, -0.000118255615234375, -0.0012187957763671875, -3.814697265625e-06, -8.392333984375e-05, -5.7220458984375e-05, -1.71661376953125e-05, -0.0008697509765625, -7.62939453125e-06, -2.86102294921875e-05, -2.2172682292875834e-05, -0.00016271841013804078, -5.054364737588912e-05, -9.655952453613281e-06, -0.00475311279296875, -4.38690185546875e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -4.2319297790527344e-05, -1.9073486328125e-06, -0.010179638862609863, 0.0, -9.72747802734375e-05, -9.72747802734375e-05, -9.5367431640625e-06, -0.0006008148193359375, -9.5367431640625e-06, 0.0, -4.9591064453125e-05, -0.00017547607421875, -0.0001316070556640625, -0.0023126602172851562, -1.9073486328125e-06, -5.543231964111328e-05, 0.0, -3.504720370983705e-05, 0.0, -1.71661376953125e-05, -0.00016021728515625, -0.000316619873046875, -0.00012159276229795069, 0.0, -0.00164031982421875, -1.9073486328125e-06, -8.58306884765625e-05, -0.00052642822265625, -0.0005779266357421875, -5.501017093658447, -3.933906555175781e-06, -7.43865966796875e-05, -0.7745075225830078, -0.01168060302734375, -0.8524945378303528, -1.1563301086425781e-05], "score": -7.164846713651059, "model_output": {"hole4": "player", "hole0": "HealingTouch", "hole6": [{"_type": "Template19"}, {"hole1": "8", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Healing Touch", "_type": "Str"}, {"_type": "Template61"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.8(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Healing", "Touch", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Healing", " ", "Touch", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "Health", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "score_history": [-0.000202178955078125, -0.0001049041748046875, -2.3841830625315197e-06, -7.5101784204889555e-06, -7.390974587906385e-06, -1.192074705613777e-07, -1.7642974853515625e-05, -1.3947486877441406e-05, -0.000118255615234375, -0.0012187957763671875, -3.814697265625e-06, -8.392333984375e-05, -5.7220458984375e-05, -1.71661376953125e-05, -0.0008697509765625, -7.62939453125e-06, -2.86102294921875e-05, -2.2172682292875834e-05, -0.00016271841013804078, -5.054364737588912e-05, -9.655952453613281e-06, -0.00475311279296875, -4.38690185546875e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -4.2319297790527344e-05, -1.9073486328125e-06, -0.010179638862609863, 0.0, -9.72747802734375e-05, -9.72747802734375e-05, -9.5367431640625e-06, -0.0006008148193359375, -9.5367431640625e-06, 0.0, -4.9591064453125e-05, -0.00017547607421875, -0.0001316070556640625, -0.0023126602172851562, -1.9073486328125e-06, -5.543231964111328e-05, 0.0, -3.504720370983705e-05, 0.0, -1.71661376953125e-05, -0.00016021728515625, -0.000316619873046875, -0.00012159276229795069, 0.0, -0.00164031982421875, -1.9073486328125e-06, -8.58306884765625e-05, -0.00052642822265625, -0.0005779266357421875, -6.92113733291626, -1.1920928244535389e-07, -6.103515625e-05, -0.1463479995727539, -0.0035305023193359375, -0.5357462763786316, -0.0019857860170304775], "score": -7.63386612431713, "model_output": {"hole4": "player", "hole0": "HealingTouch", "hole6": [{"_type": "Template19"}, {"hole1": "Health", "hole2": [{"_type": "Template30", "hole0": "<UNK>"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Healing Touch", "_type": "Str"}, {"_type": "Template61"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.Health(Buff(<UNK>()))\n"}, {"choice_history": [121, 200, "Healing", "Touch", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Healing", " ", "Touch", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "8", "<EOS>", 110], "score_history": [-0.000202178955078125, -0.0001049041748046875, -2.3841830625315197e-06, -7.5101784204889555e-06, -7.390974587906385e-06, -1.192074705613777e-07, -1.7642974853515625e-05, -1.3947486877441406e-05, -0.000118255615234375, -7.155303955078125, -0.00011444091796875, -3.71926071238704e-05, -0.0001692771475063637, -3.576272320060525e-06, 0.0, -4.470347266760655e-05, 0.0, -0.2919292449951172, 0.0, -0.011697769165039062, -7.62939453125e-06, -0.0003663301467895508, 0.0, -4.69675287604332e-05, 0.0, -1.71661376953125e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.823896491259802e-05, -1.9073486328125e-06, -0.008710861206054688, -5.7220458984375e-06, -0.013545989990234375, -0.000789642333984375, -0.4912433624267578, -0.016882289201021194, -7.62939453125e-06, -0.0005359649658203125, -0.0017461776733398438, -4.76837158203125e-05, -0.0002765655517578125, -0.0023299455642700195, -2.0265579223632812e-06, -0.00014507758896797895, -1.7523765563964844e-05, -0.0001163482666015625], "score": -7.996650801965188, "model_output": {"hole4": "player", "hole0": "HealingTouch", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 8, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Healing Touch"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n"}, {"choice_history": [121, 200, "Healing", "Touch", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Healing", " ", "Touch", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "8", "<EOS>", 110], "score_history": [-0.000202178955078125, -0.0001049041748046875, -2.3841830625315197e-06, -7.5101784204889555e-06, -7.390974587906385e-06, -1.192074705613777e-07, -1.7642974853515625e-05, -1.3947486877441406e-05, -0.000118255615234375, -7.155303955078125, -0.00011444091796875, -3.71926071238704e-05, -0.0001692771475063637, -3.576272320060525e-06, 0.0, -4.470347266760655e-05, 0.0, -0.2919292449951172, 0.0, -0.011697769165039062, -7.62939453125e-06, -0.0003663301467895508, 0.0, -4.69675287604332e-05, 0.0, -1.71661376953125e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.823896491259802e-05, -1.9073486328125e-06, -0.008710861206054688, -5.7220458984375e-06, -0.013545989990234375, -0.000789642333984375, -0.9752416610717773, -1.71661376953125e-05, -0.059696197509765625, -0.003136277198791504, -1.9073486328125e-06, -0.07257138937711716, 0.0, -0.00690460205078125, -0.0017042160034179688, -0.000209808349609375, -0.000171661376953125, -0.0008411407470703125, -2.384185791015625e-06, -0.0003001614531967789, -2.7060508728027344e-05, -9.72747802734375e-05], "score": -8.604223115392415, "model_output": {"hole4": "player", "hole0": "HealingTouch", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 8, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 3, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Healing Touch"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.heal(player.effective_heal_power(8), self)\n"}], "index": 47}
{"beams": [{"choice_history": [121, 200, "Hex", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hex", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 126, 155, 320, 73, 186, "frog", "<EOS>", 37, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", "Frog", "<EOS>", 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "frog", "<EOS>", "create_minion", "<EOS>", 320, 74, 187, "Null", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", 25, 186, "frog", "<EOS>", 145, 250, 41, "<UNK>", "<EOS>", 320, 73, 186, "minion", "<EOS>"], "score_history": [-5.7220458984375e-06, -0.0001773834228515625, -3.71926071238704e-05, -1.1324880688334815e-05, -2.264967406517826e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0007476806640625, -0.0001926422119140625, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001621246337890625, -2.6702880859375e-05, -5.340576171875e-05, -1.1444091796875e-05, -8.7738037109375e-05, -7.152555099310121e-07, -1.537799835205078e-05, -0.02490234375, -0.00031280517578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00010561943054199219, -1.9073486328125e-06, -0.0007381439208984375, 0.0, -0.001651763916015625, -0.0004825592041015625, -6.103515625e-05, -2.09808349609375e-05, -0.00060272216796875, -2.47955322265625e-05, -0.001544952392578125, -2.86102294921875e-05, 0.0, -4.279613494873047e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -3.4332275390625e-05, -1.9431114196777344e-05, 0.0, -0.129150390625, -0.0003204345703125, -1.7062129974365234, -2.09808349609375e-05, -5.7220458984375e-06, -0.02695178985595703, -0.000583648681640625, -0.06759415566921234, -2.1457672119140625e-06, -0.10180091857910156, -0.000179290771484375, -0.0015811920166015625, 0.0, -0.00040435791015625, 0.0, -0.5458698272705078, -5.7220458984375e-06, -0.003979682922363281, -0.004403123632073402, -3.814697265625e-06, -0.0022135928738862276, 0.0, -0.001814787625335157, -1.1920922133867862e-06, -0.014744563028216362, -0.002699850592762232, -0.010467529296875, -1.1444091796875e-05, -9.5367431640625e-06, -2.6702880859375e-05, 0.0, -0.006436586380004883, -1.1920928244535389e-07, -0.0001983642578125, -0.00086212158203125, -7.2479248046875e-05, 0.0, -0.0145263671875, -1.9073486328125e-06, -0.08366942405700684, -1.0728830375228426e-06, -0.009709477424621582, 0.0, -0.0012054443359375, -0.01854419708251953, -0.0003185272216796875, -0.0014790259301662445, -3.4570680327306036e-06, -0.008365631103515625, -1.9073486328125e-06, -1.71661376953125e-05, -0.0001430511474609375, -1.9073486328125e-06, -0.0003299713134765625, 0.0, -0.00156402587890625, -0.0006164312362670898, -0.006067833863198757, -1.9073486328125e-06, -0.0074291229248046875, -5.7220458984375e-06, -0.2601820230484009, -1.3470649719238281e-05, -0.011480331420898438, -0.0011959075927734375, -9.5367431640625e-05, -0.014389872550964355, 0.0, -2.47955322265625e-05, -0.002685546875, -5.14984130859375e-05, -0.0014580488204956055, -1.9073486328125e-06], "score": -3.106445723556014, "model_output": {"hole4": "player", "hole0": "Hex", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "Frog", "_type": "Template43", "hole0": {"attr": "<UNK>", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, "targets": [{"_type": "Name", "id": "frog"}], "_type": "Assign"}, {"value": {"func": {"attr": "create_minion", "value": {"_type": "Name", "id": "frog"}, "_type": "Attribute"}, "_type": "Call", "args": [{"value": "Null", "_type": "NameConstant"}]}, "targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign"}, {"value": {"_type": "Name", "id": "frog"}, "targets": [{"attr": "card", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}], "_type": "Assign"}, {"hole1": "<UNK>", "hole2": [{"_type": "Name", "id": "minion"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hex", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        frog = hearthbreaker.cards.minions.<UNK>.Frog()\n        minion = frog.create_minion(Null)\n        minion.card = frog\n        self.target.<UNK>(minion)\n"}, {"choice_history": [121, 200, "Hex", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hex", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "score_history": [-5.7220458984375e-06, -0.0001773834228515625, -3.71926071238704e-05, -1.1324880688334815e-05, -2.264967406517826e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0007476806640625, -0.0001926422119140625, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001621246337890625, -2.6702880859375e-05, -5.340576171875e-05, -1.1444091796875e-05, -8.7738037109375e-05, -7.152555099310121e-07, -1.537799835205078e-05, -0.02490234375, -0.00031280517578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00010561943054199219, -1.9073486328125e-06, -0.0007381439208984375, 0.0, -0.001651763916015625, -0.0004825592041015625, -6.103515625e-05, -2.09808349609375e-05, -0.00060272216796875, -2.47955322265625e-05, -0.001544952392578125, -2.86102294921875e-05, 0.0, -4.279613494873047e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -3.4332275390625e-05, -1.9431114196777344e-05, 0.0, -2.1762571334838867, -0.000141143798828125, -0.0005035400390625, -0.0003147125244140625, -0.23453426361083984, -0.1588810533285141, 0.0, -9.5367431640625e-06, -0.12464332580566406, -0.00264739990234375, -0.7882102727890015, -0.017601758241653442], "score": -3.5359784506688356, "model_output": {"hole4": "player", "hole0": "Hex", "hole6": [{"_type": "Template19"}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "<UNK>"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hex", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n"}, {"choice_history": [121, 200, "Hex", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hex", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "0/1", "<EOS>"], "score_history": [-5.7220458984375e-06, -0.0001773834228515625, -3.71926071238704e-05, -1.1324880688334815e-05, -2.264967406517826e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0007476806640625, -0.0001926422119140625, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001621246337890625, -2.6702880859375e-05, -5.340576171875e-05, -1.1444091796875e-05, -8.7738037109375e-05, -7.152555099310121e-07, -1.537799835205078e-05, -0.02490234375, -0.00031280517578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00010561943054199219, -1.9073486328125e-06, -0.0007381439208984375, 0.0, -0.001651763916015625, -0.0004825592041015625, -6.103515625e-05, -2.09808349609375e-05, -0.00060272216796875, -2.47955322265625e-05, -0.001544952392578125, -2.86102294921875e-05, 0.0, -4.279613494873047e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -3.4332275390625e-05, -1.9431114196777344e-05, 0.0, -2.1762571334838867, -0.000141143798828125, -0.0005035400390625, -0.0003147125244140625, -0.23453426361083984, -0.1588810533285141, 0.0, -9.5367431640625e-06, -0.12464332580566406, -0.00264739990234375, -1.1887636184692383, -0.017601758241653442], "score": -3.9365317963490725, "model_output": {"hole4": "player", "hole0": "Hex", "hole6": [{"_type": "Template19"}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "0/1"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hex", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(0/1()))\n"}, {"choice_history": [121, 200, "Hex", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hex", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 126, 155, 320, 73, 186, "frog", "<EOS>", 37, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "frog", "<EOS>", "create_minion", "<EOS>", 320, 74, 187, "Null", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", 25, 186, "frog", "<EOS>", 145, 250, 41, "<UNK>", "<EOS>", 320, 73, 186, "minion", "<EOS>"], "score_history": [-5.7220458984375e-06, -0.0001773834228515625, -3.71926071238704e-05, -1.1324880688334815e-05, -2.264967406517826e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0007476806640625, -0.0001926422119140625, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001621246337890625, -2.6702880859375e-05, -5.340576171875e-05, -1.1444091796875e-05, -8.7738037109375e-05, -7.152555099310121e-07, -1.537799835205078e-05, -0.02490234375, -0.00031280517578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00010561943054199219, -1.9073486328125e-06, -0.0007381439208984375, 0.0, -0.001651763916015625, -0.0004825592041015625, -6.103515625e-05, -2.09808349609375e-05, -0.00060272216796875, -2.47955322265625e-05, -0.001544952392578125, -2.86102294921875e-05, 0.0, -4.279613494873047e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -3.4332275390625e-05, -1.9431114196777344e-05, 0.0, -0.129150390625, -0.0003204345703125, -1.7062129974365234, -2.09808349609375e-05, -5.7220458984375e-06, -0.02695178985595703, -0.000583648681640625, -0.06759415566921234, -2.1457672119140625e-06, -0.10180091857910156, -0.000179290771484375, -0.0015811920166015625, 0.0, -0.00040435791015625, 0.0, -0.8878116607666016, -0.0068000550381839275, 0.0, -0.030512237921357155, -1.1920928244535389e-07, -0.7566608786582947, -0.00024053631932474673, -0.051494598388671875, -9.5367431640625e-06, -5.7220458984375e-06, -0.025821685791015625, -3.814697265625e-06, -0.009289026260375977, 0.0, -0.0003337860107421875, -0.00145721435546875, -0.0001316070556640625, 0.0, -0.029478073120117188, -1.9073486328125e-06, -0.08333027362823486, -2.7418097943154862e-06, -0.010723710060119629, 0.0, -0.0008792877197265625, -0.022866249084472656, -0.000209808349609375, -0.0017216145060956478, -3.8146954466355965e-06, -0.0071620941162109375, -1.9073486328125e-06, -1.52587890625e-05, -0.0001354217529296875, -1.9073486328125e-06, -0.0003452301025390625, 0.0, -0.001574397087097168, -0.0006049871444702148, -0.006484589539468288, -1.9073486328125e-06, -0.008087158203125, -5.7220458984375e-06, -0.255851149559021, -1.3470649719238281e-05, -0.01129150390625, -0.001224517822265625, -9.5367431640625e-05, -0.014541029930114746, 0.0, -2.6702880859375e-05, -0.0026798248291015625, -4.76837158203125e-05, -0.0015065670013427734, -1.9073486328125e-06], "score": -4.298532600650553, "model_output": {"hole4": "player", "hole0": "Hex", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "<UNK>", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, "targets": [{"_type": "Name", "id": "frog"}], "_type": "Assign"}, {"value": {"func": {"attr": "create_minion", "value": {"_type": "Name", "id": "frog"}, "_type": "Attribute"}, "_type": "Call", "args": [{"value": "Null", "_type": "NameConstant"}]}, "targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign"}, {"value": {"_type": "Name", "id": "frog"}, "targets": [{"attr": "card", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}], "_type": "Assign"}, {"hole1": "<UNK>", "hole2": [{"_type": "Name", "id": "minion"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hex", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        frog = hearthbreaker.cards.minions.<UNK>()\n        minion = frog.create_minion(Null)\n        minion.card = frog\n        self.target.<UNK>(minion)\n"}, {"choice_history": [121, 200, "Hex", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hex", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 126, 155, 320, 73, 186, "frog", "<EOS>", 37, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "Frog", "<EOS>", 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "frog", "<EOS>", "create_minion", "<EOS>", 320, 74, 187, "Null", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", 25, 186, "frog", "<EOS>", 145, 250, 41, "<UNK>", "<EOS>", 320, 73, 186, "minion", "<EOS>"], "score_history": [-5.7220458984375e-06, -0.0001773834228515625, -3.71926071238704e-05, -1.1324880688334815e-05, -2.264967406517826e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0007476806640625, -0.0001926422119140625, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001621246337890625, -2.6702880859375e-05, -5.340576171875e-05, -1.1444091796875e-05, -8.7738037109375e-05, -7.152555099310121e-07, -1.537799835205078e-05, -0.02490234375, -0.00031280517578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00010561943054199219, -1.9073486328125e-06, -0.0007381439208984375, 0.0, -0.001651763916015625, -0.0004825592041015625, -6.103515625e-05, -2.09808349609375e-05, -0.00060272216796875, -2.47955322265625e-05, -0.001544952392578125, -2.86102294921875e-05, 0.0, -4.279613494873047e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -3.4332275390625e-05, -1.9431114196777344e-05, 0.0, -0.129150390625, -0.0003204345703125, -1.7062129974365234, -2.09808349609375e-05, -5.7220458984375e-06, -0.02695178985595703, -0.000583648681640625, -0.06759415566921234, -2.1457672119140625e-06, -0.10180091857910156, -0.000179290771484375, -0.0015811920166015625, 0.0, -0.00040435791015625, 0.0, -0.8878116607666016, -0.0068000550381839275, 0.0, -0.030512237921357155, -1.1920928244535389e-07, -0.8358824253082275, -0.00443610455840826, -0.007415771484375, -3.814697265625e-06, -5.7220458984375e-06, -0.000171661376953125, -1.9073486328125e-06, -0.005614638328552246, -1.1920928244535389e-07, -0.0002231597900390625, -0.001499176025390625, -7.62939453125e-05, 0.0, -0.02036571502685547, 0.0, -0.08697593212127686, -2.3841830625315197e-06, -0.009080886840820312, 0.0, -0.0010547637939453125, -0.02389049530029297, -0.0001888275146484375, -0.0014144121669232845, -3.8146954466355965e-06, -0.0068454742431640625, -1.9073486328125e-06, -1.52587890625e-05, -0.0001468658447265625, -1.9073486328125e-06, -0.000339508056640625, 0.0, -0.0015953779220581055, -0.0006145238876342773, -0.006478390656411648, -1.9073486328125e-06, -0.007996559143066406, -5.7220458984375e-06, -0.25423991680145264, -1.3470649719238281e-05, -0.011270523071289062, -0.00122833251953125, -9.5367431640625e-05, -0.014533519744873047, 0.0, -2.47955322265625e-05, -0.0026721954345703125, -4.76837158203125e-05, -0.0014798641204833984, -1.9073486328125e-06], "score": -4.300125412867359, "model_output": {"hole4": "player", "hole0": "Hex", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "Frog", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, "targets": [{"_type": "Name", "id": "frog"}], "_type": "Assign"}, {"value": {"func": {"attr": "create_minion", "value": {"_type": "Name", "id": "frog"}, "_type": "Attribute"}, "_type": "Call", "args": [{"value": "Null", "_type": "NameConstant"}]}, "targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign"}, {"value": {"_type": "Name", "id": "frog"}, "targets": [{"attr": "card", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}], "_type": "Assign"}, {"hole1": "<UNK>", "hole2": [{"_type": "Name", "id": "minion"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hex", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        frog = hearthbreaker.cards.minions.Frog()\n        minion = frog.create_minion(Null)\n        minion.card = frog\n        self.target.<UNK>(minion)\n"}, {"choice_history": [121, 200, "Hex", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hex", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>", 126, 155, 320, 65, 156, 41, "card", "<EOS>", 37, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "frog", "<EOS>", "create_minion", "<EOS>", 320, 74, 187, "Null", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", 25, 186, "frog", "<EOS>"], "score_history": [-5.7220458984375e-06, -0.0001773834228515625, -3.71926071238704e-05, -1.1324880688334815e-05, -2.264967406517826e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0007476806640625, -0.0001926422119140625, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001621246337890625, -2.6702880859375e-05, -5.340576171875e-05, -1.1444091796875e-05, -8.7738037109375e-05, -7.152555099310121e-07, -1.537799835205078e-05, -0.02490234375, -0.00031280517578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00010561943054199219, -1.9073486328125e-06, -0.0007381439208984375, 0.0, -0.001651763916015625, -0.0004825592041015625, -6.103515625e-05, -2.09808349609375e-05, -0.00060272216796875, -2.47955322265625e-05, -0.001544952392578125, -2.86102294921875e-05, 0.0, -4.279613494873047e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -3.4332275390625e-05, -1.9431114196777344e-05, 0.0, -0.129150390625, -0.0003204345703125, -0.2047119140625, -4.9591064453125e-05, -0.006587982177734375, -0.24789011478424072, 0.0, -1.52587890625e-05, -0.8156232833862305, -0.005847930908203125, -0.28590020537376404, -0.0037594360765069723, -0.031085968017578125, -8.7738037109375e-05, 0.0, -0.370849609375, -1.9073486328125e-06, -0.027370452880859375, -0.36363112926483154, 0.0, -1.4483613967895508, -8.20159912109375e-05, -0.02172565460205078, 0.0, -0.011101722717285156, 0.0, -0.026956558227539062, -0.00366197363473475, 0.0, -0.13688607513904572, 0.0, -0.07305837422609329, -4.768360213347478e-06, -0.036594390869140625, -5.7220458984375e-06, -7.62939453125e-06, -0.08457660675048828, -3.814697265625e-06, -0.021840453147888184, 0.0, -0.000644683837890625, -0.001331329345703125, -0.00012969970703125, 0.0, -0.0027093887329101562, -3.814697265625e-06, -0.08010125160217285, -5.960462772236497e-07, -0.007349371910095215, 0.0, -0.0026378631591796875, -0.019191741943359375, -0.001033782958984375, -0.002321474254131317, -3.099440846199286e-06, -0.009805679321289062, -1.9073486328125e-06, -1.71661376953125e-05, -0.000133514404296875, -1.9073486328125e-06, -0.0003147125244140625, 0.0, -0.001572728157043457, -0.0006107091903686523, -0.005612092092633247, -1.9073486328125e-06, -0.007046699523925781, -5.7220458984375e-06, -0.27453160285949707, -1.3470649719238281e-05], "score": -4.8071127303249455, "model_output": {"hole4": "player", "hole0": "Hex", "hole6": [{"_type": "Template19"}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "<UNK>"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "<UNK>", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, "targets": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}, {"value": {"func": {"attr": "create_minion", "value": {"_type": "Name", "id": "frog"}, "_type": "Attribute"}, "_type": "Call", "args": [{"value": "Null", "_type": "NameConstant"}]}, "targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign"}, {"value": {"_type": "Name", "id": "frog"}, "targets": [{"attr": "card", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hex", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n        self.target.card = hearthbreaker.cards.minions.<UNK>()\n        minion = frog.create_minion(Null)\n        minion.card = frog\n"}, {"choice_history": [121, 200, "Hex", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hex", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>", 126, 155, 320, 65, 156, 41, "card", "<EOS>", 25, 186, "frog", "<EOS>", 145, 250, 41, "<UNK>", "<EOS>", 320, 73, 186, "minion", "<EOS>", 145, 250, 41, "<UNK>", "<EOS>", 320, 73, 186, "minion", "<EOS>"], "score_history": [-5.7220458984375e-06, -0.0001773834228515625, -3.71926071238704e-05, -1.1324880688334815e-05, -2.264967406517826e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0007476806640625, -0.0001926422119140625, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001621246337890625, -2.6702880859375e-05, -5.340576171875e-05, -1.1444091796875e-05, -8.7738037109375e-05, -7.152555099310121e-07, -1.537799835205078e-05, -0.02490234375, -0.00031280517578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00010561943054199219, -1.9073486328125e-06, -0.0007381439208984375, 0.0, -0.001651763916015625, -0.0004825592041015625, -6.103515625e-05, -2.09808349609375e-05, -0.00060272216796875, -2.47955322265625e-05, -0.001544952392578125, -2.86102294921875e-05, 0.0, -4.279613494873047e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -3.4332275390625e-05, -1.9431114196777344e-05, 0.0, -0.129150390625, -0.0003204345703125, -0.2047119140625, -4.9591064453125e-05, -0.006587982177734375, -0.24789011478424072, 0.0, -1.52587890625e-05, -0.8156232833862305, -0.005847930908203125, -0.28590020537376404, -0.0037594360765069723, -0.031085968017578125, -8.7738037109375e-05, 0.0, -0.370849609375, -1.9073486328125e-06, -0.027370452880859375, -0.36363112926483154, 0.0, -1.597005844116211, -1.9073486328125e-06, -0.26928091049194336, -7.62939453125e-06, -0.018518447875976562, -0.000858306884765625, -2.09808349609375e-05, -0.0046654934994876385, -3.814697265625e-06, -4.57763671875e-05, -0.04619884490966797, -4.57763671875e-05, -0.03728592395782471, 0.0, -0.1256694793701172, -0.0016231536865234375, -0.0001373291015625, -0.09508180618286133, -1.9073486328125e-06, -0.00014495849609375, -0.11063861846923828, -1.52587890625e-05, -0.033391356468200684, -1.9073486328125e-06], "score": -4.86576308915005, "model_output": {"hole4": "player", "hole0": "Hex", "hole6": [{"_type": "Template19"}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "<UNK>"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"_type": "Name", "id": "frog"}, "targets": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}, {"hole1": "<UNK>", "hole2": [{"_type": "Name", "id": "minion"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "<UNK>", "hole2": [{"_type": "Name", "id": "minion"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hex", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n        self.target.card = frog\n        self.target.<UNK>(minion)\n        self.target.<UNK>(minion)\n"}, {"choice_history": [121, 200, "Hex", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hex", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>", 126, 155, 320, 73, 186, "minion", "<EOS>", 37, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", "Frog", "<EOS>", 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "frog", "<EOS>", "create_minion", "<EOS>", 320, 74, 187, "Null", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", 25, 186, "frog", "<EOS>"], "score_history": [-5.7220458984375e-06, -0.0001773834228515625, -3.71926071238704e-05, -1.1324880688334815e-05, -2.264967406517826e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0007476806640625, -0.0001926422119140625, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001621246337890625, -2.6702880859375e-05, -5.340576171875e-05, -1.1444091796875e-05, -8.7738037109375e-05, -7.152555099310121e-07, -1.537799835205078e-05, -0.02490234375, -0.00031280517578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00010561943054199219, -1.9073486328125e-06, -0.0007381439208984375, 0.0, -0.001651763916015625, -0.0004825592041015625, -6.103515625e-05, -2.09808349609375e-05, -0.00060272216796875, -2.47955322265625e-05, -0.001544952392578125, -2.86102294921875e-05, 0.0, -4.279613494873047e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -3.4332275390625e-05, -1.9431114196777344e-05, 0.0, -0.129150390625, -0.0003204345703125, -0.2047119140625, -4.9591064453125e-05, -0.006587982177734375, -0.24789011478424072, 0.0, -1.52587890625e-05, -0.8156232833862305, -0.005847930908203125, -0.28590020537376404, -0.0037594360765069723, -0.031085968017578125, -8.7738037109375e-05, 0.0, -1.1728191375732422, -4.38690185546875e-05, -0.6394721269607544, -2.1457672119140625e-06, -0.3925752639770508, -0.00020599365234375, -0.0048160552978515625, -3.814697265625e-06, -0.0003223419189453125, 0.0, -0.38973045349121094, -3.814697265625e-06, -0.0019540786743164062, -0.0017448599683120847, -9.5367431640625e-06, -0.002458930015563965, 0.0, -0.008584232069551945, -2.3841855067985307e-07, -0.051447588950395584, -0.0010320806177332997, -0.02579498291015625, -1.1444091796875e-05, -1.33514404296875e-05, -4.9591064453125e-05, 0.0, -0.010215163230895996, -1.1920928244535389e-07, -0.0003643035888671875, -0.000888824462890625, -8.392333984375e-05, 0.0, -0.0018835067749023438, -3.814697265625e-06, -0.08721721172332764, -2.3841855067985307e-07, -0.0073299407958984375, 0.0, -0.003856658935546875, -0.018800735473632812, -0.0009822845458984375, -0.002147074555978179, -2.861022494471399e-06, -0.009374618530273438, -1.9073486328125e-06, -1.71661376953125e-05, -0.0001316070556640625, -1.9073486328125e-06, -0.0002956390380859375, 0.0, -0.0015870332717895508, -0.0005916357040405273, -0.005413008388131857, -1.9073486328125e-06, -0.0063114166259765625, -5.7220458984375e-06, -0.27724456787109375, -1.3470649719238281e-05], "score": -4.891128758429822, "model_output": {"hole4": "player", "hole0": "Hex", "hole6": [{"_type": "Template19"}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "<UNK>"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "Frog", "_type": "Template43", "hole0": {"attr": "<UNK>", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, "targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign"}, {"value": {"func": {"attr": "create_minion", "value": {"_type": "Name", "id": "frog"}, "_type": "Attribute"}, "_type": "Call", "args": [{"value": "Null", "_type": "NameConstant"}]}, "targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign"}, {"value": {"_type": "Name", "id": "frog"}, "targets": [{"attr": "card", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hex", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n        minion = hearthbreaker.cards.minions.<UNK>.Frog()\n        minion = frog.create_minion(Null)\n        minion.card = frog\n"}, {"choice_history": [121, 200, "Hex", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hex", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frog", "<EOS>"], "score_history": [-5.7220458984375e-06, -0.0001773834228515625, -3.71926071238704e-05, -1.1324880688334815e-05, -2.264967406517826e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0007476806640625, -0.0001926422119140625, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001621246337890625, -2.6702880859375e-05, -5.340576171875e-05, -1.1444091796875e-05, -8.7738037109375e-05, -7.152555099310121e-07, -1.537799835205078e-05, -0.02490234375, -0.00031280517578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00010561943054199219, -1.9073486328125e-06, -0.0007381439208984375, 0.0, -0.001651763916015625, -0.0004825592041015625, -6.103515625e-05, -2.09808349609375e-05, -0.00060272216796875, -2.47955322265625e-05, -0.001544952392578125, -2.86102294921875e-05, 0.0, -4.279613494873047e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -3.4332275390625e-05, -1.9431114196777344e-05, 0.0, -2.1762571334838867, -0.000141143798828125, -0.0005035400390625, -0.0003147125244140625, -0.23453426361083984, -0.1588810533285141, 0.0, -9.5367431640625e-06, -0.12464332580566406, -0.00264739990234375, -1.8828624486923218, -0.28036606311798096], "score": -4.8933949314484835, "model_output": {"hole4": "player", "hole0": "Hex", "hole6": [{"_type": "Template19"}, {"hole1": "add_buff", "hole2": [{"_type": "Template30", "hole0": "Frog"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hex", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frog()))\n"}, {"choice_history": [121, 200, "Hex", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hex", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 126, 155, 320, 73, 186, "frog", "<EOS>", 37, 249, 17, 156, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", "Frog", "<EOS>", 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "frog", "<EOS>", "create_minion", "<EOS>", 320, 74, 187, "Null", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", 25, 186, "justice", "<EOS>", 145, 250, 41, "<UNK>", "<EOS>", 320, 73, 186, "minion", "<EOS>"], "score_history": [-5.7220458984375e-06, -0.0001773834228515625, -3.71926071238704e-05, -1.1324880688334815e-05, -2.264967406517826e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0007476806640625, -0.0001926422119140625, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001621246337890625, -2.6702880859375e-05, -5.340576171875e-05, -1.1444091796875e-05, -8.7738037109375e-05, -7.152555099310121e-07, -1.537799835205078e-05, -0.02490234375, -0.00031280517578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00010561943054199219, -1.9073486328125e-06, -0.0007381439208984375, 0.0, -0.001651763916015625, -0.0004825592041015625, -6.103515625e-05, -2.09808349609375e-05, -0.00060272216796875, -2.47955322265625e-05, -0.001544952392578125, -2.86102294921875e-05, 0.0, -4.279613494873047e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -3.4332275390625e-05, -1.9431114196777344e-05, 0.0, -0.129150390625, -0.0003204345703125, -1.7062129974365234, -2.09808349609375e-05, -5.7220458984375e-06, -0.02695178985595703, -0.000583648681640625, -0.06759415566921234, -2.1457672119140625e-06, -0.10180091857910156, -0.000179290771484375, -0.0015811920166015625, 0.0, -0.00040435791015625, 0.0, -0.5458698272705078, -5.7220458984375e-06, -0.003979682922363281, -0.004403123632073402, -3.814697265625e-06, -0.0022135928738862276, 0.0, -0.001814787625335157, -1.1920922133867862e-06, -0.014744563028216362, -0.002699850592762232, -0.010467529296875, -1.1444091796875e-05, -9.5367431640625e-06, -2.6702880859375e-05, 0.0, -0.006436586380004883, -1.1920928244535389e-07, -0.0001983642578125, -0.00086212158203125, -7.2479248046875e-05, 0.0, -0.0145263671875, -1.9073486328125e-06, -0.08366942405700684, -1.0728830375228426e-06, -0.009709477424621582, 0.0, -0.0012054443359375, -0.01854419708251953, -0.0003185272216796875, -0.0014790259301662445, -3.4570680327306036e-06, -0.008365631103515625, -1.9073486328125e-06, -1.71661376953125e-05, -0.0001430511474609375, -1.9073486328125e-06, -0.0003299713134765625, 0.0, -0.00156402587890625, -0.0006164312362670898, -0.006067833863198757, -1.9073486328125e-06, -0.0074291229248046875, -5.7220458984375e-06, -2.219411849975586, -0.00021159648895263672, -0.0009860992431640625, -0.0002117156982421875, -0.0016040802001953125, -0.025653481483459473, 0.0, -2.09808349609375e-05, -0.01699542999267578, -0.0001125335693359375, -0.0029053688049316406, -3.814697265625e-06], "score": -5.082983904860946, "model_output": {"hole4": "player", "hole0": "Hex", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "Frog", "_type": "Template43", "hole0": {"attr": "<UNK>", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, "targets": [{"_type": "Name", "id": "frog"}], "_type": "Assign"}, {"value": {"func": {"attr": "create_minion", "value": {"_type": "Name", "id": "frog"}, "_type": "Attribute"}, "_type": "Call", "args": [{"value": "Null", "_type": "NameConstant"}]}, "targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign"}, {"value": {"_type": "Name", "id": "justice"}, "targets": [{"attr": "card", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}], "_type": "Assign"}, {"hole1": "<UNK>", "hole2": [{"_type": "Name", "id": "minion"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hex", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        frog = hearthbreaker.cards.minions.<UNK>.Frog()\n        minion = frog.create_minion(Null)\n        minion.card = justice\n        self.target.<UNK>(minion)\n"}, {"choice_history": [121, 200, "Hex", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hex", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 68, 163, 25, 186, "Deathrattle", "<EOS>", 321, 68, 163, 25, 186, "Summon", "<EOS>", 320, 65, 156, 41, "card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 126, 155, 320, 65, 156, 41, "card", "<EOS>", 25, 186, "frog", "<EOS>", 145, 250, 41, "<UNK>", "<EOS>", 320, 73, 186, "minion", "<EOS>", 145, 250, 41, "<UNK>", "<EOS>", 320, 73, 186, "minion", "<EOS>"], "score_history": [-5.7220458984375e-06, -0.0001773834228515625, -3.71926071238704e-05, -1.1324880688334815e-05, -2.264967406517826e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0007476806640625, -0.0001926422119140625, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001621246337890625, -2.6702880859375e-05, -5.340576171875e-05, -1.1444091796875e-05, -8.7738037109375e-05, -7.152555099310121e-07, -1.537799835205078e-05, -0.02490234375, -0.00031280517578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00010561943054199219, -1.9073486328125e-06, -0.0007381439208984375, 0.0, -0.001651763916015625, -0.0004825592041015625, -6.103515625e-05, -2.09808349609375e-05, -0.00060272216796875, -2.47955322265625e-05, -0.001544952392578125, -2.86102294921875e-05, 0.0, -4.279613494873047e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -3.4332275390625e-05, -1.9431114196777344e-05, 0.0, -0.129150390625, -0.0003204345703125, -0.2047119140625, -4.9591064453125e-05, -0.006587982177734375, -0.24789011478424072, 0.0, -1.52587890625e-05, -0.9565830230712891, -0.0002536773681640625, -0.04481697082519531, 0.0, -0.11519944667816162, -3.063678741455078e-05, -0.0001888275146484375, -0.08696746826171875, -0.00011444091796875, -0.004978179931640625, -3.814697265625e-06, -0.1654718518257141, -0.0013207319425418973, -0.01953125, -0.000598907470703125, -1.9073486328125e-06, -0.015779495239257812, -0.026120305061340332, 0.0, -0.0004863739013671875, -2.6702880859375e-05, -0.0005376198678277433, -0.00011718104360625148, 0.0, -1.1843671798706055, -3.814697265625e-06, -1.9073486328125e-06, -0.37886810302734375, -3.814697265625e-06, -0.043094635009765625, -0.13732028007507324, 0.0, -0.8924484252929688, -1.9073486328125e-06, -0.31900131702423096, -1.9073486328125e-06, -0.0054111480712890625, -0.0012378692626953125, -6.67572021484375e-05, -0.005117892753332853, -5.7220458984375e-06, -5.14984130859375e-05, -0.0051288604736328125, -2.288818359375e-05, -0.0122452974319458, 0.0, -0.19115829467773438, -0.000743865966796875, -0.0001659393310546875, -0.07225155830383301, -1.9073486328125e-06, -0.000141143798828125, -0.09850883483886719, -1.9073486328125e-05, -0.025017976760864258, 0.0], "score": -5.4324986292010635, "model_output": {"hole4": "player", "hole0": "Hex", "hole6": [{"_type": "Template19"}, {"hole1": "add_buff", "hole2": [{"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Summon"}, "_type": "Call", "args": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "PlayerSelector"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"_type": "Name", "id": "frog"}, "targets": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}, {"hole1": "<UNK>", "hole2": [{"_type": "Name", "id": "minion"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "<UNK>", "hole2": [{"_type": "Name", "id": "minion"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hex", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Deathrattle(Summon(self.target.card),\n            PlayerSelector()))\n        self.target.card = frog\n        self.target.<UNK>(minion)\n        self.target.<UNK>(minion)\n"}, {"choice_history": [121, 200, "Hex", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hex", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 68, 163, 25, 186, "Deathrattle", "<EOS>", 321, 68, 163, 25, 186, "Summon", "<EOS>", 320, 65, 156, 41, "card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 126, 155, 320, 65, 156, 41, "card", "<EOS>", 37, 249, 17, 156, 17, 156, 54, "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "frog", "<EOS>", "create_minion", "<EOS>", 320, 74, 187, "Null", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", 25, 186, "frog", "<EOS>"], "score_history": [-5.7220458984375e-06, -0.0001773834228515625, -3.71926071238704e-05, -1.1324880688334815e-05, -2.264967406517826e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0007476806640625, -0.0001926422119140625, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001621246337890625, -2.6702880859375e-05, -5.340576171875e-05, -1.1444091796875e-05, -8.7738037109375e-05, -7.152555099310121e-07, -1.537799835205078e-05, -0.02490234375, -0.00031280517578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00010561943054199219, -1.9073486328125e-06, -0.0007381439208984375, 0.0, -0.001651763916015625, -0.0004825592041015625, -6.103515625e-05, -2.09808349609375e-05, -0.00060272216796875, -2.47955322265625e-05, -0.001544952392578125, -2.86102294921875e-05, 0.0, -4.279613494873047e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -3.4332275390625e-05, -1.9431114196777344e-05, 0.0, -0.129150390625, -0.0003204345703125, -0.2047119140625, -4.9591064453125e-05, -0.006587982177734375, -0.24789011478424072, 0.0, -1.52587890625e-05, -0.9565830230712891, -0.0002536773681640625, -0.04481697082519531, 0.0, -0.11519944667816162, -3.063678741455078e-05, -0.0001888275146484375, -0.08696746826171875, -0.00011444091796875, -0.004978179931640625, -3.814697265625e-06, -0.1654718518257141, -0.0013207319425418973, -0.01953125, -0.000598907470703125, -1.9073486328125e-06, -0.015779495239257812, -0.026120305061340332, 0.0, -0.0004863739013671875, -2.6702880859375e-05, -0.0005376198678277433, -0.00011718104360625148, 0.0, -1.1843671798706055, -3.814697265625e-06, -1.9073486328125e-06, -0.37886810302734375, -3.814697265625e-06, -0.043094635009765625, -0.13732028007507324, 0.0, -1.121129035949707, -0.00019073486328125, -0.0071582794189453125, 0.0, -0.005700111389160156, 0.0, -0.005184173583984375, -0.0027736418414860964, -1.9073486328125e-06, -0.0161274503916502, 0.0, -0.2779660224914551, -1.4066597032069694e-05, -0.16019439697265625, -5.7220458984375e-06, -7.62939453125e-06, -0.0217132568359375, -1.9073486328125e-06, -0.026333332061767578, 0.0, -0.0005950927734375, -0.001377105712890625, -0.0001373291015625, 0.0, -0.0025320053100585938, -3.814697265625e-06, -0.08423352241516113, -5.960462772236497e-07, -0.0060710906982421875, 0.0, -0.002696990966796875, -0.01935577392578125, -0.0010890960693359375, -0.002416840987280011, -3.099440846199286e-06, -0.00960540771484375, -1.9073486328125e-06, -1.71661376953125e-05, -0.000133514404296875, -1.9073486328125e-06, -0.000316619873046875, 0.0, -0.0015774965286254883, -0.0006126165390014648, -0.005594210233539343, -1.9073486328125e-06, -0.007092475891113281, -5.7220458984375e-06, -0.27567124366760254, -1.3470649719238281e-05], "score": -5.869408236247011, "model_output": {"hole4": "player", "hole0": "Hex", "hole6": [{"_type": "Template19"}, {"hole1": "add_buff", "hole2": [{"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Summon"}, "_type": "Call", "args": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "PlayerSelector"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "<UNK>", "_type": "Template43", "hole0": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Template70"}, "_type": "Attribute"}, "_type": "Attribute"}}, "targets": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}], "_type": "Assign"}, {"value": {"func": {"attr": "create_minion", "value": {"_type": "Name", "id": "frog"}, "_type": "Attribute"}, "_type": "Call", "args": [{"value": "Null", "_type": "NameConstant"}]}, "targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign"}, {"value": {"_type": "Name", "id": "frog"}, "targets": [{"attr": "card", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}], "_type": "Assign"}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hex", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Deathrattle(Summon(self.target.card),\n            PlayerSelector()))\n        self.target.card = hearthbreaker.cards.minions.<UNK>()\n        minion = frog.create_minion(Null)\n        minion.card = frog\n"}, {"choice_history": [121, 200, "Hex", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hex", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 68, 163, 25, 186, "Deathrattle", "<EOS>", 321, 68, 163, 25, 186, "Summon", "<EOS>", 320, 65, 156, 41, "card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>"], "score_history": [-5.7220458984375e-06, -0.0001773834228515625, -3.71926071238704e-05, -1.1324880688334815e-05, -2.264967406517826e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0007476806640625, -0.0001926422119140625, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001621246337890625, -2.6702880859375e-05, -5.340576171875e-05, -1.1444091796875e-05, -8.7738037109375e-05, -7.152555099310121e-07, -1.537799835205078e-05, -0.02490234375, -0.00031280517578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00010561943054199219, -1.9073486328125e-06, -0.0007381439208984375, 0.0, -0.001651763916015625, -0.0004825592041015625, -6.103515625e-05, -2.09808349609375e-05, -0.00060272216796875, -2.47955322265625e-05, -0.001544952392578125, -2.86102294921875e-05, 0.0, -4.279613494873047e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -3.4332275390625e-05, -1.9431114196777344e-05, 0.0, -0.129150390625, -0.0003204345703125, -0.2047119140625, -4.9591064453125e-05, -0.006587982177734375, -0.24789011478424072, 0.0, -1.52587890625e-05, -0.9565830230712891, -0.0002536773681640625, -0.04481697082519531, 0.0, -0.11519944667816162, -3.063678741455078e-05, -0.0001888275146484375, -0.08696746826171875, -0.00011444091796875, -0.004978179931640625, -3.814697265625e-06, -0.1654718518257141, -0.0013207319425418973, -0.01953125, -0.000598907470703125, -1.9073486328125e-06, -0.015779495239257812, -0.026120305061340332, 0.0, -0.0004863739013671875, -2.6702880859375e-05, -0.0005376198678277433, -0.00011718104360625148, 0.0, -0.44023609161376953, -2.47955322265625e-05, -0.024916648864746094, -0.33188319206237793, 0.0, -7.62939453125e-06, -0.6664257049560547, -0.0001678466796875, -0.0005106863100081682, -3.814697265625e-06, -0.31382203102111816, -0.5474092960357666, 0.0, -0.2658977210521698, -0.000171661376953125, -0.0034942626953125, -0.00037384033203125, -0.013942718505859375, -0.055335164070129395, 0.0, -8.0108642578125e-05, -0.16514301300048828, -0.00028228759765625, -0.0030558896251022816, -3.933906555175781e-06, -0.04931368678808212, -0.23116254806518555, -1.9073486328125e-06, -0.28087276220321655, -0.005860447883605957, -0.0015087127685546875, -0.0003719329833984375, -0.002674102783203125, -0.0529329776763916, 0.0, -0.0001068115234375, -0.16542434692382812, -0.000415802001953125, -0.00595021853223443, -3.933906555175781e-06, -0.05854123458266258, -0.24780166149139404, -3.814697265625e-06, -0.40752333402633667, -0.0077162981033325195], "score": -6.4114636813717425, "model_output": {"hole4": "player", "hole0": "Hex", "hole6": [{"_type": "Template19"}, {"hole1": "add_buff", "hole2": [{"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Summon"}, "_type": "Call", "args": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "PlayerSelector"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"hole1": "ChangeAttack", "hole2": 3, "_type": "Template28", "hole0": "Buff"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"hole1": "ChangeHealth", "hole2": 3, "_type": "Template28", "hole0": "Buff"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"hole1": "ChangeHealth", "hole2": 3, "_type": "Template28", "hole0": "Buff"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hex", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Deathrattle(Summon(self.target.card),\n            PlayerSelector()))\n        self.target.add_buff(Buff(ChangeAttack(3)))\n        self.target.add_buff(Buff(ChangeHealth(3)))\n        self.target.add_buff(Buff(ChangeHealth(3)))\n"}, {"choice_history": [121, 200, "Hex", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hex", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 68, 163, 25, 186, "Deathrattle", "<EOS>", 321, 68, 163, 25, 186, "Summon", "<EOS>", 320, 65, 156, 41, "card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 68, 163, 25, 186, "Deathrattle", "<EOS>", 321, 68, 163, 25, 186, "Summon", "<EOS>", 320, 65, 156, 41, "card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>"], "score_history": [-5.7220458984375e-06, -0.0001773834228515625, -3.71926071238704e-05, -1.1324880688334815e-05, -2.264967406517826e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0007476806640625, -0.0001926422119140625, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001621246337890625, -2.6702880859375e-05, -5.340576171875e-05, -1.1444091796875e-05, -8.7738037109375e-05, -7.152555099310121e-07, -1.537799835205078e-05, -0.02490234375, -0.00031280517578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00010561943054199219, -1.9073486328125e-06, -0.0007381439208984375, 0.0, -0.001651763916015625, -0.0004825592041015625, -6.103515625e-05, -2.09808349609375e-05, -0.00060272216796875, -2.47955322265625e-05, -0.001544952392578125, -2.86102294921875e-05, 0.0, -4.279613494873047e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -3.4332275390625e-05, -1.9431114196777344e-05, 0.0, -0.129150390625, -0.0003204345703125, -0.2047119140625, -4.9591064453125e-05, -0.006587982177734375, -0.24789011478424072, 0.0, -1.52587890625e-05, -0.9565830230712891, -0.0002536773681640625, -0.04481697082519531, 0.0, -0.11519944667816162, -3.063678741455078e-05, -0.0001888275146484375, -0.08696746826171875, -0.00011444091796875, -0.004978179931640625, -3.814697265625e-06, -0.1654718518257141, -0.0013207319425418973, -0.01953125, -0.000598907470703125, -1.9073486328125e-06, -0.015779495239257812, -0.026120305061340332, 0.0, -0.0004863739013671875, -2.6702880859375e-05, -0.0005376198678277433, -0.00011718104360625148, 0.0, -0.44023609161376953, -2.47955322265625e-05, -0.024916648864746094, -0.33188319206237793, 0.0, -7.62939453125e-06, -0.8536205291748047, -0.0013446807861328125, -0.006130218505859375, 0.0, -0.1931520700454712, -7.62939453125e-06, -0.0001888275146484375, -0.580352783203125, -6.67572021484375e-05, -0.0049896240234375, -1.1444091796875e-05, -0.24946412444114685, -0.0017042458057403564, -0.0085601806640625, -0.0006809234619140625, -1.9073486328125e-06, -0.019499778747558594, -0.02123582363128662, 0.0, -0.0007228851318359375, -2.09808349609375e-05, -0.0006613520090468228, -0.0001152738113887608, 0.0, -0.22608661651611328, -2.47955322265625e-05, -0.012921333312988281, -0.29051852226257324, 0.0, -1.1444091796875e-05, -0.6294174194335938, -0.000141143798828125, -0.0004837473388761282, -3.814697265625e-06, -0.29320868849754333, -0.49485552310943604, 0.0, -0.27474018931388855, -0.0001926422119140625, -0.0035724639892578125, -0.0004100799560546875, -0.015679359436035156, -0.05458939075469971, 0.0, -7.62939453125e-05, -0.16252517700195312, -0.0002651214599609375, -0.0026671590749174356, -3.933906555175781e-06, -0.04365822300314903, -0.21565914154052734, -1.9073486328125e-06, -0.24995355308055878, -0.005707859992980957], "score": -7.777064751014905, "model_output": {"hole4": "player", "hole0": "Hex", "hole6": [{"_type": "Template19"}, {"hole1": "add_buff", "hole2": [{"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Summon"}, "_type": "Call", "args": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "PlayerSelector"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Summon"}, "_type": "Call", "args": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "PlayerSelector"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"hole1": "ChangeAttack", "hole2": 3, "_type": "Template28", "hole0": "Buff"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"hole1": "ChangeHealth", "hole2": 3, "_type": "Template28", "hole0": "Buff"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hex", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Deathrattle(Summon(self.target.card),\n            PlayerSelector()))\n        self.target.add_buff(Deathrattle(Summon(self.target.card),\n            PlayerSelector()))\n        self.target.add_buff(Buff(ChangeAttack(3)))\n        self.target.add_buff(Buff(ChangeHealth(3)))\n"}, {"choice_history": [121, 200, "Hex", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Hex", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 68, 163, 25, 186, "Deathrattle", "<EOS>", 321, 68, 163, 25, 186, "Summon", "<EOS>", 320, 65, 156, 41, "card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 68, 163, 25, 186, "Deathrattle", "<EOS>", 321, 68, 163, 25, 186, "Summon", "<EOS>", 320, 65, 156, 41, "card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 68, 163, 25, 186, "Deathrattle", "<EOS>", 321, 68, 163, 25, 186, "Summon", "<EOS>", 320, 65, 156, 41, "card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 145, 250, 41, "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>"], "score_history": [-5.7220458984375e-06, -0.0001773834228515625, -3.71926071238704e-05, -1.1324880688334815e-05, -2.264967406517826e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0007476806640625, -0.0001926422119140625, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001621246337890625, -2.6702880859375e-05, -5.340576171875e-05, -1.1444091796875e-05, -8.7738037109375e-05, -7.152555099310121e-07, -1.537799835205078e-05, -0.02490234375, -0.00031280517578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00010561943054199219, -1.9073486328125e-06, -0.0007381439208984375, 0.0, -0.001651763916015625, -0.0004825592041015625, -6.103515625e-05, -2.09808349609375e-05, -0.00060272216796875, -2.47955322265625e-05, -0.001544952392578125, -2.86102294921875e-05, 0.0, -4.279613494873047e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -3.4332275390625e-05, -1.9431114196777344e-05, 0.0, -0.129150390625, -0.0003204345703125, -0.2047119140625, -4.9591064453125e-05, -0.006587982177734375, -0.24789011478424072, 0.0, -1.52587890625e-05, -0.9565830230712891, -0.0002536773681640625, -0.04481697082519531, 0.0, -0.11519944667816162, -3.063678741455078e-05, -0.0001888275146484375, -0.08696746826171875, -0.00011444091796875, -0.004978179931640625, -3.814697265625e-06, -0.1654718518257141, -0.0013207319425418973, -0.01953125, -0.000598907470703125, -1.9073486328125e-06, -0.015779495239257812, -0.026120305061340332, 0.0, -0.0004863739013671875, -2.6702880859375e-05, -0.0005376198678277433, -0.00011718104360625148, 0.0, -0.44023609161376953, -2.47955322265625e-05, -0.024916648864746094, -0.33188319206237793, 0.0, -7.62939453125e-06, -0.8536205291748047, -0.0013446807861328125, -0.006130218505859375, 0.0, -0.1931520700454712, -7.62939453125e-06, -0.0001888275146484375, -0.580352783203125, -6.67572021484375e-05, -0.0049896240234375, -1.1444091796875e-05, -0.24946412444114685, -0.0017042458057403564, -0.0085601806640625, -0.0006809234619140625, -1.9073486328125e-06, -0.019499778747558594, -0.02123582363128662, 0.0, -0.0007228851318359375, -2.09808349609375e-05, -0.0006613520090468228, -0.0001152738113887608, 0.0, -0.22608661651611328, -2.47955322265625e-05, -0.012921333312988281, -0.29051852226257324, 0.0, -1.1444091796875e-05, -0.942601203918457, -0.0010852813720703125, -0.005023956298828125, 0.0, -0.19360506534576416, -7.62939453125e-06, -0.000186920166015625, -0.6239337921142578, -6.4849853515625e-05, -0.005809783935546875, -1.1444091796875e-05, -0.26088112592697144, -0.0017131066415458918, -0.007785797119140625, -0.00066375732421875, -1.9073486328125e-06, -0.020987510681152344, -0.020297646522521973, 0.0, -0.0007686614990234375, -2.09808349609375e-05, -0.0006720810197293758, -0.00011491619807202369, 0.0, -0.21608638763427734, -2.47955322265625e-05, -0.012132644653320312, -0.2806665897369385, 0.0, -1.1444091796875e-05, -0.6337184906005859, -0.0001392364501953125, -0.0004802902403753251, -3.814697265625e-06, -0.28646209836006165, -0.4935652017593384, 0.0, -0.27721795439720154, -0.0001964569091796875], "score": -9.61619474079248, "model_output": {"hole4": "player", "hole0": "Hex", "hole6": [{"_type": "Template19"}, {"hole1": "add_buff", "hole2": [{"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Summon"}, "_type": "Call", "args": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "PlayerSelector"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Summon"}, "_type": "Call", "args": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "PlayerSelector"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Summon"}, "_type": "Call", "args": [{"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}]}, {"_type": "Template46", "hole0": "PlayerSelector"}]}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "add_buff", "hole2": [{"hole1": "ChangeAttack", "hole2": 3, "_type": "Template28", "hole0": "Buff"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"_type": "Template39"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Hex", "_type": "Str"}, {"_type": "Template61"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Deathrattle(Summon(self.target.card),\n            PlayerSelector()))\n        self.target.add_buff(Deathrattle(Summon(self.target.card),\n            PlayerSelector()))\n        self.target.add_buff(Deathrattle(Summon(self.target.card),\n            PlayerSelector()))\n        self.target.add_buff(Buff(ChangeAttack(3)))\n"}], "index": 48}
{"beams": [{"choice_history": [121, 200, "Holy", "Light", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Light", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "6", "<EOS>", 110], "score_history": [-0.0021076202392578125, -0.0001010894775390625, -7.152555099310121e-07, -7.271752110682428e-06, -2.110004425048828e-05, -1.4394056051969528e-05, -1.3470649719238281e-05, -7.987022399902344e-06, -0.0001049041748046875, -0.00106048583984375, -3.814697265625e-06, -2.09808349609375e-05, -0.0001316070556640625, -1.52587890625e-05, -7.2479248046875e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.960462772236497e-07, -0.00019109249114990234, -0.00010061143257189542, 0.0, -0.005295753479003906, -4.57763671875e-05, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -0.000133514404296875, -4.017353057861328e-05, -0.06561219692230225, -3.814697265625e-06, -9.34600830078125e-05, -0.0004367828369140625, -0.0001983642578125, -0.0009632110595703125, -6.67572021484375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.00042724609375, -0.0010852813720703125, 0.0, -0.00026917457580566406, 0.0, -3.743146953638643e-05, 0.0, -2.86102294921875e-05, -0.0001850128173828125, -0.000469207763671875, -0.00025188911240547895, 0.0, -0.0008525848388671875, -1.9073486328125e-06, -0.00011444091796875, -2.288818359375e-05, -0.000316619873046875, -0.01592615246772766, -2.6702880859375e-05, -0.0008563995361328125, -0.0029544830322265625, -3.24249267578125e-05, -9.918212890625e-05, -0.0014858245849609375, -1.9073486328125e-06, -0.0018006488680839539, -1.7404556274414062e-05, -8.7738037109375e-05], "score": -0.10427938941535331, "model_output": {"hole4": "player", "hole0": "HolyLight", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Light", "_type": "Str"}, {"_type": "Template59"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n"}, {"choice_history": [121, 200, "Holy", "Light", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Light", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "6", "<EOS>", 110], "score_history": [-0.0021076202392578125, -0.0001010894775390625, -7.152555099310121e-07, -7.271752110682428e-06, -2.110004425048828e-05, -1.4394056051969528e-05, -1.3470649719238281e-05, -7.987022399902344e-06, -0.0001049041748046875, -0.00106048583984375, -3.814697265625e-06, -2.09808349609375e-05, -0.0001316070556640625, -1.52587890625e-05, -7.2479248046875e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.960462772236497e-07, -0.00019109249114990234, -0.00010061143257189542, 0.0, -0.005295753479003906, -4.57763671875e-05, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -0.000133514404296875, -4.017353057861328e-05, -2.9449236392974854, 0.0, -6.103515625e-05, -0.0003757476806640625, -6.866455078125e-05, -0.000637054443359375, -2.6702880859375e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0003833770751953125, -0.0012216567993164062, 0.0, -0.00030159950256347656, 0.0, -5.2689803851535544e-05, 0.0, -2.288818359375e-05, -0.00019073486328125, -0.000324249267578125, -0.00019037706078961492, 0.0, -0.0008525848388671875, -1.9073486328125e-06, -8.392333984375e-05, -2.47955322265625e-05, -0.0002994537353515625, -0.015705808997154236, -2.6702880859375e-05, -0.0008106231689453125, -0.0030384063720703125, -3.24249267578125e-05, -0.000102996826171875, -0.001468658447265625, -1.9073486328125e-06, -0.001807563123293221, -1.7523765563964844e-05, -8.7738037109375e-05], "score": -2.9826932599494853, "model_output": {"hole4": "player", "hole0": "HolyLight", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Light", "_type": "Str"}, {"_type": "Template59"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n"}, {"choice_history": [121, 200, "Holy", "Light", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Light", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "6", "<EOS>", 320, 110], "score_history": [-0.0021076202392578125, -0.0001010894775390625, -7.152555099310121e-07, -7.271752110682428e-06, -2.110004425048828e-05, -1.4394056051969528e-05, -1.3470649719238281e-05, -7.987022399902344e-06, -0.0001049041748046875, -0.00106048583984375, -3.814697265625e-06, -2.09808349609375e-05, -0.0001316070556640625, -1.52587890625e-05, -7.2479248046875e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.960462772236497e-07, -0.00019109249114990234, -0.00010061143257189542, 0.0, -0.005295753479003906, -4.57763671875e-05, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -0.000133514404296875, -4.017353057861328e-05, -0.06561219692230225, -3.814697265625e-06, -9.34600830078125e-05, -0.0004367828369140625, -0.0001983642578125, -0.0009632110595703125, -6.67572021484375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.00042724609375, -0.0010852813720703125, 0.0, -0.00026917457580566406, 0.0, -3.743146953638643e-05, 0.0, -2.86102294921875e-05, -0.0001850128173828125, -0.000469207763671875, -0.00025188911240547895, 0.0, -0.0008525848388671875, -1.9073486328125e-06, -0.00011444091796875, -2.288818359375e-05, -0.000316619873046875, -4.9693403244018555, -9.5367431640625e-06, -9.1552734375e-05, -0.0054683685302734375], "score": -5.055900303457349, "model_output": {"hole4": "player", "hole0": "HolyLight", "hole6": [{"_type": "Template19"}, {"hole1": "6", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Light", "_type": "Str"}, {"_type": "Template59"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.6(self)\n"}, {"choice_history": [121, 200, "Holy", "Light", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Light", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "6", "<EOS>", 110], "score_history": [-0.0021076202392578125, -0.0001010894775390625, -7.152555099310121e-07, -7.271752110682428e-06, -2.110004425048828e-05, -1.4394056051969528e-05, -1.3470649719238281e-05, -7.987022399902344e-06, -0.0001049041748046875, -0.00106048583984375, -3.814697265625e-06, -2.09808349609375e-05, -0.0001316070556640625, -1.52587890625e-05, -7.2479248046875e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.960462772236497e-07, -0.00019109249114990234, -0.00010061143257189542, 0.0, -0.005295753479003906, -4.57763671875e-05, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -0.000133514404296875, -4.017353057861328e-05, -5.023661136627197, -4.76837158203125e-05, -0.0001010894775390625, -0.0003681182861328125, -5.14984130859375e-05, -0.001781463623046875, -0.000186920166015625, -1.9073486328125e-06, -5.340576171875e-05, -2.09808349609375e-05, -0.0002918243408203125, -0.0010023117065429688, 0.0, -0.0003167390823364258, 0.0, -4.708703272626735e-05, 0.0, -1.9073486328125e-05, -0.00019073486328125, -0.0002536773681640625, -0.0001740454026730731, 0.0, -0.0008907318115234375, -1.9073486328125e-06, -8.0108642578125e-05, -2.47955322265625e-05, -0.000308990478515625, -0.016007553786039352, -2.6702880859375e-05, -0.0007801055908203125, -0.003055572509765625, -3.24249267578125e-05, -0.000102996826171875, -0.0014677047729492188, -1.9073486328125e-06, -0.0018064903561025858, -1.7523765563964844e-05, -8.7738037109375e-05], "score": -5.062786073965583, "model_output": {"hole4": "player", "hole0": "HolyLight", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Light", "_type": "Str"}, {"_type": "Template59"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n"}, {"choice_history": [121, 200, "Holy", "Light", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Light", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "Holy", "<EOS>", 320, 110], "score_history": [-0.0021076202392578125, -0.0001010894775390625, -7.152555099310121e-07, -7.271752110682428e-06, -2.110004425048828e-05, -1.4394056051969528e-05, -1.3470649719238281e-05, -7.987022399902344e-06, -0.0001049041748046875, -0.00106048583984375, -3.814697265625e-06, -2.09808349609375e-05, -0.0001316070556640625, -1.52587890625e-05, -7.2479248046875e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.960462772236497e-07, -0.00019109249114990234, -0.00010061143257189542, 0.0, -0.005295753479003906, -4.57763671875e-05, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -0.000133514404296875, -4.017353057861328e-05, -0.06561219692230225, -3.814697265625e-06, -9.34600830078125e-05, -0.0004367828369140625, -0.0001983642578125, -0.0009632110595703125, -6.67572021484375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.00042724609375, -0.0010852813720703125, 0.0, -0.00026917457580566406, 0.0, -3.743146953638643e-05, 0.0, -2.86102294921875e-05, -0.0001850128173828125, -0.000469207763671875, -0.00025188911240547895, 0.0, -0.0008525848388671875, -1.9073486328125e-06, -0.00011444091796875, -2.288818359375e-05, -0.000316619873046875, -5.655842304229736, -0.00040650367736816406, -0.000232696533203125, -0.10592460632324219], "score": -5.843396631811231, "model_output": {"hole4": "player", "hole0": "HolyLight", "hole6": [{"_type": "Template19"}, {"hole1": "Holy", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Light", "_type": "Str"}, {"_type": "Template59"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.Holy(self)\n"}, {"choice_history": [121, 200, "Holy", "Light", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Light", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "Health", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "score_history": [-0.0021076202392578125, -0.0001010894775390625, -7.152555099310121e-07, -7.271752110682428e-06, -2.110004425048828e-05, -1.4394056051969528e-05, -1.3470649719238281e-05, -7.987022399902344e-06, -0.0001049041748046875, -0.00106048583984375, -3.814697265625e-06, -2.09808349609375e-05, -0.0001316070556640625, -1.52587890625e-05, -7.2479248046875e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.960462772236497e-07, -0.00019109249114990234, -0.00010061143257189542, 0.0, -0.005295753479003906, -4.57763671875e-05, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -0.000133514404296875, -4.017353057861328e-05, -0.06561219692230225, -3.814697265625e-06, -9.34600830078125e-05, -0.0004367828369140625, -0.0001983642578125, -0.0009632110595703125, -6.67572021484375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.00042724609375, -0.0010852813720703125, 0.0, -0.00026917457580566406, 0.0, -3.743146953638643e-05, 0.0, -2.86102294921875e-05, -0.0001850128173828125, -0.000469207763671875, -0.00025188911240547895, 0.0, -0.0008525848388671875, -1.9073486328125e-06, -0.00011444091796875, -2.288818359375e-05, -0.000316619873046875, -5.419963836669922, 0.0, -0.0001392364501953125, -0.1367340087890625, -0.003765106201171875, -0.28525081276893616, -0.0003832576039712876], "score": -5.92722677953094, "model_output": {"hole4": "player", "hole0": "HolyLight", "hole6": [{"_type": "Template19"}, {"hole1": "Health", "hole2": [{"_type": "Template30", "hole0": "<UNK>"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Light", "_type": "Str"}, {"_type": "Template59"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.Health(Buff(<UNK>()))\n"}, {"choice_history": [121, 200, "Holy", "Light", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Light", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "6", "<EOS>", 110], "score_history": [-0.0021076202392578125, -0.0001010894775390625, -7.152555099310121e-07, -7.271752110682428e-06, -2.110004425048828e-05, -1.4394056051969528e-05, -1.3470649719238281e-05, -7.987022399902344e-06, -0.0001049041748046875, -0.00106048583984375, -3.814697265625e-06, -2.09808349609375e-05, -0.0001316070556640625, -1.52587890625e-05, -7.2479248046875e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.960462772236497e-07, -0.00019109249114990234, -0.00010061143257189542, 0.0, -0.005295753479003906, -4.57763671875e-05, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -0.000133514404296875, -4.017353057861328e-05, -6.344666957855225, -3.814697265625e-06, -0.0002880096435546875, -0.000438690185546875, -0.000202178955078125, -0.001064300537109375, -0.0001316070556640625, -1.9073486328125e-06, -6.103515625e-05, -5.7220458984375e-06, -0.00042724609375, -0.00156402587890625, 0.0, -0.00039124488830566406, 0.0, -5.435859566205181e-05, 0.0, -2.09808349609375e-05, -0.000141143798828125, -0.0003147125244140625, -0.00019717203394975513, 0.0, -0.000850677490234375, -1.9073486328125e-06, -9.34600830078125e-05, -2.47955322265625e-05, -0.0003108978271484375, -0.015821903944015503, -2.6702880859375e-05, -0.0008220672607421875, -0.0030202865600585938, -3.24249267578125e-05, -0.0001010894775390625, -0.0014801025390625, -1.9073486328125e-06, -0.0018185301451012492, -1.7404556274414062e-05, -8.7738037109375e-05], "score": -6.384010125900716, "model_output": {"hole4": "player", "hole0": "HolyLight", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Light", "_type": "Str"}, {"_type": "Template59"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n"}, {"choice_history": [121, 200, "Holy", "Light", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Light", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "6", "<EOS>", 110], "score_history": [-0.0021076202392578125, -0.0001010894775390625, -7.152555099310121e-07, -7.271752110682428e-06, -2.110004425048828e-05, -1.4394056051969528e-05, -1.3470649719238281e-05, -7.987022399902344e-06, -0.0001049041748046875, -0.00106048583984375, -3.814697265625e-06, -2.09808349609375e-05, -0.0001316070556640625, -1.52587890625e-05, -7.2479248046875e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.960462772236497e-07, -0.00019109249114990234, -0.00010061143257189542, 0.0, -6.332394599914551, -0.00016021728515625, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -0.00020694732666015625, -2.09808349609375e-05, -0.47216057777404785, -3.814697265625e-06, -7.43865966796875e-05, -0.000476837158203125, -0.000156402587890625, -0.0007114410400390625, -5.53131103515625e-05, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -0.0003223419189453125, -0.000823974609375, 0.0, -0.00021576881408691406, 0.0, -3.2305571949109435e-05, 0.0, -3.0517578125e-05, -0.00019073486328125, -0.0005054473876953125, -0.0002706049708649516, 0.0, -0.000843048095703125, -1.9073486328125e-06, -0.000125885009765625, -2.288818359375e-05, -0.0003108978271484375, -0.015841340646147728, -2.6702880859375e-05, -0.00083160400390625, -0.0029449462890625, -3.24249267578125e-05, -9.918212890625e-05, -0.0014867782592773438, -1.9073486328125e-06, -0.0017981454730033875, -1.7404556274414062e-05, -8.7738037109375e-05], "score": -6.837312992574482, "model_output": {"hole4": "player", "hole0": "HolyLight", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Light", "_type": "Str"}, {"_type": "Template61"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 3, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n"}, {"choice_history": [121, 200, "Holy", "Light", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Light", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "#", "<EOS>", 110], "score_history": [-0.0021076202392578125, -0.0001010894775390625, -7.152555099310121e-07, -7.271752110682428e-06, -2.110004425048828e-05, -1.4394056051969528e-05, -1.3470649719238281e-05, -7.987022399902344e-06, -0.0001049041748046875, -0.00106048583984375, -3.814697265625e-06, -2.09808349609375e-05, -0.0001316070556640625, -1.52587890625e-05, -7.2479248046875e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.960462772236497e-07, -0.00019109249114990234, -0.00010061143257189542, 0.0, -0.005295753479003906, -4.57763671875e-05, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -0.000133514404296875, -4.017353057861328e-05, -0.06561219692230225, -3.814697265625e-06, -9.34600830078125e-05, -0.0004367828369140625, -0.0001983642578125, -0.0009632110595703125, -6.67572021484375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.00042724609375, -0.0010852813720703125, 0.0, -0.00026917457580566406, 0.0, -3.743146953638643e-05, 0.0, -2.86102294921875e-05, -0.0001850128173828125, -0.000469207763671875, -0.00025188911240547895, 0.0, -0.0008525848388671875, -1.9073486328125e-06, -0.00011444091796875, -2.288818359375e-05, -0.000316619873046875, -0.01592615246772766, -2.6702880859375e-05, -0.0008563995361328125, -0.0029544830322265625, -3.24249267578125e-05, -9.918212890625e-05, -0.0014858245849609375, -1.9073486328125e-06, -6.818441390991211, -1.0848044439626392e-05, -0.0002269744873046875], "score": -6.921052811476841, "model_output": {"hole4": "player", "hole0": "HolyLight", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 0, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Light", "_type": "Str"}, {"_type": "Template59"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(0), self)\n"}, {"choice_history": [121, 200, "Holy", "Light", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Light", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "Health", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "score_history": [-0.0021076202392578125, -0.0001010894775390625, -7.152555099310121e-07, -7.271752110682428e-06, -2.110004425048828e-05, -1.4394056051969528e-05, -1.3470649719238281e-05, -7.987022399902344e-06, -0.0001049041748046875, -0.00106048583984375, -3.814697265625e-06, -2.09808349609375e-05, -0.0001316070556640625, -1.52587890625e-05, -7.2479248046875e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.960462772236497e-07, -0.00019109249114990234, -0.00010061143257189542, 0.0, -0.005295753479003906, -4.57763671875e-05, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -0.000133514404296875, -4.017353057861328e-05, -0.06561219692230225, -3.814697265625e-06, -9.34600830078125e-05, -0.0004367828369140625, -0.0001983642578125, -0.0009632110595703125, -6.67572021484375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.00042724609375, -0.0010852813720703125, 0.0, -0.00026917457580566406, 0.0, -3.743146953638643e-05, 0.0, -2.86102294921875e-05, -0.0001850128173828125, -0.000469207763671875, -0.00025188911240547895, 0.0, -0.0008525848388671875, -1.9073486328125e-06, -0.00011444091796875, -2.288818359375e-05, -0.000316619873046875, -5.419963836669922, 0.0, -0.0001392364501953125, -0.1367340087890625, -0.003765106201171875, -1.5776692628860474, -2.110004425048828e-05], "score": -7.219283072088331, "model_output": {"hole4": "player", "hole0": "HolyLight", "hole6": [{"_type": "Template19"}, {"hole1": "Health", "hole2": [{"_type": "Template30", "hole0": "Frozen"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Light", "_type": "Str"}, {"_type": "Template59"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.Health(Buff(Frozen()))\n"}, {"choice_history": [121, 200, "Holy", "Light", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Light", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "6", "<EOS>", 110], "score_history": [-0.0021076202392578125, -0.0001010894775390625, -7.152555099310121e-07, -7.271752110682428e-06, -2.110004425048828e-05, -1.4394056051969528e-05, -1.3470649719238281e-05, -7.987022399902344e-06, -0.0001049041748046875, -0.00106048583984375, -3.814697265625e-06, -2.09808349609375e-05, -0.0001316070556640625, -1.52587890625e-05, -7.2479248046875e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.960462772236497e-07, -0.00019109249114990234, -0.00010061143257189542, 0.0, -0.005295753479003906, -4.57763671875e-05, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -0.000133514404296875, -4.017353057861328e-05, -7.201629161834717, -9.5367431640625e-06, -0.0001201629638671875, -0.00014495849609375, -5.91278076171875e-05, -0.001293182373046875, -5.53131103515625e-05, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.0003204345703125, -0.001220703125, 0.0, -0.00027680397033691406, 0.0, -7.784170884406194e-05, 0.0, -2.09808349609375e-05, -0.0001373291015625, -0.0002117156982421875, -0.0001502033119322732, 0.0, -0.000827789306640625, -1.9073486328125e-06, -6.866455078125e-05, -2.47955322265625e-05, -0.0003376007080078125, -0.01566397026181221, -2.6702880859375e-05, -0.0007781982421875, -0.0031032562255859375, -3.24249267578125e-05, -9.918212890625e-05, -0.0014505386352539062, -1.9073486328125e-06, -0.0018204381922259927, -1.7523765563964844e-05, -8.96453857421875e-05], "score": -7.239635177225466, "model_output": {"hole4": "player", "hole0": "HolyLight", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Light", "_type": "Str"}, {"_type": "Template59"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n"}, {"choice_history": [121, 200, "Holy", "Light", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Light", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "6", "<EOS>", 110], "score_history": [-0.0021076202392578125, -0.0001010894775390625, -7.152555099310121e-07, -7.271752110682428e-06, -2.110004425048828e-05, -1.4394056051969528e-05, -1.3470649719238281e-05, -7.987022399902344e-06, -0.0001049041748046875, -0.00106048583984375, -3.814697265625e-06, -2.09808349609375e-05, -0.0001316070556640625, -1.52587890625e-05, -7.2479248046875e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.960462772236497e-07, -0.00019109249114990234, -0.00010061143257189542, 0.0, -6.332394599914551, -0.00016021728515625, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -0.00020694732666015625, -2.09808349609375e-05, -1.003692865371704, 0.0, -4.1961669921875e-05, -0.0003452301025390625, -5.91278076171875e-05, -0.00057220458984375, -2.288818359375e-05, 0.0, -1.9073486328125e-05, -9.5367431640625e-06, -0.0003604888916015625, -0.0011854171752929688, 0.0, -0.00028634071350097656, 0.0, -5.054411667515524e-05, 0.0, -2.288818359375e-05, -0.00019073486328125, -0.0003299713134765625, -0.00019574147881940007, 0.0, -0.0008602142333984375, -1.9073486328125e-06, -8.7738037109375e-05, -2.47955322265625e-05, -0.0002994537353515625, -0.015477664768695831, -2.6702880859375e-05, -0.0007991790771484375, -0.0030384063720703125, -3.24249267578125e-05, -0.000102996826171875, -0.00147247314453125, -1.9073486328125e-06, -0.0018039867281913757, -1.7404556274414062e-05, -8.7738037109375e-05], "score": -7.368299213546891, "model_output": {"hole4": "player", "hole0": "HolyLight", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Light", "_type": "Str"}, {"_type": "Template61"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n"}, {"choice_history": [121, 200, "Holy", "Light", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Light", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 110, 110], "score_history": [-0.0021076202392578125, -0.0001010894775390625, -7.152555099310121e-07, -7.271752110682428e-06, -2.110004425048828e-05, -1.4394056051969528e-05, -1.3470649719238281e-05, -7.987022399902344e-06, -0.0001049041748046875, -0.00106048583984375, -3.814697265625e-06, -2.09808349609375e-05, -0.0001316070556640625, -1.52587890625e-05, -7.2479248046875e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.960462772236497e-07, -0.00019109249114990234, -0.00010061143257189542, 0.0, -0.005295753479003906, -4.57763671875e-05, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -0.000133514404296875, -4.017353057861328e-05, -0.06561219692230225, -3.814697265625e-06, -9.34600830078125e-05, -0.0004367828369140625, -0.0001983642578125, -0.0009632110595703125, -6.67572021484375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.00042724609375, -0.0010852813720703125, 0.0, -0.00026917457580566406, 0.0, -3.743146953638643e-05, 0.0, -2.86102294921875e-05, -0.0001850128173828125, -0.000469207763671875, -0.00025188911240547895, 0.0, -0.0008525848388671875, -1.9073486328125e-06, -0.00011444091796875, -2.288818359375e-05, -0.000316619873046875, -0.01592615246772766, -2.6702880859375e-05, -0.0008563995361328125, -7.283359527587891, -0.11096763610839844], "score": -7.49212693962869, "model_output": {"hole4": "player", "hole0": "HolyLight", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"_type": "Template68"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Light", "_type": "Str"}, {"_type": "Template59"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(self, self)\n"}, {"choice_history": [121, 200, "Holy", "Light", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Light", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "6", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "6", "<EOS>", 110], "score_history": [-0.0021076202392578125, -0.0001010894775390625, -7.152555099310121e-07, -7.271752110682428e-06, -2.110004425048828e-05, -1.4394056051969528e-05, -1.3470649719238281e-05, -7.987022399902344e-06, -0.0001049041748046875, -0.00106048583984375, -3.814697265625e-06, -2.09808349609375e-05, -0.0001316070556640625, -1.52587890625e-05, -7.2479248046875e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.960462772236497e-07, -0.00019109249114990234, -0.00010061143257189542, 0.0, -0.005295753479003906, -4.57763671875e-05, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -0.000133514404296875, -4.017353057861328e-05, -0.06561219692230225, -3.814697265625e-06, -9.34600830078125e-05, -0.0004367828369140625, -0.0001983642578125, -0.0009632110595703125, -6.67572021484375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.00042724609375, -0.0010852813720703125, 0.0, -0.00026917457580566406, 0.0, -3.743146953638643e-05, 0.0, -2.86102294921875e-05, -0.0001850128173828125, -0.000469207763671875, -0.00025188911240547895, 0.0, -7.3009138107299805, -2.86102294921875e-05, -0.000171661376953125, -3.814697265625e-06, -0.005031585693359375, -0.0029801931232213974, -1.9073486328125e-06, -0.0034198760986328125, -0.0048351287841796875, -3.24249267578125e-05, -0.00026702880859375, -0.0029239654541015625, -1.9073486328125e-06, -0.0012700553052127361, -9.655952453613281e-06, -8.0108642578125e-05, -0.31742286682128906, -5.7220458984375e-06, -0.000461578369140625, -1.71661376953125e-05, -0.0001087188720703125, -0.005510687828063965, -1.1444091796875e-05, -0.03789684921503067, -1.9073486328125e-06, -0.0172119140625, -0.006984710693359375, -0.0001468658447265625, -0.00026702880859375, -0.000977635383605957, -4.649161837733118e-06, -0.0007181128021329641, -0.0001235007803188637, -9.918212890625e-05], "score": -7.789624354801219, "model_output": {"hole4": "player", "hole0": "HolyLight", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Light", "_type": "Str"}, {"_type": "Template59"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n        player.hero.heal(player.effective_heal_power(6), self)\n"}, {"choice_history": [121, 200, "Holy", "Light", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Holy", " ", "Light", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "6", "<EOS>", 110], "score_history": [-0.0021076202392578125, -0.0001010894775390625, -7.152555099310121e-07, -7.271752110682428e-06, -2.110004425048828e-05, -1.4394056051969528e-05, -1.3470649719238281e-05, -7.987022399902344e-06, -0.0001049041748046875, -7.197487831115723, -0.00016021728515625, -4.887569048150908e-06, -3.5762786865234375e-05, -1.680839886830654e-05, 0.0, -0.0012312064645811915, 0.0, -0.18327057361602783, -2.288818359375e-05, -0.00022125244140625, -4.1961669921875e-05, -0.002178192138671875, 0.0, -3.063674012082629e-05, 0.0, -2.09808349609375e-05, -8.0108642578125e-05, -5.7220458984375e-06, -6.508712249342352e-05, 0.0, -0.008890151977539062, -5.7220458984375e-06, -0.03835296630859375, -0.000213623046875, -0.45371437072753906, -0.04573029652237892, -5.7220458984375e-06, -0.0008087158203125, -0.0020427703857421875, -2.86102294921875e-05, -0.000118255615234375, -0.004499554634094238, -2.0265579223632812e-06, -0.0013455149019137025, -2.9087066650390625e-05, -0.00011444091796875], "score": -7.943154498531612, "model_output": {"hole4": "player", "hole0": "HolyLight", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 6, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Holy Light"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n"}], "index": 49}
{"beams": [{"choice_history": [121, 200, "Holy", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.007686614990234375, -0.0001544952392578125, -4.768370445162873e-07, -2.9802317840221804e-06, -3.576278118089249e-07, -5.479902029037476e-06, -2.288818359375e-05, -9.34600830078125e-05, -0.0002460479736328125, -0.011976242065429688, -4.00543212890625e-05, -9.536738616588991e-07, -0.00040638327482156456, -1.4781926438445225e-05, 0.0, -0.0004207210731692612, -5.7220458984375e-06, -0.01777958869934082, 0.0, -1.1563299267436378e-05, 0.0, -0.0003319675743114203, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -4.76837158203125e-05, -4.220008850097656e-05, 0.0, -0.6121501922607422, -0.00014495849609375, -0.013719558715820312, -0.00014495849609375, -1.9073486328125e-06, -7.62939453125e-06, -0.0005069315666332841, -2.2649765014648438e-06, -0.0014514923095703125, -0.0001544952392578125, -4.38690185546875e-05, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -0.0013524293899536133, -0.0002803802490234375, -0.00010073183511849493, 0.0, -2.86102294921875e-05, -0.0001392364501953125, 0.0, -6.4849853515625e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -9.72747802734375e-05, 0.0, -0.0005035400390625, -2.2649765014648438e-06, -0.0002182706375606358, -0.0001544952392578125, -0.000247955322265625, -1.9073486328125e-05, -1.52587890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.00021898731938563287, -1.6450776456622407e-05, -0.005620504263788462, 0.0, -0.0001468658447265625, -0.000225067138671875, -3.814697265625e-05, -2.09808349609375e-05, -0.0019065141677856445, -5.841255187988281e-06, -0.0006534731946885586, -1.9073486328125e-06, -4.38690185546875e-05, -0.0028285980224609375, -0.0008487701416015625, -3.814697265625e-06, -3.814697265625e-06, -0.00022900104522705078, -7.62939453125e-06, -0.012202262878417969, -1.71661376953125e-05, -0.010608673095703125, -0.0007228851318359375, -1.9073486328125e-06, -0.00017547607421875, -8.20159912109375e-05, -4.38690185546875e-05, -0.0001354217529296875, -1.1444091796875e-05, -0.00018155574798583984, -1.9073486328125e-06, -0.01412560697644949, -5.7220458984375e-06, -0.0007228851318359375, -0.0005168914794921875, -2.6702880859375e-05, -0.000110626220703125, -0.006031990051269531, -3.814697265625e-06, -0.001596515765413642, -4.1961669921875e-05, -6.67572021484375e-05], "score": -0.7311891395336829, "model_output": {"hole4": "player", "hole0": "HolyNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Holy Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 25, 186, "targets", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.007686614990234375, -0.0001544952392578125, -4.768370445162873e-07, -2.9802317840221804e-06, -3.576278118089249e-07, -5.479902029037476e-06, -2.288818359375e-05, -9.34600830078125e-05, -0.0002460479736328125, -0.011976242065429688, -4.00543212890625e-05, -9.536738616588991e-07, -0.00040638327482156456, -1.4781926438445225e-05, 0.0, -0.0004207210731692612, -5.7220458984375e-06, -0.01777958869934082, 0.0, -1.1563299267436378e-05, 0.0, -0.0003319675743114203, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -4.76837158203125e-05, -4.220008850097656e-05, 0.0, -0.9166135787963867, -8.58306884765625e-05, -0.0335540771484375, -1.52587890625e-05, -5.7220458984375e-06, -0.0001811981201171875, -1.9073486328125e-05, -0.001231074333190918, -2.6702880859375e-05, -4.9591064453125e-05, -6.4849853515625e-05, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -0.00015676021575927734, -0.000118255615234375, -0.00011360644566593692, -1.9073486328125e-06, -0.0002079010009765625, -0.0006771087646484375, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -5.53131103515625e-05, -1.1920928244535389e-07, -0.0006805658340454102, -2.0265579223632812e-06, -0.00019955595780629665, -0.0001392364501953125, -0.000133514404296875, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00032806396484375, -3.24249267578125e-05, -0.004870414733886719, -1.71661376953125e-05, -0.0001659393310546875, -8.392333984375e-05, 0.0, -0.017502784729003906, -5.53131103515625e-05, -3.62396240234375e-05, 0.0, -0.0024890899658203125, 0.0, -0.012865662574768066, -0.0002307891845703125, -0.00020229816436767578, -4.00543212890625e-05, -0.27750205993652344, -0.0008792877197265625, -1.9073486328125e-06, -1.9073486328125e-05, -0.009228825569152832, 0.0, -0.0024013519287109375, -2.47955322265625e-05, -0.0014878511428833008, -1.52587890625e-05, -0.0002841949462890625, -0.00157928466796875, -0.0003108978271484375, -0.0018291473388671875, -1.9073486328125e-06, -8.213453838834539e-05, -2.515315827622544e-05, -0.1742255538702011, 0.0, -0.0002288818359375, -0.0001697540283203125, -4.00543212890625e-05, -1.1444091796875e-05, -0.0008392333984375, -1.9073486328125e-06, -0.0005493052303791046, -1.9073486328125e-06, -2.6702880859375e-05], "score": -1.5045232463879117, "model_output": {"hole4": "player", "hole0": "HolyNova", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Holy Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 25, 186, "targets", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.007686614990234375, -0.0001544952392578125, -4.768370445162873e-07, -2.9802317840221804e-06, -3.576278118089249e-07, -5.479902029037476e-06, -2.288818359375e-05, -9.34600830078125e-05, -0.0002460479736328125, -0.011976242065429688, -4.00543212890625e-05, -9.536738616588991e-07, -0.00040638327482156456, -1.4781926438445225e-05, 0.0, -0.0004207210731692612, -5.7220458984375e-06, -0.01777958869934082, 0.0, -1.1563299267436378e-05, 0.0, -0.0003319675743114203, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -4.76837158203125e-05, -4.220008850097656e-05, 0.0, -0.9166135787963867, -8.58306884765625e-05, -0.0335540771484375, -1.52587890625e-05, -5.7220458984375e-06, -0.0001811981201171875, -1.9073486328125e-05, -0.001231074333190918, -2.6702880859375e-05, -4.9591064453125e-05, -6.4849853515625e-05, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -0.00015676021575927734, -0.000118255615234375, -0.00011360644566593692, -1.9073486328125e-06, -0.0002079010009765625, -0.0006771087646484375, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -5.53131103515625e-05, -1.1920928244535389e-07, -0.0006805658340454102, -2.0265579223632812e-06, -0.00019955595780629665, -0.0001392364501953125, -0.000133514404296875, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00032806396484375, -3.24249267578125e-05, -0.004870414733886719, -1.71661376953125e-05, -0.0001659393310546875, -8.392333984375e-05, 0.0, -0.017502784729003906, -5.53131103515625e-05, -3.62396240234375e-05, 0.0, -0.0024890899658203125, 0.0, -0.012865662574768066, -0.0002307891845703125, -0.00020229816436767578, -4.00543212890625e-05, -0.27750205993652344, -0.0008792877197265625, -1.9073486328125e-06, -1.9073486328125e-05, -0.009228825569152832, 0.0, -0.0024013519287109375, -2.47955322265625e-05, -0.0014878511428833008, -1.52587890625e-05, -0.0002841949462890625, -0.00157928466796875, -0.0003108978271484375, -0.0018291473388671875, -1.9073486328125e-06, -8.213453838834539e-05, -2.515315827622544e-05, -1.8367708921432495, 0.0, -0.0004940032958984375, -0.0001678466796875, -0.00019073486328125, -4.1961669921875e-05, -0.04961967468261719, -1.9073486328125e-06, -0.0011551827192306519, -9.5367431640625e-06, -2.86102294921875e-05], "score": -3.2169088524086007, "model_output": {"hole4": "player", "hole0": "HolyNova", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Holy Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "hero", "<EOS>"], "score_history": [-0.007686614990234375, -0.0001544952392578125, -4.768370445162873e-07, -2.9802317840221804e-06, -3.576278118089249e-07, -5.479902029037476e-06, -2.288818359375e-05, -9.34600830078125e-05, -0.0002460479736328125, -0.011976242065429688, -4.00543212890625e-05, -9.536738616588991e-07, -0.00040638327482156456, -1.4781926438445225e-05, 0.0, -0.0004207210731692612, -5.7220458984375e-06, -0.01777958869934082, 0.0, -1.1563299267436378e-05, 0.0, -0.0003319675743114203, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -4.76837158203125e-05, -4.220008850097656e-05, 0.0, -0.9166135787963867, -8.58306884765625e-05, -0.0335540771484375, -1.52587890625e-05, -5.7220458984375e-06, -0.0001811981201171875, -1.9073486328125e-05, -0.001231074333190918, -2.6702880859375e-05, -4.9591064453125e-05, -6.4849853515625e-05, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -0.00015676021575927734, -0.000118255615234375, -0.00011360644566593692, -1.9073486328125e-06, -0.0002079010009765625, -0.0006771087646484375, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -5.53131103515625e-05, -1.1920928244535389e-07, -0.0006805658340454102, -2.0265579223632812e-06, -0.00019955595780629665, -0.0001392364501953125, -0.000133514404296875, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00032806396484375, -3.24249267578125e-05, -0.004870414733886719, -1.71661376953125e-05, -0.0001659393310546875, -8.392333984375e-05, 0.0, -0.017502784729003906, -5.53131103515625e-05, -3.62396240234375e-05, 0.0, -0.0024890899658203125, 0.0, -0.012865662574768066, -0.0002307891845703125, -0.00020229816436767578, -4.00543212890625e-05, -1.42626953125, -0.0002651214599609375, -3.814697265625e-06, 0.0, -0.0012664794921875, -1.71661376953125e-05, -0.24424099922180176, 0.0, -3.4332275390625e-05, -0.0005741119384765625, -3.814697265625e-06, -0.00030517578125, -0.00031280517578125, -6.29425048828125e-05, 0.0, -0.007366180419921875, 0.0, -0.011358499526977539, -9.5367431640625e-06, -0.5042439699172974, -1.1444091796875e-05], "score": -3.229101296085723, "model_output": {"hole4": "player", "hole0": "HolyNova", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"hole1": "append", "hole2": [{"attr": "hero", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Holy Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.current_player.hero)\n"}, {"choice_history": [121, 200, "Holy", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>"], "score_history": [-0.007686614990234375, -0.0001544952392578125, -4.768370445162873e-07, -2.9802317840221804e-06, -3.576278118089249e-07, -5.479902029037476e-06, -2.288818359375e-05, -9.34600830078125e-05, -0.0002460479736328125, -0.011976242065429688, -4.00543212890625e-05, -9.536738616588991e-07, -0.00040638327482156456, -1.4781926438445225e-05, 0.0, -0.0004207210731692612, -5.7220458984375e-06, -0.01777958869934082, 0.0, -1.1563299267436378e-05, 0.0, -0.0003319675743114203, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -4.76837158203125e-05, -4.220008850097656e-05, 0.0, -0.9166135787963867, -8.58306884765625e-05, -0.0335540771484375, -1.52587890625e-05, -5.7220458984375e-06, -0.0001811981201171875, -1.9073486328125e-05, -0.001231074333190918, -2.6702880859375e-05, -4.9591064453125e-05, -6.4849853515625e-05, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -0.00015676021575927734, -0.000118255615234375, -0.00011360644566593692, -1.9073486328125e-06, -0.0002079010009765625, -0.0006771087646484375, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -5.53131103515625e-05, -1.1920928244535389e-07, -0.0006805658340454102, -2.0265579223632812e-06, -0.00019955595780629665, -0.0001392364501953125, -0.000133514404296875, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00032806396484375, -3.24249267578125e-05, -0.004870414733886719, -1.71661376953125e-05, -0.0001659393310546875, -8.392333984375e-05, 0.0, -0.017502784729003906, -5.53131103515625e-05, -3.62396240234375e-05, 0.0, -0.0024890899658203125, 0.0, -0.012865662574768066, -0.0002307891845703125, -0.00020229816436767578, -4.00543212890625e-05, -1.42626953125, -0.0002651214599609375, -3.814697265625e-06, 0.0, -0.0012664794921875, -1.71661376953125e-05, -0.24424099922180176, 0.0, -3.4332275390625e-05, -0.0005741119384765625, -3.814697265625e-06, -0.00030517578125, -0.00031280517578125, -6.29425048828125e-05, 0.0, -0.007366180419921875, 0.0, -0.011358499526977539, -9.5367431640625e-06, -0.9303885698318481, -1.71661376953125e-05], "score": -3.6552516180461723, "model_output": {"hole4": "player", "hole0": "HolyNova", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"hole1": "append", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Holy Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.current_player.minions)\n"}, {"choice_history": [121, 200, "Holy", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.007686614990234375, -0.0001544952392578125, -4.768370445162873e-07, -2.9802317840221804e-06, -3.576278118089249e-07, -5.479902029037476e-06, -2.288818359375e-05, -9.34600830078125e-05, -0.0002460479736328125, -0.011976242065429688, -4.00543212890625e-05, -9.536738616588991e-07, -0.00040638327482156456, -1.4781926438445225e-05, 0.0, -0.0004207210731692612, -5.7220458984375e-06, -0.01777958869934082, 0.0, -1.1563299267436378e-05, 0.0, -0.0003319675743114203, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -4.76837158203125e-05, -4.220008850097656e-05, 0.0, -3.738405227661133, -0.0003566741943359375, -0.000568389892578125, -6.29425048828125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00035868125269189477, -2.0265579223632812e-06, -0.00283050537109375, -0.0002346038818359375, -1.71661376953125e-05, -5.7220458984375e-06, -9.5367431640625e-06, 0.0, -0.002938389778137207, -9.5367431640625e-05, -0.00017428396677132696, 0.0, -2.6702880859375e-05, -7.82012939453125e-05, 0.0, -6.4849853515625e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.0001201629638671875, 0.0, -0.00040781497955322266, -2.2649765014648438e-06, -0.00023197883274406195, -0.0001430511474609375, -0.0004901885986328125, -2.6702880859375e-05, -2.86102294921875e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.0002305505913682282, -1.4901099348207936e-05, -0.007702209986746311, 0.0, -0.0001506805419921875, -0.0002384185791015625, -3.24249267578125e-05, -2.09808349609375e-05, -0.001366734504699707, -5.841255187988281e-06, -0.0006368790054693818, -1.9073486328125e-06, -4.1961669921875e-05], "score": -3.7975019372650536, "model_output": {"hole4": "player", "hole0": "HolyNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Holy Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>"], "score_history": [-0.007686614990234375, -0.0001544952392578125, -4.768370445162873e-07, -2.9802317840221804e-06, -3.576278118089249e-07, -5.479902029037476e-06, -2.288818359375e-05, -9.34600830078125e-05, -0.0002460479736328125, -0.011976242065429688, -4.00543212890625e-05, -9.536738616588991e-07, -0.00040638327482156456, -1.4781926438445225e-05, 0.0, -0.0004207210731692612, -5.7220458984375e-06, -0.01777958869934082, 0.0, -1.1563299267436378e-05, 0.0, -0.0003319675743114203, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -4.76837158203125e-05, -4.220008850097656e-05, 0.0, -0.9166135787963867, -8.58306884765625e-05, -0.0335540771484375, -1.52587890625e-05, -5.7220458984375e-06, -0.0001811981201171875, -1.9073486328125e-05, -0.001231074333190918, -2.6702880859375e-05, -4.9591064453125e-05, -6.4849853515625e-05, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -0.00015676021575927734, -0.000118255615234375, -0.00011360644566593692, -1.9073486328125e-06, -0.0002079010009765625, -0.0006771087646484375, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -5.53131103515625e-05, -1.1920928244535389e-07, -0.0006805658340454102, -2.0265579223632812e-06, -0.00019955595780629665, -0.0001392364501953125, -0.000133514404296875, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00032806396484375, -3.24249267578125e-05, -0.004870414733886719, -1.71661376953125e-05, -0.0001659393310546875, -8.392333984375e-05, 0.0, -0.017502784729003906, -5.53131103515625e-05, -3.62396240234375e-05, 0.0, -0.0024890899658203125, 0.0, -0.012865662574768066, -0.0002307891845703125, -0.00020229816436767578, -4.00543212890625e-05, -1.42626953125, -0.0002651214599609375, -3.814697265625e-06, 0.0, -0.0012664794921875, -1.71661376953125e-05, -1.5831100940704346, -1.9073486328125e-06, -0.00608062744140625, -9.5367431640625e-05, -1.9073486328125e-06, -0.0029315948486328125, -6.103515625e-05, -0.0001068115234375, 0.0, -0.007239341735839844, 0.0, -0.007869958877563477, -4.38690185546875e-05, -0.0145493745803833, -2.288818359375e-05], "score": -4.082692261356719, "model_output": {"hole4": "player", "hole0": "HolyNova", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Holy Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.extend(game.current_player.minions)\n"}, {"choice_history": [121, 200, "Holy", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.007686614990234375, -0.0001544952392578125, -4.768370445162873e-07, -2.9802317840221804e-06, -3.576278118089249e-07, -5.479902029037476e-06, -2.288818359375e-05, -9.34600830078125e-05, -0.0002460479736328125, -0.011976242065429688, -4.00543212890625e-05, -9.536738616588991e-07, -0.00040638327482156456, -1.4781926438445225e-05, 0.0, -0.0004207210731692612, -5.7220458984375e-06, -0.01777958869934082, 0.0, -1.1563299267436378e-05, 0.0, -0.0003319675743114203, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -4.76837158203125e-05, -4.220008850097656e-05, 0.0, -0.9166135787963867, -8.58306884765625e-05, -3.548163414001465, -6.103515625e-05, -0.003826141357421875, -0.02436700277030468, -3.576278118089249e-07, -0.0001678466796875, -0.007851600646972656, -7.62939453125e-06, -0.0002307891845703125, -0.011576652526855469, 0.0, -0.0006973904673941433, -7.62939453125e-06, -6.103515625e-05, -0.004177093505859375, -0.00201416015625, -4.38690185546875e-05, -1.9073486328125e-06, -3.457069396972656e-05, -3.814697265625e-06, -0.0029659271240234375, -2.09808349609375e-05, -0.037901878356933594, -0.0007443428039550781, -3.814697265625e-06, -3.814697265625e-05, -3.0517578125e-05, -4.57763671875e-05, -0.0003910064697265625, -0.00012969970703125, -0.00016236305236816406, -3.814697265625e-06, -0.04376402869820595, -1.9073486328125e-06, -0.000820159912109375, -0.0004253387451171875, -2.6702880859375e-05, -0.0003566741943359375, -0.020196914672851562, -1.9073486328125e-06, -0.0007810426759533584, -2.47955322265625e-05, -7.62939453125e-05, -0.0026988983154296875, -0.010957717895507812, -4.00543212890625e-05, -1.9073486328125e-06, -4.398822784423828e-05, -3.814697265625e-06, -0.005528450012207031, -2.47955322265625e-05, -0.012463569641113281, -0.0005859136581420898, -1.9073486328125e-06, -2.47955322265625e-05, -4.38690185546875e-05, -4.00543212890625e-05, -0.000362396240234375, -0.00012969970703125, -0.00011289119720458984, -3.814697265625e-06, -0.047831904143095016, -1.9073486328125e-06, -0.0006732940673828125, -0.000423431396484375, -2.6702880859375e-05, -0.0003452301025390625, -0.021109580993652344, -1.9073486328125e-06, -0.0007842440973035991, -2.47955322265625e-05, -7.62939453125e-05], "score": -4.772594486509433, "model_output": {"hole4": "player", "hole0": "HolyNova", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Holy Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.007686614990234375, -0.0001544952392578125, -4.768370445162873e-07, -2.9802317840221804e-06, -3.576278118089249e-07, -5.479902029037476e-06, -2.288818359375e-05, -9.34600830078125e-05, -0.0002460479736328125, -0.011976242065429688, -4.00543212890625e-05, -9.536738616588991e-07, -0.00040638327482156456, -1.4781926438445225e-05, 0.0, -0.0004207210731692612, -5.7220458984375e-06, -0.01777958869934082, 0.0, -1.1563299267436378e-05, 0.0, -0.0003319675743114203, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -4.76837158203125e-05, -4.220008850097656e-05, 0.0, -0.6121501922607422, -0.00014495849609375, -4.624453544616699, -5.14984130859375e-05, -0.033858299255371094, -0.0004603993729688227, -3.933898824470816e-06, -8.392333984375e-05, -0.0003833770751953125, -2.09808349609375e-05, -0.0001201629638671875, -0.00023484230041503906, -1.9073486328125e-06, -0.000745714467484504, -1.9073486328125e-06, -8.96453857421875e-05, -0.008615493774414062, -0.0006351470947265625, -7.62939453125e-06, -5.7220458984375e-06, -0.00013554096221923828, -5.7220458984375e-06, -0.0023708343505859375, -2.288818359375e-05, -0.02704334259033203, -0.0007172822952270508, -3.814697265625e-06, -4.57763671875e-05, -3.24249267578125e-05, -7.05718994140625e-05, -0.000255584716796875, -9.34600830078125e-05, -0.00015079975128173828, -1.9073486328125e-06, -0.036080148071050644, -3.814697265625e-06, -0.000762939453125, -0.000385284423828125, -2.6702880859375e-05, -0.0003204345703125, -0.019431114196777344, -1.9073486328125e-06, -0.0007927780970931053, -2.6702880859375e-05, -7.43865966796875e-05], "score": -5.410244716178852, "model_output": {"hole4": "player", "hole0": "HolyNova", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Holy Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.007686614990234375, -0.0001544952392578125, -4.768370445162873e-07, -2.9802317840221804e-06, -3.576278118089249e-07, -5.479902029037476e-06, -2.288818359375e-05, -9.34600830078125e-05, -0.0002460479736328125, -0.011976242065429688, -4.00543212890625e-05, -9.536738616588991e-07, -0.00040638327482156456, -1.4781926438445225e-05, 0.0, -0.0004207210731692612, -5.7220458984375e-06, -4.871286392211914, -1.1444091796875e-05, -1.8835065930034034e-05, 0.0, -0.0002417529613012448, 0.0, -9.5367431640625e-06, -1.52587890625e-05, -4.00543212890625e-05, -3.445148468017578e-05, 0.0, -0.5254764556884766, -0.0003070831298828125, -0.0048313140869140625, -0.0001239776611328125, -1.9073486328125e-06, -7.62939453125e-06, -0.0005837961798533797, -4.291534423828125e-06, -0.001312255859375, -0.0002536773681640625, -3.0517578125e-05, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -0.0012753009796142578, -0.00016021728515625, -9.989737736759707e-05, 0.0, -3.0517578125e-05, -0.0001239776611328125, 0.0, -6.67572021484375e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -0.0001010894775390625, 0.0, -0.0005016326904296875, -2.2649765014648438e-06, -0.0002179131261073053, -0.0001506805419921875, -0.00025177001953125, -1.9073486328125e-05, -1.71661376953125e-05, -2.288818359375e-05, -3.814697265625e-06, -0.00019967544358223677, -1.573553163325414e-05, -0.0057172165252268314, 0.0, -0.000141143798828125, -0.0002288818359375, -4.00543212890625e-05, -1.9073486328125e-05, -0.0017958879470825195, -5.841255187988281e-06, -0.0006520178285427392, -1.9073486328125e-06, -4.38690185546875e-05, -0.0028781890869140625, -0.0009021759033203125, -3.814697265625e-06, -3.814697265625e-06, -0.0002422332763671875, -7.62939453125e-06, -0.011599540710449219, -1.71661376953125e-05, -0.010622024536132812, -0.000720977783203125, -1.9073486328125e-06, -0.000171661376953125, -8.392333984375e-05, -4.38690185546875e-05, -0.000133514404296875, -1.1444091796875e-05, -0.00018155574798583984, -1.9073486328125e-06, -0.014101004227995872, -5.7220458984375e-06, -0.000720977783203125, -0.000518798828125, -2.6702880859375e-05, -0.0001125335693359375, -0.006033897399902344, -3.814697265625e-06, -0.0015977073926478624, -4.1961669921875e-05, -6.67572021484375e-05], "score": -5.488468022930476, "model_output": {"hole4": "player", "hole0": "HolyNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "ROGUE", "_type": "Template14", "hole0": "Holy Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 25, 186, "targets", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.007686614990234375, -0.0001544952392578125, -4.768370445162873e-07, -2.9802317840221804e-06, -3.576278118089249e-07, -5.479902029037476e-06, -2.288818359375e-05, -9.34600830078125e-05, -0.0002460479736328125, -0.011976242065429688, -4.00543212890625e-05, -9.536738616588991e-07, -0.00040638327482156456, -1.4781926438445225e-05, 0.0, -0.0004207210731692612, -5.7220458984375e-06, -0.01777958869934082, 0.0, -1.1563299267436378e-05, 0.0, -0.0003319675743114203, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -4.76837158203125e-05, -4.220008850097656e-05, 0.0, -0.9166135787963867, -8.58306884765625e-05, -0.0335540771484375, -1.52587890625e-05, -5.7220458984375e-06, -0.0001811981201171875, -1.9073486328125e-05, -0.001231074333190918, -2.6702880859375e-05, -4.9591064453125e-05, -6.4849853515625e-05, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -0.00015676021575927734, -0.000118255615234375, -0.00011360644566593692, -1.9073486328125e-06, -0.0002079010009765625, -0.0006771087646484375, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -5.53131103515625e-05, -1.1920928244535389e-07, -0.0006805658340454102, -2.0265579223632812e-06, -0.00019955595780629665, -0.0001392364501953125, -0.000133514404296875, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00032806396484375, -3.24249267578125e-05, -0.004870414733886719, -1.71661376953125e-05, -0.0001659393310546875, -8.392333984375e-05, 0.0, -4.236364364624023, -3.24249267578125e-05, -1.9073486328125e-06, -0.0049190521240234375, -0.000690460205078125, 0.0, -2.09808349609375e-05, -0.0015794038772583008, -1.9073486328125e-06, -0.0025119781494140625, -2.6702880859375e-05, -0.00057220458984375, -1.9073486328125e-05, -0.0001926422119140625, -0.0006465911865234375, -0.0002307891845703125, -0.001224517822265625, -1.9073486328125e-06, -4.0769344195723534e-05, -3.7550926208496094e-05, -0.26229825615882874, 0.0, -0.0002460479736328125, -0.0002040863037109375, -3.814697265625e-05, -1.1444091796875e-05, -0.001247406005859375, -1.9073486328125e-06, -0.0005495027871802449, -1.9073486328125e-06, -2.47955322265625e-05], "score": -5.513071868023694, "model_output": {"hole4": "player", "hole0": "HolyNova", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Holy Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.007686614990234375, -0.0001544952392578125, -4.768370445162873e-07, -2.9802317840221804e-06, -3.576278118089249e-07, -5.479902029037476e-06, -2.288818359375e-05, -9.34600830078125e-05, -0.0002460479736328125, -0.011976242065429688, -4.00543212890625e-05, -9.536738616588991e-07, -0.00040638327482156456, -1.4781926438445225e-05, 0.0, -0.0004207210731692612, -5.7220458984375e-06, -0.01777958869934082, 0.0, -1.1563299267436378e-05, 0.0, -0.0003319675743114203, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -4.76837158203125e-05, -4.220008850097656e-05, 0.0, -0.6121501922607422, -0.00014495849609375, -0.013719558715820312, -0.00014495849609375, -1.9073486328125e-06, -7.62939453125e-06, -0.0005069315666332841, -2.2649765014648438e-06, -0.0014514923095703125, -0.0001544952392578125, -4.38690185546875e-05, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -0.0013524293899536133, -0.0002803802490234375, -0.00010073183511849493, 0.0, -2.86102294921875e-05, -0.0001392364501953125, 0.0, -6.4849853515625e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -9.72747802734375e-05, 0.0, -0.0005035400390625, -2.2649765014648438e-06, -0.0002182706375606358, -0.0001544952392578125, -0.000247955322265625, -1.9073486328125e-05, -1.52587890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.00021898731938563287, -1.6450776456622407e-05, -0.005620504263788462, 0.0, -0.0001468658447265625, -0.000225067138671875, -3.814697265625e-05, -2.09808349609375e-05, -0.0019065141677856445, -5.841255187988281e-06, -0.0006534731946885586, -1.9073486328125e-06, -4.38690185546875e-05, -0.0028285980224609375, -0.0008487701416015625, -3.814697265625e-06, -3.814697265625e-06, -0.00022900104522705078, -7.62939453125e-06, -4.889720916748047, -0.001209259033203125, -0.013233184814453125, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.018598437309265137, -0.0002155303955078125, -0.00042939186096191406, 0.0, -1.33514404296875e-05, -0.0010662078857421875, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0001087188720703125, 0.0, -0.0014945268630981445, -2.1457672119140625e-06, -0.000260352244367823, -0.00011444091796875, -0.0011749267578125, -5.53131103515625e-05, -2.288818359375e-05, -3.0517578125e-05, -3.814697265625e-06, -0.00010907644173130393, -1.1682462172757369e-05, -0.007412943057715893, 0.0, -0.000133514404296875, -0.0003376007080078125, -3.24249267578125e-05, -1.9073486328125e-05, -0.0010548830032348633, -3.933906555175781e-06, -0.0006033696699887514, -1.9073486328125e-06, -3.62396240234375e-05], "score": -5.621525053727794, "model_output": {"hole4": "player", "hole0": "HolyNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Holy Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 337, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.007686614990234375, -0.0001544952392578125, -4.768370445162873e-07, -2.9802317840221804e-06, -3.576278118089249e-07, -5.479902029037476e-06, -2.288818359375e-05, -9.34600830078125e-05, -0.0002460479736328125, -0.011976242065429688, -4.00543212890625e-05, -9.536738616588991e-07, -0.00040638327482156456, -1.4781926438445225e-05, 0.0, -0.0004207210731692612, -5.7220458984375e-06, -0.01777958869934082, 0.0, -1.1563299267436378e-05, 0.0, -0.0003319675743114203, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -4.76837158203125e-05, -4.220008850097656e-05, 0.0, -4.693265914916992, -0.00038909912109375, -0.6820344924926758, -3.4332275390625e-05, -1.9073486328125e-06, -2.09808349609375e-05, -0.0013488925760611892, -4.172325134277344e-06, -0.0018558502197265625, -0.0001468658447265625, -4.1961669921875e-05, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -0.0011970996856689453, -0.0004024505615234375, -0.0001493691379437223, 0.0, -3.4332275390625e-05, -0.0001621246337890625, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -1.52587890625e-05, 0.0, -0.00011444091796875, 0.0, -0.0004684925079345703, -2.2649765014648438e-06, -0.00021958217257633805, -0.00016021728515625, -0.00022125244140625, -2.47955322265625e-05, -2.09808349609375e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.00019657600205391645, -1.4543453289661556e-05, -0.0067983390763401985, 0.0, -0.000156402587890625, -0.000232696533203125, -3.62396240234375e-05, -2.09808349609375e-05, -0.001618504524230957, -5.841255187988281e-06, -0.0006414441741071641, -1.9073486328125e-06, -4.1961669921875e-05, -0.0012302398681640625, -0.0046234130859375, -7.62939453125e-06, -7.62939453125e-06, -7.832050323486328e-05, -1.33514404296875e-05, -0.011513710021972656, -1.71661376953125e-05, -0.025768280029296875, -0.0008630752563476562, -1.9073486328125e-06, -0.0001735687255859375, -7.82012939453125e-05, -4.00543212890625e-05, -0.000148773193359375, -1.33514404296875e-05, -0.00016248226165771484, -1.9073486328125e-06, -0.013976330868899822, -5.7220458984375e-06, -0.000766754150390625, -0.000553131103515625, -2.86102294921875e-05, -0.0001163482666015625, -0.006145477294921875, -3.814697265625e-06, -0.001606289646588266, -4.1961669921875e-05, -6.67572021484375e-05, -0.0034618377685546875, -0.007289886474609375, -3.0517578125e-05, -3.814697265625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0014667510986328125, -1.9073486328125e-05, -0.008046150207519531, -0.0011472702026367188, -3.814697265625e-06, -0.00011444091796875, -7.43865966796875e-05, -4.00543212890625e-05, -0.0001468658447265625, -1.1444091796875e-05, -0.00021016597747802734, -3.814697265625e-06, -0.015147167257964611, -5.7220458984375e-06, -0.000812530517578125, -0.000518798828125, -2.86102294921875e-05, -0.00011444091796875, -0.006290435791015625, -3.814697265625e-06, -0.0017371574649587274, -4.38690185546875e-05, -6.4849853515625e-05, -0.0029697418212890625, -0.0077953338623046875, -2.47955322265625e-05, -3.814697265625e-06, -0.0002689361572265625, -3.814697265625e-06, -0.0014438629150390625, -1.71661376953125e-05, -0.007880210876464844, -0.0011463165283203125, -3.814697265625e-06, -0.0001239776611328125, -7.62939453125e-05, -4.1961669921875e-05, -0.0001468658447265625, -1.1444091796875e-05, -0.0002168416976928711, -3.814697265625e-06, -0.015157180838286877, -5.7220458984375e-06, -0.000820159912109375, -0.0005168914794921875, -2.86102294921875e-05, -0.00011444091796875, -0.006302833557128906, -3.814697265625e-06, -0.001776492572389543, -4.38690185546875e-05, -6.4849853515625e-05, -0.0028400421142578125, -0.007862091064453125, -2.288818359375e-05, -3.814697265625e-06, -0.0002803802490234375, -3.814697265625e-06, -0.001438140869140625, -1.71661376953125e-05, -0.00785064697265625, -0.0011453628540039062, -3.814697265625e-06, -0.0001277923583984375, -7.82012939453125e-05, -4.1961669921875e-05, -0.00014495849609375, -1.1444091796875e-05, -0.0002187490463256836, -3.814697265625e-06, -0.01517041027545929, -5.7220458984375e-06, -0.000820159912109375, -0.0005168914794921875, -2.86102294921875e-05, -0.00011444091796875, -0.006304740905761719, -3.814697265625e-06, -0.0017916313372552395, -4.38690185546875e-05, -6.4849853515625e-05], "score": -5.6406483714461615, "model_output": {"hole4": "player", "hole0": "HolyNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Holy Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.007686614990234375, -0.0001544952392578125, -4.768370445162873e-07, -2.9802317840221804e-06, -3.576278118089249e-07, -5.479902029037476e-06, -2.288818359375e-05, -9.34600830078125e-05, -0.0002460479736328125, -0.011976242065429688, -4.00543212890625e-05, -9.536738616588991e-07, -0.00040638327482156456, -1.4781926438445225e-05, 0.0, -0.0004207210731692612, -5.7220458984375e-06, -0.01777958869934082, 0.0, -1.1563299267436378e-05, 0.0, -0.0003319675743114203, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -4.76837158203125e-05, -4.220008850097656e-05, 0.0, -0.6121501922607422, -0.00014495849609375, -0.013719558715820312, -0.00014495849609375, -1.9073486328125e-06, -7.62939453125e-06, -0.0005069315666332841, -2.2649765014648438e-06, -0.0014514923095703125, -0.0001544952392578125, -4.38690185546875e-05, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -0.0013524293899536133, -0.0002803802490234375, -0.00010073183511849493, 0.0, -2.86102294921875e-05, -0.0001392364501953125, 0.0, -6.4849853515625e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -9.72747802734375e-05, 0.0, -0.0005035400390625, -2.2649765014648438e-06, -0.0002182706375606358, -0.0001544952392578125, -0.000247955322265625, -1.9073486328125e-05, -1.52587890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.00021898731938563287, -1.6450776456622407e-05, -0.005620504263788462, 0.0, -0.0001468658447265625, -0.000225067138671875, -3.814697265625e-05, -2.09808349609375e-05, -0.0019065141677856445, -5.841255187988281e-06, -0.0006534731946885586, -1.9073486328125e-06, -4.38690185546875e-05, -0.0028285980224609375, -0.0008487701416015625, -3.814697265625e-06, -3.814697265625e-06, -0.00022900104522705078, -7.62939453125e-06, -0.012202262878417969, -1.71661376953125e-05, -0.010608673095703125, -0.0007228851318359375, -1.9073486328125e-06, -0.00017547607421875, -8.20159912109375e-05, -4.38690185546875e-05, -0.0001354217529296875, -1.1444091796875e-05, -0.00018155574798583984, -1.9073486328125e-06, -4.57125997543335, 0.0, -0.003108978271484375, -0.0002994537353515625, -1.71661376953125e-05, -3.0517578125e-05, -0.49163818359375, 0.0, -0.0005086885648779571, -1.52587890625e-05, -3.4332275390625e-05], "score": -5.774852219791512, "model_output": {"hole4": "player", "hole0": "HolyNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Holy Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        for minion in player.minions:\n            minion.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Nova", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 339, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.007686614990234375, -0.0001544952392578125, -4.768370445162873e-07, -2.9802317840221804e-06, -3.576278118089249e-07, -5.479902029037476e-06, -2.288818359375e-05, -9.34600830078125e-05, -0.0002460479736328125, -0.011976242065429688, -4.00543212890625e-05, -9.536738616588991e-07, -0.00040638327482156456, -1.4781926438445225e-05, 0.0, -0.0004207210731692612, -5.7220458984375e-06, -0.01777958869934082, 0.0, -1.1563299267436378e-05, 0.0, -0.0003319675743114203, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -4.76837158203125e-05, -4.220008850097656e-05, 0.0, -5.252687931060791, -0.0001373291015625, -0.07292366027832031, -0.000110626220703125, 0.0, -1.9073486328125e-05, -0.0012697945348918438, -4.768370445162873e-07, -0.006175994873046875, -0.000148773193359375, -6.103515625e-05, -1.1444091796875e-05, -1.52587890625e-05, 0.0, -0.0031472444534301758, -0.0009775161743164062, -9.560579928802326e-05, 0.0, -4.00543212890625e-05, -0.0001659393310546875, 0.0, -6.4849853515625e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -8.58306884765625e-05, 0.0, -0.0005068778991699219, -2.1457672119140625e-06, -0.00020968771423213184, -0.000164031982421875, -0.000247955322265625, -2.6702880859375e-05, -1.33514404296875e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.0002844331320375204, -1.6689191397745162e-05, -0.005604481790214777, 0.0, -0.000152587890625, -0.0002231597900390625, -3.4332275390625e-05, -2.09808349609375e-05, -0.0021535158157348633, -5.841255187988281e-06, -0.0006598490290343761, -1.9073486328125e-06, -4.38690185546875e-05, -0.03295135498046875, -0.0005168914794921875, -1.1444091796875e-05, -1.9073486328125e-06, -2.5510787963867188e-05, -1.52587890625e-05, -0.0831289291381836, -7.62939453125e-06, -0.021445274353027344, -0.0015088319778442383, -1.9073486328125e-06, -0.0001316070556640625, -0.0001316070556640625, -4.57763671875e-05, -0.0001468658447265625, -1.33514404296875e-05, -0.00015866756439208984, -1.9073486328125e-06, -0.0142881004139781, -5.7220458984375e-06, -0.0007648468017578125, -0.00054168701171875, -2.86102294921875e-05, -0.0001125335693359375, -0.006072044372558594, -3.814697265625e-06, -0.0016182148829102516, -4.1961669921875e-05, -6.4849853515625e-05, -0.09690189361572266, -0.0005474090576171875, -2.6702880859375e-05, -1.9073486328125e-06, -6.115436553955078e-05, -5.7220458984375e-06, -0.0019359588623046875, -2.288818359375e-05, -0.010522842407226562, -0.0018873214721679688, -1.9073486328125e-06, -9.72747802734375e-05, -0.00020599365234375, -3.62396240234375e-05, -0.0001163482666015625, -9.5367431640625e-06, -0.0001665353775024414, -3.814697265625e-06, -0.016094421967864037, -5.7220458984375e-06, -0.0008525848388671875, -0.0005207061767578125, -3.0517578125e-05, -0.000118255615234375, -0.006183624267578125, -3.814697265625e-06, -0.0017961871344596148, -4.38690185546875e-05, -6.29425048828125e-05, -0.10118484497070312, -0.0005092620849609375, -1.71661376953125e-05, 0.0, -6.687641143798828e-05, -5.7220458984375e-06, -0.0019683837890625, -2.288818359375e-05, -0.010580062866210938, -0.0018949508666992188, -1.9073486328125e-06, -0.0001049041748046875, -0.0001964569091796875, -3.62396240234375e-05, -0.0001163482666015625, -9.5367431640625e-06, -0.00017023086547851562, -3.814697265625e-06, -0.01603555493056774, -5.7220458984375e-06, -0.000873565673828125, -0.000522613525390625, -3.0517578125e-05, -0.000118255615234375, -0.0061969757080078125, -3.814697265625e-06, -0.0018270588479936123, -4.38690185546875e-05, -6.29425048828125e-05, -0.1031036376953125, -0.0005054473876953125, -1.52587890625e-05, 0.0, -6.878376007080078e-05, -5.7220458984375e-06, -0.0019779205322265625, -2.288818359375e-05, -0.010599136352539062, -0.0018960237503051758, -1.9073486328125e-06, -0.0001068115234375, -0.0001926422119140625, -3.62396240234375e-05, -0.0001163482666015625, -9.5367431640625e-06, -0.00017213821411132812, -3.814697265625e-06, -0.016034530475735664, -3.814697265625e-06, -0.00087738037109375, -0.000522613525390625, -3.0517578125e-05, -0.000118255615234375, -0.006201744079589844, -3.814697265625e-06, -0.0018344486597925425, -4.38690185546875e-05, -6.29425048828125e-05, -0.10367774963378906, -0.0005035400390625, -1.52587890625e-05, 0.0, -7.069110870361328e-05, -5.7220458984375e-06, -0.0019817352294921875, -2.288818359375e-05, -0.010606765747070312, -0.0018960237503051758, -1.9073486328125e-06, -0.0001068115234375, -0.0001926422119140625, -3.62396240234375e-05, -0.0001163482666015625, -9.5367431640625e-06, -0.00017404556274414062, -3.814697265625e-06, -0.016033682972192764, -3.814697265625e-06, -0.00087738037109375, -0.000522613525390625, -3.0517578125e-05, -0.000118255615234375, -0.00620269775390625, -3.814697265625e-06, -0.0018368326127529144, -4.38690185546875e-05, -6.29425048828125e-05, -0.10388469696044922, -0.0005016326904296875, -1.52587890625e-05, 0.0, -7.069110870361328e-05, -5.7220458984375e-06, -0.0019817352294921875, -2.288818359375e-05, -0.010610580444335938, -0.0018960237503051758, -1.9073486328125e-06, -0.0001068115234375, -0.0001926422119140625, -3.62396240234375e-05, -0.0001163482666015625, -9.5367431640625e-06, -0.00017404556274414062, -3.814697265625e-06, -0.016033800318837166, -3.814697265625e-06, -0.0008792877197265625, -0.000522613525390625, -3.0517578125e-05, -0.000118255615234375, -0.00620269775390625, -3.814697265625e-06, -0.0018389779143035412, -4.38690185546875e-05, -6.29425048828125e-05, -0.1039743423461914, -0.0005016326904296875, -1.33514404296875e-05, 0.0, -7.069110870361328e-05, -5.7220458984375e-06, -0.001983642578125, -2.288818359375e-05, -0.010610580444335938, -0.0018960237503051758, -1.9073486328125e-06, -0.0001068115234375, -0.0001926422119140625, -3.62396240234375e-05, -0.0001163482666015625, -9.5367431640625e-06, -0.00017404556274414062, -3.814697265625e-06, -0.016032729297876358, -3.814697265625e-06, -0.0008792877197265625, -0.000522613525390625, -3.0517578125e-05, -0.000118255615234375, -0.00620269775390625, -3.814697265625e-06, -0.0018390972400084138, -4.38690185546875e-05, -6.29425048828125e-05, -0.1040191650390625, -0.0005016326904296875, -1.33514404296875e-05, 0.0, -7.069110870361328e-05, -5.7220458984375e-06, -0.001983642578125, -2.288818359375e-05, -0.01061248779296875, -0.0018960237503051758, -1.9073486328125e-06, -0.0001068115234375, -0.0001926422119140625, -3.62396240234375e-05, -0.0001163482666015625, -9.5367431640625e-06, -0.00017404556274414062, -3.814697265625e-06, -0.016032729297876358, -3.814697265625e-06, -0.0008792877197265625, -0.000522613525390625, -3.0517578125e-05, -0.000118255615234375, -0.00620269775390625, -3.814697265625e-06, -0.0018390972400084138, -4.38690185546875e-05, -6.29425048828125e-05, -0.10404300689697266, -0.0005016326904296875, -1.33514404296875e-05, 0.0, -7.069110870361328e-05, -5.7220458984375e-06, -0.001983642578125, -2.288818359375e-05, -0.01061248779296875, -0.0018960237503051758, -1.9073486328125e-06, -0.0001068115234375, -0.0001926422119140625, -3.62396240234375e-05, -0.0001163482666015625, -9.5367431640625e-06, -0.00017404556274414062, -3.814697265625e-06, -0.016032610088586807, -3.814697265625e-06, -0.0008792877197265625, -0.000522613525390625, -3.0517578125e-05, -0.000118255615234375, -0.00620269775390625, -3.814697265625e-06, -0.0018390972400084138, -4.38690185546875e-05, -6.29425048828125e-05], "score": -6.704128024067074, "model_output": {"hole4": "player", "hole0": "HolyNova", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}, {"body": [{"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 5, "hole2": "PRIEST", "_type": "Template14", "hole0": "Holy Nova"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n"}], "index": 50}
{"beams": [{"choice_history": [121, 200, "Holy", "Smite", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Smite", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0002288818359375, -7.82012939453125e-05, -4.768370445162873e-07, -2.503394853192731e-06, -2.861022494471399e-06, -9.059673175215721e-06, -0.000217437744140625, -1.537799835205078e-05, -4.76837158203125e-05, -0.000152587890625, -3.814697265625e-06, -5.340576171875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -0.0006465911865234375, -9.5367431640625e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -0.00026190225617028773, -3.7312427593860775e-05, 0.0, -0.0002117156982421875, -2.09808349609375e-05, -2.288818359375e-05, -0.0001239776611328125, -1.9073486328125e-05, -0.00016987323760986328, 0.0, -0.012359141372144222, 0.0, -0.0005283355712890625, -7.62939453125e-06, -1.9073486328125e-05, -1.33514404296875e-05, -2.491474151611328e-05, 0.0, -1.71661376953125e-05, -0.000186920166015625, -5.340576171875e-05, -0.000171661376953125, 0.0, -4.00543212890625e-05, 0.0, -1.5139577953959815e-05, 0.0, -0.0001544952392578125, -3.4332275390625e-05, -0.00026702880859375, -0.0003724098205566406, 0.0, -0.0005168914794921875, -1.71661376953125e-05, -5.340576171875e-05, -5.7220458984375e-06, -4.00543212890625e-05, -2.741813204920618e-06, -7.033323527139146e-06, -3.814697265625e-05, -0.0003452301025390625, -1.33514404296875e-05, -8.20159912109375e-05, -0.00011348723637638614, -1.1920928244535389e-07, -0.0022301645949482918, 0.0, -1.52587890625e-05], "score": -0.020139331957913953, "model_output": {"hole4": "player", "hole0": "HolySmite", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Smite", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Smite", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Smite", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0002288818359375, -7.82012939453125e-05, -4.768370445162873e-07, -2.503394853192731e-06, -2.861022494471399e-06, -9.059673175215721e-06, -0.000217437744140625, -1.537799835205078e-05, -4.76837158203125e-05, -0.000152587890625, -3.814697265625e-06, -5.340576171875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -0.0006465911865234375, -9.5367431640625e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -0.00026190225617028773, -3.7312427593860775e-05, 0.0, -0.0002117156982421875, -2.09808349609375e-05, -2.288818359375e-05, -0.0001239776611328125, -1.9073486328125e-05, -0.00016987323760986328, 0.0, -5.243802547454834, 0.0, -0.0005359649658203125, -2.6702880859375e-05, -1.9073486328125e-05, -1.71661376953125e-05, -3.0517578125e-05, 0.0, -1.52587890625e-05, -9.34600830078125e-05, -5.340576171875e-05, -0.0001811981201171875, 0.0, -2.86102294921875e-05, 0.0, -1.5020368664409034e-05, 0.0, -0.000148773193359375, -3.4332275390625e-05, -0.0002765655517578125, -0.0003666877746582031, 0.0, -0.0005130767822265625, -1.71661376953125e-05, -5.7220458984375e-05, -5.7220458984375e-06, -4.00543212890625e-05, -2.741813204920618e-06, -7.033323527139146e-06, -3.62396240234375e-05, -0.0003490447998046875, -1.33514404296875e-05, -7.82012939453125e-05, -0.00011551379429874942, -1.1920928244535389e-07, -0.0022203894332051277, 0.0, -1.71661376953125e-05], "score": -5.251511808513321, "model_output": {"hole4": "player", "hole0": "HolySmite", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Smite", "_type": "Str"}, {"_type": "Template60"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Smite", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Smite", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0002288818359375, -7.82012939453125e-05, -4.768370445162873e-07, -2.503394853192731e-06, -2.861022494471399e-06, -9.059673175215721e-06, -0.000217437744140625, -1.537799835205078e-05, -4.76837158203125e-05, -0.000152587890625, -3.814697265625e-06, -5.340576171875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -0.0006465911865234375, -9.5367431640625e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -0.00026190225617028773, -3.7312427593860775e-05, 0.0, -0.0002117156982421875, -2.09808349609375e-05, -2.288818359375e-05, -0.0001239776611328125, -1.9073486328125e-05, -0.00016987323760986328, 0.0, -5.58837366104126, 0.0, -0.0016307830810546875, -1.33514404296875e-05, -1.9073486328125e-05, -1.33514404296875e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-05, -0.0001811981201171875, -5.7220458984375e-05, -0.0001983642578125, 0.0, -7.05718994140625e-05, 0.0, -1.3351438610698096e-05, 0.0, -0.0001468658447265625, -3.24249267578125e-05, -0.00028228759765625, -0.0003628730773925781, 0.0, -0.0005130767822265625, -1.71661376953125e-05, -4.76837158203125e-05, -5.7220458984375e-06, -4.00543212890625e-05, -2.741813204920618e-06, -6.9141146923357155e-06, -3.814697265625e-05, -0.000335693359375, -1.33514404296875e-05, -8.392333984375e-05, -0.00011157988774357364, -1.1920928244535389e-07, -0.0022379131987690926, 0.0, -1.71661376953125e-05], "score": -5.597302075504437, "model_output": {"hole4": "player", "hole0": "HolySmite", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Smite", "_type": "Str"}, {"_type": "Template60"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Smite", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Smite", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score_history": [-0.0002288818359375, -7.82012939453125e-05, -4.768370445162873e-07, -2.503394853192731e-06, -2.861022494471399e-06, -9.059673175215721e-06, -0.000217437744140625, -1.537799835205078e-05, -4.76837158203125e-05, -0.000152587890625, -3.814697265625e-06, -5.340576171875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -0.0006465911865234375, -9.5367431640625e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -0.00026190225617028773, -3.7312427593860775e-05, 0.0, -0.0002117156982421875, -2.09808349609375e-05, -2.288818359375e-05, -0.0001239776611328125, -1.9073486328125e-05, -0.00016987323760986328, 0.0, -0.012359141372144222, 0.0, -0.0005283355712890625, -7.62939453125e-06, -1.9073486328125e-05, -1.33514404296875e-05, -2.491474151611328e-05, 0.0, -1.71661376953125e-05, -0.000186920166015625, -5.340576171875e-05, -0.000171661376953125, 0.0, -4.00543212890625e-05, 0.0, -1.5139577953959815e-05, 0.0, -0.0001544952392578125, -3.4332275390625e-05, -0.00026702880859375, -0.0003724098205566406, 0.0, -0.0005168914794921875, -1.71661376953125e-05, -5.340576171875e-05, -5.7220458984375e-06, -4.00543212890625e-05, -2.741813204920618e-06, -7.033323527139146e-06, -3.814697265625e-05, -0.0003452301025390625, -1.33514404296875e-05, -8.20159912109375e-05, -0.00011348723637638614, -1.1920928244535389e-07, -6.116313934326172, -1.1920928244535389e-07, -3.62396240234375e-05], "score": -6.134244201733381, "model_output": {"hole4": "player", "hole0": "HolySmite", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Smite", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n"}, {"choice_history": [121, 200, "Holy", "Smite", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Smite", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0002288818359375, -7.82012939453125e-05, -4.768370445162873e-07, -2.503394853192731e-06, -2.861022494471399e-06, -9.059673175215721e-06, -0.000217437744140625, -1.537799835205078e-05, -4.76837158203125e-05, -0.000152587890625, -3.814697265625e-06, -5.340576171875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -0.0006465911865234375, -9.5367431640625e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -0.00026190225617028773, -3.7312427593860775e-05, 0.0, -0.0002117156982421875, -2.09808349609375e-05, -2.288818359375e-05, -0.0001239776611328125, -1.9073486328125e-05, -0.00016987323760986328, 0.0, -7.083978176116943, 0.0, -0.0004253387451171875, -3.4332275390625e-05, -3.24249267578125e-05, -2.47955322265625e-05, -3.063678741455078e-05, 0.0, -1.1444091796875e-05, -4.76837158203125e-05, -5.91278076171875e-05, -0.0001373291015625, 0.0, -2.09808349609375e-05, 0.0, -1.5020368664409034e-05, 0.0, -0.000213623046875, -3.62396240234375e-05, -0.0002460479736328125, -0.0003954172134399414, 0.0, -0.0005207061767578125, -1.71661376953125e-05, -8.0108642578125e-05, -7.62939453125e-06, -3.814697265625e-05, -2.741813204920618e-06, -7.033323527139146e-06, -4.1961669921875e-05, -0.0003757476806640625, -1.33514404296875e-05, -8.0108642578125e-05, -0.00011932849156437442, -1.1920928244535389e-07, -0.002197024179622531, 0.0, -1.71661376953125e-05], "score": -7.091620441321872, "model_output": {"hole4": "player", "hole0": "HolySmite", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Smite", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Smite", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Smite", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0002288818359375, -7.82012939453125e-05, -4.768370445162873e-07, -2.503394853192731e-06, -2.861022494471399e-06, -9.059673175215721e-06, -0.000217437744140625, -1.537799835205078e-05, -4.76837158203125e-05, -0.000152587890625, -3.814697265625e-06, -5.340576171875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -0.0006465911865234375, -9.5367431640625e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -0.00026190225617028773, -3.7312427593860775e-05, 0.0, -0.0002117156982421875, -2.09808349609375e-05, -2.288818359375e-05, -0.0001239776611328125, -1.9073486328125e-05, -0.00016987323760986328, 0.0, -7.146608829498291, 0.0, -0.0053348541259765625, -1.52587890625e-05, -2.47955322265625e-05, -1.33514404296875e-05, -2.86102294921875e-05, 0.0, -1.1444091796875e-05, -0.00014495849609375, -4.76837158203125e-05, -0.00017547607421875, 0.0, -4.9591064453125e-05, 0.0, -1.5020368664409034e-05, 0.0, -0.000152587890625, -3.24249267578125e-05, -0.0002803802490234375, -0.0003743171691894531, 0.0, -0.00051116943359375, -1.71661376953125e-05, -5.340576171875e-05, -5.7220458984375e-06, -4.00543212890625e-05, -2.741813204920618e-06, -6.9141146923357155e-06, -3.814697265625e-05, -0.0003452301025390625, -1.33514404296875e-05, -8.20159912109375e-05, -0.00011360644566593692, -1.1920928244535389e-07, -0.0022243233397603035, 0.0, -1.71661376953125e-05], "score": -7.159174200176373, "model_output": {"hole4": "player", "hole0": "HolySmite", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Smite", "_type": "Str"}, {"_type": "Template60"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Smite", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Smite", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0002288818359375, -7.82012939453125e-05, -4.768370445162873e-07, -2.503394853192731e-06, -2.861022494471399e-06, -9.059673175215721e-06, -0.000217437744140625, -1.537799835205078e-05, -4.76837158203125e-05, -0.000152587890625, -3.814697265625e-06, -5.340576171875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -0.0006465911865234375, -9.5367431640625e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -0.00026190225617028773, -3.7312427593860775e-05, 0.0, -0.0002117156982421875, -2.09808349609375e-05, -2.288818359375e-05, -0.0001239776611328125, -1.9073486328125e-05, -0.00016987323760986328, 0.0, -7.172556400299072, 0.0, -0.0021800994873046875, -9.5367431640625e-06, -1.71661376953125e-05, -1.1444091796875e-05, -2.09808349609375e-05, 0.0, -2.86102294921875e-05, -0.000213623046875, -6.103515625e-05, -0.000240325927734375, 0.0, -5.7220458984375e-05, 0.0, -1.3470647900248878e-05, 0.0, -0.000141143798828125, -2.86102294921875e-05, -0.000324249267578125, -0.0003533363342285156, 0.0, -0.000507354736328125, -1.71661376953125e-05, -4.38690185546875e-05, -5.7220458984375e-06, -4.00543212890625e-05, -2.741813204920618e-06, -6.6756979322235566e-06, -3.814697265625e-05, -0.00032806396484375, -1.33514404296875e-05, -8.20159912109375e-05, -0.00011157988774357364, -1.1920928244535389e-07, -0.0022379131987690926, 0.0, -1.71661376953125e-05], "score": -7.182102676511811, "model_output": {"hole4": "player", "hole0": "HolySmite", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Smite", "_type": "Str"}, {"_type": "Template60"}, {"attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Smite", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Holy", " ", "Smite", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0002288818359375, -7.82012939453125e-05, -4.768370445162873e-07, -2.503394853192731e-06, -2.861022494471399e-06, -9.059673175215721e-06, -0.000217437744140625, -1.537799835205078e-05, -4.76837158203125e-05, -0.000152587890625, -3.814697265625e-06, -5.340576171875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -7.524984359741211, -0.000324249267578125, -5.340576171875e-05, -1.7881377516459906e-06, -0.00034129610867239535, -2.801412483677268e-05, 0.0, -7.82012939453125e-05, -0.060455322265625, -0.0012969970703125, -0.000102996826171875, -1.9073486328125e-06, -0.0008602142333984375, -4.1961669921875e-05, -0.00019490718841552734, 0.0, -2.288818359375e-05, -7.62939453125e-06, -5.91278076171875e-05, -0.0008258819580078125, 0.0, -2.09808349609375e-05, 0.0, -2.6464434995432384e-05, 0.0, -0.0010280609130859375, -8.0108642578125e-05, -0.000713348388671875, -0.0003917217254638672, 0.0, -0.0003223419189453125, -1.71661376953125e-05, -5.14984130859375e-05, -5.7220458984375e-06, -4.1961669921875e-05, -2.741813204920618e-06, -6.318072337307967e-06, -4.9591064453125e-05, -0.000331878662109375, -1.33514404296875e-05, -9.1552734375e-05, -0.00011706352233886719, -1.1920928244535389e-07, -0.002231595106422901, 0.0, -1.71661376953125e-05], "score": -7.596098062153821, "model_output": {"hole4": "player", "hole0": "HolySmite", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Smite", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Smite", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Smite", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0002288818359375, -7.82012939453125e-05, -4.768370445162873e-07, -2.503394853192731e-06, -2.861022494471399e-06, -9.059673175215721e-06, -0.000217437744140625, -1.537799835205078e-05, -4.76837158203125e-05, -0.000152587890625, -3.814697265625e-06, -5.340576171875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -0.0006465911865234375, -9.5367431640625e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -0.00026190225617028773, -3.7312427593860775e-05, 0.0, -0.0002117156982421875, -2.09808349609375e-05, -2.288818359375e-05, -0.0001239776611328125, -1.9073486328125e-05, -0.00016987323760986328, 0.0, -7.725091457366943, 0.0, -0.000431060791015625, -1.52587890625e-05, -1.52587890625e-05, -1.33514404296875e-05, -2.6702880859375e-05, 0.0, -1.1444091796875e-05, -0.00017547607421875, -5.7220458984375e-05, -0.0001583099365234375, 0.0, -3.0517578125e-05, 0.0, -1.4901160284352954e-05, 0.0, -0.0001697540283203125, -3.62396240234375e-05, -0.000232696533203125, -0.0003781318664550781, 0.0, -0.0005340576171875, -1.71661376953125e-05, -5.91278076171875e-05, -5.7220458984375e-06, -3.814697265625e-05, -2.741813204920618e-06, -6.9141146923357155e-06, -3.814697265625e-05, -0.0003490447998046875, -1.33514404296875e-05, -8.20159912109375e-05, -0.00011551379429874942, -1.1920928244535389e-07, -0.002226111479103565, 0.0, -1.71661376953125e-05], "score": -7.732756610989661, "model_output": {"hole4": "player", "hole0": "HolySmite", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Smite", "_type": "Str"}, {"_type": "Template60"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Smite", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Smite", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 102, 110], "score_history": [-0.0002288818359375, -7.82012939453125e-05, -4.768370445162873e-07, -2.503394853192731e-06, -2.861022494471399e-06, -9.059673175215721e-06, -0.000217437744140625, -1.537799835205078e-05, -4.76837158203125e-05, -0.000152587890625, -3.814697265625e-06, -5.340576171875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -0.0006465911865234375, -9.5367431640625e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -0.00026190225617028773, -3.7312427593860775e-05, 0.0, -0.0002117156982421875, -2.09808349609375e-05, -2.288818359375e-05, -0.0001239776611328125, -1.9073486328125e-05, -0.00016987323760986328, 0.0, -0.012359141372144222, 0.0, -0.0005283355712890625, -7.62939453125e-06, -1.9073486328125e-05, -1.33514404296875e-05, -2.491474151611328e-05, 0.0, -1.71661376953125e-05, -0.000186920166015625, -5.340576171875e-05, -0.000171661376953125, 0.0, -4.00543212890625e-05, 0.0, -1.5139577953959815e-05, 0.0, -0.0001544952392578125, -3.4332275390625e-05, -0.00026702880859375, -0.0003724098205566406, 0.0, -0.0005168914794921875, -1.71661376953125e-05, -5.340576171875e-05, -5.7220458984375e-06, -4.00543212890625e-05, -2.741813204920618e-06, -7.033323527139146e-06, -3.814697265625e-05, -8.314346313476562, -0.0038433074951171875], "score": -8.335529325565744, "model_output": {"hole4": "player", "hole0": "HolySmite", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"_type": "Template59"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Smite", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(2, self)\n"}, {"choice_history": [121, 200, "Holy", "Smite", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Smite", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 94, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0002288818359375, -7.82012939453125e-05, -4.768370445162873e-07, -2.503394853192731e-06, -2.861022494471399e-06, -9.059673175215721e-06, -0.000217437744140625, -1.537799835205078e-05, -4.76837158203125e-05, -0.000152587890625, -3.814697265625e-06, -5.340576171875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -0.0006465911865234375, -9.5367431640625e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -0.00026190225617028773, -3.7312427593860775e-05, 0.0, -0.0002117156982421875, -2.09808349609375e-05, -2.288818359375e-05, -0.0001239776611328125, -1.9073486328125e-05, -0.00016987323760986328, 0.0, -0.012359141372144222, 0.0, -8.67756462097168, -0.0001964569091796875, -4.76837158203125e-05, -3.24249267578125e-05, -2.8848648071289062e-05, 0.0, -1.33514404296875e-05, -0.0001926422119140625, -5.14984130859375e-05, -0.0001621246337890625, 0.0, -2.288818359375e-05, 0.0, -1.58548318722751e-05, 0.0, -0.0003719329833984375, -6.4849853515625e-05, -0.0002002716064453125, -0.0003514289855957031, 0.0, -0.0005779266357421875, -1.71661376953125e-05, -6.103515625e-05, -5.7220458984375e-06, -4.00543212890625e-05, -2.741813204920618e-06, -7.510157047363464e-06, -3.62396240234375e-05, -0.0003528594970703125, -1.1444091796875e-05, -8.392333984375e-05, -0.00011157988774357364, -1.1920928244535389e-07, -0.002248999662697315, 0.0, -1.52587890625e-05], "score": -8.69764208330286, "model_output": {"hole4": "player", "hole0": "HolySmite", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Smite", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Smite", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Smite", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0002288818359375, -7.82012939453125e-05, -4.768370445162873e-07, -2.503394853192731e-06, -2.861022494471399e-06, -9.059673175215721e-06, -0.000217437744140625, -1.537799835205078e-05, -4.76837158203125e-05, -0.000152587890625, -3.814697265625e-06, -5.340576171875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -0.0006465911865234375, -9.5367431640625e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -0.00026190225617028773, -3.7312427593860775e-05, 0.0, -0.0002117156982421875, -2.09808349609375e-05, -2.288818359375e-05, -0.0001239776611328125, -1.9073486328125e-05, -0.00016987323760986328, 0.0, -0.012359141372144222, 0.0, -8.717734336853027, -2.86102294921875e-05, -1.52587890625e-05, -4.57763671875e-05, -5.5670738220214844e-05, 0.0, -1.33514404296875e-05, -0.000141143798828125, -5.340576171875e-05, -0.0002384185791015625, 0.0, -2.86102294921875e-05, 0.0, -1.8239017663290724e-05, 0.0, -0.0002079010009765625, -4.76837158203125e-05, -0.0002918243408203125, -0.0004049539566040039, 0.0, -0.0005321502685546875, -1.71661376953125e-05, -5.14984130859375e-05, -5.7220458984375e-06, -4.1961669921875e-05, -2.741813204920618e-06, -7.271740287251305e-06, -3.814697265625e-05, -0.00035858154296875, -1.33514404296875e-05, -7.82012939453125e-05, -0.00010967253911076114, -1.1920928244535389e-07, -0.002237436594441533, 0.0, -1.52587890625e-05], "score": -8.737587089908054, "model_output": {"hole4": "player", "hole0": "HolySmite", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Smite", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template49"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Smite", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Smite", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "target", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0002288818359375, -7.82012939453125e-05, -4.768370445162873e-07, -2.503394853192731e-06, -2.861022494471399e-06, -9.059673175215721e-06, -0.000217437744140625, -1.537799835205078e-05, -4.76837158203125e-05, -0.000152587890625, -3.814697265625e-06, -5.340576171875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -0.0006465911865234375, -9.5367431640625e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -0.00026190225617028773, -3.7312427593860775e-05, 0.0, -0.0002117156982421875, -2.09808349609375e-05, -2.288818359375e-05, -0.0001239776611328125, -1.9073486328125e-05, -0.00016987323760986328, 0.0, -0.012359141372144222, 0.0, -0.0005283355712890625, -7.62939453125e-06, -1.9073486328125e-05, -1.33514404296875e-05, -2.491474151611328e-05, 0.0, -1.71661376953125e-05, -0.000186920166015625, -5.340576171875e-05, -0.000171661376953125, 0.0, -4.00543212890625e-05, 0.0, -1.5139577953959815e-05, 0.0, -0.0001544952392578125, -3.4332275390625e-05, -0.00026702880859375, -8.978987693786621, -4.768370445162873e-07, -0.0003643035888671875, -3.0517578125e-05, -3.24249267578125e-05, -1.9073486328125e-05, -6.4849853515625e-05, -4.291534423828125e-06, -1.07287787614041e-05, -4.9591064453125e-05, -0.0008182525634765625, -1.71661376953125e-05, -0.0001354217529296875, -0.0001322031021118164, -1.1920928244535389e-07, -0.0022892924025654793, 0.0, -1.71661376953125e-05], "score": -8.99925970565868, "model_output": {"hole4": "player", "hole0": "HolySmite", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Smite", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "target", "_type": "arg"}]}, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, target):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Smite", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", "Give", " ", "Smite", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score_history": [-0.0002288818359375, -7.82012939453125e-05, -4.768370445162873e-07, -2.503394853192731e-06, -2.861022494471399e-06, -9.059673175215721e-06, -0.000217437744140625, -1.537799835205078e-05, -4.76837158203125e-05, -0.000152587890625, -3.814697265625e-06, -5.340576171875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -0.0006465911865234375, -9.5367431640625e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -8.859209060668945, -0.285152405500412, -0.0008505359292030334, 0.0, -0.00028228759765625, -6.29425048828125e-05, -1.33514404296875e-05, -3.24249267578125e-05, -1.52587890625e-05, -0.00022518634796142578, 0.0, -0.011482595466077328, 0.0, -0.0004520416259765625, -7.62939453125e-06, -1.71661376953125e-05, -9.5367431640625e-06, -2.491474151611328e-05, 0.0, -1.71661376953125e-05, -0.000194549560546875, -5.91278076171875e-05, -0.0001735687255859375, 0.0, -3.0517578125e-05, 0.0, -1.5020368664409034e-05, 0.0, -0.00016021728515625, -3.4332275390625e-05, -0.0002651214599609375, -0.0003877878189086914, 0.0, -0.000518798828125, -1.71661376953125e-05, -5.7220458984375e-05, -5.7220458984375e-06, -4.00543212890625e-05, -2.741813204920618e-06, -7.271740287251305e-06, -4.00543212890625e-05, -0.000354766845703125, -1.33514404296875e-05, -8.0108642578125e-05, -0.00011360644566593692, -1.1920928244535389e-07, -0.0022205086424946785, 0.0, -1.52587890625e-05], "score": -9.1641872559752, "model_output": {"hole4": "player", "hole0": "HolySmite", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "HolyGive Smite", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('HolyGive Smite', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n"}, {"choice_history": [121, 200, "Holy", "Smite", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Holy", " ", "Smite", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 50, "hero", "<EOS>", "<UNK>", "<EOS>", "append", "<EOS>", 320, 110], "score_history": [-0.0002288818359375, -7.82012939453125e-05, -4.768370445162873e-07, -2.503394853192731e-06, -2.861022494471399e-06, -9.059673175215721e-06, -0.000217437744140625, -1.537799835205078e-05, -4.76837158203125e-05, -0.000152587890625, -3.814697265625e-06, -5.340576171875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -0.0006465911865234375, -9.5367431640625e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -0.00026190225617028773, -3.7312427593860775e-05, 0.0, -0.0002117156982421875, -2.09808349609375e-05, -2.288818359375e-05, -0.0001239776611328125, -1.9073486328125e-05, -0.00016987323760986328, 0.0, -0.012359141372144222, 0.0, -0.0005283355712890625, -7.62939453125e-06, -1.9073486328125e-05, -1.33514404296875e-05, -2.491474151611328e-05, 0.0, -1.71661376953125e-05, -0.000186920166015625, -5.340576171875e-05, -0.000171661376953125, 0.0, -4.00543212890625e-05, 0.0, -1.5139577953959815e-05, 0.0, -0.0001544952392578125, -3.4332275390625e-05, -0.00026702880859375, -0.0003724098205566406, 0.0, -7.790209770202637, -0.00017547607421875, -8.0108642578125e-05, -1.9073486328125e-06, -0.00014495849609375, -4.1723224057932384e-06, -1.311301275563892e-06, -9.918212890625e-05, -0.0008678436279296875, -5.7220458984375e-06, -0.0005283355712890625, -8.678436279296875e-05, -1.1920928244535389e-07, -0.0024849120527505875, 0.0, -1.33514404296875e-05, -0.0019550323486328125, -5.91278076171875e-05, -0.004627227783203125, -5.7220458984375e-06, -0.06694412231445312, -0.00191497802734375, -0.14710330963134766, -0.6772528886795044, -3.814697265625e-06, -0.767054557800293, 0.0, -0.6643046140670776, 0.0, -9.1552734375e-05, -1.333054542541504], "score": -11.475733988044219, "model_output": {"hole4": "player", "hole0": "HolySmite", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "append", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "<UNK>", "value": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call", "args": [{"s": "Holy Smite", "_type": "Str"}, {"_type": "Template60"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.hero.<UNK>.append(self)\n"}], "index": 51}
{"beams": [{"choice_history": [120, 185, 333, 129, 165, "Houndmaster", "<EOS>", 320, 100, 333, 136, 197, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 81, 232, "Taunt", "<EOS>", 105, "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "score_history": [-0.0026493072509765625, -3.814697265625e-05, -0.0001277923583984375, -0.000385284423828125, -1.9073486328125e-05, -0.007153256796300411, -2.2768756025470793e-05, -2.09808349609375e-05, -0.000469207763671875, -7.62939453125e-06, -0.0002117156982421875, -3.62396240234375e-05, -4.2557105189189315e-05, -2.0384788513183594e-05, -0.00010406970977783203, -3.814697265625e-06, -0.005033612251281738, 0.0, -0.00909113883972168, -1.9073486328125e-06, -0.01735091209411621, 0.0, -0.0051212310791015625, -1.52587890625e-05, -0.001129150390625, 0.0, -0.0040274858474731445, 0.0, -0.0011827945709228516, 0.0, -0.011940956115722656, -0.021108627319335938, -0.005122020840644836, -0.0013257265090942383, -6.866455078125e-05, -0.007143974304199219, -0.0006008148193359375, -0.0024023056030273438, -0.0037746429443359375, -0.0001983642578125, -0.0058890581130981445, -1.9073486328125e-06, -0.00109612918458879, -0.5255166292190552, 0.0, -0.0005086638266220689, -3.814697265625e-06, -0.0001926422119140625, -0.0001373291015625, -0.0001377999724354595, -6.115436553955078e-05, -0.0021331720054149628, -0.013145999051630497, -3.814697265625e-06, -0.0012541516916826367, -0.000385284423828125, -0.5972967147827148, -8.7738037109375e-05, -0.0001128899457398802, -1.704684109427035e-05, -0.0003299713134765625, -8.58306884765625e-05, -0.00010693073272705078, -6.115436553955078e-05, -3.24249267578125e-05, -0.0002803802490234375, -0.0002841949462890625, -1.9073486328125e-06, -3.814697265625e-06, -0.0002803802490234375, -0.0005215267301537097, -6.318092346191406e-06, -1.1444091796875e-05, -0.001300811767578125, -7.62939453125e-06, -1.33514404296875e-05, -3.24249267578125e-05, -0.0001544952392578125, 0.0, -0.011858582496643066, -2.86102294921875e-05, -0.0003871917724609375, -0.0002899169921875, -2.288818359375e-05, -0.0015184879302978516, -1.9073486328125e-06, -1.52587890625e-05, -2.86102294921875e-05, -0.005802033469080925, -6.902217864990234e-05, -1.9073486328125e-06, -0.0017871856689453125, -6.29425048828125e-05, -3.0636387236882e-05, -1.1920922133867862e-06, -0.0006167888641357422, -9.536738616588991e-07, -0.000225067138671875], "score": -1.2821979321513481, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole0": "Give", "hole1": [{"_type": "List", "elts": [{"hole1": "ChangeHealth", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"_type": "Template30", "hole0": "Taunt"}, {"_type": "Template62_expr_seq"}]}], "hole2": "MinionSelector", "_type": "Template22", "hole3": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}]}, "hole0": "Houndmaster", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 4, "hole2": "HUNTER", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 3, "_type": "Template8", "hole0": 4}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "Houndmaster"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(Taunt())]), MinionSelector(IsType(MINION_TYPE.BEAST),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Houndmaster", "<EOS>", 320, 100, 333, 136, 197, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 81, 232, "Taunt", "<EOS>", 105, "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "score_history": [-0.0026493072509765625, -3.814697265625e-05, -0.0001277923583984375, -0.000385284423828125, -1.9073486328125e-05, -0.007153256796300411, -2.2768756025470793e-05, -2.09808349609375e-05, -0.000469207763671875, -7.62939453125e-06, -0.0002117156982421875, -3.62396240234375e-05, -4.2557105189189315e-05, -2.0384788513183594e-05, -0.00010406970977783203, -3.814697265625e-06, -0.005033612251281738, 0.0, -0.00909113883972168, -1.9073486328125e-06, -0.01735091209411621, 0.0, -0.0051212310791015625, -1.52587890625e-05, -0.001129150390625, 0.0, -0.0040274858474731445, 0.0, -0.0011827945709228516, 0.0, -0.011940956115722656, -0.021108627319335938, -0.005122020840644836, -0.0013257265090942383, -6.866455078125e-05, -0.007143974304199219, -0.0006008148193359375, -0.0024023056030273438, -0.0037746429443359375, -0.0001983642578125, -0.0058890581130981445, -1.9073486328125e-06, -0.00109612918458879, -0.9003077745437622, 0.0, -0.0005043745040893555, -3.814697265625e-06, -0.0002307891845703125, -0.000125885009765625, -8.20142449811101e-05, -1.71661376953125e-05, -0.0014451121678575873, -0.026117082685232162, -1.9073486328125e-06, -0.001175992307253182, -0.0002384185791015625, -0.36832714080810547, -9.34600830078125e-05, -0.00013649353059008718, -1.8358125089434907e-05, -0.000339508056640625, -7.43865966796875e-05, -0.00010883808135986328, -6.306171417236328e-05, -3.24249267578125e-05, -0.00028228759765625, -0.0002841949462890625, -1.9073486328125e-06, -3.814697265625e-06, -0.00028228759765625, -0.0004960182122886181, -6.318092346191406e-06, -9.5367431640625e-06, -0.001262664794921875, -7.62939453125e-06, -1.33514404296875e-05, -3.24249267578125e-05, -0.0001544952392578125, 0.0, -0.011761307716369629, -2.86102294921875e-05, -0.0003871917724609375, -0.0002880096435546875, -2.288818359375e-05, -0.001524209976196289, -1.9073486328125e-06, -1.52587890625e-05, -2.86102294921875e-05, -0.005794880911707878, -6.902217864990234e-05, -1.9073486328125e-06, -0.0017871856689453125, -6.29425048828125e-05, -3.0040360798011534e-05, -1.1920922133867862e-06, -0.0006109476089477539, -9.536738616588991e-07, -0.0002269744873046875], "score": -1.4398638878708425, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole0": "Give", "hole1": [{"_type": "List", "elts": [{"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"_type": "Template30", "hole0": "Taunt"}, {"_type": "Template62_expr_seq"}]}], "hole2": "MinionSelector", "_type": "Template22", "hole3": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}]}, "hole0": "Houndmaster", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 4, "hole2": "HUNTER", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 3, "_type": "Template8", "hole0": 4}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "Houndmaster"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeAttack(2)),\n            Buff(Taunt())]), MinionSelector(IsType(MINION_TYPE.BEAST),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Houndmaster", "<EOS>", 320, 100, 333, 136, 197, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 81, 232, "Taunt", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "score_history": [-0.0026493072509765625, -3.814697265625e-05, -0.0001277923583984375, -0.000385284423828125, -1.9073486328125e-05, -0.007153256796300411, -2.2768756025470793e-05, -2.09808349609375e-05, -0.000469207763671875, -7.62939453125e-06, -0.0002117156982421875, -3.62396240234375e-05, -4.2557105189189315e-05, -2.0384788513183594e-05, -0.00010406970977783203, -3.814697265625e-06, -0.005033612251281738, 0.0, -0.00909113883972168, -1.9073486328125e-06, -0.01735091209411621, 0.0, -0.0051212310791015625, -1.52587890625e-05, -0.001129150390625, 0.0, -0.0040274858474731445, 0.0, -0.0011827945709228516, 0.0, -0.011940956115722656, -0.021108627319335938, -0.005122020840644836, -0.0013257265090942383, -6.866455078125e-05, -0.007143974304199219, -0.0006008148193359375, -0.0024023056030273438, -0.0037746429443359375, -0.0001983642578125, -0.0058890581130981445, -1.9073486328125e-06, -0.00109612918458879, -0.5255166292190552, 0.0, -0.0005086638266220689, -3.814697265625e-06, -0.0001926422119140625, -0.0001373291015625, -0.0001377999724354595, -6.115436553955078e-05, -0.0021331720054149628, -0.013145999051630497, -3.814697265625e-06, -0.0012541516916826367, -0.000385284423828125, -0.8652420043945312, -0.0001697540283203125, -0.00015115347923710942, -7.43865966796875e-05, -0.0007967821438796818, -0.038015007972717285, -3.814697265625e-06, -0.0013998730573803186, -0.000171661376953125, -0.32061004638671875, -9.918212890625e-05, -0.00012540686293505132, -2.396090167167131e-05, -0.005622267723083496, -2.8848648071289062e-05, -9.59634780883789e-05, -4.9591064453125e-05, -0.0009746551513671875, -0.0003376007080078125, -5.7220458984375e-06, -7.62939453125e-06, -0.0004687309265136719, -0.0005735065788030624, -4.410743713378906e-06, -7.62939453125e-06, -0.0011386871337890625, -1.1444091796875e-05, -5.340576171875e-05, -4.76837158203125e-05, -0.000213623046875, 0.0, -0.013710856437683105, -3.4332275390625e-05, -0.0004520416259765625, -0.00030517578125, -2.09808349609375e-05, -0.0013926029205322266, -1.9073486328125e-06, -1.52587890625e-05, -3.62396240234375e-05, -0.007092592306435108, -7.474422454833984e-05, -1.9073486328125e-06, -0.001926422119140625, -7.05718994140625e-05, -3.33781645167619e-05, -3.576277322281385e-06, -0.000695347785949707, -9.536738616588991e-07, -0.0002307891845703125], "score": -1.9210434803026146, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole0": "Give", "hole1": [{"_type": "List", "elts": [{"hole1": "ChangeHealth", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"_type": "Template30", "hole0": "Taunt"}]}], "hole2": "MinionSelector", "_type": "Template22", "hole3": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}]}, "hole0": "Houndmaster", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 4, "hole2": "HUNTER", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 3, "_type": "Template8", "hole0": 4}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "Houndmaster"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(ChangeAttack(2)), Buff(Taunt())]), MinionSelector(IsType(\n            MINION_TYPE.BEAST), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Houndmaster", "<EOS>", 320, 100, 333, 136, 197, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 81, 232, "Taunt", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "score_history": [-0.0026493072509765625, -3.814697265625e-05, -0.0001277923583984375, -0.000385284423828125, -1.9073486328125e-05, -0.007153256796300411, -2.2768756025470793e-05, -2.09808349609375e-05, -0.000469207763671875, -7.62939453125e-06, -0.0002117156982421875, -3.62396240234375e-05, -4.2557105189189315e-05, -2.0384788513183594e-05, -0.00010406970977783203, -3.814697265625e-06, -0.005033612251281738, 0.0, -0.00909113883972168, -1.9073486328125e-06, -0.01735091209411621, 0.0, -0.0051212310791015625, -1.52587890625e-05, -0.001129150390625, 0.0, -0.0040274858474731445, 0.0, -0.0011827945709228516, 0.0, -0.011940956115722656, -0.021108627319335938, -0.005122020840644836, -0.0013257265090942383, -6.866455078125e-05, -0.007143974304199219, -0.0006008148193359375, -0.0024023056030273438, -0.0037746429443359375, -0.0001983642578125, -0.0058890581130981445, -1.9073486328125e-06, -0.00109612918458879, -0.9003077745437622, 0.0, -0.0005043745040893555, -3.814697265625e-06, -0.0002307891845703125, -0.000125885009765625, -8.20142449811101e-05, -1.71661376953125e-05, -0.0014451121678575873, -0.026117082685232162, -1.9073486328125e-06, -0.001175992307253182, -0.0002384185791015625, -1.3334684371948242, -0.0001697540283203125, -0.00013172390754334629, -6.29425048828125e-05, -0.0008428010623902082, -0.043134331703186035, -3.814697265625e-06, -0.0014597164699807763, -0.0001621246337890625, -0.2771463394165039, -0.0001087188720703125, -0.000145553465699777, -2.6941073883790523e-05, -0.005540251731872559, -3.075599670410156e-05, -9.78708267211914e-05, -4.9591064453125e-05, -0.00101470947265625, -0.00034332275390625, -5.7220458984375e-06, -7.62939453125e-06, -0.0004687309265136719, -0.0005578912096098065, -4.410743713378906e-06, -7.62939453125e-06, -0.0011425018310546875, -1.1444091796875e-05, -4.9591064453125e-05, -4.57763671875e-05, -0.000213623046875, 0.0, -0.013517260551452637, -3.24249267578125e-05, -0.00045013427734375, -0.00030517578125, -2.09808349609375e-05, -0.001398324966430664, -1.9073486328125e-06, -1.52587890625e-05, -3.62396240234375e-05, -0.006985899992287159, -7.474422454833984e-05, -1.9073486328125e-06, -0.001918792724609375, -7.2479248046875e-05, -3.361657581990585e-05, -3.4570680327306036e-06, -0.0006934404373168945, -9.536738616588991e-07, -0.0002307891845703125], "score": -2.737437682762902, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole0": "Give", "hole1": [{"_type": "List", "elts": [{"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"_type": "Template30", "hole0": "Taunt"}]}], "hole2": "MinionSelector", "_type": "Template22", "hole3": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}]}, "hole0": "Houndmaster", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 4, "hole2": "HUNTER", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 3, "_type": "Template8", "hole0": 4}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "Houndmaster"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeAttack(2)),\n            Buff(ChangeAttack(2)), Buff(Taunt())]), MinionSelector(IsType(\n            MINION_TYPE.BEAST), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Houndmaster", "<EOS>", 320, 100, 333, 136, 197, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "score_history": [-0.0026493072509765625, -3.814697265625e-05, -0.0001277923583984375, -0.000385284423828125, -1.9073486328125e-05, -0.007153256796300411, -2.2768756025470793e-05, -2.09808349609375e-05, -0.000469207763671875, -7.62939453125e-06, -0.0002117156982421875, -3.62396240234375e-05, -4.2557105189189315e-05, -2.0384788513183594e-05, -0.00010406970977783203, -3.814697265625e-06, -0.005033612251281738, 0.0, -0.00909113883972168, -1.9073486328125e-06, -0.01735091209411621, 0.0, -0.0051212310791015625, -1.52587890625e-05, -0.001129150390625, 0.0, -0.0040274858474731445, 0.0, -0.0011827945709228516, 0.0, -0.011940956115722656, -0.021108627319335938, -0.005122020840644836, -0.0013257265090942383, -6.866455078125e-05, -0.007143974304199219, -0.0006008148193359375, -0.0024023056030273438, -0.0037746429443359375, -0.0001983642578125, -0.0058890581130981445, -1.9073486328125e-06, -0.00109612918458879, -0.5255166292190552, 0.0, -0.0005086638266220689, -3.814697265625e-06, -0.0001926422119140625, -0.0001373291015625, -0.0001377999724354595, -6.115436553955078e-05, -0.0021331720054149628, -0.013145999051630497, -3.814697265625e-06, -0.0012541516916826367, -0.000385284423828125, -0.8652420043945312, -0.0001697540283203125, -0.00015115347923710942, -7.43865966796875e-05, -0.0007967821438796818, -0.038015007972717285, -3.814697265625e-06, -0.0013998730573803186, -0.000171661376953125, -1.4391260147094727, -0.0001659393310546875, -0.00013530091382563114, -8.7738037109375e-05, -0.0008026282885111868, -0.044203758239746094, -3.814697265625e-06, -0.0015646204119548202, -0.000194549560546875, -0.011171466670930386, -1.5497207641601562e-05, -0.0005865097045898438, -6.29425048828125e-05, -0.00170135498046875, -0.0010776519775390625, -3.814697265625e-06, -1.9073486328125e-05, -0.0002739429473876953, -0.0002757258771453053, -2.682209014892578e-05, -7.62939453125e-06, -0.021055221557617188, -7.62939453125e-06, -4.76837158203125e-05, -5.91278076171875e-05, -0.000225067138671875, 0.0, -0.022120237350463867, -3.24249267578125e-05, -0.000518798828125, -0.0003452301025390625, -2.09808349609375e-05, -0.0014955997467041016, -1.9073486328125e-06, -1.52587890625e-05, -4.1961669921875e-05, -0.007243868429213762, -7.104873657226562e-05, -1.9073486328125e-06, -0.00203704833984375, -6.67572021484375e-05, -3.3139749575639144e-05, -8.225420970120467e-06, -0.0008914470672607422, -9.536738616588991e-07, -0.000225067138671875], "score": -3.12251719383994, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole0": "Give", "hole1": [{"_type": "List", "elts": [{"hole1": "ChangeHealth", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}]}], "hole2": "MinionSelector", "_type": "Template22", "hole3": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}]}, "hole0": "Houndmaster", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 4, "hole2": "HUNTER", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 3, "_type": "Template8", "hole0": 4}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "Houndmaster"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(ChangeAttack(2)), Buff(ChangeAttack(2))]), MinionSelector(\n            IsType(MINION_TYPE.BEAST), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Houndmaster", "<EOS>", 320, 100, 333, 136, 197, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "score_history": [-0.0026493072509765625, -3.814697265625e-05, -0.0001277923583984375, -0.000385284423828125, -1.9073486328125e-05, -0.007153256796300411, -2.2768756025470793e-05, -2.09808349609375e-05, -0.000469207763671875, -7.62939453125e-06, -0.0002117156982421875, -3.62396240234375e-05, -4.2557105189189315e-05, -2.0384788513183594e-05, -0.00010406970977783203, -3.814697265625e-06, -0.005033612251281738, 0.0, -0.00909113883972168, -1.9073486328125e-06, -0.01735091209411621, 0.0, -0.0051212310791015625, -1.52587890625e-05, -0.001129150390625, 0.0, -0.0040274858474731445, 0.0, -0.0011827945709228516, 0.0, -0.011940956115722656, -0.021108627319335938, -0.005122020840644836, -0.0013257265090942383, -6.866455078125e-05, -0.007143974304199219, -0.0006008148193359375, -0.0024023056030273438, -0.0037746429443359375, -0.0001983642578125, -0.0058890581130981445, -1.9073486328125e-06, -0.00109612918458879, -0.9003077745437622, 0.0, -0.0005043745040893555, -3.814697265625e-06, -0.0002307891845703125, -0.000125885009765625, -8.20142449811101e-05, -1.71661376953125e-05, -0.0014451121678575873, -0.026117082685232162, -1.9073486328125e-06, -0.001175992307253182, -0.0002384185791015625, -1.3334684371948242, -0.0001697540283203125, -0.00013172390754334629, -6.29425048828125e-05, -0.0008428010623902082, -0.043134331703186035, -3.814697265625e-06, -0.0014597164699807763, -0.0001621246337890625, -1.6035375595092773, -0.00016021728515625, -0.00013792347454000264, -8.58306884765625e-05, -0.0009082483011297882, -0.0443272590637207, -3.814697265625e-06, -0.0015561562031507492, -0.0001888275146484375, -0.01094640139490366, -1.3589859008789062e-05, -0.0005216598510742188, -6.103515625e-05, -0.0017032623291015625, -0.001117706298828125, -3.814697265625e-06, -1.9073486328125e-05, -0.0002797842025756836, -0.000281924701994285, -2.682209014892578e-05, -7.62939453125e-06, -0.022310256958007812, -7.62939453125e-06, -4.57763671875e-05, -5.7220458984375e-05, -0.0002231597900390625, 0.0, -0.021967649459838867, -3.24249267578125e-05, -0.0005130767822265625, -0.00034332275390625, -2.09808349609375e-05, -0.001497507095336914, -1.9073486328125e-06, -1.52587890625e-05, -4.1961669921875e-05, -0.007226106245070696, -7.104873657226562e-05, -1.9073486328125e-06, -0.0020236968994140625, -6.67572021484375e-05, -3.325895522721112e-05, -7.987004210008308e-06, -0.0008838176727294922, -9.536738616588991e-07, -0.0002269744873046875], "score": -4.148134071448567, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole0": "Give", "hole1": [{"_type": "List", "elts": [{"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}]}], "hole2": "MinionSelector", "_type": "Template22", "hole3": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}]}, "hole0": "Houndmaster", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 4, "hole2": "HUNTER", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 3, "_type": "Template8", "hole0": 4}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "Houndmaster"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeAttack(2)),\n            Buff(ChangeAttack(2)), Buff(ChangeAttack(2))]), MinionSelector(\n            IsType(MINION_TYPE.BEAST), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Houndmaster", "<EOS>", 320, 100, 333, 136, 197, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 105, 105, "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "score_history": [-0.0026493072509765625, -3.814697265625e-05, -0.0001277923583984375, -0.000385284423828125, -1.9073486328125e-05, -0.007153256796300411, -2.2768756025470793e-05, -2.09808349609375e-05, -0.000469207763671875, -7.62939453125e-06, -0.0002117156982421875, -3.62396240234375e-05, -4.2557105189189315e-05, -2.0384788513183594e-05, -0.00010406970977783203, -3.814697265625e-06, -0.005033612251281738, 0.0, -0.00909113883972168, -1.9073486328125e-06, -0.01735091209411621, 0.0, -0.0051212310791015625, -1.52587890625e-05, -0.001129150390625, 0.0, -0.0040274858474731445, 0.0, -0.0011827945709228516, 0.0, -0.011940956115722656, -0.021108627319335938, -0.005122020840644836, -0.0013257265090942383, -6.866455078125e-05, -0.007143974304199219, -0.0006008148193359375, -0.0024023056030273438, -0.0037746429443359375, -0.0001983642578125, -0.0058890581130981445, -1.9073486328125e-06, -0.00109612918458879, -0.9003077745437622, 0.0, -0.0005043745040893555, -3.814697265625e-06, -0.0002307891845703125, -0.000125885009765625, -8.20142449811101e-05, -1.71661376953125e-05, -0.0014451121678575873, -0.026117082685232162, -1.9073486328125e-06, -0.001175992307253182, -0.0002384185791015625, -3.436367988586426, -0.45217227935791016, -0.0012797117233276367, -9.357929229736328e-05, -7.081031799316406e-05, -4.00543212890625e-05, -0.0003147125244140625, -0.00038909912109375, -3.814697265625e-06, -7.62939453125e-06, -0.0002124309539794922, -0.0005038544186390936, -1.0013580322265625e-05, -1.33514404296875e-05, -0.00560760498046875, -7.62939453125e-06, -1.71661376953125e-05, -2.6702880859375e-05, -0.00016021728515625, 0.0, -0.017168521881103516, -3.24249267578125e-05, -0.000370025634765625, -0.00031280517578125, -2.288818359375e-05, -0.001478433609008789, -1.9073486328125e-06, -1.33514404296875e-05, -2.86102294921875e-05, -0.005962846800684929, -6.711483001708984e-05, -1.9073486328125e-06, -0.001857757568359375, -6.103515625e-05, -2.8133064915891737e-05, -1.0728830375228426e-06, -0.0005896091461181641, -9.536738616588991e-07, -0.0002269744873046875], "score": -4.97071426798982, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole0": "Give", "hole1": [{"_type": "List", "elts": [{"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"_type": "Template62_expr_seq"}, {"_type": "Template62_expr_seq"}]}], "hole2": "MinionSelector", "_type": "Template22", "hole3": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}]}, "hole0": "Houndmaster", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 4, "hole2": "HUNTER", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 3, "_type": "Template8", "hole0": 4}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "Houndmaster"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.BEAST), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Houndmaster", "<EOS>", 320, 100, 333, 136, 197, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 105, "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "score_history": [-0.0026493072509765625, -3.814697265625e-05, -0.0001277923583984375, -0.000385284423828125, -1.9073486328125e-05, -0.007153256796300411, -2.2768756025470793e-05, -2.09808349609375e-05, -0.000469207763671875, -7.62939453125e-06, -0.0002117156982421875, -3.62396240234375e-05, -4.2557105189189315e-05, -2.0384788513183594e-05, -0.00010406970977783203, -3.814697265625e-06, -0.005033612251281738, 0.0, -0.00909113883972168, -1.9073486328125e-06, -0.01735091209411621, 0.0, -0.0051212310791015625, -1.52587890625e-05, -0.001129150390625, 0.0, -0.0040274858474731445, 0.0, -0.0011827945709228516, 0.0, -0.011940956115722656, -0.021108627319335938, -0.005122020840644836, -0.0013257265090942383, -6.866455078125e-05, -0.007143974304199219, -0.0006008148193359375, -0.0024023056030273438, -0.0037746429443359375, -0.0001983642578125, -0.0058890581130981445, -1.9073486328125e-06, -0.00109612918458879, -0.5255166292190552, 0.0, -0.0005086638266220689, -3.814697265625e-06, -0.0001926422119140625, -0.0001373291015625, -0.0001377999724354595, -6.115436553955078e-05, -0.0021331720054149628, -0.013145999051630497, -3.814697265625e-06, -0.0012541516916826367, -0.000385284423828125, -0.8652420043945312, -0.0001697540283203125, -0.00015115347923710942, -7.43865966796875e-05, -0.0007967821438796818, -0.038015007972717285, -3.814697265625e-06, -0.0013998730573803186, -0.000171661376953125, -3.6433916091918945, -0.0017546415328979492, -7.069110870361328e-05, -0.00015747547149658203, -4.1961669921875e-05, -0.0001964569091796875, -0.0004425048828125, -3.814697265625e-06, -9.5367431640625e-06, -0.00019550323486328125, -0.0004241240967530757, -1.5497207641601562e-05, -1.1444091796875e-05, -0.015359878540039062, -5.7220458984375e-06, -1.52587890625e-05, -3.24249267578125e-05, -0.0001659393310546875, 0.0, -0.01675570011138916, -4.00543212890625e-05, -0.0003871917724609375, -0.0003376007080078125, -2.288818359375e-05, -0.0015451908111572266, -3.814697265625e-06, -1.52587890625e-05, -3.62396240234375e-05, -0.007044311612844467, -6.914138793945312e-05, -1.9073486328125e-06, -0.0019931793212890625, -6.866455078125e-05, -3.385497984709218e-05, -3.4570680327306036e-06, -0.0006781816482543945, -9.536738616588991e-07, -0.000225067138671875], "score": -5.256000948013025, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole0": "Give", "hole1": [{"_type": "List", "elts": [{"hole1": "ChangeHealth", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"_type": "Template62_expr_seq"}]}], "hole2": "MinionSelector", "_type": "Template22", "hole3": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}]}, "hole0": "Houndmaster", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 4, "hole2": "HUNTER", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 3, "_type": "Template8", "hole0": 4}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "Houndmaster"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(ChangeAttack(2))]), MinionSelector(IsType(MINION_TYPE.\n            BEAST), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Houndmaster", "<EOS>", 320, 100, 333, 136, 197, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 81, 232, "Taunt", "<EOS>", 105, "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "score_history": [-0.0026493072509765625, -3.814697265625e-05, -0.0001277923583984375, -0.000385284423828125, -1.9073486328125e-05, -0.007153256796300411, -2.2768756025470793e-05, -2.09808349609375e-05, -0.000469207763671875, -7.62939453125e-06, -0.0002117156982421875, -3.62396240234375e-05, -4.2557105189189315e-05, -2.0384788513183594e-05, -0.00010406970977783203, -3.814697265625e-06, -0.005033612251281738, 0.0, -0.00909113883972168, -1.9073486328125e-06, -0.01735091209411621, 0.0, -0.0051212310791015625, -1.52587890625e-05, -0.001129150390625, 0.0, -0.0040274858474731445, 0.0, -0.0011827945709228516, 0.0, -0.011940956115722656, -0.021108627319335938, -0.005122020840644836, -0.0013257265090942383, -6.866455078125e-05, -0.007143974304199219, -0.0006008148193359375, -0.0024023056030273438, -0.0037746429443359375, -0.0001983642578125, -0.0058890581130981445, -1.9073486328125e-06, -0.00109612918458879, -0.9003077745437622, 0.0, -0.0005043745040893555, -3.814697265625e-06, -0.0002307891845703125, -0.000125885009765625, -8.20142449811101e-05, -1.71661376953125e-05, -0.0014451121678575873, -3.8638598918914795, -9.5367431640625e-06, -0.0043961661867797375, -0.0003833770751953125, -0.40726757049560547, -8.7738037109375e-05, -0.0001543748949188739, -2.3603242880199105e-05, -0.0004177093505859375, -8.0108642578125e-05, -0.00011265277862548828, -5.924701690673828e-05, -3.0517578125e-05, -0.000301361083984375, -0.0003070831298828125, -1.9073486328125e-06, -3.814697265625e-06, -0.0002671480178833008, -0.0005009038140997291, -6.318092346191406e-06, -1.1444091796875e-05, -0.0014705657958984375, -5.7220458984375e-06, -1.33514404296875e-05, -3.4332275390625e-05, -0.0001583099365234375, 0.0, -0.012235283851623535, -2.86102294921875e-05, -0.00038909912109375, -0.0002918243408203125, -2.288818359375e-05, -0.001528024673461914, -1.9073486328125e-06, -1.52587890625e-05, -2.86102294921875e-05, -0.0058171735145151615, -6.902217864990234e-05, -1.9073486328125e-06, -0.0017910003662109375, -6.29425048828125e-05, -3.0636387236882e-05, -1.1920922133867862e-06, -0.0006148815155029297, -9.536738616588991e-07, -0.000225067138671875], "score": -5.320776882463861, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole0": "Give", "hole1": [{"_type": "List", "elts": [{"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeHealth", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"_type": "Template30", "hole0": "Taunt"}, {"_type": "Template62_expr_seq"}]}], "hole2": "MinionSelector", "_type": "Template22", "hole3": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}]}, "hole0": "Houndmaster", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 4, "hole2": "HUNTER", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 3, "_type": "Template8", "hole0": 4}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "Houndmaster"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2)),\n            Buff(Taunt())]), MinionSelector(IsType(MINION_TYPE.BEAST),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Houndmaster", "<EOS>", 320, 100, 333, 136, 197, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 105, 105, "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "score_history": [-0.0026493072509765625, -3.814697265625e-05, -0.0001277923583984375, -0.000385284423828125, -1.9073486328125e-05, -0.007153256796300411, -2.2768756025470793e-05, -2.09808349609375e-05, -0.000469207763671875, -7.62939453125e-06, -0.0002117156982421875, -3.62396240234375e-05, -4.2557105189189315e-05, -2.0384788513183594e-05, -0.00010406970977783203, -3.814697265625e-06, -0.005033612251281738, 0.0, -0.00909113883972168, -1.9073486328125e-06, -0.01735091209411621, 0.0, -0.0051212310791015625, -1.52587890625e-05, -0.001129150390625, 0.0, -0.0040274858474731445, 0.0, -0.0011827945709228516, 0.0, -0.011940956115722656, -0.021108627319335938, -0.005122020840644836, -0.0013257265090942383, -6.866455078125e-05, -0.007143974304199219, -0.0006008148193359375, -0.0024023056030273438, -0.0037746429443359375, -0.0001983642578125, -0.0058890581130981445, -1.9073486328125e-06, -0.00109612918458879, -0.5255166292190552, 0.0, -0.0005086638266220689, -3.814697265625e-06, -0.0001926422119140625, -0.0001373291015625, -0.0001377999724354595, -6.115436553955078e-05, -0.0021331720054149628, -0.013145999051630497, -3.814697265625e-06, -0.0012541516916826367, -0.000385284423828125, -4.108266830444336, -0.6630611419677734, -0.0017545223236083984, -0.00010120868682861328, -7.843971252441406e-05, -4.38690185546875e-05, -0.000347137451171875, -0.0003681182861328125, -3.814697265625e-06, -7.62939453125e-06, -0.00021064281463623047, -0.0005772637668997049, -1.0132789611816406e-05, -1.33514404296875e-05, -0.0051288604736328125, -7.62939453125e-06, -1.52587890625e-05, -2.6702880859375e-05, -0.00016021728515625, 0.0, -0.017918109893798828, -3.4332275390625e-05, -0.0003719329833984375, -0.0003147125244140625, -2.288818359375e-05, -0.0014727115631103516, -1.9073486328125e-06, -1.33514404296875e-05, -2.86102294921875e-05, -0.005964873358607292, -6.711483001708984e-05, -1.9073486328125e-06, -0.0018596649169921875, -6.103515625e-05, -2.860989116015844e-05, -1.0728830375228426e-06, -0.0005954504013061523, -9.536738616588991e-07, -0.0002269744873046875], "score": -5.467588353053429, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole0": "Give", "hole1": [{"_type": "List", "elts": [{"hole1": "ChangeHealth", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"_type": "Template62_expr_seq"}, {"_type": "Template62_expr_seq"}]}], "hole2": "MinionSelector", "_type": "Template22", "hole3": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}]}, "hole0": "Houndmaster", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 4, "hole2": "HUNTER", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 3, "_type": "Template8", "hole0": 4}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "Houndmaster"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.BEAST), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Houndmaster", "<EOS>", 320, 100, 333, 136, 197, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 81, 232, "Taunt", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "score_history": [-0.0026493072509765625, -3.814697265625e-05, -0.0001277923583984375, -0.000385284423828125, -1.9073486328125e-05, -0.007153256796300411, -2.2768756025470793e-05, -2.09808349609375e-05, -0.000469207763671875, -7.62939453125e-06, -0.0002117156982421875, -3.62396240234375e-05, -4.2557105189189315e-05, -2.0384788513183594e-05, -0.00010406970977783203, -3.814697265625e-06, -0.005033612251281738, 0.0, -0.00909113883972168, -1.9073486328125e-06, -0.01735091209411621, 0.0, -0.0051212310791015625, -1.52587890625e-05, -0.001129150390625, 0.0, -0.0040274858474731445, 0.0, -0.0011827945709228516, 0.0, -0.011940956115722656, -0.021108627319335938, -0.005122020840644836, -0.0013257265090942383, -6.866455078125e-05, -0.007143974304199219, -0.0006008148193359375, -0.0024023056030273438, -0.0037746429443359375, -0.0001983642578125, -0.0058890581130981445, -1.9073486328125e-06, -0.00109612918458879, -0.5255166292190552, 0.0, -0.0005086638266220689, -3.814697265625e-06, -0.0001926422119140625, -0.0001373291015625, -0.0001377999724354595, -6.115436553955078e-05, -0.0021331720054149628, -0.013145999051630497, -3.814697265625e-06, -0.0012541516916826367, -0.000385284423828125, -0.8652420043945312, -0.0001697540283203125, -0.00015115347923710942, -7.43865966796875e-05, -0.0007967821438796818, -3.563840389251709, -1.33514404296875e-05, -0.004551186691969633, -0.0002079010009765625, -0.34844017028808594, -9.5367431640625e-05, -0.00013458618195727468, -2.8967540856683627e-05, -0.004058480262756348, -2.5033950805664062e-05, -8.83340835571289e-05, -4.9591064453125e-05, -0.0008258819580078125, -0.0003757476806640625, -5.7220458984375e-06, -9.5367431640625e-06, -0.00042688846588134766, -0.0005578896380029619, -4.410743713378906e-06, -7.62939453125e-06, -0.0012969970703125, -9.5367431640625e-06, -4.76837158203125e-05, -4.9591064453125e-05, -0.000217437744140625, 0.0, -0.013449430465698242, -3.4332275390625e-05, -0.0004520416259765625, -0.00030517578125, -2.09808349609375e-05, -0.001409769058227539, -1.9073486328125e-06, -1.52587890625e-05, -3.62396240234375e-05, -0.007029054220765829, -7.474422454833984e-05, -1.9073486328125e-06, -0.0019283294677734375, -7.05718994140625e-05, -3.373578147147782e-05, -3.4570680327306036e-06, -0.0006935596466064453, -9.536738616588991e-07, -0.0002307891845703125], "score": -5.476013999204952, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole0": "Give", "hole1": [{"_type": "List", "elts": [{"hole1": "ChangeHealth", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeHealth", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"_type": "Template30", "hole0": "Taunt"}]}], "hole2": "MinionSelector", "_type": "Template22", "hole3": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}]}, "hole0": "Houndmaster", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 4, "hole2": "HUNTER", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 3, "_type": "Template8", "hole0": 4}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "Houndmaster"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(ChangeHealth(2)), Buff(Taunt())]), MinionSelector(IsType(\n            MINION_TYPE.BEAST), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Houndmaster", "<EOS>", 320, 100, 333, 136, 197, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 105, 81, 232, "Taunt", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "score_history": [-0.0026493072509765625, -3.814697265625e-05, -0.0001277923583984375, -0.000385284423828125, -1.9073486328125e-05, -0.007153256796300411, -2.2768756025470793e-05, -2.09808349609375e-05, -0.000469207763671875, -7.62939453125e-06, -0.0002117156982421875, -3.62396240234375e-05, -4.2557105189189315e-05, -2.0384788513183594e-05, -0.00010406970977783203, -3.814697265625e-06, -0.005033612251281738, 0.0, -0.00909113883972168, -1.9073486328125e-06, -0.01735091209411621, 0.0, -0.0051212310791015625, -1.52587890625e-05, -0.001129150390625, 0.0, -0.0040274858474731445, 0.0, -0.0011827945709228516, 0.0, -0.011940956115722656, -0.021108627319335938, -0.005122020840644836, -0.0013257265090942383, -6.866455078125e-05, -0.007143974304199219, -0.0006008148193359375, -0.0024023056030273438, -0.0037746429443359375, -0.0001983642578125, -0.0058890581130981445, -1.9073486328125e-06, -0.00109612918458879, -0.9003077745437622, 0.0, -0.0005043745040893555, -3.814697265625e-06, -0.0002307891845703125, -0.000125885009765625, -8.20142449811101e-05, -1.71661376953125e-05, -0.0014451121678575873, -0.026117082685232162, -1.9073486328125e-06, -0.001175992307253182, -0.0002384185791015625, -3.436367988586426, -1.4414682388305664, -9.72747802734375e-05, -0.006840704474598169, -7.378823647741228e-05, -0.007478117942810059, -3.6716461181640625e-05, -4.601478576660156e-05, -4.00543212890625e-05, -0.00035858154296875, -0.0002765655517578125, -3.814697265625e-06, -5.7220458984375e-06, -0.00045680999755859375, -0.0005539609119296074, -4.5299530029296875e-06, -9.5367431640625e-06, -0.000560760498046875, -9.5367431640625e-06, -1.52587890625e-05, -3.4332275390625e-05, -0.0001659393310546875, 0.0, -0.011065244674682617, -2.6702880859375e-05, -0.000396728515625, -0.0002803802490234375, -2.288818359375e-05, -0.0014841556549072266, -1.9073486328125e-06, -1.52587890625e-05, -2.86102294921875e-05, -0.005862472578883171, -6.711483001708984e-05, -1.9073486328125e-06, -0.00177001953125, -6.67572021484375e-05, -3.147082679788582e-05, -1.311301275563892e-06, -0.0006378889083862305, -9.536738616588991e-07, -0.0002231597900390625], "score": -5.962078424209267, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole0": "Give", "hole1": [{"_type": "List", "elts": [{"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"_type": "Template62_expr_seq"}, {"_type": "Template30", "hole0": "Taunt"}]}], "hole2": "MinionSelector", "_type": "Template22", "hole3": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}]}, "hole0": "Houndmaster", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 4, "hole2": "HUNTER", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 3, "_type": "Template8", "hole0": 4}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "Houndmaster"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeAttack(2)),\n            Buff(Taunt())]), MinionSelector(IsType(MINION_TYPE.BEAST),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Houndmaster", "<EOS>", 320, 100, 333, 136, 197, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 105, "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "score_history": [-0.0026493072509765625, -3.814697265625e-05, -0.0001277923583984375, -0.000385284423828125, -1.9073486328125e-05, -0.007153256796300411, -2.2768756025470793e-05, -2.09808349609375e-05, -0.000469207763671875, -7.62939453125e-06, -0.0002117156982421875, -3.62396240234375e-05, -4.2557105189189315e-05, -2.0384788513183594e-05, -0.00010406970977783203, -3.814697265625e-06, -0.005033612251281738, 0.0, -0.00909113883972168, -1.9073486328125e-06, -0.01735091209411621, 0.0, -0.0051212310791015625, -1.52587890625e-05, -0.001129150390625, 0.0, -0.0040274858474731445, 0.0, -0.0011827945709228516, 0.0, -0.011940956115722656, -0.021108627319335938, -0.005122020840644836, -0.0013257265090942383, -6.866455078125e-05, -0.007143974304199219, -0.0006008148193359375, -0.0024023056030273438, -0.0037746429443359375, -0.0001983642578125, -0.0058890581130981445, -1.9073486328125e-06, -0.00109612918458879, -0.9003077745437622, 0.0, -0.0005043745040893555, -3.814697265625e-06, -0.0002307891845703125, -0.000125885009765625, -8.20142449811101e-05, -1.71661376953125e-05, -0.0014451121678575873, -0.026117082685232162, -1.9073486328125e-06, -0.001175992307253182, -0.0002384185791015625, -1.3334684371948242, -0.0001697540283203125, -0.00013172390754334629, -6.29425048828125e-05, -0.0008428010623902082, -0.043134331703186035, -3.814697265625e-06, -0.0014597164699807763, -0.0001621246337890625, -3.5088138580322266, -0.0015829801559448242, -6.878376007080078e-05, -0.00012874603271484375, -4.00543212890625e-05, -0.0001926422119140625, -0.00049591064453125, -1.9073486328125e-06, -7.62939453125e-06, -0.00019931793212890625, -0.00040803488809615374, -1.5497207641601562e-05, -1.1444091796875e-05, -0.0162353515625, -5.7220458984375e-06, -1.52587890625e-05, -3.24249267578125e-05, -0.0001659393310546875, 0.0, -0.01618635654449463, -4.00543212890625e-05, -0.000385284423828125, -0.0003337860107421875, -2.288818359375e-05, -0.0015490055084228516, -3.814697265625e-06, -1.52587890625e-05, -3.62396240234375e-05, -0.006993767339736223, -6.914138793945312e-05, -1.9073486328125e-06, -0.0019893646240234375, -6.866455078125e-05, -3.3974185498664156e-05, -3.4570680327306036e-06, -0.000676274299621582, -9.536738616588991e-07, -0.000225067138671875], "score": -5.9816816527909396, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole0": "Give", "hole1": [{"_type": "List", "elts": [{"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"hole1": "ChangeAttack", "hole2": 2, "_type": "Template28", "hole0": "Buff"}, {"_type": "Template62_expr_seq"}]}], "hole2": "MinionSelector", "_type": "Template22", "hole3": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}]}]}, "hole0": "Houndmaster", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 4, "hole2": "HUNTER", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 3, "_type": "Template8", "hole0": 4}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "Houndmaster"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeAttack(2)),\n            Buff(ChangeAttack(2))]), MinionSelector(IsType(MINION_TYPE.\n            BEAST), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Houndmaster", "<EOS>", 320, 100, 333, 136, 197, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 214, "Give", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "score_history": [-0.0026493072509765625, -3.814697265625e-05, -0.0001277923583984375, -0.000385284423828125, -1.9073486328125e-05, -0.007153256796300411, -2.2768756025470793e-05, -2.09808349609375e-05, -0.000469207763671875, -7.62939453125e-06, -0.0002117156982421875, -3.62396240234375e-05, -4.2557105189189315e-05, -2.0384788513183594e-05, -0.00010406970977783203, -3.814697265625e-06, -0.005033612251281738, 0.0, -0.00909113883972168, -1.9073486328125e-06, -0.01735091209411621, 0.0, -0.0051212310791015625, -1.52587890625e-05, -0.001129150390625, 0.0, -0.0040274858474731445, 0.0, -0.0011827945709228516, 0.0, -0.011940956115722656, -5.846490383148193, -0.16130942106246948, -0.00033721051295287907, -0.0007507205009460449, -0.0002479551767464727, -1.9073468138230965e-06, -0.15706825256347656, -0.00048828125, -1.9073486328125e-06, -0.0003306865692138672, -1.3470649719238281e-05, -1.1444091796875e-05, -2.6702880859375e-05, -0.007330658379942179, -2.5033950805664062e-05, -1.9073486328125e-06, -0.0054473876953125, -0.0001354217529296875, -1.0251942512695678e-05, -1.9073468138230965e-06, -0.00040221214294433594, -3.6954811548639555e-06, -0.0003662109375], "score": -6.247009707067718, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole2": "MinionSelector", "_type": "Template22", "hole0": "Give"}, "hole0": "Houndmaster", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 4, "hole2": "HUNTER", "_type": "Template0", "hole3": "FREE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 3, "_type": "Template8", "hole0": 4}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "Houndmaster"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give(), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}, {"choice_history": [120, 185, 331], "score_history": [-0.0026493072509765625, -3.814697265625e-05, -21.422353744506836], "score": -21.42504119873047, "model_output": {"body": [], "_type": "Module"}, "inferred_code": ""}], "index": 52}
{"beams": [{"choice_history": [121, 198, "Huffer", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Huffer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "score_history": [-5.7220458984375e-06, -7.2479248046875e-05, -1.823885577323381e-05, -5.924613287788816e-05, -2.383749233558774e-07, -2.86102294921875e-05, -1.1563301086425781e-05, -0.00038909912109375, -0.008955001831054688, -3.4332275390625e-05, -2.09808349609375e-05, -0.00344085693359375, -5.53131103515625e-05, -0.001270294189453125, -5.14984130859375e-05, -5.340576171875e-05, 0.0, -9.5367431640625e-06, -0.010394096374511719, -0.001201629638671875, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.0003421306610107422, -7.748603820800781e-06, -0.0006679296493530273, 0.0, -0.0013484954833984375, -0.0001888275146484375, -0.00028228759765625, -0.000576019287109375, -0.00014495849609375, -0.0001583099365234375, -4.00543212890625e-05, -5.53131103515625e-05, -3.814697265625e-06, -0.00048828125, 0.0, -0.0002880096435546875, -0.003147125244140625, -0.000270843505859375, -0.00017940998077392578, -4.410734163684538e-06, -1.9073479052167386e-05, -5.245207830739673e-06, -0.005319524090737104, -1.9073486328125e-06, -0.0017032623291015625], "score": -0.04132466233068044, "model_output": {"hole4": "player", "hole0": "Huffer", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Huffer", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n"}, {"choice_history": [121, 198, "Huffer", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Huffer", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "score_history": [-5.7220458984375e-06, -7.2479248046875e-05, -1.823885577323381e-05, -5.924613287788816e-05, -2.383749233558774e-07, -2.86102294921875e-05, -1.1563301086425781e-05, -0.00038909912109375, -4.848712921142578, -0.00017547607421875, -7.033342626527883e-06, -0.003780961036682129, -0.0008494852227158844, -8.344639354618266e-06, -0.14667725563049316, -0.000179290771484375, -0.0006809234619140625, 0.0, -0.0012073516845703125, -7.62939453125e-06, -2.288818359375e-05, 0.0, -0.0002880096435546875, -5.7220458984375e-06, -0.00018525123596191406, 0.0, -0.000152587890625, -3.814697265625e-06, -0.02115631103515625, 0.0, -0.0002040863037109375, -0.0155029296875, -0.0003185272216796875, -0.00026154518127441406, -4.291525328881107e-06, -2.2888165403855965e-05, -4.410743713378906e-06, -0.0038697030395269394, -1.9073486328125e-06, -0.0017147064208984375], "score": -5.046591450080086, "model_output": {"hole4": "player", "hole0": "Huffer", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Huffer", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n"}, {"choice_history": [121, 198, "Huffer", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Huffer", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "score_history": [-5.7220458984375e-06, -7.2479248046875e-05, -1.823885577323381e-05, -5.924613287788816e-05, -2.383749233558774e-07, -2.86102294921875e-05, -1.1563301086425781e-05, -0.00038909912109375, -0.008955001831054688, -3.4332275390625e-05, -2.09808349609375e-05, -0.00344085693359375, -5.53131103515625e-05, -0.001270294189453125, -5.14984130859375e-05, -5.340576171875e-05, 0.0, -9.5367431640625e-06, -5.427556991577148, -0.041728973388671875, -2.09808349609375e-05, -1.52587890625e-05, 0.0, -0.000655055046081543, -7.62939453125e-06, -0.0005074739456176758, 0.0, -0.00151824951171875, -0.0002117156982421875, -0.0002231597900390625, -0.000629425048828125, -0.0001430511474609375, -0.0001678466796875, -3.4332275390625e-05, -4.9591064453125e-05, -3.814697265625e-06, -0.000370025634765625, 0.0, -0.000255584716796875, -0.003570556640625, -0.0002613067626953125, -0.0002499818801879883, -4.6491513785440475e-06, -1.6808502550702542e-05, -5.245207830739673e-06, -0.0054016695357859135, -1.9073486328125e-06, -0.001705169677734375], "score": -5.49979287135011, "model_output": {"hole4": "player", "hole0": "Huffer", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Huffer", "_type": "Str"}, {"_type": "Template63"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n"}, {"choice_history": [121, 198, "Huffer", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Huffer", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "score_history": [-5.7220458984375e-06, -7.2479248046875e-05, -1.823885577323381e-05, -5.924613287788816e-05, -2.383749233558774e-07, -2.86102294921875e-05, -1.1563301086425781e-05, -0.00038909912109375, -0.008955001831054688, -3.4332275390625e-05, -2.09808349609375e-05, -0.00344085693359375, -5.53131103515625e-05, -0.001270294189453125, -5.14984130859375e-05, -5.340576171875e-05, 0.0, -9.5367431640625e-06, -5.649080276489258, -0.7178764343261719, -3.814697265625e-06, -2.09808349609375e-05, 0.0, -0.0005083084106445312, -5.841255187988281e-06, -0.0005528926849365234, -1.9073486328125e-06, -0.0022144317626953125, -0.0002231597900390625, -0.00038909912109375, -0.0006351470947265625, -0.000152587890625, -0.0001621246337890625, -4.38690185546875e-05, -5.340576171875e-05, -3.814697265625e-06, -0.0004329681396484375, 0.0, -0.0002651214599609375, -0.003299713134765625, -0.0002689361572265625, -0.0002938508987426758, -5.245195097813848e-06, -1.6808502550702542e-05, -5.364416665543104e-06, -0.005468670278787613, -1.9073486328125e-06, -0.001689910888671875], "score": -6.398153009640282, "model_output": {"hole4": "player", "hole0": "Huffer", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Huffer", "_type": "Str"}, {"_type": "Template67"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n"}, {"choice_history": [121, 198, "Huffer", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Huffer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "4", "<EOS>", 62], "score_history": [-5.7220458984375e-06, -7.2479248046875e-05, -1.823885577323381e-05, -5.924613287788816e-05, -2.383749233558774e-07, -2.86102294921875e-05, -1.1563301086425781e-05, -0.00038909912109375, -0.008955001831054688, -3.4332275390625e-05, -2.09808349609375e-05, -0.00344085693359375, -5.53131103515625e-05, -0.001270294189453125, -5.14984130859375e-05, -5.340576171875e-05, 0.0, -9.5367431640625e-06, -0.010394096374511719, -0.001201629638671875, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.0003421306610107422, -7.748603820800781e-06, -0.0006679296493530273, 0.0, -0.0013484954833984375, -0.0001888275146484375, -0.00028228759765625, -0.000576019287109375, -0.00014495849609375, -0.0001583099365234375, -4.00543212890625e-05, -5.53131103515625e-05, -3.814697265625e-06, -0.00048828125, 0.0, -0.0002880096435546875, -0.003147125244140625, -0.000270843505859375, -0.00017940998077392578, -4.410734163684538e-06, -1.9073479052167386e-05, -5.245207830739673e-06, -5.804590702056885, 0.0, -0.5879116058349609], "score": -6.426802276454055, "model_output": {"hole4": "player", "hole0": "Huffer", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Huffer", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "4", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, 4=True)\n"}, {"choice_history": [121, 198, "Huffer", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Huffer", "<EOS>", 109, 95, 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "score_history": [-5.7220458984375e-06, -7.2479248046875e-05, -1.823885577323381e-05, -5.924613287788816e-05, -2.383749233558774e-07, -2.86102294921875e-05, -1.1563301086425781e-05, -0.00038909912109375, -0.008955001831054688, -3.4332275390625e-05, -2.09808349609375e-05, -0.00344085693359375, -5.53131103515625e-05, -0.001270294189453125, -5.14984130859375e-05, -5.340576171875e-05, 0.0, -9.5367431640625e-06, -5.649080276489258, -0.6828804016113281, -0.14572906494140625, -9.918212890625e-05, -0.0027561187744140625, -0.0011653900146484375, -0.0001888275146484375, -0.0006324052810668945, -5.7220458984375e-06, -2.6702880859375e-05, -3.814697265625e-06, -0.014360666275024414, 0.0, -0.000171661376953125, -0.03397178649902344, -0.0005779266357421875, -0.00020611286163330078, -1.680836794548668e-05, -1.7642965758568607e-05, -5.006785613659304e-06, -0.007208197843283415, -1.9073486328125e-06, -0.0019054412841796875], "score": -6.555487482025455, "model_output": {"hole4": "player", "hole0": "Huffer", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Huffer", "_type": "Str"}, {"_type": "Template67"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 5, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n"}, {"choice_history": [121, 198, "Huffer", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Huffer", "<EOS>", 104, 95, 96, 112, "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "score_history": [-5.7220458984375e-06, -7.2479248046875e-05, -1.823885577323381e-05, -5.924613287788816e-05, -2.383749233558774e-07, -2.86102294921875e-05, -1.1563301086425781e-05, -0.00038909912109375, -0.008955001831054688, -3.4332275390625e-05, -2.09808349609375e-05, -5.778352737426758, -0.0008220672607421875, -0.008174896240234375, -0.000762939453125, -2.47955322265625e-05, -1.0728830375228426e-06, -1.33514404296875e-05, -0.12241935729980469, -0.32501220703125, -0.7520418167114258, -0.000476837158203125, -0.000644683837890625, -3.814697265625e-06, -0.0026724333874881268, -0.000576019287109375, -4.00543212890625e-05, -0.1053152084350586, -0.00060272216796875, -0.00011456012725830078, -2.1219027985353023e-05, -1.5497189451707527e-05, -8.583047019783407e-06, -0.008887012489140034, 0.0, -0.0014362335205078125], "score": -7.118035632223268, "model_output": {"hole4": "p", "hole0": "Huffer", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Huffer", "_type": "Str"}, {"_type": "Template61"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False)\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n"}, {"choice_history": [121, 198, "Huffer", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Huffer", "<EOS>", 75, 190, "3", "<EOS>", 95, 65, 156, 43, "LEGENDARY", "<EOS>", 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "score_history": [-5.7220458984375e-06, -7.2479248046875e-05, -1.823885577323381e-05, -5.924613287788816e-05, -2.383749233558774e-07, -2.86102294921875e-05, -1.1563301086425781e-05, -0.00038909912109375, -0.008955001831054688, -3.4332275390625e-05, -2.09808349609375e-05, -0.00344085693359375, -5.53131103515625e-05, -0.001270294189453125, -5.14984130859375e-05, -5.340576171875e-05, 0.0, -9.5367431640625e-06, -6.580497741699219, -0.001499176025390625, -0.020310044288635254, -4.327203714638017e-05, -0.08214759826660156, -0.138763427734375, -4.00543212890625e-05, -0.00726318359375, -0.396884560585022, -0.0002193450927734375, -0.01372528076171875, -0.000904083251953125, -0.0098876953125, -0.0002040863037109375, -0.0001544952392578125, -3.0517578125e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.0002651214599609375, 0.0, -0.0001163482666015625, -0.01146697998046875, -0.0004100799560546875, -0.00017559528350830078, -5.722029527532868e-06, -1.7881382518680766e-05, -5.245207830739673e-06, -0.004843340255320072, -1.9073486328125e-06, -0.0017833709716796875], "score": -7.286197884745889, "model_output": {"hole4": "player", "hole0": "Huffer", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Huffer", "_type": "Str"}, {"_type": "Num", "n": 3}, {"_type": "Template48"}, {"attr": "LEGENDARY", "value": {"_type": "Template56"}, "_type": "Attribute"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n"}, {"choice_history": [121, 198, "Huffer", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Huffer", "<EOS>", "3", "<EOS>", "DRUID", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "score_history": [-5.7220458984375e-06, -7.2479248046875e-05, -1.823885577323381e-05, -5.924613287788816e-05, -2.383749233558774e-07, -2.86102294921875e-05, -1.1563301086425781e-05, -0.00038909912109375, -4.848712921142578, -0.00017547607421875, -7.033342626527883e-06, -0.003780961036682129, -0.0008494852227158844, -8.344639354618266e-06, -2.358966112136841, 0.0, -0.05089378356933594, -1.9073486328125e-06, -0.00151824951171875, -1.1444091796875e-05, -2.09808349609375e-05, 0.0, -0.0003223419189453125, -5.7220458984375e-06, -0.00021398067474365234, 0.0, -0.0001697540283203125, -3.814697265625e-06, -0.02333831787109375, 0.0, -0.0002269744873046875, -0.016549110412597656, -0.00034332275390625, -0.00028824806213378906, -3.4570634852570947e-06, -2.3245791453518905e-05, -4.410743713378906e-06, -0.003846467472612858, -1.9073486328125e-06, -0.001705169677734375], "score": -7.312578141310496, "model_output": {"hole4": "player", "hole0": "Huffer", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Huffer", "hole1": 3, "hole2": "DRUID", "_type": "Template11", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n"}, {"choice_history": [121, 198, "Huffer", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Huffer", "<EOS>", 104, 95, 94, 112, "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "score_history": [-5.7220458984375e-06, -7.2479248046875e-05, -1.823885577323381e-05, -5.924613287788816e-05, -2.383749233558774e-07, -2.86102294921875e-05, -1.1563301086425781e-05, -0.00038909912109375, -0.008955001831054688, -3.4332275390625e-05, -2.09808349609375e-05, -5.778352737426758, -0.0008220672607421875, -0.008174896240234375, -0.000762939453125, -2.47955322265625e-05, -1.0728830375228426e-06, -1.33514404296875e-05, -0.12241935729980469, -0.32501220703125, -0.7200632095336914, -6.67572021484375e-05, -0.00015211105346679688, -3.814697265625e-06, -0.0040585994720458984, -0.0002994537353515625, -2.86102294921875e-05, -0.34796810150146484, -0.0013427734375, -0.0007039308547973633, -1.5616295058862306e-05, -1.2874589629063848e-05, -6.437291176553117e-06, -0.007378303911536932, 0.0, -0.001079559326171875], "score": -7.328359089949004, "model_output": {"hole4": "p", "hole0": "Huffer", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Huffer", "_type": "Str"}, {"_type": "Template61"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n"}, {"choice_history": [121, 198, "Huffer", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Huffer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "score_history": [-5.7220458984375e-06, -7.2479248046875e-05, -1.823885577323381e-05, -5.924613287788816e-05, -2.383749233558774e-07, -2.86102294921875e-05, -1.1563301086425781e-05, -0.00038909912109375, -0.008955001831054688, -3.4332275390625e-05, -2.09808349609375e-05, -5.778352737426758, -0.0008220672607421875, -0.008174896240234375, -0.000762939453125, -2.47955322265625e-05, -1.0728830375228426e-06, -1.33514404296875e-05, -0.12241935729980469, -1.2872905731201172, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.00036847591400146484, -3.933906555175781e-06, -0.0015606880187988281, 0.0, -0.0017452239990234375, -0.0001087188720703125, -0.001617431640625, -3.814697265625e-06, -0.3524894714355469, 0.0, -0.0001163482666015625, -0.008202552795410156, -0.0005893707275390625, -0.00012421607971191406, -1.2278481335670222e-05, -2.264973591081798e-05, -8.463855920126662e-06, -0.004015807993710041, -1.9073486328125e-06, -0.000885009765625], "score": -7.579345110533154, "model_output": {"hole4": "player", "hole0": "Huffer", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Huffer", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n"}, {"choice_history": [121, 198, "Huffer", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Huffer", "<EOS>", 104, 95, 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "score_history": [-5.7220458984375e-06, -7.2479248046875e-05, -1.823885577323381e-05, -5.924613287788816e-05, -2.383749233558774e-07, -2.86102294921875e-05, -1.1563301086425781e-05, -0.00038909912109375, -0.008955001831054688, -3.4332275390625e-05, -2.09808349609375e-05, -0.00344085693359375, -5.53131103515625e-05, -0.001270294189453125, -5.14984130859375e-05, -5.340576171875e-05, 0.0, -9.5367431640625e-06, -0.010394096374511719, -6.997258186340332, -0.4999685287475586, -0.0001201629638671875, -0.002040863037109375, -0.0014400482177734375, -0.000225067138671875, -0.0005453824996948242, -7.62939453125e-06, -3.0517578125e-05, -3.814697265625e-06, -0.013280987739562988, 0.0, -0.0001392364501953125, -0.049988746643066406, -0.000614166259765625, -0.00020992755889892578, -1.537788011773955e-05, -1.7642965758568607e-05, -6.914134246471804e-06, -0.006949492730200291, -1.9073486328125e-06, -0.001918792724609375], "score": -7.599653906826461, "model_output": {"hole4": "player", "hole0": "Huffer", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Huffer", "_type": "Str"}, {"_type": "Template61"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n"}, {"choice_history": [121, 198, "Huffer", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Huffer", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "score_history": [-5.7220458984375e-06, -7.2479248046875e-05, -1.823885577323381e-05, -5.924613287788816e-05, -2.383749233558774e-07, -2.86102294921875e-05, -1.1563301086425781e-05, -0.00038909912109375, -7.688002586364746, -0.00106048583984375, -1.2278481335670222e-05, -0.0002638101577758789, -0.0016123055247589946, -2.3841855067985307e-07, -0.0033843517303466797, -1.9073486328125e-06, -0.00016987323760986328, -3.814697265625e-06, -0.00020599365234375, -5.91278076171875e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.00012230873107910156, -4.38690185546875e-05, -0.009077668190002441, -3.814697265625e-06, -0.0001087188720703125, -1.9073486328125e-06, -0.0004291534423828125, 0.0, -0.0005340576171875, -0.002796173095703125, -0.0003376007080078125, -5.173683166503906e-05, -3.099436753473128e-06, -2.2530539354193024e-05, -4.291534423828125e-06, -0.004250051453709602, -1.9073486328125e-06, -0.0010585784912109375], "score": -7.714238048156147, "model_output": {"hole4": "player", "hole0": "Huffer", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Huffer", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n"}, {"choice_history": [121, 198, "Huffer", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Huffer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -7.2479248046875e-05, -1.823885577323381e-05, -5.924613287788816e-05, -2.383749233558774e-07, -2.86102294921875e-05, -1.1563301086425781e-05, -0.00038909912109375, -0.008955001831054688, -3.4332275390625e-05, -2.09808349609375e-05, -0.00344085693359375, -5.53131103515625e-05, -0.001270294189453125, -5.14984130859375e-05, -5.340576171875e-05, 0.0, -9.5367431640625e-06, -0.010394096374511719, -0.001201629638671875, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.0003421306610107422, -7.748603820800781e-06, -0.0006679296493530273, 0.0, -0.0013484954833984375, -0.0001888275146484375, -0.00028228759765625, -0.000576019287109375, -0.00014495849609375, -0.0001583099365234375, -4.00543212890625e-05, -5.53131103515625e-05, -3.814697265625e-06, -0.00048828125, 0.0, -0.0002880096435546875, -0.003147125244140625, -0.000270843505859375, -0.00017940998077392578, -4.410734163684538e-06, -1.9073479052167386e-05, -5.245207830739673e-06, -0.005319524090737104, -1.9073486328125e-06, -7.45151424407959, -0.0001983642578125, -0.14398181438446045, 0.0, -0.002330780029296875, -0.087890625, -0.001850128173828125, -0.06770213693380356, -6.520748138427734e-05, -0.005405426025390625, -0.049388885498046875, -0.003416231367737055, -0.0003844395687337965, -1.4781950994802173e-05, -0.0024509429931640625, -1.9073486328125e-06, -0.0001958608627319336, -0.0035333633422851562, -5.7220458984375e-06, -7.43865966796875e-05, -0.0013103485107421875, -3.24249267578125e-05, -1.1444091796875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.1444091796875e-05, -0.0004254579544067383, -5.7220458984375e-06, -1.33514404296875e-05, -0.16888809204101562], "score": -8.030770709412081, "model_output": {"hole4": "player", "hole0": "Huffer", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Huffer", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "charge", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"hole1": {"_type": "Name", "id": "IsType"}, "hole2": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Template35", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 4}]}, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.BEAST)))])\n"}, {"choice_history": [121, 198, "Huffer", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Huffer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Bear", "Form", "<EOS>", 82, 234, "Transform", "<EOS>", "Bear", "Huffer", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "score_history": [-5.7220458984375e-06, -7.2479248046875e-05, -1.823885577323381e-05, -5.924613287788816e-05, -2.383749233558774e-07, -2.86102294921875e-05, -1.1563301086425781e-05, -0.00038909912109375, -0.008955001831054688, -3.4332275390625e-05, -2.09808349609375e-05, -0.00344085693359375, -5.53131103515625e-05, -0.001270294189453125, -5.14984130859375e-05, -5.340576171875e-05, 0.0, -9.5367431640625e-06, -0.010394096374511719, -0.001201629638671875, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.0003421306610107422, -7.748603820800781e-06, -0.0006679296493530273, 0.0, -0.0013484954833984375, -0.0001888275146484375, -0.00028228759765625, -0.000576019287109375, -0.00014495849609375, -0.0001583099365234375, -4.00543212890625e-05, -5.53131103515625e-05, -3.814697265625e-06, -0.00048828125, 0.0, -0.0002880096435546875, -0.003147125244140625, -0.000270843505859375, -0.00017940998077392578, -4.410734163684538e-06, -1.9073479052167386e-05, -5.245207830739673e-06, -0.005319524090737104, -1.9073486328125e-06, -7.45151424407959, -0.0001983642578125, -0.14398181438446045, 0.0, -0.002330780029296875, -0.087890625, -0.001850128173828125, -0.06770213693380356, -6.520748138427734e-05, -0.005405426025390625, -0.049388885498046875, -0.003416231367737055, -0.0003844395687337965, -1.4781950994802173e-05, -0.0024509429931640625, -1.9073486328125e-06, -0.0001958608627319336, -0.0035333633422851562, -5.7220458984375e-06, -7.43865966796875e-05, -0.0013103485107421875, -3.24249267578125e-05, -1.1444091796875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.1444091796875e-05, -0.0004254579544067383, -5.7220458984375e-06, -1.33514404296875e-05, -1.8692750930786133, -0.001804351806640625, -0.04683971405029297, -0.000209808349609375, -0.0004787445068359375, -0.00019073486328125, -3.814697265625e-06, -0.37438616156578064, -0.0005750656127929688, -3.4332275390625e-05, -0.0033550262451171875, -0.0019397735595703125, -0.008382558822631836, -0.00020229814981576055, -0.018778152763843536, -0.28235602378845215, -0.005413174629211426, -9.1552734375e-05, -5.7220458984375e-06, -0.00024306774139404297, -1.52587890625e-05, 0.0, 0.0, -0.001232147216796875], "score": -10.477695194663738, "model_output": {"hole4": "player", "hole0": "Huffer", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Huffer", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "charge", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"hole1": {"_type": "Name", "id": "IsType"}, "hole2": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Template35", "hole0": "MinionSelector"}], "hole2": [{"hole1": [{"_type": "Template46", "hole0": "BearForm"}, {"hole1": "BearHuffer", "_type": "Template31", "hole0": "Transform"}, {"_type": "Template46", "hole0": "SelfSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45_expr_seq", "hole0": "Choice"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 4}]}, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.BEAST))), Choice(BearForm(), Transform(\n            BearHuffer()), SelfSelector())])\n"}], "index": 53}
{"beams": [{"choice_history": [121, 200, "Humility", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "change_attack", "<EOS>", 320, 66, 158, 46, 123, 37, 249, 41, "calculate_attack", "<EOS>"], "score_history": [-2.86102294921875e-05, -0.000244140625, -1.6689286894688848e-06, -3.218649908376392e-06, -5.9963203966617584e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0002002716064453125, -8.96453857421875e-05, -8.0108642578125e-05, -6.73532485961914e-05, -1.1920928244535389e-07, -3.8146868064359296e-06, -6.556510470545618e-06, -0.015619397163391113, 0.0, -0.0002288818359375, 0.0, -0.0008487701416015625, -3.814697265625e-06, 0.0, -3.981590270996094e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -9.72747802734375e-05, -1.5974044799804688e-05, 0.0, -0.021579742431640625, -3.62396240234375e-05, -0.000705718994140625, -7.05718994140625e-05, -0.004245758056640625, -0.0140265803784132, 0.0, -0.00016021728515625, -0.024526596069335938, -0.009568214416503906, -0.0018358230590820312, -0.0040225982666015625, -0.0016241073608398438, -1.9073486328125e-05, -0.000339508056640625, -0.0017578596016392112, 0.0], "score": -0.1021942481033804, "model_output": {"hole4": "player", "hole0": "Humility", "hole6": [{"_type": "Template19"}, {"hole1": "change_attack", "hole2": [{"right": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}, "op": {"_type": "Sub"}, "_type": "BinOp", "left": {"_type": "Template60"}}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Humility", "hole1": 1, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - self.target.calculate_attack())\n"}, {"choice_history": [121, 200, "Humility", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "change_attack", "<EOS>", 320, 110], "score_history": [-2.86102294921875e-05, -0.000244140625, -1.6689286894688848e-06, -3.218649908376392e-06, -5.9963203966617584e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0002002716064453125, -8.96453857421875e-05, -8.0108642578125e-05, -6.73532485961914e-05, -1.1920928244535389e-07, -3.8146868064359296e-06, -6.556510470545618e-06, -0.015619397163391113, 0.0, -0.0002288818359375, 0.0, -0.0008487701416015625, -3.814697265625e-06, 0.0, -3.981590270996094e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -9.72747802734375e-05, -1.5974044799804688e-05, 0.0, -0.021579742431640625, -3.62396240234375e-05, -0.000705718994140625, -7.05718994140625e-05, -0.004245758056640625, -0.0140265803784132, 0.0, -0.00016021728515625, -4.683894157409668], "score": -4.742394625196077, "model_output": {"hole4": "player", "hole0": "Humility", "hole6": [{"_type": "Template19"}, {"hole1": "change_attack", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Humility", "hole1": 1, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(self)\n"}, {"choice_history": [121, 200, "Humility", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "increase_health", "<EOS>", 320, 66, 158, 46, 123, 37, 249, 41, "calculate_attack", "<EOS>"], "score_history": [-2.86102294921875e-05, -0.000244140625, -1.6689286894688848e-06, -3.218649908376392e-06, -5.9963203966617584e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0002002716064453125, -8.96453857421875e-05, -8.0108642578125e-05, -6.73532485961914e-05, -1.1920928244535389e-07, -3.8146868064359296e-06, -6.556510470545618e-06, -0.015619397163391113, 0.0, -0.0002288818359375, 0.0, -0.0008487701416015625, -3.814697265625e-06, 0.0, -3.981590270996094e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -9.72747802734375e-05, -1.5974044799804688e-05, 0.0, -0.021579742431640625, -3.62396240234375e-05, -0.000705718994140625, -7.05718994140625e-05, -0.004245758056640625, -4.871060371398926, 0.0, -4.00543212890625e-05, -0.11845874786376953, -0.0054416656494140625, -0.0027914047241210938, -0.004161834716796875, -0.001628875732421875, -2.6702880859375e-05, -0.0004367828369140625, -0.0009566478547640145, 0.0], "score": -5.049316758102115, "model_output": {"hole4": "player", "hole0": "Humility", "hole6": [{"_type": "Template19"}, {"hole1": "increase_health", "hole2": [{"right": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}, "op": {"_type": "Sub"}, "_type": "BinOp", "left": {"_type": "Template60"}}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Humility", "hole1": 1, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1 - self.target.calculate_attack())\n"}, {"choice_history": [121, 200, "Humility", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Humility", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "change_attack", "<EOS>", 320, 66, 158, 46, 123, 37, 249, 41, "calculate_attack", "<EOS>"], "score_history": [-2.86102294921875e-05, -0.000244140625, -1.6689286894688848e-06, -3.218649908376392e-06, -5.9963203966617584e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0002002716064453125, -8.96453857421875e-05, -8.0108642578125e-05, -6.73532485961914e-05, -1.1920928244535389e-07, -3.8146868064359296e-06, -6.556510470545618e-06, -5.246242523193359, -5.7220458984375e-06, -0.0001964569091796875, 0.0, -0.0014209747314453125, -3.814697265625e-06, 0.0, -3.731250762939453e-05, 0.0, -7.62939453125e-06, -7.62939453125e-06, -7.2479248046875e-05, -1.060962586052483e-05, 0.0, -0.015192031860351562, -3.62396240234375e-05, -0.0007076263427734375, -8.392333984375e-05, -0.0041637420654296875, -0.015162535943090916, 0.0, -0.0001659393310546875, -0.02198028564453125, -0.007818222045898438, -0.0020971298217773438, -0.0040760040283203125, -0.0016574859619140625, -1.9073486328125e-05, -0.0003528594970703125, -0.0017741912743076682, 0.0], "score": -5.324095079079136, "model_output": {"hole4": "player", "hole0": "Humility", "hole6": [{"_type": "Template19"}, {"hole1": "change_attack", "hole2": [{"right": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}, "op": {"_type": "Sub"}, "_type": "BinOp", "left": {"_type": "Template60"}}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Humility", "hole1": 1, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - self.target.calculate_attack())\n"}, {"choice_history": [121, 200, "Humility", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Humility", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "change_attack", "<EOS>", 320, 66, 158, 46, 123, 37, 249, 41, "calculate_attack", "<EOS>"], "score_history": [-2.86102294921875e-05, -0.000244140625, -1.6689286894688848e-06, -3.218649908376392e-06, -5.9963203966617584e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0002002716064453125, -8.96453857421875e-05, -8.0108642578125e-05, -6.73532485961914e-05, -1.1920928244535389e-07, -3.8146868064359296e-06, -6.556510470545618e-06, -5.531603813171387, 0.0, -0.0002079010009765625, 0.0, -0.001190185546875, -3.814697265625e-06, 0.0, -3.9577484130859375e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -9.1552734375e-05, -1.4066696166992188e-05, 0.0, -0.016817092895507812, -4.00543212890625e-05, -0.000827789306640625, -6.67572021484375e-05, -0.0054759979248046875, -0.014705149456858635, 0.0, -0.000171661376953125, -0.02464580535888672, -0.008131980895996094, -0.0019826889038085938, -0.004073143005371094, -0.001636505126953125, -1.9073486328125e-05, -0.00034332275390625, -0.0017777675529941916, 0.0], "score": -5.614687411450625, "model_output": {"hole4": "player", "hole0": "Humility", "hole6": [{"_type": "Template19"}, {"hole1": "change_attack", "hole2": [{"right": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}, "op": {"_type": "Sub"}, "_type": "BinOp", "left": {"_type": "Template60"}}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Humility", "hole1": 1, "hole2": "DRUID", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - self.target.calculate_attack())\n"}, {"choice_history": [121, 200, "Humility", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Humility", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "change_attack", "<EOS>", 320, 66, 158, 46, 123, 37, 249, 41, "calculate_attack", "<EOS>"], "score_history": [-2.86102294921875e-05, -0.000244140625, -1.6689286894688848e-06, -3.218649908376392e-06, -5.9963203966617584e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0002002716064453125, -8.96453857421875e-05, -8.0108642578125e-05, -6.73532485961914e-05, -1.1920928244535389e-07, -3.8146868064359296e-06, -6.556510470545618e-06, -5.5590057373046875, 0.0, -0.0010509490966796875, 0.0, -0.0012006759643554688, -3.814697265625e-06, 0.0, -3.9458274841308594e-05, 0.0, -7.62939453125e-06, -7.62939453125e-06, -8.58306884765625e-05, -1.263618378288811e-05, 0.0, -0.018527984619140625, -3.62396240234375e-05, -0.0006809234619140625, -7.2479248046875e-05, -0.0045795440673828125, -0.01427217572927475, 0.0, -0.0001544952392578125, -0.022902488708496094, -0.008120536804199219, -0.0020503997802734375, -0.004108428955078125, -0.001651763916015625, -1.9073486328125e-05, -0.000354766845703125, -0.0017637009732425213, 0.0], "score": -5.641511999522201, "model_output": {"hole4": "player", "hole0": "Humility", "hole6": [{"_type": "Template19"}, {"hole1": "change_attack", "hole2": [{"right": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}, "op": {"_type": "Sub"}, "_type": "BinOp", "left": {"_type": "Template60"}}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Humility", "hole1": 1, "hole2": "ROGUE", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - self.target.calculate_attack())\n"}, {"choice_history": [121, 200, "Humility", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 130, 168, 37, 249, 41, "<UNK>", "<EOS>", 145, 250, 41, "change_attack", "<EOS>", 320, 110], "score_history": [-2.86102294921875e-05, -0.000244140625, -1.6689286894688848e-06, -3.218649908376392e-06, -5.9963203966617584e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0002002716064453125, -8.96453857421875e-05, -8.0108642578125e-05, -6.73532485961914e-05, -1.1920928244535389e-07, -3.8146868064359296e-06, -6.556510470545618e-06, -0.015619397163391113, 0.0, -0.0002288818359375, 0.0, -0.0008487701416015625, -3.814697265625e-06, 0.0, -3.981590270996094e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -9.72747802734375e-05, -1.5974044799804688e-05, 0.0, -3.9055099487304688, -5.91278076171875e-05, -0.2205486297607422, -3.4332275390625e-05, -9.72747802734375e-05, -0.1473069190979004, 0.0, -9.1552734375e-05, -0.06989192962646484, -0.037593841552734375, -1.9073486328125e-06, -0.05416679382324219, -2.47955322265625e-05, -0.15639305114746094, -0.11184155941009521, 0.0, -0.032489776611328125, -4.9591064453125e-05, -0.5219945907592773, -0.4614603519439697, 0.0, -2.288818359375e-05, -0.4162330627441406], "score": -6.1534875640513675, "model_output": {"hole4": "player", "hole0": "Humility", "hole6": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "<UNK>", "_type": "Template43", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"hole1": "change_attack", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Humility", "hole1": 1, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        self.target.<UNK>()\n        self.target.change_attack(self)\n"}, {"choice_history": [121, 200, "Humility", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110], "score_history": [-2.86102294921875e-05, -0.000244140625, -1.6689286894688848e-06, -3.218649908376392e-06, -5.9963203966617584e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0002002716064453125, -8.96453857421875e-05, -8.0108642578125e-05, -6.73532485961914e-05, -1.1920928244535389e-07, -3.8146868064359296e-06, -6.556510470545618e-06, -0.015619397163391113, 0.0, -0.0002288818359375, 0.0, -0.0008487701416015625, -3.814697265625e-06, 0.0, -3.981590270996094e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -9.72747802734375e-05, -1.5974044799804688e-05, 0.0, -0.021579742431640625, -3.62396240234375e-05, -0.000705718994140625, -7.05718994140625e-05, -0.004245758056640625, -6.421896457672119, -1.9073486328125e-06, -2.09808349609375e-05, -0.14893245697021484], "score": -6.6151654729487674, "model_output": {"hole4": "player", "hole0": "Humility", "hole6": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Humility", "hole1": 1, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}, {"choice_history": [121, 200, "Humility", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Humility", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "change_attack", "<EOS>", 320, 66, 158, 46, 123, 37, 249, 41, "calculate_attack", "<EOS>"], "score_history": [-2.86102294921875e-05, -0.000244140625, -1.6689286894688848e-06, -3.218649908376392e-06, -5.9963203966617584e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0002002716064453125, -8.96453857421875e-05, -8.0108642578125e-05, -6.73532485961914e-05, -1.1920928244535389e-07, -3.8146868064359296e-06, -6.556510470545618e-06, -6.707196235656738, 0.0, -0.001346588134765625, 0.0, -0.0015506744384765625, -3.814697265625e-06, 0.0, -4.1365623474121094e-05, 0.0, -7.62939453125e-06, -7.62939453125e-06, -8.392333984375e-05, -1.2755393072438892e-05, 0.0, -0.013059616088867188, -3.62396240234375e-05, -0.000667572021484375, -7.62939453125e-05, -0.0049228668212890625, -0.014658552594482899, 0.0, -0.0001659393310546875, -0.02381420135498047, -0.008461952209472656, -0.0020198822021484375, -0.004086494445800781, -0.00164031982421875, -1.9073486328125e-05, -0.0003452301025390625, -0.0018119806190952659, 0.0], "score": -6.78683946780847, "model_output": {"hole4": "player", "hole0": "Humility", "hole6": [{"_type": "Template19"}, {"hole1": "change_attack", "hole2": [{"right": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}, "op": {"_type": "Sub"}, "_type": "BinOp", "left": {"_type": "Template60"}}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Humility", "hole1": 1, "hole2": "SHAMAN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - self.target.calculate_attack())\n"}, {"choice_history": [121, 200, "Humility", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "change_attack", "<EOS>", 320, 87], "score_history": [-2.86102294921875e-05, -0.000244140625, -1.6689286894688848e-06, -3.218649908376392e-06, -5.9963203966617584e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0002002716064453125, -8.96453857421875e-05, -8.0108642578125e-05, -6.73532485961914e-05, -1.1920928244535389e-07, -3.8146868064359296e-06, -6.556510470545618e-06, -0.015619397163391113, 0.0, -0.0002288818359375, 0.0, -0.0008487701416015625, -3.814697265625e-06, 0.0, -3.981590270996094e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -9.72747802734375e-05, -1.5974044799804688e-05, 0.0, -0.021579742431640625, -3.62396240234375e-05, -0.000705718994140625, -7.05718994140625e-05, -0.004245758056640625, -0.0140265803784132, 0.0, -0.00016021728515625, -6.805437088012695], "score": -6.8639375557991045, "model_output": {"hole4": "player", "hole0": "Humility", "hole6": [{"_type": "Template19"}, {"hole1": "change_attack", "hole2": [{"_type": "Template39"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Humility", "hole1": 1, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(hearthbreaker.targeting.\n            find_minion_spell_target)\n"}, {"choice_history": [121, 200, "Humility", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 130, 168, 37, 249, 41, "<UNK>", "<EOS>", 145, 250, 41, "die", "<EOS>", 320, 110], "score_history": [-2.86102294921875e-05, -0.000244140625, -1.6689286894688848e-06, -3.218649908376392e-06, -5.9963203966617584e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0002002716064453125, -8.96453857421875e-05, -8.0108642578125e-05, -6.73532485961914e-05, -1.1920928244535389e-07, -3.8146868064359296e-06, -6.556510470545618e-06, -0.015619397163391113, 0.0, -0.0002288818359375, 0.0, -0.0008487701416015625, -3.814697265625e-06, 0.0, -3.981590270996094e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -9.72747802734375e-05, -1.5974044799804688e-05, 0.0, -3.9055099487304688, -5.91278076171875e-05, -0.2205486297607422, -3.4332275390625e-05, -9.72747802734375e-05, -0.1473069190979004, 0.0, -9.1552734375e-05, -0.06989192962646484, -0.037593841552734375, -1.9073486328125e-06, -0.05416679382324219, -2.47955322265625e-05, -0.15639305114746094, -0.11184155941009521, 0.0, -0.032489776611328125, -4.9591064453125e-05, -0.5219945907592773, -1.7942821979522705, -7.62939453125e-06, -2.6702880859375e-05, -0.0077342987060546875], "score": -7.077822090113379, "model_output": {"hole4": "player", "hole0": "Humility", "hole6": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "<UNK>", "_type": "Template43", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Humility", "hole1": 1, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        self.target.<UNK>()\n        self.target.die(self)\n"}, {"choice_history": [121, 200, "Humility", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 130, 168, 37, 249, 41, "<UNK>", "<EOS>", 145, 250, 41, "change_attack", "<EOS>", 320, 66, 158, 46, 123, 37, 249, 41, "calculate_attack", "<EOS>"], "score_history": [-2.86102294921875e-05, -0.000244140625, -1.6689286894688848e-06, -3.218649908376392e-06, -5.9963203966617584e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0002002716064453125, -8.96453857421875e-05, -8.0108642578125e-05, -6.73532485961914e-05, -1.1920928244535389e-07, -3.8146868064359296e-06, -6.556510470545618e-06, -0.015619397163391113, 0.0, -0.0002288818359375, 0.0, -0.0008487701416015625, -3.814697265625e-06, 0.0, -3.981590270996094e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -9.72747802734375e-05, -1.5974044799804688e-05, 0.0, -3.9055099487304688, -5.91278076171875e-05, -0.2205486297607422, -3.4332275390625e-05, -9.72747802734375e-05, -0.1473069190979004, 0.0, -9.1552734375e-05, -0.06989192962646484, -0.037593841552734375, -1.9073486328125e-06, -0.05416679382324219, -2.47955322265625e-05, -0.15639305114746094, -0.11184155941009521, 0.0, -0.032489776611328125, -4.9591064453125e-05, -0.5219945907592773, -0.4614603519439697, 0.0, -2.288818359375e-05, -1.2783422470092773, -0.0020532608032226562, -0.06328201293945312, -0.0052013397216796875, -0.0001926422119140625, -9.5367431640625e-06, -0.0055027008056640625, -0.0057010650634765625, -1.9073486328125e-06], "score": -7.097541213953711, "model_output": {"hole4": "player", "hole0": "Humility", "hole6": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "<UNK>", "_type": "Template43", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"hole1": "change_attack", "hole2": [{"right": {"hole1": "calculate_attack", "_type": "Template43", "hole0": {"_type": "Template52"}}, "op": {"_type": "Sub"}, "_type": "BinOp", "left": {"_type": "Template60"}}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Humility", "hole1": 1, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        self.target.<UNK>()\n        self.target.change_attack(1 - self.target.calculate_attack())\n"}, {"choice_history": [121, 200, "Humility", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>"], "score_history": [-2.86102294921875e-05, -0.000244140625, -1.6689286894688848e-06, -3.218649908376392e-06, -5.9963203966617584e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0002002716064453125, -8.96453857421875e-05, -8.0108642578125e-05, -6.73532485961914e-05, -1.1920928244535389e-07, -3.8146868064359296e-06, -6.556510470545618e-06, -0.015619397163391113, 0.0, -0.0002288818359375, 0.0, -0.0008487701416015625, -3.814697265625e-06, 0.0, -3.981590270996094e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -9.72747802734375e-05, -1.5974044799804688e-05, 0.0, -3.9055099487304688, -5.91278076171875e-05, -1.6323728561401367, -2.6702880859375e-05, -3.814697265625e-06, -0.000148773193359375, -1.71661376953125e-05, -0.02527642250061035, -1.9073486328125e-05, -0.052631378173828125, -0.000247955322265625, -0.0006008148193359375, -1.9073486328125e-05, -0.49327754974365234, -1.9073486328125e-05, -0.026319026947021484, 0.0, -0.002047300338745117, 0.0, -5.7220458984375e-06, -0.002124786376953125, -1.9073486328125e-06, -0.0010814666748046875, -0.000148773193359375, -0.12233924865722656, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.003031015396118164, 0.0, -3.08750823023729e-05, 0.0, -9.5367431640625e-05, -5.7220458984375e-06, -0.026874542236328125, -5.7220458984375e-06, -0.29922008514404297, -5.7220458984375e-06, -0.5757201313972473, 0.0, -1.9073486328125e-06, -0.1387624740600586, 0.0, -0.15802001953125, -0.07921051979064941, 0.0, -0.853337287902832, -6.103515625e-05, -0.09726238250732422, 0.0, -0.529503345489502, 0.0, -0.03742169961333275, 0.0, -1.9073486328125e-06, -0.035010337829589844, -5.7220458984375e-06, -0.05198478698730469, 0.0], "score": -9.167593893458154, "model_output": {"hole4": "player", "hole0": "Humility", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "append", "hole2": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"hole1": "append", "hole2": [{"_type": "Name", "id": "<UNK>"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Humility", "hole1": 1, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.append(player.minions)\n        targets.append(<UNK>)\n"}, {"choice_history": [121, 200, "Humility", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 145, 250, 41, "die", "<EOS>", 320, 110, 130, 168, 37, 249, 41, "<UNK>", "<EOS>", 145, 250, 17, 156, 41, "health", "<EOS>", "summon", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 103], "score_history": [-2.86102294921875e-05, -0.000244140625, -1.6689286894688848e-06, -3.218649908376392e-06, -5.9963203966617584e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0002002716064453125, -8.96453857421875e-05, -8.0108642578125e-05, -6.73532485961914e-05, -1.1920928244535389e-07, -3.8146868064359296e-06, -6.556510470545618e-06, -0.015619397163391113, 0.0, -0.0002288818359375, 0.0, -0.0008487701416015625, -3.814697265625e-06, 0.0, -3.981590270996094e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -9.72747802734375e-05, -1.5974044799804688e-05, 0.0, -3.9055099487304688, -5.91278076171875e-05, -0.2205486297607422, -3.4332275390625e-05, -9.72747802734375e-05, -0.1473069190979004, 0.0, -9.1552734375e-05, -0.06989192962646484, -0.037593841552734375, -1.9073486328125e-06, -0.05416679382324219, -2.47955322265625e-05, -0.15639305114746094, -0.11184155941009521, 0.0, -0.032489776611328125, -4.9591064453125e-05, -0.9061670303344727, -4.00543212890625e-05, -0.008681297302246094, -0.8087618350982666, 0.0, -0.4540196359157562, -1.9073486328125e-06, -0.6408481597900391, -0.7463893890380859, -0.3752603530883789, -0.0975809097290039, -0.020026206970214844, -7.2479248046875e-05, -3.0517578125e-05, -1.1009855270385742], "score": -9.912641973221518, "model_output": {"hole4": "player", "hole0": "Humility", "hole6": [{"_type": "Template19"}, {"hole1": "die", "hole2": [{"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "<UNK>", "_type": "Template43", "hole0": {"_type": "Template52"}}, "_type": "Expr"}, {"hole1": "summon", "hole2": [{"hole1": [{"_type": "Template60"}], "_type": "Template30", "hole0": "ManaChange"}], "_type": "Template44", "hole0": {"attr": "health", "value": {"_type": "Template52"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Humility", "hole1": 1, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        self.target.<UNK>()\n        self.target.health.summon(Buff(ManaChange(1)))\n"}, {"choice_history": [121, 200, "Humility", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 25, 186, "targets", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "Attack", "<EOS>", 320, 74, 187, "Null", "<EOS>"], "score_history": [-2.86102294921875e-05, -0.000244140625, -1.6689286894688848e-06, -3.218649908376392e-06, -5.9963203966617584e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0002002716064453125, -8.96453857421875e-05, -8.0108642578125e-05, -6.73532485961914e-05, -1.1920928244535389e-07, -3.8146868064359296e-06, -6.556510470545618e-06, -0.015619397163391113, 0.0, -0.0002288818359375, 0.0, -0.0008487701416015625, -3.814697265625e-06, 0.0, -3.981590270996094e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -9.72747802734375e-05, -1.5974044799804688e-05, 0.0, -3.9055099487304688, -5.91278076171875e-05, -1.6323728561401367, -2.6702880859375e-05, -3.814697265625e-06, -0.000148773193359375, -1.71661376953125e-05, -0.02527642250061035, -1.9073486328125e-05, -0.052631378173828125, -0.000247955322265625, -0.0006008148193359375, -1.9073486328125e-05, -0.49327754974365234, -1.9073486328125e-05, -0.026319026947021484, 0.0, -0.002047300338745117, 0.0, -5.7220458984375e-06, -0.002124786376953125, -1.9073486328125e-06, -0.0010814666748046875, -0.000148773193359375, -0.12233924865722656, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.003031015396118164, 0.0, -3.08750823023729e-05, 0.0, -9.5367431640625e-05, -5.7220458984375e-06, -0.026874542236328125, -5.7220458984375e-06, -0.29922008514404297, -5.7220458984375e-06, -0.8426182866096497, 0.0, -1.33514404296875e-05, -0.002948760986328125, 0.0, -0.012196540832519531, -0.00025641918182373047, 0.0, -0.32808494567871094, -1.9073486328125e-05, 0.0, -1.9073486328125e-06, -0.0014014244079589844, 0.0, -0.030771255493164062, -9.1552734375e-05, -0.006299257278442383, 0.0, -0.0014362335205078125, -0.0135955810546875, -3.814697265625e-06, -0.15295028686523438, -2.09808349609375e-05, -0.0023299253080040216, -1.9073486328125e-06, -1.0028148889541626, 0.0, -2.288818359375e-05, -1.0343647003173828, -0.0001373291015625, -0.010166645050048828, 0.0], "score": -10.053838293164056, "model_output": {"hole4": "player", "hole0": "Humility", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "extend", "hole2": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}, {"body": [{"hole1": "Attack", "hole2": [{"value": "Null", "_type": "NameConstant"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"_type": "Name", "id": "targets"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "Humility", "hole1": 1, "hole2": "PALADIN", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(player.minions)\n        for minion in targets:\n            minion.Attack(Null)\n"}], "index": 54}
{"beams": [{"choice_history": [121, 200, "<UNK>", "Mark", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "set_health_to", "<EOS>", "1", "<EOS>"], "score_history": [-0.05270862579345703, -0.00312042236328125, -0.001801469479687512, -0.0001629458274692297, 0.0, -1.7978018149733543e-05, -1.1444091796875e-05, -2.872943878173828e-05, -9.5367431640625e-05, -0.000171661376953125, -0.0001239776611328125, -0.0008007189026102424, -0.00018310546875, -0.0003077983856201172, -1.9073486328125e-06, -0.0023972264025360346, -3.814697265625e-06, -0.021897315979003906, 0.0, -0.0003110170364379883, 0.0, -0.0012187957763671875, -5.7220458984375e-06, 0.0, -5.757808321504854e-05, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.013757705688476562, -0.0005741119384765625, -0.35489368438720703, -0.000293731689453125, -2.09808349609375e-05, -7.62939453125e-06, -0.0021076202392578125, -0.03327476978302002, -3.814697265625e-06, -0.000236132851568982, 0.0], "score": -0.49067791175548336, "model_output": {"hole4": "player", "hole0": "<UNK>Mark", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "set_health_to", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "<UNK> Mark", "hole1": 0, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n"}, {"choice_history": [121, 200, "<UNK>", "Mark", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 173, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 9, 320, 113, 333, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "target", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "1", "<EOS>", 110], "score_history": [-0.05270862579345703, -0.00312042236328125, -0.001801469479687512, -0.0001629458274692297, 0.0, -1.7978018149733543e-05, -1.1444091796875e-05, -2.872943878173828e-05, -9.5367431640625e-05, -0.000171661376953125, -0.0001239776611328125, -0.0008007189026102424, -0.00018310546875, -0.0003077983856201172, -1.9073486328125e-06, -0.0023972264025360346, -3.814697265625e-06, -0.021897315979003906, 0.0, -0.0003110170364379883, 0.0, -0.0012187957763671875, -5.7220458984375e-06, 0.0, -5.757808321504854e-05, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.013757705688476562, -0.0005741119384765625, -1.4164485931396484, -0.24948978424072266, -0.0005092620849609375, -3.62396240234375e-05, -0.0002231597900390625, 0.0, -0.003949165344238281, -0.18791842460632324, -3.814697265625e-06, -1.71661376953125e-05, -0.12217044830322266, 0.0, -9.34600830078125e-05, -0.5255546569824219, -5.91278076171875e-05, -1.1444091796875e-05, -3.814697265625e-06, -7.62939453125e-05, 0.0, -0.06941664218902588, -1.71661376953125e-05, -0.0001735687255859375, -0.0001049041748046875, -0.002826690673828125, 0.0, -0.3756237030029297, 0.0, -0.4049569368362427, 0.0, -0.01347970962524414, 0.0, -2.47955322265625e-05, -0.0002231597900390625, 0.0, -0.021495819091796875, -3.814697265625e-06, -0.00069427490234375, -1.9073486328125e-05, -0.00252532958984375, -1.1444091796875e-05, -0.009386181831359863, 0.0, -0.47429895401000977, 0.0, -0.003353118896484375, -0.02916717529296875, -2.86102294921875e-05, -1.33514404296875e-05, -0.015089988708496094, 0.0, -0.0011444902047514915, 0.0, -0.07591629028320312], "score": -4.1063995968979725, "model_output": {"hole4": "player", "hole0": "<UNK>Mark", "hole6": [{"_type": "Template19"}, {"test": {"ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare", "left": {"attr": "mana", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "body": [{"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "target"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "<UNK> Mark", "hole1": 0, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana > 0:\n            targets = game.random_choice(targets)\n            target.heal(player.effective_heal_power(1), self)\n"}, {"choice_history": [121, 200, "<UNK>", "Mark", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 173, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 9, 320, 113, 333, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 40, "find_enemy_minion_battlecry_target", "<EOS>", 321, 65, 156, 50, "game", "<EOS>", 70, 180, 4, 229, "x", "<EOS>", 62, 126, 155, 320, 73, 186, "target", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>"], "score_history": [-0.05270862579345703, -0.00312042236328125, -0.001801469479687512, -0.0001629458274692297, 0.0, -1.7978018149733543e-05, -1.1444091796875e-05, -2.872943878173828e-05, -9.5367431640625e-05, -0.000171661376953125, -0.0001239776611328125, -0.0008007189026102424, -0.00018310546875, -0.0003077983856201172, -1.9073486328125e-06, -0.0023972264025360346, -3.814697265625e-06, -0.021897315979003906, 0.0, -0.0003110170364379883, 0.0, -0.0012187957763671875, -5.7220458984375e-06, 0.0, -5.757808321504854e-05, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.013757705688476562, -0.0005741119384765625, -1.4164485931396484, -0.24948978424072266, -0.0005092620849609375, -3.62396240234375e-05, -0.0002231597900390625, 0.0, -0.003949165344238281, -0.18791842460632324, -3.814697265625e-06, -1.71661376953125e-05, -0.12217044830322266, 0.0, -9.34600830078125e-05, -0.5255546569824219, -5.91278076171875e-05, -1.1444091796875e-05, -3.814697265625e-06, -7.62939453125e-05, 0.0, -0.06941664218902588, -1.71661376953125e-05, -0.0001735687255859375, -0.0001049041748046875, -0.002826690673828125, 0.0, -1.1765327453613281, -0.14597272872924805, -1.33514404296875e-05, -0.001064300537109375, -0.0003185272216796875, -1.71661376953125e-05, -0.0032949447631835938, -0.00630152178928256, -1.1920928244535389e-07, -0.002655029296875, -2.288818359375e-05, -9.72747802734375e-05, -8.96453857421875e-05, -0.003950238227844238, -7.62939453125e-06, -0.06056022644042969, -0.15431880950927734, -9.5367431640625e-06, 0.0, -0.0002117156982421875, 0.0, -0.017012596130371094, -1.9073486328125e-06, -0.001621246337890625, -0.0001049041748046875, -5.7220458984375e-06, -1.9073486328125e-06, -0.015729904174804688, -1.9073486328125e-06, -0.006131529808044434, 0.0, -0.007220864295959473, 0.0, -1.33514404296875e-05, -8.0108642578125e-05, -1.9073486328125e-06, -0.04400444030761719, -3.814697265625e-06], "score": -4.326317885654127, "model_output": {"hole4": "player", "hole0": "<UNK>Mark", "hole6": [{"_type": "Template19"}, {"test": {"ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare", "left": {"attr": "mana", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "body": [{"value": {"func": {"attr": "find_enemy_minion_battlecry_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"body": {"_type": "Template79"}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "x"}}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"value": {"func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Call", "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "target"}], "_type": "Assign"}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "<UNK> Mark", "hole1": 0, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana > 0:\n            targets = (hearthbreaker.targeting.\n                find_enemy_minion_battlecry_target(player.game, lambda x: True)\n                )\n            target = game.random_choice(targets)\n"}, {"choice_history": [121, 200, "<UNK>", "Mark", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 173, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 9, 320, 113, 332, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "2", "<EOS>"], "score_history": [-0.05270862579345703, -0.00312042236328125, -0.001801469479687512, -0.0001629458274692297, 0.0, -1.7978018149733543e-05, -1.1444091796875e-05, -2.872943878173828e-05, -9.5367431640625e-05, -0.000171661376953125, -0.0001239776611328125, -0.0008007189026102424, -0.00018310546875, -0.0003077983856201172, -1.9073486328125e-06, -0.0023972264025360346, -3.814697265625e-06, -0.021897315979003906, 0.0, -0.0003110170364379883, 0.0, -0.0012187957763671875, -5.7220458984375e-06, 0.0, -5.757808321504854e-05, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.013757705688476562, -0.0005741119384765625, -1.4164485931396484, -0.24948978424072266, -0.0005092620849609375, -3.62396240234375e-05, -0.0002231597900390625, 0.0, -0.003949165344238281, -0.18791842460632324, -3.814697265625e-06, -1.71661376953125e-05, -0.12217044830322266, 0.0, -9.34600830078125e-05, -0.9655923843383789, -0.3719444274902344, -1.9073486328125e-06, -0.0001430511474609375, -7.62939453125e-06, -0.012420654296875, -0.7135848999023438, -7.62939453125e-06, -0.3165029287338257, 0.0], "score": -4.46090457797618, "model_output": {"hole4": "player", "hole0": "<UNK>Mark", "hole6": [{"_type": "Template19"}, {"test": {"ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare", "left": {"attr": "mana", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "body": [{"value": {"hole1": "change_attack", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "<UNK> Mark", "hole1": 0, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana > 0:\n            self.target.change_attack(2)\n"}, {"choice_history": [121, 200, "<UNK>", "Mark", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "score_history": [-0.05270862579345703, -0.00312042236328125, -0.001801469479687512, -0.0001629458274692297, 0.0, -1.7978018149733543e-05, -1.1444091796875e-05, -2.872943878173828e-05, -9.5367431640625e-05, -0.000171661376953125, -0.0001239776611328125, -0.0008007189026102424, -0.00018310546875, -0.0003077983856201172, -1.9073486328125e-06, -0.0023972264025360346, -3.814697265625e-06, -0.021897315979003906, 0.0, -0.0003110170364379883, 0.0, -0.0012187957763671875, -5.7220458984375e-06, 0.0, -5.757808321504854e-05, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.013757705688476562, -0.0005741119384765625, -2.909243583679199, -0.00049591064453125, -0.002361297607421875, -0.02034008502960205, 0.0, -0.00514984130859375, -0.15795135498046875, -0.0016956329345703125, -0.001308441162109375, -1.9073486328125e-06, -8.7738037109375e-05, -0.02190553955733776, -3.576278118089249e-07, -1.52587890625e-05, -0.0049724578857421875, -0.000492095947265625, -1.3214797973632812, -0.009265899658203125, 0.0, -0.008286476135253906], "score": -4.5648932235744155, "model_output": {"hole4": "player", "hole0": "<UNK>Mark", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"func": {"attr": "effective_heal_power", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Call", "args": [{"hole1": "calculate_max_health", "_type": "Template43", "hole0": {"_type": "Template52"}}]}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "<UNK> Mark", "hole1": 0, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n"}, {"choice_history": [121, 200, "<UNK>", "Mark", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 9, 320, 113, 332, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "4", "<EOS>", 332, 130, 168, 34, 243, 41, "increase_health", "<EOS>", "4", "<EOS>"], "score_history": [-0.05270862579345703, -0.00312042236328125, -0.001801469479687512, -0.0001629458274692297, 0.0, -1.7978018149733543e-05, -1.1444091796875e-05, -2.872943878173828e-05, -9.5367431640625e-05, -0.000171661376953125, -0.0001239776611328125, -0.0008007189026102424, -0.00018310546875, -0.0003077983856201172, -1.9073486328125e-06, -0.0023972264025360346, -3.814697265625e-06, -0.021897315979003906, 0.0, -0.0003110170364379883, 0.0, -0.0012187957763671875, -5.7220458984375e-06, 0.0, -5.757808321504854e-05, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.013757705688476562, -0.0005741119384765625, -1.4164485931396484, -1.5945816040039062, -0.011223793029785156, -0.003101348876953125, -0.0002460479736328125, 0.0, -0.00048065185546875, -0.10758232325315475, -7.62939453125e-06, -3.814697265625e-05, -0.052700042724609375, 0.0, -0.000110626220703125, -0.0001678466796875, -0.008260726928710938, -1.9073486328125e-06, -2.09808349609375e-05, -5.7220458984375e-06, -5.53131103515625e-05, -0.25830841064453125, -1.52587890625e-05, -0.09656369686126709, -1.9073486328125e-06, -0.0001697540283203125, -0.08070945739746094, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, -0.7415151596069336, 0.0, -0.15620703995227814, 0.0], "score": -4.628392147129489, "model_output": {"hole4": "player", "hole0": "<UNK>Mark", "hole6": [{"_type": "Template19"}, {"orelse": [{"value": {"hole1": "increase_health", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "test": {"ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare", "left": {"attr": "mana", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "body": [{"value": {"hole1": "change_attack", "hole2": 4, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "<UNK> Mark", "hole1": 0, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana > 0:\n            self.target.change_attack(4)\n        else:\n            self.target.increase_health(4)\n"}, {"choice_history": [121, 200, "<UNK>", "Mark", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 173, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 9, 320, 113, 332, 130, 168, 34, 243, 41, "set_health_to", "<EOS>", "2", "<EOS>"], "score_history": [-0.05270862579345703, -0.00312042236328125, -0.001801469479687512, -0.0001629458274692297, 0.0, -1.7978018149733543e-05, -1.1444091796875e-05, -2.872943878173828e-05, -9.5367431640625e-05, -0.000171661376953125, -0.0001239776611328125, -0.0008007189026102424, -0.00018310546875, -0.0003077983856201172, -1.9073486328125e-06, -0.0023972264025360346, -3.814697265625e-06, -0.021897315979003906, 0.0, -0.0003110170364379883, 0.0, -0.0012187957763671875, -5.7220458984375e-06, 0.0, -5.757808321504854e-05, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.013757705688476562, -0.0005741119384765625, -1.4164485931396484, -0.24948978424072266, -0.0005092620849609375, -3.62396240234375e-05, -0.0002231597900390625, 0.0, -0.003949165344238281, -0.18791842460632324, -3.814697265625e-06, -1.71661376953125e-05, -0.12217044830322266, 0.0, -9.34600830078125e-05, -0.9655923843383789, -0.3719444274902344, -1.9073486328125e-06, -0.0001430511474609375, -7.62939453125e-06, -0.012420654296875, -0.7882366180419922, -7.62939453125e-06, -0.588720440864563, 0.0], "score": -4.807773808246566, "model_output": {"hole4": "player", "hole0": "<UNK>Mark", "hole6": [{"_type": "Template19"}, {"test": {"ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare", "left": {"attr": "mana", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "body": [{"value": {"hole1": "set_health_to", "hole2": 2, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "<UNK> Mark", "hole1": 0, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana > 0:\n            self.target.set_health_to(2)\n"}, {"choice_history": [121, 200, "<UNK>", "Mark", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "1", "<EOS>", 110], "score_history": [-0.05270862579345703, -0.00312042236328125, -0.001801469479687512, -0.0001629458274692297, 0.0, -1.7978018149733543e-05, -1.1444091796875e-05, -2.872943878173828e-05, -9.5367431640625e-05, -0.000171661376953125, -0.0001239776611328125, -0.0008007189026102424, -0.00018310546875, -0.0003077983856201172, -1.9073486328125e-06, -0.0023972264025360346, -3.814697265625e-06, -0.021897315979003906, 0.0, -0.0003110170364379883, 0.0, -0.0012187957763671875, -5.7220458984375e-06, 0.0, -5.757808321504854e-05, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.013757705688476562, -0.0005741119384765625, -2.909243583679199, -0.00049591064453125, -0.002361297607421875, -0.02034008502960205, 0.0, -0.00514984130859375, -1.9659423828125, -9.5367431640625e-06, -0.000213623046875, -0.005070686340332031, -3.814697265625e-06, -0.00017141408170573413, -1.9073486328125e-06, -0.0013484954833984375], "score": -5.01019212670144, "model_output": {"hole4": "player", "hole0": "<UNK>Mark", "hole6": [{"_type": "Template19"}, {"hole1": "heal", "hole2": [{"hole1": "effective_heal_power", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "<UNK> Mark", "hole1": 0, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(1), self)\n"}, {"choice_history": [121, 200, "<UNK>", "Mark", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 173, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 9, 320, 113, 333, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>"], "score_history": [-0.05270862579345703, -0.00312042236328125, -0.001801469479687512, -0.0001629458274692297, 0.0, -1.7978018149733543e-05, -1.1444091796875e-05, -2.872943878173828e-05, -9.5367431640625e-05, -0.000171661376953125, -0.0001239776611328125, -0.0008007189026102424, -0.00018310546875, -0.0003077983856201172, -1.9073486328125e-06, -0.0023972264025360346, -3.814697265625e-06, -0.021897315979003906, 0.0, -0.0003110170364379883, 0.0, -0.0012187957763671875, -5.7220458984375e-06, 0.0, -5.757808321504854e-05, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.013757705688476562, -0.0005741119384765625, -1.4164485931396484, -0.24948978424072266, -0.0005092620849609375, -3.62396240234375e-05, -0.0002231597900390625, 0.0, -0.003949165344238281, -0.18791842460632324, -3.814697265625e-06, -1.71661376953125e-05, -0.12217044830322266, 0.0, -9.34600830078125e-05, -0.5255546569824219, -5.91278076171875e-05, -1.1444091796875e-05, -3.814697265625e-06, -7.62939453125e-05, 0.0, -0.06941664218902588, -1.71661376953125e-05, -0.0001735687255859375, -0.0001049041748046875, -0.002826690673828125, 0.0, -0.3756237030029297, 0.0, -1.1926614046096802, 0.0, -0.002552509307861328, 0.0, -3.24249267578125e-05, -0.029990196228027344, -1.9073486328125e-06, -0.04979515075683594, -1.9073486328125e-06, -0.011551856994628906, 0.0, -0.000240325927734375, 0.0, -0.018861889839172363, 0.0, -0.0001442356442566961, 0.0, -0.11404037475585938, -1.9073486328125e-06, -0.0018024444580078125, -1.9073486328125e-06, -0.10454368591308594, -1.9073486328125e-06, -0.07310998439788818, 0.0, -1.9073486328125e-06, -0.040436744689941406, 0.0, -0.007216453552246094, -0.3494340181350708, 0.0], "score": -5.050992222586501, "model_output": {"hole4": "player", "hole0": "<UNK>Mark", "hole6": [{"_type": "Template19"}, {"test": {"ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare", "left": {"attr": "mana", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "body": [{"value": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign"}, {"hole1": "append", "hole2": [{"attr": "minions", "value": {"_type": "Template64"}, "_type": "Attribute"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "targets"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "<UNK> Mark", "hole1": 0, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana > 0:\n            targets = copy.copy(game.other_player.minions)\n            targets.append(player.minions)\n"}, {"choice_history": [121, 200, "<UNK>", "Mark", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "WARRIOR", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "set_health_to", "<EOS>", "1", "<EOS>"], "score_history": [-0.05270862579345703, -0.00312042236328125, -0.001801469479687512, -0.0001629458274692297, 0.0, -1.7978018149733543e-05, -1.1444091796875e-05, -2.872943878173828e-05, -9.5367431640625e-05, -0.000171661376953125, -0.0001239776611328125, -0.0008007189026102424, -0.00018310546875, -0.0003077983856201172, -1.9073486328125e-06, -0.0023972264025360346, -3.814697265625e-06, -4.772749900817871, 0.0, -0.0009807348251342773, 0.0, -0.00164794921875, -5.7220458984375e-06, 0.0, -5.960464113741182e-05, 0.0, -3.24249267578125e-05, -1.52587890625e-05, -7.62939453125e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.010654449462890625, -0.0007419586181640625, -0.3184833526611328, -0.0002841949462890625, -2.09808349609375e-05, -7.62939453125e-06, -0.0021991729736328125, -0.033255696296691895, -3.814697265625e-06, -0.00023303441412281245, 0.0], "score": -5.203345497178816, "model_output": {"hole4": "player", "hole0": "<UNK>Mark", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "set_health_to", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "<UNK> Mark", "hole1": 0, "hole2": "WARRIOR", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n"}, {"choice_history": [121, 200, "<UNK>", "Mark", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "change_temp_attack", "<EOS>", "1", "<EOS>"], "score_history": [-0.05270862579345703, -0.00312042236328125, -0.001801469479687512, -0.0001629458274692297, 0.0, -1.7978018149733543e-05, -1.1444091796875e-05, -2.872943878173828e-05, -9.5367431640625e-05, -0.000171661376953125, -0.0001239776611328125, -0.0008007189026102424, -0.00018310546875, -0.0003077983856201172, -1.9073486328125e-06, -0.0023972264025360346, -3.814697265625e-06, -0.021897315979003906, 0.0, -0.0003110170364379883, 0.0, -0.0012187957763671875, -5.7220458984375e-06, 0.0, -5.757808321504854e-05, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.013757705688476562, -0.0005741119384765625, -0.35489368438720703, -0.000293731689453125, -2.09808349609375e-05, -7.62939453125e-06, -0.0021076202392578125, -4.767640590667725, -2.09808349609375e-05, -0.0708814486861229, 0.0], "score": -5.295706214612437, "model_output": {"hole4": "player", "hole0": "<UNK>Mark", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_temp_attack", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "<UNK> Mark", "hole1": 0, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_temp_attack(1)\n"}, {"choice_history": [121, 200, "<UNK>", "Mark", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "set_health_to", "<EOS>", "1", "<EOS>"], "score_history": [-0.05270862579345703, -0.00312042236328125, -0.001801469479687512, -0.0001629458274692297, 0.0, -1.7978018149733543e-05, -1.1444091796875e-05, -2.872943878173828e-05, -9.5367431640625e-05, -0.000171661376953125, -0.0001239776611328125, -0.0008007189026102424, -0.00018310546875, -0.0003077983856201172, -1.9073486328125e-06, -0.0023972264025360346, -3.814697265625e-06, -4.895469665527344, 0.0, -0.0004540681838989258, 0.0, -0.00182342529296875, -5.7220458984375e-06, 0.0, -6.330013275146484e-05, 0.0, -3.24249267578125e-05, -1.33514404296875e-05, -7.62939453125e-06, -7.62939453125e-06, -1.52587890625e-05, -0.0104522705078125, -0.0005950927734375, -0.3470458984375, -0.0002460479736328125, -2.09808349609375e-05, -7.62939453125e-06, -0.0018939971923828125, -0.03218281269073486, -3.814697265625e-06, -0.00024054269306361675, 0.0], "score": -5.3525187550112605, "model_output": {"hole4": "player", "hole0": "<UNK>Mark", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "set_health_to", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "<UNK> Mark", "hole1": 0, "hole2": "PRIEST", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n"}, {"choice_history": [121, 200, "<UNK>", "Mark", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 173, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 9, 320, 113, 332, 130, 168, 34, 243, 41, "set_health_to", "<EOS>", "3", "<EOS>"], "score_history": [-0.05270862579345703, -0.00312042236328125, -0.001801469479687512, -0.0001629458274692297, 0.0, -1.7978018149733543e-05, -1.1444091796875e-05, -2.872943878173828e-05, -9.5367431640625e-05, -0.000171661376953125, -0.0001239776611328125, -0.0008007189026102424, -0.00018310546875, -0.0003077983856201172, -1.9073486328125e-06, -0.0023972264025360346, -3.814697265625e-06, -0.021897315979003906, 0.0, -0.0003110170364379883, 0.0, -0.0012187957763671875, -5.7220458984375e-06, 0.0, -5.757808321504854e-05, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.013757705688476562, -0.0005741119384765625, -1.4164485931396484, -0.24948978424072266, -0.0005092620849609375, -3.62396240234375e-05, -0.0002231597900390625, 0.0, -0.003949165344238281, -0.18791842460632324, -3.814697265625e-06, -1.71661376953125e-05, -0.12217044830322266, 0.0, -9.34600830078125e-05, -0.9655923843383789, -0.3719444274902344, -1.9073486328125e-06, -0.0001430511474609375, -7.62939453125e-06, -0.012420654296875, -0.7882366180419922, -7.62939453125e-06, -1.168681263923645, 0.0], "score": -5.387734631305648, "model_output": {"hole4": "player", "hole0": "<UNK>Mark", "hole6": [{"_type": "Template19"}, {"test": {"ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare", "left": {"attr": "mana", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "body": [{"value": {"hole1": "set_health_to", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "<UNK> Mark", "hole1": 0, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana > 0:\n            self.target.set_health_to(3)\n"}, {"choice_history": [121, 200, "<UNK>", "Mark", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "1", "<EOS>"], "score_history": [-0.05270862579345703, -0.00312042236328125, -0.001801469479687512, -0.0001629458274692297, 0.0, -1.7978018149733543e-05, -1.1444091796875e-05, -2.872943878173828e-05, -9.5367431640625e-05, -0.000171661376953125, -0.0001239776611328125, -0.0008007189026102424, -0.00018310546875, -0.0003077983856201172, -1.9073486328125e-06, -0.0023972264025360346, -3.814697265625e-06, -0.021897315979003906, 0.0, -0.0003110170364379883, 0.0, -0.0012187957763671875, -5.7220458984375e-06, 0.0, -5.757808321504854e-05, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.013757705688476562, -0.0005741119384765625, -0.35489368438720703, -0.000293731689453125, -2.09808349609375e-05, -7.62939453125e-06, -0.0021076202392578125, -5.075370788574219, -2.6702880859375e-05, -0.09815090894699097, 0.0], "score": -5.630711594825698, "model_output": {"hole4": "player", "hole0": "<UNK>Mark", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "change_attack", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "<UNK> Mark", "hole1": 0, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n"}, {"choice_history": [121, 200, "<UNK>", "Mark", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 34, 243, 41, "increase_health", "<EOS>", "1", "<EOS>"], "score_history": [-0.05270862579345703, -0.00312042236328125, -0.001801469479687512, -0.0001629458274692297, 0.0, -1.7978018149733543e-05, -1.1444091796875e-05, -2.872943878173828e-05, -9.5367431640625e-05, -0.000171661376953125, -0.0001239776611328125, -0.0008007189026102424, -0.00018310546875, -0.0003077983856201172, -1.9073486328125e-06, -0.0023972264025360346, -3.814697265625e-06, -0.021897315979003906, 0.0, -0.0003110170364379883, 0.0, -0.0012187957763671875, -5.7220458984375e-06, 0.0, -5.757808321504854e-05, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.013757705688476562, -0.0005741119384765625, -0.35489368438720703, -0.000293731689453125, -2.09808349609375e-05, -7.62939453125e-06, -0.0021076202392578125, -6.102694511413574, 0.0, -0.054515279829502106, 0.0], "score": -6.614372985666705, "model_output": {"hole4": "player", "hole0": "<UNK>Mark", "hole6": [{"_type": "Template19"}, {"value": {"hole1": "increase_health", "hole2": 1, "_type": "Template37", "hole0": {"_type": "Template52"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"_type": "Template39"}, "hole0": "<UNK> Mark", "hole1": 0, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n"}], "index": 55}
{"beams": [{"choice_history": [120, 185, 333, 129, 165, "Ironforge", "Rifleman", "<EOS>", 320, 100, 333, 136, 197, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "2", "<EOS>", 147], "score_history": [-0.23857688903808594, -0.0002307891845703125, -5.91278076171875e-05, -0.0016880035400390625, -1.52587890625e-05, -0.003830978646874428, -0.00010657125676516443, -1.1444026313256472e-05, -7.62939453125e-05, -0.0004024505615234375, -1.1444091796875e-05, -7.62939453125e-05, -3.4332275390625e-05, -0.00048113305820152164, -3.719319647643715e-05, -4.0531158447265625e-06, 0.0, -3.135204315185547e-05, -1.1920928244535389e-07, -0.00018155574798583984, -3.0517578125e-05, -0.0022335052490234375, 0.0, -0.00033783912658691406, 0.0, -0.00045013427734375, -5.7220458984375e-06, -0.000148773193359375, 0.0, -0.0019916296005249023, 0.0, -0.0024056434631347656, 0.0, -0.0025787353515625, -0.021042823791503906, -0.0016318259295076132, -0.0002415154449408874, -0.0001125335693359375, -0.001438140869140625, -0.00030994415283203125, -1.8477303456165828e-05, 0.0, -0.00330352783203125, -3.62396240234375e-05, 0.0, -0.0001430511474609375, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.608268737792969e-05, -0.00017404556274414062, -9.5367431640625e-06, -4.57763671875e-05, -0.0002651214599609375, -0.000766754150390625, -4.9591064453125e-05, -0.0016384124755859375, -7.62939453125e-06, -0.0011905431747436523, -0.000640869140625, -1.52587890625e-05, -0.0003147125244140625, -0.000102996826171875, -2.634490556374658e-05, -2.3841855067985307e-07, -1.3709079212276265e-05, -1.1920928244535389e-07, -3.814697265625e-05], "score": -0.289727010764139, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Ironforge Rifleman", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 3, "hole2": "ALL", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 2, "_type": "Template8", "hole0": 2}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "IronforgeRifleman"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}, {"choice_history": [121, 198, "Ironforge", "Rifleman", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "2", "<EOS>"], "score_history": [-1.5574121475219727, -3.0517578125e-05, -0.0020957787055522203, -0.0011917536612600088, -2.622604142743512e-06, -3.695418854476884e-06, -1.1682510375976562e-05, -3.314005516585894e-05, -0.000274658203125, -0.0010528564453125, -0.07658958435058594, -1.3470645171764772e-05, -2.3126602172851562e-05, -1.4662702596979216e-05, -1.9073486328125e-06, -2.3961029000929557e-05, 0.0, -0.000431060791015625, -7.62939453125e-06, -0.0028595919720828533, -0.0009614229202270508, -1.9073486328125e-05, -0.00348663330078125, -0.0007846355438232422, -2.1457672119140625e-06, 0.0, -0.00017547607421875, -3.814697265625e-06, -3.814697265625e-06, -0.0004138946533203125, -5.7220458984375e-06, -0.0001621246337890625, -5.7220458984375e-06, -8.392333984375e-05, -0.00019276142120361328, -9.5367431640625e-06, -0.0001201629638671875, -0.00032806396484375, -0.0010814666748046875, -2.6702880859375e-05, -0.0046024322509765625, -5.7220458984375e-06, -0.0007853507995605469, -0.0006103515625, -9.5367431640625e-06, -0.006886482238769531, -3.814697265625e-06, -4.172325134277344e-06, 0.0, -4.00543212890625e-05, -2.86102294921875e-05, -0.000152587890625, -4.768370445162873e-07, 0.0, -6.21078215772286e-05, 0.0], "score": -1.6631326451575887, "model_output": {"hole4": "player", "hole0": "IronforgeRifleman", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template60"}], "hole0": "Ironforge Rifleman", "hole7": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 3, "hole2": "COMMON", "_type": "Template6", "hole3": "Damage", "hole5": "CharacterSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Ironforge", "Rifleman", "<EOS>", 320, 100, 333, 136, 197, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 320, 74, 187, "Null", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "2", "<EOS>", 147], "score_history": [-0.23857688903808594, -0.0002307891845703125, -5.91278076171875e-05, -0.0016880035400390625, -1.52587890625e-05, -0.003830978646874428, -0.00010657125676516443, -1.1444026313256472e-05, -7.62939453125e-05, -0.0004024505615234375, -1.1444091796875e-05, -7.62939453125e-05, -3.4332275390625e-05, -0.00048113305820152164, -3.719319647643715e-05, -4.0531158447265625e-06, 0.0, -3.135204315185547e-05, -1.1920928244535389e-07, -0.00018155574798583984, -3.0517578125e-05, -0.0022335052490234375, 0.0, -0.00033783912658691406, 0.0, -0.00045013427734375, -5.7220458984375e-06, -0.000148773193359375, 0.0, -0.0019916296005249023, 0.0, -0.0024056434631347656, 0.0, -0.0025787353515625, -5.349755764007568, -0.005368082318454981, -0.0006034326506778598, -0.000514984130859375, -0.001720428466796875, -0.0007371902465820312, -2.467623562552035e-05, 0.0, -0.0002231597900390625, -0.10872840881347656, -7.62939453125e-06, -0.0005984306335449219, -5.7220458984375e-06, -0.001201629638671875, -5.7220458984375e-06, 0.0, -0.00170135498046875, -8.7738037109375e-05, -0.0030765533447265625, -1.9073486328125e-06, -0.0011850595474243164, -0.0004731416702270508, -7.62939453125e-06, -0.00035858154296875, -0.000110626220703125, -7.510157047363464e-06, -1.1920922133867862e-06, -1.2397772479744162e-05, -2.3841855067985307e-07, -2.288818359375e-05], "score": -5.732579862494468, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole3": [{"value": "Null", "_type": "NameConstant"}]}, "hole0": "Ironforge Rifleman", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 3, "hole2": "ALL", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 2, "_type": "Template8", "hole0": 2}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "IronforgeRifleman"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(Null, picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}, {"choice_history": [120, 185, 333, 129, 165, "<UNK>", "Rifleman", "<EOS>", 320, 100, 333, 136, 197, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "2", "<EOS>", 147], "score_history": [-0.23857688903808594, -0.0002307891845703125, -5.91278076171875e-05, -0.0016880035400390625, -1.52587890625e-05, -5.568737506866455, -0.00010657125676516443, -1.1444026313256472e-05, -7.62939453125e-05, -0.0004024505615234375, -1.1444091796875e-05, -7.62939453125e-05, -3.4332275390625e-05, -0.00048113305820152164, -3.719319647643715e-05, -4.0531158447265625e-06, 0.0, -3.135204315185547e-05, -1.1920928244535389e-07, -0.00018155574798583984, -3.0517578125e-05, -0.0022335052490234375, 0.0, -0.00033783912658691406, 0.0, -0.00045013427734375, -5.7220458984375e-06, -0.000148773193359375, 0.0, -0.0019916296005249023, 0.0, -0.0024056434631347656, 0.0, -0.0025787353515625, -0.021042823791503906, -0.0016318259295076132, -0.0002415154449408874, -0.0001125335693359375, -0.001438140869140625, -0.00030994415283203125, -1.8477303456165828e-05, 0.0, -0.00330352783203125, -3.62396240234375e-05, 0.0, -0.0001430511474609375, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.608268737792969e-05, -0.00017404556274414062, -9.5367431640625e-06, -4.57763671875e-05, -0.0002651214599609375, -0.000766754150390625, -4.9591064453125e-05, -0.0016384124755859375, -7.62939453125e-06, -0.0011905431747436523, -0.000640869140625, -1.52587890625e-05, -0.0003147125244140625, -0.000102996826171875, -2.634490556374658e-05, -2.3841855067985307e-07, -1.3709079212276265e-05, -1.1920928244535389e-07, -3.814697265625e-05], "score": -5.85463353898372, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Ironforge Rifleman", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 3, "hole2": "ALL", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 2, "_type": "Template8", "hole0": 2}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "<UNK>Rifleman"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class <UNK>Rifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Ironforge", "Rifleman", "<EOS>", 320, 100, 333, 136, 197, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 150, 302, "2", "<EOS>", "2", "<EOS>", 147], "score_history": [-0.23857688903808594, -0.0002307891845703125, -5.91278076171875e-05, -0.0016880035400390625, -1.52587890625e-05, -0.003830978646874428, -0.00010657125676516443, -1.1444026313256472e-05, -7.62939453125e-05, -0.0004024505615234375, -1.1444091796875e-05, -7.62939453125e-05, -3.4332275390625e-05, -0.00048113305820152164, -3.719319647643715e-05, -4.0531158447265625e-06, 0.0, -3.135204315185547e-05, -1.1920928244535389e-07, -0.00018155574798583984, -3.0517578125e-05, -0.0022335052490234375, 0.0, -0.00033783912658691406, 0.0, -0.00045013427734375, -5.7220458984375e-06, -0.000148773193359375, 0.0, -0.0019916296005249023, 0.0, -0.0024056434631347656, 0.0, -0.0025787353515625, -0.021042823791503906, -0.0016318259295076132, -0.0002415154449408874, -0.0001125335693359375, -0.001438140869140625, -0.00030994415283203125, -1.8477303456165828e-05, 0.0, -6.308913230895996, -8.96453857421875e-05, 0.0, -0.0020694732666015625, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -0.00011622905731201172, -0.0005000829696655273, -1.1444091796875e-05, -0.00048065185546875, -0.0002460479736328125, -4.434487345861271e-05, -1.1920928244535389e-07, -3.123283022432588e-05, 0.0, -5.53131103515625e-05], "score": -6.593404211385845, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Ironforge Rifleman", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 3, "hole2": "ALL", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 2, "_type": "Template8", "hole0": 2}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "IronforgeRifleman"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}, {"choice_history": [121, 198, "Ironforge", "Rifleman", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "2", "<EOS>"], "score_history": [-1.5574121475219727, -3.0517578125e-05, -0.0020957787055522203, -0.0011917536612600088, -2.622604142743512e-06, -3.695418854476884e-06, -1.1682510375976562e-05, -3.314005516585894e-05, -0.000274658203125, -0.0010528564453125, -0.07658958435058594, -1.3470645171764772e-05, -2.3126602172851562e-05, -1.4662702596979216e-05, -1.9073486328125e-06, -2.3961029000929557e-05, 0.0, -0.000431060791015625, -7.62939453125e-06, -0.0028595919720828533, -0.0009614229202270508, -1.9073486328125e-05, -0.00348663330078125, -0.0007846355438232422, -2.1457672119140625e-06, 0.0, -0.00017547607421875, -3.814697265625e-06, -3.814697265625e-06, -0.0004138946533203125, -5.7220458984375e-06, -0.0001621246337890625, -5.7220458984375e-06, -8.392333984375e-05, -0.00019276142120361328, -9.5367431640625e-06, -0.0001201629638671875, -0.00032806396484375, -0.0010814666748046875, -2.6702880859375e-05, -0.0046024322509765625, -5.7220458984375e-06, -0.0007853507995605469, -0.0006103515625, -9.5367431640625e-06, -5.08207893371582, -5.7220458984375e-06, -0.0001220703125, 0.0, -0.000118255615234375, -0.0035552978515625, -0.0004596710205078125, -1.1920928244535389e-07, -1.1920928244535389e-07, -8.702180639375001e-05, -1.9073486328125e-06], "score": -6.742383456931506, "model_output": {"hole4": "player", "hole0": "IronforgeRifleman", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template60"}], "hole0": "Ironforge Rifleman", "hole7": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 3, "hole2": "COMMON", "_type": "Template6", "hole3": "Damage", "hole5": "CharacterSelector"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_weapon(self, player):\n        return Minion(2, 2)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Ironforge", "Rifleman", "<EOS>", 320, 100, 333, 136, 197, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 217, "damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "2", "<EOS>", 147], "score_history": [-0.23857688903808594, -0.0002307891845703125, -5.91278076171875e-05, -0.0016880035400390625, -1.52587890625e-05, -0.003830978646874428, -0.00010657125676516443, -1.1444026313256472e-05, -7.62939453125e-05, -0.0004024505615234375, -1.1444091796875e-05, -7.62939453125e-05, -3.4332275390625e-05, -0.00048113305820152164, -3.719319647643715e-05, -4.0531158447265625e-06, 0.0, -3.135204315185547e-05, -1.1920928244535389e-07, -0.00018155574798583984, -3.0517578125e-05, -0.0022335052490234375, 0.0, -0.00033783912658691406, 0.0, -0.00045013427734375, -5.7220458984375e-06, -0.000148773193359375, 0.0, -0.0019916296005249023, 0.0, -0.0024056434631347656, 0.0, -0.0025787353515625, -0.021042823791503906, -6.8336873054504395, -0.0010370700620114803, -0.02231597900390625, -0.0014286041259765625, -0.0011364220408722758, -2.5391302187927067e-05, 0.0, -0.0059261322021484375, -2.86102294921875e-05, -1.9073486328125e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -9.632110595703125e-05, -0.00011873245239257812, -9.5367431640625e-06, -4.38690185546875e-05, -0.000286102294921875, -0.0006866455078125, -5.340576171875e-05, -0.0016307830810546875, -7.62939453125e-06, -0.0013263225555419922, -0.000682830810546875, -1.52587890625e-05, -0.0003223419189453125, -0.000110626220703125, -2.372236667724792e-05, -2.3841855067985307e-07, -1.3351452253118623e-05, -1.1920928244535389e-07, -3.814697265625e-05], "score": -7.148227473079672, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "damage"}, "hole0": "Ironforge Rifleman", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 3, "hole2": "ALL", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 2, "_type": "Template8", "hole0": 2}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "IronforgeRifleman"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Ironforge", "Rifleman", "<EOS>", 320, 100, 333, 136, 197, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 329, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "2", "<EOS>", 147], "score_history": [-0.23857688903808594, -0.0002307891845703125, -5.91278076171875e-05, -0.0016880035400390625, -1.52587890625e-05, -0.003830978646874428, -0.00010657125676516443, -1.1444026313256472e-05, -7.62939453125e-05, -0.0004024505615234375, -1.1444091796875e-05, -7.62939453125e-05, -3.4332275390625e-05, -0.00048113305820152164, -3.719319647643715e-05, -4.0531158447265625e-06, 0.0, -3.135204315185547e-05, -1.1920928244535389e-07, -0.00018155574798583984, -3.0517578125e-05, -0.0022335052490234375, 0.0, -0.00033783912658691406, 0.0, -0.00045013427734375, -5.7220458984375e-06, -0.000148773193359375, 0.0, -0.0019916296005249023, 0.0, -0.0024056434631347656, 0.0, -0.0025787353515625, -0.021042823791503906, -0.0016318259295076132, -0.0002415154449408874, -0.0001125335693359375, -0.001438140869140625, -0.00030994415283203125, -1.8477303456165828e-05, 0.0, -6.849159240722656, -0.0007953643798828125, -5.7220458984375e-06, -0.00017750263214111328, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -0.00010275840759277344, -0.0003190040588378906, -7.62939453125e-06, -1.52587890625e-05, -7.05718994140625e-05, -0.002048492431640625, -6.4849853515625e-05, -0.001262664794921875, -5.7220458984375e-06, -0.0016020536422729492, -0.0006237030029296875, -1.33514404296875e-05, -1.1444091796875e-05, -2.09808349609375e-05, -0.0260162353515625, -1.33514404296875e-05, -0.00130462646484375, -7.62939453125e-06, -0.004940390586853027, -0.0012760162353515625, -3.4332275390625e-05, -0.0004425048828125, -0.000148773193359375, -2.3960777980391867e-05, -4.768370445162873e-07, -8.344658454007003e-06, -1.1920928244535389e-07, -3.814697265625e-05], "score": -7.171407618615248, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Ironforge Rifleman", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 3, "hole2": "ALL", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 2, "_type": "Template8", "hole0": 2}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "IronforgeRifleman"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Ironforge", "Rifleman", "<EOS>", 320, 100, 333, 136, 197, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 36, 247, "Random", "Picker", "<EOS>", "3", "<EOS>", 150, 302, "2", "<EOS>", "2", "<EOS>", 147], "score_history": [-0.23857688903808594, -0.0002307891845703125, -5.91278076171875e-05, -0.0016880035400390625, -1.52587890625e-05, -0.003830978646874428, -0.00010657125676516443, -1.1444026313256472e-05, -7.62939453125e-05, -0.0004024505615234375, -1.1444091796875e-05, -7.62939453125e-05, -3.4332275390625e-05, -0.00048113305820152164, -3.719319647643715e-05, -4.0531158447265625e-06, 0.0, -3.135204315185547e-05, -1.1920928244535389e-07, -0.00018155574798583984, -3.0517578125e-05, -0.0022335052490234375, 0.0, -0.00033783912658691406, 0.0, -0.00045013427734375, -5.7220458984375e-06, -0.000148773193359375, 0.0, -0.0019916296005249023, 0.0, -0.0024056434631347656, 0.0, -0.0025787353515625, -0.021042823791503906, -0.0016318259295076132, -0.0002415154449408874, -0.0001125335693359375, -0.001438140869140625, -0.00030994415283203125, -1.8477303456165828e-05, 0.0, -0.00330352783203125, -3.62396240234375e-05, 0.0, -0.0001430511474609375, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.608268737792969e-05, -0.00017404556274414062, -9.5367431640625e-06, -4.57763671875e-05, -0.0002651214599609375, -0.000766754150390625, -4.9591064453125e-05, -6.638031005859375, -0.0020084381103515625, -0.0425262451171875, -0.0017499923706054688, -8.20159912109375e-05, -0.1986444592475891, -8.58306884765625e-05, -0.002849578857421875, -0.00017547607421875, -1.0251946150674485e-05, -1.1920928244535389e-07, -3.492833275231533e-05, -2.3841855067985307e-07, -2.47955322265625e-05], "score": -7.171961405609139, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"hole1": 3, "_type": "Template41", "hole0": "RandomPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Ironforge Rifleman", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 3, "hole2": "ALL", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 2, "_type": "Template8", "hole0": 2}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "IronforgeRifleman"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=RandomPicker(3))))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Ironforge", "Rifleman", "<EOS>", 320, 100, 333, 136, 197, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "MURLOC", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "2", "<EOS>", 147], "score_history": [-0.23857688903808594, -0.0002307891845703125, -5.91278076171875e-05, -0.0016880035400390625, -1.52587890625e-05, -0.003830978646874428, -0.00010657125676516443, -1.1444026313256472e-05, -7.62939453125e-05, -0.0004024505615234375, -1.1444091796875e-05, -7.62939453125e-05, -3.4332275390625e-05, -0.00048113305820152164, -3.719319647643715e-05, -4.0531158447265625e-06, 0.0, -3.135204315185547e-05, -1.1920928244535389e-07, -0.00018155574798583984, -3.0517578125e-05, -0.0022335052490234375, 0.0, -0.00033783912658691406, 0.0, -0.00045013427734375, -5.7220458984375e-06, -0.000148773193359375, 0.0, -0.0019916296005249023, 0.0, -6.889085292816162, -3.24249267578125e-05, -0.007803916931152344, -0.013886451721191406, -0.0006964884232729673, -0.0018160195322707295, -0.0001850128173828125, -0.0010890960693359375, -0.001515507698059082, -1.8834924048860557e-05, 0.0, -0.003444671630859375, -1.9073486328125e-05, 0.0, -0.0001811981201171875, -3.814697265625e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.620189666748047e-05, -0.00021588802337646484, -1.1444091796875e-05, -4.38690185546875e-05, -0.0003204345703125, -0.0006122589111328125, -5.7220458984375e-05, -0.0013370513916015625, -9.5367431640625e-06, -0.0010851621627807617, -0.0006084442138671875, -1.71661376953125e-05, -0.00031280517578125, -0.0001049041748046875, -2.706014311115723e-05, -2.3841855067985307e-07, -1.3828288501827046e-05, -1.1920928244535389e-07, -3.814697265625e-05], "score": -7.175756339787725, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole4": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template46", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Ironforge Rifleman", "hole7": "MURLOC", "hole6": "<UNK>", "hole1": 3, "hole2": "ALL", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 2, "_type": "Template8", "hole0": 2}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "IronforgeRifleman"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, MURLOC=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}, {"choice_history": [121, 198, "Ironforge", "Rifleman", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "2", "<EOS>"], "score_history": [-1.5574121475219727, -3.0517578125e-05, -0.0020957787055522203, -0.0011917536612600088, -2.622604142743512e-06, -3.695418854476884e-06, -1.1682510375976562e-05, -3.314005516585894e-05, -0.000274658203125, -0.0010528564453125, -3.9772562980651855, -3.182848740834743e-05, -2.491474151611328e-05, -3.755092257051729e-05, 0.0, -9.274479816667736e-05, 0.0, -0.6293699741363525, -1.1444091796875e-05, -0.01687156781554222, -4.291534423828125e-06, -1.1444091796875e-05, -0.7021608352661133, -0.4134840965270996, -2.0265579223632812e-06, 0.0, -0.002532958984375, -0.004128456115722656, -2.6702880859375e-05, -0.059743162244558334, -3.933906555175781e-06, -1.9073486328125e-05, -4.398822784423828e-05, -7.62939453125e-06, -2.0265579223632812e-06, 0.0, -7.2479248046875e-05, -9.918212890625e-05, -4.76837158203125e-05, -1.1920928244535389e-07, 0.0, -5.614750989479944e-05, 0.0], "score": -7.368251413350428, "model_output": {"hole4": "player", "hole0": "IronforgeRifleman", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template60"}], "hole0": "Ironforge Rifleman", "hole6": [{"_type": "Template46", "hole0": "EnemyPlayer"}], "hole1": 3, "hole2": "COMMON", "_type": "Template6", "hole3": "Damage", "hole5": "CharacterSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}, {"choice_history": [121, 198, "Ironforge", "Rifleman", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 36, 247, "Random", "Picker", "<EOS>", "3", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "2", "<EOS>"], "score_history": [-1.5574121475219727, -3.0517578125e-05, -0.0020957787055522203, -0.0011917536612600088, -2.622604142743512e-06, -3.695418854476884e-06, -1.1682510375976562e-05, -3.314005516585894e-05, -0.000274658203125, -0.0010528564453125, -0.07658958435058594, -1.3470645171764772e-05, -2.3126602172851562e-05, -1.4662702596979216e-05, -1.9073486328125e-06, -2.3961029000929557e-05, 0.0, -0.000431060791015625, -7.62939453125e-06, -0.0028595919720828533, -0.0009614229202270508, -1.9073486328125e-05, -0.00348663330078125, -0.0007846355438232422, -2.1457672119140625e-06, 0.0, -0.00017547607421875, -3.814697265625e-06, -3.814697265625e-06, -0.0004138946533203125, -5.7220458984375e-06, -0.0001621246337890625, -5.7220458984375e-06, -8.392333984375e-05, -0.00019276142120361328, -9.5367431640625e-06, -0.0001201629638671875, -0.00032806396484375, -0.0010814666748046875, -2.6702880859375e-05, -5.530982971191406, -0.00140380859375, -0.03290557861328125, -0.0015773773193359375, -0.000102996826171875, -0.16895392537117004, -0.0001583099365234375, -0.001007080078125, 0.0, -2.0146366296103224e-05, 0.0, -9.34600830078125e-05, -3.814697265625e-05, -6.29425048828125e-05, -1.1920928244535389e-07, 0.0, -6.043904068064876e-05, 0.0], "score": -7.387308247500862, "model_output": {"hole4": "player", "hole0": "IronforgeRifleman", "hole1": "MinionCard", "hole2": [{"hole4": [{"_type": "Template60"}], "hole0": "Ironforge Rifleman", "hole7": [{"value": {"_type": "Template46", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"hole1": 3, "_type": "Template41", "hole0": "RandomPicker"}, "arg": "picker", "_type": "keyword"}], "hole1": 3, "hole2": "COMMON", "_type": "Template6", "hole3": "Damage", "hole5": "CharacterSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=RandomPicker(3))))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Ironforge", "Rifleman", "<EOS>", 320, 100, 333, 136, 197, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 216, "Damage", "<EOS>", 320, 103, "Hero", "Selector", "<EOS>", 150, 302, "2", "<EOS>", "2", "<EOS>", 147], "score_history": [-0.23857688903808594, -0.0002307891845703125, -5.91278076171875e-05, -0.0016880035400390625, -1.52587890625e-05, -0.003830978646874428, -0.00010657125676516443, -1.1444026313256472e-05, -7.62939453125e-05, -0.0004024505615234375, -1.1444091796875e-05, -7.62939453125e-05, -3.4332275390625e-05, -0.00048113305820152164, -3.719319647643715e-05, -4.0531158447265625e-06, 0.0, -3.135204315185547e-05, -1.1920928244535389e-07, -0.00018155574798583984, -3.0517578125e-05, -0.0022335052490234375, 0.0, -0.00033783912658691406, 0.0, -0.00045013427734375, -5.7220458984375e-06, -0.000148773193359375, 0.0, -0.0019916296005249023, 0.0, -0.0024056434631347656, 0.0, -0.0025787353515625, -6.486725807189941, -0.056899022310972214, -8.642332250019535e-05, -2.288818359375e-05, -0.044384002685546875, -0.5519397258758545, -1.7523765563964844e-05, 0.0, -0.0031185150146484375, -2.6702880859375e-05, -2.515283995307982e-05, -1.1920928244535389e-07, -1.3709089216717985e-05, -1.1920928244535389e-07, -4.57763671875e-05], "score": -7.399343271309569, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole1": [{"_type": "Template60"}], "hole2": "HeroSelector", "_type": "Template22", "hole0": "Damage"}, "hole0": "Ironforge Rifleman", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 3, "hole2": "ALL", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 2, "_type": "Template8", "hole0": 2}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "IronforgeRifleman"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Ironforge", "Rifleman", "<EOS>", 320, 100, 333, 136, 197, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 218, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", 150, 302, "2", "<EOS>", "2", "<EOS>", 147], "score_history": [-0.23857688903808594, -0.0002307891845703125, -5.91278076171875e-05, -0.0016880035400390625, -1.52587890625e-05, -0.003830978646874428, -0.00010657125676516443, -1.1444026313256472e-05, -7.62939453125e-05, -0.0004024505615234375, -1.1444091796875e-05, -7.62939453125e-05, -3.4332275390625e-05, -0.00048113305820152164, -3.719319647643715e-05, -4.0531158447265625e-06, 0.0, -3.135204315185547e-05, -1.1920928244535389e-07, -0.00018155574798583984, -3.0517578125e-05, -0.0022335052490234375, 0.0, -0.00033783912658691406, 0.0, -0.00045013427734375, -5.7220458984375e-06, -0.000148773193359375, 0.0, -0.0019916296005249023, 0.0, -0.0024056434631347656, 0.0, -0.0025787353515625, -6.589108943939209, -0.037848904728889465, -5.8412379075889476e-06, -0.026136398315429688, -0.007338523864746094, -0.01979338936507702, -3.123250644421205e-05, 0.0, -0.0027980804443359375, -0.01857280731201172, -5.7220458984375e-05, -0.4797617495059967, -1.454353241570061e-05, -5.7220458984375e-06, -0.0020694732666015625, -0.000152587890625, -0.0001865451195044443, -2.3841855067985307e-07, -2.6702880859375e-05, 0.0, -2.6702880859375e-05], "score": -7.439973391079512, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole1": [{"_type": "Template60"}], "hole2": "CharacterSelector", "_type": "Template22", "hole3": [{"_type": "Template46", "hole0": "EnemyPlayer"}], "hole0": "Damage"}, "hole0": "Ironforge Rifleman", "hole7": "battlecry", "hole6": "<UNK>", "hole1": 3, "hole2": "ALL", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 2, "_type": "Template8", "hole0": 2}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "IronforgeRifleman"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}, {"choice_history": [121, 198, "Ironforge", "Rifleman", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 271, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "2", "<EOS>"], "score_history": [-1.5574121475219727, -3.0517578125e-05, -0.0020957787055522203, -0.0011917536612600088, -2.622604142743512e-06, -3.695418854476884e-06, -1.1682510375976562e-05, -3.314005516585894e-05, -0.000274658203125, -0.0010528564453125, -5.560181617736816, -1.5139577953959815e-05, -4.3869011278729886e-05, -7.62939453125e-06, 0.0, -0.0005609989166259766, -1.311301275563892e-06, -0.29619264602661133, -1.9073486328125e-06, -0.08491788804531097, -1.5616416931152344e-05, -0.07113765180110931, -1.9073486328125e-06, 0.0, -0.0006392002105712891, 0.0, -3.8146954466355965e-06, 0.0, -3.4332275390625e-05, -0.0001163482666015625, -9.5367431640625e-05, -2.3841855067985307e-07, 0.0, -5.7577784900786355e-05, 0.0], "score": -7.576133914712699, "model_output": {"hole4": "player", "hole0": "IronforgeRifleman", "hole1": "MinionCard", "hole2": [{"hole0": "Ironforge Rifleman", "hole1": 3, "hole2": "COMMON", "_type": "Template6", "hole3": "Damage", "hole5": "PlayerSelector"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(), PlayerSelector())\n            )\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}], "index": 56}
{"beams": [{"choice_history": [121, 198, "Ironfur", "Grizzly", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.00054931640625, -7.43865966796875e-05, -0.00244556600227952, -0.006962324492633343, -1.1920928244535389e-07, -2.859393134713173e-06, -1.9073486328125e-06, -0.00031507015228271484, -0.000194549560546875, -0.0004138946533203125, -0.00037384033203125, -0.00011097769311163574, -7.152507896535099e-05, -1.3828206647303887e-05, 0.0, -2.0420866349013522e-05, 0.0, -0.000171661376953125, 0.0, -0.0003948211669921875, -7.62939453125e-06, -0.000698089599609375, -0.0013103485107421875, -7.82012939453125e-05, 0.0, -3.4332275390625e-05, -8.20159912109375e-05, -0.000980377197265625, -9.5367431640625e-06, -0.0001010894775390625, 0.0, -0.07868385314941406, 0.0, -0.0001888275146484375, -0.0005321502685546875, -0.0002117156982421875, -8.106231689453125e-06, -1.311301275563892e-06, -0.0002369890280533582, -3.8146954466355965e-06, -0.0006335973739624023, 0.0, -7.05718994140625e-05], "score": -0.09598962618019158, "model_output": {"hole4": "player", "hole0": "IronfurGrizzly", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Ironfur Grizzly", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 3}]}, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 3, taunt=True)\n"}, {"choice_history": [121, 198, "Ironfur", "Grizzly", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.00054931640625, -7.43865966796875e-05, -0.00244556600227952, -0.006962324492633343, -1.1920928244535389e-07, -2.859393134713173e-06, -1.9073486328125e-06, -0.00031507015228271484, -0.000194549560546875, -0.0004138946533203125, -0.00037384033203125, -0.00011097769311163574, -7.152507896535099e-05, -1.3828206647303887e-05, 0.0, -2.0420866349013522e-05, 0.0, -0.000171661376953125, 0.0, -0.0003948211669921875, -7.62939453125e-06, -0.000698089599609375, -0.0013103485107421875, -7.82012939453125e-05, 0.0, -3.4332275390625e-05, -8.20159912109375e-05, -0.000980377197265625, -9.5367431640625e-06, -0.0001010894775390625, 0.0, -2.592665672302246, -7.43865966796875e-05, -0.000156402587890625, -0.0021991729736328125, -0.0002689361572265625, -6.556510925292969e-05, -1.4305104514278355e-06, -0.0002947414177469909, -5.7220440794480965e-06, -0.0005301237106323242, -1.9073486328125e-06, -5.53131103515625e-05], "score": -2.611738062888314, "model_output": {"hole4": "p", "hole0": "IronfurGrizzly", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Ironfur Grizzly", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 3}]}, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(3, 3, taunt=True)\n"}, {"choice_history": [121, 198, "Ironfur", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.00054931640625, -7.43865966796875e-05, -0.00244556600227952, -5.145048141479492, -1.1920928244535389e-07, -2.859393134713173e-06, -1.9073486328125e-06, -0.00031507015228271484, -0.000194549560546875, -0.0004138946533203125, -0.00037384033203125, -0.00011097769311163574, -7.152507896535099e-05, -1.3828206647303887e-05, 0.0, -2.0420866349013522e-05, 0.0, -0.000171661376953125, 0.0, -0.0003948211669921875, -7.62939453125e-06, -0.000698089599609375, -0.0013103485107421875, -7.82012939453125e-05, 0.0, -3.4332275390625e-05, -8.20159912109375e-05, -0.000980377197265625, -9.5367431640625e-06, -0.0001010894775390625, 0.0, -0.07868385314941406, 0.0, -0.0001888275146484375, -0.0005321502685546875, -0.0002117156982421875, -8.106231689453125e-06, -1.311301275563892e-06, -0.0002369890280533582, -3.8146954466355965e-06, -0.0006335973739624023, 0.0, -7.05718994140625e-05], "score": -5.23407544316705, "model_output": {"hole4": "player", "hole0": "Ironfur<UNK>", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Ironfur Grizzly", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 3}]}, "inferred_code": "class Ironfur<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 3, taunt=True)\n"}, {"choice_history": [121, 198, "<UNK>", "Grizzly", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.00054931640625, -7.43865966796875e-05, -6.0427165031433105, -0.006962324492633343, -1.1920928244535389e-07, -2.859393134713173e-06, -1.9073486328125e-06, -0.00031507015228271484, -0.000194549560546875, -0.0004138946533203125, -0.00037384033203125, -0.00011097769311163574, -7.152507896535099e-05, -1.3828206647303887e-05, 0.0, -2.0420866349013522e-05, 0.0, -0.000171661376953125, 0.0, -0.0003948211669921875, -7.62939453125e-06, -0.000698089599609375, -0.0013103485107421875, -7.82012939453125e-05, 0.0, -3.4332275390625e-05, -8.20159912109375e-05, -0.000980377197265625, -9.5367431640625e-06, -0.0001010894775390625, 0.0, -0.07868385314941406, 0.0, -0.0001888275146484375, -0.0005321502685546875, -0.0002117156982421875, -8.106231689453125e-06, -1.311301275563892e-06, -0.0002369890280533582, -3.8146954466355965e-06, -0.0006335973739624023, 0.0, -7.05718994140625e-05], "score": -6.136260563321223, "model_output": {"hole4": "player", "hole0": "<UNK>Grizzly", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Ironfur Grizzly", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 3}]}, "inferred_code": "class <UNK>Grizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 3, taunt=True)\n"}, {"choice_history": [121, 198, "Ironfur", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.00054931640625, -7.43865966796875e-05, -0.00244556600227952, -6.860483169555664, -0.001736033707857132, -3.933906555175781e-06, -0.0001455545425415039, -0.00023651123046875, -0.0007762908935546875, -0.0002899169921875, -0.0001267114421352744, -0.00010478438343852758, -1.8477303456165828e-05, 0.0, -2.746324025793001e-05, 0.0, -0.0001506805419921875, 0.0, -0.0005035400390625, -5.7220458984375e-06, -0.0007171630859375, -0.0012664794921875, -7.62939453125e-05, 0.0, -3.0517578125e-05, -6.103515625e-05, -0.00101470947265625, -9.5367431640625e-06, -0.0001049041748046875, 0.0, -0.07238388061523438, 0.0, -0.00019073486328125, -0.000522613525390625, -0.000209808349609375, -8.106231689453125e-06, -1.311301275563892e-06, -0.0002360485086683184, -3.8146954466355965e-06, -0.0006334781646728516, 0.0, -7.05718994140625e-05], "score": -6.945219066633399, "model_output": {"hole4": "player", "hole0": "Ironfur", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Ironfur Grizzly", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 3}]}, "inferred_code": "class Ironfur(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 3, taunt=True)\n"}, {"choice_history": [121, 198, "Ironfur", "Grizzly", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.00054931640625, -7.43865966796875e-05, -0.00244556600227952, -0.006962324492633343, -1.1920928244535389e-07, -2.859393134713173e-06, -1.9073486328125e-06, -0.00031507015228271484, -0.000194549560546875, -0.0004138946533203125, -0.00037384033203125, -0.00011097769311163574, -7.152507896535099e-05, -1.3828206647303887e-05, 0.0, -2.0420866349013522e-05, 0.0, -0.000171661376953125, 0.0, -0.0003948211669921875, -7.62939453125e-06, -7.386785507202148, -3.4332275390625e-05, -2.6702880859375e-05, -0.005401611328125, 0.0, -0.0063686370849609375, -0.0009288787841796875, -3.62396240234375e-05, -7.6293763413559645e-06, -9.536738616588991e-07, -0.0007171849138103426, -3.4570680327306036e-06, -0.0007901191711425781, 0.0, -5.340576171875e-05], "score": -7.4132793570752185, "model_output": {"hole4": "player", "hole0": "IronfurGrizzly", "hole1": "MinionCard", "hole2": [{"hole4": {"_type": "Template53"}, "hole0": "Ironfur Grizzly", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 3}]}, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(3, 3, taunt=True)\n"}, {"choice_history": [121, 198, "Ironfur", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.00054931640625, -7.43865966796875e-05, -0.00244556600227952, -5.145048141479492, -1.1920928244535389e-07, -2.859393134713173e-06, -1.9073486328125e-06, -0.00031507015228271484, -0.000194549560546875, -0.0004138946533203125, -0.00037384033203125, -0.00011097769311163574, -7.152507896535099e-05, -1.3828206647303887e-05, 0.0, -2.0420866349013522e-05, 0.0, -0.000171661376953125, 0.0, -0.0003948211669921875, -7.62939453125e-06, -0.000698089599609375, -0.0013103485107421875, -7.82012939453125e-05, 0.0, -3.4332275390625e-05, -8.20159912109375e-05, -0.000980377197265625, -9.5367431640625e-06, -0.0001010894775390625, 0.0, -2.592665672302246, -7.43865966796875e-05, -0.000156402587890625, -0.0021991729736328125, -0.0002689361572265625, -6.556510925292969e-05, -1.4305104514278355e-06, -0.0002947414177469909, -5.7220440794480965e-06, -0.0005301237106323242, -1.9073486328125e-06, -5.53131103515625e-05], "score": -7.749823879875173, "model_output": {"hole4": "p", "hole0": "Ironfur<UNK>", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Ironfur Grizzly", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 3}]}, "inferred_code": "class Ironfur<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(3, 3, taunt=True)\n"}, {"choice_history": [121, 198, "Ironfur", "Grizzly", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "3", "<EOS>", "windfury", "<EOS>", 62], "score_history": [-0.00054931640625, -7.43865966796875e-05, -0.00244556600227952, -0.006962324492633343, -1.1920928244535389e-07, -2.859393134713173e-06, -1.9073486328125e-06, -0.00031507015228271484, -0.000194549560546875, -0.0004138946533203125, -0.00037384033203125, -0.00011097769311163574, -7.152507896535099e-05, -1.3828206647303887e-05, 0.0, -2.0420866349013522e-05, 0.0, -0.000171661376953125, 0.0, -0.0003948211669921875, -7.62939453125e-06, -0.000698089599609375, -0.0013103485107421875, -7.82012939453125e-05, 0.0, -3.4332275390625e-05, -8.20159912109375e-05, -0.000980377197265625, -9.5367431640625e-06, -0.0001010894775390625, 0.0, -0.07868385314941406, 0.0, -0.0001888275146484375, -0.0005321502685546875, -0.0002117156982421875, -8.106231689453125e-06, -1.311301275563892e-06, -0.0002369890280533582, -3.8146954466355965e-06, -7.954484462738037, -0.00012969970703125, -0.0002422332763671875], "score": -8.05014185262825, "model_output": {"hole4": "player", "hole0": "IronfurGrizzly", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Ironfur Grizzly", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "windfury", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 3}]}, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 3, windfury=True)\n"}, {"choice_history": [121, 198, "Ironfur", "Grizzly", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "_", "<EOS>", 332, 142, 230, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.00054931640625, -7.43865966796875e-05, -0.00244556600227952, -0.006962324492633343, -1.1920928244535389e-07, -2.859393134713173e-06, -1.9073486328125e-06, -0.00031507015228271484, -0.000194549560546875, -0.0004138946533203125, -0.00037384033203125, -0.00011097769311163574, -7.152507896535099e-05, -1.3828206647303887e-05, 0.0, -2.0420866349013522e-05, 0.0, -0.000171661376953125, 0.0, -0.0003948211669921875, -7.62939453125e-06, -0.000698089599609375, -0.0013103485107421875, -7.82012939453125e-05, 0.0, -3.4332275390625e-05, -8.20159912109375e-05, -0.000980377197265625, -9.5367431640625e-06, -0.0001010894775390625, 0.0, -8.138216018676758, -0.002841949462890625, -0.000194549560546875, -0.0038242340087890625, -0.0003185272216796875, -0.0001837015151977539, -2.264974000354414e-06, -0.00017509704048279673, -6.556507287314162e-06, -0.0005211830139160156, -1.9073486328125e-06, -4.76837158203125e-05], "score": -8.161752362065492, "model_output": {"hole4": "_", "hole0": "IronfurGrizzly", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Ironfur Grizzly", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 3}]}, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, _):\n        return Minion(3, 3, taunt=True)\n"}, {"choice_history": [121, 198, "Ironfur", "Grizzly", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.00054931640625, -7.43865966796875e-05, -0.00244556600227952, -0.006962324492633343, -1.1920928244535389e-07, -2.859393134713173e-06, -1.9073486328125e-06, -0.00031507015228271484, -0.000194549560546875, -0.0004138946533203125, -0.00037384033203125, -0.00011097769311163574, -7.152507896535099e-05, -1.3828206647303887e-05, 0.0, -2.0420866349013522e-05, 0.0, -0.000171661376953125, 0.0, -0.0003948211669921875, -7.62939453125e-06, -0.000698089599609375, -0.0013103485107421875, -7.82012939453125e-05, 0.0, -3.4332275390625e-05, -8.20159912109375e-05, -8.227344512939453, -2.6702880859375e-05, -4.9591064453125e-05, 0.0, -0.016574859619140625, 0.0, -0.0005950927734375, -0.0008220672607421875, -0.000308990478515625, -6.556510470545618e-06, -1.4305104514278355e-06, -0.00027025261078961194, -3.8146954466355965e-06, -0.0006412267684936523, 0.0, -8.20159912109375e-05], "score": -8.261054799704986, "model_output": {"hole4": "player", "hole0": "IronfurGrizzly", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Ironfur Grizzly", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 3}]}, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(3, 3, taunt=True)\n"}, {"choice_history": [121, 198, "Ironfur", "Grizzly", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "COMMON", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.00054931640625, -7.43865966796875e-05, -0.00244556600227952, -0.006962324492633343, -1.1920928244535389e-07, -2.859393134713173e-06, -1.9073486328125e-06, -0.00031507015228271484, -0.000194549560546875, -0.0004138946533203125, -0.00037384033203125, -0.00011097769311163574, -7.152507896535099e-05, -1.3828206647303887e-05, 0.0, -2.0420866349013522e-05, 0.0, -0.000171661376953125, 0.0, -8.452082633972168, -1.9073486328125e-06, -0.0038013458251953125, -0.0007610321044921875, -0.0001049041748046875, -1.9073486328125e-06, -5.14984130859375e-05, -8.96453857421875e-05, -0.000827789306640625, -9.5367431640625e-06, -9.918212890625e-05, 0.0, -0.09892654418945312, 0.0, -0.0001983642578125, -0.000579833984375, -0.0002269744873046875, -1.0013580322265625e-05, -1.4305104514278355e-06, -0.00023055847850628197, -4.053113570989808e-06, -0.0006203651428222656, 0.0, -7.05718994140625e-05], "score": -8.570422339764598, "model_output": {"hole4": "player", "hole0": "IronfurGrizzly", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Ironfur Grizzly", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "COMMON"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 3}]}, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, COMMON=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 3, taunt=True)\n"}, {"choice_history": [121, 198, "<UNK>", "Grizzly", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.00054931640625, -7.43865966796875e-05, -6.0427165031433105, -0.006962324492633343, -1.1920928244535389e-07, -2.859393134713173e-06, -1.9073486328125e-06, -0.00031507015228271484, -0.000194549560546875, -0.0004138946533203125, -0.00037384033203125, -0.00011097769311163574, -7.152507896535099e-05, -1.3828206647303887e-05, 0.0, -2.0420866349013522e-05, 0.0, -0.000171661376953125, 0.0, -0.0003948211669921875, -7.62939453125e-06, -0.000698089599609375, -0.0013103485107421875, -7.82012939453125e-05, 0.0, -3.4332275390625e-05, -8.20159912109375e-05, -0.000980377197265625, -9.5367431640625e-06, -0.0001010894775390625, 0.0, -2.592665672302246, -7.43865966796875e-05, -0.000156402587890625, -0.0021991729736328125, -0.0002689361572265625, -6.556510925292969e-05, -1.4305104514278355e-06, -0.0002947414177469909, -5.7220440794480965e-06, -0.0005301237106323242, -1.9073486328125e-06, -5.53131103515625e-05], "score": -8.652009000029345, "model_output": {"hole4": "p", "hole0": "<UNK>Grizzly", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Ironfur Grizzly", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 3}]}, "inferred_code": "class <UNK>Grizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(3, 3, taunt=True)\n"}, {"choice_history": [121, 198, "Ironfur", "Grizzly", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "4", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.00054931640625, -7.43865966796875e-05, -0.00244556600227952, -0.006962324492633343, -1.1920928244535389e-07, -2.859393134713173e-06, -1.9073486328125e-06, -0.00031507015228271484, -0.000194549560546875, -0.0004138946533203125, -0.00037384033203125, -0.00011097769311163574, -7.152507896535099e-05, -1.3828206647303887e-05, 0.0, -2.0420866349013522e-05, 0.0, -0.000171661376953125, 0.0, -0.0003948211669921875, -7.62939453125e-06, -0.000698089599609375, -0.0013103485107421875, -7.82012939453125e-05, 0.0, -3.4332275390625e-05, -8.20159912109375e-05, -0.000980377197265625, -9.5367431640625e-06, -0.0001010894775390625, 0.0, -0.07868385314941406, 0.0, -0.0001888275146484375, -0.0005321502685546875, -0.0002117156982421875, -8.106231689453125e-06, -1.311301275563892e-06, -8.593615531921387, -1.9073486328125e-06, -0.00048291683197021484, 0.0, -7.62939453125e-05], "score": -8.689221303230617, "model_output": {"hole4": "player", "hole0": "IronfurGrizzly", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Ironfur Grizzly", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 3}]}, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 4, taunt=True)\n"}, {"choice_history": [121, 198, "Ironfur", "Grizzly", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.00054931640625, -7.43865966796875e-05, -0.00244556600227952, -0.006962324492633343, -1.1920928244535389e-07, -2.859393134713173e-06, -1.9073486328125e-06, -0.00031507015228271484, -0.000194549560546875, -0.0004138946533203125, -0.00037384033203125, -0.00011097769311163574, -7.152507896535099e-05, -1.3828206647303887e-05, 0.0, -2.0420866349013522e-05, 0.0, -0.000171661376953125, 0.0, -0.0003948211669921875, -7.62939453125e-06, -0.000698089599609375, -0.0013103485107421875, -7.82012939453125e-05, 0.0, -3.4332275390625e-05, -8.20159912109375e-05, -8.686701774597168, -6.67572021484375e-05, -6.67572021484375e-05, 0.0, -0.009000778198242188, 0.0, -0.000324249267578125, -0.0003910064697265625, -0.0002346038818359375, -4.649161837733118e-06, -1.4305104514278355e-06, -0.00025107598048634827, -3.6954863844584906e-06, -0.0006622076034545898, 0.0, -7.43865966796875e-05], "score": -8.712111057759664, "model_output": {"hole4": "player", "hole0": "IronfurGrizzly", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Ironfur Grizzly", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 3}]}, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(3, 3, taunt=True)\n"}, {"choice_history": [120, 185, 333, 129, 165, "Ironfur", "Grizzly", "<EOS>", 320, 100, 333, 136, 197, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 321, 71, 181, 323, 81, 232, "Ironfur", "<EOS>", 81, 232, "Taunt", "<EOS>", 105, 81, 232, "Taunt", "<EOS>", 93, 255, "Weapon", "Selector", "<EOS>", "Self", "Selector", "<EOS>", 150, 302, "3", "<EOS>", "3", "<EOS>", 147], "score_history": [-7.63688850402832, -0.0017414093017578125, -0.0001468658447265625, -0.0033426284790039062, -2.09808349609375e-05, -0.0015683980891481042, -7.617197843501344e-05, -3.3378546504536644e-06, -5.7220458984375e-05, -0.0002193450927734375, -5.91278076171875e-05, -0.0026416778564453125, -0.0001354217529296875, -0.0004459816846065223, -3.337836096761748e-05, -8.046361472224817e-05, 0.0, -0.00013899181794840842, -1.9073486328125e-06, -0.009489178657531738, -1.52587890625e-05, -0.00032806396484375, 0.0, -9.34600830078125e-05, 0.0, -4.9591064453125e-05, -1.1444091796875e-05, -5.7220458984375e-06, 0.0, -0.08391571044921875, 0.0, -0.08003711700439453, 0.0, -0.06601428985595703, -0.014173507690429688, -0.06173182651400566, -0.01961994171142578, -0.1905679702758789, -0.6817951202392578, -0.000732421875, -0.019553184509277344, -0.5139875411987305, -0.10278129577636719, -0.7448155283927917, -0.6127727031707764, -0.41222381591796875, -0.015150070190429688, -0.023611722514033318, -9.655952453613281e-06, -0.021207809448242188, -0.3245878219604492, -0.0095977783203125, -0.06983188539743423, -7.832050323486328e-05, -0.0005245208740234375, -3.814697265625e-06, -0.28133007884025574, -0.008034944534301758, 0.0, -0.05799150466918945, -2.861022494471399e-06, 0.0, -0.000263214111328125, -3.0517578125e-05, -9.217625483870506e-05, -2.1457672119140625e-06, -0.0006076866993680596, -4.291534423828125e-06, -0.007658958435058594], "score": -12.08293828478918, "model_output": {"body": [{"body": [{"hole4": "minion_type", "hole8": {"hole1": [{"_type": "List", "elts": [{"_type": "Template30", "hole0": "Ironfur"}, {"_type": "Template30", "hole0": "Taunt"}, {"_type": "Template62_expr_seq"}, {"_type": "Template30", "hole0": "Taunt"}]}, {"_type": "Template46", "hole0": "WeaponSelector"}], "hole2": "SelfSelector", "_type": "Template22", "hole0": "Give"}, "hole0": "Ironfur Grizzly", "hole7": "battlecry", "hole6": "BEAST", "hole1": 3, "hole2": "ALL", "_type": "Template0", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole1": 3, "_type": "Template8", "hole0": 3}], "bases": [{"_type": "Template57"}], "_type": "ClassDef", "name": "IronfurGrizzly"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give([Buff(Ironfur()), Buff(Taunt()), Buff(Taunt())],\n            WeaponSelector()), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n"}], "index": 57}
{"beams": [{"choice_history": [121, 200, "Kill", "Command", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 20, 163, 17, 156, 40, "<UNK>", "<EOS>", 321, 65, 156, 50, "game", "<EOS>", 70, 180, 4, 229, "x", "<EOS>", 21, 166, 17, 156, 17, 156, 25, 186, "x", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 133, 174, 21, 166, 25, 186, "<UNK>", "<EOS>", 317, 12, 320, 74, 187, "Null", "<EOS>", 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110, 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-2.6702880859375e-05, -0.0001163482666015625, -2.0027044229209423e-05, -0.0007697342080064118, -1.1920928244535389e-07, -7.748021744191647e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0002269744873046875, -0.0002536773681640625, -0.000202178955078125, -9.536738616588991e-07, -2.2292131689027883e-05, -3.457069396972656e-05, 0.0, -1.5854835510253906e-05, -2.2649765014648438e-06, -0.00577855110168457, -1.33514404296875e-05, -0.0003110170364379883, 0.0, -0.000156402587890625, -2.47955322265625e-05, -7.05718994140625e-05, -0.0005245208740234375, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -0.00045633313129656017, 0.0, -5.340576171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004069805145263672, 0.0, -0.19292163848876953, -0.000125885009765625, -0.1988391876220703, -1.9073486328125e-05, 0.0, -0.0003299713134765625, -3.814697265625e-06, -0.0015455401735380292, -0.0003156163729727268, -0.007388114929199219, -0.0003070831298828125, -1.52587890625e-05, -3.0517578125e-05, -0.0026693344116210938, -0.010024785995483398, -1.9550323486328125e-05, -0.00600433349609375, -0.0007495880126953125, -3.814697265625e-05, -0.000354766845703125, -0.0013338207500055432, -1.1920928244535389e-07, -0.004105567932128906, -0.0001010894775390625, -7.05718994140625e-05, -0.000263214111328125, -0.002882873173803091, 0.0, -0.0062122344970703125, -2.6702880859375e-05, -0.0004367828369140625, -1.9073486328125e-06, -0.000438690185546875, -1.9073486328125e-05, -0.023275375366210938, -9.5367431640625e-06, -0.0069658756256103516, 0.0, -0.010808587074279785, 0.0, -0.015428543090820312, 0.0, -8.58306884765625e-05, -0.021735191345214844, -1.9073486328125e-06, -0.0012569427490234375, -3.62396240234375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -1.9073486328125e-06, -0.01125335693359375, -5.7220458984375e-06, -0.008424758911132812, -0.0015163421630859375, -0.001430511474609375, -5.14984130859375e-05, -0.000743865966796875, -1.52587890625e-05, -0.00040912628173828125, -4.70866471005138e-05, -0.0003452301025390625, -0.0039234161376953125, -2.6702880859375e-05, -0.0023374557495117188, -0.000148773193359375, -0.00010251987987430766, -0.00032532215118408203, -0.03738975524902344, -4.57763671875e-05, -7.62939453125e-06, -0.0016002655029296875, -3.0994276585261105e-06, -3.576278118089249e-07, -1.52587890625e-05, -0.00043487548828125, -2.47955322265625e-05, -0.0002689361572265625, -0.0001807212393032387, -1.1920928244535389e-07, -0.26034677028656006, -8.344646857949556e-07, -0.000392913818359375, -0.0002498626708984375, -0.01316070556640625, -0.00040435791015625, -0.0005435943603515625, -6.079604645492509e-06, -9.536738616588991e-07, -9.5367431640625e-06, -0.008409500122070312, -7.62939453125e-06, -8.58306884765625e-05, -0.00012004372547380626, 0.0, -0.12033860385417938, -1.1920928244535389e-07, -0.0001087188720703125], "score": -1.002099998194609, "model_output": {"hole4": "player", "hole0": "KillCommand", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"body": {"ops": [{"_type": "Is"}], "comparators": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Compare", "left": {"attr": "minion_type", "value": {"attr": "card", "value": {"_type": "Name", "id": "x"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "x"}}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"orelse": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "test": {"ops": [{"_type": "Is"}], "comparators": [{"value": "Null", "_type": "NameConstant"}], "_type": "Compare", "left": {"_type": "Name", "id": "<UNK>"}}, "body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Kill Command", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = hearthbreaker.targeting.<UNK>(player.game, lambda x: x.card\n            .minion_type is MINION_TYPE.BEAST)\n        if <UNK> is Null:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Kill", "Command", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 20, 163, 17, 156, 40, "<UNK>", "<EOS>", 321, 65, 156, 50, "game", "<EOS>", 70, 180, 4, 229, "x", "<EOS>", 21, 166, 17, 156, 17, 156, 25, 186, "x", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 133, 174, 21, 166, 25, 186, "<UNK>", "<EOS>", 317, 12, 320, 74, 187, "Null", "<EOS>", 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-2.6702880859375e-05, -0.0001163482666015625, -2.0027044229209423e-05, -0.0007697342080064118, -1.1920928244535389e-07, -7.748021744191647e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0002269744873046875, -0.0002536773681640625, -0.000202178955078125, -9.536738616588991e-07, -2.2292131689027883e-05, -3.457069396972656e-05, 0.0, -1.5854835510253906e-05, -2.2649765014648438e-06, -0.00577855110168457, -1.33514404296875e-05, -0.0003110170364379883, 0.0, -0.000156402587890625, -2.47955322265625e-05, -7.05718994140625e-05, -0.0005245208740234375, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -0.00045633313129656017, 0.0, -5.340576171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004069805145263672, 0.0, -0.19292163848876953, -0.000125885009765625, -0.1988391876220703, -1.9073486328125e-05, 0.0, -0.0003299713134765625, -3.814697265625e-06, -0.0015455401735380292, -0.0003156163729727268, -0.007388114929199219, -0.0003070831298828125, -1.52587890625e-05, -3.0517578125e-05, -0.0026693344116210938, -0.010024785995483398, -1.9550323486328125e-05, -0.00600433349609375, -0.0007495880126953125, -3.814697265625e-05, -0.000354766845703125, -0.0013338207500055432, -1.1920928244535389e-07, -0.004105567932128906, -0.0001010894775390625, -7.05718994140625e-05, -0.000263214111328125, -0.002882873173803091, 0.0, -0.0062122344970703125, -2.6702880859375e-05, -0.0004367828369140625, -1.9073486328125e-06, -0.000438690185546875, -1.9073486328125e-05, -0.023275375366210938, -9.5367431640625e-06, -0.0069658756256103516, 0.0, -0.010808587074279785, 0.0, -0.015428543090820312, 0.0, -8.58306884765625e-05, -0.021735191345214844, -1.9073486328125e-06, -0.0012569427490234375, -3.62396240234375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -1.9073486328125e-06, -0.01125335693359375, -5.7220458984375e-06, -0.008424758911132812, -0.0015163421630859375, -0.001430511474609375, -5.14984130859375e-05, -0.000743865966796875, -1.52587890625e-05, -0.00040912628173828125, -4.70866471005138e-05, -0.0003452301025390625, -0.0039234161376953125, -2.6702880859375e-05, -0.0023374557495117188, -0.000148773193359375, -0.00010251987987430766, -0.00032532215118408203, -0.03738975524902344, -4.57763671875e-05, -7.62939453125e-06, -0.0016002655029296875, -3.0994276585261105e-06, -3.576278118089249e-07, -1.52587890625e-05, -0.00043487548828125, -2.47955322265625e-05, -0.0002689361572265625, -0.0001807212393032387, -1.1920928244535389e-07, -1.489390254020691, -1.1205671398784034e-05, -0.000392913818359375, -0.0003032684326171875, -0.0017070770263671875, -0.000125885009765625, -0.000408172607421875, -1.2874292224296369e-05, -4.768370445162873e-07, -9.5367431640625e-06, -0.0053768157958984375, -7.62939453125e-06, -7.05718994140625e-05, -0.00014436243509408087, 0.0, -0.10922286659479141, -1.1920928244535389e-07, -0.00011444091796875], "score": -2.2052124139354703, "model_output": {"hole4": "player", "hole0": "KillCommand", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"body": {"ops": [{"_type": "Is"}], "comparators": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Compare", "left": {"attr": "minion_type", "value": {"attr": "card", "value": {"_type": "Name", "id": "x"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "x"}}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"orelse": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "test": {"ops": [{"_type": "Is"}], "comparators": [{"value": "Null", "_type": "NameConstant"}], "_type": "Compare", "left": {"_type": "Name", "id": "<UNK>"}}, "body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Kill Command", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = hearthbreaker.targeting.<UNK>(player.game, lambda x: x.card\n            .minion_type is MINION_TYPE.BEAST)\n        if <UNK> is Null:\n            self.target.damage(player.effective_spell_damage(3), self)\n        else:\n            self.target.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Kill", "Command", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-2.6702880859375e-05, -0.0001163482666015625, -2.0027044229209423e-05, -0.0007697342080064118, -1.1920928244535389e-07, -7.748021744191647e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0002269744873046875, -0.0002536773681640625, -0.000202178955078125, -9.536738616588991e-07, -2.2292131689027883e-05, -3.457069396972656e-05, 0.0, -1.5854835510253906e-05, -2.2649765014648438e-06, -0.00577855110168457, -1.33514404296875e-05, -0.0003110170364379883, 0.0, -0.000156402587890625, -2.47955322265625e-05, -7.05718994140625e-05, -0.0005245208740234375, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -0.00045633313129656017, 0.0, -5.340576171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004069805145263672, 0.0, -0.19292163848876953, -0.000125885009765625, -1.7300195693969727, -2.288818359375e-05, -0.0014781951904296875, -3.5762775496550603e-07, -6.318072337307967e-06, -3.62396240234375e-05, -0.16871070861816406, -2.09808349609375e-05, -0.0003509521484375, -0.0002286428352817893, -3.3378546504536644e-06, -0.2278348207473755, -8.702273589733522e-06, -7.43865966796875e-05, -0.26715660095214844, -1.9073486328125e-06, -0.014058113098144531, -0.027181360870599747, -1.1920928244535389e-07, -2.47955322265625e-05, -0.013033866882324219, -1.1444091796875e-05, -9.5367431640625e-05, -0.00015759434609208256, -1.1920928244535389e-07, -0.25520920753479004, -2.741813204920618e-06, -0.0003662109375], "score": -2.9087071139436844, "model_output": {"hole4": "player", "hole0": "KillCommand", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Kill Command", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(5), self)\n        self.target.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Kill", "Command", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 20, 163, 17, 156, 40, "<UNK>", "<EOS>", 321, 65, 156, 50, "game", "<EOS>", 70, 180, 4, 229, "x", "<EOS>", 21, 166, 17, 156, 17, 156, 25, 186, "x", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 133, 174, 21, 166, 25, 186, "<UNK>", "<EOS>", 317, 12, 320, 74, 187, "Null", "<EOS>", 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110, 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score_history": [-2.6702880859375e-05, -0.0001163482666015625, -2.0027044229209423e-05, -0.0007697342080064118, -1.1920928244535389e-07, -7.748021744191647e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0002269744873046875, -0.0002536773681640625, -0.000202178955078125, -9.536738616588991e-07, -2.2292131689027883e-05, -3.457069396972656e-05, 0.0, -1.5854835510253906e-05, -2.2649765014648438e-06, -0.00577855110168457, -1.33514404296875e-05, -0.0003110170364379883, 0.0, -0.000156402587890625, -2.47955322265625e-05, -7.05718994140625e-05, -0.0005245208740234375, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -0.00045633313129656017, 0.0, -5.340576171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004069805145263672, 0.0, -0.19292163848876953, -0.000125885009765625, -0.1988391876220703, -1.9073486328125e-05, 0.0, -0.0003299713134765625, -3.814697265625e-06, -0.0015455401735380292, -0.0003156163729727268, -0.007388114929199219, -0.0003070831298828125, -1.52587890625e-05, -3.0517578125e-05, -0.0026693344116210938, -0.010024785995483398, -1.9550323486328125e-05, -0.00600433349609375, -0.0007495880126953125, -3.814697265625e-05, -0.000354766845703125, -0.0013338207500055432, -1.1920928244535389e-07, -0.004105567932128906, -0.0001010894775390625, -7.05718994140625e-05, -0.000263214111328125, -0.002882873173803091, 0.0, -0.0062122344970703125, -2.6702880859375e-05, -0.0004367828369140625, -1.9073486328125e-06, -0.000438690185546875, -1.9073486328125e-05, -0.023275375366210938, -9.5367431640625e-06, -0.0069658756256103516, 0.0, -0.010808587074279785, 0.0, -0.015428543090820312, 0.0, -8.58306884765625e-05, -0.021735191345214844, -1.9073486328125e-06, -0.0012569427490234375, -3.62396240234375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -1.9073486328125e-06, -0.01125335693359375, -5.7220458984375e-06, -0.008424758911132812, -0.0015163421630859375, -0.001430511474609375, -5.14984130859375e-05, -0.000743865966796875, -1.52587890625e-05, -0.00040912628173828125, -4.70866471005138e-05, -0.0003452301025390625, -0.0039234161376953125, -2.6702880859375e-05, -0.0023374557495117188, -0.000148773193359375, -0.00010251987987430766, -0.00032532215118408203, -0.03738975524902344, -4.57763671875e-05, -7.62939453125e-06, -0.0016002655029296875, -3.0994276585261105e-06, -3.576278118089249e-07, -1.52587890625e-05, -0.00043487548828125, -2.47955322265625e-05, -0.0002689361572265625, -0.0001807212393032387, -1.1920928244535389e-07, -0.26034677028656006, -8.344646857949556e-07, -0.000392913818359375, -0.0002498626708984375, -0.01316070556640625, -0.00040435791015625, -0.0005435943603515625, -6.079604645492509e-06, -9.536738616588991e-07, -9.5367431640625e-06, -0.008409500122070312, -7.62939453125e-06, -8.58306884765625e-05, -0.00012004372547380626, 0.0, -2.2123770713806152, -4.291534423828125e-06, -0.0001430511474609375], "score": -3.094176970321577, "model_output": {"hole4": "player", "hole0": "KillCommand", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"body": {"ops": [{"_type": "Is"}], "comparators": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Compare", "left": {"attr": "minion_type", "value": {"attr": "card", "value": {"_type": "Name", "id": "x"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "x"}}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"orelse": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "test": {"ops": [{"_type": "Is"}], "comparators": [{"value": "Null", "_type": "NameConstant"}], "_type": "Compare", "left": {"_type": "Name", "id": "<UNK>"}}, "body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Kill Command", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = hearthbreaker.targeting.<UNK>(player.game, lambda x: x.card\n            .minion_type is MINION_TYPE.BEAST)\n        if <UNK> is Null:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.damage(player.effective_spell_damage(3), self)\n"}, {"choice_history": [121, 200, "Kill", "Command", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 17, 156, 50, "hero", "<EOS>", "health", "<EOS>", 317, 12, 320, 75, 190, "5", "<EOS>", 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110, 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-2.6702880859375e-05, -0.0001163482666015625, -2.0027044229209423e-05, -0.0007697342080064118, -1.1920928244535389e-07, -7.748021744191647e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0002269744873046875, -0.0002536773681640625, -0.000202178955078125, -9.536738616588991e-07, -2.2292131689027883e-05, -3.457069396972656e-05, 0.0, -1.5854835510253906e-05, -2.2649765014648438e-06, -0.00577855110168457, -1.33514404296875e-05, -0.0003110170364379883, 0.0, -0.000156402587890625, -2.47955322265625e-05, -7.05718994140625e-05, -0.0005245208740234375, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -0.00045633313129656017, 0.0, -5.340576171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004069805145263672, 0.0, -1.7879304885864258, -0.000164031982421875, -0.007816314697265625, -0.0004558563232421875, -0.0024509429931640625, -0.0001506805419921875, -0.010834693908691406, 0.0, -0.12975311279296875, -1.33514404296875e-05, -0.00650787353515625, -0.2515789270401001, -1.1920928244535389e-07, -0.6032735109329224, -1.9073486328125e-06, -4.1961669921875e-05, -0.13100433349609375, -7.62939453125e-06, -0.5214262008666992, -0.0003452301025390625, -0.00033020551200024784, -0.00039285424281843007, -3.0517578125e-05, -0.001293182373046875, -4.1961669921875e-05, -9.5367431640625e-05, -4.7683693082944956e-07, -1.1920928244535389e-07, -1.71661376953125e-05, -0.008641242980957031, -2.47955322265625e-05, -0.00037384033203125, -0.00017046701395884156, -5.960462772236497e-07, -0.20246458053588867, -2.145764938177308e-06, -0.000522613525390625, -0.0011386871337890625, -0.0075054168701171875, -0.0001125335693359375, -0.0004634857177734375, -7.3909159254981205e-06, -5.960462772236497e-07, -7.62939453125e-06, -0.004750251770019531, -7.62939453125e-06, -0.0001163482666015625, -0.00010180466051679105, 0.0, -0.20616863667964935, -2.2649765014648438e-06, -0.000110626220703125], "score": -3.8982166423851154, "model_output": {"hole4": "player", "hole0": "KillCommand", "hole6": [{"_type": "Template19"}, {"orelse": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "test": {"ops": [{"_type": "Is"}], "comparators": [{"_type": "Num", "n": 5}], "_type": "Compare", "left": {"attr": "health", "value": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Attribute"}}, "body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Kill Command", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.hero.health is 5:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Kill", "Command", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-2.6702880859375e-05, -0.0001163482666015625, -2.0027044229209423e-05, -0.0007697342080064118, -1.1920928244535389e-07, -7.748021744191647e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0002269744873046875, -0.0002536773681640625, -0.000202178955078125, -9.536738616588991e-07, -2.2292131689027883e-05, -3.457069396972656e-05, 0.0, -1.5854835510253906e-05, -2.2649765014648438e-06, -0.00577855110168457, -1.33514404296875e-05, -0.0003110170364379883, 0.0, -0.000156402587890625, -2.47955322265625e-05, -7.05718994140625e-05, -0.0005245208740234375, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -0.00045633313129656017, 0.0, -5.340576171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004069805145263672, 0.0, -0.19292163848876953, -0.000125885009765625, -1.7300195693969727, -2.288818359375e-05, -0.0014781951904296875, -3.5762775496550603e-07, -6.318072337307967e-06, -3.62396240234375e-05, -0.16871070861816406, -2.09808349609375e-05, -0.0003509521484375, -0.0002286428352817893, -3.3378546504536644e-06, -1.6164970397949219, -2.324577872059308e-05, -0.0002155303955078125, -0.013429641723632812, -3.814697265625e-06, -0.0086517333984375, -0.07792723923921585, 0.0, -3.4332275390625e-05, -0.0050945281982421875, -1.9073486328125e-06, -3.814697265625e-05, -0.0001344679476460442, -1.1920928244535389e-07, -0.233481764793396, -2.503394853192731e-06, -0.0002155303955078125], "score": -4.059241300631683, "model_output": {"hole4": "player", "hole0": "KillCommand", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Kill Command", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Kill", "Command", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score_history": [-2.6702880859375e-05, -0.0001163482666015625, -2.0027044229209423e-05, -0.0007697342080064118, -1.1920928244535389e-07, -7.748021744191647e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0002269744873046875, -0.0002536773681640625, -0.000202178955078125, -9.536738616588991e-07, -2.2292131689027883e-05, -3.457069396972656e-05, 0.0, -1.5854835510253906e-05, -2.2649765014648438e-06, -0.00577855110168457, -1.33514404296875e-05, -0.0003110170364379883, 0.0, -0.000156402587890625, -2.47955322265625e-05, -7.05718994140625e-05, -0.0005245208740234375, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -0.00045633313129656017, 0.0, -5.340576171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004069805145263672, 0.0, -0.19292163848876953, -0.000125885009765625, -1.7300195693969727, -2.288818359375e-05, -0.0014781951904296875, -3.5762775496550603e-07, -6.318072337307967e-06, -3.62396240234375e-05, -0.16871070861816406, -2.09808349609375e-05, -0.0003509521484375, -0.0002286428352817893, -3.3378546504536644e-06, -0.2278348207473755, -8.702273589733522e-06, -7.43865966796875e-05, -0.26715660095214844, -1.9073486328125e-06, -0.014058113098144531, -0.027181360870599747, -1.1920928244535389e-07, -2.47955322265625e-05, -0.013033866882324219, -1.1444091796875e-05, -9.5367431640625e-05, -0.00015759434609208256, -1.1920928244535389e-07, -1.513293743133545, -2.0980833141948096e-05, -0.00046539306640625], "score": -4.166909070691283, "model_output": {"hole4": "player", "hole0": "KillCommand", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Kill Command", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(5), self)\n        self.target.damage(player.effective_spell_damage(3), self)\n"}, {"choice_history": [121, 200, "Kill", "Command", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110, 130, 168, 37, 249, 50, "<UNK>", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0001163482666015625, -2.0027044229209423e-05, -0.0007697342080064118, -1.1920928244535389e-07, -7.748021744191647e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0002269744873046875, -0.0002536773681640625, -0.000202178955078125, -9.536738616588991e-07, -2.2292131689027883e-05, -3.457069396972656e-05, 0.0, -1.5854835510253906e-05, -2.2649765014648438e-06, -0.00577855110168457, -1.33514404296875e-05, -0.0003110170364379883, 0.0, -0.000156402587890625, -2.47955322265625e-05, -7.05718994140625e-05, -0.0005245208740234375, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -0.00045633313129656017, 0.0, -5.340576171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004069805145263672, 0.0, -0.19292163848876953, -0.000125885009765625, -1.7300195693969727, -2.288818359375e-05, -0.0014781951904296875, -3.5762775496550603e-07, -6.318072337307967e-06, -3.62396240234375e-05, -0.16871070861816406, -2.09808349609375e-05, -0.0003509521484375, -0.0002286428352817893, -3.3378546504536644e-06, -0.2278348207473755, -8.702273589733522e-06, -7.43865966796875e-05, -2.679027557373047, -0.0019550323486328125, -0.0009136199951171875, -3.62396240234375e-05, -0.007989883422851562, -0.011010408401489258, -1.1920928244535389e-07], "score": -5.032340525060462, "model_output": {"hole4": "player", "hole0": "KillCommand", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"value": {"hole1": "<UNK>", "_type": "Template43", "hole0": {"_type": "Template64"}}, "_type": "Expr"}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Kill Command", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(5), self)\n        player.<UNK>()\n"}, {"choice_history": [121, 200, "Kill", "Command", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 17, 156, 50, "hero", "<EOS>", "<UNK>", "<EOS>", 317, 12, 320, 75, 190, "5", "<EOS>", 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110, 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-2.6702880859375e-05, -0.0001163482666015625, -2.0027044229209423e-05, -0.0007697342080064118, -1.1920928244535389e-07, -7.748021744191647e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0002269744873046875, -0.0002536773681640625, -0.000202178955078125, -9.536738616588991e-07, -2.2292131689027883e-05, -3.457069396972656e-05, 0.0, -1.5854835510253906e-05, -2.2649765014648438e-06, -0.00577855110168457, -1.33514404296875e-05, -0.0003110170364379883, 0.0, -0.000156402587890625, -2.47955322265625e-05, -7.05718994140625e-05, -0.0005245208740234375, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -0.00045633313129656017, 0.0, -5.340576171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004069805145263672, 0.0, -1.7879304885864258, -0.000164031982421875, -0.007816314697265625, -0.0004558563232421875, -0.0024509429931640625, -0.0001506805419921875, -0.010834693908691406, 0.0, -0.12975311279296875, -1.33514404296875e-05, -0.00650787353515625, -0.2515789270401001, -1.1920928244535389e-07, -0.8736201524734497, 0.0, -1.52587890625e-05, -0.41610145568847656, -5.7220458984375e-06, -1.090566635131836, -0.0006313323974609375, -0.0002754822780843824, -0.0006280753877945244, -4.00543212890625e-05, -0.014051437377929688, -8.0108642578125e-05, -8.20159912109375e-05, -4.768369876728684e-07, -1.1920928244535389e-07, -1.52587890625e-05, -0.007054328918457031, -2.288818359375e-05, -0.000362396240234375, -0.00018715565965976566, -7.152555099310121e-07, -0.20573818683624268, -2.264974000354414e-06, -0.000522613525390625, -0.001331329345703125, -0.0065460205078125, -0.0001277923583984375, -0.0003910064697265625, -7.1524955274071544e-06, -7.152555099310121e-07, -7.62939453125e-06, -0.005123138427734375, -7.62939453125e-06, -0.000110626220703125, -0.00011444083065725863, 0.0, -0.2023615539073944, -2.2649765014648438e-06, -0.00011444091796875], "score": -5.033470309690564, "model_output": {"hole4": "player", "hole0": "KillCommand", "hole6": [{"_type": "Template19"}, {"orelse": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "test": {"ops": [{"_type": "Is"}], "comparators": [{"_type": "Num", "n": 5}], "_type": "Compare", "left": {"attr": "<UNK>", "value": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Attribute"}}, "body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Kill Command", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.hero.<UNK> is 5:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Kill", "Command", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "cards_played", "<EOS>", 317, 9, 320, 113, 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110, 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-2.6702880859375e-05, -0.0001163482666015625, -2.0027044229209423e-05, -0.0007697342080064118, -1.1920928244535389e-07, -7.748021744191647e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0002269744873046875, -0.0002536773681640625, -0.000202178955078125, -9.536738616588991e-07, -2.2292131689027883e-05, -3.457069396972656e-05, 0.0, -1.5854835510253906e-05, -2.2649765014648438e-06, -0.00577855110168457, -1.33514404296875e-05, -0.0003110170364379883, 0.0, -0.000156402587890625, -2.47955322265625e-05, -7.05718994140625e-05, -0.0005245208740234375, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -0.00045633313129656017, 0.0, -5.340576171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004069805145263672, 0.0, -1.7879304885864258, -0.000164031982421875, -0.007816314697265625, -0.0004558563232421875, -0.0024509429931640625, -0.0001506805419921875, -0.010834693908691406, 0.0, -2.416728973388672, -0.04800748825073242, -3.814697265625e-06, -2.86102294921875e-05, -0.37530040740966797, -1.9073486328125e-06, -0.004290580749511719, -6.29425048828125e-05, -0.0047473907470703125, -0.0003509521484375, -0.0001201629638671875, -3.814689080172684e-06, -8.344646857949556e-07, -6.29425048828125e-05, -0.0013818740844726562, -1.33514404296875e-05, -0.0001583099365234375, -7.831997208995745e-05, -2.3841855067985307e-07, -0.24773991107940674, -4.887576324108522e-06, -0.0003910064697265625, -0.00087738037109375, -0.0017681121826171875, -0.0002117156982421875, -0.0002765655517578125, -1.5615987649653107e-05, -5.960462772236497e-07, -9.5367431640625e-06, -0.000457763671875, -5.7220458984375e-06, -7.82012939453125e-05, -0.00011289118992863223, 0.0, -0.13580967485904694, -2.3841855067985307e-07, -8.7738037109375e-05], "score": -5.0585575233879965, "model_output": {"hole4": "player", "hole0": "KillCommand", "hole6": [{"_type": "Template19"}, {"orelse": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "test": {"ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare", "left": {"attr": "cards_played", "value": {"_type": "Template64"}, "_type": "Attribute"}}, "body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Kill Command", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.cards_played > 0:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Kill", "Command", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 17, 156, 50, "hero", "<EOS>", "<UNK>", "<EOS>", 317, 15, 320, 75, 190, "5", "<EOS>", 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110, 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-2.6702880859375e-05, -0.0001163482666015625, -2.0027044229209423e-05, -0.0007697342080064118, -1.1920928244535389e-07, -7.748021744191647e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0002269744873046875, -0.0002536773681640625, -0.000202178955078125, -9.536738616588991e-07, -2.2292131689027883e-05, -3.457069396972656e-05, 0.0, -1.5854835510253906e-05, -2.2649765014648438e-06, -0.00577855110168457, -1.33514404296875e-05, -0.0003110170364379883, 0.0, -0.000156402587890625, -2.47955322265625e-05, -7.05718994140625e-05, -0.0005245208740234375, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -0.00045633313129656017, 0.0, -5.340576171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004069805145263672, 0.0, -1.7879304885864258, -0.000164031982421875, -0.007816314697265625, -0.0004558563232421875, -0.0024509429931640625, -0.0001506805419921875, -0.010834693908691406, 0.0, -0.12975311279296875, -1.33514404296875e-05, -0.00650787353515625, -0.2515789270401001, -1.1920928244535389e-07, -0.8736201524734497, 0.0, -1.52587890625e-05, -1.5894804000854492, -3.814697265625e-06, -0.05133628845214844, -6.103515625e-05, -0.0001511559239588678, -0.0002923840656876564, -5.7220458984375e-05, -0.0058040618896484375, -0.0001049041748046875, -8.0108642578125e-05, -4.768369876728684e-07, -1.1920928244535389e-07, -1.52587890625e-05, -0.007846832275390625, -2.09808349609375e-05, -0.0004329681396484375, -0.00016033451538532972, -5.960462772236497e-07, -0.21444952487945557, -2.0265558760002023e-06, -0.0004024505615234375, -0.0011920928955078125, -0.0046024322509765625, -0.0001392364501953125, -0.0003452301025390625, -7.271697086252971e-06, -7.152555099310121e-07, -7.62939453125e-06, -0.004712104797363281, -7.62939453125e-06, -0.0001068115234375, -0.00010478490003151819, 0.0, -0.194051593542099, -2.2649765014648438e-06, -0.0001087188720703125], "score": -5.156947303739891, "model_output": {"hole4": "player", "hole0": "KillCommand", "hole6": [{"_type": "Template19"}, {"orelse": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "test": {"ops": [{"_type": "LtE"}], "comparators": [{"_type": "Num", "n": 5}], "_type": "Compare", "left": {"attr": "<UNK>", "value": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Attribute"}}, "body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Kill Command", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.hero.<UNK> <= 5:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Kill", "Command", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 17, 156, 50, "hero", "<EOS>", "health", "<EOS>", 317, 12, 320, 75, 190, "5", "<EOS>", 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110, 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score_history": [-2.6702880859375e-05, -0.0001163482666015625, -2.0027044229209423e-05, -0.0007697342080064118, -1.1920928244535389e-07, -7.748021744191647e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0002269744873046875, -0.0002536773681640625, -0.000202178955078125, -9.536738616588991e-07, -2.2292131689027883e-05, -3.457069396972656e-05, 0.0, -1.5854835510253906e-05, -2.2649765014648438e-06, -0.00577855110168457, -1.33514404296875e-05, -0.0003110170364379883, 0.0, -0.000156402587890625, -2.47955322265625e-05, -7.05718994140625e-05, -0.0005245208740234375, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -0.00045633313129656017, 0.0, -5.340576171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004069805145263672, 0.0, -1.7879304885864258, -0.000164031982421875, -0.007816314697265625, -0.0004558563232421875, -0.0024509429931640625, -0.0001506805419921875, -0.010834693908691406, 0.0, -0.12975311279296875, -1.33514404296875e-05, -0.00650787353515625, -0.2515789270401001, -1.1920928244535389e-07, -0.6032735109329224, -1.9073486328125e-06, -4.1961669921875e-05, -0.13100433349609375, -7.62939453125e-06, -0.5214262008666992, -0.0003452301025390625, -0.00033020551200024784, -0.00039285424281843007, -3.0517578125e-05, -0.001293182373046875, -4.1961669921875e-05, -9.5367431640625e-05, -4.7683693082944956e-07, -1.1920928244535389e-07, -1.71661376953125e-05, -0.008641242980957031, -2.47955322265625e-05, -0.00037384033203125, -0.00017046701395884156, -5.960462772236497e-07, -0.20246458053588867, -2.145764938177308e-06, -0.000522613525390625, -0.0011386871337890625, -0.0075054168701171875, -0.0001125335693359375, -0.0004634857177734375, -7.3909159254981205e-06, -5.960462772236497e-07, -7.62939453125e-06, -0.004750251770019531, -7.62939453125e-06, -0.0001163482666015625, -0.00010180466051679105, 0.0, -1.7016245126724243, -1.0967253729177173e-05, -0.0001773834228515625], "score": -5.393747977857267, "model_output": {"hole4": "player", "hole0": "KillCommand", "hole6": [{"_type": "Template19"}, {"orelse": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "test": {"ops": [{"_type": "Is"}], "comparators": [{"_type": "Num", "n": 5}], "_type": "Compare", "left": {"attr": "health", "value": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Attribute"}}, "body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Kill Command", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.hero.health is 5:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.damage(player.effective_spell_damage(3), self)\n"}, {"choice_history": [121, 200, "Kill", "Command", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 17, 156, 50, "hero", "<EOS>", "health", "<EOS>", 317, 12, 320, 75, 190, "5", "<EOS>", 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-2.6702880859375e-05, -0.0001163482666015625, -2.0027044229209423e-05, -0.0007697342080064118, -1.1920928244535389e-07, -7.748021744191647e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0002269744873046875, -0.0002536773681640625, -0.000202178955078125, -9.536738616588991e-07, -2.2292131689027883e-05, -3.457069396972656e-05, 0.0, -1.5854835510253906e-05, -2.2649765014648438e-06, -0.00577855110168457, -1.33514404296875e-05, -0.0003110170364379883, 0.0, -0.000156402587890625, -2.47955322265625e-05, -7.05718994140625e-05, -0.0005245208740234375, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -0.00045633313129656017, 0.0, -5.340576171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004069805145263672, 0.0, -1.7879304885864258, -0.000164031982421875, -0.007816314697265625, -0.0004558563232421875, -0.0024509429931640625, -0.0001506805419921875, -0.010834693908691406, 0.0, -0.12975311279296875, -1.33514404296875e-05, -0.00650787353515625, -0.2515789270401001, -1.1920928244535389e-07, -0.6032735109329224, -1.9073486328125e-06, -4.1961669921875e-05, -0.13100433349609375, -7.62939453125e-06, -0.5214262008666992, -0.0003452301025390625, -0.00033020551200024784, -0.00039285424281843007, -3.0517578125e-05, -0.001293182373046875, -4.1961669921875e-05, -9.5367431640625e-05, -4.7683693082944956e-07, -1.1920928244535389e-07, -1.71661376953125e-05, -0.008641242980957031, -2.47955322265625e-05, -0.00037384033203125, -0.00017046701395884156, -5.960462772236497e-07, -1.7209253311157227, -1.1205658665858209e-05, -0.0003757476806640625, -0.0009250640869140625, -0.0008335113525390625, -4.38690185546875e-05, -0.0006694793701171875, -2.515251253498718e-05, -3.576278118089249e-07, -1.1444091796875e-05, -0.00080108642578125, -7.62939453125e-06, -0.000102996826171875, -0.00010538098285906017, 0.0, -0.19430813193321228, -2.2649765014648438e-06, -0.0001049041748046875], "score": -5.393987558171808, "model_output": {"hole4": "player", "hole0": "KillCommand", "hole6": [{"_type": "Template19"}, {"orelse": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "test": {"ops": [{"_type": "Is"}], "comparators": [{"_type": "Num", "n": 5}], "_type": "Compare", "left": {"attr": "health", "value": {"attr": "hero", "value": {"_type": "Template64"}, "_type": "Attribute"}, "_type": "Attribute"}}, "body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 3, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Kill Command", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.hero.health is 5:\n            self.target.damage(player.effective_spell_damage(3), self)\n        else:\n            self.target.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Kill", "Command", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 20, 163, 17, 156, 40, "<UNK>", "<EOS>", 321, 65, 156, 50, "game", "<EOS>", 70, 180, 4, 229, "x", "<EOS>", 21, 166, 17, 156, 17, 156, 41, "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 133, 174, 21, 166, 25, 186, "<UNK>", "<EOS>", 317, 12, 320, 74, 187, "Null", "<EOS>", 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110, 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-2.6702880859375e-05, -0.0001163482666015625, -2.0027044229209423e-05, -0.0007697342080064118, -1.1920928244535389e-07, -7.748021744191647e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0002269744873046875, -0.0002536773681640625, -0.000202178955078125, -9.536738616588991e-07, -2.2292131689027883e-05, -3.457069396972656e-05, 0.0, -1.5854835510253906e-05, -2.2649765014648438e-06, -0.00577855110168457, -1.33514404296875e-05, -0.0003110170364379883, 0.0, -0.000156402587890625, -2.47955322265625e-05, -7.05718994140625e-05, -0.0005245208740234375, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -0.00045633313129656017, 0.0, -5.340576171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004069805145263672, 0.0, -0.19292163848876953, -0.000125885009765625, -0.1988391876220703, -1.9073486328125e-05, 0.0, -0.0003299713134765625, -3.814697265625e-06, -0.0015455401735380292, -0.0003156163729727268, -0.007388114929199219, -0.0003070831298828125, -1.52587890625e-05, -3.0517578125e-05, -0.0026693344116210938, -0.010024785995483398, -1.9550323486328125e-05, -0.00600433349609375, -0.0007495880126953125, -3.814697265625e-05, -0.000354766845703125, -0.0013338207500055432, -1.1920928244535389e-07, -0.004105567932128906, -0.0001010894775390625, -7.05718994140625e-05, -0.000263214111328125, -0.002882873173803091, 0.0, -0.0062122344970703125, -2.6702880859375e-05, -0.0004367828369140625, -1.9073486328125e-06, -0.000438690185546875, -1.9073486328125e-05, -4.376502990722656, -0.17819428443908691, -6.103515625e-05, -0.008074760437011719, -1.9073486328125e-06, -9.918212890625e-05, -0.013582229614257812, -1.9073486328125e-06, -0.006770133972167969, -5.7220458984375e-06, -1.52587890625e-05, -1.9073486328125e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.018599510192871094, -5.7220458984375e-06, -0.0057659149169921875, -0.0014133453369140625, -0.0009403228759765625, -4.9591064453125e-05, -0.0008182525634765625, -1.52587890625e-05, -0.0004608631134033203, -4.327211718191393e-05, -0.00031280517578125, -0.003925323486328125, -2.47955322265625e-05, -0.0022945404052734375, -0.00014495849609375, -0.00010323512833565474, -0.00033104419708251953, -0.0357666015625, -4.38690185546875e-05, -9.5367431640625e-06, -0.0016498565673828125, -2.861011125787627e-06, -3.576278118089249e-07, -1.71661376953125e-05, -0.000453948974609375, -2.47955322265625e-05, -0.0002956390380859375, -0.0001826285879360512, -1.1920928244535389e-07, -0.2586630582809448, -8.344646857949556e-07, -0.0004215240478515625, -0.00022125244140625, -0.01268768310546875, -0.000408172607421875, -0.000518798828125, -6.198811206559185e-06, -9.536738616588991e-07, -9.5367431640625e-06, -0.008522987365722656, -7.62939453125e-06, -8.392333984375e-05, -0.00012004372547380626, 0.0, -0.12037115544080734, -1.1920928244535389e-07, -0.0001087188720703125], "score": -5.506364718138258, "model_output": {"hole4": "player", "hole0": "KillCommand", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"body": {"ops": [{"_type": "Is"}], "comparators": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Compare", "left": {"attr": "minion_type", "value": {"attr": "card", "value": {"_type": "Template52"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "x"}}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"orelse": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "test": {"ops": [{"_type": "Is"}], "comparators": [{"value": "Null", "_type": "NameConstant"}], "_type": "Compare", "left": {"_type": "Name", "id": "<UNK>"}}, "body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Kill Command", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = hearthbreaker.targeting.<UNK>(player.game, lambda x: self.\n            target.card.minion_type is MINION_TYPE.BEAST)\n        if <UNK> is Null:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Kill", "Command", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 20, 163, 17, 156, 40, "<UNK>", "<EOS>", 321, 65, 156, 50, "game", "<EOS>", 70, 180, 4, 229, "x", "<EOS>", 21, 166, 17, 156, 17, 156, 25, 186, "x", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 133, 174, 21, 166, 25, 186, "<UNK>", "<EOS>", 317, 12, 320, 74, 187, "Null", "<EOS>", 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110, 332, 145, 250, 41, "damage", "<EOS>", 321, 106, 110], "score_history": [-2.6702880859375e-05, -0.0001163482666015625, -2.0027044229209423e-05, -0.0007697342080064118, -1.1920928244535389e-07, -7.748021744191647e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0002269744873046875, -0.0002536773681640625, -0.000202178955078125, -9.536738616588991e-07, -2.2292131689027883e-05, -3.457069396972656e-05, 0.0, -1.5854835510253906e-05, -2.2649765014648438e-06, -0.00577855110168457, -1.33514404296875e-05, -0.0003110170364379883, 0.0, -0.000156402587890625, -2.47955322265625e-05, -7.05718994140625e-05, -0.0005245208740234375, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -0.00045633313129656017, 0.0, -5.340576171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004069805145263672, 0.0, -0.19292163848876953, -0.000125885009765625, -0.1988391876220703, -1.9073486328125e-05, 0.0, -0.0003299713134765625, -3.814697265625e-06, -0.0015455401735380292, -0.0003156163729727268, -0.007388114929199219, -0.0003070831298828125, -1.52587890625e-05, -3.0517578125e-05, -0.0026693344116210938, -0.010024785995483398, -1.9550323486328125e-05, -0.00600433349609375, -0.0007495880126953125, -3.814697265625e-05, -0.000354766845703125, -0.0013338207500055432, -1.1920928244535389e-07, -0.004105567932128906, -0.0001010894775390625, -7.05718994140625e-05, -0.000263214111328125, -0.002882873173803091, 0.0, -0.0062122344970703125, -2.6702880859375e-05, -0.0004367828369140625, -1.9073486328125e-06, -0.000438690185546875, -1.9073486328125e-05, -0.023275375366210938, -9.5367431640625e-06, -0.0069658756256103516, 0.0, -0.010808587074279785, 0.0, -0.015428543090820312, 0.0, -8.58306884765625e-05, -0.021735191345214844, -1.9073486328125e-06, -0.0012569427490234375, -3.62396240234375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -1.9073486328125e-06, -0.01125335693359375, -5.7220458984375e-06, -0.008424758911132812, -0.0015163421630859375, -0.001430511474609375, -5.14984130859375e-05, -0.000743865966796875, -1.52587890625e-05, -0.00040912628173828125, -4.70866471005138e-05, -0.0003452301025390625, -0.0039234161376953125, -2.6702880859375e-05, -0.0023374557495117188, -0.000148773193359375, -0.00010251987987430766, -0.00032532215118408203, -0.03738975524902344, -4.57763671875e-05, -7.62939453125e-06, -0.0016002655029296875, -3.0994276585261105e-06, -3.576278118089249e-07, -1.52587890625e-05, -0.00043487548828125, -2.47955322265625e-05, -0.0002689361572265625, -0.0001807212393032387, -1.1920928244535389e-07, -0.26034677028656006, -8.344646857949556e-07, -0.000392913818359375, -0.0002498626708984375, -0.01316070556640625, -0.00040435791015625, -0.0005435943603515625, -6.079604645492509e-06, -9.536738616588991e-07, -9.5367431640625e-06, -4.879377365112305, -0.0009059906005859375], "score": -5.753312908041416, "model_output": {"hole4": "player", "hole0": "KillCommand", "hole6": [{"_type": "Template19"}, {"value": {"func": {"attr": "<UNK>", "value": {"_type": "Template50"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "game", "value": {"_type": "Template64"}, "_type": "Attribute"}, {"body": {"ops": [{"_type": "Is"}], "comparators": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Compare", "left": {"attr": "minion_type", "value": {"attr": "card", "value": {"_type": "Name", "id": "x"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Lambda", "args": {"_type": "Template26", "hole0": "x"}}]}, "targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign"}, {"orelse": [{"hole1": "damage", "hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "test": {"ops": [{"_type": "Is"}], "comparators": [{"value": "Null", "_type": "NameConstant"}], "_type": "Compare", "left": {"_type": "Name", "id": "<UNK>"}}, "body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "_type": "If"}], "hole1": "SpellCard", "hole2": [{"hole4": {"attr": "find_spell_target", "value": {"_type": "Template50"}, "_type": "Attribute"}, "hole0": "Kill Command", "hole1": 3, "hole2": "HUNTER", "_type": "Template11", "hole3": "target_func"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = hearthbreaker.targeting.<UNK>(player.game, lambda x: x.card\n            .minion_type is MINION_TYPE.BEAST)\n        if <UNK> is Null:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.damage(4, self)\n"}], "index": 58}
{"beams": [{"choice_history": [121, 198, "Kobold", "Geomancer", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 46], "score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -0.005817985162138939, -0.0030346375424414873, -7.390969585685525e-06, 0.0, -4.29153169534402e-06, -1.8477434423402883e-05, -6.103515625e-05, -0.0002193450927734375, -0.0001506805419921875, -9.548207890475169e-05, -3.266334533691406e-05, -3.4570680327306036e-06, 0.0, -6.437305273720995e-06, 0.0, -0.0032601349521428347, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.00011515617370605469, 0.0, -0.0001201629638671875, -0.0002384185791015625, -6.4849853515625e-05, 0.0, -4.768370445162873e-07, -1.771992538124323e-05, -3.576278118089249e-07, -0.0024690579157322645, -2.3841855067985307e-07, -0.00109100341796875], "score": -0.01689240239855394, "model_output": {"hole4": "player", "hole0": "KoboldGeomancer", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Kobold Geomancer"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 2}]}, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, spell_damage=1)\n"}, {"choice_history": [121, 198, "<UNK>", "Geomancer", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 46], "score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -5.158534526824951, -0.0030346375424414873, -7.390969585685525e-06, 0.0, -4.29153169534402e-06, -1.8477434423402883e-05, -6.103515625e-05, -0.0002193450927734375, -0.0001506805419921875, -9.548207890475169e-05, -3.266334533691406e-05, -3.4570680327306036e-06, 0.0, -6.437305273720995e-06, 0.0, -0.0032601349521428347, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.00011515617370605469, 0.0, -0.0001201629638671875, -0.0002384185791015625, -6.4849853515625e-05, 0.0, -4.768370445162873e-07, -1.771992538124323e-05, -3.576278118089249e-07, -0.0024690579157322645, -2.3841855067985307e-07, -0.00109100341796875], "score": -5.169608944061366, "model_output": {"hole4": "player", "hole0": "<UNK>Geomancer", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Kobold Geomancer"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 2}]}, "inferred_code": "class <UNK>Geomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, spell_damage=1)\n"}, {"choice_history": [121, 198, "Kobold", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 46], "score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -0.005817985162138939, -5.8120808601379395, -7.390969585685525e-06, 0.0, -4.29153169534402e-06, -1.8477434423402883e-05, -6.103515625e-05, -0.0002193450927734375, -0.0001506805419921875, -9.548207890475169e-05, -3.266334533691406e-05, -3.4570680327306036e-06, 0.0, -6.437305273720995e-06, 0.0, -0.0032601349521428347, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.00011515617370605469, 0.0, -0.0001201629638671875, -0.0002384185791015625, -6.4849853515625e-05, 0.0, -4.768370445162873e-07, -1.771992538124323e-05, -3.576278118089249e-07, -0.0024690579157322645, -2.3841855067985307e-07, -0.00109100341796875], "score": -5.825938624994052, "model_output": {"hole4": "player", "hole0": "Kobold<UNK>", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Kobold Geomancer"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 2}]}, "inferred_code": "class Kobold<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, spell_damage=1)\n"}, {"choice_history": [121, 198, "Kobold", "Geomancer", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 46], "score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -0.005817985162138939, -0.0030346375424414873, -7.390969585685525e-06, 0.0, -4.29153169534402e-06, -1.8477434423402883e-05, -6.103515625e-05, -0.0002193450927734375, -0.0001506805419921875, -9.548207890475169e-05, -3.266334533691406e-05, -3.4570680327306036e-06, 0.0, -6.437305273720995e-06, 0.0, -6.095225811004639, -9.5367431640625e-06, -1.71661376953125e-05, 0.0, -0.0004661083221435547, 0.0, -0.0001087188720703125, -0.000213623046875, -5.91278076171875e-05, 0.0, -3.576278118089249e-07, -1.6647507436573505e-05, -3.576278118089249e-07, -0.0024062348529696465, -1.1920928244535389e-07, -0.0010833740234375], "score": -6.10910484237899, "model_output": {"hole4": "player", "hole0": "KoboldGeomancer", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template14", "hole0": "Kobold Geomancer"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 2}]}, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, spell_damage=1)\n"}, {"choice_history": [121, 198, "Kobold", "Geomancer", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 46], "score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -0.005817985162138939, -0.0030346375424414873, -7.390969585685525e-06, 0.0, -4.29153169534402e-06, -1.8477434423402883e-05, -6.103515625e-05, -0.0002193450927734375, -0.0001506805419921875, -9.548207890475169e-05, -3.266334533691406e-05, -3.4570680327306036e-06, 0.0, -6.437305273720995e-06, 0.0, -7.118210315704346, -7.62939453125e-06, -8.022784459171817e-05, 0.0, -4.291534423828125e-05, 0.0, -9.72747802734375e-05, -0.000274658203125, -4.1961669921875e-05, 0.0, -3.576278118089249e-07, -1.868480467237532e-05, -3.576278118089249e-07, -0.0023138492833822966, -1.1920928244535389e-07, -0.0011444091796875], "score": -7.131730420269712, "model_output": {"hole4": "player", "hole0": "KoboldGeomancer", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Kobold Geomancer"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 2}]}, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, spell_damage=1)\n"}, {"choice_history": [121, 198, "Kobold", "Geomancer", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -0.005817985162138939, -0.0030346375424414873, -7.390969585685525e-06, 0.0, -4.29153169534402e-06, -1.8477434423402883e-05, -6.103515625e-05, -0.0002193450927734375, -0.0001506805419921875, -9.548207890475169e-05, -3.266334533691406e-05, -3.4570680327306036e-06, 0.0, -6.437305273720995e-06, 0.0, -0.0032601349521428347, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.00011515617370605469, 0.0, -0.0001201629638671875, -0.0002384185791015625, -6.4849853515625e-05, 0.0, -4.768370445162873e-07, -1.771992538124323e-05, -3.576278118089249e-07, -7.168030738830566, 0.0, -0.11670398712158203], "score": -7.298066828598451, "model_output": {"hole4": "player", "hole0": "KoboldGeomancer", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Kobold Geomancer"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, charge=True)\n"}, {"choice_history": [121, 198, "Kobold", "Geomancer", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 52], "score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -0.005817985162138939, -0.0030346375424414873, -7.390969585685525e-06, 0.0, -4.29153169534402e-06, -1.8477434423402883e-05, -6.103515625e-05, -0.0002193450927734375, -0.0001506805419921875, -9.548207890475169e-05, -3.266334533691406e-05, -3.4570680327306036e-06, 0.0, -6.437305273720995e-06, 0.0, -0.0032601349521428347, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.00011515617370605469, 0.0, -0.0001201629638671875, -0.0002384185791015625, -6.4849853515625e-05, 0.0, -4.768370445162873e-07, -1.771992538124323e-05, -3.576278118089249e-07, -0.0024690579157322645, -2.3841855067985307e-07, -7.453361511230469], "score": -7.469162910211054, "model_output": {"hole4": "player", "hole0": "KoboldGeomancer", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Kobold Geomancer"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template67"}, "hole0": 2}]}, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, spell_damage=5)\n"}, {"choice_history": [121, 198, "Kobold", "Geomancer", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "divine_shield", "<EOS>", 62], "score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -0.005817985162138939, -0.0030346375424414873, -7.390969585685525e-06, 0.0, -4.29153169534402e-06, -1.8477434423402883e-05, -6.103515625e-05, -0.0002193450927734375, -0.0001506805419921875, -9.548207890475169e-05, -3.266334533691406e-05, -3.4570680327306036e-06, 0.0, -6.437305273720995e-06, 0.0, -0.0032601349521428347, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.00011515617370605469, 0.0, -0.0001201629638671875, -0.0002384185791015625, -6.4849853515625e-05, 0.0, -4.768370445162873e-07, -1.771992538124323e-05, -3.576278118089249e-07, -8.282267570495605, 0.0, -0.1704883575439453], "score": -8.466088030685853, "model_output": {"hole4": "player", "hole0": "KoboldGeomancer", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Kobold Geomancer"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "divine_shield", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, divine_shield=True)\n"}, {"choice_history": [121, 198, "Kobold", "Geomancer", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 46], "score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -0.005817985162138939, -0.0030346375424414873, -7.390969585685525e-06, 0.0, -4.29153169534402e-06, -1.8477434423402883e-05, -6.103515625e-05, -9.081254959106445, -0.00011444091796875, -2.753696753643453e-05, -2.944469451904297e-05, -7.033342626527883e-06, 0.0, -1.1923420970560983e-06, 0.0, -0.0011453628540039062, -9.5367431640625e-06, -0.1817619800567627, 0.0, -1.9073486328125e-05, 0.0, -0.00014507770538330078, 0.0, -0.0002117156982421875, -0.000179290771484375, -2.86102294921875e-05, 0.0, -3.576278118089249e-07, -2.3686327040195465e-05, -2.3841855067985307e-07, -0.002264614449813962, -1.1920928244535389e-07, -0.00098419189453125], "score": -9.277198057006807, "model_output": {"hole4": "player", "hole0": "KoboldGeomancer", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template15", "hole3": "COMMON", "hole0": "Kobold Geomancer"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 2}]}, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, spell_damage=1)\n"}, {"choice_history": [121, 198, "Kobold", "Geomancer", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 46], "score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -0.005817985162138939, -0.0030346375424414873, -7.390969585685525e-06, 0.0, -4.29153169534402e-06, -1.8477434423402883e-05, -6.103515625e-05, -0.0002193450927734375, -0.0001506805419921875, -9.548207890475169e-05, -3.266334533691406e-05, -3.4570680327306036e-06, 0.0, -6.437305273720995e-06, 0.0, -0.0032601349521428347, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -9.264673233032227, -1.9073486328125e-05, -7.43865966796875e-05, -0.0003509521484375, -3.4332275390625e-05, 0.0, -3.576278118089249e-07, -1.7847662093117833e-05, -2.3841855067985307e-07, -0.006845214869827032, -1.1920928244535389e-07, -0.0015850067138671875], "score": -9.286375722726369, "model_output": {"hole4": "p", "hole0": "KoboldGeomancer", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Kobold Geomancer"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 2}]}, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, p):\n        return Minion(2, 2, spell_damage=1)\n"}, {"choice_history": [121, 198, "Kobold", "Geomancer", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "<UNK>", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 46], "score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -0.005817985162138939, -0.0030346375424414873, -7.390969585685525e-06, 0.0, -4.29153169534402e-06, -1.8477434423402883e-05, -6.103515625e-05, -0.0002193450927734375, -0.0001506805419921875, -9.273109436035156, -3.266334533691406e-05, -3.4570680327306036e-06, 0.0, -6.437305273720995e-06, 0.0, -0.0032601349521428347, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.00011515617370605469, 0.0, -0.0001201629638671875, -0.0002384185791015625, -6.4849853515625e-05, 0.0, -4.768370445162873e-07, -1.771992538124323e-05, -3.576278118089249e-07, -0.0024690579157322645, -2.3841855067985307e-07, -0.00109100341796875], "score": -9.289906356354805, "model_output": {"hole4": "player", "hole0": "KoboldGeomancer", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "<UNK> Geomancer"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 2}]}, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, spell_damage=1)\n"}, {"choice_history": [121, 198, "Kobold", "Geomancer", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -0.005817985162138939, -0.0030346375424414873, -7.390969585685525e-06, 0.0, -4.29153169534402e-06, -1.8477434423402883e-05, -6.103515625e-05, -0.0002193450927734375, -0.0001506805419921875, -9.548207890475169e-05, -3.266334533691406e-05, -3.4570680327306036e-06, 0.0, -6.437305273720995e-06, 0.0, -0.0032601349521428347, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.00011515617370605469, 0.0, -0.0001201629638671875, -0.0002384185791015625, -6.4849853515625e-05, 0.0, -4.768370445162873e-07, -1.771992538124323e-05, -3.576278118089249e-07, -9.25126838684082, 0.0, -0.03968238830566406], "score": -9.304282877792787, "model_output": {"hole4": "player", "hole0": "KoboldGeomancer", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Kobold Geomancer"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}]}, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}, {"choice_history": [121, 198, "Kobold", "Geomancer", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "2", "<EOS>", 46], "score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -0.005817985162138939, -0.0030346375424414873, -7.390969585685525e-06, 0.0, -4.29153169534402e-06, -1.8477434423402883e-05, -6.103515625e-05, -0.0002193450927734375, -0.0001506805419921875, -9.548207890475169e-05, -3.266334533691406e-05, -3.4570680327306036e-06, 0.0, -6.437305273720995e-06, 0.0, -0.0032601349521428347, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.00011515617370605469, 0.0, -0.0001201629638671875, -0.0002384185791015625, -6.4849853515625e-05, 0.0, -4.768370445162873e-07, -1.771992538124323e-05, -3.576278118089249e-07, -9.228754997253418, 0.0, -0.06307411193847656], "score": -9.305161211838197, "model_output": {"hole4": "player", "hole0": "KoboldGeomancer", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Kobold Geomancer"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "2", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 2}]}, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, 2=1)\n"}, {"choice_history": [121, 198, "Kobold", "Geomancer", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -0.005817985162138939, -0.0030346375424414873, -7.390969585685525e-06, 0.0, -4.29153169534402e-06, -1.8477434423402883e-05, -6.103515625e-05, -0.0002193450927734375, -0.0001506805419921875, -9.548207890475169e-05, -3.266334533691406e-05, -3.4570680327306036e-06, 0.0, -6.437305273720995e-06, 0.0, -0.0032601349521428347, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.00011515617370605469, 0.0, -0.0001201629638671875, -0.0002384185791015625, -6.4849853515625e-05, 0.0, -4.768370445162873e-07, -1.771992538124323e-05, -3.576278118089249e-07, -8.01543140411377, -1.9073486328125e-06, -0.05683135986328125, -0.0004444122314453125, -0.005262851715087891, 0.0, -0.012235641479492188, -0.5195503234863281, -0.0002040863037109375, -0.010786044411361217, 0.0, -0.6589679718017578, -0.00494384765625, -0.004271204583346844, -2.384185791015625e-06, 0.0, -1.71661376953125e-05, -0.26925086975097656], "score": -9.571533577715229, "model_output": {"hole4": "player", "hole0": "KoboldGeomancer", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Kobold Geomancer"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"_type": "Template46", "hole0": "SelfSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, auras=[Aura(ChangeAttack(1), SelfSelector())])\n"}, {"choice_history": [121, 198, "Kobold", "Geomancer", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 93, 255, "Damage", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Enemy", "Player", "<EOS>"], "score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -0.005817985162138939, -0.0030346375424414873, -7.390969585685525e-06, 0.0, -4.29153169534402e-06, -1.8477434423402883e-05, -6.103515625e-05, -0.0002193450927734375, -0.0001506805419921875, -9.548207890475169e-05, -3.266334533691406e-05, -3.4570680327306036e-06, 0.0, -6.437305273720995e-06, 0.0, -0.0032601349521428347, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.00011515617370605469, 0.0, -0.0001201629638671875, -0.0002384185791015625, -6.4849853515625e-05, 0.0, -4.768370445162873e-07, -1.771992538124323e-05, -3.576278118089249e-07, -8.01446533203125, -3.6716461181640625e-05, -0.0001087188720703125, -0.000194549560546875, -0.0003299713134765625, -1.71661376953125e-05, -0.0028077363967895508, -5.960462772236497e-07, -0.00736236572265625, -0.30987071990966797, -0.013257980346679688, -1.0480470657348633, -1.430511474609375e-05, -0.30797672271728516, -0.0001468658447265625, -0.19341953098773956, -0.001077190856449306, -1.9073468138230965e-06, -0.6298284530639648, -0.1389983892440796, -2.2649765014648438e-06], "score": -10.681296651331763, "model_output": {"hole4": "player", "hole0": "KoboldGeomancer", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Kobold Geomancer"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": "deathrattle", "_type": "Template27", "hole3": {"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"_type": "Template46", "hole0": "Damage"}, {"hole1": "EnemyPlayer", "_type": "Template31", "hole0": "MinionSelector"}]}, "hole0": 2}]}, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, deathrattle=Deathrattle(Damage(),\n            MinionSelector(EnemyPlayer())))\n"}], "index": 59}
{"beams": [{"choice_history": [121, 198, "<UNK>", "Elite", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 62], "score_history": [-0.0001239776611328125, -3.0517578125e-05, -0.032860249280929565, -0.016505014151334763, -5.364403477869928e-06, -5.96035533817485e-07, -4.0531158447265625e-06, -4.172325134277344e-06, -3.0517578125e-05, -0.000392913818359375, -0.00176239013671875, -0.0002022777043748647, -1.7762184143066406e-05, -1.1920928244535389e-07, 0.0, -0.0002006291615543887, 0.0, -0.003465890884399414, -7.62939453125e-06, -8.785724639892578e-05, 0.0, -0.0009958744049072266, 0.0, -0.0001850128173828125, -0.000843048095703125, -0.0001239776611328125, -1.1920928244535389e-07, -7.152555099310121e-07, -0.0003635883331298828, -1.6093124941107817e-05, -0.0073430524207651615, 0.0, -0.000278472900390625], "score": -0.06585188609254544, "model_output": {"hole4": "player", "hole0": "<UNK>Elite", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Kor'kron Elite"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class <UNK>Elite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n"}, {"choice_history": [121, 198, "Kor'kron", "Elite", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 62], "score_history": [-0.0001239776611328125, -3.0517578125e-05, -3.668133020401001, -0.016505014151334763, -5.364403477869928e-06, -5.96035533817485e-07, -4.0531158447265625e-06, -4.172325134277344e-06, -3.0517578125e-05, -0.000392913818359375, -0.00176239013671875, -0.0002022777043748647, -1.7762184143066406e-05, -1.1920928244535389e-07, 0.0, -0.0002006291615543887, 0.0, -0.003465890884399414, -7.62939453125e-06, -8.785724639892578e-05, 0.0, -0.0009958744049072266, 0.0, -0.0001850128173828125, -0.000843048095703125, -0.0001239776611328125, -1.1920928244535389e-07, -7.152555099310121e-07, -0.0003635883331298828, -1.6093124941107817e-05, -0.0073430524207651615, 0.0, -0.000278472900390625], "score": -3.701124657212617, "model_output": {"hole4": "player", "hole0": "Kor'kronElite", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Kor'kron Elite"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class Kor'kronElite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n"}, {"choice_history": [121, 198, "<UNK>", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 62], "score_history": [-0.0001239776611328125, -3.0517578125e-05, -0.032860249280929565, -4.651336669921875, -5.364403477869928e-06, -5.96035533817485e-07, -4.0531158447265625e-06, -4.172325134277344e-06, -3.0517578125e-05, -0.000392913818359375, -0.00176239013671875, -0.0002022777043748647, -1.7762184143066406e-05, -1.1920928244535389e-07, 0.0, -0.0002006291615543887, 0.0, -0.003465890884399414, -7.62939453125e-06, -8.785724639892578e-05, 0.0, -0.0009958744049072266, 0.0, -0.0001850128173828125, -0.000843048095703125, -0.0001239776611328125, -1.1920928244535389e-07, -7.152555099310121e-07, -0.0003635883331298828, -1.6093124941107817e-05, -0.0073430524207651615, 0.0, -0.000278472900390625], "score": -4.700683541863086, "model_output": {"hole4": "player", "hole0": "<UNK><UNK>", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Kor'kron Elite"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class <UNK><UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n"}, {"choice_history": [121, 198, "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 62], "score_history": [-0.0001239776611328125, -3.0517578125e-05, -0.032860249280929565, -5.0639543533325195, -0.0021696086041629314, -1.919269561767578e-05, -2.622604142743512e-06, -2.288818359375e-05, -0.000335693359375, -0.004714012145996094, -0.0005276002921164036, -3.0875205993652344e-05, -3.576278118089249e-07, 0.0, -0.000235318933846429, 0.0, -0.004184842109680176, -5.7220458984375e-06, -9.548664093017578e-05, 0.0, -0.0006543397903442383, 0.0, -0.0001697540283203125, -0.000461578369140625, -0.000102996826171875, -1.1920928244535389e-07, -7.152555099310121e-07, -0.0003521442413330078, -1.4066597032069694e-05, -0.0076498971320688725, 0.0, -0.00026702880859375], "score": -5.118985958559669, "model_output": {"hole4": "player", "hole0": "<UNK>", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Kor'kron Elite"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class <UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n"}, {"choice_history": [121, 198, "Force", "Tank", "Elite", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 62], "score_history": [-0.0001239776611328125, -3.0517578125e-05, -5.359698295593262, -0.20939978957176208, -0.052783939987421036, -5.7220458984375e-06, -2.3841312213335186e-07, -5.9604644775390625e-06, -2.2649765014648438e-06, -2.6702880859375e-05, -0.0004520416259765625, -0.0049648284912109375, -0.0004217927053105086, -1.9431114196777344e-05, -1.1920928244535389e-07, 0.0, -0.00017344942898489535, 0.0, -0.003500223159790039, -7.62939453125e-06, -7.069110870361328e-05, 0.0, -0.0009176731109619141, 0.0, -0.0001678466796875, -0.000690460205078125, -0.00011444091796875, -1.1920928244535389e-07, -7.152555099310121e-07, -0.0003502368927001953, -1.4543427823809907e-05, -0.007628677878528833, 0.0, -0.0002899169921875], "score": -5.641862245980278, "model_output": {"hole4": "player", "hole0": "ForceTankElite", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Kor'kron Elite"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class ForceTankElite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n"}, {"choice_history": [121, 198, "<UNK>", "Elite", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "3", "<EOS>", "divine_shield", "<EOS>", 62], "score_history": [-0.0001239776611328125, -3.0517578125e-05, -0.032860249280929565, -0.016505014151334763, -5.364403477869928e-06, -5.96035533817485e-07, -4.0531158447265625e-06, -4.172325134277344e-06, -3.0517578125e-05, -0.000392913818359375, -0.00176239013671875, -0.0002022777043748647, -1.7762184143066406e-05, -1.1920928244535389e-07, 0.0, -0.0002006291615543887, 0.0, -0.003465890884399414, -7.62939453125e-06, -8.785724639892578e-05, 0.0, -0.0009958744049072266, 0.0, -0.0001850128173828125, -0.000843048095703125, -0.0001239776611328125, -1.1920928244535389e-07, -7.152555099310121e-07, -0.0003635883331298828, -1.6093124941107817e-05, -6.150634288787842, -1.71661376953125e-05, -0.004566192626953125], "score": -6.21344800832388, "model_output": {"hole4": "player", "hole0": "<UNK>Elite", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Kor'kron Elite"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "divine_shield", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class <UNK>Elite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, divine_shield=True)\n"}, {"choice_history": [121, 198, "<UNK>", "Elite", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 62], "score_history": [-0.0001239776611328125, -3.0517578125e-05, -0.032860249280929565, -0.016505014151334763, -5.364403477869928e-06, -5.96035533817485e-07, -4.0531158447265625e-06, -4.172325134277344e-06, -3.0517578125e-05, -0.000392913818359375, -0.00176239013671875, -0.0002022777043748647, -1.7762184143066406e-05, -1.1920928244535389e-07, 0.0, -0.0002006291615543887, 0.0, -6.208259582519531, -1.33514404296875e-05, -9.5367431640625e-06, 0.0, -0.000476837158203125, 0.0, -0.000164031982421875, -0.0005016326904296875, -0.00014495849609375, -1.1920928244535389e-07, -7.152555099310121e-07, -0.0003752708435058594, -1.4424220353248529e-05, -0.007075904402881861, 0.0, -0.0002422332763671875], "score": -6.269419152582245, "model_output": {"hole4": "player", "hole0": "<UNK>Elite", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "MAGE", "_type": "Template14", "hole0": "Kor'kron Elite"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class <UNK>Elite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n"}, {"choice_history": [121, 198, "<UNK>", "Elite", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.0001239776611328125, -3.0517578125e-05, -0.032860249280929565, -0.016505014151334763, -5.364403477869928e-06, -5.96035533817485e-07, -4.0531158447265625e-06, -4.172325134277344e-06, -3.0517578125e-05, -0.000392913818359375, -0.00176239013671875, -0.0002022777043748647, -1.7762184143066406e-05, -1.1920928244535389e-07, 0.0, -0.0002006291615543887, 0.0, -0.003465890884399414, -7.62939453125e-06, -8.785724639892578e-05, 0.0, -0.0009958744049072266, 0.0, -0.0001850128173828125, -0.000843048095703125, -0.0001239776611328125, -1.1920928244535389e-07, -7.152555099310121e-07, -0.0003635883331298828, -1.6093124941107817e-05, -6.520618915557861, 0.0, -0.0005207061767578125], "score": -6.579369982506009, "model_output": {"hole4": "player", "hole0": "<UNK>Elite", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Kor'kron Elite"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class <UNK>Elite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n"}, {"choice_history": [121, 198, "<UNK>", "Elite", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "3", "<EOS>", "spell_damage", "<EOS>", 46], "score_history": [-0.0001239776611328125, -3.0517578125e-05, -0.032860249280929565, -0.016505014151334763, -5.364403477869928e-06, -5.96035533817485e-07, -4.0531158447265625e-06, -4.172325134277344e-06, -3.0517578125e-05, -0.000392913818359375, -0.00176239013671875, -0.0002022777043748647, -1.7762184143066406e-05, -1.1920928244535389e-07, 0.0, -0.0002006291615543887, 0.0, -0.003465890884399414, -7.62939453125e-06, -8.785724639892578e-05, 0.0, -0.0009958744049072266, 0.0, -0.0001850128173828125, -0.000843048095703125, -0.0001239776611328125, -1.1920928244535389e-07, -7.152555099310121e-07, -0.0003635883331298828, -1.6093124941107817e-05, -6.7813286781311035, -1.9073486328125e-06, -0.06305408477783203], "score": -6.902615031028958, "model_output": {"hole4": "player", "hole0": "<UNK>Elite", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Kor'kron Elite"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "spell_damage", "_type": "Template27", "hole3": {"_type": "Template60"}, "hole0": 4}]}, "inferred_code": "class <UNK>Elite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, spell_damage=1)\n"}, {"choice_history": [121, 198, "<UNK>", "Elite", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 62], "score_history": [-0.0001239776611328125, -3.0517578125e-05, -0.032860249280929565, -0.016505014151334763, -5.364403477869928e-06, -5.96035533817485e-07, -4.0531158447265625e-06, -4.172325134277344e-06, -3.0517578125e-05, -0.000392913818359375, -0.00176239013671875, -0.0002022777043748647, -1.7762184143066406e-05, -1.1920928244535389e-07, 0.0, -0.0002006291615543887, 0.0, -0.003465890884399414, -7.62939453125e-06, -8.785724639892578e-05, 0.0, -7.121657371520996, -1.9073486328125e-06, -4.1961669921875e-05, -0.0018978118896484375, -9.918212890625e-05, -1.1920926823449918e-07, -5.960462772236497e-07, -0.0006825923919677734, -1.966933996300213e-05, -0.006525752600282431, 0.0, -0.000225067138671875], "score": -7.186853963153936, "model_output": {"hole4": "p", "hole0": "<UNK>Elite", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Kor'kron Elite"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class <UNK>Elite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, p):\n        return Minion(4, 3, charge=True)\n"}, {"choice_history": [121, 198, "Tank", "Elite", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 62], "score_history": [-0.0001239776611328125, -3.0517578125e-05, -7.59469747543335, -0.00022897525923326612, -3.576278118089249e-07, -4.7682806325610727e-07, -5.841255187988281e-06, -4.172325134277344e-06, -2.86102294921875e-05, -0.0004482269287109375, -0.0025281906127929688, -0.00022837892174720764, -2.5153160095214844e-05, -2.3841855067985307e-07, 0.0, -0.0002146958140656352, 0.0, -0.0031702518463134766, -7.62939453125e-06, -8.404254913330078e-05, 0.0, -0.0008871555328369141, 0.0, -0.0001621246337890625, -0.000530242919921875, -0.0001125335693359375, -1.1920928244535389e-07, -7.152555099310121e-07, -0.0003559589385986328, -1.4305012882687151e-05, -0.007637499365955591, 0.0, -0.0002727508544921875], "score": -7.611800617136076, "model_output": {"hole4": "player", "hole0": "TankElite", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Kor'kron Elite"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class TankElite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n"}, {"choice_history": [121, 198, "Increase", "Elite", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 62], "score_history": [-0.0001239776611328125, -3.0517578125e-05, -7.804625988006592, -0.0006283943075686693, -3.218649908376392e-06, -5.960337148280814e-07, -5.841255187988281e-06, -4.172325134277344e-06, -2.6702880859375e-05, -0.0006847381591796875, -0.0029773712158203125, -0.0002420847595203668, -2.1338462829589844e-05, -2.3841855067985307e-07, 0.0, -0.00020849691645707935, 0.0, -0.0031931400299072266, -7.62939453125e-06, -8.404254913330078e-05, 0.0, -0.0008776187896728516, 0.0, -0.00016021728515625, -0.0005588531494140625, -0.0001125335693359375, -1.1920928244535389e-07, -7.152555099310121e-07, -0.0003521442413330078, -1.4066597032069694e-05, -0.007703898940235376, 0.0, -0.0002765655517578125], "score": -7.822925221192882, "model_output": {"hole4": "player", "hole0": "IncreaseElite", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Kor'kron Elite"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class IncreaseElite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n"}, {"choice_history": [121, 198, "Force", "Elite", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 62], "score_history": [-0.0001239776611328125, -3.0517578125e-05, -5.359698295593262, -2.480133056640625, -0.006588559597730637, -3.6947312764823437e-06, -4.172325134277344e-06, -4.172325134277344e-06, -2.6702880859375e-05, -0.0004062652587890625, -0.0021886825561523438, -0.00025459862081333995, -2.3365020751953125e-05, -2.3841855067985307e-07, 0.0, -0.0002154110698029399, 0.0, -0.003336191177368164, -9.5367431640625e-06, -8.404254913330078e-05, 0.0, -0.0008947849273681641, 0.0, -0.000179290771484375, -0.0006046295166015625, -0.0001163482666015625, -1.1920928244535389e-07, -7.152555099310121e-07, -0.0003616809844970703, -1.5258672647178173e-05, -0.007466553244739771, 0.0, -0.0002727508544921875], "score": -7.86304361245103, "model_output": {"hole4": "player", "hole0": "ForceElite", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Kor'kron Elite"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class ForceElite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n"}, {"choice_history": [121, 198, "<UNK>", "Elite", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "4", "<EOS>", "charge", "<EOS>", 62], "score_history": [-0.0001239776611328125, -3.0517578125e-05, -0.032860249280929565, -0.016505014151334763, -5.364403477869928e-06, -5.96035533817485e-07, -4.0531158447265625e-06, -4.172325134277344e-06, -3.0517578125e-05, -0.000392913818359375, -0.00176239013671875, -0.0002022777043748647, -1.7762184143066406e-05, -1.1920928244535389e-07, 0.0, -0.0002006291615543887, 0.0, -0.003465890884399414, -7.62939453125e-06, -8.785724639892578e-05, 0.0, -0.0009958744049072266, 0.0, -0.0001850128173828125, -0.000843048095703125, -0.0001239776611328125, -1.1920928244535389e-07, -7.152555099310121e-07, -7.924111366271973, -2.3841855067985307e-07, -0.011206388473510742, 0.0, -0.000270843505859375], "score": -7.993439515983212, "model_output": {"hole4": "player", "hole0": "<UNK>Elite", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Kor'kron Elite"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class <UNK>Elite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 4, charge=True)\n"}, {"choice_history": [121, 198, "<UNK>", "Elite", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "3", "<EOS>", "stealth", "<EOS>", 62], "score_history": [-0.0001239776611328125, -3.0517578125e-05, -0.032860249280929565, -0.016505014151334763, -5.364403477869928e-06, -5.96035533817485e-07, -4.0531158447265625e-06, -4.172325134277344e-06, -3.0517578125e-05, -0.000392913818359375, -0.00176239013671875, -0.0002022777043748647, -1.7762184143066406e-05, -1.1920928244535389e-07, 0.0, -0.0002006291615543887, 0.0, -0.003465890884399414, -7.62939453125e-06, -8.785724639892578e-05, 0.0, -0.0009958744049072266, 0.0, -0.0001850128173828125, -0.000843048095703125, -0.0001239776611328125, -1.1920928244535389e-07, -7.152555099310121e-07, -0.0003635883331298828, -1.6093124941107817e-05, -7.998682498931885, 0.0, -0.0012111663818359375], "score": -8.05812402608511, "model_output": {"hole4": "player", "hole0": "<UNK>Elite", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "WARRIOR", "_type": "Template14", "hole0": "Kor'kron Elite"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": "stealth", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 4}]}, "inferred_code": "class <UNK>Elite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, stealth=True)\n"}], "index": 60}
{"beams": [{"choice_history": [121, 198, "Leokk", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Leokk", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Minion", "Selector", "<EOS>", 320, 105], "score_history": [-0.00040435791015625, -4.38690185546875e-05, -8.415821503149346e-05, -0.0001437593309674412, -0.00018787430599331856, -1.1444091796875e-05, -1.919269561767578e-05, -0.0001125335693359375, -0.003459930419921875, -3.62396240234375e-05, -7.62939453125e-06, -0.00711822509765625, -4.76837158203125e-05, -0.0017242431640625, -3.4332275390625e-05, -0.00012969970703125, 0.0, -1.549720582261216e-05, -0.0024051666259765625, -0.000858306884765625, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.00047135353088378906, -0.000152587890625, -0.0026180732529610395, -7.62939453125e-06, -0.003935813903808594, -0.00030517578125, -0.0001220703125, -0.003025054931640625, -0.0009593963623046875, -0.0019227266311645508, -3.4332275390625e-05, -4.1961669921875e-05, 0.0, -1.3470649719238281e-05, 0.0, -3.0517578125e-05, -0.000476837158203125, -0.000484466552734375, -5.125983079778962e-06, -1.0728830375228426e-06, -2.6940973839373328e-05, -2.1457672119140625e-06, -0.000320429855491966, -6.4849853515625e-05, -2.288818359375e-05, -0.0001621246337890625, -0.00045680999755859375, -0.0002899169921875, -1.33514404296875e-05, -0.000301361083984375, -6.29425048828125e-05, -0.0006500257295556366, -5.7220458984375e-06, -0.0898885726928711, -0.000110626220703125, -0.0013366341590881348, -2.8848648071289062e-05, -3.576278118089249e-07, -1.9073486328125e-06, -0.0008983612060546875], "score": -0.1261214224917353, "model_output": {"hole4": "player", "hole0": "Leokk", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Leokk", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"_type": "Template46", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n"}, {"choice_history": [121, 198, "Leokk", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Leokk", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "minions", "<EOS>", 320, 105], "score_history": [-0.00040435791015625, -4.38690185546875e-05, -8.415821503149346e-05, -0.0001437593309674412, -0.00018787430599331856, -1.1444091796875e-05, -1.919269561767578e-05, -0.0001125335693359375, -0.003459930419921875, -3.62396240234375e-05, -7.62939453125e-06, -0.00711822509765625, -4.76837158203125e-05, -0.0017242431640625, -3.4332275390625e-05, -0.00012969970703125, 0.0, -1.549720582261216e-05, -0.0024051666259765625, -0.000858306884765625, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.00047135353088378906, -0.000152587890625, -0.0026180732529610395, -7.62939453125e-06, -0.003935813903808594, -0.00030517578125, -0.0001220703125, -0.003025054931640625, -0.0009593963623046875, -0.0019227266311645508, -3.4332275390625e-05, -4.1961669921875e-05, 0.0, -1.3470649719238281e-05, 0.0, -3.0517578125e-05, -0.000476837158203125, -0.000484466552734375, -5.125983079778962e-06, -1.0728830375228426e-06, -2.6940973839373328e-05, -2.1457672119140625e-06, -0.000320429855491966, -6.4849853515625e-05, -2.288818359375e-05, -0.0001621246337890625, -0.00045680999755859375, -0.0002899169921875, -1.33514404296875e-05, -0.000301361083984375, -6.29425048828125e-05, -0.0006500257295556366, -5.7220458984375e-06, -2.7470245361328125, -0.0024738311767578125, -0.0005519390106201172, -1.9311717551317997e-05, -2.253030106658116e-05, -0.743180513381958, -0.001049041748046875, -1.9073486328125e-06, -0.0002288818359375], "score": -3.528408607241886, "model_output": {"hole4": "player", "hole0": "Leokk", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Leokk", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"hole1": "minions", "_type": "Template31", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector(\n            minions()))])\n"}, {"choice_history": [121, 198, "Leokk", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Leokk", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Minion", "Selector", "<EOS>", 320, 105], "score_history": [-0.00040435791015625, -4.38690185546875e-05, -8.415821503149346e-05, -0.0001437593309674412, -0.00018787430599331856, -1.1444091796875e-05, -1.919269561767578e-05, -0.0001125335693359375, -0.003459930419921875, -3.62396240234375e-05, -7.62939453125e-06, -0.00711822509765625, -4.76837158203125e-05, -0.0017242431640625, -3.4332275390625e-05, -0.00012969970703125, 0.0, -1.549720582261216e-05, -0.0024051666259765625, -0.000858306884765625, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.00047135353088378906, -0.000152587890625, -0.0026180732529610395, -7.62939453125e-06, -0.003935813903808594, -0.00030517578125, -0.0001220703125, -0.003025054931640625, -0.0009593963623046875, -0.0019227266311645508, -3.4332275390625e-05, -4.1961669921875e-05, 0.0, -1.3470649719238281e-05, 0.0, -3.0517578125e-05, -0.000476837158203125, -0.000484466552734375, -5.125983079778962e-06, -1.0728830375228426e-06, -2.6940973839373328e-05, -2.1457672119140625e-06, -0.000320429855491966, -6.4849853515625e-05, -2.288818359375e-05, -0.0001621246337890625, -0.00045680999755859375, -0.0002899169921875, -1.33514404296875e-05, -0.000301361083984375, -6.29425048828125e-05, -0.0006500257295556366, -5.7220458984375e-06, -2.7470245361328125, -0.0024738311767578125, -0.0005519390106201172, -1.9311717551317997e-05, -2.253030106658116e-05, -1.2783538103103638, -1.4424267646973021e-05, -9.059865078597795e-06, -0.00074005126953125, -0.0002727508544921875], "score": -4.0633383594944235, "model_output": {"hole4": "player", "hole0": "Leokk", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Leokk", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"hole1": "MinionSelector", "_type": "Template31", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector(\n            MinionSelector()))])\n"}, {"choice_history": [121, 198, "Leokk", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Leokk", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 320, 105], "score_history": [-0.00040435791015625, -4.38690185546875e-05, -8.415821503149346e-05, -0.0001437593309674412, -0.00018787430599331856, -1.1444091796875e-05, -1.919269561767578e-05, -0.0001125335693359375, -0.003459930419921875, -3.62396240234375e-05, -7.62939453125e-06, -0.00711822509765625, -4.76837158203125e-05, -0.0017242431640625, -3.4332275390625e-05, -0.00012969970703125, 0.0, -1.549720582261216e-05, -0.0024051666259765625, -0.000858306884765625, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.00047135353088378906, -0.000152587890625, -0.0026180732529610395, -7.62939453125e-06, -0.003935813903808594, -0.00030517578125, -0.0001220703125, -0.003025054931640625, -0.0009593963623046875, -0.0019227266311645508, -3.4332275390625e-05, -4.1961669921875e-05, 0.0, -1.3470649719238281e-05, 0.0, -3.0517578125e-05, -0.000476837158203125, -0.000484466552734375, -5.125983079778962e-06, -1.0728830375228426e-06, -2.6940973839373328e-05, -2.1457672119140625e-06, -0.000320429855491966, -6.4849853515625e-05, -2.288818359375e-05, -0.0001621246337890625, -0.00045680999755859375, -0.0002899169921875, -1.33514404296875e-05, -0.000301361083984375, -6.29425048828125e-05, -0.0006500257295556366, -5.7220458984375e-06, -4.092465400695801, -0.00222015380859375, -0.00097762793302536, -8.761868230067194e-05, -2.861022494471399e-06, -0.0006999969482421875, 0.0, -0.0008767843246459961, -0.0025382041931152344, -3.24249267578125e-05, -0.000148773193359375, -6.103515625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -6.866455078125e-05, -5.7220458984375e-06, -0.010750293731689453, -3.814697265625e-06, -3.814697265625e-06, -0.00014495849609375], "score": -4.144957615132512, "model_output": {"hole4": "player", "hole0": "Leokk", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Leokk", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"hole1": {"_type": "Name", "id": "IsType"}, "hole2": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Template35", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.BEAST)))])\n"}, {"choice_history": [121, 198, "Leokk", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Leokk", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "2", "<EOS>", 320, 105], "score_history": [-0.00040435791015625, -4.38690185546875e-05, -8.415821503149346e-05, -0.0001437593309674412, -0.00018787430599331856, -1.1444091796875e-05, -1.919269561767578e-05, -0.0001125335693359375, -0.003459930419921875, -3.62396240234375e-05, -7.62939453125e-06, -0.00711822509765625, -4.76837158203125e-05, -0.0017242431640625, -3.4332275390625e-05, -0.00012969970703125, 0.0, -1.549720582261216e-05, -0.0024051666259765625, -0.000858306884765625, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.00047135353088378906, -0.000152587890625, -0.0026180732529610395, -7.62939453125e-06, -0.003935813903808594, -0.00030517578125, -0.0001220703125, -0.003025054931640625, -0.0009593963623046875, -0.0019227266311645508, -3.4332275390625e-05, -4.1961669921875e-05, 0.0, -1.3470649719238281e-05, 0.0, -3.0517578125e-05, -0.000476837158203125, -0.000484466552734375, -5.125983079778962e-06, -1.0728830375228426e-06, -2.6940973839373328e-05, -2.1457672119140625e-06, -0.000320429855491966, -6.4849853515625e-05, -2.288818359375e-05, -0.0001621246337890625, -0.00045680999755859375, -0.0002899169921875, -1.33514404296875e-05, -0.000301361083984375, -6.29425048828125e-05, -0.0006500257295556366, -5.7220458984375e-06, -2.7470245361328125, -0.0024738311767578125, -0.0005519390106201172, -1.9311717551317997e-05, -2.253030106658116e-05, -1.549119234085083, -0.0006562471389770508, -4.76837158203125e-05, -0.0002346038818359375], "score": -4.334006031749027, "model_output": {"hole4": "player", "hole0": "Leokk", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Leokk", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"hole1": "2", "_type": "Template31", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector(2()))])\n"}, {"choice_history": [121, 198, "Leokk", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Leokk", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Minion", "Selector", "<EOS>", 320, 105], "score_history": [-0.00040435791015625, -4.38690185546875e-05, -8.415821503149346e-05, -0.0001437593309674412, -0.00018787430599331856, -1.1444091796875e-05, -1.919269561767578e-05, -0.0001125335693359375, -0.003459930419921875, -3.62396240234375e-05, -7.62939453125e-06, -4.966724395751953, -5.91278076171875e-05, -0.002483367919921875, -0.0003147125244140625, -4.00543212890625e-05, -5.960462772236497e-07, -5.841255187988281e-06, -0.0030345916748046875, -0.014129638671875, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -0.00018894672393798828, -0.0001506805419921875, -0.0059964656829833984, -1.9073486328125e-06, -0.002849578857421875, -9.34600830078125e-05, -0.028336763381958008, 0.0, -0.034543752670288086, 0.0, -0.0002899169921875, -0.00084686279296875, -0.000278472900390625, -1.0728826964623295e-06, -1.1920922133867862e-06, -2.4795339413685724e-05, -2.2649765014648438e-06, -0.0003242475213482976, -0.0001087188720703125, -3.0517578125e-05, -0.000179290771484375, -0.0004441737837623805, -0.0003681182861328125, -1.9073486328125e-05, -0.000274658203125, -6.103515625e-05, -0.0008229865925386548, -3.814697265625e-06, -0.08116531372070312, -0.0001392364501953125, -0.0015557408332824707, -3.266334533691406e-05, -3.576278118089249e-07, -3.814697265625e-06, -0.00095367431640625], "score": -5.151442660122484, "model_output": {"hole4": "player", "hole0": "Leokk", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Leokk", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"_type": "Template46", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n"}, {"choice_history": [121, 198, "Leokk", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Leokk", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Minion", "Selector", "<EOS>", 320, 105], "score_history": [-0.00040435791015625, -4.38690185546875e-05, -8.415821503149346e-05, -0.0001437593309674412, -0.00018787430599331856, -1.1444091796875e-05, -1.919269561767578e-05, -0.0001125335693359375, -6.071123123168945, -0.0022335052490234375, -2.3841830625315197e-06, -3.421276051085442e-05, -2.6941299438476562e-05, 0.0, -0.007852673530578613, 0.0, -1.8000566342379898e-05, -3.814697265625e-06, -0.003261566162109375, -9.5367431640625e-06, -7.2479248046875e-05, -1.9073486328125e-06, -6.29425048828125e-05, -5.7220458984375e-06, -0.07107257843017578, -7.62939453125e-06, -0.000484466552734375, 0.0, -9.5367431640625e-06, 0.0, -0.0001735687255859375, -0.000270843505859375, -0.000209808349609375, -5.2451905503403395e-06, -1.0728830375228426e-06, -3.7311539927031845e-05, -1.1920928244535389e-07, -0.0004417856689542532, -0.000125885009765625, -2.47955322265625e-05, -0.000270843505859375, -0.00041484832763671875, -0.0004444122314453125, -1.33514404296875e-05, -0.00031280517578125, -6.103515625e-05, -0.0007250125054270029, -3.814697265625e-06, -0.0818490982055664, -8.96453857421875e-05, -0.0008890926837921143, -4.589557647705078e-05, -2.3841855067985307e-07, -3.814697265625e-06, -0.0008678436279296875], "score": -6.244572397016178, "model_output": {"hole4": "player", "hole0": "Leokk", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Leokk", "hole1": 3, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"_type": "Template46", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n"}, {"choice_history": [121, 198, "Leokk", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Leokk", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 86, 244, "1", "<EOS>", 320, 105], "score_history": [-0.00040435791015625, -4.38690185546875e-05, -8.415821503149346e-05, -0.0001437593309674412, -0.00018787430599331856, -1.1444091796875e-05, -1.919269561767578e-05, -0.0001125335693359375, -0.003459930419921875, -3.62396240234375e-05, -7.62939453125e-06, -0.00711822509765625, -4.76837158203125e-05, -0.0017242431640625, -3.4332275390625e-05, -0.00012969970703125, 0.0, -1.549720582261216e-05, -0.0024051666259765625, -0.000858306884765625, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.00047135353088378906, -0.000152587890625, -0.0026180732529610395, -7.62939453125e-06, -0.003935813903808594, -0.00030517578125, -0.0001220703125, -0.003025054931640625, -0.0009593963623046875, -0.0019227266311645508, -3.4332275390625e-05, -4.1961669921875e-05, 0.0, -1.3470649719238281e-05, 0.0, -3.0517578125e-05, -0.000476837158203125, -0.000484466552734375, -5.125983079778962e-06, -1.0728830375228426e-06, -2.6940973839373328e-05, -2.1457672119140625e-06, -0.000320429855491966, -6.4849853515625e-05, -2.288818359375e-05, -0.0001621246337890625, -0.00045680999755859375, -0.0002899169921875, -1.33514404296875e-05, -0.000301361083984375, -6.29425048828125e-05, -0.0006500257295556366, -5.7220458984375e-06, -6.295326232910156, -0.000110626220703125, -0.03716018423438072, -6.532669067382812e-05, -0.0004940032958984375, -0.0058460235595703125], "score": -6.372858511499885, "model_output": {"hole4": "player", "hole0": "Leokk", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Leokk", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"_type": "Template38", "hole0": 1}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), ChangeAttack(1))])\n"}, {"choice_history": [121, 198, "Leokk", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Leokk", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 96, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Minion", "Selector", "<EOS>", 320, 105], "score_history": [-0.00040435791015625, -4.38690185546875e-05, -8.415821503149346e-05, -0.0001437593309674412, -0.00018787430599331856, -1.1444091796875e-05, -1.919269561767578e-05, -0.0001125335693359375, -0.003459930419921875, -3.62396240234375e-05, -7.62939453125e-06, -0.00711822509765625, -4.76837158203125e-05, -0.0017242431640625, -3.4332275390625e-05, -0.00012969970703125, 0.0, -1.549720582261216e-05, -0.0024051666259765625, -0.000858306884765625, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.00047135353088378906, -0.000152587890625, -0.0026180732529610395, -7.62939453125e-06, -6.686919212341309, -0.015716552734375, -8.58306884765625e-05, -0.000995635986328125, -0.0006198883056640625, -0.002190232276916504, -2.86102294921875e-05, -3.814697265625e-05, 0.0, -1.1682510375976562e-05, 0.0, -4.1961669921875e-05, -0.0004291534423828125, -0.000415802001953125, -5.125983079778962e-06, -9.536738616588991e-07, -2.6225741748930886e-05, -2.1457672119140625e-06, -0.0003211446455679834, -6.103515625e-05, -2.288818359375e-05, -0.0001583099365234375, -0.00045669078826904297, -0.0002899169921875, -1.33514404296875e-05, -0.00030517578125, -6.103515625e-05, -0.0006526479846797884, -5.7220458984375e-06, -0.09155845642089844, -0.0001239776611328125, -0.0015064477920532227, -2.8848648071289062e-05, -3.576278118089249e-07, -1.9073486328125e-06, -0.0009136199951171875], "score": -6.824127276784054, "model_output": {"hole4": "player", "hole0": "Leokk", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Leokk", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template49"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"_type": "Template46", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            RARE, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n"}, {"choice_history": [121, 198, "Leokk", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Leokk", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Minion", "Selector", "<EOS>", 320, 105], "score_history": [-0.00040435791015625, -4.38690185546875e-05, -8.415821503149346e-05, -0.0001437593309674412, -0.00018787430599331856, -1.1444091796875e-05, -1.919269561767578e-05, -0.0001125335693359375, -0.003459930419921875, -3.62396240234375e-05, -7.62939453125e-06, -0.00711822509765625, -4.76837158203125e-05, -0.0017242431640625, -3.4332275390625e-05, -0.00012969970703125, 0.0, -1.549720582261216e-05, -0.0024051666259765625, -0.000858306884765625, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.00047135353088378906, -0.000152587890625, -0.0026180732529610395, -7.62939453125e-06, -0.003935813903808594, -0.00030517578125, -0.0001220703125, -0.003025054931640625, -0.0009593963623046875, -7.0529985427856445, -0.0001964569091796875, -0.0003204345703125, 0.0, -1.0251998901367188e-05, 0.0, -7.43865966796875e-05, -0.0003414154052734375, -0.000286102294921875, -4.529939360509161e-06, -1.1920922133867862e-06, -2.408002364973072e-05, -2.2649765014648438e-06, -0.000369183107977733, -8.392333984375e-05, -2.288818359375e-05, -0.0001850128173828125, -0.00047767162322998047, -0.00032806396484375, -1.33514404296875e-05, -0.0003452301025390625, -5.91278076171875e-05, -0.0006714839255437255, -7.62939453125e-06, -0.09769058227539062, -5.14984130859375e-05, -0.0009645819664001465, -1.919269561767578e-05, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0009098052978515625], "score": -7.184927123860888, "model_output": {"hole4": "player", "hole0": "Leokk", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "MURLOC"}], "_type": "Call", "args": [{"s": "Leokk", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"_type": "Template46", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n"}, {"choice_history": [121, 198, "Leokk", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Leokk", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Minion", "Selector", "<EOS>", 320, 105], "score_history": [-0.00040435791015625, -4.38690185546875e-05, -8.415821503149346e-05, -0.0001437593309674412, -0.00018787430599331856, -1.1444091796875e-05, -1.919269561767578e-05, -0.0001125335693359375, -0.003459930419921875, -3.62396240234375e-05, -7.62939453125e-06, -0.00711822509765625, -4.76837158203125e-05, -0.0017242431640625, -3.4332275390625e-05, -0.00012969970703125, 0.0, -1.549720582261216e-05, -7.041182518005371, -0.11078548431396484, -2.288818359375e-05, -8.20159912109375e-05, -5.7220458984375e-06, -0.0005552768707275391, -3.62396240234375e-05, -0.0023711486719548702, -5.7220458984375e-06, -0.005992889404296875, -0.00028228759765625, -0.0001049041748046875, -0.0036449432373046875, -0.00086212158203125, -0.0024483203887939453, -2.47955322265625e-05, -3.0517578125e-05, 0.0, -1.537799835205078e-05, 0.0, -2.288818359375e-05, -0.00046539306640625, -0.0004520416259765625, -5.125983079778962e-06, -1.0728830375228426e-06, -2.729859079408925e-05, -2.1457672119140625e-06, -0.0003164957743138075, -6.67572021484375e-05, -2.288818359375e-05, -0.000164031982421875, -0.00045871734619140625, -0.000293731689453125, -1.33514404296875e-05, -0.000301361083984375, -6.103515625e-05, -0.0006645687972195446, -5.7220458984375e-06, -0.08709716796875, -0.0001373291015625, -0.0014418959617614746, -3.075599670410156e-05, -3.576278118089249e-07, -3.814697265625e-06, -0.000896453857421875], "score": -7.27498624500123, "model_output": {"hole4": "player", "hole0": "Leokk", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Leokk", "_type": "Str"}, {"_type": "Template67"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"_type": "Template46", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n"}, {"choice_history": [121, 198, "Leokk", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Leokk", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "2", "Selector", "<EOS>", 320, 105], "score_history": [-0.00040435791015625, -4.38690185546875e-05, -8.415821503149346e-05, -0.0001437593309674412, -0.00018787430599331856, -1.1444091796875e-05, -1.919269561767578e-05, -0.0001125335693359375, -0.003459930419921875, -3.62396240234375e-05, -7.62939453125e-06, -0.00711822509765625, -4.76837158203125e-05, -0.0017242431640625, -3.4332275390625e-05, -0.00012969970703125, 0.0, -1.549720582261216e-05, -0.0024051666259765625, -0.000858306884765625, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.00047135353088378906, -0.000152587890625, -0.0026180732529610395, -7.62939453125e-06, -0.003935813903808594, -0.00030517578125, -0.0001220703125, -0.003025054931640625, -0.0009593963623046875, -0.0019227266311645508, -3.4332275390625e-05, -4.1961669921875e-05, 0.0, -1.3470649719238281e-05, 0.0, -3.0517578125e-05, -0.000476837158203125, -0.000484466552734375, -5.125983079778962e-06, -1.0728830375228426e-06, -2.6940973839373328e-05, -2.1457672119140625e-06, -0.000320429855491966, -6.4849853515625e-05, -2.288818359375e-05, -0.0001621246337890625, -0.00045680999755859375, -0.0002899169921875, -1.33514404296875e-05, -0.000301361083984375, -6.29425048828125e-05, -0.0006500257295556366, -5.7220458984375e-06, -0.0898885726928711, -0.000110626220703125, -6.965935230255127, -0.211228609085083, 0.0, -1.9073486328125e-06, -0.005431175231933594], "score": -7.306452235422853, "model_output": {"hole4": "player", "hole0": "Leokk", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Leokk", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"_type": "Template46", "hole0": "2Selector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), 2Selector())])\n"}, {"choice_history": [121, 198, "Leokk", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Leokk", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 97, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Minion", "Selector", "<EOS>", 320, 105], "score_history": [-0.00040435791015625, -4.38690185546875e-05, -8.415821503149346e-05, -0.0001437593309674412, -0.00018787430599331856, -1.1444091796875e-05, -1.919269561767578e-05, -0.0001125335693359375, -0.003459930419921875, -3.62396240234375e-05, -7.62939453125e-06, -0.00711822509765625, -4.76837158203125e-05, -0.0017242431640625, -3.4332275390625e-05, -0.00012969970703125, 0.0, -1.549720582261216e-05, -0.0024051666259765625, -0.000858306884765625, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.00047135353088378906, -0.000152587890625, -0.0026180732529610395, -7.62939453125e-06, -7.391329765319824, -0.00069427490234375, -0.0003299713134765625, -0.00414276123046875, -0.0015010833740234375, -0.0015109777450561523, -6.29425048828125e-05, -5.53131103515625e-05, 0.0, -1.9311904907226562e-05, 0.0, -4.00543212890625e-05, -0.000453948974609375, -0.00035858154296875, -5.125983079778962e-06, -1.0728830375228426e-06, -2.765621138678398e-05, -2.1457672119140625e-06, -0.0003204288659617305, -6.866455078125e-05, -2.288818359375e-05, -0.00016021728515625, -0.00046253204345703125, -0.0002918243408203125, -1.52587890625e-05, -0.000301361083984375, -6.29425048828125e-05, -0.0006532450788654387, -5.7220458984375e-06, -0.08996009826660156, -9.1552734375e-05, -0.001269996166229248, -2.682209014892578e-05, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0009098052978515625], "score": -7.515279075037455, "model_output": {"hole4": "player", "hole0": "Leokk", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Leokk", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"_type": "Template46", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            FREE, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n"}, {"choice_history": [121, 198, "Leokk", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Leokk", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "+1", "<EOS>", 320, 105], "score_history": [-0.00040435791015625, -4.38690185546875e-05, -8.415821503149346e-05, -0.0001437593309674412, -0.00018787430599331856, -1.1444091796875e-05, -1.919269561767578e-05, -0.0001125335693359375, -0.003459930419921875, -3.62396240234375e-05, -7.62939453125e-06, -0.00711822509765625, -4.76837158203125e-05, -0.0017242431640625, -3.4332275390625e-05, -0.00012969970703125, 0.0, -1.549720582261216e-05, -0.0024051666259765625, -0.000858306884765625, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.00047135353088378906, -0.000152587890625, -0.0026180732529610395, -7.62939453125e-06, -0.003935813903808594, -0.00030517578125, -0.0001220703125, -0.003025054931640625, -0.0009593963623046875, -0.0019227266311645508, -3.4332275390625e-05, -4.1961669921875e-05, 0.0, -1.3470649719238281e-05, 0.0, -3.0517578125e-05, -0.000476837158203125, -0.000484466552734375, -5.125983079778962e-06, -1.0728830375228426e-06, -2.6940973839373328e-05, -2.1457672119140625e-06, -0.000320429855491966, -6.4849853515625e-05, -2.288818359375e-05, -0.0001621246337890625, -0.00045680999755859375, -0.0002899169921875, -1.33514404296875e-05, -0.000301361083984375, -6.29425048828125e-05, -0.0006500257295556366, -5.7220458984375e-06, -2.7470245361328125, -0.0024738311767578125, -0.0005519390106201172, -1.9311717551317997e-05, -2.253030106658116e-05, -4.720363140106201, -0.2887260913848877, -2.47955322265625e-05, -0.005484580993652344], "score": -7.7985468709442785, "model_output": {"hole4": "player", "hole0": "Leokk", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Leokk", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"hole1": "+1", "_type": "Template31", "hole0": "MinionSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector(+1()))]\n            )\n"}, {"choice_history": [121, 198, "Leokk", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Leokk", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 68, 163, 57, 321, 84, 239, "Count", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "score_history": [-0.00040435791015625, -4.38690185546875e-05, -8.415821503149346e-05, -0.0001437593309674412, -0.00018787430599331856, -1.1444091796875e-05, -1.919269561767578e-05, -0.0001125335693359375, -0.003459930419921875, -3.62396240234375e-05, -7.62939453125e-06, -0.00711822509765625, -4.76837158203125e-05, -0.0017242431640625, -3.4332275390625e-05, -0.00012969970703125, 0.0, -1.549720582261216e-05, -0.0024051666259765625, -0.000858306884765625, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.00047135353088378906, -0.000152587890625, -0.0026180732529610395, -7.62939453125e-06, -0.003935813903808594, -0.00030517578125, -0.0001220703125, -0.003025054931640625, -0.0009593963623046875, -0.0019227266311645508, -3.4332275390625e-05, -4.1961669921875e-05, 0.0, -1.3470649719238281e-05, 0.0, -3.0517578125e-05, -0.000476837158203125, -0.000484466552734375, -5.125983079778962e-06, -1.0728830375228426e-06, -2.6940973839373328e-05, -2.1457672119140625e-06, -0.000320429855491966, -6.4849853515625e-05, -2.288818359375e-05, -0.0001621246337890625, -0.00045680999755859375, -0.0002899169921875, -1.33514404296875e-05, -0.000301361083984375, -6.29425048828125e-05, -0.0006500257295556366, -5.7220458984375e-06, -6.77079963684082, -0.00031280517578125, -0.013665199279785156, -0.0003299713134765625, -0.24505233764648438, -0.0010318756103515625, -0.5724207162857056, -0.00019013721612282097, -0.0075969696044921875, -5.7220458984375e-06, -0.00359499454498291, -0.004420399200171232, -5.364418029785156e-05, -0.0003185272216796875, -8.0108642578125e-05, -7.62939453125e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.71661376953125e-05, -0.012220025062561035, -1.1444091796875e-05, -0.03619575500488281, -5.7220458984375e-06, -0.45103418827056885, -0.00012409687042236328, -0.0004253387451171875, -5.7220458984375e-06, -2.288818359375e-05], "score": -8.153839189571386, "model_output": {"hole4": "player", "hole0": "Leokk", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Leokk", "_type": "Str"}, {"_type": "Template61"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": "auras", "_type": "Template27", "hole3": {"hole1": [{"_type": "Template38", "hole0": 1}, {"func": {"_type": "Template74"}, "_type": "Call", "args": [{"hole1": {"_type": "Name", "id": "IsType"}, "hole2": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Template35", "hole0": "Count"}, {"_type": "Template46", "hole0": "BothPlayer"}]}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "Aura"}, "hole0": 2}]}, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector(\n            Count(IsType(MINION_TYPE.BEAST)), BothPlayer()))])\n"}], "index": 61}
{"beams": [{"choice_history": [121, 198, "<UNK>", "Justice", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "1", "<EOS>", "4", "<EOS>"], "score_history": [-0.000396728515625, -0.0003108978271484375, -0.0008652133401483297, -0.0003259842633269727, -9.453258098801598e-05, -0.002688257722184062, -0.00024378264788538218, -0.00014972686767578125, -0.0011577606201171875, -0.0028362274169921875, -0.0008392333984375, -0.0002474773791618645, -0.000156402587890625, -0.00022647327568847686, 0.0, -0.0018272054148837924, -1.9073486328125e-06, -0.0072803497314453125, 0.0, -0.004047989845275879, -9.5367431640625e-06, -0.0041522979736328125, -3.814697265625e-06, -3.075599670410156e-05, -1.9073486328125e-06, -0.0001621246337890625, -0.0003719329833984375, -0.00121307373046875, -7.998622459126636e-05, -0.0002346038818359375, -2.7298916393192485e-05, 0.0, -0.004742482677102089, -0.000270843505859375], "score": -0.03499681009634514, "model_output": {"hole4": "player", "hole0": "<UNK>Justice", "hole1": "WeaponCard", "hole2": [{"hole1": 1, "hole2": "PALADIN", "_type": "Template15", "hole3": "FREE", "hole0": "<UNK> Justice"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n"}, {"choice_history": [121, 198, "<UNK>", "Justice", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000396728515625, -0.0003108978271484375, -0.0008652133401483297, -0.0003259842633269727, -9.453258098801598e-05, -0.002688257722184062, -0.00024378264788538218, -0.00014972686767578125, -0.0011577606201171875, -0.0028362274169921875, -0.0008392333984375, -0.0002474773791618645, -0.000156402587890625, -0.00022647327568847686, 0.0, -0.0018272054148837924, -1.9073486328125e-06, -0.0072803497314453125, 0.0, -0.004047989845275879, -9.5367431640625e-06, -0.0041522979736328125, -3.814697265625e-06, -3.075599670410156e-05, -1.9073486328125e-06, -0.0001621246337890625, -0.0003719329833984375, -0.00121307373046875, -7.998622459126636e-05, -0.0002346038818359375, -2.7298916393192485e-05, 0.0, -5.700296401977539, -3.814697265625e-06], "score": -5.730283700588188, "model_output": {"hole4": "player", "hole0": "<UNK>Justice", "hole1": "WeaponCard", "hole2": [{"hole1": 1, "hole2": "PALADIN", "_type": "Template15", "hole3": "FREE", "hole0": "<UNK> Justice"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 1, "hole2": 1, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(1, 1)\n"}, {"choice_history": [121, 198, "<UNK>", "Justice", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "1", "<EOS>", "4", "<EOS>"], "score_history": [-0.000396728515625, -0.0003108978271484375, -0.0008652133401483297, -0.0003259842633269727, -9.453258098801598e-05, -0.002688257722184062, -0.00024378264788538218, -0.00014972686767578125, -0.0011577606201171875, -0.0028362274169921875, -0.0008392333984375, -0.0002474773791618645, -0.000156402587890625, -0.00022647327568847686, 0.0, -0.0018272054148837924, -1.9073486328125e-06, -6.047347068786621, 0.0, -0.0018235445022583008, -6.866455078125e-05, -0.0058689117431640625, -1.9073486328125e-06, -3.445148468017578e-05, -1.9073486328125e-06, -0.00028228759765625, -0.00040435791015625, -0.0011196136474609375, -0.00012194363807793707, -0.00041675567626953125, -3.135203223791905e-05, 0.0, -0.0055013662204146385, -0.0003204345703125], "score": -6.075712378264143, "model_output": {"hole4": "player", "hole0": "<UNK>Justice", "hole1": "WeaponCard", "hole2": [{"hole1": 1, "hole2": "DRUID", "_type": "Template15", "hole3": "FREE", "hole0": "<UNK> Justice"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n"}, {"choice_history": [121, 198, "<UNK>", "Justice", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "PRIEST", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "1", "<EOS>", "4", "<EOS>"], "score_history": [-0.000396728515625, -0.0003108978271484375, -0.0008652133401483297, -0.0003259842633269727, -9.453258098801598e-05, -0.002688257722184062, -0.00024378264788538218, -0.00014972686767578125, -0.0011577606201171875, -0.0028362274169921875, -0.0008392333984375, -0.0002474773791618645, -0.000156402587890625, -0.00022647327568847686, 0.0, -0.0018272054148837924, -1.9073486328125e-06, -0.0072803497314453125, 0.0, -6.307098865509033, -4.57763671875e-05, -0.0060214996337890625, -4.76837158203125e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.0001773834228515625, -0.0005207061767578125, -0.00147247314453125, -0.0001522186357760802, -0.0002956390380859375, -3.135203223791905e-05, 0.0, -0.011495599523186684, -0.000217437744140625], "score": -6.347251498762489, "model_output": {"hole4": "player", "hole0": "<UNK>Justice", "hole1": "WeaponCard", "hole2": [{"hole1": 1, "hole2": "PALADIN", "_type": "Template15", "hole3": "PRIEST", "hole0": "<UNK> Justice"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.PRIEST)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n"}, {"choice_history": [121, 198, "<UNK>", "Justice", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "1", "<EOS>", "4", "<EOS>"], "score_history": [-0.000396728515625, -0.0003108978271484375, -0.0008652133401483297, -0.0003259842633269727, -9.453258098801598e-05, -0.002688257722184062, -0.00024378264788538218, -0.00014972686767578125, -0.0011577606201171875, -0.0028362274169921875, -0.0008392333984375, -0.0002474773791618645, -0.000156402587890625, -0.00022647327568847686, 0.0, -0.0018272054148837924, -1.9073486328125e-06, -6.321488380432129, 0.0, -0.00205838680267334, -1.71661376953125e-05, -0.00540924072265625, -1.9073486328125e-06, -3.838539123535156e-05, -1.9073486328125e-06, -0.00018310546875, -0.0003643035888671875, -0.0010662078857421875, -0.0001470934075769037, -0.00040149688720703125, -2.3722637706669047e-05, 0.0, -0.005872830282896757, -0.00030517578125], "score": -6.349747121330438, "model_output": {"hole4": "player", "hole0": "<UNK>Justice", "hole1": "WeaponCard", "hole2": [{"hole1": 1, "hole2": "WARRIOR", "_type": "Template15", "hole3": "FREE", "hole0": "<UNK> Justice"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n"}, {"choice_history": [121, 198, "<UNK>", "Justice", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "1", "<EOS>", "4", "<EOS>"], "score_history": [-0.000396728515625, -0.0003108978271484375, -0.0008652133401483297, -0.0003259842633269727, -9.453258098801598e-05, -0.002688257722184062, -0.00024378264788538218, -0.00014972686767578125, -0.0011577606201171875, -0.0028362274169921875, -0.0008392333984375, -0.0002474773791618645, -0.000156402587890625, -0.00022647327568847686, 0.0, -0.0018272054148837924, -1.9073486328125e-06, -0.0072803497314453125, 0.0, -0.004047989845275879, -9.5367431640625e-06, -6.32872200012207, 0.0, -2.47955322265625e-05, 0.0, -0.00022125244140625, -0.003284454345703125, -0.00194549560546875, -0.00011109687329735607, -0.0015544891357421875, -1.2159325706306845e-05, 0.0, -0.0043061841279268265, -0.0003299713134765625], "score": -6.364217586349696, "model_output": {"hole4": "player", "hole0": "<UNK>Justice", "hole1": "WeaponCard", "hole2": [{"hole1": 1, "hole2": "PALADIN", "_type": "Template15", "hole3": "FREE", "hole0": "<UNK> Justice"}], "_type": "Template1", "hole3": "use", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player):\n        return Weapon(1, 4)\n"}, {"choice_history": [121, 198, "<UNK>", "Justice", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "1", "<EOS>", "4", "<EOS>"], "score_history": [-0.000396728515625, -0.0003108978271484375, -0.0008652133401483297, -0.0003259842633269727, -9.453258098801598e-05, -0.002688257722184062, -0.00024378264788538218, -0.00014972686767578125, -0.0011577606201171875, -0.0028362274169921875, -0.0008392333984375, -0.0002474773791618645, -0.000156402587890625, -0.00022647327568847686, 0.0, -0.0018272054148837924, -1.9073486328125e-06, -6.559691429138184, 0.0, -0.0004597902297973633, -3.4332275390625e-05, -0.009785652160644531, -1.9073486328125e-06, -4.029273986816406e-05, -1.9073486328125e-06, -0.0001811981201171875, -0.0004425048828125, -0.0009174346923828125, -0.00016056199092417955, -0.00042629241943359375, -2.574920108600054e-05, 0.0, -0.005977853666990995, -0.000301361083984375], "score": -6.590816078505668, "model_output": {"hole4": "player", "hole0": "<UNK>Justice", "hole1": "WeaponCard", "hole2": [{"hole1": 1, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "<UNK> Justice"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n"}, {"choice_history": [121, 198, "<UNK>", "Justice", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "1", "<EOS>", "4", "<EOS>"], "score_history": [-0.000396728515625, -0.0003108978271484375, -0.0008652133401483297, -0.0003259842633269727, -9.453258098801598e-05, -6.522812843322754, -0.0008471012115478516, -3.814697265625e-06, -0.0005588531494140625, -0.0050830841064453125, -0.002452850341796875, -0.00034451379906386137, -0.0001010894775390625, -8.833067113300785e-05, 0.0, -0.0009982642950490117, -1.9073486328125e-06, -0.03361797332763672, 0.0, -0.005370736122131348, -5.7220458984375e-06, -0.0037708282470703125, -1.9073486328125e-06, -4.291534423828125e-06, 0.0, -4.9591064453125e-05, -0.000598907470703125, -0.00732421875, -0.00014494796050712466, -0.001361846923828125, -1.8954247934743762e-05, 0.0, -0.0037568421103060246, -0.0003681182861328125], "score": -6.591680894387537, "model_output": {"hole4": "player", "hole0": "<UNK>Justice", "hole1": "SpellCard", "hole2": [{"hole1": 1, "hole2": "PALADIN", "_type": "Template15", "hole3": "FREE", "hole0": "<UNK> Justice"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class <UNK>Justice(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n"}, {"choice_history": [121, 198, "<UNK>", "Justice", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Justice", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "1", "<EOS>", "4", "<EOS>"], "score_history": [-0.000396728515625, -0.0003108978271484375, -0.0008652133401483297, -0.0003259842633269727, -9.453258098801598e-05, -0.002688257722184062, -0.00024378264788538218, -0.00014972686767578125, -0.0011577606201171875, -0.0028362274169921875, -0.0008392333984375, -0.0002474773791618645, -0.000156402587890625, -0.00022647327568847686, 0.0, -6.666582107543945, -1.9073486328125e-06, -0.022643089294433594, 0.0, -0.0022835731506347656, -9.5367431640625e-06, -0.0042476654052734375, -3.814697265625e-06, -3.266334533691406e-05, -1.9073486328125e-06, -0.0001583099365234375, -0.0003604888916015625, -0.0011844635009765625, -7.23574121366255e-05, -0.00023555755615234375, -2.7298916393192485e-05, 0.0, -0.004781942814588547, -0.0002765655517578125], "score": -6.713441947900719, "model_output": {"hole4": "player", "hole0": "<UNK>Justice", "hole1": "WeaponCard", "hole2": [{"hole1": 2, "hole2": "PALADIN", "_type": "Template15", "hole3": "FREE", "hole0": "<UNK> Justice"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n"}, {"choice_history": [121, 198, "<UNK>", "Justice", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "1", "<EOS>", "Weapon", "<EOS>"], "score_history": [-0.000396728515625, -0.0003108978271484375, -0.0008652133401483297, -0.0003259842633269727, -9.453258098801598e-05, -0.002688257722184062, -0.00024378264788538218, -0.00014972686767578125, -0.0011577606201171875, -0.0028362274169921875, -0.0008392333984375, -0.0002474773791618645, -0.000156402587890625, -0.00022647327568847686, 0.0, -0.0018272054148837924, -1.9073486328125e-06, -0.0072803497314453125, 0.0, -0.004047989845275879, -9.5367431640625e-06, -0.0041522979736328125, -3.814697265625e-06, -3.075599670410156e-05, -1.9073486328125e-06, -0.0001621246337890625, -0.0003719329833984375, -0.00121307373046875, -7.998622459126636e-05, -0.0002346038818359375, -2.7298916393192485e-05, 0.0, -6.694496154785156, -0.0020390748977661133], "score": -6.726518713596306, "model_output": {"hole4": "player", "hole0": "<UNK>Justice", "hole1": "WeaponCard", "hole2": [{"hole1": 1, "hole2": "PALADIN", "_type": "Template15", "hole3": "FREE", "hole0": "<UNK> Justice"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 1, "hole2": 0, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(1, 0)\n"}, {"choice_history": [121, 198, "<UNK>", "Justice", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "1", "<EOS>", "4", "<EOS>"], "score_history": [-0.000396728515625, -0.0003108978271484375, -0.0008652133401483297, -0.0003259842633269727, -9.453258098801598e-05, -6.809967994689941, -2.0861618395429105e-05, -6.914138793945312e-05, -0.0007762908935546875, -0.010690689086914062, -0.006000518798828125, -0.00037646148120984435, -8.20159912109375e-05, -7.438437023665756e-05, 0.0, -0.0008836219785735011, -1.9073486328125e-06, -0.03675365447998047, 0.0, -0.005616903305053711, -3.814697265625e-06, -0.0036411285400390625, -1.9073486328125e-06, -4.410743713378906e-06, 0.0, -5.14984130859375e-05, -0.00060272216796875, -0.0076808929443359375, -0.00014268330414779484, -0.0014181137084960938, -1.9073457224294543e-05, 0.0, -0.003713209880515933, -0.000370025634765625], "score": -6.890957282797899, "model_output": {"hole4": "player", "hole0": "<UNK>Justice", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "PALADIN", "_type": "Template15", "hole3": "FREE", "hole0": "<UNK> Justice"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class <UNK>Justice(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n"}, {"choice_history": [121, 198, "<UNK>", "Justice", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Gallywix's", " ", "Justice", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 94, 112, "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "1", "<EOS>", "4", "<EOS>"], "score_history": [-0.000396728515625, -0.0003108978271484375, -0.0008652133401483297, -0.0003259842633269727, -9.453258098801598e-05, -0.002688257722184062, -0.00024378264788538218, -0.00014972686767578125, -0.0011577606201171875, -6.014909744262695, -6.4849853515625e-05, -0.0007495880126953125, -0.018953323364257812, -0.0004940032958984375, -0.015989303588867188, -0.000537872314453125, -3.814697265625e-06, -0.2813316881656647, -3.62396240234375e-05, -0.008119669742882252, -3.814697265625e-06, -0.20792102813720703, -0.00018310546875, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.000194549560546875, -3.814697265625e-06, -0.0015832185745239258, -3.814697265625e-06, -0.617619514465332, -1.71661376953125e-05, -0.019104957580566406, -9.5367431640625e-06, -0.00047719478607177734, -9.5367431640625e-06, -0.0006389617919921875, -0.0042133331298828125, -0.0006465911865234375, -0.00030596324359066784, -6.878376007080078e-05, -1.788138979463838e-05, 0.0, -0.0038798898458480835, -0.00035858154296875], "score": -7.20472618115673, "model_output": {"hole4": "player", "hole0": "<UNK>Justice", "hole1": "WeaponCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Gallywix's Justice", "_type": "Str"}, {"_type": "Template60"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Gallywix's Justice\", 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, False)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n"}, {"choice_history": [121, 198, "<UNK>", "Justice", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "1", "<EOS>", "4", "<EOS>"], "score_history": [-0.000396728515625, -0.0003108978271484375, -0.0008652133401483297, -0.0003259842633269727, -9.453258098801598e-05, -0.002688257722184062, -0.00024378264788538218, -0.00014972686767578125, -0.0011577606201171875, -0.0028362274169921875, -0.0008392333984375, -0.0002474773791618645, -0.000156402587890625, -0.00022647327568847686, 0.0, -0.0018272054148837924, -1.9073486328125e-06, -0.0072803497314453125, 0.0, -0.004047989845275879, -9.5367431640625e-06, -7.305213928222656, -3.814697265625e-06, -0.0009367465972900391, 0.0, -0.000110626220703125, -0.0003414154052734375, -0.001323699951171875, -0.00010918972111539915, -0.00025653839111328125, -2.4318680516444147e-05, 0.0, -0.0033300849609076977, -0.00028228759765625], "score": -7.335638337972341, "model_output": {"hole4": "player", "hole0": "<UNK>Justice", "hole1": "WeaponCard", "hole2": [{"hole1": 1, "hole2": "PALADIN", "_type": "Template15", "hole3": "FREE", "hole0": "<UNK> Justice"}], "_type": "Template1", "hole3": "target_func", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def target_func(self, player):\n        return Weapon(1, 4)\n"}, {"choice_history": [121, 198, "<UNK>", "Justice", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Gallywix's", " ", "Justice", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 112, "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "1", "<EOS>", "4", "<EOS>"], "score_history": [-0.000396728515625, -0.0003108978271484375, -0.0008652133401483297, -0.0003259842633269727, -9.453258098801598e-05, -0.002688257722184062, -0.00024378264788538218, -0.00014972686767578125, -0.0011577606201171875, -6.014909744262695, -6.4849853515625e-05, -0.0007495880126953125, -0.018953323364257812, -0.0004940032958984375, -0.015989303588867188, -0.000537872314453125, -3.814697265625e-06, -0.2813316881656647, -3.62396240234375e-05, -0.008119669742882252, -3.814697265625e-06, -0.20792102813720703, -0.00018310546875, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.000194549560546875, -3.814697265625e-06, -0.0015832185745239258, -3.814697265625e-06, -0.7859506607055664, -0.0002155303955078125, -0.02240276336669922, -1.33514404296875e-05, -0.001303076627664268, -1.1444091796875e-05, -0.00038909912109375, -0.012551307678222656, -0.000518798828125, -0.0005472586490213871, -0.00013363361358642578, -2.4199480321840383e-05, 0.0, -0.0029504667036235332, -0.00031280517578125], "score": -7.384682684687505, "model_output": {"hole4": "player", "hole0": "<UNK>Justice", "hole1": "WeaponCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Gallywix's Justice", "_type": "Str"}, {"_type": "Template60"}, {"attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template51"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Gallywix's Justice\", 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, False)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n"}, {"choice_history": [121, 198, "<UNK>", "Justice", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "1", "<EOS>", "4", "<EOS>"], "score_history": [-0.000396728515625, -0.0003108978271484375, -0.0008652133401483297, -0.0003259842633269727, -9.453258098801598e-05, -0.002688257722184062, -0.00024378264788538218, -0.00014972686767578125, -0.0011577606201171875, -0.0028362274169921875, -0.0008392333984375, -0.0002474773791618645, -0.000156402587890625, -0.00022647327568847686, 0.0, -0.0018272054148837924, -1.9073486328125e-06, -0.0072803497314453125, 0.0, -7.47363805770874, 0.0, -0.014873504638671875, -9.5367431640625e-06, -9.357929229736328e-05, -1.9073486328125e-06, -0.000156402587890625, -0.0004119873046875, -0.0010738372802734375, -7.426462252624333e-05, -0.000156402587890625, -2.2768967028241605e-05, 0.0, -0.00387989217415452, -0.0002231597900390625], "score": -7.514263461984228, "model_output": {"hole4": "player", "hole0": "<UNK>Justice", "hole1": "WeaponCard", "hole2": [{"hole1": 1, "hole2": "PALADIN", "_type": "Template15", "hole3": "battlecry", "hole0": "<UNK> Justice"}], "_type": "Template1", "hole3": "create_weapon", "hole6": [{"hole1": 1, "hole2": 4, "_type": "Template36", "hole0": "Weapon"}]}, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.battlecry)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n"}], "index": 62}
{"beams": [{"choice_history": [121, 198, "Lord", "Of", "The", "Arena", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.000118255615234375, -0.0004711151123046875, -0.00046397498226724565, -0.0004408954700920731, -0.007542185485363007, -9.024007886182517e-05, -7.748603820800781e-06, -7.15237547410652e-07, -6.67572021484375e-05, -1.537799835205078e-05, -3.24249267578125e-05, -0.00093841552734375, -6.67572021484375e-05, -6.43729799776338e-06, -0.0001327991485595703, -0.0004990195157006383, -0.00011444091796875, -0.0016263611614704132, -0.0010242462158203125, -0.0035096376668661833, -3.814697265625e-06, -0.009446283802390099, -1.9073486328125e-06, -0.0003275871276855469, -1.9073486328125e-06, -8.96453857421875e-05, 0.0, -0.00311887264251709, 0.0, -6.103515625e-05, -0.0023651123046875, -7.62939453125e-06, -1.5020368664409034e-05, -1.4543520592269488e-05, -0.0013524210080504417, -7.867813110351562e-06, -0.0004178285598754883, -1.9073486328125e-06, -0.0002956390380859375], "score": -0.03469682823197218, "model_output": {"hole4": "player", "hole0": "LordOfTheArena", "hole1": "MinionCard", "hole2": [{"hole1": 6, "hole2": "ALL", "_type": "Template14", "hole0": "Lord of the Arena"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 6}]}, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n"}, {"choice_history": [121, 198, "Lord", "Of", "The", "Arena", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.000118255615234375, -0.0004711151123046875, -0.00046397498226724565, -0.0004408954700920731, -0.007542185485363007, -9.024007886182517e-05, -7.748603820800781e-06, -7.15237547410652e-07, -6.67572021484375e-05, -1.537799835205078e-05, -3.24249267578125e-05, -0.00093841552734375, -6.67572021484375e-05, -6.43729799776338e-06, -0.0001327991485595703, -0.0004990195157006383, -0.00011444091796875, -0.0016263611614704132, -0.0010242462158203125, -0.0035096376668661833, -3.814697265625e-06, -5.444451332092285, 0.0, -0.013756513595581055, -5.7220458984375e-06, -7.05718994140625e-05, 0.0, -0.009342670440673828, 0.0, -5.53131103515625e-05, -0.00403594970703125, -7.62939453125e-06, -1.8954275219584815e-05, -1.6808495274744928e-05, -0.0013720918213948607, -7.867813110351562e-06, -0.0004407167434692383, -1.9073486328125e-06, -0.0002899169921875], "score": -5.491045585838947, "model_output": {"hole4": "player", "hole0": "LordOfTheArena", "hole1": "MinionCard", "hole2": [{"hole1": 4, "hole2": "ALL", "_type": "Template14", "hole0": "Lord of the Arena"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 6}]}, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n"}, {"choice_history": [121, 198, "Lord", "Of", "The", "Arena", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Lord", " ", "of", " ", "the", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.000118255615234375, -0.0004711151123046875, -0.00046397498226724565, -0.0004408954700920731, -0.007542185485363007, -9.024007886182517e-05, -7.748603820800781e-06, -7.15237547410652e-07, -6.67572021484375e-05, -1.537799835205078e-05, -3.24249267578125e-05, -0.00093841552734375, -6.67572021484375e-05, -6.43729799776338e-06, -0.0001327991485595703, -0.0004990195157006383, -0.00011444091796875, -0.0016263611614704132, -0.0010242462158203125, -5.686294078826904, -0.04699230194091797, -0.0015654271701350808, 0.0, -0.007665129378437996, -1.9073486328125e-06, -0.0006111860275268555, -1.9073486328125e-06, -8.7738037109375e-05, 0.0, -0.0028635263442993164, 0.0, -5.91278076171875e-05, -0.0029754638671875, -7.62939453125e-06, -1.6927717297221534e-05, -1.4305103832157329e-05, -0.0013475342420861125, -7.867813110351562e-06, -0.00042176246643066406, -1.9073486328125e-06, -0.0002880096435546875], "score": -5.764881905526636, "model_output": {"hole4": "player", "hole0": "LordOfTheArena", "hole1": "MinionCard", "hole2": [{"hole1": 6, "hole2": "ALL", "_type": "Template14", "hole0": "Lord of the the Arena"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 6}]}, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n"}, {"choice_history": [121, 198, "Lord", "Of", "The", "Arena", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.000118255615234375, -0.0004711151123046875, -0.00046397498226724565, -0.0004408954700920731, -0.007542185485363007, -9.024007886182517e-05, -7.748603820800781e-06, -7.15237547410652e-07, -6.67572021484375e-05, -1.537799835205078e-05, -3.24249267578125e-05, -0.00093841552734375, -6.67572021484375e-05, -6.43729799776338e-06, -0.0001327991485595703, -0.0004990195157006383, -0.00011444091796875, -0.0016263611614704132, -0.0010242462158203125, -0.0035096376668661833, -3.814697265625e-06, -5.852982521057129, 0.0, -0.0009050369262695312, -3.814697265625e-06, -7.05718994140625e-05, 0.0, -0.005758762359619141, 0.0, -6.103515625e-05, -0.003108978271484375, -7.62939453125e-06, -1.4781950994802173e-05, -1.9669512766995467e-05, -0.0013061678037047386, -7.867813110351562e-06, -0.0004273653030395508, -1.9073486328125e-06, -0.0002918243408203125], "score": -5.882139553898924, "model_output": {"hole4": "player", "hole0": "LordOfTheArena", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "ALL", "_type": "Template14", "hole0": "Lord of the Arena"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 6}]}, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n"}, {"choice_history": [121, 198, "Lord", "Of", "Of", "Arena", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.000118255615234375, -0.0004711151123046875, -0.00046397498226724565, -0.0004408954700920731, -5.835198879241943, -0.07279295474290848, -1.025199526338838e-05, -3.57618773705326e-07, -3.445148468017578e-05, -2.1219253540039062e-05, -3.814697265625e-05, -0.0016269683837890625, -8.0108642578125e-05, -6.31808916295995e-06, -0.00014066696166992188, -0.0005050945328548551, -0.0001201629638671875, -0.0017590492498129606, -0.0008602142333984375, -0.003526922781020403, -3.814697265625e-06, -0.009431635029613972, -1.9073486328125e-06, -0.0003256797790527344, -1.9073486328125e-06, -8.7738037109375e-05, 0.0, -0.0029834508895874023, 0.0, -5.91278076171875e-05, -0.0022983551025390625, -7.62939453125e-06, -1.4901160284352954e-05, -1.4543520592269488e-05, -0.0013586197746917605, -7.867813110351562e-06, -0.0004178285598754883, -1.9073486328125e-06, -0.000293731689453125], "score": -5.93552665362904, "model_output": {"hole4": "player", "hole0": "LordOfOfArena", "hole1": "MinionCard", "hole2": [{"hole1": 6, "hole2": "ALL", "_type": "Template14", "hole0": "Lord of the Arena"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 6}]}, "inferred_code": "class LordOfOfArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n"}, {"choice_history": [121, 198, "Lord", "Of", "The", "Arena", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.000118255615234375, -0.0004711151123046875, -0.00046397498226724565, -0.0004408954700920731, -0.007542185485363007, -9.024007886182517e-05, -7.748603820800781e-06, -7.15237547410652e-07, -6.67572021484375e-05, -1.537799835205078e-05, -3.24249267578125e-05, -0.00093841552734375, -6.67572021484375e-05, -6.43729799776338e-06, -0.0001327991485595703, -0.0004990195157006383, -0.00011444091796875, -0.0016263611614704132, -0.0010242462158203125, -0.0035096376668661833, -3.814697265625e-06, -0.009446283802390099, -1.9073486328125e-06, -0.0003275871276855469, -1.9073486328125e-06, -8.96453857421875e-05, 0.0, -5.912135601043701, -3.814697265625e-06, -8.0108642578125e-05, -0.003635406494140625, -7.62939453125e-06, -5.459785461425781e-05, -8.463848644169047e-06, -0.0007539967191405594, -5.841255187988281e-06, -0.00032269954681396484, -1.9073486328125e-06, -0.000110626220703125], "score": -5.944159644142928, "model_output": {"hole4": "p", "hole0": "LordOfTheArena", "hole1": "MinionCard", "hole2": [{"hole1": 6, "hole2": "ALL", "_type": "Template14", "hole0": "Lord of the Arena"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 6}]}, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, p):\n        return Minion(6, 5, taunt=True)\n"}, {"choice_history": [121, 198, "Lord", "Of", "Arena", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.000118255615234375, -0.0004711151123046875, -0.00046397498226724565, -0.0004408954700920731, -5.782963752746582, -6.85453342157416e-05, -3.695138730108738e-06, -3.4332275390625e-05, -1.9311904907226562e-05, -3.62396240234375e-05, -0.00074005126953125, -9.34600830078125e-05, -4.768367489305092e-06, -0.00011944770812988281, -0.0006105529027990997, -0.00014495849609375, -0.1968308985233307, -0.007564544677734375, -0.001951209967955947, -1.9073486328125e-06, -0.009512759745121002, -1.9073486328125e-06, -0.0003789663314819336, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.0030999183654785156, 0.0, -6.103515625e-05, -0.0023555755615234375, -7.62939453125e-06, -1.5139577953959815e-05, -1.4424312212213408e-05, -0.0014223968610167503, -7.867813110351562e-06, -0.0004159212112426758, -1.9073486328125e-06, -0.0002956390380859375], "score": -6.010370280394, "model_output": {"hole4": "player", "hole0": "LordOfArena", "hole1": "MinionCard", "hole2": [{"hole1": 6, "hole2": "ALL", "_type": "Template14", "hole0": "Lord of the Arena"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 6}]}, "inferred_code": "class LordOfArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n"}, {"choice_history": [121, 198, "Lord", "Of", "The", "Arena", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "6", "<EOS>", "5", "<EOS>", 328, 119, 310, "taunt", "<EOS>", 62, 119, 310, "taunt", "<EOS>", 62], "score_history": [-0.000118255615234375, -0.0004711151123046875, -0.00046397498226724565, -0.0004408954700920731, -0.007542185485363007, -9.024007886182517e-05, -7.748603820800781e-06, -7.15237547410652e-07, -6.67572021484375e-05, -1.537799835205078e-05, -3.24249267578125e-05, -0.00093841552734375, -6.67572021484375e-05, -6.43729799776338e-06, -0.0001327991485595703, -0.0004990195157006383, -0.00011444091796875, -0.0016263611614704132, -0.0010242462158203125, -0.0035096376668661833, -3.814697265625e-06, -0.009446283802390099, -1.9073486328125e-06, -0.0003275871276855469, -1.9073486328125e-06, -8.96453857421875e-05, 0.0, -0.00311887264251709, 0.0, -6.103515625e-05, -6.132602691650391, -0.00830841064453125, -1.907327532535419e-05, -4.57763671875e-05, -1.0371186363045126e-05, -8.22540732769994e-06, -0.006880488246679306, -1.251697449333733e-05, -0.00606536865234375, -1.52587890625e-05, 0.0, -0.1305774450302124, -1.9073486328125e-06, -4.00543212890625e-05, -4.76837158203125e-05, -8.96453857421875e-05, -0.03070354461669922, 0.0, -0.000270843505859375], "score": -6.3459181639937015, "model_output": {"hole4": "player", "hole0": "LordOfTheArena", "hole1": "MinionCard", "hole2": [{"hole1": 6, "hole2": "ALL", "_type": "Template14", "hole0": "Lord of the Arena"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 6, "hole2": 5, "_type": "Template36", "hole3": [{"value": {"_type": "Template79"}, "arg": "taunt", "_type": "keyword"}, {"value": {"_type": "Template79"}, "arg": "taunt", "_type": "keyword"}], "hole0": "Minion"}]}, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True, taunt=True)\n"}, {"choice_history": [121, 198, "Lord", "Of", "The", "Arena", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "6", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.000118255615234375, -0.0004711151123046875, -0.00046397498226724565, -0.0004408954700920731, -0.007542185485363007, -9.024007886182517e-05, -7.748603820800781e-06, -7.15237547410652e-07, -6.67572021484375e-05, -1.537799835205078e-05, -3.24249267578125e-05, -0.00093841552734375, -6.67572021484375e-05, -6.43729799776338e-06, -0.0001327991485595703, -0.0004990195157006383, -0.00011444091796875, -0.0016263611614704132, -0.0010242462158203125, -0.0035096376668661833, -3.814697265625e-06, -0.009446283802390099, -1.9073486328125e-06, -0.0003275871276855469, -1.9073486328125e-06, -8.96453857421875e-05, 0.0, -0.00311887264251709, 0.0, -6.103515625e-05, -0.0023651123046875, -7.62939453125e-06, -1.5020368664409034e-05, -1.4543520592269488e-05, -6.708254814147949, -2.4318689611391164e-05, -0.0005292892456054688, -3.814697265625e-06, -0.0004482269287109375], "score": -6.74188162817336, "model_output": {"hole4": "player", "hole0": "LordOfTheArena", "hole1": "MinionCard", "hole2": [{"hole1": 6, "hole2": "ALL", "_type": "Template14", "hole0": "Lord of the Arena"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 6, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 6}]}, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 6, taunt=True)\n"}, {"choice_history": [121, 198, "Lord", "Of", "The", "Arena", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Lord", " ", "of", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.000118255615234375, -0.0004711151123046875, -0.00046397498226724565, -0.0004408954700920731, -0.007542185485363007, -9.024007886182517e-05, -7.748603820800781e-06, -7.15237547410652e-07, -6.67572021484375e-05, -1.537799835205078e-05, -3.24249267578125e-05, -0.00093841552734375, -6.67572021484375e-05, -6.43729799776338e-06, -0.0001327991485595703, -0.0004990195157006383, -0.00011444091796875, -6.896005153656006, -0.0071620941162109375, -0.018599485978484154, -1.9073486328125e-06, -0.0002773999876808375, -1.9073486328125e-06, -0.0001239776611328125, 0.0, -0.0035554170608520508, 0.0, -6.67572021484375e-05, -0.0011539459228515625, -7.62939453125e-06, -1.0967253729177173e-05, -1.4066675248614047e-05, -0.0013042581267654896, -9.775161743164062e-06, -0.0004159212112426758, -1.9073486328125e-06, -0.0002689361572265625], "score": -6.939989067934221, "model_output": {"hole4": "player", "hole0": "LordOfTheArena", "hole1": "MinionCard", "hole2": [{"hole1": 6, "hole2": "ALL", "_type": "Template14", "hole0": "Lord of Arena"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 6}]}, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n"}, {"choice_history": [121, 198, "Lord", "Of", "The", "Arena", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Lord", " ", "of", " ", "the", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.000118255615234375, -0.0004711151123046875, -0.00046397498226724565, -0.0004408954700920731, -0.007542185485363007, -9.024007886182517e-05, -7.748603820800781e-06, -7.15237547410652e-07, -6.67572021484375e-05, -1.537799835205078e-05, -3.24249267578125e-05, -0.00093841552734375, -6.67572021484375e-05, -6.43729799776338e-06, -0.0001327991485595703, -0.0004990195157006383, -0.00011444091796875, -0.0016263611614704132, -6.975237846374512, -0.022014793008565903, -1.9073486328125e-06, -0.00014126300811767578, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.005346417427062988, 0.0, -5.91278076171875e-05, -0.0017948150634765625, -7.62939453125e-06, -1.2874602361989673e-05, -1.5377980162156746e-05, -0.0012779139215126634, -7.867813110351562e-06, -0.0004178285598754883, -1.9073486328125e-06, -0.00029754638671875], "score": -7.019366312309103, "model_output": {"hole4": "player", "hole0": "LordOfTheArena", "hole1": "MinionCard", "hole2": [{"hole1": 6, "hole2": "ALL", "_type": "Template14", "hole0": "Lord of the"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 6}]}, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the', 6, CHARACTER_CLASS.ALL, CARD_RARITY\n            .COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n"}, {"choice_history": [121, 198, "Lord", "Of", "The", "Arena", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.000118255615234375, -0.0004711151123046875, -0.00046397498226724565, -0.0004408954700920731, -0.007542185485363007, -9.024007886182517e-05, -7.748603820800781e-06, -7.15237547410652e-07, -6.67572021484375e-05, -1.537799835205078e-05, -3.24249267578125e-05, -0.00093841552734375, -6.67572021484375e-05, -6.43729799776338e-06, -0.0001327991485595703, -0.0004990195157006383, -0.00011444091796875, -0.0016263611614704132, -0.0010242462158203125, -0.0035096376668661833, -3.814697265625e-06, -7.108349800109863, 0.0, -0.0003854036331176758, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.004511475563049316, 0.0, -5.53131103515625e-05, -0.0022563934326171875, -7.62939453125e-06, -1.7166135876323096e-05, -1.4424312212213408e-05, -0.001337164081633091, -7.867813110351562e-06, -0.0004349946975708008, -1.9073486328125e-06, -0.0002956390380859375], "score": -7.134894482450363, "model_output": {"hole4": "player", "hole0": "LordOfTheArena", "hole1": "MinionCard", "hole2": [{"hole1": 2, "hole2": "ALL", "_type": "Template14", "hole0": "Lord of the Arena"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 6}]}, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n"}, {"choice_history": [121, 198, "Lord", "Of", "The", "Arena", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.000118255615234375, -0.0004711151123046875, -0.00046397498226724565, -0.0004408954700920731, -0.007542185485363007, -9.024007886182517e-05, -7.748603820800781e-06, -7.15237547410652e-07, -6.67572021484375e-05, -1.537799835205078e-05, -3.24249267578125e-05, -0.00093841552734375, -6.67572021484375e-05, -6.43729799776338e-06, -0.0001327991485595703, -0.0004990195157006383, -0.00011444091796875, -0.0016263611614704132, -0.0010242462158203125, -0.0035096376668661833, -3.814697265625e-06, -7.282461166381836, 0.0, -0.002697467803955078, -1.9073486328125e-06, -4.38690185546875e-05, 0.0, -0.002106308937072754, 0.0, -5.53131103515625e-05, -0.0062808990478515625, -7.62939453125e-06, -1.6927717297221534e-05, -1.2397755199344829e-05, -0.0011236618738621473, -7.867813110351562e-06, -0.00041222572326660156, -1.9073486328125e-06, -0.0003108978271484375], "score": -7.312712067165194, "model_output": {"hole4": "player", "hole0": "LordOfTheArena", "hole1": "MinionCard", "hole2": [{"hole1": 3, "hole2": "ALL", "_type": "Template14", "hole0": "Lord of the Arena"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 6}]}, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n"}, {"choice_history": [121, 198, "Lord", "Of", "Arena", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Lord", " ", "of", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "score_history": [-0.000118255615234375, -0.0004711151123046875, -0.00046397498226724565, -0.0004408954700920731, -5.782963752746582, -6.85453342157416e-05, -3.695138730108738e-06, -3.4332275390625e-05, -1.9311904907226562e-05, -3.62396240234375e-05, -0.00074005126953125, -9.34600830078125e-05, -4.768367489305092e-06, -0.00011944770812988281, -0.0006105529027990997, -0.00014495849609375, -1.7248879671096802, -3.0517578125e-05, -0.011859744787216187, -1.9073486328125e-06, -0.0002862214751075953, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -0.0034257173538208008, 0.0, -6.67572021484375e-05, -0.001232147216796875, -7.62939453125e-06, -1.2993811651540454e-05, -1.3470632438838948e-05, -0.0014394422760233283, -7.867813110351562e-06, -0.0004140138626098633, -1.9073486328125e-06, -0.0002803802490234375], "score": -7.530424112802848, "model_output": {"hole4": "player", "hole0": "LordOfArena", "hole1": "MinionCard", "hole2": [{"hole1": 6, "hole2": "ALL", "_type": "Template14", "hole0": "Lord of Arena"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": "taunt", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 6}]}, "inferred_code": "class LordOfArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n"}, {"choice_history": [121, 198, "Lord", "Of", "The", "Arena", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "DRUID", "<EOS>", "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "Cat", "Form", "<EOS>", 82, 234, "Transform", "<EOS>", "Cat", "Lord", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Bear", "Form", "<EOS>", 82, 234, "Transform", "<EOS>", "Bear", "Lord", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "score_history": [-0.000118255615234375, -0.0004711151123046875, -0.00046397498226724565, -0.0004408954700920731, -0.007542185485363007, -9.024007886182517e-05, -7.748603820800781e-06, -7.15237547410652e-07, -6.67572021484375e-05, -1.537799835205078e-05, -3.24249267578125e-05, -7.429266929626465, -0.0030260086059570312, -8.773451554588974e-05, -5.9485435485839844e-05, -0.00027855992084369063, -5.352497100830078e-05, -0.001014408189803362, -0.0005474090576171875, -0.0061179399490356445, 0.0, -8.797716145636514e-05, -1.1920928244535389e-07, -0.021065711975097656, 0.0, -0.004736065864562988, -1.9073486328125e-06, -0.024288177490234375, -0.0001373291015625, -0.004147648811340332, -0.0004940032958984375, -0.000476837158203125, -0.0024051666259765625, -7.62939453125e-06, -0.012176716700196266, -0.0010883808135986328, -0.0003719329833984375, -0.000118255615234375, -2.86102294921875e-05, -0.0005590915679931641, -0.00019848346710205078, -0.008481621742248535, -0.20578691363334656, -1.71661376953125e-05, -9.34600830078125e-05, -2.09808349609375e-05, -0.0001010894775390625, -5.7220458984375e-06, 0.0, -2.288818359375e-05, -0.0072193145751953125, -0.0003032684326171875, -0.0004717111587524414, -5.14984130859375e-05, -8.96453857421875e-05, -0.0001430511474609375, -1.9073486328125e-06, -0.13080383837223053, -0.004361748229712248, -1.71661376953125e-05, -0.000431060791015625, -6.29425048828125e-05, -0.0013177393702790141, -7.259845733642578e-05, -0.009626377373933792, -0.07310996204614639, -3.4332275390625e-05, -1.9073486328125e-05, -1.1444091796875e-05, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, 0.0, -4.00543212890625e-05, -5.7220458984375e-05, -1.9073486328125e-06, -0.0027730464935302734, 0.0, -0.0001068115234375, -0.01789093017578125, -2.6702880859375e-05, -0.0008073672070167959, -0.0002751350402832031, -0.278556764125824, -0.0008087158203125], "score": -8.2661683186925, "model_output": {"hole4": "player", "hole0": "LordOfTheArena", "hole1": "MinionCard", "hole2": [{"hole4": {"hole1": [{"_type": "Template46", "hole0": "CatForm"}, {"hole1": "CatLord", "_type": "Template31", "hole0": "Transform"}, {"_type": "Template46", "hole0": "SelfSelector"}], "hole2": [{"hole1": [{"_type": "Template46", "hole0": "BearForm"}, {"hole1": "BearLord", "_type": "Template31", "hole0": "Transform"}, {"_type": "Template46", "hole0": "SelfSelector"}], "hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45_expr_seq", "hole0": "Choice"}], "_type": "Template45", "hole0": "Choice"}, "hole0": "Lord of the Arena", "hole1": 6, "hole2": "DRUID", "_type": "Template11", "hole3": "choices"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template32", "hole0": 6}]}, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(CatForm(), Transform(\n            CatLord()), SelfSelector()), Choice(BearForm(), Transform(\n            BearLord()), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n"}], "index": 63}
{"beams": [{"choice_history": [121, 198, "Mechanical", "Dragonling", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Mechanical", " ", "Dragonling", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score_history": [-3.0517578125e-05, -4.1961669921875e-05, -1.311301275563892e-06, -0.0043788752518594265, -2.1457672119140625e-06, -3.574823495000601e-07, -3.814697265625e-06, -1.33514404296875e-05, -0.0008411407470703125, -0.03209686279296875, -2.6702880859375e-05, -2.09808349609375e-05, -0.010869979858398438, -3.24249267578125e-05, -0.000537872314453125, -6.103515625e-05, -2.6702880859375e-05, 0.0, -0.00029098967206664383, -9.059905096364673e-06, 0.0, -0.001953125, -0.000370025634765625, -0.0075969696044921875, -0.00016021728515625, -3.62396240234375e-05, -0.0001583099365234375, -8.58306884765625e-05, -0.003762124804779887, 0.0, -9.5367431640625e-06, 0.0, -0.00023555755615234375, 0.0, -0.000110626220703125, -0.0001373291015625, -9.5367431640625e-06, -5.9604644775390625e-06, 0.0, -2.193450927734375e-05, 0.0], "score": -0.06393941107489809, "model_output": {"hole4": "player", "hole0": "MechanicalDragonling", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "MECH"}], "_type": "Call", "args": [{"s": "Mechanical Dragonling", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}, {"choice_history": [121, 198, "Mechanical", "Dragonling", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Mechanical", " ", "Dragonling", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score_history": [-3.0517578125e-05, -4.1961669921875e-05, -1.311301275563892e-06, -0.0043788752518594265, -2.1457672119140625e-06, -3.574823495000601e-07, -3.814697265625e-06, -1.33514404296875e-05, -0.0008411407470703125, -3.538567543029785, -0.0019702911376953125, -1.0728830375228426e-06, -0.0012030595680698752, -7.033347174001392e-06, -3.814697265625e-06, -5.5256299674510956e-05, 0.0, -0.002121448516845703, 0.0, -5.1856040954589844e-05, -3.814697265625e-06, -0.4941997528076172, -0.0048007965087890625, -8.392333984375e-05, 0.0, -0.0035238265991210938, -0.0011730194091796875, -0.17139780521392822, -1.52587890625e-05, -0.0001850128173828125, 0.0, -2.6345251171733253e-05, 0.0, -4.1961669921875e-05, -0.0003604888916015625, -5.7220458984375e-06, -2.1457672119140625e-06, 0.0, -1.442432312614983e-05, 0.0], "score": -4.225129149587133, "model_output": {"hole4": "player", "hole0": "MechanicalDragonling", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Mechanical Dragonling", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}, {"choice_history": [121, 198, "Mechanical", "Dragonling", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Mechanical", " ", "Dragonling", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score_history": [-3.0517578125e-05, -4.1961669921875e-05, -1.311301275563892e-06, -0.0043788752518594265, -2.1457672119140625e-06, -3.574823495000601e-07, -3.814697265625e-06, -1.33514404296875e-05, -0.0008411407470703125, -3.538567543029785, -0.0019702911376953125, -1.0728830375228426e-06, -0.0012030595680698752, -7.033347174001392e-06, -3.814697265625e-06, -5.5256299674510956e-05, 0.0, -0.002121448516845703, 0.0, -5.1856040954589844e-05, -3.814697265625e-06, -0.964076042175293, -0.000213623046875, -1.9073486328125e-06, -0.00010895729064941406, 0.0, -0.0005931854248046875, -0.0008544921875, -5.7220458984375e-06, -3.099440846199286e-06, 0.0, -1.8715856640483253e-05, 0.0], "score": -4.515174410970417, "model_output": {"hole4": "player", "hole0": "MechanicalDragonling", "hole1": "MinionCard", "hole2": [{"hole4": {"_type": "Template53"}, "hole0": "Mechanical Dragonling", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}, {"choice_history": [121, 198, "Mechanical", "Dragonling", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Mechanical", " ", "Dragonling", "<EOS>", 103, 95, 94, 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score_history": [-3.0517578125e-05, -4.1961669921875e-05, -1.311301275563892e-06, -0.0043788752518594265, -2.1457672119140625e-06, -3.574823495000601e-07, -3.814697265625e-06, -1.33514404296875e-05, -0.0008411407470703125, -0.03209686279296875, -2.6702880859375e-05, -2.09808349609375e-05, -4.559914588928223, -0.0009307861328125, -0.00093841552734375, -0.0005283355712890625, -4.38690185546875e-05, 0.0, -0.00032126810401678085, -1.5497189451707527e-05, 0.0, -0.023009300231933594, -0.0042133331298828125, -0.005458831787109375, -0.0001068115234375, -0.00029027462005615234, -1.9073486328125e-06, -0.01833367347717285, 0.0, -0.000518798828125, -3.4332275390625e-05, -7.62939453125e-06, -1.2397762475302443e-05, -1.1920928244535389e-07, -3.886222475557588e-05, 0.0], "score": -4.652177054728774, "model_output": {"hole4": "player", "hole0": "MechanicalDragonling", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "_type": "Call", "args": [{"s": "Mechanical Dragonling", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}, {"choice_history": [121, 198, "Mechanical", "Dragonling", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Mechanical", " ", "Dragonling", "<EOS>", 103, 95, 96, 112, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score_history": [-3.0517578125e-05, -4.1961669921875e-05, -1.311301275563892e-06, -0.0043788752518594265, -2.1457672119140625e-06, -3.574823495000601e-07, -3.814697265625e-06, -1.33514404296875e-05, -0.0008411407470703125, -0.03209686279296875, -2.6702880859375e-05, -2.09808349609375e-05, -0.010869979858398438, -3.24249267578125e-05, -0.000537872314453125, -6.103515625e-05, -2.6702880859375e-05, 0.0, -0.00029098967206664383, -9.059905096364673e-06, 0.0, -0.001953125, -0.000370025634765625, -4.992005348205566, -0.0007171630859375, -8.20159912109375e-05, -0.0002727508544921875, -6.29425048828125e-05, -0.0034437174908816814, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0003578662872314453, 0.0, -0.000110626220703125, -0.000186920166015625, -1.1444091796875e-05, -9.775161743164062e-06, 0.0, -3.135204315185547e-05, 0.0], "score": -5.048912603988356, "model_output": {"hole4": "player", "hole0": "MechanicalDragonling", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "MECH"}], "_type": "Call", "args": [{"s": "Mechanical Dragonling", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, False, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}, {"choice_history": [121, 198, "Mechanical", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Mechanical", " ", "Dragonling", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score_history": [-3.0517578125e-05, -4.1961669921875e-05, -1.311301275563892e-06, -5.6346940994262695, -1.131853787228465e-05, -1.728534698486328e-05, -5.841255187988281e-06, -0.000652313232421875, -0.024980545043945312, -1.9073486328125e-05, -2.86102294921875e-05, -0.009197235107421875, -4.1961669921875e-05, -0.0004425048828125, -5.7220458984375e-05, -2.09808349609375e-05, 0.0, -0.0010534522589296103, -1.1205671398784034e-05, 0.0, -0.0029697418212890625, -0.0003814697265625, -0.010181427001953125, -0.0001506805419921875, -3.4332275390625e-05, -0.000152587890625, -9.1552734375e-05, -0.003073451342061162, 0.0, -9.5367431640625e-06, 0.0, -0.00021278858184814453, 0.0, -0.0001125335693359375, -0.000148773193359375, -9.5367431640625e-06, -5.9604644775390625e-06, 0.0, -2.193450927734375e-05, 0.0], "score": -5.68886374513113, "model_output": {"hole4": "player", "hole0": "Mechanical", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "MECH"}], "_type": "Call", "args": [{"s": "Mechanical Dragonling", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class Mechanical(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}, {"choice_history": [121, 198, "Mechanical", "Dragonling", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Mechanical", " ", "Dragonling", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score_history": [-3.0517578125e-05, -4.1961669921875e-05, -1.311301275563892e-06, -0.0043788752518594265, -2.1457672119140625e-06, -3.574823495000601e-07, -3.814697265625e-06, -1.33514404296875e-05, -0.0008411407470703125, -3.538567543029785, -0.0019702911376953125, -1.0728830375228426e-06, -0.0012030595680698752, -7.033347174001392e-06, -3.814697265625e-06, -5.5256299674510956e-05, 0.0, -0.002121448516845703, 0.0, -5.1856040954589844e-05, -3.814697265625e-06, -0.4941997528076172, -0.0048007965087890625, -8.392333984375e-05, 0.0, -0.0035238265991210938, -0.0011730194091796875, -1.9625698328018188, -5.7220458984375e-06, -0.000125885009765625, -1.9073486328125e-06, -5.2094459533691406e-05, 0.0, -6.29425048828125e-05, -0.0006618499755859375, -5.7220458984375e-06, -2.1457672119140625e-06, 0.0, -1.239776611328125e-05, 0.0], "score": -6.016580484543169, "model_output": {"hole4": "player", "hole0": "MechanicalDragonling", "hole1": "MinionCard", "hole2": [{"hole4": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole0": "Mechanical Dragonling", "hole1": 1, "hole2": "COMMON", "_type": "Template10", "hole3": "minion_type"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}, {"choice_history": [121, 198, "Mechanical", "Dragonling", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Mechanical", " ", "Dragonling", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score_history": [-3.0517578125e-05, -4.1961669921875e-05, -1.311301275563892e-06, -0.0043788752518594265, -2.1457672119140625e-06, -3.574823495000601e-07, -3.814697265625e-06, -1.33514404296875e-05, -0.0008411407470703125, -0.03209686279296875, -2.6702880859375e-05, -2.09808349609375e-05, -0.010869979858398438, -3.24249267578125e-05, -0.000537872314453125, -6.103515625e-05, -2.6702880859375e-05, 0.0, -0.00029098967206664383, -9.059905096364673e-06, 0.0, -0.001953125, -0.000370025634765625, -0.0075969696044921875, -0.00016021728515625, -3.62396240234375e-05, -0.0001583099365234375, -8.58306884765625e-05, -6.558812141418457, 0.0, -1.33514404296875e-05, 0.0, -0.00011265277134953067, 0.0, -9.34600830078125e-05, -6.67572021484375e-05, -7.62939453125e-06, -6.318092346191406e-06, 0.0, -3.3855438232421875e-05, 0.0], "score": -6.61879297077212, "model_output": {"hole4": "player", "hole0": "MechanicalDragonling", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "DRAGON"}], "_type": "Call", "args": [{"s": "Mechanical Dragonling", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}, {"choice_history": [121, 198, "Mechanical", "Dragonling", "<EOS>", "Minion", "Card", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score_history": [-3.0517578125e-05, -4.1961669921875e-05, -1.311301275563892e-06, -0.0043788752518594265, -2.1457672119140625e-06, -3.574823495000601e-07, -3.814697265625e-06, -1.33514404296875e-05, -0.0008411407470703125, -6.5913238525390625, -0.012312889099121094, -1.728534698486328e-05, -1.1920928244535389e-07, -4.6372413635253906e-05, -4.768370445162873e-07, -0.09139181673526764, 0.0, -0.00096893310546875, -0.04466438293457031, 0.0, -0.02832113951444626, 0.0, -0.000331878662109375, -0.0008544921875, -3.4332275390625e-05, -3.099440846199286e-06, 0.0, -2.0980833141948096e-05, 0.0], "score": -6.775605527069381, "model_output": {"hole4": "player", "hole0": "MechanicalDragonling", "hole1": "MinionCard", "hole2": [{"hole1": 1, "hole2": "charge", "_type": "Template27", "hole3": {"_type": "Template79"}, "hole0": 2}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        return Minion(2, 1, charge=True)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}, {"choice_history": [121, 198, "Mechanical", "Dragonling", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Mechanical", " ", "Dragonling", "<EOS>", 106, 95, 94, 112, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score_history": [-3.0517578125e-05, -4.1961669921875e-05, -1.311301275563892e-06, -0.0043788752518594265, -2.1457672119140625e-06, -3.574823495000601e-07, -3.814697265625e-06, -1.33514404296875e-05, -0.0008411407470703125, -0.03209686279296875, -2.6702880859375e-05, -2.09808349609375e-05, -0.010869979858398438, -3.24249267578125e-05, -0.000537872314453125, -6.103515625e-05, -2.6702880859375e-05, 0.0, -0.00029098967206664383, -9.059905096364673e-06, 0.0, -6.778611183166504, -0.7266139984130859, -0.007841110229492188, -0.000209808349609375, -4.9591064453125e-05, -0.0002231597900390625, -7.82012939453125e-05, -0.01066350657492876, 0.0, -1.52587890625e-05, 0.0, -0.0003139972686767578, 0.0, -0.0001068115234375, -9.34600830078125e-05, -9.5367431640625e-06, -4.0531158447265625e-06, 0.0, -2.384185791015625e-05, 0.0], "score": -7.574143605421341, "model_output": {"hole4": "player", "hole0": "MechanicalDragonling", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "MECH"}], "_type": "Call", "args": [{"s": "Mechanical Dragonling", "_type": "Str"}, {"_type": "Template63"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}, {"choice_history": [121, 198, "Mechanical", "Dragonling", "<EOS>", "Minion", "Card", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>", "player", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score_history": [-3.0517578125e-05, -4.1961669921875e-05, -1.311301275563892e-06, -0.0043788752518594265, -2.1457672119140625e-06, -3.574823495000601e-07, -3.814697265625e-06, -1.33514404296875e-05, -0.0008411407470703125, -7.2731828689575195, -0.002864837646484375, -0.0025235414505004883, 0.0, -0.00011920928955078125, 0.0, -0.5909761190414429, 0.0, -0.016808848828077316, 0.0, -0.0017528533935546875, -0.002117156982421875, -1.33514404296875e-05, -2.741813204920618e-06, 0.0, -5.388259523897432e-05, 0.0], "score": -7.895728887373934, "model_output": {"hole4": "player", "hole0": "MechanicalDragonling", "hole1": "MinionCard", "hole2": [{"hole1": 1, "_type": "Template32", "hole0": 2}], "_type": "Template1", "hole3": "player", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        return Minion(2, 1)\n\n    def player(self, player):\n        return Minion(2, 1)\n"}, {"choice_history": [121, 198, "Mechanical", "Dragonling", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Mechanical", " ", "Dragonling", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score_history": [-3.0517578125e-05, -4.1961669921875e-05, -1.311301275563892e-06, -0.0043788752518594265, -2.1457672119140625e-06, -3.574823495000601e-07, -3.814697265625e-06, -1.33514404296875e-05, -0.0008411407470703125, -0.03209686279296875, -2.6702880859375e-05, -2.09808349609375e-05, -0.010869979858398438, -3.24249267578125e-05, -0.000537872314453125, -6.103515625e-05, -2.6702880859375e-05, 0.0, -0.00029098967206664383, -9.059905096364673e-06, 0.0, -6.778611183166504, -0.6678409576416016, -0.00051116943359375, -3.24249267578125e-05, 0.0, -1.4185905456542969e-05, -2.0265579223632812e-06, -0.4759654998779297, -1.9073486328125e-06, -0.016054153442382812, -0.0001678466796875, -2.09808349609375e-05, -0.0004863739013671875, -2.86102294921875e-05, -0.0046694278717041016, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -6.079673767089844e-06, 0.0, -0.00012969970703125, -0.0002803802490234375, -1.1444091796875e-05, -4.0531158447265625e-06, 0.0, -1.7881393432617188e-05, 0.0], "score": -7.994151909950233, "model_output": {"hole4": "player", "hole0": "MechanicalDragonling", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}], "_type": "Call", "args": [{"s": "Mechanical Dragonling", "_type": "Str"}, {"_type": "Template63"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}, {"choice_history": [121, 198, "Mechanical", "Dragonling", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Mechanical", " ", "Dragonling", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score_history": [-3.0517578125e-05, -4.1961669921875e-05, -1.311301275563892e-06, -0.0043788752518594265, -2.1457672119140625e-06, -3.574823495000601e-07, -3.814697265625e-06, -1.33514404296875e-05, -0.0008411407470703125, -0.03209686279296875, -2.6702880859375e-05, -2.09808349609375e-05, -0.010869979858398438, -3.24249267578125e-05, -0.000537872314453125, -6.103515625e-05, -2.6702880859375e-05, 0.0, -0.00029098967206664383, -9.059905096364673e-06, 0.0, -0.001953125, -0.000370025634765625, -0.0075969696044921875, -0.00016021728515625, -3.62396240234375e-05, -0.0001583099365234375, -8.58306884765625e-05, -8.032451629638672, -1.71661376953125e-05, -1.9073486328125e-05, 0.0, -8.678434096509591e-05, 0.0, -8.0108642578125e-05, -7.43865966796875e-05, -7.62939453125e-06, -9.894371032714844e-06, 0.0, -3.3736228942871094e-05, 0.0], "score": -8.092427213769042, "model_output": {"hole4": "player", "hole0": "MechanicalDragonling", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "DEMON"}], "_type": "Call", "args": [{"s": "Mechanical Dragonling", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}, {"choice_history": [121, 198, "Mechanical", "Dragonling", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Mechanical", " ", "Dragonling", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score_history": [-3.0517578125e-05, -4.1961669921875e-05, -1.311301275563892e-06, -0.0043788752518594265, -2.1457672119140625e-06, -3.574823495000601e-07, -3.814697265625e-06, -1.33514404296875e-05, -0.0008411407470703125, -0.03209686279296875, -2.6702880859375e-05, -2.09808349609375e-05, -0.010869979858398438, -3.24249267578125e-05, -0.000537872314453125, -6.103515625e-05, -2.6702880859375e-05, 0.0, -0.00029098967206664383, -9.059905096364673e-06, 0.0, -0.001953125, -0.000370025634765625, -0.0075969696044921875, -0.00016021728515625, -3.62396240234375e-05, -0.0001583099365234375, -8.58306884765625e-05, -0.003762124804779887, 0.0, -9.5367431640625e-06, 0.0, -8.46060562133789, -1.9073486328125e-06, -1.52587890625e-05, -0.0001354217529296875, -3.814697265625e-06, -6.198883056640625e-06, 0.0, -8.285044896183535e-05, 0.0], "score": -8.524269539737361, "model_output": {"hole4": "p", "hole0": "MechanicalDragonling", "hole1": "MinionCard", "hole2": [{"value": {"func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "MECH"}], "_type": "Call", "args": [{"s": "Mechanical Dragonling", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}]}, "_type": "Expr"}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, p):\n        return Minion(2, 1)\n"}, {"choice_history": [121, 198, "Mechanical", "Dragonling", "<EOS>", "Minion", "Card", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score_history": [-3.0517578125e-05, -4.1961669921875e-05, -1.311301275563892e-06, -0.0043788752518594265, -2.1457672119140625e-06, -3.574823495000601e-07, -3.814697265625e-06, -1.33514404296875e-05, -0.0008411407470703125, -7.2731828689575195, -0.002864837646484375, -0.0025235414505004883, 0.0, -0.00011920928955078125, 0.0, -1.310827612876892, 0.0, -0.03259536623954773, 0.0, -0.0006256103515625, -0.000469207763671875, -1.1444091796875e-05, -5.245207830739673e-06, 0.0, -5.960464113741182e-05, 0.0], "score": -8.628598024452003, "model_output": {"hole4": "player", "hole0": "MechanicalDragonling", "hole1": "MinionCard", "hole2": [{"hole1": 1, "_type": "Template32", "hole0": 2}], "_type": "Template1", "hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template32", "hole0": 2}]}, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        return Minion(2, 1)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}], "index": 64}
{"beams": [{"choice_history": [121, 200, "Mind", "Blast", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-1.9073486328125e-05, -0.00016021728515625, -3.576278118089249e-07, -2.384185791015625e-06, -9.775161743164062e-06, -1.9073486328125e-06, -6.330013275146484e-05, -8.690357208251953e-05, -0.0045623779296875, -0.000579833984375, -2.09808349609375e-05, -9.202533692587167e-05, -0.00010502338409423828, -6.246560951694846e-05, 0.0, -0.0001480911741964519, 0.0, -0.0014249086380004883, 0.0, -0.0003528594970703125, -5.7220458984375e-06, -0.0004292726516723633, -1.9073486328125e-06, -5.876923387404531e-05, 0.0, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -1.537799835205078e-05, 0.0, -0.001941680908203125, -4.38690185546875e-05, -0.03973960876464844, -0.0003719329833984375, -0.001399993896484375, -3.814697265625e-06, -0.00025177001953125, -3.814697265625e-06, -0.0006923675537109375, -1.9073486328125e-06, -0.0003370046615600586, -3.576278118089249e-07, -0.0356593132019043, -1.0728830375228426e-06, -0.006899870932102203, -3.576278118089249e-07, -0.00028618681244552135, 0.0, -0.0010833740234375, -6.29425048828125e-05, -0.0001926422119140625, -8.7738037109375e-05, -0.0007832050323486328, -2.264974000354414e-06, -0.00021456493414007127, -2.384185791015625e-06, -3.0517578125e-05], "score": -0.09836484878582041, "model_output": {"hole4": "player", "hole0": "MindBlast", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Mind Blast"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Mind", "Blast", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-1.9073486328125e-05, -0.00016021728515625, -3.576278118089249e-07, -2.384185791015625e-06, -9.775161743164062e-06, -1.9073486328125e-06, -6.330013275146484e-05, -8.690357208251953e-05, -0.0045623779296875, -0.000579833984375, -2.09808349609375e-05, -9.202533692587167e-05, -0.00010502338409423828, -6.246560951694846e-05, 0.0, -0.0001480911741964519, 0.0, -0.0014249086380004883, 0.0, -0.0003528594970703125, -5.7220458984375e-06, -0.0004292726516723633, -1.9073486328125e-06, -5.876923387404531e-05, 0.0, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -1.537799835205078e-05, 0.0, -0.001941680908203125, -4.38690185546875e-05, -3.2524547576904297, -7.62939453125e-06, -0.000194549560546875, -9.72747802734375e-05, -0.009629130363464355, -1.311301275563892e-06, -0.003414154052734375, -0.001636505126953125, -0.000232696533203125, 0.0, -0.00012969970703125, 0.0, -0.001377701759338379, -5.7220458984375e-06, -0.00015997886657714844, 0.0, -2.47955322265625e-05, -0.0003948211669921875, -1.33514404296875e-05, -1.71661376953125e-05, -7.62939453125e-06, -4.00543212890625e-05, 0.0, -8.0108642578125e-05, -1.1920922133867862e-06, -0.00027191638946533203, -2.3841855067985307e-07, -0.0038181236013770103, 0.0, -0.0008144378662109375, -9.34600830078125e-05, -1.9073486328125e-06, -0.00030517578125, -1.52587890625e-05, -0.00037060980685055256, -0.0005302215577103198, -8.404207619605586e-05, -3.576278118089249e-07, -4.9591064453125e-05, -0.0005626678466796875, -0.00067138671875, -1.52587890625e-05, -0.0004214048385620117, -4.2199197196168825e-05, -9.858568955678493e-05, -1.0371197276981547e-05, -3.4332275390625e-05], "score": -3.288387618469727, "model_output": {"hole4": "player", "hole0": "MindBlast", "hole6": [{"_type": "Template19"}, {"body": [{"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "target": {"_type": "Name", "id": "minion"}, "iter": {"func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Mind Blast"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Mind", "Blast", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-1.9073486328125e-05, -0.00016021728515625, -3.576278118089249e-07, -2.384185791015625e-06, -9.775161743164062e-06, -1.9073486328125e-06, -6.330013275146484e-05, -8.690357208251953e-05, -0.0045623779296875, -0.000579833984375, -2.09808349609375e-05, -9.202533692587167e-05, -0.00010502338409423828, -6.246560951694846e-05, 0.0, -0.0001480911741964519, 0.0, -0.0014249086380004883, 0.0, -0.0003528594970703125, -5.7220458984375e-06, -0.0004292726516723633, -1.9073486328125e-06, -5.876923387404531e-05, 0.0, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -1.537799835205078e-05, 0.0, -0.001941680908203125, -4.38690185546875e-05, -0.03973960876464844, -0.0003719329833984375, -0.001399993896484375, -3.814697265625e-06, -0.00025177001953125, -3.814697265625e-06, -0.0006923675537109375, -1.9073486328125e-06, -0.0003370046615600586, -3.576278118089249e-07, -3.466063976287842, 0.0, -0.014840837568044662, -8.344646857949556e-07, -0.0008058950770646334, 0.0, -0.0008106231689453125, -5.91278076171875e-05, -0.000202178955078125, -8.7738037109375e-05, -0.0008383989334106445, -2.145764938177308e-06, -0.00022314664965961128, -2.503394853192731e-06, -2.86102294921875e-05], "score": -3.537024430185511, "model_output": {"hole4": "player", "hole0": "MindBlast", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "current_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Mind Blast"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.current_player.hero.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Mind", "Blast", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "<UNK>", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-1.9073486328125e-05, -0.00016021728515625, -3.576278118089249e-07, -2.384185791015625e-06, -9.775161743164062e-06, -1.9073486328125e-06, -6.330013275146484e-05, -8.690357208251953e-05, -0.0045623779296875, -0.000579833984375, -2.09808349609375e-05, -9.202533692587167e-05, -0.00010502338409423828, -6.246560951694846e-05, 0.0, -0.0001480911741964519, 0.0, -0.0014249086380004883, 0.0, -0.0003528594970703125, -5.7220458984375e-06, -0.0004292726516723633, -1.9073486328125e-06, -5.876923387404531e-05, 0.0, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -1.537799835205078e-05, 0.0, -0.001941680908203125, -4.38690185546875e-05, -0.03973960876464844, -0.0003719329833984375, -0.001399993896484375, -3.814697265625e-06, -0.00025177001953125, -3.814697265625e-06, -0.0006923675537109375, -1.9073486328125e-06, -0.0003370046615600586, -3.576278118089249e-07, -0.0356593132019043, -1.0728830375228426e-06, -5.426918983459473, 0.0, -0.07998015731573105, 0.0, -0.0016002655029296875, -0.0001010894775390625, -0.00012969970703125, -0.0001068115234375, -0.000956416130065918, -2.3841830625315197e-06, -0.00023995125957299024, -2.2649765014648438e-06, -2.86102294921875e-05], "score": -5.598785433696548, "model_output": {"hole4": "player", "hole0": "MindBlast", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "<UNK>", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Mind Blast"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.<UNK>.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Mind", "Blast", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-1.9073486328125e-05, -0.00016021728515625, -3.576278118089249e-07, -2.384185791015625e-06, -9.775161743164062e-06, -1.9073486328125e-06, -6.330013275146484e-05, -8.690357208251953e-05, -0.0045623779296875, -0.000579833984375, -2.09808349609375e-05, -9.202533692587167e-05, -0.00010502338409423828, -6.246560951694846e-05, 0.0, -0.0001480911741964519, 0.0, -0.0014249086380004883, 0.0, -0.0003528594970703125, -5.7220458984375e-06, -0.0004292726516723633, -1.9073486328125e-06, -5.876923387404531e-05, 0.0, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -1.537799835205078e-05, 0.0, -6.363062858581543, -0.000152587890625, -0.001575469970703125, -3.0517578125e-05, -0.32617855072021484, -7.5101784204889555e-06, 0.0, -0.0001068115234375, -0.0036296844482421875, -8.392333984375e-05, -8.58306884765625e-05, -0.0005917549133300781, -4.529942543740617e-06, -9.524764027446508e-05, -4.768370445162873e-07, -4.00543212890625e-05, -0.0046672821044921875, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.017742156982421875, -0.000164031982421875, -0.014081954956054688, -1.9073486328125e-06, -2.9683089451282285e-05, -5.960462772236497e-07, -0.02753603458404541, -2.0265558760002023e-06, -0.0043259067460894585, -2.9802276912960224e-06, -0.001604790915735066, 0.0, -0.0018711090087890625, -6.67572021484375e-05, -0.0002231597900390625, -7.05718994140625e-05, -0.0019272565841674805, -2.7418097943154862e-06, -0.00018500711303204298, -2.503394853192731e-06, -3.62396240234375e-05], "score": -6.7784817790442276, "model_output": {"hole4": "player", "hole0": "MindBlast", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Mind Blast"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(5), self)\n        game.other_player.hero.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Mind", "Blast", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "HUNTER", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-1.9073486328125e-05, -0.00016021728515625, -3.576278118089249e-07, -2.384185791015625e-06, -9.775161743164062e-06, -1.9073486328125e-06, -6.330013275146484e-05, -8.690357208251953e-05, -0.0045623779296875, -0.000579833984375, -2.09808349609375e-05, -9.202533692587167e-05, -0.00010502338409423828, -6.246560951694846e-05, 0.0, -0.0001480911741964519, 0.0, -0.0014249086380004883, 0.0, -0.0003528594970703125, -5.7220458984375e-06, -0.0004292726516723633, -1.9073486328125e-06, -5.876923387404531e-05, 0.0, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -1.537799835205078e-05, 0.0, -0.001941680908203125, -4.38690185546875e-05, -0.03973960876464844, -0.0003719329833984375, -0.001399993896484375, -3.814697265625e-06, -0.00025177001953125, -3.814697265625e-06, -0.0006923675537109375, -1.9073486328125e-06, -0.0003370046615600586, -3.576278118089249e-07, -6.750631809234619, 0.0, -0.07938073575496674, -9.536738616588991e-07, -0.0004192950436845422, 0.0, -0.000885009765625, -6.103515625e-05, -0.00019073486328125, -8.392333984375e-05, -0.0008099079132080078, -2.145764938177308e-06, -0.00022672265185974538, -2.384185791015625e-06, -2.86102294921875e-05], "score": -6.8857816814241914, "model_output": {"hole4": "player", "hole0": "MindBlast", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "HUNTER", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Mind Blast"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.HUNTER.hero.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Mind", "Blast", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-1.9073486328125e-05, -0.00016021728515625, -3.576278118089249e-07, -2.384185791015625e-06, -9.775161743164062e-06, -1.9073486328125e-06, -6.330013275146484e-05, -8.690357208251953e-05, -0.0045623779296875, -0.000579833984375, -2.09808349609375e-05, -9.202533692587167e-05, -0.00010502338409423828, -6.246560951694846e-05, 0.0, -0.0001480911741964519, 0.0, -0.0014249086380004883, 0.0, -0.0003528594970703125, -5.7220458984375e-06, -0.0004292726516723633, -1.9073486328125e-06, -5.876923387404531e-05, 0.0, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -1.537799835205078e-05, 0.0, -0.001941680908203125, -4.38690185546875e-05, -0.03973960876464844, -0.0003719329833984375, -7.278545379638672, -9.775130820344202e-06, -1.1920928244535389e-07, -3.24249267578125e-05, -0.08302688598632812, -3.4332275390625e-05, -0.000232696533203125, -0.0004904270172119141, -6.794906312279636e-06, -0.00010621461842674762, -3.576278118089249e-07, -3.0517578125e-05], "score": -7.41288330879285, "model_output": {"hole4": "player", "hole0": "MindBlast", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Mind Blast"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Mind", "Blast", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-1.9073486328125e-05, -0.00016021728515625, -3.576278118089249e-07, -2.384185791015625e-06, -9.775161743164062e-06, -1.9073486328125e-06, -6.330013275146484e-05, -8.690357208251953e-05, -0.0045623779296875, -0.000579833984375, -2.09808349609375e-05, -9.202533692587167e-05, -0.00010502338409423828, -6.246560951694846e-05, 0.0, -0.0001480911741964519, 0.0, -7.571364402770996, -1.9073486328125e-06, -0.000335693359375, -7.62939453125e-06, -0.0003566741943359375, -1.9073486328125e-06, -3.6597062717191875e-05, 0.0, -1.9073486328125e-06, -0.0001010894775390625, -2.47955322265625e-05, -1.919269561767578e-05, 0.0, -0.0018939971923828125, -4.38690185546875e-05, -0.04604148864746094, -0.0003986358642578125, -0.0013599395751953125, -3.814697265625e-06, -0.000247955322265625, -3.814697265625e-06, -0.0007305145263671875, -1.9073486328125e-06, -0.0003235340118408203, -2.3841855067985307e-07, -0.034218668937683105, -9.536738616588991e-07, -0.006791260559111834, -3.576278118089249e-07, -0.0002822534297592938, 0.0, -0.0010929107666015625, -6.29425048828125e-05, -0.00019073486328125, -8.96453857421875e-05, -0.0007832050323486328, -2.264974000354414e-06, -0.00021468412887770683, -2.384185791015625e-06, -3.0517578125e-05], "score": -7.6729790065552095, "model_output": {"hole4": "player", "hole0": "MindBlast", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "MAGE", "_type": "Template15", "hole3": "FREE", "hole0": "Mind Blast"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Mind", "Blast", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "damage", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-1.9073486328125e-05, -0.00016021728515625, -3.576278118089249e-07, -2.384185791015625e-06, -9.775161743164062e-06, -1.9073486328125e-06, -6.330013275146484e-05, -8.690357208251953e-05, -0.0045623779296875, -0.000579833984375, -2.09808349609375e-05, -9.202533692587167e-05, -0.00010502338409423828, -6.246560951694846e-05, 0.0, -0.0001480911741964519, 0.0, -0.0014249086380004883, 0.0, -0.0003528594970703125, -5.7220458984375e-06, -0.0004292726516723633, -1.9073486328125e-06, -5.876923387404531e-05, 0.0, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -1.537799835205078e-05, 0.0, -0.001941680908203125, -4.38690185546875e-05, -0.03973960876464844, -0.0003719329833984375, -0.001399993896484375, -3.814697265625e-06, -0.00025177001953125, -3.814697265625e-06, -0.0006923675537109375, -1.9073486328125e-06, -0.0003370046615600586, -3.576278118089249e-07, -0.0356593132019043, -1.0728830375228426e-06, -6.972902297973633, 0.0, -0.728481650352478, 0.0, -0.000873565673828125, -9.34600830078125e-05, -0.000125885009765625, -0.00014495849609375, -0.0009734630584716797, -2.0265558760002023e-06, -0.0002543753944337368, -3.576278118089249e-07, -2.6702880859375e-05], "score": -7.792597543037971, "model_output": {"hole4": "player", "hole0": "MindBlast", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "damage", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Mind Blast"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.damage.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Mind", "Blast", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-1.9073486328125e-05, -0.00016021728515625, -3.576278118089249e-07, -2.384185791015625e-06, -9.775161743164062e-06, -1.9073486328125e-06, -6.330013275146484e-05, -8.690357208251953e-05, -0.0045623779296875, -0.000579833984375, -2.09808349609375e-05, -9.202533692587167e-05, -0.00010502338409423828, -6.246560951694846e-05, 0.0, -0.0001480911741964519, 0.0, -0.0014249086380004883, 0.0, -0.0003528594970703125, -5.7220458984375e-06, -0.0004292726516723633, -1.9073486328125e-06, -5.876923387404531e-05, 0.0, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -1.537799835205078e-05, 0.0, -6.363062858581543, -0.000152587890625, -0.001575469970703125, -3.0517578125e-05, -1.2939748764038086, -5.7220458984375e-06, -0.0002498626708984375, -5.7220458984375e-06, -0.0007839202880859375, -1.9073486328125e-06, -0.000606536865234375, -7.152555099310121e-07, -0.024409528821706772, -3.576272320060525e-06, -0.007653828710317612, -8.344646857949556e-07, -0.0008000674424692988, 0.0, -0.001575469970703125, -6.67572021484375e-05, -0.000179290771484375, -0.0001087188720703125, -0.0006786584854125977, -1.9073468138230965e-06, -0.000259260181337595, -2.503394853192731e-06, -3.0517578125e-05, -0.020963668823242188, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -0.07791519165039062, -0.000881195068359375, -0.017591476440429688, -1.9073486328125e-06, -2.8014157578581944e-05, -1.0728830375228426e-06, -0.02313697338104248, -1.0728830375228426e-06, -0.002604964654892683, -2.50339189733495e-06, -0.0013879085890948772, 0.0, -0.0030155181884765625, -7.2479248046875e-05, -0.0002079010009765625, -6.4849853515625e-05, -0.0018423795700073242, -2.50339189733495e-06, -0.00018321916286367923, -2.503394853192731e-06, -3.814697265625e-05], "score": -7.85446215371627, "model_output": {"hole4": "player", "hole0": "MindBlast", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Mind Blast"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(5), self)\n        game.other_player.hero.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Mind", "Blast", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-1.9073486328125e-05, -0.00016021728515625, -3.576278118089249e-07, -2.384185791015625e-06, -9.775161743164062e-06, -1.9073486328125e-06, -6.330013275146484e-05, -8.690357208251953e-05, -0.0045623779296875, -0.000579833984375, -2.09808349609375e-05, -9.202533692587167e-05, -0.00010502338409423828, -6.246560951694846e-05, 0.0, -0.0001480911741964519, 0.0, -0.0014249086380004883, 0.0, -0.0003528594970703125, -5.7220458984375e-06, -0.0004292726516723633, -1.9073486328125e-06, -5.876923387404531e-05, 0.0, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -1.537799835205078e-05, 0.0, -0.001941680908203125, -4.38690185546875e-05, -0.03973960876464844, -0.0003719329833984375, -0.001399993896484375, -3.814697265625e-06, -0.00025177001953125, -3.814697265625e-06, -0.0006923675537109375, -1.9073486328125e-06, -0.0003370046615600586, -3.576278118089249e-07, -6.7507147789001465, 0.0, -0.4966017007827759, 0.0, -0.5906822681427002, 0.0, -0.0008449554443359375, -8.0108642578125e-05, -0.000118255615234375, -0.000110626220703125, -0.0013167858123779297, -2.9802276912960224e-06, -0.00020216978737153113, -2.2649765014648438e-06, -2.6702880859375e-05], "score": -7.893762011280046, "model_output": {"hole4": "player", "hole0": "MindBlast", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "current_player", "value": {"attr": "game", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Mind Blast"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.game.current_player.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Mind", "Blast", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-1.9073486328125e-05, -0.00016021728515625, -3.576278118089249e-07, -2.384185791015625e-06, -9.775161743164062e-06, -1.9073486328125e-06, -6.330013275146484e-05, -8.690357208251953e-05, -0.0045623779296875, -0.000579833984375, -2.09808349609375e-05, -9.202533692587167e-05, -0.00010502338409423828, -6.246560951694846e-05, 0.0, -0.0001480911741964519, 0.0, -0.0014249086380004883, 0.0, -0.0003528594970703125, -5.7220458984375e-06, -0.0004292726516723633, -1.9073486328125e-06, -5.876923387404531e-05, 0.0, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -1.537799835205078e-05, 0.0, -0.001941680908203125, -4.38690185546875e-05, -0.03973960876464844, -0.0003719329833984375, -0.001399993896484375, -3.814697265625e-06, -0.00025177001953125, -3.814697265625e-06, -0.0006923675537109375, -1.9073486328125e-06, -0.0003370046615600586, -3.576278118089249e-07, -6.7507147789001465, 0.0, -1.0026518106460571, 0.0, -0.08918052166700363, 0.0, -0.001041412353515625, -9.5367431640625e-05, -8.96453857421875e-05, -9.5367431640625e-05, -0.001185297966003418, -3.2186455882765586e-06, -0.00019215751672163606, -2.2649765014648438e-06, -2.6702880859375e-05], "score": -7.898336959648191, "model_output": {"hole4": "player", "hole0": "MindBlast", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "other_player", "value": {"attr": "game", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Mind Blast"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.game.other_player.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Mind", "Blast", "<EOS>", "Spell", "Card", "<EOS>", 333, 140, 205, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "target", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-1.9073486328125e-05, -0.00016021728515625, -3.576278118089249e-07, -2.384185791015625e-06, -9.775161743164062e-06, -1.9073486328125e-06, -6.330013275146484e-05, -8.690357208251953e-05, -5.679132461547852, -0.1576375961303711, -8.58306884765625e-05, -0.000523430178873241, -0.0007100105285644531, -0.00024306746490765363, -1.9073486328125e-06, -0.0006558382883667946, 0.0, -0.002407073974609375, 0.0, -0.0005931854248046875, -3.814697265625e-06, -0.3326578140258789, -0.0001087188720703125, -1.33514404296875e-05, -0.007867813110351562, 0.0, -0.016904830932617188, 0.0, -0.2920055389404297, -2.0265579223632812e-06, -0.5441931486129761, 0.0, -0.27068042755126953, -0.000324249267578125, -0.04239940643310547, 0.0, -0.3238542079925537, -9.417489309271332e-06, -0.0035343170166015625, -0.00920867919921875, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.00014519691467285156, -5.960462772236497e-07, -0.0005095005035400391, -3.576278118089249e-07, -0.0014816622715443373, -1.9073486328125e-06, -0.0017838478088378906, 0.0, -0.001999457133933902, 0.0, -0.001186370849609375, -0.000148773193359375, -0.0001544952392578125, -7.855892181396484e-05, 0.0, -0.001087188720703125, -7.62939453125e-06, -0.001476287841796875, -3.4332275390625e-05, -0.23612499237060547, -9.179088920063805e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0008087158203125, -4.9591064453125e-05, -7.2479248046875e-05, -0.0003706216812133789, -4.529942543740617e-06, -0.00010573772306088358, -7.152555099310121e-07, -3.62396240234375e-05], "score": -7.9339223094338465, "model_output": {"hole4": "player", "hole0": "MindBlast", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Mind Blast"}, {"value": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}]}, "targets": [{"attr": "deathrattle", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}], "_type": "Assign"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n        target.deathrattle = len(game.other_player.minions)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Mind", "Blast", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "5", "<EOS>", 110], "score_history": [-1.9073486328125e-05, -0.00016021728515625, -3.576278118089249e-07, -2.384185791015625e-06, -9.775161743164062e-06, -1.9073486328125e-06, -6.330013275146484e-05, -8.690357208251953e-05, -0.0045623779296875, -0.000579833984375, -2.09808349609375e-05, -9.202533692587167e-05, -0.00010502338409423828, -6.246560951694846e-05, 0.0, -0.0001480911741964519, 0.0, -7.865598678588867, 0.0, -0.0029107332229614258, -1.9073486328125e-06, -0.0003529787063598633, -1.9073486328125e-06, -6.68754437356256e-05, 0.0, -3.814697265625e-06, -0.000110626220703125, -1.9073486328125e-05, -1.728534698486328e-05, 0.0, -0.002010345458984375, -4.38690185546875e-05, -0.045856475830078125, -0.00038909912109375, -0.0012969970703125, -3.814697265625e-06, -0.0002498626708984375, -3.814697265625e-06, -0.00067901611328125, -1.9073486328125e-06, -0.0003446340560913086, -2.3841855067985307e-07, -0.03584885597229004, -9.536738616588991e-07, -0.006900942884385586, -3.576278118089249e-07, -0.00028737858519889414, 0.0, -0.0010776519775390625, -6.29425048828125e-05, -0.0001926422119140625, -8.96453857421875e-05, -0.0007812976837158203, -2.264974000354414e-06, -0.00021480332361534238, -2.384185791015625e-06, -3.0517578125e-05], "score": -7.971371310534408, "model_output": {"hole4": "player", "hole0": "MindBlast", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"hole1": "effective_spell_damage", "hole2": 5, "_type": "Template37", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "ROGUE", "_type": "Template15", "hole3": "FREE", "hole0": "Mind Blast"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(5), self)\n"}, {"choice_history": [121, 200, "Mind", "Blast", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "score_history": [-1.9073486328125e-05, -0.00016021728515625, -3.576278118089249e-07, -2.384185791015625e-06, -9.775161743164062e-06, -1.9073486328125e-06, -6.330013275146484e-05, -8.690357208251953e-05, -0.0045623779296875, -0.000579833984375, -2.09808349609375e-05, -9.202533692587167e-05, -0.00010502338409423828, -6.246560951694846e-05, 0.0, -0.0001480911741964519, 0.0, -0.0014249086380004883, 0.0, -0.0003528594970703125, -5.7220458984375e-06, -0.0004292726516723633, -1.9073486328125e-06, -5.876923387404531e-05, 0.0, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -1.537799835205078e-05, 0.0, -0.001941680908203125, -4.38690185546875e-05, -0.03973960876464844, -0.0003719329833984375, -0.001399993896484375, -3.814697265625e-06, -0.00025177001953125, -3.814697265625e-06, -0.0006923675537109375, -1.9073486328125e-06, -0.0003370046615600586, -3.576278118089249e-07, -0.0356593132019043, -1.0728830375228426e-06, -0.006899870932102203, -3.576278118089249e-07, -0.00028618681244552135, 0.0, -7.052434921264648, -0.8613214492797852, -0.0633249282836914, -0.31095024943351746, -0.00012099280138500035], "score": -8.384057756367099, "model_output": {"hole4": "player", "hole0": "MindBlast", "hole6": [{"_type": "Template19"}, {"hole1": "damage", "hole2": [{"_type": "Template30", "hole0": "<UNK>"}], "_type": "Template44", "hole0": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}}], "hole1": "SpellCard", "hole2": [{"hole1": 2, "hole2": "PRIEST", "_type": "Template15", "hole3": "FREE", "hole0": "Mind Blast"}], "_type": "Template1", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}]}, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(Buff(<UNK>()))\n"}], "index": 65}
