{"gold_code": "class AssassinsBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "beams": [{"inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -0.01481418963521719, -0.00262481439858675, -0.0005265279905870557, -2.2292029825621285e-05, -3.576278118089249e-07, -1.9073486328125e-06, -0.027370452880859375, -0.0011768341064453125, -0.0008283494389615953, -0.00010216087684966624, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.00851583480834961, -2.682209014892578e-05, -0.10655796527862549, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -0.0012664794921875, 0.0, -3.755042052944191e-05, 0.0, -0.0001277923583984375, -5.53131103515625e-05, -0.0012664794921875, -0.00010835535795195028, -2.7418097943154862e-06, 0.0, 0.0, -0.00016605848213657737, 0.0], "score": -0.16604607544439176, "model_output": {"hole3": "create_weapon", "hole4": "player", "hole6": [{"hole1": 3, "hole0": "Weapon", "hole2": 4, "_type": "Template20"}], "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole2": [{"hole1": 5, "hole0": "<UNK> Blade", "hole2": "ROGUE", "hole3": "COMMON", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "beams": [{"inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004542034293990582, -0.0016508804401382804, -1.1920928244535389e-07, -9.47713851928711e-06, -5.841255187988281e-06, 0.0, 0.0, -0.00014495849609375, -2.09808349609375e-05, -8.106198947643861e-06, -6.592273712158203e-05, -8.344650268554688e-06, -1.9073486328125e-05, -0.008017566055059433, -9.5367431640625e-06, -7.331370579777285e-05, 0.0, -0.016466617584228516, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -1.1444075425970368e-05, 0.0, 0.0, -0.023235321044921875, -0.000125885009765625, -1.8954207916976884e-05, -7.748596544843167e-06, -0.0003167390823364258, -1.1920928244535389e-07], "score": -0.05069594872291816, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 7, "hole0": 6, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole2": [{"hole1": 6, "hole0": "Boulderfist Ogre", "hole2": "ALL", "hole3": "FREE", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.weapon.base_attack += 2\n        player.hero.change_temp_attack(2)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and player.weapon is not None\n", "beams": [{"inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -0.05450248718261719, -1.9073486328125e-06, -1.9073486328125e-06, -0.00164031982421875, -1.1444091796875e-05, -0.001743316650390625, -3.24249267578125e-05, -3.814697265625e-06, -1.4185804502631072e-05, -5.447858711704612e-05, -3.099440846199286e-06, -1.1920922133867862e-06, -3.0517578125e-05, -6.67572021484375e-05, -4.57763671875e-05, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.016811132431030273, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -4.00543212890625e-05, -7.62939453125e-06, -3.814697265625e-05, -2.47955322265625e-05, -5.340576171875e-05, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.13416814804077148, 0.0, -0.000102996826171875, 0.0, -0.0005090152262710035, 0.0, -0.0001220703125, -8.7738037109375e-05, -0.0001659393310546875, -1.1444091796875e-05, -1.1920928244535389e-07, -0.06024360656738281, -3.814697265625e-06, -8.392333984375e-05, -0.0003299713134765625, -0.0001049041748046875, -1.9073486328125e-06, -0.000118255615234375, 0.0, -0.00020122528076171875, 0.0, -0.0001558065414428711, 0.0, -0.34340977668762207, 0.0, -1.52587890625e-05, -0.0005168914794921875, -0.0008220672607421875, -0.0020122528076171875, -8.225440979003906e-05, -1.33514404296875e-05, 0.0, -0.1565149873495102, -0.0002495049557182938], "score": -0.7779379791816083, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"hole1": "add_buff", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff", "_type": "Template19"}], "_type": "Template23"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"attr": "<UNK>", "value": {"attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "args": [{"s": "Deadly Poison", "_type": "Str"}, {"_type": "Template34"}, {"attr": "ROGUE", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "FREE", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Deadly", " ", "Poison", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}]}
{"gold_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "beams": [{"inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -0.0007419586181640625, -4.00543212890625e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -5.3524967370321974e-05, -5.841255187988281e-06, -2.1457672119140625e-06, -0.0005664825439453125, -1.9073486328125e-06, -0.00020003344980068505, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.060301780700683594, 0.0, -0.0003910064697265625, -0.22967529296875, -1.1444091796875e-05, -1.9073486328125e-06, -0.004638671875, -2.3841855067985307e-07, -3.4332275390625e-05, -9.5367431640625e-05, -2.47955322265625e-05, -3.814697265625e-06, -2.872943878173828e-05, -3.814697265625e-06, -2.09808349609375e-05, -0.0018367767333984375, -0.000133514404296875, -0.00040049428935162723, -0.0009255962795577943, -0.136848583817482, -3.4689426684053615e-05, -0.05846405029296875, -0.004215240478515625, -3.814697265625e-06, -6.866455078125e-05, -0.05798542499542236, -1.9073486328125e-05, 0.0, -0.04840087890625, -0.000202178955078125, -1.9073486328125e-06, -0.0030750036239624023, -1.1920928244535389e-07, -0.000698089599609375, -5.7220458984375e-06, -0.00012886524200439453, -2.872943878173828e-05, -1.9073486328125e-06, 0.0, 0.0, -0.012679100036621094, 0.0, -0.0048675537109375, -5.7220458984375e-06, -0.0004773139953613281, -0.00014555452798958868, -7.259842823259532e-05, -0.00012421607971191406, -1.9073486328125e-06, -5.888787200092338e-05, 0.0, -0.000118255615234375, -0.005953788757324219, -0.0004749298095703125, -0.00010657003440428525, -1.7881233361549675e-05, -3.3974622056121007e-05, -3.457069396972656e-05], "score": -0.6368412513574171, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 5, "hole0": 6, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "FireElemental", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"hole1": 3, "hole0": "Damage", "_type": "Template21"}, {"func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "BothPlayer", "_type": "Template25"}, "arg": "players", "_type": "keyword"}, {"value": {"hole0": "UserPicker", "_type": "Template25"}, "arg": "picker", "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "args": [{"s": "Fire Elemental", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"attr": "SHAMAN", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"_type": "Template26"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Fire", " ", "Elemental", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "3", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "beams": [{"inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -0.0010434923460707068, -4.052184522151947e-06, -5.602820692729438e-06, -4.768371127283899e-06, -9.5367431640625e-06, -0.00074005126953125, -0.0001850128173828125, -5.53131103515625e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.0001392364501953125, -1.9073486328125e-06, 0.0, -7.152531907195225e-06, -5.1855851779691875e-05, -3.933906555175781e-06, -4.208087921142578e-05, -0.0001468658447265625, -0.0001239776611328125, -0.000408172607421875, -0.0005474090576171875, -4.00543212890625e-05, -2.09808349609375e-05, -0.012300848960876465, -4.768360213347478e-06, -0.0003986358642578125, -1.9073486328125e-05, -1.33514404296875e-05, -6.67572021484375e-05, -0.0005255937576293945, -4.172325134277344e-06, -3.24249267578125e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.0007441402412950993, -0.0023245352786034346, -0.0002613067626953125, -3.814697265625e-06, -0.006518199108541012, -7.450580596923828e-05, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -3.421305154915899e-05, 0.0, -5.340576171875e-05, -0.00029754638671875, -7.62939453125e-06, -1.1205610462639015e-05, -4.9947626393986866e-05, -1.9073486328125e-06, -1.1801649634435307e-05], "score": -0.027562613642999167, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 4, "hole0": 2, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "GnomishInventor", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"hole0": "Draw", "_type": "Template25"}, {"hole0": "PlayerSelector", "_type": "Template25"}], "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "args": [{"s": "Gnomish Inventor", "_type": "Str"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Gnomish", " ", "Inventor", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n", "beams": [{"inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -0.663686990737915, -1.9073486328125e-06, -0.0012664794921875, 0.0, -8.392333984375e-05, 0.0, -2.3245622287504375e-05, 0.0, -9.5367431640625e-06, -7.43865966796875e-05, -6.866455078125e-05, -3.063678741455078e-05, -4.0531158447265625e-06, -0.27321434020996094, -0.000118255615234375, -0.0003452301025390625, -6.103515625e-05, -0.00012969970703125, -0.000728607177734375, -3.0517578125e-05, -0.0009452097583562136, 0.0, -0.009378910064697266, 0.0, -0.0002651214599609375, -0.5661201477050781, -2.86102294921875e-05, -7.62939453125e-05, -7.43865966796875e-05, -3.0517578125e-05, -0.0001850128173828125, -0.0008749958360567689, -1.9073486328125e-06, -0.05862736701965332, -2.1457672119140625e-06, -0.0001583099365234375, -0.5875406265258789], "score": -2.1698191924820662, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"hole1": "change_temp_attack", "hole0": {"attr": "hero", "value": {"_type": "Template38"}, "_type": "Attribute"}, "hole2": [{"_type": "Template33"}], "_type": "Template23"}, {"hole1": "increase_armor", "hole0": {"attr": "hero", "value": {"_type": "Template38"}, "_type": "Attribute"}, "hole2": [{"_type": "Template33"}], "_type": "Template23"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole2": [{"hole1": 2, "hole0": "Heroic Strike", "hole2": "WARRIOR", "hole3": "FREE", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68]}]}
{"gold_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "beams": [{"inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score_history": [-1.71661376953125e-05, -0.01670074462890625, -0.05043276771903038, -0.010486639104783535, -3.802711216849275e-05, -1.1086463928222656e-05, -2.861022494471399e-06, 0.0, -1.9073486328125e-06, -0.00054931640625, -3.814697265625e-06, -2.264974000354414e-06, -5.543231236515567e-05, -2.0265579223632812e-06, -5.340576171875e-05, -0.0002019256353378296, -5.483625955093885e-06, -0.049343228340148926, 0.0, -4.672993964049965e-05, -1.4305104514278355e-06, -3.0517578125e-05, 0.0, -0.0009728670120239258, 0.0, -7.62939453125e-06, -0.005733489990234375, -2.6702880859375e-05, -2.3842630980652757e-07, -7.152555099310121e-07, -0.00042179334559477866, 0.0, -0.011262893676757812, 0.0, -0.000110626220703125, -1.1444091796875e-05, -0.0004088878631591797, -8.344646857949556e-07], "score": -0.14694489849898673, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 8, "hole0": 8, "hole2": "taunt", "hole3": {"value": true, "_type": "NameConstant"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "<UNK>Protector", "hole2": [{"hole1": 8, "hole0": "Ironbark Protector", "hole2": "WARRIOR", "hole3": "COMMON", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}]}
{"gold_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.taunt = True\n", "beams": [{"inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.other_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.BEAST and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.add_buff(Buff(<UNK>()))\n", "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.6406354904174805, -5.7220458984375e-06, -0.00075531005859375, -0.011609712615609169, 0.0, -0.7670044898986816, -1.8238997654407285e-05, -0.003938824404031038, -7.62939453125e-06, -0.01821422576904297, -0.0011386871337890625, -0.07402420043945312, -0.0003814697265625, -0.000396728515625, -7.62939453125e-06, -0.40587520599365234, -1.9073486328125e-06, -0.0022058486938476562, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0073375701904296875, -3.814697265625e-06, -0.005462646484375, 0.0, -0.00418853759765625, -2.288818359375e-05, -0.0004712343215942383, -1.9073486328125e-06, -0.03443098068237305, 0.0, -0.0015659332275390625, -3.814697265625e-06, -0.000469207763671875, -0.005591392517089844, -3.4332275390625e-05, -5.91278076171875e-05, 0.0, -0.000736236572265625, 0.0, -0.00031566619873046875, 0.0, -0.5620689392089844, 0.0, -0.6878252029418945, -7.05718994140625e-05, -0.000133514404296875, 0.0, -0.016605377197265625, -1.9073486328125e-06, -0.05698394775390625, -9.5367431640625e-06, -0.00011169910430908203, -1.9073486328125e-06, -6.29425048828125e-05, -0.2029886245727539, -1.33514404296875e-05, -0.001201629638671875, -1.71661376953125e-05, -0.003509521484375, 0.0, -0.00531768798828125, -0.001560211181640625, -2.288818359375e-05, -0.11220932006835938, 0.0, -1.1444091796875e-05, 0.0, -0.0005130767822265625, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.0829629898071289, 0.0, -1.9073486328125e-06, -0.19842910766601562, -0.000110626220703125, -0.0002880096435546875, -2.86102294921875e-05, 0.0, -2.6702880859375e-05, 0.0, -6.771087646484375e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.200286865234375, 0.0, -1.9073486328125e-06, -0.03470802307128906, -2.6702880859375e-05, -0.0001392364501953125, -6.67572021484375e-05, -0.0013360977172851562, 0.0, -8.0108642578125e-05, 0.0, -0.00013077259063720703, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.9748706817626953, 0.0, -1.52587890625e-05, -0.001262664794921875, -0.1651325225830078, -0.000274658203125, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.0755520612001419, -0.008816712535917759], "score": -6.388561761728788, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"targets": [{"id": "targets", "_type": "Name"}], "value": {"func": {"attr": "copy", "value": {"id": "copy", "_type": "Name"}, "_type": "Attribute"}, "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"attr": "game", "value": {"_type": "Template38"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"body": [{"hole1": "change_attack", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"_type": "Template33"}], "_type": "Template23"}, {"hole1": "increase_health", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"_type": "Template33"}], "_type": "Template23"}], "orelse": [{"hole1": "add_buff", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff", "_type": "Template19"}], "_type": "Template23"}], "test": {"op": {"_type": "And"}, "values": [{"ops": [{"_type": "Is"}], "left": {"attr": "minion_type", "value": {"attr": "card", "value": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}, "comparators": [{"attr": "BEAST", "value": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Attribute"}], "_type": "Compare"}, {"ops": [{"_type": "In"}], "left": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "comparators": [{"id": "targets", "_type": "Name"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "If"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template33"}, {"attr": "PRIEST", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "FREE", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 17, 104, 42, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}]}
{"gold_code": "class MultiShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            target = game.random_choice(targets)\n            targets.remove(target)\n            target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "beams": [{"inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            target.damage(player.effective_spell_damage(2), self)\n            self.target.damage(player.effective_spell_damage(2), self)\n", "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -0.8893747329711914, -0.10268497467041016, -0.00099945068359375, -0.004784584045410156, -6.103515625e-05, -0.0974264144897461, -1.9073486328125e-06, -0.000640869140625, -0.00011444091796875, -2.6702880859375e-05, -4.57763671875e-05, -0.0020610843785107136, -8.344646857949556e-07, -0.0004221200942993164, 0.0, -9.274482727050781e-05, -1.9073486328125e-06, -0.0004901885986328125, 0.0, -0.0002002716064453125, -7.82012939453125e-05, -0.24483203887939453, -0.0005741119384765625, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002651214599609375, 0.0, -1.33514404296875e-05, -6.29425048828125e-05, 0.0, -0.004119873046875, 0.0, -0.0004749298095703125, 0.0, -0.00018143653869628906, 0.0, -0.00011074542271671817, -4.291534423828125e-06, -0.00041961669921875, -1.71661376953125e-05, -1.1444091796875e-05, -0.0037527084350585938, -0.000560760498046875, -0.011003494262695312, -0.0002498626708984375, -0.004032135009765625, -0.0051250457763671875, -0.36276161670684814, 0.0, -0.0004367828369140625, -0.011208534240722656, -0.11098480224609375, -0.0001735687255859375, -2.86102294921875e-05, -2.6702880859375e-05, -5.340576171875e-05, 0.0, -0.06458510458469391, -1.6689286894688848e-06, -0.10540008544921875, -1.9073486328125e-06, -0.0004911422729492188, 0.0, -0.04274749755859375, 0.0, -0.06198990345001221, 0.0, -0.007067680358886719, 0.0, -3.4332275390625e-05, -0.00034332275390625, -0.0002613067626953125, -3.4332275390625e-05, 0.0, -0.012326240539550781, 0.0, -0.0001354217529296875, 0.0, -0.00012052059173583984, -9.655952453613281e-06, -0.0023163557052612305, -2.6702880859375e-05, -0.49635887145996094, -0.000545501708984375, -2.86102294921875e-05, 0.0, -0.059070587158203125, -2.3841855067985307e-07, -0.026430130004882812, -0.0004482269287109375, -1.52587890625e-05, 0.0, -0.03507125377655029, -1.1920928244535389e-07, -0.000133514404296875, -0.00156402587890625, -2.288818359375e-05, -0.007099902257323265, -4.768370445162873e-07, -0.0007152557373046875, -0.028731346130371094, -0.000194549560546875, -1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.03388404846191406, 0.0, -0.0007801055908203125, -3.814697265625e-06, -0.000141143798828125, -7.62939453125e-06, -0.0004863739013671875, 0.0, -0.002223968505859375, 0.0, -0.0061037540435791016, -9.5367431640625e-06, -7.62939453125e-05, -0.0010776519775390625, 0.0, -0.12553302943706512, -8.344646857949556e-07, -0.0001392364501953125, -0.00023651123046875, -2.86102294921875e-05, -3.814697265625e-06, -0.7213919758796692, -5.960462772236497e-07, -0.0025185346603393555, 0.0, -1.9073486328125e-06, -0.18952655792236328, -9.5367431640625e-06, -1.1444091796875e-05, -5.7220458984375e-06, -1.9073486328125e-05, -0.0004936159821227193, -3.576278118089249e-07, -0.000171661376953125, -0.02069091796875, -0.001567840576171875, -3.814697265625e-06, -5.829329529660754e-05, 0.0, -0.1747894287109375, -0.0024003982543945312, -0.2770099639892578, 0.0, -0.6000232696533203, 0.0, -0.020117998123168945, 0.0, -1.9788742065429688e-05, 0.0, -0.03318142890930176, 0.0, 0.0, -0.001705169677734375, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -2.6702880859375e-05, -0.00027346430579200387, -1.1920928244535389e-07, -0.0001773834228515625, -0.022693634033203125, -9.34600830078125e-05, -1.9073486328125e-06, -5.066390076535754e-05, 0.0], "score": -5.236194172499907, "model_output": {"hole3": "use", "hole4": "player", "hole7": [{"body": [{"_type": "Template10"}, {"targets": [{"id": "targets", "_type": "Name"}], "value": {"func": {"attr": "copy", "value": {"id": "copy", "_type": "Name"}, "_type": "Attribute"}, "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"id": "game", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"body": [{"targets": [{"id": "minion", "_type": "Name"}], "value": {"func": {"attr": "random_choice", "value": {"id": "game", "_type": "Name"}, "_type": "Attribute"}, "args": [{"id": "targets", "_type": "Name"}], "_type": "Call"}, "_type": "Assign"}, {"hole1": "damage", "hole0": {"id": "target", "_type": "Name"}, "hole2": [{"func": {"attr": "effective_spell_damage", "value": {"_type": "Template38"}, "_type": "Attribute"}, "args": [{"_type": "Template33"}], "_type": "Call"}, {"id": "self", "_type": "Name"}], "_type": "Template23"}, {"hole1": "damage", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"func": {"attr": "effective_spell_damage", "value": {"_type": "Template38"}, "_type": "Attribute"}, "args": [{"_type": "Template33"}], "_type": "Call"}, {"id": "self", "_type": "Name"}], "_type": "Template23"}], "target": {"id": "i", "_type": "Name"}, "iter": {"func": {"id": "range", "_type": "Name"}, "args": [{"n": 0, "_type": "Num"}, {"_type": "Template33"}], "_type": "Call"}, "_type": "For"}], "args": {"_type": "Template8"}, "name": "use", "_type": "FunctionDef"}], "hole6": [{"value": {"op": {"_type": "And"}, "values": [{"hole1": "can_use", "hole0": {"hole0": "super", "_type": "Template25"}, "hole2": "player", "hole3": "game", "_type": "Template17"}, {"ops": [{"_type": "GtE"}], "left": {"func": {"id": "len", "_type": "Name"}, "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"id": "game", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call"}, "comparators": [{"_type": "Template33"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole2": [{"hole1": 4, "hole0": "Multi-Shot", "hole2": "HUNTER", "hole3": "FREE", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68, 217, 88, 118, "use", "<EOS>", 3, 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 219, 82, 103, 205, 53, 133, "minion", "<EOS>", 20, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}]}
{"gold_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word: Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(2)\n        player.draw()\n", "beams": [{"inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Deathrattle(Draw(), PlayerSelector(picker=\n            RandomPicker())))\n        player.draw()\n", "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -0.6741834878921509, 0.0, -1.9073486328125e-06, -0.004406929016113281, -5.7220458984375e-06, -0.000659942626953125, 0.0, -0.722139835357666, -0.002712249755859375, -0.08489036560058594, -0.026760101318359375, -5.7220458984375e-06, -0.4178217649459839, -3.3378219086444005e-05, -0.08791542053222656, -0.4195137023925781, -0.000164031982421875, 0.0, -0.017215728759765625, -0.0012036561965942383, -3.814697265625e-06, -1.4043588638305664, -1.9073486328125e-06, -5.7220458984375e-06, -0.23219764232635498, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.10328292846679688, -0.0014644861221313477, -3.576278118089249e-07, -3.0517578125e-05, -0.0044612884521484375, -0.011927604675292969, -0.005107283592224121, -0.00011861324310302734], "score": -4.689101233681228, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"hole1": "add_effect", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Draw", "_type": "Template25"}, {"func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "RandomPicker", "_type": "Template25"}, "arg": "picker", "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}], "_type": "Template23"}, {"hole1": "draw", "hole0": {"_type": "Template38"}, "_type": "Template23"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "PowerShieldShield", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "args": [{"s": "Power Word Shield", "_type": "Str"}, {"_type": "Template34"}, {"attr": "PRIEST", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "FREE", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 205, 48, 111, 25, 133, "Deathrattle", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}]}
{"gold_code": "class SenjinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "beams": [{"inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.0002905130386352539, -1.7881377516459906e-06, -0.003076194552704692, 0.0, -0.036351561546325684, -1.71661376953125e-05, -4.57763671875e-05, 0.0, -9.489048534305766e-05, 0.0, -1.9073486328125e-06, -0.001720428466796875, -1.9073486328125e-06, -1.311301275563892e-06, -3.2186455882765586e-06, -7.295380055438727e-05, 0.0, -0.05515623092651367, 0.0, -0.000377655029296875, -1.71661376953125e-05, -0.0001608133316040039, -2.503394853192731e-06], "score": -0.0978410019340572, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 5, "hole0": 3, "hole2": "taunt", "hole3": {"value": true, "_type": "NameConstant"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole2": [{"hole1": 4, "hole0": "Sen'jin Shieldmasta", "hole2": "ALL", "hole3": "FREE", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}]}
{"gold_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "beams": [{"inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -0.058032989501953125, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.0003299713134765625, -9.5367431640625e-06, -0.23794901371002197, -1.1444091796875e-05, -9.655952453613281e-06, -1.9073486328125e-06, -0.0062038893811404705, 0.0, -0.000457763671875, -0.000255584716796875, -4.1961669921875e-05, -1.71661376953125e-05, -3.576278118089249e-07, -0.005028724670410156, -9.5367431640625e-06, -1.9073486328125e-05, -0.0001068115234375, -0.0019817352294921875, 0.0, -3.24249267578125e-05, 0.0, -0.010632514953613281, -1.9073486328125e-06, -2.372264862060547e-05, -3.814697265625e-06, -0.00025010108947753906, 0.0, -1.52587890625e-05, -0.000560760498046875, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -3.62396240234375e-05, -0.00018215169257018715, -2.0265579223632812e-06, -0.000179290771484375, -0.4844503402709961, -0.0001049041748046875, -1.1444091796875e-05, -1.52587890625e-05, 0.0], "score": -0.811591498936366, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"hole1": "damage", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"func": {"attr": "effective_spell_damage", "value": {"_type": "Template38"}, "_type": "Attribute"}, "args": [{"_type": "Template35"}], "_type": "Call"}, {"id": "self", "_type": "Name"}], "_type": "Template23"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "args": [{"s": "Sinister Strike", "_type": "Str"}, {"_type": "Template34"}, {"attr": "ROGUE", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "FREE", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 70, 53, 133, "self", "<EOS>"]}]}
{"gold_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Give(SuccubusSuccubus()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -0.9925442934036255, -0.0041698976419866085, -5.7220458984375e-06, -5.7220458984375e-06, -0.5338290929794312, -0.7248126268386841, -0.016912253573536873, -0.05007171630859375, -6.4849853515625e-05, -0.5953261256217957, 0.0, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.3709068298339844e-05, 0.0, -1.1444091796875e-05, -0.0004138946533203125, -1.9073486328125e-06, -0.04635646566748619, 0.0, -6.508611113531515e-05, 0.0], "score": -3.3589749255546906, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 3, "hole0": 4, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "Succubus", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"hole0": "DEMON", "_type": "Template22"}, {"value": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"hole1": {"id": "SuccubusSuccubus", "_type": "Name"}, "hole0": "Give", "_type": "Template19"}, {"hole0": "PlayerSelector", "_type": "Template25"}], "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "args": [{"s": "Succubus", "_type": "Str"}, {"_type": "Template33"}, {"attr": "WARLOCK", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "FREE", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "Give", "<EOS>", 25, 133, "Succubus", "Succubus", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "beams": [{"inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score_history": [0.0, -1.52587890625e-05, -0.07410691678524017, -0.007008769549429417, -6.675719760096399e-06, -3.6120880395174026e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002956390380859375, -3.24249267578125e-05, -2.074220174108632e-05, -9.131431579589844e-05, -4.172325134277344e-06, -5.7220458984375e-06, -0.0002127836924046278, -2.384185791015625e-06, -0.0005570650100708008, -5.7220458984375e-06, -4.816053478862159e-05, 0.0, -5.7220458984375e-06, 0.0, -0.001065969467163086, 0.0, -5.7220458984375e-06, -0.010175704956054688, -0.0004119873046875, -3.302054028608836e-05, -9.536714060232043e-06, -3.6955862015020102e-06, -2.0265579223632812e-06], "score": -0.09416909851961464, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 7, "hole0": 7, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "WarGolem", "hole2": [{"hole1": 7, "hole0": "War Golem", "hole2": "ALL", "hole3": "COMMON", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "7", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(\n            MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(),\n            TargetSelector())])])\n", "beams": [{"inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Kill(),\n            TargetSelector(IsMinion())))])\n", "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -0.10957790166139603, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -0.03393054008483887, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.026861071586608887, -3.814697265625e-06, -0.0001354217529296875, -2.288818359375e-05, -0.0004730224609375, -0.0032504796981811523, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -1.0013571227318607e-05, 0.0, -1.52587890625e-05, -0.0008525848388671875, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0005560758872888982, 0.0, -0.0021212100982666016, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -6.687641143798828e-05, 0.0, -2.09808349609375e-05, -0.0023174285888671875, -1.1444091796875e-05, -0.06629073619842529, -0.0006923675537109375, -0.00028228759765625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001773834228515625, -0.017061233520507812, -5.7220458984375e-06, -0.04291020706295967, -7.629378160345368e-06, -0.11108016967773438, -0.006683349609375, -0.1330423355102539, -4.38690185546875e-05, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.0047495365142822266, -0.12910926342010498, -2.09808349609375e-05, -3.814697265625e-06, -0.000244140625], "score": -0.697825872045307, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 2, "hole0": 4, "hole2": "effects", "hole3": {"hole1": [{"hole0": "Damaged", "_type": "Template25"}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"hole0": "Kill", "_type": "Template25"}, {"hole1": {"id": "IsMinion", "_type": "Name"}, "hole0": "TargetSelector", "_type": "Template19"}], "_type": "Call"}], "hole0": "Effect", "hole2": [{"_type": "Template36_expr_seq"}], "_type": "Template24"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "Acidmaw", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"hole0": "BEAST", "_type": "Template22"}], "args": [{"s": "Acidmaw", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"attr": "HUNTER", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "LEGENDARY", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 59, 155, "Target", "Selector", "<EOS>", 25, 133, "Is", "Minion", "<EOS>", 205, 71]}]}
{"gold_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, True\n            )\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n", "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -0.019903182983398438, -1.9073486328125e-06, -7.62939453125e-06, -0.16640472412109375, -0.0006275177001953125, -0.13741683959960938, -6.67572021484375e-05, -1.9073486328125e-06, -1.5497195136049413e-06, -1.1920928244535389e-07, -0.000949859619140625, -0.0030117034912109375, -0.0001201629638671875, -2.6702880859375e-05, -0.0001068115234375, -0.004461169242858887, -7.641315460205078e-05, -0.018939971923828125, -2.86102294921875e-05, -5.4717063903808594e-05, -9.5367431640625e-06, -0.0015108585357666016, -1.9073486328125e-06, -0.00433874037116766, 0.0, -4.38690185546875e-05, -0.0002574920654296875, -3.24249267578125e-05, -1.7523747374070808e-05, -7.629365427419543e-06, -7.760507287457585e-05, -2.0265579223632812e-06, -0.0023542640265077353, -2.86102294921875e-05, -9.5367431640625e-05, -7.62939453125e-06, -0.00013566017150878906, -4.0531158447265625e-06], "score": -0.3616871966302071, "model_output": {"hole3": "create_minion", "hole4": "p", "hole6": [{"hole1": 2, "hole0": 4, "hole2": "charge", "hole3": {"value": true, "_type": "NameConstant"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "Boar", "hole2": [{"value": {"func": {"_type": "Template18"}, "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "value": {"_type": "Template30"}, "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 209, 56, 142, "Boar", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 54, 134, "False", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}]}
{"gold_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[\n            Choice(AttackMode(), Give([Buff(ChangeAttack(1))]),\n            SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))\n            ]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "beams": [{"inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -0.00908832810819149, -0.008136129006743431, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -0.40935611724853516, -6.103515625e-05, -0.08049511909484863, -2.2411135432776064e-05, -0.00011479845124995336, -2.288818359375e-05, -0.00013827794464305043, -1.1920928244535389e-07, -0.000102996826171875, -0.022159576416015625, -4.00543212890625e-05, -2.741813204920618e-06, -8.344646857949556e-07, -1.2959237210452557e-05, -1.1920928244535389e-07, -0.10574734210968018, 0.0, -0.0022764205932617188, -9.5367431640625e-06, -0.00011456012725830078, -9.536738616588991e-07], "score": -0.6425228579365481, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 2, "hole0": 2, "hole2": "taunt", "hole3": {"value": true, "_type": "NameConstant"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"hole0": "MECH", "_type": "Template22"}], "args": [{"s": "Anodized Robo Cub", "_type": "Str"}, {"_type": "Template33"}, {"attr": "DRUID", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"_type": "Template26"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}]}
{"gold_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(\n            Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard\n            (query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)),\n            PlayerSelector())), Effect(Drawn(), ActionTag(Draw(),\n            PlayerSelector()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n", "beams": [{"inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = len(player.opponent.minions) - len(player.hand)\n        hammer = <UNK>.<UNK>(player)\n        hammer.card = frog\n        self.target.<UNK>(<UNK>)\n", "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -0.8461151123046875, -3.62396240234375e-05, -0.005652427673339844, -0.000545501708984375, -0.000164031982421875, -0.000553131103515625, 0.0, -1.4597119092941284, -5.006785613659304e-06, -0.2356119155883789, -0.0061016082763671875, -0.00080108642578125, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.025185827165842056, 0.0, -3.814697265625e-05, -0.00012969970703125, -3.814697265625e-06, -0.1913433074951172, -5.7220458984375e-05, -0.06228351593017578, -0.6938903331756592, -3.814697265625e-06, -0.004948725923895836, -1.52587890625e-05, -0.41155529022216797, -0.00054931640625, -0.007325172424316406, -2.47955322265625e-05, 0.0, -0.0021920204162597656, 0.0, -2.6702880859375e-05, -0.001506805419921875, -0.0016269683837890625, -0.09875965118408203, -0.0619380958378315, -7.152555099310121e-07, -0.4578704833984375, -5.7220458984375e-06, -1.9073486328125e-06, -0.0010166168212890625, -1.9073486328125e-06, -1.652843952178955, -1.1920928244535389e-07, -0.0014467239379882812, -0.000408172607421875, -0.00180816650390625, -1.9073486328125e-06, -0.07711315155029297, -3.814697265625e-06, -1.8077771663665771, -5.960462772236497e-07, -0.7746096849441528, -1.2040087312925607e-05, -0.06572914123535156, -0.27599525451660156, -0.009098052978515625, -1.1444091796875e-05, -1.9073486328125e-06, -0.22619152069091797, -1.1444091796875e-05, -0.14781570434570312, -1.9073486328125e-06, -0.4439530372619629, -1.1920928244535389e-07, -0.19515836238861084, 0.0, -0.25916099548339844, 0.0, -1.3516602516174316, -4.172325134277344e-06, -0.002490997314453125, -0.008983612060546875, -0.30498504638671875, 0.0, -0.08272361755371094, 0.0, -0.02587151527404785, 0.0, -0.020821094512939453, -1.9073486328125e-06, -0.1958293914794922, 0.0, -2.288818359375e-05, -0.0058536529541015625, 0.0, -0.7409477233886719, -2.2649765014648438e-06], "score": -13.953519022821673, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"targets": [{"id": "<UNK>", "_type": "Name"}], "value": {"op": {"_type": "Sub"}, "left": {"func": {"id": "len", "_type": "Name"}, "args": [{"attr": "minions", "value": {"attr": "opponent", "value": {"_type": "Template38"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call"}, "right": {"func": {"id": "len", "_type": "Name"}, "args": [{"attr": "hand", "value": {"_type": "Template38"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "BinOp"}, "_type": "Assign"}, {"targets": [{"id": "hammer", "_type": "Name"}], "value": {"func": {"attr": "<UNK>", "value": {"id": "<UNK>", "_type": "Name"}, "_type": "Attribute"}, "args": [{"_type": "Template38"}], "_type": "Call"}, "_type": "Assign"}, {"targets": [{"attr": "card", "value": {"id": "hammer", "_type": "Name"}, "_type": "Attribute"}], "value": {"id": "frog", "_type": "Name"}, "_type": "Assign"}, {"hole1": "<UNK>", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"id": "<UNK>", "_type": "Name"}], "_type": "Template23"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole2": [{"hole1": 0, "hole0": "Burrowing Mine", "hole2": "PALADIN", "hole3": "FREE", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 79, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "hand", "<EOS>", 82, 103, 205, 53, 133, "hammer", "<EOS>", 20, 111, 17, 104, 25, 133, "<UNK>", "<EOS>", "<UNK>", "<EOS>", 205, 73, 82, 103, 205, 45, 104, 25, 133, "hammer", "<EOS>", "card", "<EOS>", 25, 133, "frog", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>"]}]}
{"gold_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.random_amount\n            (3, 6)), self)\n", "beams": [{"inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(4), self)\n", "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -0.014484405517578125, -0.00048828125, -7.62939453125e-06, 0.0, -8.96453857421875e-05, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.000347137451171875, 0.0, -0.005061626434326172, -1.1444091796875e-05, -3.814697265625e-06, -7.62939453125e-06, -0.0018873214721679688, 0.0, -0.0057621002197265625, -1.9073486328125e-05, -3.4332275390625e-05, -1.9192693798686378e-05, 0.0, -0.0004673004150390625, -4.76837158203125e-05, -7.62939453125e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.0019559860229492188, -0.0003871917724609375, -1.33514404296875e-05, -0.000118255615234375, -0.0002269744873046875, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.0003186464309692383, 0.0, -1.7166135876323096e-05, -1.9073486328125e-06, -0.0002295970916748047, 0.0, -7.62939453125e-06, -0.0001392364501953125, -2.09808349609375e-05, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -8.153904491337016e-05, -1.9073486328125e-06, -0.0001544952392578125, -0.5566549301147461, -0.000186920166015625, -1.9073486328125e-06, -0.0001291036605834961, 0.0], "score": -0.5931596754623456, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"hole1": "damage", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"func": {"attr": "effective_spell_damage", "value": {"_type": "Template38"}, "_type": "Attribute"}, "args": [{"_type": "Template37"}], "_type": "Call"}, {"id": "self", "_type": "Name"}], "_type": "Template23"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "Crackle", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"attr": "find_spell_target", "value": {"attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}, {"value": {"_type": "Template34"}, "arg": "overload", "_type": "keyword"}], "args": [{"s": "Crackle", "_type": "Str"}, {"_type": "Template33"}, {"attr": "SHAMAN", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"_type": "Template26"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 38, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 72, 53, 133, "self", "<EOS>"]}]}
{"gold_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "beams": [{"inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -0.3360016345977783, 0.0, -0.00018703937530517578, 0.0, -4.839835673919879e-05, 0.0, -4.76837158203125e-05, -5.7220458984375e-06, -0.0001049041748046875, -0.0012054443359375, 0.0, -0.003353118896484375, -1.52587890625e-05, -2.6702880859375e-05, -0.2023906707763672, -0.000125885009765625, -1.1444091796875e-05, -1.71661376953125e-05, 0.0, -0.00021576881408691406, 0.0, -6.67572021484375e-05, 0.0, -0.4021482467651367, 0.0, -1.9073486328125e-05, -0.0008602142333984375, -0.0045528411865234375, -0.001421332242898643, 0.0, -0.009161949157714844, -1.9073486328125e-06, -0.5646095275878906, -0.005465882830321789], "score": -1.546528900966365, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"hole1": "add_buff", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff", "_type": "Template19"}], "_type": "Template23"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"value": true, "_type": "NameConstant"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}]}
{"gold_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "beams": [{"inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -5.53131103515625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.8715683836489916e-05, -4.804131094715558e-05, -1.9073486328125e-06, -4.971027374267578e-05, -0.002132415771484375, -5.91278076171875e-05, -4.57763671875e-05, -3.24249267578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0010265109594911337, -0.0003190040588378906, -2.1457668481161818e-05, -1.9073486328125e-06, -0.0018934691324830055, -7.152555099310121e-07, -0.00672149658203125, -0.0003337860107421875, -4.9591064453125e-05, -1.4901119357091375e-05, -2.0265579223632812e-06, -1.8358114175498486e-05, 0.0, -0.06840860843658447, 0.0, -0.000125885009765625, -5.7220458984375e-06, -0.00010728820052463561, -2.2649765014648438e-06], "score": -0.08244266112887999, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 4, "hole0": 1, "hole2": "windfury", "hole3": {"value": true, "_type": "NameConstant"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "FlyingMachine", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"hole0": "MECH", "_type": "Template22"}], "args": [{"s": "Flying Machine", "_type": "Str"}, {"_type": "Template35"}, {"_type": "Template27"}, {"_type": "Template26"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Flying", " ", "Machine", "<EOS>", 70, 65, 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 26, 134, "True", "<EOS>"]}]}
{"gold_code": "class GoblinAutoBarber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "beams": [{"inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeAttack(3)), MinionSelector(Null, picker=\n            RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -0.4502534866333008, -0.0001773834228515625, -3.814697265625e-06, -0.6895538568496704, -9.536697689327411e-06, -3.0517578125e-05, -5.7220458984375e-06, -0.00035953521728515625, -2.145764938177308e-06, -3.24249267578125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, 0.0, -0.0012378692626953125, -0.005489349365234375, -0.00269317626953125, -0.00013017619494348764, -0.0005061641568318009, -3.0517578125e-05, -1.1444091796875e-05, -0.40664052963256836, -0.0022021662443876266, 0.0, -2.09808349609375e-05, -0.45256805419921875, -0.000457763671875, -0.053890228271484375, -9.34600830078125e-05, -5.7220458984375e-06, -0.00646209716796875, -0.00024235248565673828, 0.0, -0.00012969970703125, -0.10561466217041016, -0.0019016265869140625, -0.005783796310424805, -2.0265579223632812e-06, -0.00011444091796875, -0.000274658203125, 0.0, -0.0002903938293457031, 0.0, -4.1961669921875e-05, -3.814697265625e-06, -0.3057759702205658, -0.0005010364693589509, -1.1920928244535389e-07, -0.00018596649169921875, 0.0, -5.364416665543104e-06, 0.0, -7.05718994140625e-05, -0.0001373291015625, -4.38690185546875e-05, -1.430507836630568e-06, -5.6028297876764555e-06, -5.364412118069595e-06, -5.9604562920867465e-06], "score": -2.5033830774193504, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 2, "hole0": 3, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "GoblinAuto-Barber", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"hole0": "MECH", "_type": "Template22"}, {"value": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give", "hole2": [{"_type": "Template35"}], "_type": "Template19"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "RandomPicker", "_type": "Template25"}, "arg": "picker", "_type": "keyword"}], "args": [{"value": "Null", "_type": "NameConstant"}], "_type": "Call"}], "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "args": [{"s": "Goblin Auto-Barber", "_type": "Str"}, {"_type": "Template33"}, {"attr": "ROGUE", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"_type": "Template26"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}]}
{"gold_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\n", "beams": [{"inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            picker=RandomPicker())))])\n", "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -0.22957348823547363, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.00010716915130615234, -1.9073486328125e-06, -7.62939453125e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0024261474609375, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.081031799316406e-05, 0.0, -0.007262229919433594, -0.0002384185791015625, -0.0004405975341796875, -1.1920928244535389e-07, -1.168244216387393e-05, -7.707683835178614e-06, -3.576278118089249e-07, -0.0006682871608063579, 0.0, -5.7220458984375e-05, -9.1552734375e-05, -6.270408630371094e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0014095306396484375, 0.0, -0.00015354064817074686, -0.0019418001174926758, -1.9073486328125e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -0.31371116638183594, -0.0012664794921875, -1.33514404296875e-05, -1.9073486328125e-06, -0.0003973245620727539, -2.622604142743512e-06, -2.288818359375e-05, -0.0032291412353515625, -4.57763671875e-05, -0.42297840118408203, -0.000522613525390625, -7.82012939453125e-05, -0.0008815525216050446, -7.152555099310121e-07, -5.7220458984375e-06, 0.0, -1.0371208190917969e-05, -0.3735877275466919, 0.0, -3.814697265625e-06, -0.00193023681640625, -0.17798233032226562, -6.103515625e-05, -0.0006166696548461914, -1.1920928244535389e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.00018703937530517578, -0.08801054954528809, 0.0, -1.9073486328125e-06, -0.012760162353515625, -0.0077495574951171875, -0.3038978576660156, -0.025030136108398438, -3.814697265625e-06, -3.814697265625e-06, -0.00153350830078125, -9.775161743164062e-06, 0.0, -0.000240325927734375, -1.9073486328125e-06, -1.9073486328125e-06, -0.09551835060119629, 0.0, -0.02991962432861328, -7.62939453125e-06, -0.0004022121138405055, -0.00038433074951171875, -2.0265579223632812e-06, -0.0001068115234375, -0.06546783447265625], "score": -2.175997279813302, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 2, "hole0": 2, "hole2": "effects", "hole3": {"hole1": [{"hole0": "TurnEnded", "_type": "Template25"}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"func": {"id": "Give", "_type": "Name"}, "args": [{"elts": [{"hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template33"}], "_type": "Template19"}, {"hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template33"}], "_type": "Template19"}, {"_type": "Template36_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "RandomPicker", "_type": "Template25"}, "arg": "picker", "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}], "hole0": "Effect", "hole2": [{"_type": "Template36_expr_seq"}], "_type": "Template24"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "IronSensei", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"hole0": "MECH", "_type": "Template22"}], "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template35"}, {"attr": "ROGUE", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "RARE", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}]}
{"gold_code": "class MalGanis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(\n            IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2),\n            MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(),\n            HeroSelector())])\n", "beams": [{"inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(CharacterAttack(IsHero()),\n            ActionTag(Give(BuffUntil(Immune(), Attack<UNK>())),\n            HeroSelector()))])\n", "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -0.7298812866210938, -0.4086179733276367, -0.6904504299163818, -0.04157555103302002, -1.1444091796875e-05, -1.9073486328125e-06, -2.288818359375e-05, -0.009978164918720722, -0.3740898370742798, -1.1920928244535389e-07, -6.4849853515625e-05, -0.00012969970703125, -5.7220458984375e-06, 0.0, -0.0062389373779296875, -3.2901763916015625e-05, 0.0, -1.71661376953125e-05, -0.03590202331542969, -0.00045013427734375, -0.00024282894446514547, -0.00038146969745866954, -1.1444091796875e-05, 0.0, -0.30603715777397156, -0.004411101341247559, -1.9073486328125e-06, -0.001102447509765625, -0.002887725830078125, -7.82012939453125e-05, -0.041112020611763, -0.0338117890059948, -0.11136436462402344, -4.1961669921875e-05, -0.2893064618110657, -0.03532695770263672, -0.06833183765411377, -0.004791259765625, -1.1444091796875e-05, -0.010681867599487305, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -0.0053348541259765625], "score": -3.3330658097817008, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 7, "hole0": 9, "hole2": "auras", "hole3": {"hole1": [{"hole1": {"id": "IsHero", "_type": "Name"}, "hole0": "CharacterAttack", "_type": "Template19"}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"hole1": {"id": "BuffUntil", "_type": "Name"}, "hole0": "Give", "hole2": [{"hole0": "Immune", "_type": "Template25"}, {"hole0": "Attack<UNK>", "_type": "Template25"}], "_type": "Template19"}, {"hole0": "HeroSelector", "_type": "Template25"}], "_type": "Call"}], "hole0": "Aura", "hole2": [{"_type": "Template36_expr_seq"}], "_type": "Template24"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"hole0": "BEAST", "_type": "Template22"}], "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"attr": "WARLOCK", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "LEGENDARY", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 59, 155, "Character", "Attack", "<EOS>", 25, 133, "Is", "Hero", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Buff", "Until", "<EOS>", 206, 63, 171, "Immune", "<EOS>", 63, 171, "Attack", "<UNK>", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}]}
{"gold_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(\n            EventValue()), HeroSelector()))])\n", "beams": [{"inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Kill(),\n            SelfSelector()))])\n", "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -0.04608154296875, -0.000186920166015625, -0.736709475517273, -0.006456472910940647, -0.04193305969238281, -1.1444091796875e-05, -0.18040180206298828, -5.7220458984375e-06, 0.0, -5.7220458984375e-06, -0.000972747802734375], "score": -1.0746264715355736, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 4, "hole0": 1, "hole2": "effects", "hole3": {"hole1": [{"hole0": "Damaged", "_type": "Template25"}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"hole0": "Kill", "_type": "Template25"}, {"hole0": "SelfSelector", "_type": "Template25"}], "_type": "Call"}], "hole0": "Effect", "hole2": [{"_type": "Template36_expr_seq"}], "_type": "Template24"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "MistressOfPain", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"hole0": "MECH", "_type": "Template22"}], "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template33"}, {"attr": "WARLOCK", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "RARE", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}]}
{"gold_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=RandomPicker())))\n", "beams": [{"inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE\n            )\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(2)), Buff(ChangeHealth(2)), Buff(Mech()\n            )]), MinionSelector(NotCurrentTarget(), EnemyPlayer())), picker\n            =RandomPicker())\n", "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.0607194900512695, 0.0, -0.0018596649169921875, -3.814697265625e-06, -0.4325399398803711, 0.0, -5.364284152165055e-05, 0.0, -1.33514404296875e-05, -0.009561538696289062, -0.0004405975341796875, -0.00011944499419769272, -1.7881377516459906e-06, 0.0, -1.1920928244535389e-07, -8.523456199327484e-05, 0.0, -0.1074380874633789, -9.5367431640625e-06, -1.9073486328125e-06, -0.08085155487060547, 0.0, -0.010692596435546875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.003726959228515625, -5.7220458984375e-06, -4.38690185546875e-05, -0.2217578887939453, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.02356255054473877, -3.230571746826172e-05, -0.0001544952392578125, -0.0025959014892578125, -8.20159912109375e-05, -0.06988906860351562, -0.004367828369140625, -0.000377655029296875, -0.004516720771789551, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.251697449333733e-05, -0.6354973316192627, -1.1444091796875e-05, -2.09808349609375e-05, -0.0001220703125, -2.6702880859375e-05, -0.0516815185546875, -0.04225337505340576, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -0.00012028217315673828, -0.1905742883682251, 0.0, -1.9073486328125e-06, -0.0002994537353515625, -0.0018329620361328125, -0.6700162887573242, -0.15289783477783203, -4.172325134277344e-06, -5.7220458984375e-06, 0.0, -8.428096771240234e-05, -0.0778127908706665, 0.0, -2.09808349609375e-05, -0.000652313232421875, -0.0041980743408203125, -0.45133495330810547, -0.0021930932998657227, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.1653769314289093, -0.1457926332950592, -0.0003509521484375, -0.3175945281982422, -1.9073486328125e-06, 0.0, -0.028599143028259277, -6.794917680963408e-06, -0.0002636909484863281, -0.07901573181152344, -0.8229188919067383, -1.9073486328125e-05, -1.4955494403839111, -0.11595799773931503, -0.9179604649543762, -0.0015076398849487305, -0.49971580505371094, 0.0, -0.20828448235988617, -0.00019609928131103516, -1.9073486328125e-05, -5.14984130859375e-05, -5.7220458984375e-05, -0.009732246398925781, -1.9073486328125e-06, -0.001346588134765625, -3.814697265625e-06, -0.004770517349243164, -0.00012671947479248047, 0.0], "score": -9.289787506108247, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 3, "hole0": "Weapon", "hole2": 2, "hole3": [{"value": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"func": {"id": "Give", "_type": "Name"}, "args": [{"elts": [{"hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template33"}], "_type": "Template19"}, {"hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template33"}], "_type": "Template19"}, {"hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template33"}], "_type": "Template19"}, {"hole1": {"id": "Mech", "_type": "Name"}, "hole0": "Buff", "_type": "Template19"}], "_type": "List"}], "_type": "Call"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "args": [{"hole0": "NotCurrentTarget", "_type": "Template25"}, {"hole0": "EnemyPlayer", "_type": "Template25"}], "_type": "Call"}], "_type": "Call"}, "arg": "deathrattle", "_type": "keyword"}, {"value": {"hole0": "RandomPicker", "_type": "Template25"}, "arg": "picker", "_type": "keyword"}], "_type": "Template20"}], "hole1": "WeaponCard", "hole0": "Powermace", "hole2": [{"hole1": 3, "hole0": "Powermace", "hole2": "MAGE", "hole3": "RARE", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 155, "Buff", "<EOS>", 25, 133, "Mech", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 63, 171, "Not", "Current", "Target", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>"]}]}
{"gold_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "beams": [{"inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeHealth(2)),\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -0.3604412376880646, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -0.4982614517211914, 0.0, -5.91278076171875e-05, -1.33514404296875e-05, -0.00030517578125, -0.001085519790649414, -1.9073486328125e-05, -0.004178047180175781, -0.0001678466796875, -1.33514404296875e-05, -0.006410717964172363, 0.0, -4.57763671875e-05, -3.814697265625e-06, -0.0001735687255859375, 0.0, -0.000148773193359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000255584716796875, -5.7220458984375e-06, -0.0001888275146484375, -0.0070743560791015625, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.00040745732258073986, -0.00030231132404878736, -3.4332275390625e-05, -0.0744161605834961, -0.0025415420532226562, -0.02228260040283203, -0.17932510375976562, -0.0029344558715820312, -0.06757473945617676, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.902217864990234e-05, -0.13698196411132812, 0.0, -1.9073486328125e-05, -8.20159912109375e-05, -0.0015811920166015625, -0.00836944580078125, -0.012157797813415527, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -6.103515625e-05, -0.5167269706726074, 0.0, -3.814697265625e-06, -8.392333984375e-05, -0.00125885009765625, -0.12436294555664062, -0.02311253547668457, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.00010502338409423828, -0.5200471878051758, 0.0, -3.814697265625e-06, -7.62939453125e-05, -0.001293182373046875, -0.13529205322265625, -0.022348523139953613, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -9.167194366455078e-05, -0.1144566535949707, 0.0, -1.1444091796875e-05, -8.392333984375e-05, -0.06926727294921875, -0.4646739959716797, -0.0001697540283203125, 0.0, -0.0024967193603515625, -0.0004254579544067383, -5.7220458984375e-06, -1.9073486328125e-06, -0.000701904296875, -0.000545501708984375, -4.1961669921875e-05, 0.0, -0.0003345012664794922, -3.266334533691406e-05, 0.0, -1.71661376953125e-05, -0.0003376007080078125, -1.9073486328125e-06, -0.00067138671875, 0.0, -0.000102996826171875, -1.919269561767578e-05, -0.0007772445678710938, -7.62939453125e-06, -0.00014495849609375, -1.9073486328125e-06, -3.814697265625e-06, -0.0006848573684692383, -5.7220458984375e-06, -0.0038919448852539062, -4.00543212890625e-05, -0.004188656806945801, -0.00017976760864257812, -5.7220458984375e-06, -0.0001506805419921875, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.000152587890625, -0.0001983642578125, -0.0001583099365234375, -0.0002317159523954615, 0.0, -1.8835065930034034e-05, 0.0], "score": -3.4050646637933824, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 5, "hole0": 2, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "ScrewjankClunker", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"hole0": "MECH", "_type": "Template22"}, {"value": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"func": {"id": "Give", "_type": "Name"}, "args": [{"elts": [{"hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template33"}], "_type": "Template19"}, {"hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template33"}], "_type": "Template19"}, {"hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template33"}], "_type": "Template19"}, {"hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template33"}], "_type": "Template19"}], "_type": "List"}], "_type": "Call"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "UserPicker", "_type": "Template25"}, "arg": "picker", "_type": "keyword"}], "args": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"attr": "MECH", "value": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Attribute"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "args": [{"s": "Screwjank Clunker", "_type": "Str"}, {"_type": "Template37"}, {"attr": "MAGE", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "RARE", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class SneedsOldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])),\n            PlayerSelector()))\n", "beams": [{"inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -0.19768890738487244, -2.5987379558500834e-05, -6.157904863357544e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -0.0003204345703125, -3.814697265625e-06, -1.9073486328125e-05, -1.33514404296875e-05, -0.000171661376953125, -2.288818359375e-05, -0.0002040863037109375, 0.0, -0.40214329957962036, -2.7656551537802443e-05, -0.00018191221170127392, -0.00023543834686279297, -0.0003260374069213867, -9.02414321899414e-05, -0.013761520385742188, -9.5367431640625e-06, -0.0015947818756103516, -1.1682508556987159e-05, -0.000152587890625, -5.340576171875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00010323519381927326, -1.2755381249007769e-05, -0.000827789306640625, -0.0018100738525390625, 0.0, -0.0008615253027528524, -1.4305104514278355e-06, -3.814697265625e-06, -3.814697265625e-06, -4.768370445162873e-07, 0.0, -0.0045757293701171875, -0.00066375732421875, -4.1961669921875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -1.3828268492943607e-05, 0.0, -0.0008764266967773438, -3.576278118089249e-07, -0.00011444091796875, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00022161006927490234, -7.152555099310121e-07, -7.2479248046875e-05, -0.0001506805419921875, -0.004597663879394531, -0.004024101421236992, -0.00022827083012089133, -0.000675201416015625, -5.7220458984375e-06, -0.009020581841468811, -0.0004433392605278641, -8.344646857949556e-07, -0.003231048583984375, -7.62939453125e-06, -9.5367431640625e-06, -0.0037199240177869797, -1.5497207641601562e-05, -0.03433799743652344, -0.0002593994140625, -1.9073486328125e-05, -0.014209747314453125, -0.00058746337890625, -0.019507408142089844, -0.009077906608581543, -1.9073486328125e-06, -0.012275455519557, -9.5367431640625e-05, -0.00251007080078125, -0.02344226837158203, -0.001832723617553711, -0.003694772720336914, -0.0018531084060668945, -0.0002002716064453125, -0.0053958892822265625, -0.12230682373046875, -1.9073486328125e-06, -0.00021015893435105681, -3.814697265625e-06, 0.0], "score": -0.9165419986766139, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 7, "hole0": 5, "hole2": "deathrattle", "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon", "hole3": [{"value": {"elts": [{"hole1": 2, "hole0": "ManaCost", "_type": "Template21"}, {"hole0": "IsMinion", "hole2": [{"_type": "Template36_expr_seq"}], "_type": "Template24_expr_seq"}], "_type": "List"}, "arg": "conditions", "_type": "keyword"}], "_type": "Template19"}, {"hole0": "PlayerSelector", "_type": "Template25"}], "_type": "Call"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"hole0": "MECH", "_type": "Template22"}], "args": [{"s": "<UNK> Old Shredder", "_type": "Str"}, {"n": 8, "_type": "Num"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", 55, 138, "8", "<EOS>", 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 169, "Is", "Minion", "<EOS>", 205, 71, 63, 171, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n", "beams": [{"inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n", "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -0.1536874771118164, -7.62939453125e-06, -9.536738616588991e-07, -5.960462772236497e-07, -0.00026523388805799186, 0.0, -0.0038803815841674805, 0.0, -0.006870269775390625, -0.0001316070556640625, -1.1444091796875e-05, -1.9073486328125e-06, -0.0004578828811645508, 0.0, -0.0002307891845703125, -0.0819082260131836, -0.2566843032836914, -0.023758355528116226, -0.006991386413574219, -1.9073486328125e-06, -0.0032978057861328125, -4.76837158203125e-05, -0.0010573851177468896, -0.0003186464309692383, -5.245203283266164e-06, -0.0038661956787109375, -6.866455078125e-05, -3.62396240234375e-05, -0.0033271312713623047, -0.00022137165069580078, -0.0002803802490234375, -1.9073486328125e-06, -4.76837158203125e-05, -1.9073486328125e-06, -0.002675175666809082, -5.245207830739673e-06, -0.006628990173339844, 0.0, -0.0001220703125, -0.0009441375732421875, -0.004078865051269531, 0.0, -0.004852294921875, -1.1444091796875e-05, -0.036833763122558594, 0.0, -0.004422187805175781, -7.62939453125e-06, -1.3470649719238281e-05, -9.918212890625e-05, 0.0], "score": -0.6168052936430399, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 7, "hole0": 5, "hole2": "deathrattle", "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard", "hole3": [{"value": {"attr": "LIST", "value": {"id": "CARD_SOURCE", "_type": "Name"}, "_type": "Attribute"}, "arg": "source", "_type": "keyword"}, {"value": {"id": "spare_part_list", "_type": "Name"}, "arg": "source_list", "_type": "keyword"}], "_type": "Template19"}, {"hole0": "PlayerSelector", "_type": "Template25"}], "_type": "Call"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "Toshley", "hole2": [{"hole1": 6, "hole0": "Toshley", "hole2": "ALL", "hole3": "LEGENDARY", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 213, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 76, 195, "source_list", "<EOS>", 25, 133, "spare_part_list", "<EOS>", 63, 171, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "beams": [{"inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(2), SelfSelector()),\n            Aura(ChangeAttack(2), SelfSelector())])\n", "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -0.015336036682128906, -0.0001735687255859375, -0.0028028031811118126, -7.033347174001392e-06, -0.000102996826171875, -0.0007534027099609375, -5.7220458984375e-06, -0.0029391595162451267, -0.0008317779866047204, -1.9073486328125e-06, -0.536759078502655, -5.125998541188892e-06, -0.7521600723266602, -0.000461578369140625, -0.06966107338666916, -7.748603820800781e-06, 0.0, -7.62939453125e-06, -0.4979743957519531, -0.000492095947265625, -0.02235567569732666, -1.2993811651540454e-05, -0.0002117156982421875, -0.22577667236328125, -1.71661376953125e-05, -0.018655840307474136, -0.12086918950080872, -3.814697265625e-06, -0.222565159201622, -2.622604142743512e-06, -0.8571062088012695, -0.0001354217529296875, -0.13545289635658264, -7.987022399902344e-06, -2.3841855067985307e-07, -3.24249267578125e-05, -8.20159912109375e-05], "score": -3.658397806259096, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 3, "hole0": 1, "hole2": "enrage", "hole3": {"hole1": [{"hole1": 2, "hole0": "ChangeAttack", "_type": "Template21"}, {"hole0": "SelfSelector", "_type": "Template25"}], "hole0": "Aura", "hole2": [{"hole1": [{"hole1": 2, "hole0": "ChangeAttack", "_type": "Template21"}, {"hole0": "SelfSelector", "_type": "Template25"}], "hole0": "Aura", "hole2": [{"_type": "Template36_expr_seq"}], "_type": "Template24_expr_seq"}], "_type": "Template24"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "Warbot", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"hole0": "MECH", "_type": "Template22"}], "args": [{"s": "Warbot", "_type": "Str"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"value": true, "_type": "NameConstant"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}]}
{"gold_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(\n            CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)),\n            PlayerSelector(EnemyPlayer())))\n", "beams": [{"inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, charge=True, enrage=[Effect(Character<UNK>(\n            player=BothPlayer()), ActionTag(Give([Buff(ChangeAttack(2)),\n            Buff(ChangeHealth(1))]), SelfSelector()))])\n", "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -0.3892558813095093, -0.0002498626708984375, -1.9073486328125e-05, -9.5367431640625e-06, -1.2755393072438892e-05, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -0.6863925457000732, 0.0, -0.0023212432861328125, -1.9073486328125e-05, -0.04859936237335205, -4.768370445162873e-07, -1.9073486328125e-06, -0.2077617645263672, -0.2200946807861328, -3.814697265625e-06, -1.71661376953125e-05, -0.06723833084106445, -0.6821353435516357, -0.0005617141723632812, -0.1609039306640625, -1.33514404296875e-05, -3.814697265625e-06, -0.0006562471389770508, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.03516829013824463, -4.00543212890625e-05, 0.0, -7.62939453125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.0001316070556640625, -7.987022399902344e-06, 0.0, -7.62939453125e-06, -0.007907867431640625, -0.1429004669189453, -9.5367431640625e-06, -1.9073486328125e-06, -0.03658229857683182, -2.1695992472814396e-05, -2.47955322265625e-05, -0.00145721435546875, -1.9073486328125e-05, -0.09489059448242188, -3.814697265625e-05, -0.0015735626220703125, -0.0008151531219482422, -1.728534698486328e-05, -3.814697265625e-06, 0.0, -9.357848466606811e-05, -0.043488480150699615, -1.9073486328125e-06, -0.0017604827880859375, -0.06908035278320312, -0.00562286376953125, -0.0001201629638671875, -0.0007419586181640625, -6.115436553955078e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.0015333890914916992, -0.0017848005518317223, -1.9073486328125e-06, -8.58306884765625e-05, -0.6528291702270508, -0.0021228790283203125, -0.0002040863037109375, -1.9073486328125e-06, -0.007525085937231779, -3.933906555175781e-06, -3.814697265625e-06, -3.814697265625e-06, -0.19812488555908203], "score": -3.7898767136271587, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 2, "hole0": "Minion", "hole2": 8, "hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "charge", "_type": "keyword"}, {"value": {"hole1": [{"func": {"id": "Character<UNK>", "_type": "Name"}, "keywords": [{"value": {"hole0": "BothPlayer", "_type": "Template25"}, "arg": "player", "_type": "keyword"}], "_type": "Call"}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"func": {"id": "Give", "_type": "Name"}, "args": [{"elts": [{"hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template33"}], "_type": "Template19"}, {"hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template34"}], "_type": "Template19"}, {"_type": "Template36_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template25"}], "_type": "Call"}], "hole0": "Effect", "hole2": [{"_type": "Template36_expr_seq"}], "_type": "Template24"}, "arg": "enrage", "_type": "keyword"}], "_type": "Template20"}], "hole1": "MinionCard", "hole0": "Deathlord", "hole2": [{"hole1": 3, "hole0": "Deathlord", "hole2": "ALL", "hole3": "RARE", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "enrage", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 48, 110, 25, 133, "Character", "<UNK>", "<EOS>", 212, 76, 195, "player", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}]}
{"gold_code": "class NerubarWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(\n            BothPlayer(), HasBattlecry()))])\n", "beams": [{"inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, buffs=[Buff(<UNK>Windfury())])\n", "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -0.00170135498046875, -3.814697265625e-06, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.00012409687042236328, 0.0, -0.8278708457946777, 0.0, -0.005473136901855469, -0.0006008148193359375, -0.0002613067626953125, -0.09901905059814453, -0.008512496948242188, -0.005721970461308956, -1.5497195136049413e-06, -3.814697265625e-06, -7.62939453125e-06, -0.2721008360385895, -0.1376817524433136, -2.0265579223632812e-06, -0.007877349853515625], "score": -1.3677530080525386, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 4, "hole0": 1, "hole2": "buffs", "hole3": {"elts": [{"hole1": {"id": "<UNK>Windfury", "_type": "Name"}, "hole0": "Buff", "_type": "Template19"}, {"_type": "Template36_expr_seq"}], "_type": "List"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole2": [{"hole1": 2, "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole3": "COMMON", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "buffs", "<EOS>", 23, 129, 206, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "Windfury", "<EOS>", 71]}]}
{"gold_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "beams": [{"inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=True)\n", "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -0.008777618408203125, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00010192393528996035, 0.0, -0.2154982089996338, 0.0, -0.0002422332763671875, -1.33514404296875e-05, -0.0012133121490478516, -2.3841855067985307e-07], "score": -0.23763223502370323, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 6, "hole0": 4, "hole2": "spell_targetable", "hole3": {"value": true, "_type": "NameConstant"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "SpectralKnight", "hole2": [{"hole1": 5, "hole0": "Spectral Knight", "hole2": "ALL", "hole3": "COMMON", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 26, 134, "False", "<EOS>"]}]}
{"gold_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "beams": [{"inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0007476806640625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -1.4185804502631072e-05, -4.768370126839727e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.0001621246337890625, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, -0.0009310245513916016, -9.655952453613281e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000110626220703125, -0.0001010894775390625, -1.1920928244535389e-07, -0.002185821533203125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.34600830078125e-05, -9.5367431640625e-06, -0.0001239776611328125, -0.2153787612915039, -0.001861572265625, -1.9073486328125e-06, -1.9073486328125e-06, -0.005714757833629847, -3.480863233562559e-05, -0.00089263916015625, -0.0001125335693359375, -0.0023202896118164062, -0.009523391723632812, -0.000347137451171875, -0.02289104461669922, -0.0004830360412597656, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.00025093500153161585, -0.008308406919240952, 0.0, -0.0014190673828125, -0.5219993591308594, -0.0002899169921875, -0.0196075439453125, -0.0008220672607421875, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0005327463150024414, -0.0015039442805573344, 0.0, -9.72747802734375e-05, -0.008609771728515625, -0.00537109375, -0.11672401428222656, -2.09808349609375e-05, -0.0002407810534350574, -1.3589859008789062e-05, 0.0, -3.814697265625e-06, 0.0, -0.00016473690629936755, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001430511474609375, -2.6702880859375e-05, -1.1920928244535389e-07, -2.7418097943154862e-06, -3.4332275390625e-05, -1.1920928244535389e-07], "score": -0.9511073915707229, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 5, "hole0": 3, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "WailingSoul", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"func": {"id": "Give", "_type": "Name"}, "args": [{"elts": [{"hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template34"}], "_type": "Template19"}, {"hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template34"}], "_type": "Template19"}, {"_type": "Template36_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template25"}], "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "args": [{"s": "Wailing Soul", "_type": "Str"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Wailing", " ", "Soul", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "beams": [{"inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(2), SelfSelector())])\n", "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -0.03086090087890625, -5.7220458984375e-06, -1.1920922133867862e-06, -6.556510470545618e-06, -0.00015938282012939453, -5.841255187988281e-06, -0.015129327774047852, 0.0, -0.006039619445800781, -0.0003032684326171875, -0.00797134730964899, -0.00011777877807617188, -0.00048065185546875, -0.00028228759765625, -9.5367431640625e-06, -0.00021754925546701998, -0.0001779794692993164, -3.814697265625e-06, -0.38502591848373413, -1.537799835205078e-05, -0.0016269683837890625, -0.0001049041748046875, -0.024177828803658485, -6.079673767089844e-06, 0.0, -1.9073486328125e-06, -0.24027061462402344], "score": -0.7174929465097648, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 3, "hole0": 2, "hole2": "enrage", "hole3": {"hole1": [{"hole1": 2, "hole0": "ChangeAttack", "_type": "Template21"}, {"hole0": "SelfSelector", "_type": "Template25"}], "hole0": "Aura", "hole2": [{"_type": "Template36_expr_seq"}], "_type": "Template24"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole2": [{"hole1": 2, "hole0": "Amani Berserker", "hole2": "ALL", "hole3": "COMMON", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}]}
{"gold_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            hearthbreaker.cards.Fireball()), PlayerSelector()))])\n", "beams": [{"inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(CardPlayed(<UNK>spell()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST)),\n            PlayerSelector()))])\n", "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -0.42951229214668274, -1.8477332559996285e-05, -0.5188016891479492, -7.62939453125e-06, -0.18546223640441895, -5.7220458984375e-06, -0.0035915374755859375, -5.7220458984375e-06, -9.298297300119884e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0037641525268554688, -2.09808349609375e-05, -2.503394853192731e-06, -2.264974000354414e-06, -6.377689715009183e-05, -2.3841855067985307e-07, -0.010283589363098145, 0.0, -1.52587890625e-05, -8.58306884765625e-05, -0.0003377199172973633, 0.0, -7.62939453125e-06, -0.029573440551757812, -0.05485725402832031, -0.989692211151123, -0.012935638427734375, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.23978781700134277, -0.5726394057273865, -0.7074627876281738, -0.02326488494873047, -3.814697265625e-05, -1.9073486328125e-06, 0.0, -0.005113840103149414, -0.00024938577553257346, 0.0, -7.62939453125e-06, -0.02866649627685547, -0.08014202117919922, -0.0017360156634822488, -0.0002367379784118384, -7.62939453125e-06, -0.0003757476806640625, 0.0, -0.00014554994413629174, -0.00022125244140625, -7.152555099310121e-07, -0.0012454986572265625, -7.43865966796875e-05, -5.7220458984375e-06, -0.09650087356567383, -1.919269561767578e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.0012035369873046875, -1.1444091796875e-05, -0.007493019104003906, -2.1457672119140625e-06, -0.6386854648590088, -2.1457672119140625e-06, -0.0014219284057617188, -1.9073486328125e-06, -1.0848044439626392e-05, -0.00018310546875, -1.9073486328125e-06, 0.0, -0.00177764892578125], "score": -4.649975775949514, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 7, "hole0": 5, "hole2": "effects", "hole3": {"hole1": [{"hole1": {"id": "<UNK>spell", "_type": "Name"}, "hole0": "CardPlayed", "_type": "Template19"}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard", "hole3": [{"value": {"attr": "LIST", "value": {"id": "CARD_SOURCE", "_type": "Name"}, "_type": "Attribute"}, "arg": "source", "_type": "keyword"}], "_type": "Template19"}, {"hole0": "PlayerSelector", "_type": "Template25"}], "_type": "Call"}], "hole0": "Effect", "hole2": [{"_type": "Template36_expr_seq"}], "_type": "Template24"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole2": [{"hole1": 7, "hole0": "Archmage Antonidas", "hole2": "MAGE", "hole3": "LEGENDARY", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Played", "<EOS>", 25, 133, "<UNK>", "spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}]}
{"gold_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)\n", "beams": [{"inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Give()))\n", "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -0.3079051971435547, -2.288818359375e-05, -2.288818359375e-05, -4.768370445162873e-07, -2.9802317840221804e-06, -0.00012969970703125, -0.012553215026855469, -0.000850677490234375, -8.0108642578125e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.46900486946105957, 0.0, -0.6866064071655273, -7.62939453125e-06, -9.5367431640625e-06, -0.0010226964950561523, 0.0, -0.003902435302734375, -1.9073486328125e-06, -1.9073486328125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -4.38690185546875e-05, -2.09808349609375e-05, -3.24249267578125e-05, -9.5367431640625e-06, -6.29425048828125e-05, 0.0, -0.000827789306640625, -1.9073486328125e-06, -0.00048828125, 0.0, -0.4074615240097046, 0.0, -9.393692016601562e-05, 0.0, -0.0001121716049965471, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -2.47955322265625e-05, -0.0008945465087890625, -2.3841855067985307e-07, -0.0009212493896484375, -1.1444091796875e-05, -6.29425048828125e-05, -0.00042724609375, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -7.2479248046875e-05, -5.7220458984375e-06, -0.0001062154769897461, 0.0, -0.27581024169921875, 0.0, -1.52587890625e-05, -0.0025310516357421875, -0.1642618179321289, -0.0008051395416259766, -5.960462772236497e-07, -0.000423431396484375, -1.9073486328125e-06, -0.14966855943202972, -0.0003395740350242704], "score": -2.5116008982519418, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"hole1": "add_buff", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"hole1": {"id": "Give", "_type": "Name"}, "hole0": "Buff", "_type": "Template19"}], "_type": "Template23"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "Bananas", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template34"}, {"attr": "PRIEST", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "FREE", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Bananas", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Give", "<EOS>"]}]}
{"gold_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(DoubleAttack()))\n", "beams": [{"inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack.calculate_attack()\n        <UNK> = self.target.health\n        if temp_attack == 0:\n            self.target.die(Null)\n        else:\n            self.target.<UNK>(<UNK>)\n            self.target.set_health_to(temp_attack)\n", "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -0.20855720341205597, -2.384185791015625e-06, -0.008800506591796875, -0.0008792877197265625, -1.9073486328125e-05, -0.0004062652587890625, -1.1444091796875e-05, 0.0, -0.1315603256225586, 0.0, -0.0045318603515625, -1.1444091796875e-05, -0.0004067420959472656, -2.1457672119140625e-06, -5.793566378997639e-05, -5.960462772236497e-07, -0.16517697274684906, -4.41074053014745e-06, -0.029264166951179504, -1.585470999998506e-05, -0.004245758056640625, -2.86102294921875e-05, -1.9073486328125e-06, -0.000148773193359375, -1.1444091796875e-05, -0.017641663551330566, -3.5881996154785156e-05, -0.2008819580078125, -0.003055572509765625, -6.29425048828125e-05, -1.9073486328125e-06, -0.000865936279296875, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -8.106231689453125e-06, -1.9073486328125e-06, -0.05081164836883545, 0.0, -0.11579036712646484, -0.004111289978027344, -0.0035867691040039062, -0.0001373291015625, -0.0008544921875, 0.0, -0.16384470462799072, -1.9073486328125e-06, -4.1961669921875e-05, -0.06091117858886719, -3.814697265625e-06, -0.03967094421386719, -0.00016021728515625, -0.0005332072032615542, -0.00011086463928222656, -0.0022125244140625, -0.0034084320068359375, -8.0108642578125e-05, -0.11180782318115234, -3.814697265625e-06, -7.2479248046875e-05, 0.0, -0.00010085105168400332, -2.1457672119140625e-06, -1.8477439880371094e-05, -1.9073486328125e-06, -0.026048898696899414, 0.0, -0.0006198883056640625, -0.0031251907348632812, -6.67572021484375e-05, -9.989738464355469e-05, -6.67572021484375e-05, -0.05584144592285156, -0.0024700164794921875, -0.06275177001953125, -0.0015106201171875, 0.0, -0.000316619873046875, 0.0, -4.589557647705078e-05, -1.9073486328125e-06, -1.597404116182588e-05, -1.9073486328125e-06, -0.006022453308105469, -3.814697265625e-06, -1.9073486328125e-06, -0.0042209625244140625, 0.0, -0.002051115036010742, -1.7642923921812326e-05, -0.017900466918945312, -0.0017299652099609375, -0.0034275054931640625, -1.9073486328125e-06, -0.0001163482666015625, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -3.361701965332031e-05, -5.7220458984375e-06, -0.7901163101196289, 0.0, -1.71661376953125e-05, -0.000911712646484375, 0.0, -0.7998286485671997, -3.814697265625e-06], "score": -3.3455810369484524, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"targets": [{"id": "temp_attack", "_type": "Name"}], "value": {"func": {"attr": "calculate_attack", "value": {"attr": "calculate_attack", "value": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Call"}, "_type": "Assign"}, {"targets": [{"id": "<UNK>", "_type": "Name"}], "value": {"attr": "health", "value": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Assign"}, {"body": [{"hole1": "die", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"value": "Null", "_type": "NameConstant"}], "_type": "Template23"}], "orelse": [{"hole1": "<UNK>", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"id": "<UNK>", "_type": "Name"}], "_type": "Template23"}, {"hole1": "set_health_to", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"id": "temp_attack", "_type": "Name"}], "_type": "Template23"}], "test": {"ops": [{"_type": "Eq"}], "left": {"id": "temp_attack", "_type": "Name"}, "comparators": [{"n": 0, "_type": "Num"}], "_type": "Compare"}, "_type": "If"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "args": [{"s": "Blessed Champion", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"attr": "PALADIN", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "RARE", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "temp_attack", "<EOS>", 20, 109, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 89, 122, 21, 114, 25, 133, "temp_attack", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 54, 135, "Null", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 205, 53, 133, "temp_attack", "<EOS>"]}]}
{"gold_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(\n            AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "beams": [{"inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            Attack<UNK>Than<UNK>EqualTo(2), EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -0.0985385850071907, -6.48477507638745e-05, -1.7452985048294067e-06, -8.58306884765625e-06, -7.152555099310121e-07, -0.0001220703125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013136000779923052, -2.8729436962748878e-05, -0.00011920928955078125, -0.044547080993652344, -0.002895355224609375, -9.1552734375e-05, -6.556507287314162e-06, -1.2278553185751662e-05, -1.52587890625e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -0.0006256103515625, -1.9073486328125e-06, -0.2303546667098999, 0.0, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, -0.00032806396484375, -1.0013580322265625e-05, -0.000423431396484375, -5.7220458984375e-06, -1.71661376953125e-05, -0.00490570068359375, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0006732940673828125, -0.0260467529296875, -7.62939453125e-06, -0.30246502161026, -0.00013147969730198383, -1.1444091796875e-05, -0.0009517669677734375, -7.62939453125e-06, -1.9073486328125e-06, -3.170964919263497e-05, -4.1961669921875e-05, -1.9073486328125e-06, -0.07765674591064453, -0.35234928131103516, -8.20159912109375e-05, -0.05139278620481491, -0.10866820812225342, -0.04014897346496582, -0.0041065216064453125, -0.1384258270263672, -0.00990605354309082, -0.00024890899658203125, -0.008228187449276447, -0.0003032684326171875, -6.103515625e-05, -1.9073486328125e-06, -0.0006296633509919047, -3.635883331298828e-05, 0.0, -0.0002422332763671875, -9.5367431640625e-06, -0.0015354149509221315, -0.0008507853490300477, -7.152555099310121e-07, -0.0001952648162841797, 0.0, -1.7285345165873878e-05, 0.0, -1.1444091796875e-05, -3.62396240234375e-05, -1.71661376953125e-05, -0.0007865543011575937, -2.3841855067985307e-07, -3.945756543544121e-05, -1.9073486328125e-06], "score": -1.5196984839153345, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 5, "hole0": 4, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "CabalShadowPriest", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"hole0": "Kill", "_type": "Template25"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "args": [{"hole1": 2, "hole0": "Attack<UNK>Than<UNK>EqualTo", "_type": "Template21"}, {"hole0": "EnemyPlayer", "_type": "Template25"}, {"hole0": "RandomPicker", "_type": "Template25"}], "_type": "Call"}], "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "args": [{"s": "Cabal Shadow", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"attr": "ROGUE", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "EPIC", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 60, 163, "Attack", "<UNK>", "Than", "<UNK>", "Equal", "To", "<EOS>", "2", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        index = self.target.index\n        if self.target.index < len(self.target.player.minions) - 1:\n            minion = self.target.player.minions[index + 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target.index > 0:\n            minion = self.target.player.minions[index - 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n", "beams": [{"inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.other_player.hero)\n        if targets is not Null:\n            target.damage(player.effective_spell_damage(1), self)\n        else:\n            self.target.change_attack(2)\n", "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -1.2538084983825684, -1.52587890625e-05, -0.13036727905273438, -2.6702880859375e-05, -3.814697265625e-06, -0.0021114349365234375, -3.814697265625e-06, -0.02262747287750244, 0.0, -0.010098457336425781, -5.7220458984375e-05, -9.34600830078125e-05, -1.9073486328125e-06, -0.0001087188720703125, 0.0, -0.0022020339965820312, 0.0, -0.000118255615234375, 0.0, -1.1444091796875e-05, -2.86102294921875e-05, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, -0.000926971435546875, -3.814697265625e-06, -5.340576171875e-05, 0.0, -0.00011074542999267578, -5.7220458984375e-05, -0.0001266002655029297, -1.9073486328125e-06, -0.045098304748535156, -1.71661376953125e-05, -0.025693893432617188, -3.814697265625e-06, -0.0177994966506958, 0.0, -0.008144259452819824, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, 0.0, -0.019357681274414062, 0.0, -0.0001354217529296875, -3.814697265625e-06, -0.0005931854248046875, 0.0, -0.25531160831451416, -2.384185791015625e-06, -0.004440426826477051, -3.814697265625e-06, -0.23910999298095703, -1.9073486328125e-05, -0.002834320068359375, -1.9073486328125e-06, -0.0007839202880859375, 0.0, -0.13875484466552734, 0.0, -1.9073486328125e-05, -5.7220458984375e-06, -1.1444091796875e-05, -0.0001239776611328125, 0.0, -0.0001964569091796875, -1.9073486328125e-06, -0.001399993896484375, 0.0, -0.13506507873535156, -7.867813110351562e-06, -0.031013011932373047, 0.0, -0.3128185272216797, -0.041263580322265625, -0.62188720703125, -1.1444091796875e-05, -0.08911800384521484, -1.1444091796875e-05, -0.08812153339385986, 0.0, -0.00045013427734375, -0.06444358825683594, -0.00020599365234375, -0.000644683837890625, -0.000339508056640625, -9.72747802734375e-05, -1.9073486328125e-06, -0.000759124755859375, -0.00327301025390625, -1.9073486328125e-05, -0.017732620239257812, 0.0, -0.19071435928344727, 0.0, -0.27788448333740234, 0.0, -3.814697265625e-06, -0.0050640106201171875, -0.00018310546875, -2.47955322265625e-05, -8.20159912109375e-05, -1.33514404296875e-05, -0.0008587833726778626, 0.0, -0.0004863739013671875, -0.00034332275390625, -0.0001201629638671875, -7.62939453125e-06, -0.0013554096221923828, -1.9073486328125e-06, -1.9073486328125e-06, -0.6217927932739258, -0.00032806396484375, -0.027860641479492188, -7.62939453125e-06, -4.57763671875e-05, 0.0, -0.0011894702911376953, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.21911239624023438, 0.0, -1.9073486328125e-06, -0.11408710479736328], "score": -5.5152821318010865, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"targets": [{"id": "targets", "_type": "Name"}], "value": {"func": {"attr": "copy", "value": {"id": "copy", "_type": "Name"}, "_type": "Attribute"}, "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"id": "game", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}, "hole2": [{"attr": "minions", "value": {"attr": "current_player", "value": {"id": "game", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template23"}, {"hole1": "append", "hole0": {"id": "targets", "_type": "Name"}, "hole2": [{"attr": "hero", "value": {"attr": "other_player", "value": {"id": "game", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Template23"}, {"body": [{"hole1": "damage", "hole0": {"id": "target", "_type": "Name"}, "hole2": [{"func": {"attr": "effective_spell_damage", "value": {"_type": "Template38"}, "_type": "Attribute"}, "args": [{"_type": "Template34"}], "_type": "Call"}, {"id": "self", "_type": "Name"}], "_type": "Template23"}], "orelse": [{"hole1": "change_attack", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"_type": "Template33"}], "_type": "Template23"}], "test": {"ops": [{"_type": "IsNot"}], "left": {"id": "targets", "_type": "Name"}, "comparators": [{"value": "Null", "_type": "NameConstant"}], "_type": "Compare"}, "_type": "If"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "args": [{"s": "Cone of Cold", "_type": "Str"}, {"_type": "Template37"}, {"attr": "MAGE", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"_type": "Template26"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 89, 122, 21, 114, 25, 133, "targets", "<EOS>", 202, 13, 205, 54, 135, "Null", "<EOS>", 217, 97, 166, 25, 133, "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68]}]}
{"gold_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -0.08854832500219345, -0.0006586014060303569, -5.7220458984375e-05, -0.000263214111328125, -0.0002956390380859375, -0.19058704376220703, -0.051117897033691406, -0.019013404846191406, -0.0019614696502685547, -4.172325134277344e-06, -1.9073486328125e-06, 0.0, -0.0021126160863786936, -0.12298781424760818, 0.0, -7.62939453125e-06, -0.3369932174682617, -0.0003147125244140625, -0.00063323974609375, -0.000990152359008789, -4.172325134277344e-06, -9.5367431640625e-06, 0.0, -0.0020517075899988413, -0.0020649356301873922, -2.3841855067985307e-07, -6.866455078125e-05, -0.016397476196289062, -0.019983291625976562, -0.0670318603515625, -0.03996849060058594, -7.62939453125e-06, -1.33514404296875e-05, -0.000301957072224468, -1.5497207641601562e-05, -1.9073486328125e-06, -0.000274658203125, -5.7220458984375e-06, -7.62939453125e-06, -0.05456399917602539, -2.741813204920618e-06, -0.000164031982421875, -1.33514404296875e-05, -0.0018963813781738281, -0.0003762245178222656, -3.063678741455078e-05, -1.9073486328125e-06, 0.0, -2.384185791015625e-06, 0.0, -1.52587890625e-05, -4.9591064453125e-05, -1.33514404296875e-05, -2.9802276912960224e-06, -7.510157047363464e-06, -2.5033950805664062e-05, 0.0], "score": -1.0557571777823966, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 3, "hole0": 2, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"func": {"id": "Give", "_type": "Name"}, "args": [{"elts": [{"hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template33"}], "_type": "Template19"}, {"hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template34"}], "_type": "Template19"}, {"_type": "Template36_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "UserPicker", "_type": "Template25"}, "arg": "picker", "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "args": [{"s": "Defender of Argus", "_type": "Str"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, buffs=[Buff(Windfury())])\n", "beams": [{"inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8)\n", "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -0.02037358283996582, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0145416259765625, -5.7220458984375e-06, -0.0006122589111328125, 0.0, -1.9073486328125e-06, -0.004670143127441406, 0.0, -0.0703573226928711, -0.028415679931640625, -9.5367431640625e-06, -2.384184699621983e-05, 0.0, -0.0003204345703125, -0.0030908584594726562, -0.0030879974365234375, -7.510156137868762e-06, -3.1232637411449105e-05, 0.0, 0.0, -0.0005553960800170898, -3.4570634852570947e-06], "score": -0.1494184294688239, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 2, "hole0": "Weapon", "hole2": 8, "_type": "Template20"}], "hole1": "WeaponCard", "hole0": "Doomhammer", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"_type": "Template33"}, "arg": "overload", "_type": "keyword"}], "args": [{"s": "Doomhammer", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"attr": "SHAMAN", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "EPIC", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "overload", "<EOS>", 37, "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"]}]}
{"gold_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence()\n        self.target.damage(player.effective_spell_damage(1), self)\n", "beams": [{"inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n", "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -0.014675736427307129, 0.0, -1.3470649719238281e-05, 0.0, -4.255717067280784e-05, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.01976299285888672, -3.814697265625e-06, -0.000286102294921875, -0.08141040802001953, -0.00018310546875, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -4.398822784423828e-05, -1.9073486328125e-06, -2.3961063561728224e-05, 0.0, -0.17481613159179688, 0.0, -0.00011444091796875, -0.08981513977050781, -5.7220458984375e-05, -1.9073486328125e-06, -3.0517578125e-05, -8.392333984375e-05, -0.0001506804837845266, -5.960462772236497e-07, -0.00612640380859375, -9.918212890625e-05, -0.0004596710205078125, -3.814697265625e-06, -0.0002772808074951172, 0.0], "score": -0.3975713208681313, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"hole1": "damage", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"func": {"attr": "effective_spell_damage", "value": {"_type": "Template38"}, "_type": "Attribute"}, "args": [{"_type": "Template34"}], "_type": "Call"}, {"id": "self", "_type": "Name"}], "_type": "Template23"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "args": [{"s": "Earth Shock", "_type": "Str"}, {"_type": "Template34"}, {"attr": "SHAMAN", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"_type": "Template26"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>"]}]}
{"gold_code": "class EyeForAnEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, character, attacker, amount):\n        if character.is_hero():\n            character.player.opponent.hero.damage(amount, self)\n        super().reveal()\n\n    def activate(self, player):\n        player.bind('character_damaged', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('character_damaged', self._reveal)\n", "beams": [{"inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero.minion_type += 1\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) < 7\n", "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -0.38782811164855957, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.6868076324462891, -0.0002422332763671875, -0.1002044677734375, 0.0, -0.15659046173095703, -3.814697265625e-06, -0.3039466142654419, -1.9073486328125e-06, -0.009415149688720703, 0.0, -0.0017086267471313477, -3.814697265625e-06, -0.0017753801075741649, 0.0, -0.813145637512207, 0.0, -0.5075960159301758, -0.18734359741210938, -0.010526657104492188, -0.0009632110595703125, -0.001827239990234375, 0.0, -0.09250092506408691, 0.0, -0.0016326904296875, 0.0, 0.0, -0.04434394836425781, -2.47955322265625e-05, -0.0001220703125, -7.62939453125e-06, -0.000518798828125, -0.008298003114759922, -4.172325134277344e-06, -3.814697265625e-05, -0.0002536773681640625, -4.00543212890625e-05, -1.71661376953125e-05, -0.00022995471954345703, 0.0, -5.53131103515625e-05, -0.001194000244140625, -0.0001049041748046875, -0.0009285168489441276, 0.0, -0.00066375732421875, -1.33514404296875e-05, -0.0021305084228515625, -8.58306884765625e-05, -0.0037841796875, -0.0001239776611328125, -0.0023860931396484375, -3.814697265625e-06, -0.00140380859375, -9.1552734375e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.830687925685197e-05, -2.3841855067985307e-07, -0.0009860992431640625, 0.0, -3.62396240234375e-05, 0.0, -0.062114715576171875, 0.0, -0.000568389892578125, -9.5367431640625e-06, -0.0066204071044921875, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0007153749465942383, 0.0, -0.0003032684326171875, -3.0517578125e-05, -0.0002231597900390625, -0.19685935974121094, -5.7220458984375e-06, -0.023052215576171875, 0.0, -0.0033397674560546875, 0.0, -0.00010836124420166016, -3.933906555175781e-06, -0.0007091733859851956, -3.814697265625e-06, -1.9073486328125e-06, -0.9367256164550781, -1.71661376953125e-05, -0.010631561279296875, -1.1444091796875e-05, -0.0013062938814982772, -1.1920928244535389e-07], "score": -7.764451661379972, "model_output": {"hole3": "_reveal", "hole4": "attacker", "hole7": [{"body": [{"value": {"op": {"_type": "And"}, "values": [{"hole1": "can_use", "hole0": {"hole0": "super", "_type": "Template25"}, "hole2": "player", "hole3": "game", "_type": "Template17"}, {"ops": [{"_type": "Lt"}], "left": {"func": {"id": "len", "_type": "Name"}, "args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"id": "game", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call"}, "comparators": [{"n": 7, "_type": "Num"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "args": {"_type": "Template8"}, "name": "can_use", "_type": "FunctionDef"}], "hole6": [{"body": [{"op": {"_type": "Add"}, "target": {"attr": "minion_type", "value": {"attr": "hero", "value": {"attr": "other_player", "value": {"attr": "game", "value": {"attr": "player", "value": {"id": "attacker", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}, "value": {"_type": "Template34"}, "_type": "AugAssign"}, {"hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}, "hole2": [{"func": {"attr": "effective_spell_damage", "value": {"_type": "Template38"}, "_type": "Attribute"}, "args": [{"_type": "Template33"}], "_type": "Call"}, {"id": "self", "_type": "Name"}], "_type": "Template23"}], "test": {"op": {"_type": "And"}, "values": [{"ops": [{"_type": "Is"}], "left": {"id": "target", "_type": "Name"}, "comparators": [{"attr": "hero", "value": {"attr": "player", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Compare"}, {"op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "value": {"id": "attacker", "_type": "Name"}, "_type": "Attribute"}, "_type": "UnaryOp"}], "_type": "BoolOp"}, "_type": "If"}], "hole5": [{"arg": "target", "_type": "arg"}], "hole1": "SecretCard", "hole0": "Eyean", "hole2": [{"hole1": 1, "hole0": "Eye for Eye", "hole2": "PALADIN", "hole3": "COMMON", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "minion_type", "<EOS>", 78, 38, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}]}
{"gold_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in hearthbreaker.targeting.find_minion_spell_target(game,\n            lambda m: m.stealth):\n            minion.stealth = False\n        for secret in game.other_player.secrets:\n            secret.deactivate(game.other_player)\n        game.other_player.secrets = []\n        player.draw()\n", "beams": [{"inferred_code": "class Flare<UNK>(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = len(player.minions) - len(targets)\n        player.draw()\n        player.draw()\n        player.draw()\n", "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -0.43155622482299805, -0.4720824658870697, -0.0005751842400059104, -2.1815138097736053e-05, -9.179109838441946e-06, -7.62939453125e-06, -0.000125885009765625, -8.392333984375e-05, -1.9907771275029518e-05, -2.1696090698242188e-05, -1.1920928244535389e-07, -5.7220440794480965e-06, -0.003571033477783203, -5.7220458984375e-06, -0.007356047630310059, -7.62939453125e-06, -0.00013017654418945312, 0.0, -0.0004313262179493904, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -8.34464663057588e-06, -2.1934269170742482e-05, -0.21250629425048828, -0.0001506805419921875, -0.024343490600585938, -0.0016002655029296875, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.5904130339622498, -0.0006252095336094499, -0.11522579193115234, -0.0017528533935546875, -0.03144264221191406, -9.5367431640625e-06, -0.022777557373046875, -3.814697265625e-06, -0.13092289865016937, -4.1961669921875e-05, -0.0009918212890625, -0.10266780853271484, -7.62939453125e-06, -0.39818286895751953, -0.0036493532825261354, 0.0, -0.20277881622314453, -0.0023365020751953125, -0.0008487701416015625, -0.0015735626220703125, 0.0, -0.0013943910598754883, -2.288818359375e-05, -8.392333984375e-05, -0.6496496200561523, 0.0, -0.35829785466194153, -2.3841855067985307e-07, -0.000461578369140625, -0.00868988037109375, -0.0001811981201171875, -0.0007654428482055664, 0.0, -1.71661376953125e-05, -0.0026073455810546875, -7.62939453125e-06, -0.001503586769104004, 0.0, -5.7220458984375e-05, -0.0029954910278320312, -3.814697265625e-06, -0.0029435157775878906, -1.9073486328125e-06], "score": -3.792061577583773, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"targets": [{"id": "<UNK>", "_type": "Name"}], "value": {"op": {"_type": "Sub"}, "left": {"func": {"id": "len", "_type": "Name"}, "args": [{"attr": "minions", "value": {"_type": "Template38"}, "_type": "Attribute"}], "_type": "Call"}, "right": {"func": {"id": "len", "_type": "Name"}, "args": [{"id": "targets", "_type": "Name"}], "_type": "Call"}, "_type": "BinOp"}, "_type": "Assign"}, {"hole1": "draw", "hole0": {"_type": "Template38"}, "_type": "Template23"}, {"hole1": "draw", "hole0": {"_type": "Template38"}, "_type": "Template23"}, {"hole1": "draw", "hole0": {"_type": "Template38"}, "_type": "Template23"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "Flare<UNK>", "hole2": [{"hole1": 2, "hole0": "Flare", "hole2": "HUNTER", "hole3": "RARE", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 147, "Flare", "<UNK>", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 79, 20, 111, 25, 133, "len", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}]}
{"gold_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(),\n            TargetIsMinion())), [ActionTag(IncreaseDurability(),\n            WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1),\n            WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1),\n            AttackCompleted())), HeroSelector())])])\n", "beams": [{"inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionDied(), ActionTag(\n            IncreaseDurability(), WeaponSelector()))])\n", "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -0.6171963214874268, -0.0001010894775390625, -0.00013971328735351562, 0.0, -0.0093841552734375, 0.0, -3.921923052985221e-05, 0.0, -9.5367431640625e-06, -0.000213623046875, -0.0076656341552734375, -0.0025462042540311813, -1.3351351299206726e-05, -2.491474151611328e-05, -3.6954811548639555e-06, -0.1355101615190506, -3.576278118089249e-07, -0.6668319702148438, -0.0008144378662109375, -0.0009593963623046875, -0.08389294147491455, 0.0, -0.0011997222900390625, -6.29425048828125e-05, -0.0006258432404138148, -1.1920928244535389e-07, -1.1444091796875e-05, -0.0021457672119140625, -5.7220458984375e-06, -0.07790590822696686, -0.666786789894104, -6.902217864990234e-05, -0.0001583099365234375, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -7.748603820800781e-06, 0.0, -9.5367431640625e-05, -0.006671905517578125, -3.24249267578125e-05, -0.3032403290271759, -0.07529113441705704, -0.0001687864278210327, -0.000705718994140625, -1.33514404296875e-05, -0.08186306804418564, -7.581671525258571e-05, 0.0, -1.9073486328125e-06, -0.001338958740234375], "score": -2.7763016968713004, "model_output": {"hole3": "create_weapon", "hole4": "player", "hole6": [{"hole1": 7, "hole0": "Weapon", "hole2": 1, "hole3": [{"value": {"hole1": [{"hole0": "MinionDied", "_type": "Template25"}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"hole0": "IncreaseDurability", "_type": "Template25"}, {"hole0": "WeaponSelector", "_type": "Template25"}], "_type": "Call"}], "hole0": "Effect", "hole2": [{"_type": "Template36_expr_seq"}], "_type": "Template24"}, "arg": "effects", "_type": "keyword"}], "_type": "Template20"}], "hole1": "WeaponCard", "hole0": "Gorehowl", "hole2": [{"hole1": 7, "hole0": "Gorehowl", "hole2": "HUNTER", "hole3": "EPIC", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "HUNTER", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 212, 76, 195, "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Minion", "Died", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "Durability", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}]}
{"gold_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "beams": [{"inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER,\n            CHARACTER_CLASS.BEAST, CARD_RARITY.FREE, True)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -0.25566864013671875, -0.0001354217529296875, -0.03282451629638672, -0.000110626220703125, -5.7220458984375e-06, -1.0848005331354216e-05, -0.00035172473872080445, -0.032207489013671875, 0.0, -0.24448081851005554, -1.1682510375976562e-05, -0.002399444580078125, -3.814697265625e-06, -4.9591064453125e-05, -3.0517578125e-05, -0.0070667266845703125, 0.0, -0.0018601416377350688, 0.0, -0.029867172241210938, -0.0002536773681640625, -0.2303018569946289, -0.0001049041748046875, -0.21644210815429688, 0.0, -0.5543030500411987, -1.9073486328125e-06, -0.0033435821533203125, -0.00045013427734375, -0.021610260009765625, -0.00022149085998535156, -1.52587890625e-05, -0.004329681396484375, -1.1444091796875e-05, -6.115436553955078e-05, -9.5367431640625e-06, -0.000637054443359375, 0.0, -0.00702512264251709, 0.0, -8.20159912109375e-05, -0.025115966796875, -6.29425048828125e-05, -2.3841830625315197e-06, -5.960462772236497e-07, -0.0007890629931353033, -2.3841855067985307e-07, -0.002564549446105957, -3.0517578125e-05, -8.96453857421875e-05, -1.71661376953125e-05, -0.00021266937255859375, -1.9073486328125e-05], "score": -1.675776984375915, "model_output": {"hole3": "create_minion", "hole4": "p", "hole6": [{"hole1": 1, "hole0": 1, "hole2": "charge", "hole3": {"value": true, "_type": "NameConstant"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "Hound", "hole2": [{"value": {"func": {"_type": "Template18"}, "args": [{"s": "Hound", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"attr": "HUNTER", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "BEAST", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "FREE", "value": {"_type": "Template30"}, "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Hound", "<EOS>", 55, 138, "1", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "BEAST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}]}
{"gold_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "beams": [{"inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Null, EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -0.01962081342935562, -3.6954811548639555e-06, -0.015840530395507812, -0.5838661193847656, -7.62939453125e-06, -3.814697265625e-06, -0.007171390578150749, -4.9948692321777344e-05, -1.1920928244535389e-07, -0.6008157730102539, -0.023729324340820312, -7.2479248046875e-05, -6.4373016357421875e-06, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -0.001623510499484837, -5.340576171875e-05, -2.6702880859375e-05, -6.29425048828125e-05, -7.62939453125e-06, -0.003946661949157715, -0.005095243453979492, -1.9073486328125e-06, -3.266334533691406e-05, 0.0, -3.647804260253906e-05, 0.0, -2.86102294921875e-05, -8.0108642578125e-05, -5.14984130859375e-05, -3.6954643292119727e-06, -9.536738616588991e-07, -0.00043392181396484375, 0.0], "score": -1.275265562887732, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 7, "hole0": 4, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"hole1": 4, "hole0": "Damage", "_type": "Template21"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "args": [{"value": "Null", "_type": "NameConstant"}, {"hole0": "EnemyPlayer", "_type": "Template25"}, {"hole0": "RandomPicker", "_type": "Template25"}], "_type": "Call"}], "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "args": [{"s": "Injured Blademaster", "_type": "Str"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 54, 135, "Null", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(\n            1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=None)))])\n", "beams": [{"inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=Null)))])\n", "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.6529309153556824, -9.536738616588991e-07, -0.0012549159582704306, 0.0, -4.112720489501953e-05, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.00010346942872274667, -1.1920928244535389e-07, 0.0, -0.0007534027099609375, -1.52587890625e-05, -2.503394853192731e-06, -4.5536911784438416e-05, -6.318082796497038e-06, -4.053113570989808e-06, -8.738040196476504e-05, -5.7220458984375e-06, -1.33514404296875e-05, -1.71661376953125e-05, -0.00035427045077085495, -2.6702815375756472e-05, -9.5367431640625e-06, -0.012628555297851562, -0.0809030532836914, -0.2746272087097168, -0.1982710361480713, -0.00016427040100097656, -2.47955322265625e-05, -1.9073486328125e-06, -0.0025909915566444397, -0.036297757178545, -1.0251998901367188e-05, -2.09808349609375e-05, -2.288818359375e-05, -1.9073486328125e-06, 0.0, -0.00048089027404785156, -6.461142766056582e-05, -3.814697265625e-06, -0.002262115478515625, -0.01617908477783203, -6.67572021484375e-05, -0.008040552027523518, -0.0006179092451930046, -0.027057886123657227, -1.4066597032069694e-05, -0.0001163482666015625, -0.3538379669189453, -7.62939453125e-06, 0.0, -0.4874753952026367, -0.0004469156265258789, 0.0, -0.09197521209716797, -0.0001926422119140625, -9.5367431640625e-05, -0.014834403991699219, -4.768370445162873e-07, -0.0023965835571289062, -2.6702880859375e-05, -0.001014825887978077, -2.86102294921875e-05, -1.9073486328125e-06, -4.57763671875e-05, -7.62939453125e-06, -0.11974918842315674, -1.9073486328125e-06, -0.0025186538696289062, -5.14984130859375e-05, -0.0013008107198402286, -0.0003815889358520508, 0.0, -3.814697265625e-06, 0.0, -0.05177140235900879, 0.0, -0.00452423095703125, -0.00469970703125, -1.20401346066501e-05, -3.933906555175781e-06, -0.000820159912109375, -0.0010128021240234375], "score": -2.4560375174837503, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 2, "hole0": 3, "hole2": "effects", "hole3": {"hole1": [{"hole1": {"id": "IsSpell", "_type": "Name"}, "hole0": "CardUsed", "_type": "Template19"}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"hole1": 1, "hole0": "Damage", "_type": "Template21"}, {"func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "EnemyPlayer", "_type": "Template25"}, "arg": "players", "_type": "keyword"}, {"value": {"hole0": "RandomPicker", "_type": "Template25"}, "arg": "picker", "_type": "keyword"}, {"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}], "hole0": "Effect", "hole2": [{"_type": "Template36_expr_seq"}], "_type": "Template24"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole2": [{"hole1": 2, "hole0": "Knife Juggler", "hole2": "ALL", "hole3": "RARE", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Used", "<EOS>", 25, 133, "Is", "Spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 205, 71]}]}
{"gold_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(condition=IsDamaged(), picker=RandomPicker\n            ())))])\n", "beams": [{"inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Damage\n            (2), CharacterSelector(players=BothPlayer(), picker=\n            RandomPicker())))])\n", "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -0.10131287574768066, 0.0, -0.0016634464263916016, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.00025331974029541016, 0.0, -5.7220458984375e-06, -0.0037822723388671875, -1.71661376953125e-05, -2.0265558760002023e-06, -3.933898824470816e-06, -4.529942543740617e-06, -1.9073486328125e-06, -0.008166909217834473, -7.62939453125e-06, -0.000347137451171875, -0.0008907318115234375, -2.6941299438476562e-05, -6.29425048828125e-05, -5.14984130859375e-05, -0.0010929107666015625, -2.86102294921875e-05, -0.00021910626674070954, -0.09568321704864502, -7.43865966796875e-05, -4.00543212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.000141143798828125, -0.2055063247680664, -4.38690185546875e-05, -0.12912261486053467, -4.172253102296963e-05, -0.4803178012371063, -2.2649765014648438e-06, -0.0013179779052734375, -0.0001583099365234375, -2.09808349609375e-05, -1.9073486328125e-06, -0.06981086730957031, -2.86102294921875e-05, 0.0, -0.5426607131958008, -0.0001125335693359375, -7.82012939453125e-05, -0.03125190734863281, 0.0, -0.0003681182861328125, -1.9073486328125e-06, -0.016290664672851562, -7.62939453125e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.02761077880859375, 0.0, -0.00054931640625, -1.9073486328125e-06, -0.11321640014648438, -0.00032448768615722656, 0.0, -0.002750396728515625, -0.0011272430419921875], "score": -1.876213776659597, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 5, "hole0": 0, "hole2": "effects", "hole3": {"hole1": [{"hole0": "TurnStarted", "_type": "Template25"}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"hole1": 2, "hole0": "Damage", "_type": "Template21"}, {"func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "BothPlayer", "_type": "Template25"}, "arg": "players", "_type": "keyword"}, {"value": {"hole0": "RandomPicker", "_type": "Template25"}, "arg": "picker", "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}], "hole0": "Effect", "hole2": [{"_type": "Template36_expr_seq"}], "_type": "Template24"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "Lightwell", "hole2": [{"hole1": 2, "hole0": "Lightwell", "hole2": "ROGUE", "hole3": "RARE", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Started", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "2", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}]}
{"gold_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n", "beams": [{"inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionHasAttack(\n            )), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -0.0021152496337890625, -2.288818359375e-05, -4.410743713378906e-05, -1.6689286894688848e-06, -0.00010752252273960039, -6.377696263371035e-05, -0.0002142190933227539, 0.0, -5.7220458984375e-06, -7.82012939453125e-05, -0.0001884683733806014, -3.6954811548639555e-06, -5.14984130859375e-05, -0.00091552734375, -0.04889869689941406, -0.004220368340611458, -0.23589646816253662, -1.1920928244535389e-07, -1.52587890625e-05, -1.9073486328125e-06, -0.7534778118133545, -0.4202086925506592, -0.09546320140361786, -1.2278545909794047e-05, -4.76837158203125e-05, -0.000209808349609375, -2.288818359375e-05, 0.0, -0.0018203258514404297, -0.00022149043797980994, 0.0, -0.00048828125, -8.7738037109375e-05, -0.00067901611328125, -0.00023293463164009154, -2.8490801923908293e-05, -0.000392913818359375, 0.0, -0.00045031693298369646, -0.002293109428137541, -2.861022494471399e-06, -1.9073486328125e-06, -9.5367431640625e-06, -0.0002956390380859375, -1.52587890625e-05, -0.001019861432723701, -2.5868412194540724e-05, 0.0, -7.62939453125e-06, -0.027570724487304688], "score": -1.65561203084291, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 3, "hole0": 1, "hole2": "effects", "hole3": {"hole1": [{"hole1": {"id": "MinionHasAttack", "_type": "Name"}, "hole0": "MinionSummoned", "_type": "Template19"}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give", "hole2": [{"_type": "Template34"}], "_type": "Template19"}, {"hole0": "SelfSelector", "_type": "Template25"}], "_type": "Call"}], "hole0": "Effect", "hole2": [{"_type": "Template36_expr_seq"}], "_type": "Template24"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "ManaWyrm", "hole2": [{"hole1": 1, "hole0": "Mana Wyrm", "hole2": "MAGE", "hole3": "COMMON", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Minion", "Has", "Attack", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}]}
{"gold_code": "class MogushanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "beams": [{"inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score_history": [-0.0001125335693359375, -0.0003566741943359375, -0.00016592556494288146, -0.00016115828475449234, -6.079665126890177e-06, -6.794929504394531e-06, -3.4570680327306036e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002536773681640625, -8.20159912109375e-05, -2.861018856492592e-06, -4.6133995056152344e-05, -2.0265579223632812e-06, -1.1444091796875e-05, -0.010144591331481934, -3.4570634852570947e-06, -0.00013697147369384766, 0.0, -0.00013875961303710938, 0.0, -3.814697265625e-06, 0.0, -4.971012458554469e-05, 0.0, -5.7220458984375e-06, -0.002262115478515625, -5.7220458984375e-06, -2.0265558760002023e-06, -4.208087921142578e-05, -0.000494596955832094, -1.1920928244535389e-07, -0.03720724582672119, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -0.0006017684936523438, -1.1920928244535389e-07], "score": -0.05239161929397085, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 7, "hole0": 1, "hole2": "taunt", "hole3": {"value": true, "_type": "NameConstant"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "Mogu'shanWarden", "hole2": [{"hole1": 4, "hole0": "Mogu'shan Warden", "hole2": "ALL", "hole3": "COMMON", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}]}
{"gold_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class Gain2(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Gain 2 mana crystals', 0, CHARACTER_CLASS\n                    .DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                if player.max_mana < 8:\n                    player.max_mana += 2\n                    player.mana += 2\n                else:\n                    player.max_mana = 10\n                    player.mana += 2\n\n\n        class Draw3(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Draw three cards', 0, CHARACTER_CLASS.\n                    DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                player.draw()\n                player.draw()\n                player.draw()\n        option = player.agent.choose_option([Gain2(), Draw3()], player)\n        option.use(player, game)\n", "beams": [{"inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw(Summon(ManaBird(), 2))\n        player.draw()\n        player.draw()\n        player.draw()\n", "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -0.39417076110839844, -1.0672106742858887, -1.9073486328125e-06, -1.33514404296875e-05, -0.09374141693115234, -0.0044803619384765625, -0.0030689239501953125, 0.0, -0.7568846940994263, -0.00013899194891564548, -0.00016021728515625, -0.0003261566162109375, -1.71661376953125e-05, -0.9696573615074158, -1.5202760696411133, -0.0009336468065157533, -0.08682727813720703, -0.373382568359375, -0.0006809234619140625, -0.003604888916015625, -0.000805974006652832, 0.0, -2.6702880859375e-05, -0.0001430511474609375, -0.012548446655273438, -0.0010213851928710938, 0.0, -0.001949310302734375, -0.0035524368286132812, -0.002506256103515625, -0.0009889602661132812, 0.0], "score": -5.944081348715031, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"hole1": "draw", "hole0": {"_type": "Template38"}, "hole2": [{"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaBird", "_type": "Template25"}, {"_type": "Template33"}], "_type": "Call"}], "_type": "Template23"}, {"hole1": "draw", "hole0": {"_type": "Template38"}, "_type": "Template23"}, {"hole1": "draw", "hole0": {"_type": "Template38"}, "_type": "Template23"}, {"hole1": "draw", "hole0": {"_type": "Template38"}, "_type": "Template23"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "Nourish", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"attr": "DRUID", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"attr": "RARE", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 42, "draw", "<EOS>", 205, 48, 111, 25, 133, "Summon", "<EOS>", 206, 63, 171, "Mana", "Bird", "<EOS>", 68, 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}]}
{"gold_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsSpell()), SpellCast()))\n", "beams": [{"inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        query = CardQuery(conditions=[IsMinion()])\n        new_minon = query.<UNK>(player, player, player)\n        new_minon = query.<UNK>(player, player, player)\n        hammer = query.<UNK>(game.random_choice(player.opponent.minions))\n", "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.6532402038574219, 0.0, -1.9073486328125e-05, 0.0, -3.063678741455078e-05, -0.00023651123046875, -0.00015353711205534637, 0.0, -7.62939453125e-06, -0.000202178955078125, 0.0, -0.00012230873107910156, -7.987019671418238e-06, -0.11026573181152344, -0.00716400146484375, -0.00093841552734375, -0.001888275146484375, -6.29425048828125e-05, -0.000110626220703125, -7.62939453125e-06, -0.2995600700378418, -5.841255187988281e-06, -0.009974479675292969, -0.027670860290527344, -0.001918792724609375, -1.9073486328125e-06, -0.00020348724501673132, -0.002062201499938965, 0.0, -0.0001583099365234375, -3.814697265625e-06, -3.814697265625e-06, -0.0170670747756958, -1.9431114196777344e-05, -0.052155494689941406, -0.0025768280029296875, -0.013222098350524902, -0.001051187515258789, -1.9073486328125e-06, -0.0027103424072265625, -0.010146141052246094, -0.03226757049560547, -6.67572021484375e-05, -1.33514404296875e-05, -0.00122833251953125, -1.9073486328125e-06, -0.30305755138397217, -1.1444091796875e-05, -0.0025234222412109375, -0.000125885009765625, -8.58306884765625e-05, -1.71661376953125e-05, -0.0017795562744140625, 0.0, -0.06775379180908203, -7.62939453125e-06, -0.0003598928451538086, -0.0005952119827270508, -0.19220829010009766, -0.011757850646972656, -0.0018558502197265625, -0.6642494201660156, -0.07229137420654297, -4.57763671875e-05, -5.7220458984375e-06, -0.0009098052978515625, -3.814697265625e-06, -1.3600132465362549, -1.9073486328125e-06, -0.00046634674072265625, -0.0002040863037109375, -8.392333984375e-05, -1.9073486328125e-06, -0.0029773712158203125, 0.0, -0.11073589324951172, -1.1444091796875e-05, -0.0003521442413330078, -0.0003204345703125, -0.6865119934082031, -0.04895782470703125, -0.0017461776733398438, -0.6110677719116211, -0.15680885314941406, -4.57763671875e-05, -9.5367431640625e-06, -0.008508682250976562, -9.5367431640625e-06, -1.6216646432876587, -3.576278118089249e-07, -0.0019598007202148438, -9.5367431640625e-05, -8.7738037109375e-05, 0.0, -0.0013446807861328125, 0.0, -0.2654242515563965, -5.7220458984375e-06, -0.0004208087921142578, -0.000133514404296875, -0.7052755355834961, -0.24437999725341797, -0.18087482452392578, -0.0004405975341796875, -3.814697265625e-06, -0.0011577606201171875, 0.0, -0.1895848512649536, -1.9073486328125e-06, -0.05367541313171387, -1.4305104514278355e-06, -0.0005321502685546875, -0.3583984375, -3.814697265625e-06, -0.05429649353027344, 0.0, -0.0068817138671875, -0.0647469162940979, 0.0, -0.3072322607040405, 0.0], "score": -9.64150262241236, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"targets": [{"id": "query", "_type": "Name"}], "value": {"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"value": {"hole0": "IsMinion", "hole2": [{"_type": "Template36_expr_seq"}], "_type": "Template24"}, "arg": "conditions", "_type": "keyword"}], "_type": "Call"}, "_type": "Assign"}, {"targets": [{"id": "new_minon", "_type": "Name"}], "value": {"func": {"attr": "<UNK>", "value": {"id": "query", "_type": "Name"}, "_type": "Attribute"}, "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"_type": "Template38"}], "_type": "Call"}, "_type": "Assign"}, {"targets": [{"id": "new_minon", "_type": "Name"}], "value": {"func": {"attr": "<UNK>", "value": {"id": "query", "_type": "Name"}, "_type": "Attribute"}, "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"_type": "Template38"}], "_type": "Call"}, "_type": "Assign"}, {"targets": [{"id": "hammer", "_type": "Name"}], "value": {"func": {"attr": "<UNK>", "value": {"id": "query", "_type": "Name"}, "_type": "Attribute"}, "args": [{"func": {"attr": "random_choice", "value": {"id": "game", "_type": "Name"}, "_type": "Attribute"}, "args": [{"attr": "minions", "value": {"attr": "opponent", "value": {"_type": "Template38"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call"}], "_type": "Call"}, "_type": "Assign"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "Preparation", "hole2": [{"hole1": 0, "hole0": "Preparation", "hole2": "ROGUE", "hole3": "EPIC", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "query", "<EOS>", 20, 110, 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Minion", "<EOS>", 205, 71, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 73, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 73, 82, 103, 205, 53, 133, "hammer", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 205, 48, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>"]}]}
{"gold_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion):\n        minion.set_health_to(1)\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "beams": [{"inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len([minion for minion in self.player.minions if not minion.<UNK>]\n            ) == 0:\n            target = self.player.game(self.player.minions)\n            target.increase_health(3)\n            target.increase_health(2)\n            super().reveal()\n\n    def activate(self, player):\n        player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('minion_died', self._reveal)\n", "score_history": [-5.7220458984375e-06, -0.22899246215820312, -2.479533213772811e-05, -7.677004032302648e-05, -0.0005779245402663946, -0.00010931118595181033, -6.186962127685547e-05, -2.288818359375e-05, -0.0009136199951171875, -3.0517578125e-05, -2.0623207092285156e-05, -1.52587890625e-05, 3.576278118089249e-07, -2.622604142743512e-06, -0.0046225786209106445, 0.0, -4.410743713378906e-05, 0.0, -0.0022602081298828125, 0.0, -0.06308233737945557, -1.9073486328125e-06, -0.0004215240478515625, -1.33514404296875e-05, -3.814697265625e-06, -0.17036819458007812, 0.0, -1.33514404296875e-05, -0.0005321502685546875, -0.000324249267578125, -0.014215469360351562, -5.53131103515625e-05, -0.15420055389404297, -4.76837158203125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.004770870320498943, 0.0, -0.00064849853515625, -0.1880321502685547, -0.01685619354248047, -0.0032520294189453125, 0.0, -0.04748346656560898, -1.1920928244535389e-07, -0.016739845275878906, -0.0013093948364257812, -1.52587890625e-05, 0.0, -0.08390796929597855, -4.768370445162873e-07, -0.013797760009765625, -1.52587890625e-05, -0.000186920166015625, 0.0, -0.0010700225830078125, -1.9073486328125e-06, -0.13083553314208984, -9.5367431640625e-06, -0.0002371072769165039, 0.0, -0.0012453794479370117, 0.0, -0.004329681396484375, -0.006129264831542969, -0.0016689300537109375, -0.0035333633422851562, -0.0003204345703125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -0.0007462501525878906, 0.0, -0.005118608009070158, -4.768370445162873e-07, -3.814697265625e-06, -0.8217868804931641, -1.52587890625e-05, -0.1036224365234375, -7.62939453125e-06, -0.001942353555932641, -1.1444091796875e-05, -0.4681415557861328, -0.012575149536132812, -2.09808349609375e-05, -1.9073486328125e-06, -6.866455078125e-05, -5.7220458984375e-06, -0.18617308139801025, 0.0, -0.00016021728515625, -0.0005931854248046875, -3.0517578125e-05, 0.0, -0.3967323303222656, 0.0, -0.16139602661132812, 0.0, -0.005312681198120117, -0.00033926963806152344, -0.013453483581542969, -4.0531158447265625e-06, -0.011199473403394222, 0.0, -0.05254936218261719, -0.08823204040527344, 0.0, -0.0036020278930664062, 0.0, -0.0003509521484375, 0.0, -0.0005341768264770508, -5.7220458984375e-06, -0.00022220601385924965, -1.9073486328125e-06, -0.004950761329382658, 0.0, -0.00220489501953125, -0.00689697265625, -0.0001354217529296875, 0.0, -0.005907893180847168, 0.0, -0.869929313659668, 0.0, -5.7220458984375e-06, -0.3889045715332031, -7.2479248046875e-05, -0.33089160919189453, -0.012095451354980469, -5.340576171875e-05, -0.005394935607910156, 0.0, -0.08352184295654297, 0.0, -0.00281524658203125, -0.03849983215332031, -0.0001316070556640625, -0.000400543212890625, -0.0001735687255859375, -3.4332275390625e-05, -0.0002535328676458448, -9.536738616588991e-07, -0.0012875795364379883, 0.0, -0.004246711730957031, -0.0001087188720703125, -3.814697265625e-05, -0.0009698867797851562, -1.9073486328125e-06, -0.0005359649658203125, -0.000850677490234375, -2.288818359375e-05, -0.000263214111328125, -0.1401510238647461, -0.007056474685668945, -5.161762237548828e-05, -2.47955322265625e-05, -0.000331878662109375, -3.24249267578125e-05, -0.2107832282781601, -7.62939453125e-06, -0.000316619873046875, -0.0002079010009765625, -0.001064300537109375, 0.0, -0.0002079010009765625, 0.0, -0.0007295608520507812, 0.0, -7.62939453125e-05, -1.9073486328125e-05, -0.02242457866668701, 0.0, -0.0003337860107421875, -2.09808349609375e-05, -9.1552734375e-05, -0.0001964569091796875, -0.04938030242919922, -0.0012882946757599711, -0.000148773193359375, -1.52587890625e-05, -0.00067138671875, -1.9073486328125e-06, -0.3343469500541687, -7.62939453125e-06, -0.000270843505859375, -0.0003833770751953125, -0.0021572113037109375, 0.0, -0.00010395050048828125, 0.0, -0.00048542022705078125, 0.0], "score": -6.037451975596063, "model_output": {"hole3": "_reveal", "hole4": "<UNK>", "hole7": [{"body": [{"hole1": "bind", "hole0": {"_type": "Template38"}, "hole2": [{"s": "minion_died", "_type": "Str"}, {"attr": "_reveal", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}], "_type": "Template23"}], "args": {"_type": "Template9"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole1": "unbind", "hole0": {"_type": "Template38"}, "hole2": [{"s": "minion_died", "_type": "Str"}, {"attr": "_reveal", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}], "_type": "Template23"}], "args": {"_type": "Template9"}, "name": "deactivate", "_type": "FunctionDef"}], "hole6": [{"body": [{"targets": [{"id": "target", "_type": "Name"}], "value": {"func": {"attr": "game", "value": {"attr": "player", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "args": [{"attr": "minions", "value": {"attr": "player", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}, "hole2": [{"_type": "Template35"}], "_type": "Template23"}, {"hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}, "hole2": [{"_type": "Template33"}], "_type": "Template23"}, {"hole1": "reveal", "hole0": {"hole0": "super", "_type": "Template25"}, "_type": "Template23"}], "test": {"ops": [{"_type": "Eq"}], "left": {"func": {"id": "len", "_type": "Name"}, "args": [{"generators": [{"target": {"id": "minion", "_type": "Name"}, "ifs": [{"op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "value": {"id": "minion", "_type": "Name"}, "_type": "Attribute"}, "_type": "UnaryOp"}], "iter": {"attr": "minions", "value": {"attr": "player", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "comprehension"}], "elt": {"id": "minion", "_type": "Name"}, "_type": "ListComp"}], "_type": "Call"}, "comparators": [{"n": 0, "_type": "Num"}], "_type": "Compare"}, "_type": "If"}], "hole5": [{"arg": "attacker", "_type": "arg"}], "hole1": "SecretCard", "hole0": "Repentance", "hole2": [{"hole1": 1, "hole0": "Repentance", "hole2": "PALADIN", "hole3": "COMMON", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 199, 1, 192, "attacker", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 52, 130, 25, 133, "minion", "<EOS>", 203, 194, 25, 133, "minion", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 205, 74, 190, 99, 17, 104, 25, 133, "minion", "<EOS>", "<UNK>", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 220, 82, 103, 205, 53, 133, "target", "<EOS>", 20, 111, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "game", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 70, 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 42, "bind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 42, "unbind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}]}
{"gold_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, False)\n\n    def create_minion(self, p):\n        return Minion(0, 1)\n", "beams": [{"inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK><UNK>Damage(), PlayerSelector())])\n", "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -0.057812515646219254, -3.933906555175781e-06, -0.00026345252990722656, 0.0, -0.0449906550347805, -1.1920928244535389e-07, -1.9073486328125e-06, -0.019388198852539062, -0.0001392364501953125, -1.2755311217915732e-05, -0.00012123063061153516, -9.131081606028602e-05, -5.364416665543104e-06, -0.0028023505583405495, -1.9073486328125e-06, -0.008287429809570312, -0.00063323974609375, -0.011154300533235073, -4.220007031108253e-05, -0.0001010894775390625, -0.020084381103515625, -0.0003070831298828125, -0.07946118712425232, -0.176251620054245, -0.8151758909225464, -2.2888067178428173e-05, -0.018085479736328125, -5.7220458984375e-05, -0.11987364292144775, -0.0001285076141357422, -3.4928321838378906e-05, -1.71661376953125e-05, -0.0477447509765625], "score": -1.505397847777651, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 1, "hole0": 0, "hole2": "auras", "hole3": {"hole1": [{"hole0": "<UNK><UNK>Damage", "_type": "Template25"}, {"hole0": "PlayerSelector", "_type": "Template25"}], "hole0": "Aura", "hole2": [{"_type": "Template36_expr_seq"}], "_type": "Template24"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole2": [{"hole1": 0, "hole0": "Shadow of Nothing", "hole2": "PRIEST", "hole3": "EPIC", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "<UNK>", "<UNK>", "Damage", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}]}
{"gold_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.health > player.effective_spell_damage(2\n            ) or self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(2), self)\n            player.draw()\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n", "beams": [{"inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() is Null and minion.card.is_minion())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -0.11900997161865234, -6.67572021484375e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.29425048828125e-05, 0.0, -0.0007058382034301758, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.07793235778808594, 0.0, -0.0024003982543945312, -0.0016307830810546875, -0.0002994537353515625, -2.6702880859375e-05, -0.044370055198669434, 0.0, -0.001125335693359375, -0.0012493133544921875, -0.0003032684326171875, -0.0018520355224609375, -0.17973804473876953, -6.866455078125e-05, -0.11762809753417969, -0.0052356719970703125, -0.000171661376953125, -0.0001735687255859375, -0.006099700927734375, -0.000152587890625, -0.027123093605041504, 0.0, -0.028065919876098633, -1.811980109778233e-05, -1.33514404296875e-05, -0.2992267608642578, -0.000244140625, -0.25116634368896484, -0.0009784698486328125, -0.0008535385131835938, -1.9073486328125e-06, -0.9797086715698242, -0.024244308471679688, -1.33514404296875e-05, -1.9073486328125e-06, -0.64202880859375, -5.7220458984375e-06, -0.002223968505859375, -4.9591064453125e-05, -1.324862003326416, -3.814697265625e-06, -0.3032817840576172, 0.0, -0.7527239322662354, -3.814697265625e-06, -0.00016057491302490234, -5.7220458984375e-06, -2.3603417503181845e-05, 0.0, -8.0108642578125e-05, -5.7220458984375e-06, 0.0, -4.029273986816406e-05, -8.344646857949556e-07, -0.0802755355834961, -0.0001163482666015625, -0.0011234283447265625, -5.91278076171875e-05, -1.9073486328125e-05, 0.0, -6.4849853515625e-05, 0.0, -1.2636180144909304e-05, 0.0, -0.00013172610488254577, 0.0, -0.39161765575408936, 0.0, -5.14984130859375e-05, -0.5175857543945312, -9.1552734375e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001583099365234375, -0.0011491767363622785, -2.0265579223632812e-06, -2.288818359375e-05, -0.000713348388671875, -7.62939453125e-06, -1.52587890625e-05, -0.001117110252380371, 0.0, -0.21581459045410156, -0.29461193084716797, -0.14565181732177734, -0.08385312557220459, -6.079673767089844e-06], "score": -6.949655770047798, "model_output": {"hole3": "use", "hole4": "player", "hole6": [{"_type": "Template10"}, {"hole1": "damage", "hole0": {"attr": "target", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "hole2": [{"func": {"attr": "effective_spell_damage", "value": {"_type": "Template38"}, "_type": "Attribute"}, "args": [{"_type": "Template33"}], "_type": "Call"}, {"id": "self", "_type": "Name"}], "_type": "Template23"}, {"hole1": "draw", "hole0": {"_type": "Template38"}, "_type": "Template23"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "hole0": "Slam", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}, {"value": {"body": {"op": {"_type": "And"}, "values": [{"ops": [{"_type": "Is"}], "left": {"func": {"attr": "calculate_attack", "value": {"id": "target", "_type": "Name"}, "_type": "Attribute"}, "_type": "Call"}, "comparators": [{"value": "Null", "_type": "NameConstant"}], "_type": "Compare"}, {"func": {"attr": "is_minion", "value": {"attr": "card", "value": {"id": "minion", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Call"}], "_type": "BoolOp"}, "args": {"hole0": "target", "_type": "Template13"}, "_type": "Lambda"}, "arg": "filter_func", "_type": "keyword"}], "args": [{"s": "Slam", "_type": "Str"}, {"_type": "Template33"}, {"attr": "WARRIOR", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"_type": "Template26"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "target", "<EOS>", 19, 107, 6, 206, 49, 114, 20, 109, 17, 104, 25, 133, "target", "<EOS>", "calculate_attack", "<EOS>", 202, 12, 205, 54, 135, "Null", "<EOS>", 48, 109, 17, 104, 17, 104, 25, 133, "minion", "<EOS>", "card", "<EOS>", "is_minion", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}]}
{"gold_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -0.025571823120117188, -1.1444091796875e-05, -3.24249267578125e-05, -0.00015401840209960938, -2.384185791015625e-06, -2.288818359375e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.0108642578125e-05, -0.000400543212890625, -7.43865966796875e-05, -0.6967530846595764, -0.000658177537843585, -0.0003452301025390625, -0.0001354217529296875, -2.288818359375e-05, -5.7220458984375e-06, -0.00019466876983642578, -0.00014495849609375, 0.0, -0.0030307769775390625, -1.1444091796875e-05, -1.9073486328125e-06, -0.01977360248565674, 0.0, -8.20159912109375e-05, -1.9073486328125e-06, -0.00011658668518066406, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, 0.0, -0.000453948974609375, -1.9073486328125e-06, -0.0001678466796875, -5.7220458984375e-06, -0.00039899349212646484, -7.474422454833984e-05, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -7.450580596923828e-05, 0.0, -0.0002384185791015625, -0.0002040863037109375, -4.76837158203125e-05, -8.821421943139285e-06, -1.9073468138230965e-06, -0.0010753836249932647, -1.1920922133867862e-06], "score": -0.7552944491280869, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 3, "hole0": 4, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "Spellbreaker", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"hole0": "Silence", "_type": "Template25"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "BothPlayer", "_type": "Template25"}, "arg": "players", "_type": "keyword"}, {"value": {"hole0": "UserPicker", "_type": "Template25"}, "arg": "picker", "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "args": [{"s": "Spellbreaker", "_type": "Str"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Silence", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())),\n            MinionSelector(Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -0.21466197073459625, -0.0002921671839430928, -0.000125885009765625, -0.0002193450927734375, -0.0003108978271484375, -0.2703714370727539, -0.05973529815673828, -0.09818553924560547, -0.0017141103744506836, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -0.0027014485094696283, -0.12475088983774185, -1.9073486328125e-06, -1.33514404296875e-05, -0.26073551177978516, -0.00029754638671875, -0.0012760162353515625, -0.00030541419982910156, -4.172325134277344e-06, -1.71661376953125e-05, 0.0, -0.004971255548298359, -0.0035040206275880337, -1.1920928244535389e-07, -0.00199127197265625, -0.19174480438232422, -0.010478973388671875, -0.7363557815551758, -0.15817737579345703, -1.52587890625e-05, -5.53131103515625e-05, -0.0004607435839716345, -7.987022399902344e-06, -2.0265579223632812e-06, -0.0009975433349609375, -3.814697265625e-06, -3.814697265625e-06, -0.22312843799591064, -4.053113570989808e-06, -2.6702880859375e-05, -7.62939453125e-06, -0.0016962289810180664, -0.0005650520324707031, -1.6689295080141164e-05, -2.0265579223632812e-06, 0.0, -3.6954863844584906e-06, 0.0, -1.52587890625e-05, -7.43865966796875e-05, -3.814697265625e-06, -8.344646857949556e-07, -3.814689989667386e-06, -7.641315460205078e-05, -1.1920928244535389e-07], "score": -2.4670484764870793, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 3, "hole0": 2, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"func": {"id": "Give", "_type": "Name"}, "args": [{"elts": [{"hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template33"}], "_type": "Template19"}, {"hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template34"}], "_type": "Template19"}, {"_type": "Template36_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "UserPicker", "_type": "Template25"}, "arg": "picker", "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "args": [{"s": "Sunfury Protector", "_type": "Str"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "beams": [{"inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(3)), Buff(ChangeHealth(1))]), MinionSelector(\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -0.07171916961669922, -0.000942230224609375, -3.62396240234375e-05, -3.814697265625e-06, -1.1620436906814575, -0.003307526931166649, -0.010038375854492188, -0.0010852813720703125, -7.62939453125e-05, -0.001041412353515625, -0.000713348388671875, -0.1972332000732422, -0.0003942250623367727, -7.987022399902344e-06, -9.5367431640625e-06, 0.0, -0.00023387875990010798, -0.031257133930921555, -3.814697265625e-06, -0.0569000244140625, -0.8069686889648438, -0.005143165588378906, -0.0035905838012695312, -0.011333703994750977, -7.62939453125e-06, -0.0001220703125, 0.0, -0.001711726188659668, -0.005501482170075178, 0.0, -0.00753021240234375, -0.0074520111083984375, -0.03344917297363281, -0.1903858184814453, -0.0021686553955078125, -1.33514404296875e-05, -1.9073486328125e-06, -0.0001728534698486328, -2.86102294921875e-05, -3.933906555175781e-06, -0.00212860107421875, -1.9073486328125e-06, 0.0, -0.011751890182495117, -1.9073486328125e-06, -0.0001010894775390625, -5.7220458984375e-06, -0.010824203491210938, -0.00014674663543701172, -3.576278118089249e-07, -9.655952453613281e-06, 0.0, -2.741813204920618e-06, 0.0, -0.000316619873046875, -9.34600830078125e-05, -1.9073486328125e-06, -4.7683624870842323e-07, -2.1457672119140625e-06, -3.5762791412707884e-06, 0.0], "score": -2.667417857198245, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 3, "hole0": 3, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"func": {"id": "Give", "_type": "Name"}, "args": [{"elts": [{"hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template35"}], "_type": "Template19"}, {"hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template34"}], "_type": "Template19"}, {"_type": "Template36_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "UserPicker", "_type": "Template25"}, "arg": "picker", "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "args": [{"s": "Tinkmaster Overspark", "_type": "Str"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and attacker.is_minion(\n            ) and not attacker.removed:\n            attacker.die(self)\n            attacker.game.check_delayed()\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "beams": [{"inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n    return super().can_use(player, game) and len(self.player.minions) < 7\n", "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -0.3344535827636719, -0.5342817306518555, -0.1365814208984375, -0.0027923583984375, -0.006041526794433594, -5.7220458984375e-06, -0.0004367828369140625, -0.00022125244140625, -0.4227790832519531, -0.000408172607421875, -5.7220458984375e-06, -5.7220458984375e-06, -0.0007894032169133425, -1.5497195136049413e-06, -0.0005970001220703125, 0.0, -7.62939453125e-05, 0.0, -0.05777943134307861, 0.0, -0.01574420928955078, -0.0001163482666015625, -0.17210960388183594, -1.1444091796875e-05, 0.0, 0.0, -0.0014336109161376953, -1.9073486328125e-06, -6.103515625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -0.060179710388183594, -5.7220458984375e-06, -0.01377105712890625, 0.0, -0.6746578216552734, -2.86102294921875e-05, -0.0002986192121170461, 0.0, -0.0008064508438110352, 0.0, -3.814697265625e-06, -0.026719093322753906, -9.5367431640625e-06, -0.010571479797363281, -7.05718994140625e-05, -0.0007709263591095805, -3.933906555175781e-06], "score": -2.5066415422289765, "model_output": {"hole3": "use", "hole4": "player", "hole7": [{"value": {"op": {"_type": "And"}, "values": [{"hole1": "can_use", "hole0": {"hole0": "super", "_type": "Template25"}, "hole2": "player", "hole3": "game", "_type": "Template17"}, {"ops": [{"_type": "Lt"}], "left": {"func": {"id": "len", "_type": "Name"}, "args": [{"attr": "minions", "value": {"attr": "player", "value": {"id": "self", "_type": "Name"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call"}, "comparators": [{"n": 7, "_type": "Num"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "hole6": [{"_type": "Template10"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole2": [{"hole1": 3, "hole0": "Vaporize", "hole2": "MAGE", "hole3": "RARE", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 92, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}]}
{"gold_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "beams": [{"inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -0.047469496726989746, -3.6954863844584906e-06, -0.0007544754771515727, -1.9073486328125e-06, -7.581709360238165e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00047409525723196566, 0.0, -3.814697265625e-06, -0.00055694580078125, -9.5367431640625e-06, -3.3378591979271732e-06, 0.0, -0.00012981049076188356, 0.0, -0.04328453540802002, 0.0, -0.000118255615234375, -1.9073486328125e-05, -0.0003209114074707031, -3.576278118089249e-07], "score": -0.09351377768069824, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 1, "hole0": 2, "hole2": "stealth", "hole3": {"value": true, "_type": "NameConstant"}, "_type": "Template14"}], "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole2": [{"hole1": 2, "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole3": "COMMON", "_type": "Template6"}], "_type": "Template0"}, "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 26, 134, "True", "<EOS>"]}]}
{"gold_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "beams": [{"inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (3)), Buff(ChangeHealth(3))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -0.0006504058837890625, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -9.536738616588991e-07, -3.7550886190729216e-05, -1.33514404296875e-05, -2.288818359375e-05, -0.0004558563232421875, -0.0001850128173828125, -0.00028027407824993134, -0.0005128383636474609, -0.0002689361572265625, -0.0016040802001953125, -0.0010967254638671875, -0.0012569427490234375, -0.000392913818359375, -0.0002690553665161133, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001468658447265625, -3.814697265625e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0004024505615234375, -0.05108356475830078, -0.000499725341796875, -0.0002117156982421875, -3.814697265625e-06, -0.0026975139044225216, -9.679586946731433e-05, -3.814697265625e-06, -0.005953788757324219, -2.288818359375e-05, -0.007305145263671875, -0.003849029541015625, -0.000370025634765625, -0.0034735198132693768, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -0.002386331558227539, -0.009035279974341393, -0.00010144710540771484, -3.814697265625e-06, -0.3191089630126953, -0.5663471221923828, -0.013041496276855469, -0.0015642642974853516, 0.0, -1.52587890625e-05, 0.0, -0.001430511474609375, -0.019644513726234436, -1.1920928244535389e-07, -7.62939453125e-06, -0.34591102600097656, -6.866455078125e-05, -0.0016803741455078125, -1.9073486328125e-06, -0.002002404537051916, -2.133846101060044e-05, 0.0, -0.038353919982910156, -0.00055694580078125, -0.0002536773681640625, 0.0, -0.0008602142333984375, -0.0017528533935546875, -1.9073486328125e-06, -3.62396240234375e-05, -8.58306884765625e-05, -0.30498409271240234, -0.010541677474975586, -0.0006405115127563477, -0.000232696533203125, -1.9073486328125e-06, -0.004733443260192871, -0.001842498779296875, 0.0, -0.000423431396484375, -1.9073486328125e-06, 0.0, -0.018416881561279297, 0.0, -0.0007686614990234375, -0.0001239776611328125, -9.5367431640625e-05, -1.71661376953125e-05, -0.002239227294921875, -0.001373291015625, 0.0, -0.001300811767578125, -3.0517578125e-05, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, -0.005774497985839844, -2.0265579223632812e-06, -0.01803874969482422, -3.814697265625e-06, -0.0007686614990234375, -1.9073486328125e-06, 0.0, -0.0029401779174804688, 0.0, -0.004508018493652344, -0.00083160400390625, -0.0022757502738386393, -2.86102294921875e-05, -1.9073486328125e-06, 0.0, -6.318082796497038e-06, 0.0, -0.0002460479736328125, -0.0012073516845703125, -1.9073486328125e-05, -9.894339200400282e-06, -9.417532055522315e-06, -0.00023877620697021484, -1.6689286894688848e-06], "score": -1.793437897384095, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 4, "hole0": 5, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"value": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"func": {"id": "Give", "_type": "Name"}, "args": [{"elts": [{"hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template35"}], "_type": "Template19"}, {"hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template35"}], "_type": "Template19"}, {"_type": "Template36_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template25"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"value": {"n": 0, "_type": "Num"}, "arg": "value", "_type": "keyword"}], "args": [{"hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count", "hole3": [{"value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"attr": "DRAGON", "value": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Attribute"}], "_type": "Call"}, "arg": "condition", "_type": "keyword"}], "_type": "Template19"}], "_type": "Call"}], "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "args": [{"s": "Blackwing Corruptor", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"_type": "Template27"}, {"_type": "Template26"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blackwing", " ", "Corruptor", "<EOS>", 55, 138, "5", "<EOS>", 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Attribute('health',\n            HeroSelector(EnemyPlayer())), value=15))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "beams": [{"inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Kill(), MinionSelector(Is<UNK>(CARD_RARITY.LEGENDARY),\n            BothPlayer()), Not(GreaterThan(Count(CardSelector(condition=\n            IsType(MINION_TYPE.DRAGON))), value=0))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.7593928575515747, -8.320462075062096e-05, -1.33514404296875e-05, -3.814697265625e-06, -8.964537119027227e-05, -1.4305104514278355e-06, -0.00016021728515625, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -1.728534698486328e-05, -7.748603820800781e-06, -0.05452537536621094, -0.1473550796508789, -1.1444091796875e-05, -0.7349511981010437, -0.0003171662101522088, -0.00202178955078125, -0.44133663177490234, -1.1444091796875e-05, 0.0, -0.00028073767316527665, -6.127357482910156e-05, 0.0, -0.5048704147338867, -0.4178953170776367, -0.0004749298095703125, -0.0001773834228515625, 0.0, -0.06563162058591843, -0.5815876722335815, -5.245195097813848e-06, -5.91278076171875e-05, -0.04707050323486328, -1.9073486328125e-06, -0.08471965789794922, -0.09060859680175781, -1.9073486328125e-06, -0.00066375732421875, 0.0, -0.0031987428665161133, -5.7220458984375e-06, -1.9073486328125e-06, -0.9748640060424805, -0.4136981964111328, -0.5436950922012329, -6.210803985595703e-05, -1.33514404296875e-05, 0.0, -0.024080395698547363, -0.0015643835067749023, 0.0, -1.9073486328125e-05, -0.001903533935546875, -0.13283443450927734, -0.0014793835580348969, -1.6808447981020436e-05, -2.288818359375e-05, 0.0, -0.0006716251373291016, -0.00013172626495361328, -1.1920928244535389e-07, -0.000274658203125, 0.0, -1.9073486328125e-06, -0.6024086475372314, -1.1920928244535389e-07, -0.001956939697265625, -1.9073486328125e-05, -5.7220458984375e-06, -2.09808349609375e-05, -0.00048828125, -0.0042819976806640625, 0.0, -0.0040607452392578125, -1.9073486328125e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.000370025634765625, 0.0, -0.01920032501220703, 0.0, -0.07170295715332031, 0.0, 0.0, -0.09131622314453125, 0.0, -0.00716400146484375, -5.53131103515625e-05, -0.0024957885034382343, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -3.099440846199286e-06, 0.0, -7.62939453125e-05, -6.67572021484375e-05, -9.5367431640625e-06, -4.768367034557741e-07, -3.099440846199286e-06, -0.0003508997615426779, -7.987013304955326e-06], "score": -6.854013701998483, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 6, "hole0": 6, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "DrakonidCrusher", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"hole0": "PIRATE", "_type": "Template22"}, {"value": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"hole0": "Kill", "_type": "Template25"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "args": [{"func": {"id": "Is<UNK>", "_type": "Name"}, "args": [{"attr": "LEGENDARY", "value": {"_type": "Template30"}, "_type": "Attribute"}], "_type": "Call"}, {"hole0": "BothPlayer", "_type": "Template25"}], "_type": "Call"}, {"hole1": {"id": "GreaterThan", "_type": "Name"}, "hole0": "Not", "hole2": [{"hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count", "hole3": [{"value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"attr": "DRAGON", "value": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Attribute"}], "_type": "Call"}, "arg": "condition", "_type": "keyword"}], "_type": "Template19"}], "hole3": [{"value": {"n": 0, "_type": "Num"}, "arg": "value", "_type": "keyword"}], "_type": "Template19"}], "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "args": [{"s": "Drakonid Crusher", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"_type": "Template27"}, {"_type": "Template26"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "PIRATE", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 48, 111, 25, 133, "Is", "<UNK>", "<EOS>", 205, 45, 104, 35, "LEGENDARY", "<EOS>", 63, 171, "Both", "Player", "<EOS>", 59, 158, "Not", "<EOS>", 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}]}
{"gold_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -0.008287429809570312, -1.9073486328125e-06, 0.0, -1.3351351299206726e-05, 0.0, -0.00018310546875, -0.001209259033203125, -1.71661376953125e-05, -7.62939453125e-06, -3.814697265625e-06, -0.004151582717895508, -3.933906555175781e-06, -0.00018310546875, -1.33514404296875e-05, -1.71661376953125e-05, -3.814697265625e-06, -7.82012939453125e-05, -0.0001354217529296875, -3.24249267578125e-05, -0.002069711685180664, 0.0, -0.00045418739318847656, 0.0, -8.296966552734375e-05, 0.0, -0.0009746551513671875, -0.005558013916015625, -0.0004634857177734375, -4.339160295785405e-05, -2.1457672119140625e-06, -2.0026982383569703e-05, 0.0], "score": -0.027797757714779436, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 1, "hole0": 1, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "Imp", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"hole0": "DEMON", "_type": "Template22"}], "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template34"}, {"_type": "Template27"}, {"attr": "RARE", "value": {"_type": "Template30"}, "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Imp", "<EOS>", 69, 65, 45, 104, 35, "RARE", "<EOS>", 54, 134, "False", "<EOS>", 212, 75, 164, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "1", "<EOS>", "1", "<EOS>"]}]}
{"gold_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "beams": [{"inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(Health())]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -0.6043316125869751, -2.47955322265625e-05, -8.392333984375e-05, -0.011004447937011719, -0.0019779205322265625, -5.14984130859375e-05, -0.7111239433288574, -2.7418097943154862e-06, -0.002376556396484375, -1.9073486328125e-06, -7.927417755126953e-05, -1.9073468138230965e-06, -6.67572021484375e-05, -0.0005645751953125, -3.814697265625e-05, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -0.0009479522705078125, -0.010870933532714844, -0.000522613525390625, -0.000362396240234375, -1.9073486328125e-06, -0.0005137900006957352, -0.00013244108413346112, -1.1444091796875e-05, -0.0014247894287109375, -4.1961669921875e-05, -0.0006008148193359375, -0.0003948211669921875, -0.0004520416259765625, -0.004828333854675293, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -5.483626591740176e-05, -0.024818606674671173, -1.52587890625e-05, -7.62939453125e-06, -0.07109737396240234, -0.0002422332763671875, -0.1701068878173828, -0.004320502281188965, -2.1457672119140625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.4436389207839966, -1.6570011212024838e-05, -0.005634307861328125, -0.000209808349609375, -3.814697265625e-06, -0.0005066725425422192, -5.841255187988281e-06, -1.9073486328125e-06, -0.1253795623779297, -0.00086212158203125, -0.000614166259765625, 0.0, -0.000324249267578125, -0.002019047737121582, -1.9073486328125e-06, -7.62939453125e-06, -4.1961669921875e-05, -0.016221046447753906, -0.0010497570037841797, -0.00011169909703312442, -4.9591064453125e-05, 0.0, -0.005821704864501953, -7.271766662597656e-05, 0.0, -0.000179290771484375, -3.814697265625e-06, -5.7220458984375e-06, -0.015634655952453613, 0.0, -0.0005664825439453125, -3.4332275390625e-05, -7.43865966796875e-05, -1.9073486328125e-06, -0.010739326477050781, -0.0002079010009765625, 0.0, -0.0002231597900390625, -9.5367431640625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.0082855224609375, -1.1444091796875e-05, -0.03630542755126953, -1.9073486328125e-06, -0.00058746337890625, -1.9073486328125e-06, -1.33514404296875e-05, -0.000499725341796875, 0.0, -0.0020294189453125, -2.288818359375e-05, -0.0001585481222718954, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -5.3882598876953125e-05, 0.0, -0.000797271728515625, -0.0001888275146484375, -2.86102294921875e-05, -0.00032277029822580516, -2.3841855067985307e-07, -3.576271865313174e-06, -1.1920928244535389e-07], "score": -2.3053456128811405, "model_output": {"hole3": "create_minion", "hole4": "player", "hole6": [{"hole1": 1, "hole0": 2, "_type": "Template16"}], "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole2": [{"value": {"func": {"_type": "Template18"}, "keywords": [{"hole0": "<UNK>", "_type": "Template22"}, {"value": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"func": {"id": "Give", "_type": "Name"}, "args": [{"elts": [{"hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff", "hole2": [{"_type": "Template34"}], "_type": "Template19"}, {"hole1": {"id": "Health", "_type": "Name"}, "hole0": "Buff", "_type": "Template19"}, {"_type": "Template36_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template25"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"value": {"n": 0, "_type": "Num"}, "arg": "value", "_type": "keyword"}], "args": [{"hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count", "hole3": [{"value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"attr": "DRAGON", "value": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Attribute"}], "_type": "Call"}, "arg": "condition", "_type": "keyword"}], "_type": "Template19"}], "_type": "Call"}], "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "args": [{"s": "Twilight Whelp", "_type": "Str"}, {"_type": "Template34"}, {"attr": "WARRIOR", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute"}, {"_type": "Template26"}], "_type": "Call"}, "_type": "Expr"}], "_type": "Template0"}, "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "Health", "<EOS>", 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}]}
