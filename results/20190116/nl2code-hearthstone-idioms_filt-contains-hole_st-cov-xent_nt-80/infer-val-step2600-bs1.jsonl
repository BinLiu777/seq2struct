{"gold_code": "class AssassinsBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "<UNK>Blade", "_type": "ClassDef", "body": [{"_type": "Template15", "hole2": "ROGUE", "hole1": 5, "hole0": "<UNK> Blade"}, {"name": "create_weapon", "_type": "FunctionDef", "body": [{"_type": "Return", "value": {"func": {"id": "Weapon", "_type": "Name"}, "args": [{"n": 3, "_type": "Num"}, {"n": 4, "_type": "Num"}], "_type": "Call"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "WeaponCard", "_type": "Name"}]}]}, "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -0.05983487919002073, "score_history": [-3.814697265625e-06, -1.1444091796875e-05, -1.1444091796875e-05, -0.000213623046875, -3.0517578125e-05, -5.72192293475382e-05, -0.00036209699464961886, -1.5974044799804688e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0035675764083862305, -5.841255187988281e-06, -0.001129150390625, -8.20159912109375e-05, -0.021508216857910156, -0.0002384185791015625, -0.001723355962894857, -3.814697265625e-05, -0.0002505577285774052, -0.0001697540283203125, -0.0014002267271280289, 0.0, -0.003566741943359375, 0.0, -0.000255584716796875, -9.5367431640625e-06, -0.0005741119384765625, -1.9073486328125e-05, -1.33514404296875e-05, -0.0002307891845703125, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.719329833984375e-05, 0.0, -0.0003795623779296875, -0.001049041748046875, -3.4332275390625e-05, -8.20159912109375e-05, -0.019834518432617188, -0.000194549560546875, -3.814697265625e-06, -0.0017141103744506836, -1.71661376953125e-05, -6.67572021484375e-05, -2.288818359375e-05, 0.0, -0.0008125932072289288, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -8.10618803370744e-06, -5.53131103515625e-05], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Blade", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 101, 184, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "3", "<EOS>", 47, 165, "4", "<EOS>"]}]}
{"gold_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "BoulderfistOgre", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole4": {"_type": "Attribute", "attr": "PIRATE", "value": {"id": "MINION_TYPE", "_type": "Name"}}, "hole2": "FREE", "hole1": 6, "_type": "Template34", "hole3": "minion_type", "hole0": "Boulderfist Ogre"}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"_type": "Template27", "hole1": 7, "hole0": 6}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.PIRATE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "score": -1.8712825160386615, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -3.62396240234375e-05, -1.9073486328125e-06, -0.0005461869877763093, -2.7060192223871127e-05, -4.768367489305092e-06, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -1.1920923270736239e-07, -4.38690185546875e-05, -1.2159347534179688e-05, -8.20159912109375e-05, -0.8435049057006836, -3.814697265625e-06, -3.3140146115329117e-05, 0.0, -5.7220458984375e-06, -6.866455078125e-05, -3.814697265625e-06, -1.71661376953125e-05, 0.0, -4.38690185546875e-05, -0.33123302459716797, -0.0037679672241210938, -1.0847986231965479e-05, -4.124641418457031e-05, -1.3589859008789062e-05, -5.7220458984375e-06, -0.03389029577374458, 0.0, -0.1410236358642578, 0.0, -0.000467657926492393, -1.9073486328125e-06, -3.62396240234375e-05, -4.00543212890625e-05, -7.62939453125e-06, 0.0, -8.7738037109375e-05, -1.71661376953125e-05, -0.5133523941040039, -1.3470649719238281e-05, -0.0006465911865234375, -1.9073486328125e-06, -0.0012711684685200453, 0.0, -0.0008882284164428711, 0.0], "choice_history": [80, 159, 295, 88, 138, "Boulderfist", "Ogre", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 112, 211, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 110, 202, "6", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.weapon.base_attack += 2\n        player.hero.change_temp_attack(2)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and player.weapon is not None\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "DeadlyPoison", "_type": "ClassDef", "body": [{"_type": "Template17", "hole2": "ROGUE", "hole1": 1, "hole0": "Deadly Poison"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"id": "player", "_type": "Name"}}, "_type": "For", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "change_temp_attack", "value": {"id": "minion", "_type": "Name"}}, "args": [{"n": 3, "_type": "Num"}], "_type": "Call"}}], "target": {"id": "minion", "_type": "Name"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "score": -1.5169463228271525, "score_history": [0.0, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -1.8596476365928538e-05, -9.298297300119884e-06, -4.887569048150908e-06, -0.0003376007080078125, 0.0, -3.814697265625e-06, -7.450579869328067e-05, -9.202954970533028e-05, -1.8715853002504446e-05, -9.1552734375e-05, -0.38590526580810547, -0.000263214111328125, -9.894321920000948e-06, -2.8491018383647315e-05, -3.933906555175781e-06, -3.814697265625e-06, -3.456998456385918e-06, 0.0, -0.007893681526184082, 0.0, -0.0695953369140625, -1.9073486328125e-06, -9.72747802734375e-05, -3.814697265625e-06, -2.09808349609375e-05, -1.33514404296875e-05, -1.9073486328125e-06, -5.841255187988281e-06, -3.814697265625e-06, 0.0, -5.006785613659304e-06, 0.0, -1.1444091796875e-05, -1.2993811651540454e-05, -5.483612312673358e-06, -0.15964794158935547, -3.4332275390625e-05, -0.00032806396484375, -7.62939453125e-06, -9.5367431640625e-06, -1.9073486328125e-05, 0.0, -8.0108642578125e-05, -2.86102294921875e-05, -5.626678466796875e-05, -5.7220458984375e-06, -0.000110626220703125, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -1.33514404296875e-05, -1.1682510375976562e-05, 0.0, -0.000152587890625, -1.1444091796875e-05, -2.3126602172851562e-05, -3.075599670410156e-05, -0.0710906982421875, -0.00038909912109375, -1.1444091796875e-05, -1.9073486328125e-06, -0.07703399658203125, -1.9073486328125e-06, -0.0001926422119140625, 0.0, -0.05506134033203125, 0.0, -0.0001964569091796875, 0.0, -0.015761852264404297, -9.5367431640625e-06, -0.000179290771484375, -0.014422416687011719, -3.0517578125e-05, -2.86102294921875e-05, -0.0007781982421875, -0.0005207061767578125, 0.0, -0.00109100341796875, -1.9073486328125e-06, -0.0025442838668823242, -7.62939453125e-06, -0.5939130783081055, 0.0, -0.00543975830078125, -0.004431724548339844, -4.9591064453125e-05, -0.048563845455646515, -3.62396240234375e-05], "choice_history": [80, 159, 295, 88, 138, "Deadly", "Poison", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "change_temp_attack", "<EOS>", 282, 47, 165, "3", "<EOS>"]}]}
{"gold_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "FireElemental", "_type": "ClassDef", "body": [{"hole4": {"n": 2, "_type": "Num"}, "hole2": "SHAMAN", "hole1": 6, "_type": "Template11", "hole3": "overload", "hole0": "Fire Elemental"}, {"hole3": {"_type": "NameConstant", "value": true}, "_type": "Template23", "hole2": "taunt", "hole1": 5, "hole0": 6}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, overload=2)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n", "score": -1.9160018511108703, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.00010406468209112063, -8.225420970120467e-06, -2.50339189733495e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, 0.0, -5.7220458984375e-06, -1.1920922133867862e-06, -7.62939453125e-06, -0.09262561798095703, -0.000118255615234375, -3.3378546504536644e-06, -1.2516963579400908e-05, -1.7642974853515625e-05, 0.0, -8.189678192138672e-05, 0.0, -7.82012939453125e-05, 0.0, -0.3875551223754883, 0.0, -0.029959678649902344, -0.0011539459228515625, -0.5682199597358704, -3.814697265625e-06, -0.00067138671875, -0.000179290771484375, -1.5020257706055418e-05, -1.025196434056852e-05, -0.00011861324310302734, -3.933906555175781e-06, -0.831405758857727, -1.1920928244535389e-07, -0.0025577545166015625, -9.5367431640625e-06, -0.001044154167175293, 0.0], "choice_history": [80, 159, 295, 88, 138, "Fire", "Elemental", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "SHAMAN", "<EOS>", "overload", "<EOS>", 21, 165, "2", "<EOS>", 109, 200, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}]}
{"gold_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "GnomishInventor", "_type": "ClassDef", "body": [{"hole4": {"_type": "Template59", "hole1": [{"func": {"id": "AuraUntil", "_type": "Name"}, "args": [{"_type": "Template77", "hole0": "Draw"}, {"_type": "Template77", "hole0": "PlayerSelector"}, {"func": {"id": "CardSelector", "_type": "Name"}, "_type": "Call", "keywords": [{"arg": "picker", "_type": "keyword", "value": {"_type": "Template77", "hole0": "UserPicker"}}]}], "_type": "Call"}], "hole0": "Draw"}, "hole2": "ALL", "hole1": 4, "_type": "Template11", "hole3": "battlecry", "hole0": "Gnomish Inventor"}, {"_type": "Template27", "hole1": 4, "hole0": 2}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(AuraUntil(Draw(),\n            PlayerSelector(), CardSelector(picker=UserPicker()))),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -5.398078738190463, "score_history": [-0.0001544952392578125, -7.2479248046875e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.00011884459672728553, -3.0040344427106902e-05, -1.9907822206732817e-05, -1.33514404296875e-05, -1.33514404296875e-05, 0.0, -4.768370445162873e-07, -7.62939453125e-06, -2.622604142743512e-06, -1.33514404296875e-05, -0.0724954605102539, -0.0001926422119140625, -1.7881377516459906e-06, -1.072883515007561e-05, -7.62939453125e-06, -1.9073486328125e-06, -8.571245416533202e-05, 0.0, -3.62396240234375e-05, 0.0, -0.0106353759765625, 0.0, -0.010896682739257812, -0.04503822326660156, -0.04940434917807579, -1.1563301086425781e-05, -5.7220458984375e-06, -0.4592428207397461, -0.004146575927734375, -4.9591064453125e-05, 0.0, -0.4014322757720947, -0.01677989959716797, -3.814697265625e-06, -0.2820930480957031, -0.737335205078125, -1.33514404296875e-05, -0.06676441431045532, -0.0002336378238396719, -0.6277627944946289, -2.47955322265625e-05, -0.10785433650016785, -0.0016760051948949695, -3.576278118089249e-07, -0.0016756057739257812, -0.6915578842163086, -1.9073486328125e-06, -1.1444091796875e-05, -0.17715775966644287, -0.6539090871810913, 0.0, -0.020444869995117188, -0.0006847381591796875, 0.0, -0.4515117406845093, 0.0, -0.0018463134765625, 0.0, -0.49816668033599854, -0.005354523658752441, 0.0, -0.0006198883056640625, -1.71661376953125e-05, -0.00040904749766923487, 0.0, -7.508846465498209e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Gnomish", "Inventor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 28, 241, "Draw", "<EOS>", 282, 40, 136, 19, 160, "Aura", "Until", "<EOS>", 284, 68, 260, "Draw", "<EOS>", 68, 260, "Player", "Selector", "<EOS>", 40, 135, 19, 160, "Card", "Selector", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "2", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "HeroicStrike", "_type": "ClassDef", "body": [{"_type": "Template17", "hole2": "WARRIOR", "hole1": 2, "hole0": "Heroic Strike"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}, {"_type": "Template62", "hole0": 2}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"id": "player", "_type": "Name"}}}, "args": [{"n": 3, "_type": "Num"}], "_type": "Call"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(3)\n", "score": -1.753601047336815, "score_history": [-5.7220458984375e-06, -3.814697265625e-06, -9.5367431640625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -7.438383181579411e-05, -1.3351374946068972e-05, -3.969590397900902e-05, -5.14984130859375e-05, 0.0, -1.9073486328125e-06, -2.9921531677246094e-05, -0.0002472400665283203, -4.4345855712890625e-05, -6.103515625e-05, -0.18541622161865234, -0.0003337860107421875, -3.755022044060752e-05, -2.8967857360839844e-05, -2.0265579223632812e-06, -3.814697265625e-06, -3.1590319849783555e-05, 0.0, -0.0027333498001098633, 0.0, -0.00531768798828125, -1.9073486328125e-06, -4.1961669921875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -9.5367431640625e-06, 0.0, -1.1563301086425781e-05, 0.0, -1.33514404296875e-05, -0.00022125244140625, -1.633167266845703e-05, -0.3344430923461914, -3.4332275390625e-05, -8.96453857421875e-05, -3.4332275390625e-05, -3.24249267578125e-05, -5.340576171875e-05, -9.5367431640625e-06, -8.392333984375e-05, -4.57763671875e-05, -2.491474151611328e-05, -1.9073486328125e-06, -9.34600830078125e-05, -1.9073486328125e-06, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0007801055908203125, -5.14984130859375e-05, -0.0001430511474609375, -0.00012040138244628906, -0.5746698379516602, -0.0068607330322265625, -0.0017413869500160217, -4.9591064453125e-05, -0.0006008148193359375, -7.62939453125e-06, -0.0001888275146484375, -4.1961669921875e-05, -2.288818359375e-05, -3.62396240234375e-05, -0.003208160400390625, 0.0, -5.7220458984375e-05, -3.814697265625e-06, -0.0023442506790161133, -1.9073486328125e-06, -0.06686210632324219, -1.5020307728264015e-05, -0.012463212013244629, -0.016402244567871094, -0.000232696533203125, -0.005797386169433594, -3.24249267578125e-05, -0.5309152603149414, -2.09808349609375e-05], "choice_history": [80, 159, 295, 88, 138, "Heroic", "Strike", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 119, 245, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "3", "<EOS>"]}]}
{"gold_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "IronbarkProtector", "_type": "ClassDef", "body": [{"_type": "Template15", "hole2": "DRUID", "hole1": 8, "hole0": "Ironbark Protector"}, {"name": "create_minion", "_type": "FunctionDef", "body": [{"_type": "Return", "value": {"func": {"id": "Minion", "_type": "Name"}, "args": [{"n": 8, "_type": "Num"}, {"n": 8, "_type": "Num"}], "_type": "Call", "keywords": [{"arg": "charge", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}, {"arg": "taunt", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, charge=True, taunt=True)\n", "score": -0.406804737030086, "score_history": [0.0, -3.814697265625e-06, -3.814697265625e-06, -4.38690185546875e-05, -3.814697265625e-06, -0.003921439405530691, -8.082078420557082e-05, -0.0011824662797152996, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -3.576278118089249e-07, -0.001476287841796875, -0.012849807739257812, -8.392333984375e-05, -8.702239938429557e-06, -2.6822082872968167e-05, -2.121925172104966e-05, -9.5367431640625e-06, -0.002370354952290654, -1.537799835205078e-05, -0.00274658203125, 0.0, -0.06390762329101562, -1.9073486328125e-06, -0.018415451049804688, -2.1457672119140625e-06, -9.5367431640625e-06, -0.0002841949462890625, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.62396240234375e-05, -0.008167266845703125, 0.0, -0.00016021728515625, -0.0006866455078125, -0.00019073486328125, -0.0011358261108398438, -8.392333984375e-05, -4.9591064453125e-05, 0.0, -5.161762237548828e-05, -3.0517578125e-05, -9.34600830078125e-05, 0.0, -1.9073486328125e-06, -0.00018571079999674112, -6.747245788574219e-05, -7.62939453125e-06, -3.814697265625e-06, -1.9073877410846762e-06, -0.0004487037658691406, -0.04099559783935547, -0.0001163482666015625, -0.0002346038818359375, -0.11478626728057861, -5.7220458984375e-06, -0.0005340576171875, -4.1961669921875e-05, -2.0265579223632812e-06, 0.0, -0.004494667053222656, -0.0001659393310546875, -0.12502062320709229, 0.0, -0.0014495849609375, -2.86102294921875e-05, -1.9431114196777344e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Ironbark", "Protector", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "DRUID", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Minion", "<EOS>", 283, 47, 165, "8", "<EOS>", 47, 165, "8", "<EOS>", 291, 79, 271, "charge", "<EOS>", 20, 161, "True", "<EOS>", 79, 271, "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}]}
{"gold_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.taunt = True\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "MarkOfTheWild", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "__init__", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "DRUID", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Attribute", "attr": "FREE", "value": {"id": "CARD_RARITY", "_type": "Name"}}], "_type": "Call", "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}}}}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}, {"_type": "Expr", "value": {"_type": "Template63", "hole0": 4}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"id": "self", "_type": "Name"}}}, "args": [{"n": 4, "_type": "Num"}], "_type": "Call"}}, {"targets": [{"_type": "Attribute", "attr": "player", "value": {"slice": {"_type": "Index", "value": {"_type": "Template79", "hole0": 1}}, "_type": "Subscript", "value": {"_type": "Attribute", "attr": "hand", "value": {"id": "player", "_type": "Name"}}}}], "_type": "Assign", "value": {"id": "player", "_type": "Name"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "change_attack", "value": {"id": "target", "_type": "Name"}}, "args": [{"n": 4, "_type": "Num"}], "_type": "Call"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n        player.hand[-1].player = player\n        target.change_attack(4)\n", "score": -5.831754197260558, "score_history": [-3.24249267578125e-05, -1.71661376953125e-05, -0.0001354217529296875, -0.0002307891845703125, -0.000244140625, -8.439661905867979e-05, -0.0006307363510131836, -0.14105910062789917, -0.00028990782448090613, -1.4662741705251392e-05, -0.0001392364501953125, -1.9073486328125e-06, -9.5367431640625e-06, -0.000499725341796875, -3.814697265625e-06, -2.861022494471399e-06, -0.000354766845703125, -0.04332542419433594, -3.4332275390625e-05, -4.4465043174568564e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -6.67572021484375e-05, 0.0, -0.0001506805419921875, -7.62939453125e-06, -0.0011129379272460938, -0.1680135726928711, -0.0011653900146484375, -0.000152587890625, 0.0, -0.0001239776611328125, -0.0006580352783203125, -1.1205658665858209e-05, 0.0, -4.38690185546875e-05, 0.0, -0.0002346038818359375, -2.6702880859375e-05, -1.52587890625e-05, -0.0025429551023989916, -4.017353057861328e-05, -0.0007841202314011753, -1.1444091796875e-05, -0.035290710628032684, -0.0003871917724609375, -0.01240679994225502, -0.001239776611328125, -5.53131103515625e-05, -1.71661376953125e-05, -0.03856940194964409, -9.5367431640625e-06, -7.62939453125e-06, -1.9073486328125e-06, -3.62396240234375e-05, -9.5367431640625e-06, -0.0003681182861328125, -1.1920928244535389e-07, -0.00171661376953125, 0.0, -2.288818359375e-05, 0.0, -1.1444091796875e-05, -0.0006008148193359375, -0.0001678466796875, -1.1920928244535389e-07, -0.021872520446777344, 0.0, -3.814697265625e-05, -0.0061397552490234375, -1.33514404296875e-05, -0.0029565095901489258, 0.0, -9.1552734375e-05, -3.814697265625e-06, -3.814697265625e-05, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-05, -0.001314401626586914, -1.9073486328125e-06, -1.1444091796875e-05, -1.1920928244535389e-07, -0.23882710933685303, -3.0994415283203125e-05, -0.6005659103393555, -0.0001010894775390625, -2.872943878173828e-05, -1.9073486328125e-06, -2.6702880859375e-05, -1.52587890625e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -7.62939453125e-06, -0.000102996826171875, -1.6689286894688848e-06, -0.8436870574951172, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-05, -1.33514404296875e-05, -1.33514404296875e-05, -1.71661376953125e-05, -0.0001621246337890625, -3.814697265625e-06, -4.553794860839844e-05, -1.9073486328125e-06, -9.5367431640625e-06, -9.5367431640625e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -6.103515625e-05, -0.000148773193359375, -7.390974587906385e-06, -0.03279876708984375, -2.6702880859375e-05, -0.18409156799316406, -0.0075092315673828125, -0.5895854830741882, -0.000995635986328125, -0.20827007293701172, -5.7220458984375e-06, -0.0004978179931640625, -6.866455078125e-05, -5.7220458984375e-06, -7.62939453125e-06, -0.0036258697509765625, 0.0, -0.0001544952392578125, -7.62939453125e-06, -0.000125885009765625, -1.52587890625e-05, -0.00019073486328125, -5.7220458984375e-06, -0.05398964881896973, -1.9073486328125e-06, -0.0011577606201171875, -2.6702880859375e-05, -1.1444091796875e-05, -0.07035781443119049, -9.5367431640625e-06, -0.37552642822265625, -9.5367431640625e-06, -4.76837158203125e-05, -0.0066852569580078125, -0.00023651123046875, -1.0144824981689453, -0.007007598876953125, -0.0008411407470703125, 0.0, -0.0001373291015625, 0.0, -0.015355229377746582, 0.0, -0.21965748071670532, -1.71661376953125e-05, -0.0039215087890625, -0.0001201629638671875, -0.07053852081298828, -0.0012063980102539062, -0.00022350871586240828, -5.91278076171875e-05, -0.02641773223876953, 0.0, -0.028749465942382812, 0.0, -3.814697265625e-06, 0.0, -0.0009326934814453125, 0.0, -0.000576019287109375, -9.1552734375e-05, -1.33514404296875e-05, -1.1444091796875e-05, -0.044338226318359375, -2.6702880859375e-05, -0.05472755432128906, 0.0, -0.4756135940551758, -1.1444091796875e-05, -1.52587890625e-05, -0.0004100799560546875, -2.47955322265625e-05, -0.16039223968982697, -3.0517578125e-05], "choice_history": [80, 159, 295, 88, 138, "Mark", "Of", "The", "Wild", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "4", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "4", "<EOS>", 85, 128, 282, 37, 129, 22, 171, 11, 129, 19, 160, "player", "<EOS>", "hand", "<EOS>", 83, 150, 34, 262, "1", "<EOS>", "player", "<EOS>", 19, 160, "player", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "4", "<EOS>"]}]}
{"gold_code": "class MultiShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            target = game.random_choice(targets)\n            targets.remove(target)\n            target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Multi-Shot", "_type": "ClassDef", "body": [{"_type": "Template15", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}, {"iter": {"func": {"id": "range", "_type": "Name"}, "args": [{"n": 0, "_type": "Num"}, {"n": 4, "_type": "Num"}], "_type": "Call"}, "_type": "For", "body": [{"targets": [{"id": "target", "_type": "Name"}], "_type": "Assign", "value": {"func": {"_type": "Attribute", "attr": "random_choice", "value": {"id": "game", "_type": "Name"}}, "args": [{"id": "targets", "_type": "Name"}], "_type": "Call"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "damage", "value": {"id": "target", "_type": "Name"}}, "args": [{"_type": "Template71", "hole0": 3}, {"id": "self", "_type": "Name"}], "_type": "Call"}}, {"test": {"_type": "Attribute", "attr": "<UNK>", "value": {"id": "target", "_type": "Name"}}, "_type": "If", "body": [{"_type": "Break"}]}], "target": {"id": "i", "_type": "Name"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}, {"_type": "Template0", "hole2": [{"n": 3, "_type": "Num"}], "hole1": "card", "hole0": {"id": "minion", "_type": "Name"}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 4):\n            target = game.random_choice(targets)\n            target.damage(player.effective_spell_damage(3), self)\n            if target.<UNK>:\n                break\n\n    def use(self, player, game):\n        super().use(player, game)\n        minion.card.damage(player.effective_spell_damage(3), self)\n", "score": -8.728321685257576, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -1.1444091796875e-05, -3.24249267578125e-05, -1.9073486328125e-06, -1.597391747054644e-05, -2.3245762349688448e-05, -2.09808349609375e-05, 0.0, -1.71661376953125e-05, -0.0003973245620727539, -7.748603820800781e-06, -9.655952453613281e-06, -0.562713623046875, -0.08732032775878906, -0.00017547607421875, -3.6954811548639555e-06, -0.00011288894165772945, -7.3909477578126825e-06, 0.0, -0.0001933574676513672, -1.9073486328125e-06, -0.002105712890625, -1.33514404296875e-05, -8.785724639892578e-05, -1.9073486328125e-06, -2.09808349609375e-05, -4.00543212890625e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, -1.0013580322265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.503394853192731e-06, -0.9171209335327148, -2.6702880859375e-05, -1.71661376953125e-05, -3.4332275390625e-05, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.00040435791015625, -8.392333984375e-05, -1.0013561222876888e-05, -5.7220458984375e-06, -0.001605987548828125, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -4.38690185546875e-05, -5.7220458984375e-06, -0.015506744384765625, -7.05718994140625e-05, -0.0011653900146484375, -7.62939453125e-06, -0.016158699989318848, -0.0001010894775390625, -0.0004215240478515625, -3.4332275390625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.0002957582473754883, -0.000102996826171875, -0.000278472900390625, -0.0001277923583984375, -7.62939453125e-06, -0.06330930441617966, -2.288818359375e-05, -0.1420755386352539, -5.7220458984375e-06, -0.015982147306203842, -5.7220458984375e-06, -0.19571495056152344, -0.0008821487426757812, -3.814697265625e-06, -9.1552734375e-05, -1.71661376953125e-05, 0.0, -0.7027404308319092, -3.576278118089249e-07, -0.001392364501953125, -0.000732421875, -2.288818359375e-05, 0.0, -0.00098419189453125, 0.0, -0.0015109777450561523, -2.741813204920618e-06, -0.002274036407470703, -1.9073486328125e-06, -0.000148773193359375, -0.0002689361572265625, -1.9073486328125e-06, -0.009177207946777344, 0.0, -0.002925872802734375, -0.0001659393310546875, -0.0419769287109375, -0.0004100799560546875, -5.7220458984375e-05, -3.814697265625e-06, -0.0001163482666015625, -1.1444091796875e-05, -0.038523994386196136, -8.702239938429557e-06, -0.0013843774795532227, -3.814697265625e-06, -5.7220458984375e-06, -0.24881553649902344, -0.0008029937744140625, -0.00044215237721800804, -5.364416665543104e-06, -4.00543212890625e-05, -1.9073486328125e-06, -0.0005320310592651367, -3.24249267578125e-05, -0.5712528228759766, -0.00699615478515625, -0.19263553619384766, -7.62939453125e-06, -0.37546443939208984, 0.0, -0.23210716247558594, 0.0, -0.025627493858337402, 0.0, -0.0007724761962890625, -0.8370294570922852, -2.1076064109802246, -0.552276611328125, -0.0050334930419921875, 0.0, -0.24365922808647156, -1.1920928244535389e-07, -0.2800227403640747, -3.576278118089249e-07, -0.00109100341796875, -0.002349853515625, -0.00020599365234375, -0.21343180537223816, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Multi-Shot", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "4", "<EOS>", 297, 85, 128, 282, 45, 160, "target", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "targets", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "target", "<EOS>", "damage", "<EOS>", 283, 63, 253, "3", "<EOS>", 45, 160, "self", "<EOS>", 92, 146, 11, 129, 19, 160, "target", "<EOS>", "<UNK>", "<EOS>", 295, 87, 95, 172, 19, 160, "minion", "<EOS>", "card", "<EOS>", 282, 47, 165, "3", "<EOS>"]}]}
{"gold_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word: Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(2)\n        player.draw()\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Power:Shield", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "__init__", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"s": "Power Word Shield", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "PRIEST", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Attribute", "attr": "FREE", "value": {"id": "CARD_RARITY", "_type": "Name"}}], "_type": "Call", "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}}}}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}, {"_type": "Expr", "value": {"_type": "Template47", "hole0": 1}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "draw", "value": {"id": "player", "_type": "Name"}}, "_type": "Call"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class Power:Shield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        player.draw()\n", "score": -2.3986834922941256, "score_history": [-5.7220458984375e-06, -5.7220458984375e-06, -1.33514404296875e-05, -9.5367431640625e-06, -9.5367431640625e-06, -0.00047299492871388793, -0.4094456732273102, -0.007495492231100798, -0.00021849112818017602, -0.000110626220703125, -1.9073486328125e-06, -3.814697265625e-06, -0.0016118288040161133, -1.3589859008789062e-05, -4.768371127283899e-06, -2.47955322265625e-05, -0.07706642150878906, -7.62939453125e-06, -1.5139577953959815e-05, -2.0265579223632812e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.9604644775390625e-06, 0.0, -0.002536773681640625, -2.6702880859375e-05, -5.7220458984375e-06, -0.000308990478515625, -0.0001392364501953125, -1.52587890625e-05, -1.9073486328125e-06, -0.0001010894775390625, -3.814697265625e-06, -1.3470619705913123e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.0002460479736328125, -1.9073486328125e-05, -1.9073486328125e-05, -0.0007967642741277814, -0.00021946430206298828, -0.2640105187892914, -0.521784782409668, -0.0016963790403679013, -0.000171661376953125, -3.62396240234375e-05, -3.814697265625e-06, -0.0010600900277495384, -9.5367431640625e-06, -0.0001316070556640625, 0.0, -1.52587890625e-05, 0.0, -8.0108642578125e-05, -1.1920928244535389e-07, -0.0009593963623046875, -1.1444091796875e-05, -0.000667572021484375, -1.9073486328125e-06, -5.7220458984375e-06, -0.000156402587890625, -0.0013866424560546875, -0.00011265277862548828, -0.001262664794921875, -1.9073486328125e-06, -9.34600830078125e-05, -0.0035114288330078125, -1.52587890625e-05, -0.0010606050491333008, -1.9073486328125e-06, -0.000217437744140625, -3.0517578125e-05, -0.0001659393310546875, -2.86102294921875e-05, -1.9073486328125e-05, -3.24249267578125e-05, -0.00015866756439208984, -3.814697265625e-06, -0.000225067138671875, -1.1920928244535389e-07, -0.006734609603881836, -7.092952728271484e-05, -0.002048492431640625, -1.1444091796875e-05, -4.1961669921875e-05, -9.5367431640625e-06, -1.33514404296875e-05, -4.57763671875e-05, -2.09808349609375e-05, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -0.0001316070556640625, -4.9591064453125e-05, -1.1920922133867862e-06, -0.021039962768554688, -9.5367431640625e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.71661376953125e-05, -6.449222564697266e-05, -1.71661376953125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.0004024505615234375, -1.9073486328125e-06, -1.33514404296875e-05, -0.0002919435501098633, -0.0003261566162109375, -1.9073486328125e-06, -0.18112468719482422, -0.0001277923583984375, -0.8549672961235046, -5.7220458984375e-06, -0.0034837722778320312, -3.814697265625e-06, -0.0001678466796875, -0.014467239379882812, -3.0517578125e-05, 0.0, -0.0041961669921875, 0.0, -7.82012939453125e-05, 0.0, -0.00833737850189209, 0.0], "choice_history": [80, 159, 295, 88, 138, "Power", ":", "Shield", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Power", " ", "Word", " ", "Shield", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "1", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}]}
{"gold_code": "class SenjinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Sen'jinShieldmasta", "_type": "ClassDef", "body": [{"_type": "Template17", "hole2": "ALL", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}, {"hole3": {"_type": "NameConstant", "value": true}, "_type": "Template23", "hole2": "taunt", "hole1": 5, "hole0": 3}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -0.5174245430218889, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -8.20159912109375e-05, -1.1444091796875e-05, -0.018529532477259636, -0.00018404220463708043, -3.79079720005393e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, 0.0, -2.09808349609375e-05, -6.079673767089844e-06, -1.52587890625e-05, -0.34045982360839844, -0.000732421875, -0.0002037079248111695, -1.442432312614983e-05, -2.503394853192731e-06, -1.9073486328125e-06, -1.1920922133867862e-06, 0.0, -0.0017510652542114258, 0.0, -0.0021991729736328125, -1.52587890625e-05, -1.8596470908960328e-05, -3.099440846199286e-06, -2.5391480448888615e-05, 0.0, -0.152837872505188, 0.0, -0.000202178955078125, -2.6702880859375e-05, -5.7220458984375e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Sen'jin", "Shieldmasta", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 103, 186, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", 109, 200, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}]}
{"gold_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "SinisterStrike", "_type": "ClassDef", "body": [{"_type": "Template17", "hole2": "ROGUE", "hole1": 1, "hole0": "Sinister Strike"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}, {"targets": [{"id": "targets", "_type": "Name"}], "_type": "Assign", "value": {"func": {"_type": "Attribute", "attr": "copy", "value": {"id": "copy", "_type": "Name"}}, "args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"id": "game", "_type": "Name"}}}], "_type": "Call"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "extend", "value": {"id": "targets", "_type": "Name"}}, "args": [{"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"id": "game", "_type": "Name"}}}], "_type": "Call"}}, {"targets": [{"id": "targets", "_type": "Name"}], "_type": "Assign", "value": {"func": {"_type": "Attribute", "attr": "copy", "value": {"id": "copy", "_type": "Name"}}, "args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"id": "game", "_type": "Name"}}}], "_type": "Call"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.other_player.hero)\n        targets = copy.copy(game.other_player.minions)\n", "score": -2.3173714088607653, "score_history": [-3.814697265625e-06, -5.91278076171875e-05, -9.5367431640625e-06, -1.33514404296875e-05, -1.71661376953125e-05, -3.099436753473128e-06, -0.00012754605268128216, -2.9802276912960224e-06, -0.00054168701171875, 0.0, -1.9073486328125e-06, -4.5418739318847656e-05, -1.1444091796875e-05, -0.00013935565948486328, -3.24249267578125e-05, -0.1076211929321289, -0.002712249755859375, -1.07287787614041e-05, -2.1576881408691406e-05, -5.9604562920867465e-06, 0.0, -3.5762695915764198e-06, 0.0, -0.01033937931060791, 0.0, -0.000820159912109375, 0.0, -0.00061798095703125, -1.9073486328125e-06, -7.62939453125e-06, -2.86102294921875e-05, 0.0, -5.7220458984375e-06, 0.0, 0.0, -1.0013580322265625e-05, 0.0, -5.7220458984375e-06, -2.861022494471399e-06, -5.960462772236497e-07, -0.8863496780395508, -0.000614166259765625, -9.5367431640625e-06, -2.86102294921875e-05, -7.62939453125e-06, -0.000274658203125, -7.62939453125e-06, -6.29425048828125e-05, -7.62939453125e-06, -4.38690185546875e-05, -3.814697265625e-06, -4.76837158203125e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.71661376953125e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -8.392333984375e-05, -7.62939453125e-06, -1.33514404296875e-05, -1.621246337890625e-05, -0.006890296936035156, -0.00016021728515625, -0.0014324188232421875, -5.91278076171875e-05, -1.9073486328125e-06, -0.009890437126159668, 0.0, -0.043529510498046875, -0.00014495849609375, -3.62396240234375e-05, 0.0, -0.0018405914306640625, 0.0, -0.0002633333206176758, -9.5367431640625e-06, -0.0008544921875, -1.9073486328125e-06, -5.14984130859375e-05, -7.82012939453125e-05, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -0.00064849853515625, 0.0, -0.0001004934310913086, -4.410743713378906e-06, -0.0001373291015625, -1.9073486328125e-06, -0.041856713593006134, -8.96453857421875e-05, -0.0001087188720703125, -1.1444091796875e-05, -4.9591064453125e-05, -0.0005207061767578125, -9.918212890625e-05, 0.0, -0.0007495880126953125, -1.1444091796875e-05, -0.00041103363037109375, 0.0, -0.0118865966796875, -8.58306884765625e-05, -2.288818359375e-05, -2.09808349609375e-05, 0.0, -0.001850128173828125, -3.814697265625e-06, -0.0001659393310546875, 0.0, -0.003887176513671875, -1.0371208190917969e-05, -0.4190102815628052, -1.9073486328125e-06, -0.04071805253624916, -2.9802276912960224e-06, -0.5086202621459961, -5.14984130859375e-05, -7.62939453125e-06, -0.0001049041748046875, 0.0, -0.04034221172332764, 0.0, -0.13753795623779297, -0.0017986297607421875, -0.00018310546875, 0.0, -0.0007038116455078125, 0.0, -0.00016224384307861328, -3.814697265625e-06, -0.0005855560302734375, -1.9073486328125e-06, -7.62939453125e-05, -9.72747802734375e-05, -3.814697265625e-06, -6.103515625e-05, 0.0, -0.0009975433349609375, 0.0, -0.00010955333709716797, -6.318092346191406e-06, -0.00013840198516845703, 0.0, -0.027074702084064484, -7.43865966796875e-05], "choice_history": [80, 159, 295, 88, 138, "Sinister", "Strike", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "targets", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "extend", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 85, 128, 282, 45, 160, "targets", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>"]}]}
{"gold_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Succubus", "_type": "ClassDef", "body": [{"hole4": "minion_type", "hole8": {"elts": [{"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"func": {"id": "Give", "_type": "Name"}, "args": [{"_type": "Template70", "hole1": [{"_type": "Template69", "hole1": "CardSelector", "hole0": "Count"}], "hole0": "ChangeHealth"}], "_type": "Call"}, {"_type": "Template77", "hole0": "SelfSelector"}], "_type": "Call"}, {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"func": {"id": "Heal", "_type": "Name"}, "args": [{"n": 3, "_type": "Num"}], "_type": "Call"}, {"func": {"id": "CharacterSelector", "_type": "Name"}, "_type": "Call", "keywords": [{"arg": "players", "_type": "keyword", "value": {"_type": "Template77", "hole0": "BothPlayer"}}]}], "_type": "Call"}], "_type": "Tuple"}, "hole2": "WARLOCK", "hole1": 2, "hole7": "battlecry", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Template9", "hole3": "RARE", "hole6": "DEMON", "hole0": "Succubus"}, {"_type": "Template27", "hole1": 3, "hole0": 4}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=(\n            Battlecry(Give(Buff(ChangeHealth(Count(CardSelector())))),\n            SelfSelector()), Battlecry(Heal(3), CharacterSelector(players=\n            BothPlayer()))))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -3.9978309683954123, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00011967896716669202, -6.151197158033028e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-05, -2.503394853192731e-06, -7.62939453125e-06, -0.0037078857421875, -0.0001430511474609375, -6.687417771900073e-05, -3.814697265625e-06, -0.0002622227475512773, 0.0, -0.0023671388626098633, -1.9073486328125e-06, -0.5539226531982422, 0.0, -3.445148468017578e-05, 0.0, -9.72747802734375e-05, 0.0, -4.38690185546875e-05, 0.0, -0.00054168701171875, -1.1444091796875e-05, -0.0045261383056640625, 0.0, -0.6475467681884766, -0.030223846435546875, -0.037059783935546875, -9.5367431640625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0010308027267456055, 0.0, -7.62939453125e-06, -0.1345653533935547, -0.0013332366943359375, -8.96453857421875e-05, 0.0, -0.021129488945007324, -3.8146954466355965e-06, -0.027099609375, -0.3446178436279297, -0.014612197875976562, -0.0007234811782836914, -0.007503509521484375, -1.9073486328125e-06, -1.52587890625e-05, -0.26172542572021484, -6.103515625e-05, -0.019744873046875, -0.00016891956329345703, -9.393692016601562e-05, -0.00013089166895952076, 0.0, -0.183807373046875, 0.0, -0.004458189010620117, -9.655952453613281e-06, 0.0, -4.76837158203125e-05, -0.0002918243408203125, 0.0, -1.1444091796875e-05, -0.04637575149536133, -9.5367431640625e-06, -4.00543212890625e-05, -0.05665111541748047, -0.0949869155883789, -3.814697265625e-06, -1.52587890625e-05, -0.502476155757904, -0.0004589557647705078, -5.7220458984375e-06, -0.04223823547363281, -2.47955322265625e-05, -0.3893415629863739, 0.0, -3.4332275390625e-05, -0.04473686218261719, -2.288818359375e-05, -5.7220458984375e-06, -0.3917560577392578, -0.0001068115234375, 0.0, -0.013283729553222656, -9.5367431640625e-06, -1.9073486328125e-06, -0.1054220199584961, -1.1920928244535389e-07, -0.0001277923583984375, 0.0, -0.004788041114807129, -2.09808349609375e-05, 0.0, -0.000701904296875, -5.7220458984375e-06, -5.745780072174966e-05, 0.0, -2.1099975128890947e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Succubus", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Succubus", "<EOS>", "2", "<EOS>", "WARLOCK", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 35, 265, 283, 40, 136, 19, 160, "Battlecry", "<EOS>", 283, 40, 136, 19, 160, "Give", "<EOS>", 282, 62, 252, "Change", "Health", "<EOS>", 282, 61, 250, "Count", "<EOS>", "Card", "Selector", "<EOS>", 68, 260, "Self", "Selector", "<EOS>", 40, 136, 19, 160, "Battlecry", "<EOS>", 283, 40, 136, 19, 160, "Heal", "<EOS>", 282, 47, 165, "3", "<EOS>", 40, 135, 19, 160, "Character", "Selector", "<EOS>", 290, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "WarGolem", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "__init__", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"s": "War Golem", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"id": "CARD_RARITY", "_type": "Name"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "DRAGON", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "_type": "Call"}}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"_type": "Template27", "hole1": 7, "hole0": 7}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -1.7305544653280478, "score_history": [-1.71661376953125e-05, -4.00543212890625e-05, -1.9073486328125e-06, -4.1961669921875e-05, -1.1444091796875e-05, -0.10686104744672775, -0.0001053762316587381, -4.768370445162873e-07, -3.0517578125e-05, -4.38690185546875e-05, 0.0, -3.814697265625e-06, -2.86102294921875e-05, -5.7220458984375e-06, -1.33514404296875e-05, -0.08488750457763672, -7.62939453125e-06, -4.160403477726504e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0001201629638671875, -3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-06, -6.67572021484375e-05, -0.6927165985107422, -9.72747802734375e-05, -1.33514404296875e-05, -0.35843658447265625, -0.0001125335693359375, 0.0, -7.82012939453125e-05, 0.0, -9.333703201264143e-05, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -0.009494781494140625, -0.00031280517578125, -1.9073486328125e-05, -0.00019429226813372225, -0.0006237030029296875, -0.00014816856128163636, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -0.06462934613227844, 0.0, -0.0014171600341796875, 0.0, -1.1444091796875e-05, 0.0, -6.29425048828125e-05, -1.1920928244535389e-07, -0.000171661376953125, 0.0, -4.00543212890625e-05, -1.9073486328125e-06, -1.33514404296875e-05, -3.814697265625e-05, -0.0001087188720703125, -9.5367431640625e-06, -0.00238800048828125, -0.0001544952392578125, -0.00086212158203125, -0.0001049041748046875, -0.000377655029296875, 0.0, -0.000286102294921875, -3.814697265625e-06, -2.09808349609375e-05, -7.62939453125e-06, -0.0007114410400390625, -1.71661376953125e-05, -0.3968839645385742, -0.0016231536865234375, -0.0002689361572265625, -1.9073486328125e-06, -0.005418851040303707, 0.0, -3.373984509380534e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "War", "Golem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "War", " ", "Golem", "<EOS>", 47, 165, "7", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 110, 202, "7", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(\n            MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(),\n            TargetSelector())])])\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Acidmaw", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "__init__", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"_type": "Attribute", "attr": "HUNTER", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Attribute", "attr": "LEGENDARY", "value": {"id": "CARD_RARITY", "_type": "Name"}}], "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"id": "MINION_TYPE", "_type": "Name"}}}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"hole4": [{"_type": "Template69", "hole1": "<UNK>Attack", "hole0": "Buff"}], "hole2": "Damaged", "hole1": 2, "hole5": "SelfSelector", "_type": "Template1", "hole3": "Give", "hole0": 4}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give(Buff(\n            <UNK>Attack())), SelfSelector()))])\n", "score": -0.7725464959039385, "score_history": [0.0, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -1.52587890625e-05, -0.002914468990638852, -0.0001518726348876953, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, -4.00543212890625e-05, -1.1444091796875e-05, -1.1444091796875e-05, -0.009688377380371094, -7.62939453125e-06, -3.743161141755991e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -9.5367431640625e-06, -1.1444091796875e-05, -4.00543212890625e-05, -0.0003795623779296875, -3.814697265625e-06, 0.0, -4.57763671875e-05, 0.0, -2.0265579223632812e-06, -3.814697265625e-06, -2.6702880859375e-05, -1.9073486328125e-06, -0.006198883056640625, -1.9073486328125e-06, -1.9073486328125e-05, -4.494089080253616e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.00010847456724150106, -4.172325134277344e-06, -3.814697265625e-06, 0.0, -8.58306884765625e-05, 0.0, -6.890296936035156e-05, -1.1920928244535389e-07, -0.0010071992874145508, -3.814697265625e-06, -0.00023651123046875, 0.0, -2.47955322265625e-05, -0.00023651123046875, -1.9073486328125e-06, 0.0, -0.14515113830566406, 0.0, -1.9073486328125e-05, -0.01099395751953125, -1.71661376953125e-05, -1.33514404296875e-05, -1.33514404296875e-05, -7.05718994140625e-05, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -0.0001506805419921875, -1.9073486328125e-06, -0.0001544952392578125, -0.0001201629638671875, -0.011784553527832031, -0.07024860382080078, -0.00048083244473673403, -1.1920928244535389e-07, -0.009536756202578545, 0.0, -0.027024507522583008, -7.987022399902344e-06, -0.0659874677658081, -4.398822784423828e-05, -1.9073486328125e-06, -0.1855640411376953, -6.103515625e-05, -8.392333984375e-05, -4.57763671875e-05, -0.04736202210187912, -0.14980261027812958, 0.0, -0.026162385940551758, -8.0108642578125e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Acidmaw", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Acidmaw", "<EOS>", 47, 165, "7", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 96, 176, "4", "<EOS>", "2", "<EOS>", "Damaged", "<EOS>", "Give", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "<UNK>", "Attack", "<EOS>", "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Boar", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "__init__", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"s": "Boar", "_type": "Str"}, {"n": 3, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"id": "CARD_RARITY", "_type": "Name"}}], "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"id": "MINION_TYPE", "_type": "Name"}}}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"hole3": {"_type": "NameConstant", "value": true}, "_type": "Template23", "hole2": "charge", "hole1": 2, "hole0": 4}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -0.3169955975135963, "score_history": [0.0, -1.1444091796875e-05, -7.62939453125e-06, -7.82012939453125e-05, -2.47955322265625e-05, -4.768360213347478e-06, -0.0003012202796526253, -1.9073486328125e-06, -4.38690185546875e-05, -3.814697265625e-06, -1.1563301086425781e-05, -4.57763671875e-05, -8.7738037109375e-05, -4.76837158203125e-05, -0.0007038116455078125, -5.7220458984375e-06, -0.0002014636993408203, -7.62939453125e-06, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -0.000133514404296875, -1.9073486328125e-06, -0.00018310546875, -0.0046024322509765625, -7.62939453125e-06, -1.9073486328125e-05, -0.0022335052490234375, -9.918212890625e-05, 0.0, -0.0001621246337890625, 0.0, -0.002853035693988204, -3.814697265625e-06, -1.7404556274414062e-05, -1.9073486328125e-06, -0.21642684936523438, -2.6702880859375e-05, -1.71661376953125e-05, -9.775113539944869e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9907602109014988e-05, 0.0, -0.0034637451171875, 0.0, -1.33514404296875e-05, 0.0, -3.4332275390625e-05, -2.2649765014648438e-06, -0.0008220672607421875, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -1.52587890625e-05, -1.1444091796875e-05, -2.288818359375e-05, -6.318082796497038e-06, -0.07138633728027344, -7.62939453125e-06, -0.001895904541015625, -0.00319671630859375, -2.86102294921875e-05, -0.00012791156768798828, -1.1444091796875e-05, -0.0005779266357421875, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.0002899169921875, -3.933906555175781e-06, -0.0001163482666015625, -0.0008293390274047852, -0.0013523101806640625, -5.91278076171875e-05, -0.00020730416872538626, -1.1563301086425781e-05, -0.00011551361967576668, 0.0, -0.0031539201736450195, -1.52587890625e-05, -0.0006237030029296875, -8.20159912109375e-05, -4.00543212890625e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Boar", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Boar", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}]}
{"gold_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[\n            Choice(AttackMode(), Give([Buff(ChangeAttack(1))]),\n            SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))\n            ]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "AnodizedRoboCub", "_type": "ClassDef", "body": [{"_type": "Template6", "hole2": "DRUID", "hole1": 0, "hole0": "Anodized Robo Cub"}, {"name": "create_minion", "_type": "FunctionDef", "body": [{"_type": "Return", "value": {"func": {"id": "Minion", "_type": "Name"}, "args": [{"n": 2, "_type": "Num"}, {"n": 2, "_type": "Num"}], "_type": "Call", "keywords": [{"arg": "taunt", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}, {"arg": "auras", "_type": "keyword", "value": {"elts": [{"func": {"id": "Effect", "_type": "Name"}, "args": [{"_type": "Template69", "hole1": "IsHero", "hole0": "CharacterAttack"}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"_type": "Template66", "hole2": 1, "hole1": "ChangeAttack", "hole0": "Give"}, {"_type": "Template77", "hole0": "SelfSelector"}], "_type": "Call"}], "_type": "Call"}], "_type": "List"}}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True, auras=[Effect(CharacterAttack(\n            IsHero()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -5.773757099748508, "score_history": [0.0, -1.71661376953125e-05, -7.62939453125e-06, -0.00018310546875, -1.1444091796875e-05, -0.0010572010651230812, -0.04776468127965927, -0.0004637667734641582, -8.332397555932403e-05, -3.0517578125e-05, -1.33514404296875e-05, 0.0, -3.576278118089249e-07, -5.7220458984375e-06, -5.960462772236497e-07, -3.814697265625e-05, -0.045355796813964844, -0.0007076263427734375, -3.588141771615483e-05, -2.6106808945769444e-05, -0.005662322044372559, -0.00030517578125, -9.989738464355469e-05, -1.33514404296875e-05, -0.3079228401184082, -2.0265579223632812e-06, -0.0036774873733520508, 0.0, -0.005854606628417969, -3.24249267578125e-05, -0.004058837890625, -6.079673767089844e-06, -3.0517578125e-05, -0.00141143798828125, -1.33514404296875e-05, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -0.0001087188720703125, 0.0, -0.0004024505615234375, -0.0001544952392578125, -0.0003414154052734375, -0.0014858245849609375, -2.86102294921875e-05, -6.29425048828125e-05, 0.0, -0.014246940612792969, -0.000316619873046875, -2.288818359375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0014987594913691282, -2.682209014892578e-05, -1.33514404296875e-05, -1.9073486328125e-06, -8.809551945887506e-05, -2.872943878173828e-05, -0.050644874572753906, -0.0002193450927734375, -0.006282806396484375, -0.5399316549301147, -3.814697265625e-06, -0.0012264251708984375, -9.5367431640625e-06, -5.7578086853027344e-05, -1.9073486328125e-06, -0.7885551452636719, -0.000453948974609375, -0.558547854423523, -3.063678741455078e-05, -0.0008029937744140625, -7.43865966796875e-05, -0.00353240966796875, -0.010242462158203125, -9.918212890625e-05, -0.0001239776611328125, -6.103515625e-05, -0.33905160427093506, -0.0001577138900756836, -0.0005207061767578125, -0.35566139221191406, -0.0003833770751953125, -0.3723865747451782, -0.002031993120908737, -2.3841855067985307e-07, -0.2050580382347107, -0.7694335579872131, -0.00010990512964781374, -0.0005321502685546875, -4.00543212890625e-05, -3.814697265625e-06, 0.0, -0.37565040588378906, -7.82012939453125e-05, -9.5367431640625e-06, -0.0003643035888671875, -0.4941062927246094, -0.0004100799560546875, -0.005646109580993652, -1.1444091796875e-05, -1.3828277587890625e-05, -0.44365692138671875, -9.918212890625e-05, -0.003307698993012309, -4.1961669921875e-05, -3.0517578125e-05, -1.33514404296875e-05, -0.00025749203632585704, -4.8160552978515625e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Anodized", "Robo", "Cub", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "Mech", "<EOS>", "DRUID", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Minion", "<EOS>", 283, 47, 165, "2", "<EOS>", 47, 165, "2", "<EOS>", 291, 79, 271, "taunt", "<EOS>", 20, 161, "True", "<EOS>", 79, 271, "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 61, 250, "Character", "Attack", "<EOS>", "Is", "Hero", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 59, 248, "Give", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(\n            Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard\n            (query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)),\n            PlayerSelector())), Effect(Drawn(), ActionTag(Draw(),\n            PlayerSelector()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "BurrowingMine", "_type": "ClassDef", "body": [{"_type": "Template17", "hole2": "WARRIOR", "hole1": 0, "hole0": "Burrowing Mine"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}, {"test": {"comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare", "ops": [{"_type": "Lt"}], "left": {"_type": "Attribute", "attr": "<UNK>", "value": {"id": "player", "_type": "Name"}}}, "orelse": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "append", "value": {"_type": "Attribute", "attr": "hand", "value": {"id": "player", "_type": "Name"}}}, "args": [{"id": "player", "_type": "Name"}], "_type": "Call"}}, {"targets": [{"_type": "Attribute", "attr": "<UNK>", "value": {"id": "player", "_type": "Name"}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}], "_type": "If", "body": [{"op": {"_type": "Add"}, "_type": "AugAssign", "value": {"n": 1, "_type": "Num"}, "target": {"_type": "Attribute", "attr": "<UNK>", "value": {"id": "player", "_type": "Name"}}}]}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.<UNK> < 10:\n            player.<UNK> += 1\n        else:\n            player.hand.append(player)\n            player.<UNK> = True\n", "score": -5.737738335588631, "score_history": [-2.47955322265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -0.000125885009765625, -1.9073486328125e-06, -1.6569954823353328e-05, -0.00011133548832731321, -0.00019679591059684753, -0.0001392364501953125, 0.0, -7.62939453125e-06, -5.364418029785156e-05, -3.933906555175781e-06, -2.1457672119140625e-06, -6.866455078125e-05, -0.25849056243896484, -0.0007228851318359375, -2.4318398573086597e-05, -1.5974044799804688e-05, -3.933906555175781e-06, -3.814697265625e-06, -1.0490406566532329e-05, -1.9073486328125e-06, -0.007527470588684082, 0.0, -0.001705169677734375, 0.0, -0.000232696533203125, -2.09808349609375e-05, -7.62939453125e-06, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -9.5367431640625e-05, -0.0001811981201171875, -5.960462772236497e-07, -0.019519805908203125, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -3.325938814668916e-05, -9.5367431640625e-06, -2.09808349609375e-05, -1.33514404296875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -3.62396240234375e-05, -5.7220458984375e-06, 0.0, -0.0001544952392578125, -1.52587890625e-05, -3.4332275390625e-05, -2.09808349609375e-05, -0.6138391494750977, -0.12456130981445312, -0.13417434692382812, -7.62939453125e-05, -0.01032257080078125, 0.0, -0.020737648010253906, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.5550656318664551, -1.9073486328125e-06, -1.9073486328125e-06, -0.540003776550293, -7.62939453125e-06, -0.0031147003173828125, -1.9073486328125e-06, -0.005695932544767857, -1.9073486328125e-06, -0.0214691162109375, -0.01874256134033203, -0.0028791427612304688, -3.4332275390625e-05, -5.53131103515625e-05, -0.0037527084350585938, -1.9073486328125e-06, -0.0011366605758666992, 0.0, -0.03228997811675072, -1.9073486328125e-06, -0.026633262634277344, -0.004515647888183594, -1.52587890625e-05, -0.002308368682861328, 0.0, -0.0065670013427734375, -0.0002346038818359375, 0.0, -4.38690185546875e-05, -0.000682830810546875, -1.71661376953125e-05, 0.0, -0.08656120300292969, 0.0, -0.0001430511474609375, -5.7220458984375e-06, -0.0004875659942626953, 0.0, -0.04046344757080078, -1.52587890625e-05, -0.04902362823486328, 0.0, -0.000339508056640625, -0.25994300842285156, -4.76837158203125e-05, -1.9125736951828003, 0.0, -0.1089162826538086, -6.4849853515625e-05, -0.0005702972412109375, -7.05718994140625e-05, -3.814697265625e-05, -0.028580665588378906, -0.0001506805419921875, -0.20107614994049072, 0.0, -0.028641223907470703, -5.7220458984375e-06, -0.6010932922363281, -2.86102294921875e-05, -7.283687591552734e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Burrowing", "Mine", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 92, 147, 15, 139, 11, 129, 19, 160, "player", "<EOS>", "<UNK>", "<EOS>", 279, 8, 282, 47, 165, "10", "<EOS>", 295, 86, 130, 11, 129, 19, 160, "player", "<EOS>", "<UNK>", "<EOS>", 81, 21, 165, "1", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hand", "<EOS>", "append", "<EOS>", 282, 45, 160, "player", "<EOS>", 85, 128, 282, 37, 129, 19, 160, "player", "<EOS>", "<UNK>", "<EOS>", 20, 161, "True", "<EOS>"]}]}
{"gold_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.random_amount\n            (3, 6)), self)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Crackle", "_type": "ClassDef", "body": [{"hole4": "target_func", "hole8": {"n": 1, "_type": "Num"}, "hole2": "SHAMAN", "hole1": 2, "hole7": "overload", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}}, "_type": "Template9", "hole3": "COMMON", "hole6": "find_spell_target", "hole0": "Crackle"}, {"_type": "Template0", "hole2": [{"n": 6, "_type": "Num"}], "hole1": "target", "hole0": {"id": "self", "_type": "Name"}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -0.395360773075474, "score_history": [-5.7220458984375e-06, -3.814697265625e-06, -5.7220458984375e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.5020257706055418e-05, -4.3987496610498056e-05, -2.86102294921875e-05, 0.0, -5.7220458984375e-06, -0.00013327598571777344, -3.9458274841308594e-05, -2.1457672119140625e-06, -0.0004119873046875, -0.015254974365234375, -0.000179290771484375, -1.0251946150674485e-05, -1.990794771700166e-05, -1.3112957276462112e-05, -3.814697265625e-06, -0.0010024309158325195, 0.0, -9.918212890625e-05, 0.0, -0.010662198066711426, 0.0, -0.00019073486328125, -5.7220458984375e-06, -9.5367431640625e-06, 0.0, -0.0011272430419921875, -2.47955322265625e-05, -0.000335693359375, 0.0, -0.0030432806815952063, 0.0, -0.35521793365478516, -1.9073486328125e-06, -0.0003452301025390625, -5.53131103515625e-05, -0.0021381378173828125, 0.0, -0.0013904571533203125, -0.0025959014892578125, -0.0001430511474609375, 0.0, -3.254413604736328e-05, -9.5367431640625e-06, -7.43865966796875e-05, -1.1920928244535389e-07, -9.1552734375e-05, -1.52587890625e-05, -5.7220458984375e-06, -0.0004874066507909447, -1.7642974853515625e-05], "choice_history": [80, 159, 295, 88, 138, "Crackle", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Crackle", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "overload", "<EOS>", 21, 165, "1", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "6", "<EOS>"]}]}
{"gold_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "EmergencyCoolant", "_type": "ClassDef", "body": [{"hole4": "find_minion_spell_target", "hole2": "target_func", "hole1": "COMMON", "_type": "Template7", "hole3": {"_type": "Attribute", "attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}}, "hole0": "Emergency Coolant"}, {"_type": "Template5", "hole2": [{"n": 1, "_type": "Num"}], "hole1": "change_attack", "hole0": {"_type": "Attribute", "attr": "target", "value": {"id": "self", "_type": "Name"}}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "score": -0.48531481572694446, "score_history": [-7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-05, -9.5367431640625e-06, -9.775113539944869e-06, -8.11783829703927e-05, -2.0265558760002023e-06, -0.0002155303955078125, 0.0, -3.814697265625e-06, -0.0002461671829223633, -2.6702880859375e-05, -3.24249267578125e-05, -6.866455078125e-05, -0.0026731491088867188, -0.0003204345703125, -4.541770613286644e-05, -2.2649757738690823e-05, -3.218649908376392e-06, 0.0, -0.00012028217315673828, -3.814697265625e-06, -0.000827789306640625, 0.0, -0.0004863739013671875, -3.814697265625e-06, -2.86102294921875e-05, 0.0, -0.000888824462890625, -5.7220458984375e-06, -2.6702880859375e-05, -1.1920928244535389e-07, -0.057520389556884766, -2.09808349609375e-05, -0.0033893585205078125, -0.001079559326171875, -5.7220458984375e-06, -3.4332275390625e-05, -1.52587890625e-05, 0.0, -1.9073486328125e-06, -1.33514404296875e-05, -0.0002002716064453125, 0.0, -0.4007542133331299, -1.9073486328125e-06, -5.7220458984375e-06, -0.008144378662109375, -4.76837158203125e-05, -0.007881257683038712, 0.0], "choice_history": [80, 159, 295, 88, 138, "Emergency", "Coolant", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 121, 251, "Emergency", " ", "Coolant", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "1", "<EOS>"]}]}
{"gold_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "FlyingMachine", "_type": "ClassDef", "body": [{"_type": "Template6", "hole2": "ALL", "hole1": 3, "hole0": "Flying Machine"}, {"hole3": {"_type": "NameConstant", "value": true}, "_type": "Template23", "hole2": "windfury", "hole1": 4, "hole0": 1}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "score": -0.623303150424114, "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -5.340576171875e-05, -3.814697265625e-06, -0.00021228920377325267, -1.5020257706055418e-05, -5.722029527532868e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, -2.288818359375e-05, -1.1920928244535389e-07, -2.6702880859375e-05, -0.012788772583007812, -0.0008087158203125, -4.851700214203447e-05, -4.231862840242684e-05, -1.9073486328125e-06, -1.9073486328125e-06, -4.41074053014745e-06, -1.1920928244535389e-07, -0.00011098384857177734, 0.0, -0.0925445556640625, -2.6702880859375e-05, -7.152536909416085e-07, 0.0, -6.0796546677011065e-06, 0.0, -0.5149803161621094, -9.179109838441946e-06, -0.001556396484375, -5.7220458984375e-06, -6.675719760096399e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Flying", "Machine", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 20, 161, "True", "<EOS>"]}]}
{"gold_code": "class GoblinAutoBarber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "GoblinAuto-Barber", "_type": "ClassDef", "body": [{"_type": "Template6", "hole2": "ROGUE", "hole1": 2, "hole0": "Goblin Auto-Barber"}, {"name": "create_minion", "_type": "FunctionDef", "body": [{"_type": "Return", "value": {"func": {"id": "Minion", "_type": "Name"}, "args": [{"n": 3, "_type": "Num"}, {"n": 2, "_type": "Num"}], "_type": "Call", "keywords": [{"arg": "effects", "_type": "keyword", "value": {"elts": [{"func": {"id": "Aura", "_type": "Name"}, "args": [{"_type": "Template73", "hole0": 2}, {"_type": "Template77", "hole0": "WeaponSelector"}], "_type": "Call"}], "_type": "List"}}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Aura(ChangeAttack(2), WeaponSelector())])\n", "score": -3.3735760928828995, "score_history": [-1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.000519617460668087, -4.053113570989808e-06, -4.088829518877901e-05, -3.814697265625e-06, -5.7220458984375e-06, 0.0, 0.0, -4.76837158203125e-05, -1.0728830375228426e-06, -7.62939453125e-06, -0.4100465774536133, -0.000385284423828125, -4.565611743601039e-05, -9.28620938793756e-05, -4.172325134277344e-06, -1.1444091796875e-05, -0.00031387805938720703, 0.0, -0.03487396240234375, 0.0, -0.6410379409790039, -2.288818359375e-05, -0.0003204345703125, -3.814697265625e-06, -0.000247955322265625, -0.000225067138671875, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -0.0007003545761108398, 0.0, -0.0037136077880859375, -0.02891826629638672, -0.00063323974609375, -0.0002460479736328125, -0.0025119781494140625, -2.6702880859375e-05, 0.0, -0.0001373291015625, -6.103515625e-05, -1.1444091796875e-05, -5.7220458984375e-06, -4.9591064453125e-05, -0.0012273748870939016, -1.9073486328125e-06, -1.33514404296875e-05, -2.288818359375e-05, -1.5139447896217462e-05, -2.2649765014648438e-06, -0.005184173583984375, -0.7137660980224609, -7.62939453125e-06, -0.28961730003356934, -1.9073486328125e-06, -0.000263214111328125, -0.00029754638671875, -0.1371011734008789, -0.0005283355712890625, -0.0004425048828125, -9.1552734375e-05, -5.53131103515625e-05, -0.6193646192550659, -0.01649308204650879, -4.38690185546875e-05, -0.24129486083984375, -0.001621246337890625, -0.043510276824235916, -9.5367431640625e-06, -0.16989612579345703, -7.82012939453125e-05, -0.005125760100781918, -0.002173298504203558, -2.0265579223632812e-06], "choice_history": [80, 159, 295, 88, 138, "Goblin", "Auto-Barber", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Minion", "<EOS>", 283, 47, 165, "3", "<EOS>", 47, 165, "2", "<EOS>", 290, 79, 271, "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "2", "<EOS>", 68, 260, "Weapon", "Selector", "<EOS>"]}]}
{"gold_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "IronSensei", "_type": "ClassDef", "body": [{"hole3": "MECH", "_type": "Template8", "hole2": "ROGUE", "hole1": 3, "hole0": "Iron Sensei"}, {"hole4": [{"_type": "Template74", "hole0": 1}], "hole2": "TurnEnded", "hole1": 2, "hole7": [{"arg": "picker", "_type": "keyword", "value": {"_type": "Template77", "hole0": "RandomPicker"}}], "hole5": "MinionSelector", "_type": "Template1", "hole3": "Give", "hole0": 2}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -1.5499234602106355, "score_history": [-1.71661376953125e-05, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -0.002360417041927576, -3.492808900773525e-05, -1.0728831512096804e-05, -2.6702880859375e-05, -2.6702880859375e-05, 0.0, -3.576278118089249e-07, -2.86102294921875e-05, -2.503394853192731e-06, -3.62396240234375e-05, -0.0031499862670898438, -0.0005931854248046875, -0.00025614796322770417, -0.0006979702739045024, -8.58306884765625e-06, -1.9073486328125e-06, -2.3841855067985307e-07, -2.3841855067985307e-07, -0.009418487548828125, -3.814697265625e-06, -0.0324249267578125, -5.7220458984375e-06, -0.06865119934082031, -0.6574621200561523, -5.722029527532868e-06, -2.3841855067985307e-07, -0.0011584777384996414, 0.0, -0.00018346309661865234, -0.0002994537353515625, 0.0, -0.4323391914367676, -0.10722780227661133, -7.05718994140625e-05, -0.12569713592529297, -0.0058135986328125, -0.00020050848252139986, -5.7220458984375e-06, -0.000713348388671875, -1.9073486328125e-05, -5.960462772236497e-07, -6.67572021484375e-05, -0.000152587890625, -5.7220458984375e-06, -0.013563752174377441, 0.0, -6.866455078125e-05, -7.62939453125e-06, -0.08537864685058594, -0.0017087459564208984, 0.0], "choice_history": [80, 159, 295, 88, 138, "Iron", "Sensei", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 123, 263, "Iron", " ", "Sensei", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "MECH", "<EOS>", 96, 177, "2", "<EOS>", "2", "<EOS>", "Turn", "Ended", "<EOS>", "Give", "<EOS>", 282, 65, 256, "1", "<EOS>", "Minion", "Selector", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "Random", "Picker", "<EOS>"]}]}
{"gold_code": "class MalGanis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(\n            IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2),\n            MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(),\n            HeroSelector())])\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Mal'Ganis", "_type": "ClassDef", "body": [{"hole4": "minion_type", "hole8": {"elts": [{"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"func": {"id": "Give", "_type": "Name"}, "args": [{"_type": "Template70", "hole1": [{"func": {"id": "Attribute", "_type": "Name"}, "args": [{"s": "<UNK>", "_type": "Str"}, {"_type": "Template77", "hole0": "HeroSelector"}], "_type": "Call"}], "hole0": "ChangeAttack"}], "_type": "Call"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "args": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Attribute", "attr": "PIRATE", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "_type": "Call"}, {"_type": "Template77", "hole0": "BothPlayer"}], "_type": "Call"}], "_type": "Call"}, {"func": {"id": "RandomPicker", "_type": "Name"}, "args": [{"n": 9, "_type": "Num"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"func": {"id": "Count", "_type": "Name"}, "args": [{"func": {"id": "MinionSelector", "_type": "Name"}, "args": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Attribute", "attr": "PIRATE", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call", "keywords": [{"arg": "picker", "_type": "keyword", "value": {"_type": "Template77", "hole0": "UserPicker"}}]}], "_type": "Tuple"}, "hole2": "WARLOCK", "hole1": 9, "hole7": "battlecry", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Template9", "hole3": "LEGENDARY", "hole6": "DEMON", "hole0": "Mal'Ganis"}, {"_type": "Template27", "hole1": 7, "hole0": 9}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON, battlecry\n            =(Battlecry(Give(Buff(ChangeAttack(Attribute('<UNK>',\n            HeroSelector())))), MinionSelector(IsType(MINION_TYPE.PIRATE),\n            BothPlayer())), RandomPicker(9), GreaterThan(Count(\n            MinionSelector(IsType(MINION_TYPE.PIRATE))), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(9, 7)\n", "score": -7.361267209812155, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011610332876443863, -0.0005617127753794193, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -5.14984130859375e-05, -3.814697265625e-06, -0.04076862335205078, -0.000186920166015625, -0.00030119650182314217, -9.655952453613281e-06, -0.0018114997074007988, -2.3841855067985307e-07, -0.000997781753540039, -5.7220458984375e-06, -0.0063304901123046875, 0.0, -0.000331878662109375, -5.7220458984375e-06, -3.814697265625e-05, -7.62939453125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0010738372802734375, -1.1444091796875e-05, -0.037032127380371094, 0.0, -0.28028202056884766, -0.0006608963012695312, -0.11570262908935547, -6.4849853515625e-05, -0.0001697540283203125, -1.9073486328125e-06, -3.814697265625e-06, -0.0037499666213989258, 0.0, -7.62939453125e-06, -0.23298072814941406, -0.0001697540283203125, -9.34600830078125e-05, -3.814697265625e-06, -0.42156219482421875, 0.0, -0.0046596527099609375, -0.35721778869628906, -0.000949859619140625, -0.011913776397705078, -0.07886314392089844, 0.0, -1.1444091796875e-05, -0.0006504058837890625, -0.000164031982421875, -5.7220458984375e-06, -5.7220458984375e-06, -0.6265897750854492, 0.0, -0.0002155303955078125, -0.00212860107421875, -0.0001068115234375, -0.041220903396606445, -3.814697265625e-06, -9.5367431640625e-06, -3.814697265625e-06, -0.2668344974517822, -1.3709050108445808e-05, 0.0, -0.13459396362304688, -4.57763671875e-05, 0.0, 0.0, -0.607177734375, -0.003047943115234375, 0.0, -0.018825531005859375, -0.649993896484375, -2.86102294921875e-05, -4.38690185546875e-05, -2.6702880859375e-05, -0.0023660659790039062, -2.300739288330078e-05, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -5.91278076171875e-05, 0.0, -0.7305850982666016, -4.768370445162873e-07, -0.000232696533203125, -1.9073486328125e-06, -0.013161063194274902, -6.294249760685489e-05, -1.52587890625e-05, -0.0075092315673828125, -0.001590728759765625, 0.0, -1.9073486328125e-06, -0.47933387756347656, -0.008042335510253906, -3.814697265625e-06, -0.0001926422119140625, -0.0001983642578125, 0.0, -0.4156739413738251, 0.0, -0.0035066604614257812, -0.5571956634521484, -4.00543212890625e-05, 0.0, -0.003963470458984375, -0.0004825592041015625, -1.9073486328125e-06, -7.62939453125e-06, -0.0031871795654296875, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.08263206481933594, -0.00024175643920898438, -1.1444091796875e-05, -0.02739715576171875, -0.023122787475585938, -1.9073486328125e-06, 0.0, -0.008326530456542969, -0.00014495849609375, 0.0, -0.04774665832519531, -0.00012969970703125, -0.000217437744140625, -9.5367431640625e-06, -1.9073486328125e-06, -0.0004444122314453125, -1.919269561767578e-05, 0.0, -6.866455078125e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -4.9591064453125e-05, -1.9073486328125e-06, -0.3916025161743164, -5.960462772236497e-07, -3.4332275390625e-05, -2.288818359375e-05, -9.5367431640625e-06, -0.4181647300720215, 0.0, -0.012537002563476562, -1.1444091796875e-05, -0.16899096965789795, -0.00025594234466552734, 0.0, -0.000461578369140625, -3.814697265625e-06, -0.000602453073952347, -1.9073486328125e-06, -3.218649908376392e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mal'Ganis", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Mal'Ganis", "<EOS>", "9", "<EOS>", "WARLOCK", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 35, 265, 284, 40, 136, 19, 160, "Battlecry", "<EOS>", 283, 40, 136, 19, 160, "Give", "<EOS>", 282, 62, 252, "Change", "Attack", "<EOS>", 282, 40, 136, 19, 160, "Attribute", "<EOS>", 283, 48, 169, "<UNK>", "<EOS>", 68, 260, "Hero", "Selector", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 283, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 68, 260, "Both", "Player", "<EOS>", 40, 136, 19, 160, "Random", "Picker", "<EOS>", 282, 47, 165, "9", "<EOS>", 40, 137, 19, 160, "Greater", "Than", "<EOS>", 282, 40, 136, 19, 160, "Count", "<EOS>", 282, 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "9", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(\n            EventValue()), HeroSelector()))])\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "MistressOfPain", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "__init__", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "WARLOCK", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Attribute", "attr": "RARE", "value": {"id": "CARD_RARITY", "_type": "Name"}}], "_type": "Call", "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}}}}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}, {"targets": [{"id": "amount", "_type": "Name"}], "_type": "Assign", "value": {"func": {"_type": "Attribute", "attr": "is_minion", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"id": "hearthbreaker", "_type": "Name"}}}}, "_type": "Call"}}, {"test": {"comparators": [{"n": 0, "_type": "Num"}], "_type": "Compare", "ops": [{"_type": "Gt"}], "left": {"id": "index", "_type": "Name"}}, "orelse": [{"targets": [{"id": "new_card", "_type": "Name"}], "_type": "Assign", "value": {"func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"id": "hearthbreaker", "_type": "Name"}}}}, "_type": "Call"}}], "_type": "If", "body": [{"targets": [{"id": "left_minion", "_type": "Name"}], "_type": "Assign", "value": {"slice": {"_type": "Index", "value": {"right": {"n": 1, "_type": "Num"}, "op": {"_type": "Sub"}, "_type": "BinOp", "left": {"id": "index", "_type": "Name"}}}, "_type": "Subscript", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Attribute", "attr": "game", "value": {"id": "player", "_type": "Name"}}}}}]}, {"targets": [{"id": "index", "_type": "Name"}], "_type": "Assign", "value": {"_type": "Attribute", "attr": "index", "value": {"_type": "Attribute", "attr": "target", "value": {"id": "self", "_type": "Name"}}}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        amount = hearthbreaker.cards.minions.is_minion()\n        if index > 0:\n            left_minion = player.game.other_player[index - 1]\n        else:\n            new_card = hearthbreaker.cards.minions.Huffer()\n        index = self.target.index\n", "score": -22.901667143744795, "score_history": [-0.0002288818359375, 0.0, -1.1444091796875e-05, -7.62939453125e-06, -1.71661376953125e-05, -0.00014876213390380144, -0.002502599498257041, -0.0042595695704221725, -5.602834789897315e-06, -5.340576171875e-05, -7.62939453125e-06, 0.0, -1.9073486328125e-06, 0.0, -4.0531158447265625e-06, -9.5367431640625e-06, -0.46286582946777344, -2.47955322265625e-05, -0.0001242160506080836, 0.0, -1.9073486328125e-06, -4.00543212890625e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -1.33514404296875e-05, -8.392333984375e-05, -2.288818359375e-05, -0.0001678466796875, -0.00080108642578125, -9.5367431640625e-06, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -1.0013580322265625e-05, -1.1444091796875e-05, -5.53131103515625e-05, 0.0, -0.0001659393310546875, -3.4332275390625e-05, -0.0002346038818359375, -0.00011193125828867778, -8.976459503173828e-05, -0.006918309722095728, -0.00018310546875, -0.002751258434727788, 0.0, -7.62939453125e-06, -3.814697265625e-06, -0.00012421145220287144, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.24249267578125e-05, 0.0, -0.0001659393310546875, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -3.4332275390625e-05, -1.1444091796875e-05, -1.33514404296875e-05, -1.1920928244535389e-07, -0.002635955810546875, -0.00010025501251220703, -0.000148773193359375, -0.0026674270629882812, -2.6702880859375e-05, -0.23993051052093506, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.00021183490753173828, -9.5367431640625e-06, -0.0004367828369140625, 0.0, -0.7082967758178711, -1.1444091796875e-05, -0.017223358154296875, -1.52587890625e-05, -0.0005741119384765625, -3.814697265625e-06, -8.0108642578125e-05, -9.34600830078125e-05, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -1.1920928244535389e-07, -7.05718994140625e-05, -1.728534698486328e-05, -9.655935173213948e-06, -0.6603183746337891, -0.0001125335693359375, -3.814697265625e-06, -1.33514404296875e-05, -5.7220458984375e-06, -0.0001316070556640625, -1.33514404296875e-05, -3.0517578125e-05, 0.0, -8.296966552734375e-05, -5.7220458984375e-06, -0.000408172607421875, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -7.62939453125e-06, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.21869945526123047, -3.814697265625e-06, -3.814697265625e-06, -7.05718994140625e-05, -1.9073486328125e-06, -2.196193218231201, 0.0, -0.0039615631103515625, -0.5210819244384766, -0.0007104873657226562, 0.0, -3.0517578125e-05, 0.0, -0.08504486083984375, -1.9073486328125e-06, -0.0032138824462890625, -3.814697265625e-06, -0.19310712814331055, 0.0, -0.03158283233642578, -7.62939453125e-06, -0.0445941686630249, -2.47955322265625e-05, -1.831781029701233, -0.03127419948577881, -0.3051271438598633, -0.08156681060791016, -0.1414480209350586, -3.814697265625e-06, -0.2588834762573242, -0.0001735687255859375, -1.5584728717803955, 0.0, -4.38690185546875e-05, -0.2847728729248047, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -0.0002112385700456798, 0.0, -0.0006618499755859375, -0.04202556610107422, -0.0008792877197265625, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -1.6402442455291748, 0.0, -0.46637725830078125, -0.0006237030029296875, -0.0001010894775390625, -4.9591064453125e-05, -0.0002079010009765625, -1.9073486328125e-06, -0.25530052185058594, -1.9073486328125e-06, -0.180242657661438, -1.1920928244535389e-07, -0.029053568840026855, 0.0, -0.26919281482696533, 0.0, -0.001220703125, -0.0001163482666015625, -0.1872692108154297, -0.0014400482177734375, -0.00063323974609375, -1.9073486328125e-06, -0.05218374729156494, -4.00543212890625e-05, -0.41685962677001953, -0.008475303649902344, -7.62939453125e-06, -0.0003097057342529297, -1.9073486328125e-06, -0.0157623291015625, -0.0022220611572265625, -0.00034332275390625, 0.0, -0.00034332275390625, -1.9073486328125e-06, -1.6961008310317993, -3.814697265625e-06, -0.6297340393066406, -0.5973930358886719, -0.000179290771484375, 0.0, -1.33514404296875e-05, -1.71661376953125e-05, -0.021352767944335938, -1.1444091796875e-05, -0.0031299591064453125, -5.7220458984375e-06, -0.6426347494125366, 0.0, -0.025943756103515625, -3.814697265625e-06, -0.04142725467681885, -3.62396240234375e-05, -2.170281410217285, -0.005756378173828125, -0.9114055633544922, -0.0001583099365234375, -4.9591064453125e-05, -0.012746810913085938, -1.9073486328125e-06, -2.1910109519958496, -3.814697265625e-06, -0.004641532897949219, -4.00543212890625e-05, -0.001415252685546875, -3.814697265625e-06, -0.043193817138671875, -1.9073486328125e-06, -0.1919776201248169, -1.33514404296875e-05, -0.00263214111328125, -3.814697265625e-06, -0.2275010347366333, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Mistress", "Of", "Pain", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Mistress", " ", "of", " ", "Pain", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "amount", "<EOS>", 14, 134, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "is_minion", "<EOS>", 92, 147, 15, 139, 19, 160, "index", "<EOS>", 279, 3, 282, 47, 165, "0", "<EOS>", 295, 85, 128, 282, 45, 160, "left_minion", "<EOS>", 22, 171, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", 83, 150, 12, 131, 19, 160, "index", "<EOS>", 82, 21, 165, "1", "<EOS>", 295, 85, 128, 282, 45, 160, "new_card", "<EOS>", 14, 134, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "Huffer", "<EOS>", 85, 128, 282, 45, 160, "index", "<EOS>", 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "index", "<EOS>"]}]}
{"gold_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=RandomPicker())))\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Powermace", "_type": "ClassDef", "body": [{"_type": "Template16", "hole2": "SHAMAN", "hole1": 3, "hole0": "Powermace"}, {"name": "create_weapon", "_type": "FunctionDef", "body": [{"_type": "Return", "value": {"func": {"id": "Weapon", "_type": "Name"}, "args": [{"n": 3, "_type": "Num"}, {"n": 2, "_type": "Num"}], "_type": "Call", "keywords": [{"_type": "Template31", "hole3": "IncreasePowermace", "hole1": "IncreasePowermace", "hole0": "WeaponAttack"}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "WeaponCard", "_type": "Name"}]}]}, "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(WeaponAttack(), ActionTag(\n            IncreasePowermace(), IncreasePowermace()))])\n", "score": -2.94587221139264, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -8.34461570775602e-06, -0.0007686609169468284, -7.62939453125e-06, 0.0, 0.0, -0.0014122724533081055, -2.7298927307128906e-05, -2.3841855067985307e-07, -0.001224517822265625, -0.040856361389160156, -2.288818359375e-05, -3.576278118089249e-07, -1.9073486328125e-06, -0.001277923583984375, -1.9073486328125e-06, -0.024379968643188477, 0.0, -0.002960205078125, -1.9073486328125e-06, -0.0045680999755859375, -1.9073486328125e-06, -7.62939453125e-06, -0.0007190704345703125, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -1.1563301086425781e-05, 0.0, -0.00020599365234375, -0.0001964569091796875, -3.24249267578125e-05, -0.0003147125244140625, -0.0001983642578125, -2.288818359375e-05, 0.0, -0.00366973876953125, 0.0, -5.340576171875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -7.987022399902344e-06, -4.0531158447265625e-06, -5.7220458984375e-06, -5.14984130859375e-05, -2.6941299438476562e-05, -6.794906312279636e-06, -0.0022411346435546875, -0.18178653717041016, -0.17610454559326172, -0.9473050832748413, -0.2088707685470581, -0.00020802021026611328, -0.17866083979606628, -0.31625062227249146, -8.809524297248572e-05, -0.4635803997516632, -0.3874987065792084, -0.00017404060054104775], "choice_history": [80, 159, 295, 88, 138, "Powermace", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 102, 185, "Powermace", "<EOS>", "3", "<EOS>", "SHAMAN", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "3", "<EOS>", 47, 165, "2", "<EOS>", 290, 71, 206, "Weapon", "Attack", "<EOS>", "Increase", "Powermace", "<EOS>", "Increase", "Powermace", "<EOS>"]}]}
{"gold_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "ScrewjankClunker", "_type": "ClassDef", "body": [{"hole4": "minion_type", "hole8": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"_type": "Template66", "hole2": 4, "hole1": "ChangeHealth", "hole0": "Give"}, {"_type": "Template41", "hole0": "UserPicker"}], "_type": "Call"}, "hole2": "WARRIOR", "hole1": 4, "hole7": "battlecry", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Template9", "hole3": "RARE", "hole6": "MECH", "hole0": "Screwjank Clunker"}, {"_type": "Template27", "hole1": 5, "hole0": 2}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -0.4574709857051573, "score_history": [-0.0003070831298828125, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -0.009149174205958843, -0.00021741451928392053, -5.483620952873025e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, 0.0, -5.7220458984375e-05, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0014019012451171875, -0.0001621246337890625, -9.583967766957358e-05, -1.2278553185751662e-05, -1.6808467989903875e-05, -1.9073486328125e-06, -1.1444089977885596e-05, 0.0, -0.0042934417724609375, -1.9073486328125e-06, -0.05062389373779297, 0.0, -0.00015842914581298828, 0.0, -6.29425048828125e-05, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -0.0022487640380859375, 0.0, -0.000469207763671875, 0.0, -0.006244659423828125, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -0.0002480745315551758, -1.9073486328125e-06, -1.1444091796875e-05, -0.24157238006591797, -0.0009860992431640625, -0.002109765773639083, -1.9073486328125e-06, -3.3497806725790724e-05, -0.019613265991210938, 0.0, -0.010578655637800694, -1.9073486328125e-06, -0.06622886657714844, -0.01995849609375, -0.01497650146484375, -0.00533294677734375, 0.0, -6.4849853515625e-05, -7.62939453125e-06, -6.615901656914502e-05, 0.0, -6.38953351881355e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Screwjank", "Clunker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 59, 248, "Give", "<EOS>", "Change", "Health", "<EOS>", "4", "<EOS>", 53, 219, "User", "Picker", "<EOS>", 110, 202, "2", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class SneedsOldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])),\n            PlayerSelector()))\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "<UNK>OldShredder", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole4": {"_type": "Attribute", "attr": "MECH", "value": {"id": "MINION_TYPE", "_type": "Name"}}, "hole2": "LEGENDARY", "hole1": 8, "_type": "Template34", "hole3": "minion_type", "hole0": "<UNK> Old Shredder"}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"hole3": {"_type": "Template39", "hole2": {"elts": [{"func": {"id": "ManaCost", "_type": "Name"}, "args": [{"n": 2, "_type": "Num"}], "_type": "Call"}, {"_type": "Template76_expr_seq", "hole0": "IsMinion"}], "_type": "List"}, "hole1": "conditions", "hole0": "Summon"}, "_type": "Template23", "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "score": -2.246582199992183, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.43865966796875e-05, -5.7220458984375e-06, -0.00021038226259406656, -0.06101749837398529, -0.0040338048711419106, -3.647756966529414e-05, -1.33514404296875e-05, -1.1444091796875e-05, 0.0, 0.0, -1.71661376953125e-05, 0.0, -2.47955322265625e-05, -0.007892608642578125, -9.5367431640625e-06, -8.058547973632812e-05, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -1.9073486328125e-05, -1.33514404296875e-05, 0.0, -0.000919342041015625, -0.04994487762451172, -0.0023660659790039062, -0.42294806241989136, -5.745887756347656e-05, -0.001885652425698936, -0.3814353942871094, -0.0006053447723388672, -2.09808349609375e-05, -0.00012481211160775274, -1.9073486328125e-06, -0.008153915405273438, -2.491474151611328e-05, -2.682209014892578e-05, -1.52587890625e-05, -0.000102996826171875, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.0002880096435546875, 0.0, -0.001148223876953125, 0.0, -0.26492881774902344, -0.0002994537353515625, -0.11906016618013382, -1.9073468138230965e-06, -0.00021469198691193014, -1.1920928244535389e-07, -0.00422978401184082, -2.0265579223632812e-06, -0.4565896987915039, -0.005131721496582031, -0.0004629137401934713, -0.00010132767056347802, -0.005023955833166838, -0.00020873545145150274, -0.001434326171875, -6.103515625e-05, -0.0008640289306640625, -0.000308990478515625, -0.0002994537353515625, -3.814697265625e-06, -0.0003108978271484375, -0.1941678524017334, -0.009109735488891602, -2.288818359375e-05, -7.2479248046875e-05, -5.7220458984375e-05, -1.1444091796875e-05, -0.18842875957489014, -3.814697265625e-06, -0.035378456115722656, -0.0001678466796875, -0.003849148517474532, -0.01217186450958252, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Old", "Shredder", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 112, 211, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 109, 200, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 24, 216, "Summon", "<EOS>", "conditions", "<EOS>", 17, 155, 283, 40, 136, 19, 160, "Mana", "Cost", "<EOS>", 282, 47, 165, "2", "<EOS>", 67, 259, "Is", "Minion", "<EOS>"]}]}
{"gold_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Toshley", "_type": "ClassDef", "body": [{"hole3": "LEGENDARY", "_type": "Template19", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}, {"hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"func": {"id": "AddCard", "_type": "Name"}, "args": [{"func": {"id": "CardQuery", "_type": "Name"}, "_type": "Call", "keywords": [{"arg": "conditions", "_type": "keyword", "value": {"elts": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Attribute", "attr": "MECH", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "_type": "Call"}, {"_type": "Template77", "hole0": "BothPlayer"}], "_type": "List"}}]}], "_type": "Call"}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"func": {"id": "AddCard", "_type": "Name"}, "args": [{"func": {"id": "CardQuery", "_type": "Name"}, "_type": "Call", "keywords": [{"arg": "source", "_type": "keyword", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"id": "CARD_SOURCE", "_type": "Name"}}}]}], "_type": "Call"}, {"_type": "Template77", "hole0": "PlayerSelector"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template23", "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            conditions=[IsType(MINION_TYPE.MECH), BothPlayer()])),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.<UNK>)),\n            PlayerSelector())))\n", "score": -5.759772323336378, "score_history": [-0.0003948211669921875, -1.71661376953125e-05, -5.7220458984375e-06, -1.1444091796875e-05, -2.09808349609375e-05, -2.8967464459128678e-05, -0.00026452523889020085, -1.9073486328125e-06, -4.1961669921875e-05, 0.0, -5.7220458984375e-06, -1.3470649719238281e-05, -3.933906555175781e-06, -0.000118255615234375, -0.14690876007080078, -0.0002288818359375, 0.0, -2.861022494471399e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -0.00010824200580827892, -9.894371032714844e-06, -0.0001398324966430664, -4.6491513785440475e-06, -0.009019851684570312, -3.0517578125e-05, -0.001063704490661621, -1.1920922133867862e-06, -0.00012528352090157568, -1.1920928244535389e-07, -0.015363812446594238, -9.655952453613281e-06, -0.3514900207519531, -0.00018310546875, -3.814697265625e-06, -1.9073486328125e-06, -0.00014126300811767578, -1.9073486328125e-06, -0.0006694793701171875, -0.023430824279785156, -0.014329910278320312, -6.4849853515625e-05, -0.003780364990234375, -0.6340208053588867, -0.0015288491267710924, -0.0004255161911714822, -0.024789810180664062, -0.0035638809204101562, -6.4849853515625e-05, -7.62939453125e-05, 0.0, -7.724761962890625e-05, -0.009152562357485294, -2.0265579223632812e-06, -0.0029239654541015625, -0.000522613525390625, -1.9073486328125e-05, -0.7175936698913574, 0.0, -0.0038356781005859375, -0.000152587890625, -0.4632530212402344, -0.0001678466796875, -0.01148223876953125, -1.9073486328125e-06, -9.1552734375e-05, -0.02723252773284912, -0.23150789737701416, 0.0, -0.0004730224609375, -5.7220458984375e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.0035648345947265625, -3.933906555175781e-06, -0.06109905242919922, -5.9604644775390625e-06, -0.6093044281005859, 0.0, -0.5634446144104004, -1.1563301086425781e-05, -7.05718994140625e-05, -0.4329051971435547, -0.0011539459228515625, 0.0, 0.0, -0.022975683212280273, -7.43865966796875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -0.0023241043090820312, -0.10749626159667969, -3.0517578125e-05, -0.0003337860107421875, -0.033630408346652985, -0.00017940578982234, -0.002793471794575453, -0.0001850128173828125, -3.24249267578125e-05, -0.000263214111328125, -0.00038909912109375, 0.0, -6.365776062011719e-05, -0.008589501492679119, -1.9431114196777344e-05, -0.000392913818359375, -0.000209808349609375, -2.86102294921875e-05, -0.7251729965209961, 0.0, -0.0007543563842773438, -2.09808349609375e-05, -2.6702880859375e-05, 0.0, -0.001499176025390625, -1.9073486328125e-06, -0.35909759998321533, -1.9073486328125e-06, -0.11893463134765625, 0.0, -0.0016425848007202148, -6.198883056640625e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Toshley", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 105, 188, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", 109, 200, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 14, 136, 19, 160, "Deathrattle", "<EOS>", 283, 40, 136, 19, 160, "Add", "Card", "<EOS>", 282, 40, 135, 19, 160, "Card", "Query", "<EOS>", 290, 79, 271, "conditions", "<EOS>", 17, 155, 283, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 68, 260, "Both", "Player", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 40, 136, 19, 160, "Add", "Card", "<EOS>", 282, 40, 135, 19, 160, "Card", "Query", "<EOS>", 290, 79, 271, "source", "<EOS>", 11, 129, 19, 160, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 68, 260, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Warbot", "_type": "ClassDef", "body": [{"_type": "Template6", "hole2": "WARRIOR", "hole1": 1, "hole0": "Warbot"}, {"hole3": {"elts": [{"func": {"id": "Aura", "_type": "Name"}, "args": [{"_type": "Template73", "hole0": 1}, {"_type": "Template77", "hole0": "SelfSelector"}], "_type": "Call"}], "_type": "List"}, "_type": "Template23", "hole2": "enrage", "hole1": 3, "hole0": 1}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "score": -0.8042685529189839, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.2278481335670222e-05, -0.00020563602447509766, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -1.33514404296875e-05, -0.4261903762817383, -0.0014371871948242188, -4.005352093372494e-05, -7.748603820800781e-06, -0.00047528743743896484, 0.0, -0.01710057258605957, 0.0, -0.0017185211181640625, -0.000232696533203125, -4.7681533033028245e-07, 0.0, -2.2768945200368762e-05, 0.0, -0.07053565979003906, -0.0003032684326171875, -0.0002231597900390625, -7.2479248046875e-05, -0.014566421508789062, -0.00029754638671875, -7.05718994140625e-05, -3.814697265625e-06, 0.0, -0.0006029605865478516, 0.0, -0.0005855560302734375, -0.001613616943359375, -0.0015354156494140625, -0.049425601959228516, -1.1444091796875e-05, -0.00022125244140625, -1.33514404296875e-05, -0.2166721373796463, -2.6822082872968167e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Warbot", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Warbot", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", 109, 200, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(\n            CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)),\n            PlayerSelector(EnemyPlayer())))\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Deathlord", "_type": "ClassDef", "body": [{"_type": "Template16", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}, {"name": "create_minion", "_type": "FunctionDef", "body": [{"_type": "Return", "value": {"func": {"id": "Minion", "_type": "Name"}, "args": [{"n": 2, "_type": "Num"}, {"n": 8, "_type": "Num"}], "_type": "Call", "keywords": [{"arg": "taunt", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}, {"_type": "Template44", "hole0": 8}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, enrage=[Aura(ChangeAttack(8),\n            SelfSelector())])\n", "score": -1.1738549855162717, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.00010227633902104571, -0.00019514461746439338, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -4.529952548182337e-06, -1.1563301086425781e-05, -1.1205658665858209e-05, -8.96453857421875e-05, -0.009889602661132812, -3.814697265625e-05, -3.4570634852570947e-06, -2.312659489689395e-05, -9.655952453613281e-06, -2.3841855067985307e-07, -3.1590458092978224e-05, 0.0, -0.5820684432983398, -1.1444091796875e-05, -9.918212890625e-05, -2.1457672119140625e-06, -5.14984130859375e-05, -4.57763671875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0005664825439453125, -7.641315460205078e-05, 0.0, -0.0001468658447265625, -0.0010318756103515625, -0.000659942626953125, -0.0001964569091796875, -3.814697265625e-05, -7.62939453125e-06, 0.0, -0.0007529258728027344, -0.0001964569091796875, -2.6702880859375e-05, -1.1444091796875e-05, -7.62939453125e-06, -9.775161743164062e-06, -6.318072337307967e-06, -7.82012939453125e-05, -1.9073486328125e-06, -0.00019407272338867188, -1.0609622222546022e-05, -0.022307395935058594, -0.0055980682373046875, -3.814697265625e-06, -0.2474682331085205, 0.0, -0.0001354217529296875, -0.0002307891845703125, -1.71661376953125e-05, -1.9073486328125e-06, -0.14689350128173828, -0.0064907073974609375, -0.14788489043712616, -7.259845733642578e-05], "choice_history": [80, 159, 295, 88, 138, "Deathlord", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 102, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Minion", "<EOS>", 283, 47, 165, "2", "<EOS>", 47, 165, "8", "<EOS>", 291, 79, 271, "taunt", "<EOS>", 20, 161, "True", "<EOS>", 73, 222, "8", "<EOS>"]}]}
{"gold_code": "class NerubarWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(\n            BothPlayer(), HasBattlecry()))])\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Nerub'arWeblord", "_type": "ClassDef", "body": [{"hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"id": "MINION_TYPE", "_type": "Name"}}, "hole2": "ALL", "hole1": 2, "_type": "Template11", "hole3": "minion_type", "hole0": "Nerub'ar Weblord"}, {"name": "create_minion", "_type": "FunctionDef", "body": [{"_type": "Return", "value": {"func": {"id": "Minion", "_type": "Name"}, "args": [{"n": 1, "_type": "Num"}, {"n": 4, "_type": "Num"}], "_type": "Call", "keywords": [{"arg": "charge", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}, {"arg": "taunt", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 4, charge=True, taunt=True)\n", "score": -2.1076911651538097, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -7.950943836476654e-05, -1.7046782886609435e-05, -2.67025734501658e-05, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -1.1920928244535389e-07, -5.7220458984375e-06, -8.344646857949556e-07, -2.09808349609375e-05, -0.05575275421142578, -5.340576171875e-05, -3.099436753473128e-06, -8.70227722771233e-06, -9.775161743164062e-06, -1.9073486328125e-06, -2.872943878173828e-05, 0.0, -4.017353057861328e-05, 0.0, -0.04897129535675049, -1.52587890625e-05, -0.0006122589111328125, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -0.16872692108154297, -4.38690185546875e-05, -0.36058712005615234, -9.5367431640625e-06, -3.0875205993652344e-05, -8.344650268554688e-06, -3.814697265625e-06, -0.0008563995361328125, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.00238800048828125, -1.1920928244535389e-07, -0.0033092498779296875, -0.00091552734375, -5.91278076171875e-05, -0.00037384033203125, -8.392333984375e-05, -1.9073486328125e-05, 0.0, -2.6702880859375e-05, -2.6702880859375e-05, -0.0001373291015625, -6.4849853515625e-05, -1.1444091796875e-05, -1.060962586052483e-05, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -6.556497282872442e-06, -1.9073486328125e-06, -0.003467559814453125, -0.00016021728515625, -8.20159912109375e-05, -0.07613372802734375, -1.9073486328125e-06, -0.000507354736328125, -0.0001220703125, -7.748603820800781e-06, 0.0, -0.2595357894897461, -0.000911712646484375, -1.1222431659698486, 0.0, -0.0010623931884765625, -5.7220458984375e-06, -2.384185791015625e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Nerub'ar", "Weblord", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Minion", "<EOS>", 283, 47, 165, "1", "<EOS>", 47, 165, "4", "<EOS>", 291, 79, 271, "charge", "<EOS>", 20, 161, "True", "<EOS>", 79, 271, "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}]}
{"gold_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "SpectralKnight", "_type": "ClassDef", "body": [{"_type": "Template15", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}, {"hole3": {"_type": "NameConstant", "value": true}, "_type": "Template23", "hole2": "spell_targetable", "hole1": 6, "hole0": 4}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=True)\n", "score": -0.3042582064981616, "score_history": [0.0, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -1.4424220353248529e-05, -4.327246642787941e-05, -1.9550132492440753e-05, -2.86102294921875e-05, -2.47955322265625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -5.841255187988281e-06, -3.62396240234375e-05, -0.0012874603271484375, -0.00011444091796875, -2.9802276912960224e-06, -1.9431114196777344e-05, -2.586841583251953e-05, -7.62939453125e-06, -6.914122786838561e-05, -1.9073486328125e-06, -7.62939453125e-05, -0.004009246826171875, -0.00461578369140625, -7.2479248046875e-05, -4.959047510055825e-05, -0.00011837482452392578, -0.0002935931843239814, -0.0010148286819458008, -0.1865314245223999, -1.9073486328125e-06, -0.10240840911865234, -0.0003833770751953125, -0.0029355287551879883, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Spectral", "Knight", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 109, 200, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 20, 161, "False", "<EOS>"]}]}
{"gold_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "WailingSoul", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole4": [{"func": {"id": "SpellDamage", "_type": "Name"}, "args": [{"n": 1, "_type": "Num"}], "_type": "Call"}], "hole2": "RARE", "hole1": 4, "hole7": [{"arg": "condition", "_type": "keyword", "value": {"_type": "Template77", "hole0": "Adjacent"}}], "hole5": "MinionSelector", "_type": "Template20", "hole3": "Silence", "hole0": "Wailing Soul"}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"_type": "Template27", "hole1": 5, "hole0": 3}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(SpellDamage(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -1.809705859827396, "score_history": [-0.0001506805419921875, -2.09808349609375e-05, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -0.029936006292700768, -3.8265450712060556e-05, -0.00012945409980602562, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -1.1920928244535389e-07, -7.641315460205078e-05, -9.536738616588991e-07, -5.7220458984375e-05, -0.012309074401855469, -1.71661376953125e-05, -3.3020962291629985e-05, -2.503394853192731e-06, -9.5367431640625e-06, -0.00030517578125, -1.71661376953125e-05, -2.002716064453125e-05, -2.3841855067985307e-07, -1.9073486328125e-05, -0.0020475387573242188, -0.14114761352539062, -2.074220174108632e-05, -3.576272865757346e-05, -2.0265579223632812e-06, -9.5367431640625e-06, -1.0728830375228426e-06, -5.7220458984375e-06, -0.08493733406066895, -0.0014415971236303449, -0.02017723210155964, -0.001485586166381836, -0.0027446746826171875, -0.009894371032714844, -0.4472513198852539, -0.00029754638671875, 0.0, -0.05934631824493408, -0.1334390640258789, -0.0005588531494140625, -8.96453857421875e-05, -0.00061798095703125, -9.5367431640625e-06, -0.06291604787111282, -1.9073486328125e-06, -0.09684455394744873, -0.0001811981201171875, -8.439661905867979e-05, -0.05775737762451172, -2.86102294921875e-05, -1.9073486328125e-06, -0.36282968521118164, -0.00021646064124070108, -0.23275470733642578, -0.0003032684326171875, -0.038399696350097656, -0.003961679991334677, -0.004657745361328125, -3.814697265625e-06, -1.025199526338838e-05, 0.0, -1.4066696166992188e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Wailing", "Soul", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 107, 197, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 282, 40, 136, 19, 160, "Spell", "Damage", "<EOS>", 282, 47, 165, "1", "<EOS>", "Minion", "Selector", "<EOS>", 290, 79, 271, "condition", "<EOS>", 33, 260, "Adjacent", "<EOS>", 110, 202, "3", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "AmaniBerserker", "_type": "ClassDef", "body": [{"_type": "Template15", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}, {"hole3": {"elts": [{"func": {"id": "Aura", "_type": "Name"}, "args": [{"_type": "Template73", "hole0": 1}, {"_type": "Template77", "hole0": "SelfSelector"}], "_type": "Call"}, {"func": {"id": "Aura", "_type": "Name"}, "args": [{"_type": "Template77", "hole0": "Attack"}, {"_type": "Template77", "hole0": "SelfSelector"}], "_type": "Call"}], "_type": "List"}, "_type": "Template23", "hole2": "enrage", "hole1": 3, "hole0": 2}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(1), SelfSelector()),\n            Aura(Attack(), SelfSelector())])\n", "score": -0.6693909721468856, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.0002637753786984831, -2.5987286790041253e-05, -2.3841855067985307e-07, -3.814697265625e-06, -2.86102294921875e-05, 0.0, -5.841255187988281e-06, -3.814697265625e-06, -2.1457672119140625e-06, -4.00543212890625e-05, -0.001796722412109375, -9.1552734375e-05, -2.729855441430118e-05, -4.4107433495810255e-05, -2.384185791015625e-06, 0.0, -0.00013732902880292386, 0.0, -0.00015473365783691406, -1.9073486328125e-06, -0.03516674041748047, -1.52587890625e-05, -1.5139352399273776e-05, 0.0, -6.115421274444088e-05, -5.960462772236497e-07, -0.09902286529541016, -0.0005036592483520508, -0.001552581787109375, -6.866455078125e-05, -0.2946205139160156, -0.0004901885986328125, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.0010836124420166016, 0.0, -0.000164031982421875, -0.002532958984375, -0.0001430511474609375, -0.10567402839660645, -1.33514404296875e-05, -0.0003108978271484375, -0.0005340576171875, -0.011235475540161133, -0.0003682374954223633, 0.0, -0.001132965087890625, -0.011827468872070312, -3.814697265625e-06, -5.7220458984375e-06, -0.0054912567138671875, -7.62939453125e-06, -7.62939453125e-06, -0.0007801055908203125, -0.0005283355712890625, -0.018823955208063126, -0.0022956132888793945, -0.05180168151855469, -1.71661376953125e-05, -0.020070074126124382, -0.00033867359161376953, 0.0], "choice_history": [80, 159, 295, 88, 138, "Amani", "Berserker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 17, 155, 283, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 68, 260, "Self", "Selector", "<EOS>", 40, 136, 19, 160, "Aura", "<EOS>", 283, 68, 260, "Attack", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            hearthbreaker.cards.Fireball()), PlayerSelector()))])\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "ArchmageAntonidas", "_type": "ClassDef", "body": [{"hole3": "LEGENDARY", "_type": "Template19", "hole2": "MAGE", "hole1": 7, "hole0": "Archmage Antonidas"}, {"hole3": {"elts": [{"func": {"id": "Effect", "_type": "Name"}, "args": [{"func": {"id": "SpellCast", "_type": "Name"}, "_type": "Call", "keywords": [{"arg": "player", "_type": "keyword", "value": {"_type": "Template77", "hole0": "EnemyPlayer"}}]}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"func": {"id": "AddCard", "_type": "Name"}, "args": [{"func": {"id": "CardQuery", "_type": "Name"}, "_type": "Call", "keywords": [{"arg": "source", "_type": "keyword", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"id": "CARD_SOURCE", "_type": "Name"}}}]}], "_type": "Call"}, {"_type": "Template77", "hole0": "PlayerSelector"}], "_type": "Call"}], "_type": "Call"}, {"func": {"id": "Effect", "_type": "Name"}, "args": [{"func": {"id": "SpellCast", "_type": "Name"}, "args": [{"func": {"id": "AddCard", "_type": "Name"}, "args": [{"func": {"id": "CardQuery", "_type": "Name"}, "_type": "Call", "keywords": [{"arg": "source", "_type": "keyword", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"id": "CARD_SOURCE", "_type": "Name"}}}]}], "_type": "Call"}, {"_type": "Template69", "hole1": "<UNK>Player", "hole0": "PlayerSelector"}], "_type": "Call"}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"func": {"id": "AddCard", "_type": "Name"}, "args": [{"func": {"id": "CardQuery", "_type": "Name"}, "_type": "Call", "keywords": [{"arg": "source", "_type": "keyword", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"id": "CARD_SOURCE", "_type": "Name"}}}]}], "_type": "Call"}, {"_type": "Template77", "hole0": "PlayerSelector"}], "_type": "Call"}], "_type": "Call"}], "_type": "List"}, "_type": "Template23", "hole2": "effects", "hole1": 7, "hole0": 5}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(player=EnemyPlayer()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.<UNK>)),\n            PlayerSelector())), Effect(SpellCast(AddCard(CardQuery(source=\n            CARD_SOURCE.<UNK>)), PlayerSelector(<UNK>Player())), ActionTag(\n            AddCard(CardQuery(source=CARD_SOURCE.<UNK>)), PlayerSelector()))])\n", "score": -7.028132418387024, "score_history": [-7.82012939453125e-05, -6.4849853515625e-05, -4.38690185546875e-05, -3.62396240234375e-05, -3.814697265625e-06, -0.005081485956907272, -0.0001538873475510627, -0.00010990611917804927, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -5.91278076171875e-05, -0.007731437683105469, -0.0001239776611328125, -0.00011836781777674332, -1.7046926586772315e-05, -6.079673767089844e-06, -1.9073486328125e-06, -0.0016503953374922276, 0.0, -0.001094818115234375, -1.1444091796875e-05, -6.294241757132113e-05, 0.0, -0.1131439208984375, -6.866455078125e-05, -8.499620162183419e-05, -1.1920928244535389e-07, -0.007098575588315725, 0.0, -0.007304191589355469, -1.1444091796875e-05, -5.7220458984375e-06, -8.96453857421875e-05, -0.2730426788330078, -1.9073486328125e-05, -2.6702880859375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.021900653839111328, 0.0, -1.33514404296875e-05, -3.4332275390625e-05, -0.06542396545410156, -5.7220458984375e-06, -1.9073486328125e-06, -0.527454137802124, -0.017203330993652344, -1.9073486328125e-06, -0.0001087188720703125, -1.33514404296875e-05, -2.09808349609375e-05, -5.5909156799316406e-05, 0.0, -0.0002079010009765625, -1.9073486328125e-05, -0.5825642347335815, -7.867813110351562e-06, 0.0, -0.00014495849609375, -0.000156402587890625, 0.0, 0.0, -0.0013217926025390625, -0.00041961669921875, -7.62939453125e-06, -0.0003490447998046875, -0.01187896728515625, -0.12079143524169922, -9.5367431640625e-06, -0.000102996826171875, -0.09647355228662491, -0.0009711980819702148, -0.0001164674322353676, -4.76837158203125e-05, -4.1961669921875e-05, -0.0003528594970703125, -0.00011444091796875, -1.33514404296875e-05, -0.0003110170364379883, -0.011381864547729492, -1.9073486328125e-06, -5.53131103515625e-05, -1.71661376953125e-05, -9.5367431640625e-06, -0.08881533145904541, 0.0, -1.71661376953125e-05, -1.71661376953125e-05, -4.9591064453125e-05, 0.0, -0.0037403106689453125, -1.9073486328125e-06, -0.0047560930252075195, -9.5367431640625e-06, -0.5339984893798828, -5.7220458984375e-06, -0.0007634162320755422, -0.0012784004211425781, 0.0, -0.0001354217529296875, -0.0026073455810546875, 0.0, 0.0, -0.15351295471191406, -5.7220458984375e-06, -0.000339508056640625, -0.00101470947265625, -0.5163002014160156, -3.814697265625e-06, 0.0, -0.3214606046676636, -0.06981182098388672, 0.0, -0.030580520629882812, -0.0002422332763671875, -0.0036678314208984375, -1.9073486328125e-05, -1.1444091796875e-05, -0.7121811509132385, -0.0001614093780517578, -0.001931905746459961, -8.96453857421875e-05, -8.392333984375e-05, -0.0010833740234375, -0.0003566741943359375, -7.62939453125e-06, -0.00030541419982910156, -0.03973209857940674, 0.0, -3.4332275390625e-05, -4.1961669921875e-05, -2.86102294921875e-05, -0.22632622718811035, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -3.62396240234375e-05, 0.0, -0.0021657943725585938, -3.814697265625e-06, -0.005535244941711426, -5.7220458984375e-06, -0.39455509185791016, 0.0, -0.09195196628570557, -0.00026166439056396484, 0.0, -0.22475719451904297, -0.39930689334869385, -3.814697265625e-06, -0.0002231597900390625, -0.08237838745117188, 0.0, 0.0, -0.01758861541748047, -0.00042247772216796875, -1.52587890625e-05, -0.000232696533203125, -0.008220672607421875, -0.3579587936401367, -1.1444091796875e-05, -5.53131103515625e-05, -0.03073626011610031, -0.00040411949157714844, -0.00033295145840384066, -5.7220458984375e-05, -3.0517578125e-05, -0.0003757476806640625, -0.0001544952392578125, -7.62939453125e-06, -0.0002747774124145508, -0.01368570327758789, -1.9073486328125e-06, -4.9591064453125e-05, -2.288818359375e-05, -1.33514404296875e-05, -0.265399694442749, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -5.340576171875e-05, 0.0, -0.00286865234375, -1.9073486328125e-06, -0.004868745803833008, -9.5367431640625e-06, -0.5269594192504883, -5.7220458984375e-06, -0.0017559528350830078, -0.0012627840042114258, 0.0], "choice_history": [80, 159, 295, 88, 138, "Archmage", "Antonidas", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 105, 188, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", 109, 200, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 155, 283, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Spell", "Cast", "<EOS>", 290, 79, 271, "player", "<EOS>", 33, 260, "Enemy", "Player", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 40, 136, 19, 160, "Add", "Card", "<EOS>", 282, 40, 135, 19, 160, "Card", "Query", "<EOS>", 290, 79, 271, "source", "<EOS>", 11, 129, 19, 160, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 68, 260, "Player", "Selector", "<EOS>", 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 136, 19, 160, "Spell", "Cast", "<EOS>", 283, 40, 136, 19, 160, "Add", "Card", "<EOS>", 282, 40, 135, 19, 160, "Card", "Query", "<EOS>", 290, 79, 271, "source", "<EOS>", 11, 129, 19, 160, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 61, 250, "Player", "Selector", "<EOS>", "<UNK>", "Player", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 40, 136, 19, 160, "Add", "Card", "<EOS>", 282, 40, 135, 19, 160, "Card", "Query", "<EOS>", 290, 79, 271, "source", "<EOS>", 11, 129, 19, 160, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 68, 260, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Bananas", "_type": "ClassDef", "body": [{"hole4": "DEMON", "hole2": "minion_type", "hole1": "COMMON", "_type": "Template7", "hole3": {"id": "MINION_TYPE", "_type": "Name"}, "hole0": "Bananas"}, {"_type": "Template5", "hole2": [{"n": 1, "_type": "Num"}], "hole1": "change_attack", "hole0": {"_type": "Attribute", "attr": "target", "value": {"id": "self", "_type": "Name"}}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.DEMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "score": -1.4611549673727495, "score_history": [-9.5367431640625e-06, -1.1444091796875e-05, -6.29425048828125e-05, -8.96453857421875e-05, -8.20159912109375e-05, -4.136476854910143e-05, -4.577635263558477e-05, -2.6702880859375e-05, 0.0, 0.0, -0.0018683671951293945, -6.4849853515625e-05, -0.0001373291015625, -7.05718994140625e-05, -0.002613067626953125, -0.0010080337524414062, -0.0018240257631987333, -1.001357759378152e-05, -0.0017824172973632812, -8.20159912109375e-05, -0.5897866487503052, -7.62939453125e-06, -0.00579833984375, -7.62939453125e-06, -0.04078865051269531, -2.47955322265625e-05, -0.5833253860473633, -0.0017547607421875, -0.036594390869140625, -0.0011348724365234375, -1.1444091796875e-05, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -5.7220458984375e-05, -3.62396240234375e-05, -0.0001354217529296875, 0.0, -0.1587362289428711, -3.063678741455078e-05, -3.814697265625e-06, -0.010546684265136719, -2.86102294921875e-05, -0.02248683199286461, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bananas", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 121, 251, "Bananas", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "1", "<EOS>"]}]}
{"gold_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(DoubleAttack()))\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "BlessedChampion", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "__init__", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"_type": "Attribute", "attr": "PALADIN", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Attribute", "attr": "RARE", "value": {"id": "CARD_RARITY", "_type": "Name"}}], "_type": "Call", "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}}}}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"_type": "Template5", "hole2": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"id": "self", "_type": "Name"}}}], "hole1": "change_attack", "hole0": {"_type": "Attribute", "attr": "target", "value": {"id": "self", "_type": "Name"}}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(self.target.health)\n", "score": -1.9792975503369092, "score_history": [-2.288818359375e-05, -1.52587890625e-05, -3.4332275390625e-05, -3.4332275390625e-05, 0.0, -9.894321920000948e-06, -2.7537107598618604e-05, -1.1920928244535389e-07, -0.000263214111328125, 0.0, 0.0, -0.00017595291137695312, -3.933906555175781e-06, -7.867813110351562e-06, -0.000579833984375, -0.004899024963378906, -1.9073486328125e-06, -5.8770154282683507e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -7.62939453125e-06, 0.0, -3.62396240234375e-05, -5.53131103515625e-05, -6.103515625e-05, -0.04813957214355469, -0.0004291534423828125, -2.47955322265625e-05, -1.71661376953125e-05, -0.0008220672607421875, -4.76837158203125e-05, -2.4557106371503323e-05, -1.71661376953125e-05, -0.000518798828125, 0.0, -0.000225067138671875, -0.000186920166015625, -3.814697265625e-06, -4.887569048150908e-06, -1.561641511216294e-05, -0.0001923877716762945, -4.76837158203125e-05, -4.57763671875e-05, -3.814697265625e-06, -0.003538894932717085, -3.814697265625e-06, -0.0002536773681640625, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -7.283687591552734e-05, -8.344646857949556e-07, -0.0006618499755859375, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -5.91278076171875e-05, -5.340576171875e-05, -2.3126602172851562e-05, -1.0728830375228426e-06, -0.13148212432861328, -1.7404556274414062e-05, -4.76837158203125e-05, -0.0023298263549804688, -0.000148773193359375, -0.0019006729125976562, 0.0, -0.0001239776611328125, -9.5367431640625e-06, -2.47955322265625e-05, -0.000171661376953125, -4.00543212890625e-05, -3.814697265625e-06, -0.0012383460998535156, -2.09808349609375e-05, -4.57763671875e-05, -1.1920928244535389e-07, -0.18503296375274658, -0.00033473968505859375, -0.26366519927978516, -0.3415870666503906, -2.288818359375e-05, 0.0, -0.0020427703857421875, -1.9073486328125e-06, -0.00048065185546875, -0.0002079010009765625, -0.0001201629638671875, -1.9073486328125e-06, -0.3436164855957031, -7.68899917602539e-05, -1.9073486328125e-06, -0.5349521636962891, -3.814697265625e-06, -0.00316619873046875, -7.62939453125e-06, -0.000518798828125, 0.0, -0.00048148632049560547, -5.7220458984375e-05, -1.9073486328125e-05, -2.47955322265625e-05, -0.10342228412628174, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Blessed", "Champion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Blessed", " ", "Champion", "<EOS>", 47, 165, "5", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}]}
{"gold_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(\n            AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "CabalPriest", "_type": "ClassDef", "body": [{"hole4": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"_type": "Template77", "hole0": "Kill"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "args": [{"func": {"id": "AttackGreaterThan", "_type": "Name"}, "args": [{"n": 6, "_type": "Num"}], "_type": "Call"}, {"_type": "Template77", "hole0": "BothPlayer"}], "_type": "Call"}], "_type": "Call"}, "hole2": "PRIEST", "hole1": 6, "_type": "Template12", "hole3": "battlecry", "hole0": "Cabal Shadow"}, {"_type": "Template27", "hole1": 5, "hole0": 4}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class CabalPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            AttackGreaterThan(6), BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -2.0852024794025326, "score_history": [-4.57763671875e-05, 0.0, -1.1444091796875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0007838514284230769, -0.009915871545672417, -0.016603710129857063, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -2.6702880859375e-05, -3.576278118089249e-07, -0.0003566741943359375, -0.005526542663574219, -0.0002384185791015625, -1.6212332411669195e-05, -5.6504501117160544e-05, -0.0026978233363479376, -0.030612945556640625, -0.0004048880364280194, -1.9073486328125e-06, -0.0012073516845703125, 0.0, -0.08407843112945557, 0.0, -0.01964282989501953, -3.24249267578125e-05, -9.5367431640625e-06, 0.0, -0.001704096794128418, -7.62939453125e-06, -0.001079559326171875, -0.2645845413208008, -2.09808349609375e-05, -0.2686322331428528, -1.3351433153729886e-05, -0.0042171478271484375, -0.0075283050537109375, -3.814697265625e-06, 0.0, -0.0009073019027709961, -0.0014629364013671875, -1.1920928244535389e-07, -0.013301849365234375, -0.0001068115234375, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -0.38721370697021484, -0.17723000049591064, -0.00016427040100097656, -0.0006721019162796438, -3.814697265625e-06, -0.0020599365234375, -7.05718994140625e-05, -0.7679526209831238, 0.0, -0.00093841552734375, -4.9591064453125e-05, -0.00709378719329834, -6.377696990966797e-05, -1.9073486328125e-06, -0.0006427764892578125, -1.1444091796875e-05, -8.308848191518337e-05, -1.6689286894688848e-06, -0.005045173689723015, 0.0], "choice_history": [80, 159, 295, 88, 138, "Cabal", "Priest", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 99, 182, "Cabal", " ", "Shadow", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 68, 260, "Kill", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 283, 40, 136, 19, 160, "Attack", "Greater", "Than", "<EOS>", 282, 47, 165, "6", "<EOS>", 68, 260, "Both", "Player", "<EOS>", 110, 202, "4", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        index = self.target.index\n        if self.target.index < len(self.target.player.minions) - 1:\n            minion = self.target.player.minions[index + 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target.index > 0:\n            minion = self.target.player.minions[index - 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "ConeOfCold", "_type": "ClassDef", "body": [{"hole4": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "hole2": "MAGE", "hole1": 4, "_type": "Template11", "hole3": "target_func", "hole0": "Cone of Cold"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}, {"targets": [{"id": "index", "_type": "Name"}], "_type": "Assign", "value": {"_type": "Attribute", "attr": "index", "value": {"_type": "Attribute", "attr": "target", "value": {"id": "self", "_type": "Name"}}}}, {"test": {"comparators": [{"_type": "Attribute", "attr": "target", "value": {"id": "self", "_type": "Name"}}], "_type": "Compare", "ops": [{"_type": "IsNot"}], "left": {"id": "minion", "_type": "Name"}}, "_type": "If", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "damage", "value": {"id": "minion", "_type": "Name"}}, "args": [{"_type": "Template71", "hole0": 1}, {"id": "self", "_type": "Name"}], "_type": "Call"}}]}, {"test": {"comparators": [{"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"id": "game", "_type": "Name"}}}], "_type": "Compare", "ops": [{"_type": "IsNot"}], "left": {"_type": "Attribute", "attr": "target", "value": {"id": "self", "_type": "Name"}}}, "_type": "If", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"id": "game", "_type": "Name"}}}}, "args": [{"_type": "Template71", "hole0": 1}, {"id": "self", "_type": "Name"}], "_type": "Call"}}]}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        index = self.target.index\n        if minion is not self.target:\n            minion.damage(player.effective_spell_damage(1), self)\n        if self.target is not game.other_player.hero:\n            game.other_player.hero.damage(player.effective_spell_damage(1),\n                self)\n", "score": -6.013474197625776, "score_history": [-1.9073486328125e-05, -8.0108642578125e-05, -3.4332275390625e-05, -8.7738037109375e-05, -0.000125885009765625, -4.970903682988137e-05, -0.0007175173377618194, -0.05028405413031578, -9.775130820344202e-06, -0.000186920166015625, -3.814697265625e-06, -1.9073486328125e-06, -0.0002976655960083008, -1.33514404296875e-05, -3.814697265625e-05, -0.000347137451171875, -0.7963428497314453, -0.0001010894775390625, -8.344646857949556e-07, -0.00011754034494515508, -1.6450876501039602e-05, -1.5497207641601562e-05, -2.7894961021956988e-05, -2.288818359375e-05, -2.861018401745241e-06, 0.0, -0.0019893646240234375, -1.1444091796875e-05, -0.006191253662109375, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.0004024505615234375, -2.288818359375e-05, -0.000217437744140625, 0.0, -0.3278113603591919, 0.0, -0.0003299713134765625, -5.7220458984375e-06, -4.76837158203125e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -3.933906555175781e-06, 0.0, -1.33514404296875e-05, -2.1457672119140625e-06, -2.384185791015625e-06, -0.2969837188720703, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, -1.33514404296875e-05, -0.000118255615234375, -9.5367431640625e-06, -6.866455078125e-05, -1.33514404296875e-05, -1.919269561767578e-05, -3.814697265625e-06, -2.6702880859375e-05, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -3.814697265625e-06, -2.6702880859375e-05, 0.0, -2.47955322265625e-05, -2.86102294921875e-05, -1.71661376953125e-05, -9.655952453613281e-06, -0.3211946487426758, -3.814697265625e-06, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -1.092251181602478, 0.0, -0.0960550308227539, -1.9073486328125e-06, -8.392333984375e-05, -2.09808349609375e-05, -0.0032863616943359375, 0.0, -0.0011053085327148438, -1.52587890625e-05, -0.00022125244140625, -5.7220458984375e-06, -0.03714752197265625, -1.9073486328125e-06, -0.04506969451904297, -0.000335693359375, -0.0001506805419921875, -9.5367431640625e-06, -0.23273563385009766, -5.7220458984375e-06, -0.6973896026611328, 0.0, -7.43865966796875e-05, -0.08303356170654297, -1.71661376953125e-05, -0.2440643310546875, 0.0, -0.008146286010742188, -1.9073486328125e-06, -0.00018024444580078125, 0.0, -0.0004596710205078125, -1.9073486328125e-06, -0.000194549560546875, -0.000133514404296875, -3.814697265625e-06, -0.00121307373046875, -5.14984130859375e-05, -9.5367431640625e-06, 0.0, -0.0061664581298828125, 0.0, -0.014831185340881348, 0.0, -0.011803865432739258, -1.9073486328125e-06, -2.09808349609375e-05, -0.05214405059814453, -0.0002651214599609375, -0.004887464456260204, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.01653873920440674, -3.4332275390625e-05, -0.20904064178466797, -0.0017452239990234375, -0.0022144317626953125, -3.814697265625e-05, -0.07123184204101562, 0.0, -0.05625724792480469, 0.0, -0.009088635444641113, 0.0, -0.00018215179443359375, 0.0, -5.53131103515625e-05, -0.6359109878540039, -2.86102294921875e-05, -0.008805274963378906, 0.0, -0.03472709655761719, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -0.24104690551757812, 0.0, -0.002460479736328125, 0.0, -0.022635510191321373, -1.1920928244535389e-07, -0.0018367767333984375, -9.72747802734375e-05, -1.71661376953125e-05, -0.00063323974609375, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.015489578247070312, 0.0, -0.011693954467773438, -1.9073486328125e-06, -0.004192352294921875, 0.0, -0.0753164291381836, 0.0, -0.02865123748779297, 0.0, -0.006097028031945229, -4.768370445162873e-07, -0.022584915161132812, -2.6702880859375e-05, -4.00543212890625e-05, -0.015240669250488281, -0.0012884140014648438, -9.769905591383576e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -0.07952439785003662, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Cone", "Of", "Cold", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "index", "<EOS>", 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "index", "<EOS>", 92, 146, 15, 139, 19, 160, "minion", "<EOS>", 279, 7, 282, 37, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>", 92, 146, 15, 139, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", 279, 7, 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>"]}]}
{"gold_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "DefenderOfArgus", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole2": "RARE", "hole1": 4, "hole5": "Taunt", "_type": "Template20", "hole3": "Kill", "hole6": [{"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"hole3": 2, "_type": "Template28", "hole2": "ChangeHealth", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template77", "hole0": "SelfSelector"}], "_type": "Call"}], "hole0": "Defender Argus"}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"_type": "Template27", "hole1": 3, "hole0": 2}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Kill(), Taunt(ActionTag(\n            Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]),\n            SelfSelector()))))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -5.371451571854536, "score_history": [-3.0517578125e-05, -3.814697265625e-06, -2.86102294921875e-05, -3.0517578125e-05, -8.58306884765625e-05, -4.768258077092469e-05, -0.0030277755577117205, -0.00010716419637901708, -9.154871804639697e-05, -1.33514404296875e-05, -1.52587890625e-05, 0.0, -2.1457672119140625e-06, -0.00095367431640625, -2.50339189733495e-06, -1.9073486328125e-05, -0.001800537109375, -1.1444091796875e-05, -0.00015008436457719654, -1.1920928244535389e-07, -3.814697265625e-06, -0.0005970001220703125, -0.0001430511474609375, -0.00010132789611816406, -3.814697265625e-06, -6.866455078125e-05, -0.008295059204101562, -1.7404356002807617, -0.0015705404803156853, -1.7881393432617188e-05, -0.45442402362823486, -0.0008716583251953125, -4.172325134277344e-06, 0.0, -0.6023731231689453, -0.00046753883361816406, -0.5907138586044312, -2.264974000354414e-06, -0.2519945800304413, -5.9604644775390625e-05, -0.004611015319824219, -0.006165504455566406, -1.33514404296875e-05, -1.71661376953125e-05, 0.0, -1.0912543535232544, -7.271766662597656e-05, -2.09808349609375e-05, -0.013360023498535156, -0.37253665924072266, -0.0003299713134765625, -7.784263289067894e-05, -0.00910341739654541, -6.4849853515625e-05, -0.1395787000656128, -7.748603820800781e-06, -0.0003795623779296875, -0.016843795776367188, -1.9073486328125e-06, -0.05542027950286865, -1.3470649719238281e-05, -0.0009937286376953125, -7.62939453125e-06, -0.0004525184631347656, -8.606910705566406e-05, 0.0, -0.0010700225830078125, -3.814697265625e-06, -0.0003318192029837519, 0.0, -6.330012547550723e-05, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Defender", "Of", "Argus", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 107, 193, "Defender", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Kill", "<EOS>", "Taunt", "<EOS>", 282, 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 50, 203, "Change", "Attack", "<EOS>", "2", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 68, 260, "Self", "Selector", "<EOS>", 110, 202, "2", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, buffs=[Buff(Windfury())])\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Doomhammer", "_type": "ClassDef", "body": [{"hole4": {"n": 1, "_type": "Num"}, "hole2": "SHAMAN", "hole1": 5, "_type": "Template12", "hole3": "overload", "hole0": "Doomhammer"}, {"name": "create_weapon", "_type": "FunctionDef", "body": [{"_type": "Return", "value": {"func": {"id": "Weapon", "_type": "Name"}, "args": [{"n": 2, "_type": "Num"}, {"n": 8, "_type": "Num"}], "_type": "Call", "keywords": [{"arg": "effects", "_type": "keyword", "value": {"elts": [{"func": {"id": "Effect", "_type": "Name"}, "args": [{"_type": "Template69", "hole1": "IsHero", "hole0": "CharacterAttack"}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"func": {"id": "Heal", "_type": "Name"}, "args": [{"n": 8, "_type": "Num"}], "_type": "Call"}, {"_type": "Template77", "hole0": "HeroSelector"}], "_type": "Call"}], "_type": "Call"}], "_type": "List"}}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "WeaponCard", "_type": "Name"}]}]}, "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=1)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, effects=[Effect(CharacterAttack(IsHero()),\n            ActionTag(Heal(8), HeroSelector()))])\n", "score": -1.5837640634031516, "score_history": [-1.9073486328125e-05, -2.09808349609375e-05, -7.62939453125e-06, -5.7220458984375e-06, -9.5367431640625e-06, -2.3841830625315197e-06, -0.0003719313535839319, -2.09808349609375e-05, 0.0, 0.0, -0.0017137527465820312, -3.826618194580078e-05, -2.0265579223632812e-06, -6.866455078125e-05, -0.0370635986328125, -0.0003814697265625, -1.5497195136049413e-06, -5.7220458984375e-06, -2.384185791015625e-05, -1.9073486328125e-06, -0.0002040863037109375, 0.0, -0.015606045722961426, -0.0002957582473754883, -0.1412038803100586, -1.71661376953125e-05, -0.15571226179599762, 0.0, -0.013376235961914062, -1.71661376953125e-05, -0.000640869140625, -0.0002956390380859375, -1.9073486328125e-06, -0.0001049041748046875, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0009365081787109375, -0.000766754150390625, -3.62396240234375e-05, -4.9591064453125e-05, -0.14905929565429688, -3.4332275390625e-05, 0.0, -0.007150888442993164, 0.0, -0.0003376007080078125, -4.9591064453125e-05, -7.62939453125e-06, -5.960446287645027e-07, -3.576278118089249e-07, -3.814697265625e-06, -3.814697265625e-06, -0.010426044464111328, -1.5377980162156746e-05, -0.11121940612792969, -0.016716957092285156, -2.6702880859375e-05, -0.00379180908203125, 0.0, -0.0001373291015625, -0.0002193450927734375, -0.008352279663085938, -0.006534576416015625, -7.43865966796875e-05, -5.7220458984375e-06, -1.71661376953125e-05, -0.0007404088973999023, -9.894371032714844e-06, -2.47955322265625e-05, -0.0022220611572265625, -8.392333984375e-05, -0.003159165382385254, -0.0009317398071289062, 0.0, -0.0064688920974731445, -0.0053336359560489655, -2.3841855067985307e-07, -1.9073486328125e-05, -0.0001773834228515625, -1.9073486328125e-06, 0.0, -0.00078582763671875, -0.000133514404296875, -3.62396240234375e-05, -0.0005340576171875, -0.0030126571655273438, -7.2479248046875e-05, -0.0001811981201171875, -6.4849853515625e-05, -0.42752981185913086, -0.0014709234237670898, -3.814697265625e-06, -0.000946044921875, 0.0, -0.3469550609588623, -3.814697265625e-06, -0.09900093078613281, -2.47955322265625e-05, -0.0005817413330078125, -2.1457672119140625e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Doomhammer", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 99, 182, "Doomhammer", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", "overload", "<EOS>", 21, 165, "1", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "2", "<EOS>", 47, 165, "8", "<EOS>", 290, 79, 271, "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 61, 250, "Character", "Attack", "<EOS>", "Is", "Hero", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 40, 136, 19, 160, "Heal", "<EOS>", 282, 47, 165, "8", "<EOS>", 68, 260, "Hero", "Selector", "<EOS>"]}]}
{"gold_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence()\n        self.target.damage(player.effective_spell_damage(1), self)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "EarthShock", "_type": "ClassDef", "body": [{"_type": "Template3", "hole2": "SHAMAN", "hole1": 1, "hole0": "Earth Shock"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}, {"targets": [{"id": "left_minion", "_type": "Name"}], "_type": "Assign", "value": {"_type": "NameConstant", "value": "Null"}}, {"targets": [{"id": "right_minion", "_type": "Name"}], "_type": "Assign", "value": {"slice": {"_type": "Index", "value": {"right": {"n": 1, "_type": "Num"}, "op": {"_type": "Sub"}, "_type": "BinOp", "left": {"id": "index", "_type": "Name"}}}, "_type": "Subscript", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"id": "game", "_type": "Name"}}}}}}, {"test": {"comparators": [{"n": 0, "_type": "Num"}], "_type": "Compare", "ops": [{"_type": "Gt"}], "left": {"id": "index", "_type": "Name"}}, "_type": "If", "body": [{"targets": [{"id": "minion", "_type": "Name"}], "_type": "Assign", "value": {"slice": {"_type": "Index", "value": {"right": {"n": 1, "_type": "Num"}, "op": {"_type": "Sub"}, "_type": "BinOp", "left": {"id": "index", "_type": "Name"}}}, "_type": "Subscript", "value": {"_type": "Attribute", "attr": "index", "value": {"_type": "Attribute", "attr": "target", "value": {"id": "self", "_type": "Name"}}}}}]}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        left_minion = Null\n        right_minion = game.other_player.minions.minions[index - 1]\n        if index > 0:\n            minion = self.target.index[index - 1]\n", "score": -11.242979238558263, "score_history": [-5.53131103515625e-05, -3.0517578125e-05, -7.82012939453125e-05, -2.86102294921875e-05, -2.09808349609375e-05, -9.179073458653875e-06, -0.0004408587992656976, -2.3841855067985307e-07, -0.0002307891845703125, -1.9073486328125e-06, 0.0, -0.0005646944046020508, -7.62939453125e-06, -1.1444091796875e-05, -0.0001678466796875, -0.7402448654174805, -0.0001392364501953125, -1.3470558769768104e-05, -1.1444091796875e-05, -6.0796710386057384e-06, -1.9073486328125e-05, -2.2291187633527443e-05, -1.9073486328125e-06, -0.0002613067626953125, 0.0, -0.03458690643310547, -9.72747802734375e-05, -0.0010166168212890625, 0.0, -7.62939453125e-06, -1.9073486328125e-05, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -1.1801719665527344e-05, -0.039742469787597656, -1.33514404296875e-05, -3.814697265625e-06, -0.0002079010009765625, -1.52587890625e-05, -0.0002899169921875, -2.6702880859375e-05, -6.103515625e-05, -2.09808349609375e-05, -4.208087921142578e-05, -7.62939453125e-06, -2.47955322265625e-05, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -5.340576171875e-05, 0.0, -4.00543212890625e-05, -3.0517578125e-05, -1.9073486328125e-05, -7.62939453125e-06, -0.057625770568847656, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -1.0808324813842773, 0.0, -0.2887687683105469, -0.0018777847290039062, -0.000263214111328125, -3.814697265625e-06, -0.002689361572265625, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.0532958507537842, 0.0, -0.5581741333007812, -0.000537872314453125, -0.001018524169921875, -0.0007038116455078125, -0.0007381439208984375, -7.62939453125e-06, -0.6708660125732422, -0.0003986358642578125, -0.0002269744873046875, 0.0, -0.5474910736083984, -1.9073486328125e-06, -0.0041484832763671875, -1.9073486328125e-06, -0.008653836324810982, -7.82012939453125e-05, -0.2969515323638916, -5.7220458984375e-06, -0.013640403747558594, -0.001743316650390625, -0.032423973083496094, -0.0004425048828125, -0.0001926422119140625, 0.0, -0.031223297119140625, -5.340576171875e-05, -0.4994535446166992, -0.002288818359375, -9.5367431640625e-06, -8.20159912109375e-05, -3.814697265625e-06, -0.5468635559082031, -0.0003108978271484375, -0.002429962158203125, -7.82012939453125e-05, -0.13277435302734375, 0.0, -0.8724284172058105, -5.7220458984375e-06, -0.001277923583984375, -0.47349071502685547, -0.000896453857421875, -0.0005855560302734375, -1.71661376953125e-05, -0.0005972100771032274, 0.0, -0.7889881134033203, -0.0001373291015625, -0.0006504058837890625, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.1493912935256958, 0.0, -0.02630329132080078, -0.0006275177001953125, -0.0004673004150390625, -0.00049591064453125, -0.00028228759765625, -1.52587890625e-05, -0.06468391418457031, 0.0, -0.022386550903320312, -3.814697265625e-06, -0.013638496398925781, -1.9073486328125e-05, -0.11122322082519531, -1.9073486328125e-06, -0.3273801803588867, -0.0013446807861328125, -0.03383922576904297, -0.0004730224609375, -0.0002422332763671875, 0.0, -0.11847162246704102, -6.4849853515625e-05, -0.5726089477539062, -0.0016326904296875, -5.7220458984375e-06, -0.0001125335693359375, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Earth", "Shock", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "left_minion", "<EOS>", 20, 162, "Null", "<EOS>", 85, 128, 282, 45, 160, "right_minion", "<EOS>", 22, 171, 11, 129, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", "minions", "<EOS>", 83, 150, 12, 131, 19, 160, "index", "<EOS>", 82, 21, 165, "1", "<EOS>", 92, 146, 15, 139, 19, 160, "index", "<EOS>", 279, 3, 282, 47, 165, "0", "<EOS>", 295, 85, 128, 282, 45, 160, "minion", "<EOS>", 22, 171, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "index", "<EOS>", 83, 150, 12, 131, 19, 160, "index", "<EOS>", 82, 21, 165, "1", "<EOS>"]}]}
{"gold_code": "class EyeForAnEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, character, attacker, amount):\n        if character.is_hero():\n            character.player.opponent.hero.damage(amount, self)\n        super().reveal()\n\n    def activate(self, player):\n        player.bind('character_damaged', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('character_damaged', self._reveal)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Eye<UNK>", "_type": "ClassDef", "body": [{"_type": "Template15", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye for Eye"}, {"name": "_reveal", "_type": "FunctionDef", "body": [{"test": {"values": [{"func": {"_type": "Attribute", "attr": "<UNK>", "value": {"id": "card", "_type": "Name"}}, "_type": "Call"}, {"comparators": [{"n": 7, "_type": "Num"}], "_type": "Compare", "ops": [{"_type": "Lt"}], "left": {"_type": "Template67", "hole1": "player", "hole0": {"id": "self", "_type": "Name"}}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "If", "body": [{"targets": [{"id": "mirror", "_type": "Name"}], "_type": "Assign", "value": {"func": {"_type": "Attribute", "attr": "copy", "value": {"id": "copy", "_type": "Name"}}, "args": [{"_type": "Attribute", "attr": "game", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"id": "game", "_type": "Name"}}}}], "_type": "Call"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "extend", "value": {"id": "targets", "_type": "Name"}}, "args": [{"_type": "Attribute", "attr": "minions", "value": {"id": "player", "_type": "Name"}}], "_type": "Call"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "extend", "value": {"id": "targets", "_type": "Name"}}, "args": [{"_type": "Attribute", "attr": "minions", "value": {"id": "player", "_type": "Name"}}], "_type": "Call"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Attribute", "attr": "other_player", "value": {"id": "game", "_type": "Name"}}}, "_type": "Call"}}]}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "attacker", "_type": "arg"}, {"arg": "target", "_type": "arg"}], "_type": "arguments"}}, {"name": "activate", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "bind", "value": {"id": "player", "_type": "Name"}}, "args": [{"s": "<UNK>", "_type": "Str"}, {"_type": "Attribute", "attr": "_reveal", "value": {"id": "self", "_type": "Name"}}], "_type": "Call"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}}, {"name": "deactivate", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "bind", "value": {"id": "player", "_type": "Name"}}, "args": [{"s": "<UNK>", "_type": "Str"}, {"_type": "Attribute", "attr": "_reveal", "value": {"id": "self", "_type": "Name"}}], "_type": "Call"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "SecretCard", "_type": "Name"}]}]}, "inferred_code": "class Eye<UNK>(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if card.<UNK>() and len(self.player.minions) < 7:\n            mirror = copy.copy(game.other_player.minions.game)\n            targets.extend(player.minions)\n            targets.extend(player.minions)\n            game.other_player.draw()\n\n    def activate(self, player):\n        player.bind('<UNK>', self._reveal)\n\n    def deactivate(self, player):\n        player.bind('<UNK>', self._reveal)\n", "score": -17.49663875155545, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.00028987551922909915, -0.2435273826122284, -0.21860595047473907, -4.38690185546875e-05, 0.0, -1.9073486328125e-06, -0.26511240005493164, -7.62939453125e-06, -4.649161837733118e-06, -0.023303985595703125, -0.0025424957275390625, -0.0008754730224609375, -0.22527562081813812, -0.00012028217315673828, -0.2148146629333496, -0.0043048858642578125, -0.0001707039773464203, 0.0, -1.4543071301886812e-05, 0.0, -0.0020198822021484375, 0.0, -0.0001163482666015625, -2.6702880859375e-05, -0.7258187532424927, 0.0, -0.0003662109375, -0.0026712417602539062, -1.9073486328125e-06, -0.0022907257080078125, -6.866455078125e-05, 0.0, -0.8050165176391602, -1.7046921129804105e-05, 0.0, -0.7673540115356445, -1.71661376953125e-05, -2.09808349609375e-05, -0.00125885009765625, -6.29425048828125e-05, -0.021974563598632812, -8.392333984375e-05, -0.000148773193359375, -0.012528419494628906, -0.0809183120727539, -0.697239875793457, -0.000720977783203125, -0.0124969482421875, -0.0035715103149414062, 0.0, -0.0177079439163208, 0.0, -0.8597736358642578, 0.0, -0.013468742370605469, -2.288818359375e-05, -0.7511301040649414, -0.0003299713134765625, -8.20159912109375e-05, -7.62939453125e-06, -0.011095046997070312, -1.33514404296875e-05, -0.0008630752563476562, 0.0, -5.53131103515625e-05, -0.2082681655883789, -8.392333984375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.09967684000730515, -1.52587890625e-05, -1.0187206268310547, -0.013418197631835938, -3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, 0.0, -1.5892457962036133, 0.0, -0.013576507568359375, -9.918212890625e-05, -6.4849853515625e-05, 0.0, -0.1371631622314453, 0.0, -0.1162177324295044, -9.5367431640625e-06, -0.0022754669189453125, -2.6702880859375e-05, -1.52587890625e-05, -0.010343551635742188, 0.0, -0.000682830810546875, -1.71661376953125e-05, -0.6440792083740234, -2.288818359375e-05, -0.0001697540283203125, 0.0, -0.013861298561096191, -2.0265579223632812e-06, -0.010746240615844727, -1.919269561767578e-05, -0.5108957290649414, -1.33514404296875e-05, -0.9478582143783569, -7.62939453125e-06, -0.0035963058471679688, -9.5367431640625e-06, -0.0002994537353515625, -0.0001373291015625, -0.0001354217529296875, 0.0, -0.1923694610595703, -1.1444091796875e-05, -0.21960270404815674, 0.0, -0.33724403381347656, -1.9073486328125e-06, -9.72747802734375e-05, -0.0004520416259765625, -1.9073486328125e-06, -0.12074661254882812, -9.5367431640625e-06, -0.29712772369384766, 0.0, -0.1583271026611328, -2.288818359375e-05, -0.000926971435546875, -1.9073486328125e-06, -1.9073486328125e-05, -0.3673591613769531, -4.00543212890625e-05, -1.9073486328125e-06, -0.011850357055664062, -1.9073486328125e-06, -0.29157745838165283, 0.0, -0.37899112701416016, -1.9073486328125e-06, -0.0001659393310546875, -0.0002346038818359375, 0.0, -0.07393836975097656, -7.62939453125e-06, -0.0020694732666015625, 0.0, -0.19649040699005127, -1.52587890625e-05, -0.0031843185424804688, -1.9073486328125e-06, -1.9073486328125e-05, -0.6188297271728516, -2.09808349609375e-05, 0.0, -0.8772373199462891, 0.0, -0.0055103302001953125, 0.0, -0.10087871551513672, 0.0, -0.007595062255859375, -4.768370445162873e-07, -0.11171448230743408, -1.9073486328125e-06, -0.00115966796875, -4.9591064453125e-05, -0.21979057788848877, -1.9073486328125e-06, -1.33514404296875e-05, -0.00022125244140625, 0.0, -1.52587890625e-05, -7.62939453125e-05, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -1.9073486328125e-05, -0.00014495849609375, -3.814697265625e-05, -0.0001811981201171875, -0.0003814697265625, -1.71661376953125e-05, 0.0, -0.027388572692871094, 0.0, -0.00044167041778564453, 0.0, -0.4994450807571411, 0.0, -0.0014553070068359375, -0.0002193450927734375, -9.5367431640625e-06, -0.1961195468902588, -0.00905609130859375, -0.0002536773681640625, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -0.0001621246337890625, -3.814697265625e-06, -0.00553131103515625, 0.0, -5.7220458984375e-05, -4.38690185546875e-05, -0.026523590087890625, 0.0, -2.6702880859375e-05, -0.0016717910766601562, 0.0, -1.1444091796875e-05, -7.2479248046875e-05, -3.814697265625e-06, -3.24249267578125e-05, 0.0, -1.71661376953125e-05, -0.0001163482666015625, -5.7220458984375e-06, -6.4849853515625e-05, -0.0014934539794921875, -3.814697265625e-05, 0.0, -0.020607948303222656, 0.0, -0.0002827644348144531, 0.0, -0.5192922353744507, 0.0, -0.001567840576171875, -0.00023651123046875, -9.5367431640625e-06, -0.23199152946472168, -0.017438888549804688, -0.00020599365234375, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -0.00016021728515625, -3.814697265625e-06, -0.005425453186035156, 0.0], "choice_history": [80, 159, 295, 88, 138, "Eye", "<UNK>", "<EOS>", 282, 45, 160, "Secret", "Card", "<EOS>", 298, 101, 184, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 91, 143, "_reveal", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "attacker", "<EOS>", 268, "target", "<EOS>", 295, 92, 146, 13, 132, 0, 283, 40, 134, 11, 129, 19, 160, "card", "<EOS>", "<UNK>", "<EOS>", 41, 139, 30, 249, 19, 160, "self", "<EOS>", "player", "<EOS>", 279, 8, 282, 47, 165, "7", "<EOS>", 298, 85, 128, 282, 45, 160, "mirror", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", "game", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "extend", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "extend", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 134, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "draw", "<EOS>", 91, 143, "activate", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "player", "<EOS>", "bind", "<EOS>", 283, 48, 169, "<UNK>", "<EOS>", 37, 129, 19, 160, "self", "<EOS>", "_reveal", "<EOS>", 91, 143, "deactivate", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "player", "<EOS>", "bind", "<EOS>", 283, 48, 169, "<UNK>", "<EOS>", 37, 129, 19, 160, "self", "<EOS>", "_reveal", "<EOS>"]}]}
{"gold_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in hearthbreaker.targeting.find_minion_spell_target(game,\n            lambda m: m.stealth):\n            minion.stealth = False\n        for secret in game.other_player.secrets:\n            secret.deactivate(game.other_player)\n        game.other_player.secrets = []\n        player.draw()\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Flare", "_type": "ClassDef", "body": [{"_type": "Template16", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}, {"iter": {"_type": "Attribute", "attr": "Stealth", "value": {"_type": "Attribute", "attr": "other_player", "value": {"id": "game", "_type": "Name"}}}, "_type": "For", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "add_buff", "value": {"id": "minion", "_type": "Name"}}, "args": [{"_type": "Template70", "hole1": [{"_type": "Template79", "hole0": 0}], "hole0": "ManaChange"}], "_type": "Call"}}], "target": {"id": "minion", "_type": "Name"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "draw", "value": {"id": "player", "_type": "Name"}}, "_type": "Call"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.Stealth:\n            minion.add_buff(Buff(ManaChange(-0)))\n        player.draw()\n", "score": -3.9108026560602127, "score_history": [-9.5367431640625e-06, -8.0108642578125e-05, -4.9591064453125e-05, -1.33514404296875e-05, 0.0, -1.6689160474925302e-05, -0.0003645148826763034, -3.0517578125e-05, 0.0, -2.288818359375e-05, -0.0009502172470092773, -2.2649765014648438e-06, -6.675719760096399e-06, -3.24249267578125e-05, -0.07265949249267578, -1.33514404296875e-05, 0.0, -2.0265579223632812e-06, -2.300739288330078e-05, 0.0, -0.0011874500196427107, -1.1444091796875e-05, -0.0002498626708984375, -3.814697265625e-06, -0.00010311603546142578, -1.9073486328125e-06, -1.9073486328125e-06, -3.0517578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -0.0002919435501098633, -3.933904736186378e-06, -0.156951904296875, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -4.76837158203125e-05, -4.38690185546875e-05, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -3.0875205993652344e-05, -3.814697265625e-06, -9.5367431640625e-06, -5.7220458984375e-06, -1.52587890625e-05, -3.814697265625e-06, -3.24249267578125e-05, -3.814697265625e-06, 0.0, -4.57763671875e-05, -3.814697265625e-06, -3.814697265625e-06, -5.364418029785156e-05, -0.39910030364990234, -2.09808349609375e-05, -1.71661376953125e-05, -5.7220458984375e-06, -0.032867431640625, -1.9073486328125e-06, -0.0010280609130859375, 0.0, -0.04145050048828125, 0.0, -6.103515625e-05, -7.62939453125e-06, -0.045108914375305176, -2.3841855067985307e-07, -0.0008558034896850586, -5.9604644775390625e-06, -0.7008308172225952, -0.02979278564453125, -0.010000228881835938, -0.000125885009765625, -1.9073486328125e-06, -3.814697265625e-06, -0.6637487411499023, -0.00054931640625, 0.0, -0.0012149810791015625, 0.0, -0.6053924560546875, -1.9073486328125e-06, -0.19109535217285156, 0.0, -1.71661376953125e-05, -0.1671123504638672, -0.001209259033203125, -0.001381039503030479, -4.7326087951660156e-05, 0.0, -0.0003814697265625, -0.022089004516601562, -0.0002803802490234375, -0.12708421051502228, -0.0002504586009308696, -0.002208709716796875, 0.0, -3.814697265625e-06, -0.6007261276245117, -0.010777473449707031, -1.9073486328125e-06, -0.009934425354003906, 0.0, -0.004845619201660156, 0.0, -0.00566554069519043, 0.0], "choice_history": [80, 159, 295, 88, 138, "Flare", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 102, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "Stealth", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "add_buff", "<EOS>", 282, 62, 252, "Mana", "Change", "<EOS>", 282, 69, 262, "Draw", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}]}
{"gold_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(),\n            TargetIsMinion())), [ActionTag(IncreaseDurability(),\n            WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1),\n            WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1),\n            AttackCompleted())), HeroSelector())])])\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Gorehowl", "_type": "ClassDef", "body": [{"hole4": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "hole2": "WARRIOR", "hole1": 7, "_type": "Template12", "hole3": "target_func", "hole0": "Gorehowl"}, {"_type": "Template0", "hole2": [{"n": 1, "_type": "Num"}], "hole1": "target", "hole0": {"id": "self", "_type": "Name"}}], "bases": [{"id": "WeaponCard", "_type": "Name"}]}]}, "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n", "score": -1.1717213894944436, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -6.437280717364047e-06, -0.01136285625398159, -3.814697265625e-06, 0.0, 0.0, -0.015669941902160645, -2.09808349609375e-05, -5.841255187988281e-06, -5.340576171875e-05, -0.1794872283935547, -8.96453857421875e-05, -1.9073468138230965e-06, -0.004900455474853516, -0.007692679762840271, -1.1920928244535389e-07, -0.0017604827880859375, 0.0, -0.023550033569335938, 0.0, -2.86102294921875e-05, -3.814697265625e-06, -0.0003204345703125, -3.814697265625e-06, -0.00035858154296875, -5.7220458984375e-06, -0.00022530555725097656, -3.814697265625e-06, -2.09808349609375e-05, 0.0, -0.03620433807373047, -8.976459503173828e-05, -0.08269596099853516, -0.0001468658447265625, -0.0001125335693359375, 0.0, -9.894371032714844e-06, -3.814697265625e-06, -0.0101776123046875, -5.7220458984375e-06, -1.52587890625e-05, -0.2905616760253906, -1.9073486328125e-06, -0.5060809850692749, 0.0], "choice_history": [80, 159, 295, 88, 138, "Gorehowl", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 99, 182, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "1", "<EOS>"]}]}
{"gold_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Hound", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "__init__", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"s": "Hound", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "HUNTER", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"id": "CARD_RARITY", "_type": "Name"}}], "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"id": "MINION_TYPE", "_type": "Name"}}}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"hole3": {"_type": "NameConstant", "value": true}, "_type": "Template23", "hole2": "charge", "hole1": 1, "hole0": 1}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score": -0.2367220717869145, "score_history": [-1.33514404296875e-05, -4.38690185546875e-05, -5.14984130859375e-05, -4.38690185546875e-05, -0.0004634857177734375, -1.4662635294371285e-05, -0.0009274099720641971, -1.9073486328125e-06, -1.33514404296875e-05, -3.814697265625e-06, -5.5670738220214844e-05, -2.47955322265625e-05, -3.0517578125e-05, -6.4849853515625e-05, -0.006169319152832031, -4.38690185546875e-05, -9.012222290039062e-05, -1.33514404296875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -3.0517578125e-05, 0.0, -1.52587890625e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.0014514923095703125, -1.52587890625e-05, 0.0, -2.47955322265625e-05, 0.0, -2.384185791015625e-06, 0.0, -1.9073486328125e-05, -3.814697265625e-06, -0.13324546813964844, -1.71661376953125e-05, -1.71661376953125e-05, -1.3589766240329482e-05, -5.8293338952353224e-05, 0.0, -3.0517578125e-05, -7.23539269529283e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -9.5367431640625e-06, 0.0, -1.3470649719238281e-05, -3.576278118089249e-07, -0.0007058382034301758, -1.33514404296875e-05, -4.1961669921875e-05, 0.0, -2.86102294921875e-05, -0.0002193450927734375, -2.288818359375e-05, -2.1457672119140625e-06, -0.010972976684570312, -5.7220458984375e-06, -0.0015106201171875, -0.0004482269287109375, -1.52587890625e-05, -1.060962586052483e-05, -1.1444091796875e-05, -0.0002040863037109375, 0.0, -3.814697265625e-06, 0.0, -0.000110626220703125, -9.5367431640625e-06, -0.0002841949462890625, -0.00046837321133352816, -0.04260063171386719, -6.103515625e-05, -1.1920801625819877e-06, 0.0, -1.621726551093161e-05, 0.0, -0.03551125526428223, -3.814697265625e-06, -0.0001926422119140625, -1.71661376953125e-05, -4.00543212890625e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Hound", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hound", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}]}
{"gold_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "InjuredBlademaster", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole4": [{"s": "health", "_type": "Str"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "DRAGON", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole2": "RARE", "hole1": 3, "hole7": [{"arg": "players", "_type": "keyword", "value": {"_type": "Template77", "hole0": "BothPlayer"}}, {"arg": "picker", "_type": "keyword", "value": {"_type": "Template77", "hole0": "UserPicker"}}], "hole5": "PlayerSelector", "_type": "Template20", "hole3": "Deal<UNK>", "hole0": "Injured Blademaster"}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"_type": "Template27", "hole1": 7, "hole0": 4}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Deal<UNK>('health', True,\n            MINION_TYPE.DRAGON), PlayerSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -5.2273543637067945, "score_history": [-5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.025591710582375526, -0.00037698791129514575, -8.940672159951646e-06, -7.62939453125e-06, -3.4332275390625e-05, 0.0, -1.1920928244535389e-07, -2.86102294921875e-05, -1.1920922133867862e-06, -0.000202178955078125, -0.07398128509521484, -6.103515625e-05, -5.316732858773321e-05, -1.1920928244535389e-07, -3.814697265625e-06, -0.0017948150634765625, -5.91278076171875e-05, -1.3470649719238281e-05, 0.0, -1.1444091796875e-05, -0.008515357971191406, -1.3040533065795898, -2.7656173188006505e-05, -3.9338898204732686e-05, -4.0531158447265625e-06, -9.5367431640625e-06, -0.009341120719909668, -2.0265579223632812e-06, -0.18336212635040283, -0.02545905113220215, -0.3515981137752533, -0.10350823402404785, -0.006986974738538265, -0.4459810256958008, -0.4764747619628906, -0.000396728515625, -0.5466595888137817, -9.179114385915454e-06, -0.08939170837402344, -0.05974578857421875, -0.12976360321044922, 0.0, -0.0019426345825195312, -2.6702880859375e-05, -9.5367431640625e-06, 0.0, -0.0007902383804321289, -1.9073486328125e-06, -0.5680360794067383, -7.62939453125e-06, -0.07519768178462982, -0.0002009867603192106, -2.0265579223632812e-06, -0.4304771423339844, -0.0026845932006835938, -0.000385284423828125, -0.03309059143066406, -5.125993993715383e-06, -0.0002727508544921875, -2.6702880859375e-05, -0.2244502305984497, -6.031987504684366e-05, 0.0, -0.0007190704345703125, -1.33514404296875e-05, -0.0009101629257202148, 0.0, -0.024596214294433594, -7.82012939453125e-05, -0.001905679702758789, -0.00014662742614746094, 0.0, -0.000232696533203125, -9.5367431640625e-06, -7.712746446486562e-05, -3.731181277544238e-05, -0.017152905464172363, -0.00021562635083682835], "choice_history": [80, 159, 295, 88, 138, "Injured", "Blademaster", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 107, 197, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Deal", "<UNK>", "<EOS>", 284, 48, 169, "health", "<EOS>", 46, 161, "True", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "Player", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(\n            1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=None)))])\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "KnifeJuggler", "_type": "ClassDef", "body": [{"_type": "Template16", "hole2": "ALL", "hole1": 2, "hole0": "Knife Juggler"}, {"hole4": [{"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"_type": "Template75", "hole0": 1}, {"func": {"id": "CharacterSelector", "_type": "Name"}, "_type": "Call", "keywords": [{"arg": "players", "_type": "keyword", "value": {"_type": "Template77", "hole0": "EnemyPlayer"}}, {"arg": "picker", "_type": "keyword", "value": {"_type": "Template77", "hole0": "RandomPicker"}}, {"arg": "condition", "_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}}]}], "_type": "Call"}], "hole2": "CardUsed", "hole1": 2, "_type": "Template10", "hole3": [{"_type": "Template77", "hole0": "IsSpell"}], "hole0": 3}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=Null)))])\n", "score": -1.1356573317934746, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -9.619726915843785e-05, -0.00015627116954419762, -1.9907789464923553e-05, -3.24249267578125e-05, -1.9073486328125e-05, 0.0, -3.933906555175781e-06, -1.71661376953125e-05, -1.1920928244535389e-07, -5.91278076171875e-05, -0.0033807754516601562, -7.2479248046875e-05, -2.109982233378105e-05, -1.2159347534179688e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -2.276897430419922e-05, 0.0, -6.341934204101562e-05, -3.814697265625e-06, -0.02210712432861328, -0.011778831481933594, -0.0028802156448364258, -3.4570634852570947e-06, -0.00022289689513854682, -3.4570680327306036e-06, -0.019802212715148926, -0.0214841365814209, -7.82012939453125e-05, -0.00038909912109375, -0.0005855560302734375, -3.814697265625e-06, -0.037010908126831055, -0.05804266035556793, -1.2278556823730469e-05, -3.814697265625e-06, -2.6702880859375e-05, -0.0019969940185546875, 0.0, 0.0, -0.005528450012207031, -0.00015854835510253906, -1.1444091796875e-05, -0.012666702270507812, -0.009165763854980469, -0.0005092620849609375, -0.0014496343210339546, -1.1444091796875e-05, -9.34600830078125e-05, -0.00827789306640625, -2.6702880859375e-05, -1.52587890625e-05, -0.3922719955444336, -0.0009270906448364258, 0.0, -0.26323986053466797, -0.001125335693359375, -0.0001983642578125, -0.18933188915252686, -1.3589859008789062e-05, -0.0001125335693359375, -0.0001220703125, -0.02512359619140625, -1.2278556823730469e-05, 0.0, -0.0002288818359375, -3.4332275390625e-05, -0.032845139503479004, -1.9073468138230965e-06, -0.0005035400390625, -0.00012969970703125, -0.0004674196243286133, -0.0001392364501953125, -1.9073486328125e-06, -8.58306884765625e-05, -0.0002307891845703125, -0.008321166038513184, -5.376214176067151e-05, -0.0015687942504882812, -9.5367431640625e-05, -0.00011837482452392578, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Knife", "Juggler", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 102, 185, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 97, 180, "3", "<EOS>", "2", "<EOS>", "Card", "Used", "<EOS>", 282, 68, 260, "Is", "Spell", "<EOS>", 282, 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 66, 257, "1", "<EOS>", 40, 135, 19, 160, "Character", "Selector", "<EOS>", 292, 79, 271, "players", "<EOS>", 33, 260, "Enemy", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "Random", "Picker", "<EOS>", 79, 271, "condition", "<EOS>", 20, 162, "Null", "<EOS>"]}]}
{"gold_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(condition=IsDamaged(), picker=RandomPicker\n            ())))])\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Lightwell", "_type": "ClassDef", "body": [{"_type": "Template16", "hole2": "PRIEST", "hole1": 2, "hole0": "Lightwell"}, {"hole3": {"elts": [{"func": {"id": "Effect", "_type": "Name"}, "args": [{"func": {"id": "TurnEnded", "_type": "Name"}, "_type": "Call", "keywords": [{"arg": "player", "_type": "keyword", "value": {"_type": "Template77", "hole0": "BothPlayer"}}]}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"func": {"id": "OneIn", "_type": "Name"}, "args": [{"n": 3, "_type": "Num"}], "_type": "Call"}, {"_type": "Template77", "hole0": "PlayerSelector"}], "_type": "Call"}], "_type": "Call"}], "_type": "List"}, "_type": "Template23", "hole2": "effects", "hole1": 5, "hole0": 0}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(player=BothPlayer()),\n            ActionTag(OneIn(3), PlayerSelector()))])\n", "score": -3.4552939431487104, "score_history": [0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.184158387943171e-05, -0.0003687124408315867, -1.1444091796875e-05, 0.0, 0.0, -0.0002498626708984375, -3.814697265625e-06, -2.86102294921875e-05, -0.0001239776611328125, -0.00982666015625, -1.9073486328125e-05, 0.0, -2.0265579223632812e-06, -5.9604644775390625e-06, 0.0, -0.0005972385406494141, -0.0001621246337890625, -0.1923837661743164, -0.0004367828369140625, -2.1457672119140625e-06, -1.1920928244535389e-07, -9.894320101011544e-06, -9.5367431640625e-06, -0.47673988342285156, -0.0002919435501098633, -6.29425048828125e-05, -1.52587890625e-05, -0.0073719024658203125, -0.0002574920654296875, -7.05718994140625e-05, -5.7220458984375e-06, 0.0, -0.0006450414657592773, -5.7220458984375e-06, -0.0002193450927734375, -5.53131103515625e-05, -0.0019855499267578125, -4.9591064453125e-05, -7.62939453125e-06, -0.6600955724716187, -0.1333608627319336, -1.9073486328125e-06, -0.0009937286376953125, -0.0001468658447265625, -3.4332275390625e-05, -2.288818359375e-05, 0.0, -0.000118255615234375, -3.814697265625e-05, -0.00296783447265625, -1.9073486328125e-06, -3.0517578125e-05, -2.288818359375e-05, -7.62939453125e-06, 0.0, 0.0, -0.00022125244140625, -4.00543212890625e-05, -3.24249267578125e-05, -0.0002880096435546875, -0.014047622680664062, -0.01578998565673828, -7.62939453125e-06, -1.71661376953125e-05, -0.8776508569717407, -0.02503359317779541, 0.0, -1.9073486328125e-06, -0.0002384185791015625, -5.7220458984375e-06, -0.048850350081920624, -3.814697265625e-06, -0.4899101257324219, -0.0013408660888671875, -0.49189186096191406, -3.814697265625e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Lightwell", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 102, 185, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 109, 200, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Turn", "Ended", "<EOS>", 290, 79, 271, "player", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 40, 136, 19, 160, "One", "In", "<EOS>", 282, 47, 165, "3", "<EOS>", 68, 260, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "ManaWyrm", "_type": "ClassDef", "body": [{"_type": "Template15", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}, {"hole3": {"elts": [{"func": {"id": "Effect", "_type": "Name"}, "args": [{"func": {"id": "SpellCast", "_type": "Name"}, "_type": "Call", "keywords": [{"arg": "player", "_type": "keyword", "value": {"_type": "Template77", "hole0": "BothPlayer"}}]}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"_type": "Template66", "hole2": 1, "hole1": "ChangeAttack", "hole0": "Give"}, {"_type": "Template77", "hole0": "SelfSelector"}], "_type": "Call"}], "_type": "Call"}], "_type": "List"}, "_type": "Template23", "hole2": "effects", "hole1": 3, "hole0": 1}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(player=BothPlayer()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -0.9160983474585009, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.33514404296875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.6331539882230572e-05, -5.7220440794480965e-06, -2.789483914966695e-05, -7.62939453125e-06, 0.0, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -4.5299530029296875e-06, -1.71661376953125e-05, -0.0004634857177734375, -0.000102996826171875, -3.0278701160568744e-05, -0.00032949421438388526, -1.263618378288811e-05, -5.7220458984375e-06, -0.0007134675979614258, 0.0, -0.0002613067626953125, -1.71661376953125e-05, -0.3738536834716797, -0.0001373291015625, -1.192074705613777e-07, 0.0, -0.0001798790617613122, -3.814697265625e-06, -0.0034618377685546875, -2.6702880859375e-05, -1.9073486328125e-06, -4.57763671875e-05, -0.0031261444091796875, -8.20159912109375e-05, -0.0017242431640625, -5.7220458984375e-06, 0.0, -0.0023131370544433594, -1.1444091796875e-05, -8.392333984375e-05, -4.9591064453125e-05, -0.013396263122558594, -3.814697265625e-05, 0.0, -0.4370121955871582, -0.013972043991088867, -0.00023853778839111328, -0.001476287841796875, -7.05718994140625e-05, -0.000209808349609375, -5.340576171875e-05, 0.0, -0.000545501708984375, -6.103515625e-05, -0.045757174491882324, -7.164474664023146e-05, -5.7220458984375e-06, -0.0001392364501953125, -5.14984130859375e-05, 0.0, 0.0, -6.29425048828125e-05, -0.000213623046875, -3.814697265625e-06, -6.67572021484375e-05, -0.012633323669433594, -0.0002002716064453125, -0.0004906654357910156, -7.62939453125e-06, -8.797645568847656e-05, -0.0010224580764770508, -2.47955322265625e-05, -0.0007020235061645508, -0.000133514404296875, 0.0, -5.7220458984375e-06, -0.0001475811004638672, -3.087520235567354e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mana", "Wyrm", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 109, 200, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Spell", "Cast", "<EOS>", 290, 79, 271, "player", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 59, 248, "Give", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class MogushanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Mogu'shanWarden", "_type": "ClassDef", "body": [{"_type": "Template15", "hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden"}, {"hole3": {"_type": "NameConstant", "value": true}, "_type": "Template23", "hole2": "taunt", "hole1": 7, "hole0": 1}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -0.0166865456576204, "score_history": [0.0, -5.7220458984375e-06, -5.7220458984375e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.00258516613394022, -0.00010048857075162232, -5.3642939747078344e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -5.7220458984375e-06, -2.3841855067985307e-07, -0.000324249267578125, -0.0028209686279296875, -6.29425048828125e-05, -1.6569954823353328e-05, -2.9683109460165724e-05, -1.2278556823730469e-05, -5.7220458984375e-06, -0.00025916099548339844, 0.0, -9.34600830078125e-05, -3.814697265625e-06, -0.0078277587890625, -0.0001239776611328125, -9.679794311523438e-05, 0.0, -3.612010914366692e-05, 0.0, -0.0019283294677734375, 0.0, -0.00017547607421875, -5.340576171875e-05, -7.62939453125e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mogu'shan", "Warden", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}]}
{"gold_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class Gain2(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Gain 2 mana crystals', 0, CHARACTER_CLASS\n                    .DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                if player.max_mana < 8:\n                    player.max_mana += 2\n                    player.mana += 2\n                else:\n                    player.max_mana = 10\n                    player.mana += 2\n\n\n        class Draw3(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Draw three cards', 0, CHARACTER_CLASS.\n                    DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                player.draw()\n                player.draw()\n                player.draw()\n        option = player.agent.choose_option([Gain2(), Draw3()], player)\n        option.use(player, game)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Nourish", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "__init__", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"_type": "Attribute", "attr": "DRUID", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Attribute", "attr": "RARE", "value": {"id": "CARD_RARITY", "_type": "Name"}}], "_type": "Call", "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}}}}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "target", "value": {"id": "self", "_type": "Name"}}}, "args": [{"n": 5, "_type": "Num"}, {"id": "self", "_type": "Name"}], "_type": "Call"}}, {"targets": [{"_type": "Attribute", "attr": "<UNK>", "value": {"id": "player", "_type": "Name"}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}, {"name": "Wisps5", "_type": "ClassDef", "body": [{"_type": "Template13", "hole2": "COMMON", "hole1": "DRUID", "hole0": "2 Nourish Crystals Crystals Crystals Crystals"}, {"name": "can_use", "_type": "FunctionDef", "body": [{"_type": "Return", "value": {"comparators": [{"n": 7, "_type": "Num"}], "_type": "Compare", "ops": [{"_type": "Lt"}], "left": {"func": {"id": "len", "_type": "Name"}, "args": [{"_type": "Attribute", "attr": "minions", "value": {"id": "player", "_type": "Name"}}], "_type": "Call"}}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}, {"name": "use", "_type": "FunctionDef", "body": [{"names": [{"name": "<UNK>", "_type": "alias"}], "module": "<UNK>", "_type": "ImportFrom", "level": 0}, {"iter": {"func": {"id": "range", "_type": "Name"}, "args": [{"n": 0, "_type": "Num"}, {"n": 3, "_type": "Num"}], "_type": "Call"}, "_type": "For", "body": [{"targets": [{"id": "<UNK>", "_type": "Name"}], "_type": "Assign", "value": {"_type": "Template77", "hole0": "<UNK>"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "summon", "value": {"id": "<UNK>", "_type": "Name"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"_type": "Attribute", "attr": "minions", "value": {"id": "player", "_type": "Name"}}], "_type": "Call"}], "_type": "Call"}}], "target": {"id": "i", "_type": "Name"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "ChoiceCard", "_type": "Name"}]}, {"targets": [{"id": "<UNK>", "_type": "Name"}], "_type": "Assign", "value": {"func": {"_type": "Attribute", "attr": "Nourish", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"id": "hearthbreaker", "_type": "Name"}}}}}, "_type": "Call"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(5, self)\n        player.<UNK> = True\n\n\n        class Wisps5(ChoiceCard):\n\n            def __init__(self):\n                super().__init__(\n                    '2 Nourish Crystals Crystals Crystals Crystals', 0,\n                    CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)\n\n            def can_use(self, player, game):\n                return len(player.minions) < 7\n\n            def use(self, player, game):\n                from <UNK> import <UNK>\n                for i in range(0, 3):\n                    <UNK> = <UNK>()\n                    <UNK>.summon(player, game, len(player.minions))\n        <UNK> = hearthbreaker.cards.minions.<UNK>.Nourish()\n", "score": -17.009877996491298, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.5258672647178173e-05, -7.223931606858969e-05, -3.0517578125e-05, 0.0, 0.0, -0.002008795738220215, -2.0265579223632812e-06, -6.079673767089844e-06, -0.0003509521484375, -0.06049060821533203, -3.814697265625e-06, -0.0004397872253321111, 0.0, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -4.1961669921875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -9.918212890625e-05, -0.000118255615234375, -1.52587890625e-05, 0.0, -0.000110626220703125, -1.9073486328125e-06, -1.6808447981020436e-05, -1.1444091796875e-05, -1.1444091796875e-05, -1.9073486328125e-06, -4.76837158203125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -5.960462772236497e-07, -0.0006814002990722656, -9.5367431640625e-06, -7.62939453125e-06, -5.602820692729438e-06, -3.6835648643318564e-05, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-05, -9.5367431640625e-06, -7.355213165283203e-05, -8.344646857949556e-07, -0.00064849853515625, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -2.6702880859375e-05, -7.987022399902344e-06, -3.457022103248164e-05, -0.0042285919189453125, -3.063678741455078e-05, -3.0517578125e-05, -0.001453399658203125, -6.866455078125e-05, -0.5608277320861816, -1.9073486328125e-06, -4.38690185546875e-05, -4.38690185546875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -0.0001900196075439453, -1.33514404296875e-05, -0.0001392364501953125, -4.768370445162873e-07, -0.0062828054651618, -0.00016415119171142578, -0.0004444122314453125, -1.9073486328125e-06, -0.0009043216705322266, -2.6702880859375e-05, -9.5367431640625e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.000194549560546875, -1.9073486328125e-06, 0.0, -5.841255187988281e-06, 0.0, -2.288818359375e-05, -3.7431713280966505e-05, -1.0371154530730564e-05, -0.46633243560791016, -0.00125885009765625, 0.0, -1.9073486328125e-06, -3.814697265625e-05, -8.20159912109375e-05, 0.0, -3.62396240234375e-05, -1.9073486328125e-06, -2.5391578674316406e-05, -7.62939453125e-06, -1.9073486328125e-05, -4.00543212890625e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-05, 0.0, -2.6702880859375e-05, -1.71661376953125e-05, -3.635883331298828e-05, -7.629387255292386e-06, -0.27602291107177734, -3.814697265625e-06, -0.0004520416259765625, -0.0002155303955078125, -1.1444091796875e-05, 0.0, -0.00428009033203125, 0.0, -0.0001010894775390625, 0.0, -0.12037003040313721, -5.7220458984375e-06, -0.0007658004760742188, 0.0, -0.40584516525268555, -0.000164031982421875, -0.0001983642578125, -0.003276824951171875, -5.7220458984375e-05, -0.7849708199501038, -3.814697265625e-06, -5.14984130859375e-05, -8.58306884765625e-05, -0.0052301883697509766, -2.0265579223632812e-06, -0.18466854095458984, -7.62939453125e-06, -3.814697265625e-06, -0.0003833770751953125, -2.288818359375e-05, -0.0032663345336914062, -4.9591064453125e-05, -0.3795473575592041, 0.0, -0.040430426597595215, -7.748603820800781e-06, -0.6166601181030273, -2.47955322265625e-05, -1.3232229321147315e-05, 0.0, -0.1543111801147461, -9.918212890625e-05, -0.18031394481658936, -0.00021791350445710123, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.06456470489501953, -2.86102294921875e-05, -3.075599670410156e-05, -0.7658510208129883, -0.5076189041137695, -0.009959220886230469, -0.0517483651638031, -0.0012117624282836914, -0.6413571834564209, -0.12722492218017578, -0.5232480764389038, -0.13262903690338135, -0.6996816396713257, -0.38241350650787354, -0.8068028092384338, -0.6168487071990967, -0.7961726188659668, -0.6145009994506836, -0.011455297470092773, -7.43865966796875e-05, -0.0029010772705078125, -0.0004024505615234375, -0.00046539306640625, -9.5367431640625e-06, -0.1415576934814453, -5.7220458984375e-06, -1.9073486328125e-06, -0.00025177001953125, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, 0.0, -0.000202178955078125, 0.0, -2.6702880859375e-05, -0.00024890899658203125, -1.5497195136049413e-06, -0.3140087127685547, -0.0004253387451171875, -7.43865966796875e-05, -0.026611328125, -7.82012939453125e-05, -0.25958919525146484, -0.000152587890625, -0.19131946563720703, -9.72747802734375e-05, -0.0070400238037109375, -1.9073486328125e-06, -3.4332275390625e-05, -0.0007343292236328125, 0.0, -0.0003757476806640625, -5.7220458984375e-06, -3.4332275390625e-05, 0.0, -0.07484304904937744, -9.5367431640625e-06, -1.9073486328125e-06, -0.011932373046875, -1.71661376953125e-05, -6.29425048828125e-05, -3.24249267578125e-05, -0.07551538944244385, -1.9073486328125e-06, -0.0011854171752929688, -0.0004978179931640625, -0.011686563491821289, -0.00202178955078125, -2.09808349609375e-05, -7.62939453125e-05, 0.0, -7.05718994140625e-05, -1.71661376953125e-05, 0.0, -7.832050323486328e-05, 0.0, -3.62396240234375e-05, -4.6133995056152344e-05, -1.8835040464182384e-05, -0.005314826965332031, -0.2276468276977539, -0.0035686492919921875, -0.0009402955765835941, -6.163119542179629e-05, -0.0015840530395507812, -0.0008296966552734375, -0.010923348367214203, -0.018087387084960938, -0.00023817364126443863, 0.0, -0.005385398864746094, -5.7220458984375e-05, -0.00063323974609375, 0.0, -0.014910101890563965, -3.814697265625e-05, -0.00098419189453125, -0.0004291534423828125, -3.814697265625e-06, -5.7220458984375e-06, -0.0015659332275390625, -2.86102294921875e-05, -0.0008182525634765625, -1.52587890625e-05, -1.9073486328125e-06, -0.008563164621591568, -1.9073486328125e-06, -0.0039081573486328125, -5.7220458984375e-06, -0.6660337448120117, -4.792213439941406e-05, -0.043229103088378906, -0.00081634521484375, -1.1444091796875e-05, -2.288818359375e-05, -0.0001468658447265625, 0.0, -0.00023925057030282915, -9.667862468631938e-05, -0.16663265228271484, -0.0016384124755859375, -0.5687174201011658, -0.060285914689302444, -0.0019397735595703125, -1.1444091796875e-05, -2.47955322265625e-05, -0.028331756591796875, -3.0517578125e-05, 0.0, -0.003444671630859375, 0.0, -0.006074069067835808, -1.573560803080909e-05, -0.001235365867614746, 0.0, -0.0006313323974609375, -3.814697265625e-06, -2.288818359375e-05, -1.52587890625e-05, 0.0, -0.0062408447265625, -9.918212890625e-05, -8.96453857421875e-05, -2.0265579223632812e-06, -0.004230499267578125, -8.392333984375e-05, -9.5367431640625e-06, 0.0, -9.357929229736328e-05, -2.384185791015625e-06, -5.7220458984375e-06, -0.0001697540283203125, 0.0, -7.62939453125e-06, 0.0, -1.1444091796875e-05, 0.0, -0.0031026543583720922, -1.1444091796875e-05, -0.9777965545654297, -7.62939453125e-05, -5.14984130859375e-05, -0.0060291290283203125, -1.52587890625e-05, -1.276611328125, -7.140634988900274e-05, -0.1181955337524414, -0.087982177734375, -8.0108642578125e-05, 0.0, -0.00018310546875, 0.0, -0.046393394470214844, 0.0, -0.2137460708618164, 0.0, -0.0039615631103515625, -1.9073486328125e-06, -0.007016538642346859, -4.291534423828125e-06, -0.004598855972290039, -4.768370445162873e-07, -0.0035636196844279766, -6.687641143798828e-05, -0.031031958758831024, -6.508615479106084e-05, -0.2125852406024933, -2.455693538649939e-05], "choice_history": [80, 159, 295, 88, 138, "Nourish", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Nourish", "<EOS>", 47, 165, "5", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 283, 47, 165, "5", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 37, 129, 19, 160, "player", "<EOS>", "<UNK>", "<EOS>", 20, 161, "True", "<EOS>", 88, 138, "Wisps5", "<EOS>", 282, 45, 160, "Choice", "Card", "<EOS>", 297, 100, 183, "2", " ", "Nourish", " ", "Crystals", " ", "Crystals", " ", "Crystals", " ", "Crystals", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 91, 143, "can_use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 295, 94, 167, 15, 139, 14, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 279, 8, 282, 47, 165, "7", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 93, 148, "<UNK>", "<EOS>", 272, 267, "<UNK>", "<EOS>", "0", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "3", "<EOS>", 296, 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 33, 260, "<UNK>", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "<UNK>", "<EOS>", "summon", "<EOS>", 284, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 40, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 14, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", "Nourish", "<EOS>"]}]}
{"gold_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsSpell()), SpellCast()))\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Preparation", "_type": "ClassDef", "body": [{"_type": "Template18", "hole2": "ROGUE", "hole1": 0, "hole0": "Preparation"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "<UNK>", "value": {"id": "player", "_type": "Name"}}, "args": [{"s": "card_drawn", "_type": "Str"}, {"id": "reduce_cost", "_type": "Name"}], "_type": "Call"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "<UNK>", "value": {"id": "player", "_type": "Name"}}, "_type": "Call"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "<UNK>", "value": {"id": "player", "_type": "Name"}}, "args": [{"s": "card_drawn", "_type": "Str"}, {"id": "reduce_cost", "_type": "Name"}], "_type": "Call"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>('card_drawn', reduce_cost)\n        player.<UNK>()\n        player.<UNK>('card_drawn', reduce_cost)\n", "score": -3.4621105650962534, "score_history": [0.0, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -0.013511987403035164, -0.000583245768211782, -2.09808349609375e-05, 0.0, -1.71661376953125e-05, -0.000569462776184082, -1.9073486328125e-06, -2.0265579223632812e-06, -3.0517578125e-05, -0.31098270416259766, -0.0039920806884765625, -2.4318398573086597e-05, -1.3709068298339844e-05, -6.675719760096399e-06, -2.3841855067985307e-07, -0.0008126497268676758, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -6.103515625e-05, -9.34600830078125e-05, -1.9073486328125e-06, -4.00543212890625e-05, -3.814697265625e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -3.4332275390625e-05, -0.0001277923583984375, -5.841255187988281e-06, -0.6189775466918945, -0.2072153091430664, -5.7220458984375e-06, -3.814697265625e-06, -3.24249267578125e-05, -8.20159912109375e-05, -4.1961669921875e-05, -5.7220458984375e-05, -1.9073486328125e-06, -7.62939453125e-06, -7.62939453125e-06, -4.57763671875e-05, -1.33514404296875e-05, -1.1444091796875e-05, -2.09808349609375e-05, -5.7220458984375e-05, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.00019073486328125, -7.450580596923828e-05, -0.023941993713378906, -1.9073486328125e-06, -4.9591064453125e-05, -0.0001277923583984375, -0.0001010894775390625, -3.0517578125e-05, -0.15639400482177734, -7.62939453125e-06, -0.005658507347106934, 0.0, -0.018904924392700195, -2.47955322265625e-05, -0.008871078491210938, -0.0003719329833984375, -0.000255584716796875, -0.04428243637084961, -7.43865966796875e-05, -0.010125160217285156, -3.4332275390625e-05, -0.31225061416625977, -1.9073486328125e-06, -0.007182121276855469, 0.0, -6.4849853515625e-05, -0.08028411865234375, -6.866455078125e-05, -1.9073486328125e-06, -0.0010309219360351562, -9.5367431640625e-06, -0.0003490447998046875, 0.0, -0.406846284866333, -4.57763671875e-05, -0.12841320037841797, 0.0, -6.29425048828125e-05, -0.27258872985839844, -2.6702880859375e-05, -1.52587890625e-05, -0.027655601501464844, -7.62939453125e-06, -0.26072871685028076, 0.0, -0.011730551719665527, -5.7220458984375e-06, -0.059678077697753906, -0.000392913818359375, -0.000213623046875, -0.10365748405456543, -7.62939453125e-05, -0.0235137939453125, -5.7220458984375e-05, -0.3379549980163574, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Preparation", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 104, 187, "Preparation", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "player", "<EOS>", "<UNK>", "<EOS>", 283, 48, 169, "card_drawn", "<EOS>", 45, 160, "reduce_cost", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "<UNK>", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "player", "<EOS>", "<UNK>", "<EOS>", 283, 48, 169, "card_drawn", "<EOS>", 45, 160, "reduce_cost", "<EOS>"]}]}
{"gold_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion):\n        minion.set_health_to(1)\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Repentance", "_type": "ClassDef", "body": [{"_type": "Template15", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}, {"name": "_reveal", "_type": "FunctionDef", "body": [{"test": {"comparators": [{"n": 0, "_type": "Num"}], "_type": "Compare", "ops": [{"_type": "Gt"}], "left": {"func": {"id": "len", "_type": "Name"}, "args": [{"generators": [{"ifs": [{"operand": {"_type": "Attribute", "attr": "<UNK>", "value": {"id": "minion", "_type": "Name"}}, "_type": "UnaryOp", "op": {"_type": "Not"}}], "iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "player", "value": {"id": "self", "_type": "Name"}}}, "_type": "comprehension", "target": {"id": "minion", "_type": "Name"}}], "_type": "ListComp", "elt": {"id": "minion", "_type": "Name"}}], "_type": "Call"}}, "_type": "If", "body": [{"targets": [{"id": "target", "_type": "Name"}], "_type": "Assign", "value": {"func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Attribute", "attr": "target", "value": {"id": "self", "_type": "Name"}}}, "args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "player", "value": {"id": "self", "_type": "Name"}}}], "_type": "Call"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "extend", "value": {"id": "targets", "_type": "Name"}}, "args": [{"_type": "Attribute", "attr": "player", "value": {"id": "self", "_type": "Name"}}], "_type": "Call"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "target", "value": {"id": "self", "_type": "Name"}}}, "_type": "Call"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "add_buff", "value": {"_type": "Attribute", "attr": "deathrattle", "value": {"id": "minion", "_type": "Name"}}}, "args": [{"_type": "Template66", "hole2": 1, "hole1": "ManaChange", "hole0": "Buff"}], "_type": "Call"}}]}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "<UNK>", "_type": "arg"}, {"arg": "attacker", "_type": "arg"}], "_type": "arguments"}}, {"name": "_reveal", "_type": "FunctionDef", "body": [{"test": {"values": [{"func": {"id": "isinstance", "_type": "Name"}, "args": [{"id": "attacker", "_type": "Name"}, {"id": "Minion", "_type": "Name"}], "_type": "Call"}, {"operand": {"_type": "Attribute", "attr": "<UNK>", "value": {"id": "attacker", "_type": "Name"}}, "_type": "UnaryOp", "op": {"_type": "Not"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "bounce", "value": {"id": "attacker", "_type": "Name"}}, "_type": "Call"}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}, {"targets": [{"_type": "Attribute", "attr": "player", "value": {"id": "self", "_type": "Name"}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": "Null"}}]}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "attacker", "_type": "arg"}, {"arg": "target", "_type": "arg"}], "_type": "arguments"}}, {"name": "_reveal", "_type": "FunctionDef", "body": [{"test": {"values": [{"func": {"id": "isinstance", "_type": "Name"}, "args": [{"id": "attacker", "_type": "Name"}, {"id": "Minion", "_type": "Name"}], "_type": "Call"}, {"operand": {"_type": "Attribute", "attr": "<UNK>", "value": {"id": "minion", "_type": "Name"}}, "_type": "UnaryOp", "op": {"_type": "Not"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "player", "value": {"id": "attacker", "_type": "Name"}}}}, "args": [{"n": 1, "_type": "Num"}, {"id": "self", "_type": "Name"}], "_type": "Call"}}, {"_type": "Expr", "value": {"_type": "Template63", "hole0": 2}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"id": "self", "_type": "Name"}}}, "args": [{"n": 1, "_type": "Num"}], "_type": "Call"}}]}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "attacker", "_type": "arg"}, {"arg": "target", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "SecretCard", "_type": "Name"}]}]}, "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len([minion for minion in self.player.minions if not minion.<UNK>]\n            ) > 0:\n            target = self.target.copy(self.player.minions)\n            targets.extend(self.player)\n            self.target.<UNK>()\n            minion.deathrattle.add_buff(Buff(ManaChange(1)))\n\n    def _reveal(self, attacker, target):\n        if isinstance(attacker, Minion) and not attacker.<UNK>:\n            attacker.bounce()\n            super().use(player, game)\n            self.player = Null\n\n    def _reveal(self, attacker, target):\n        if isinstance(attacker, Minion) and not minion.<UNK>:\n            attacker.player.hero.damage(1, self)\n            self.target.change_attack(2)\n            self.target.increase_health(1)\n", "score": -26.3116836480908, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -4.76837158203125e-05, -1.1444091796875e-05, -0.000270843505859375, -8.940656698541716e-06, -4.017321771243587e-05, -5.53131103515625e-05, 0.0, 0.0, -0.0105360746383667, -1.71661376953125e-05, -9.536741345073096e-06, -0.04049968719482422, -0.03341102600097656, -0.0007266998291015625, -1.6689286894688848e-06, -0.0066165924072265625, -2.145773578376975e-06, -2.2649765014648438e-06, -0.0028918981552124023, -7.62939453125e-06, -4.1961669921875e-05, -3.814697265625e-06, -0.0190507173538208, -1.1920928244535389e-07, -9.34600830078125e-05, -0.004403114318847656, 0.0, -0.0002899169921875, -5.7220458984375e-06, 0.0, -0.6842951774597168, -5.483612312673358e-06, -1.9073486328125e-06, -0.1560986042022705, -8.833035099087283e-05, -4.57763671875e-05, -0.002788543701171875, -0.0006475448608398438, -0.4632415771484375, -4.00543212890625e-05, -0.1754312515258789, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -0.06132805347442627, 0.0, -0.000152587890625, -0.17391109466552734, -0.02973651885986328, -9.72747802734375e-05, 0.0, -0.00048732757568359375, 0.0, -0.018395423889160156, -0.0062999725341796875, -0.001461029052734375, 0.0, -0.003856658935546875, 0.0, -0.000164031982421875, 0.0, -0.0003871917724609375, -5.7220458984375e-06, -0.000263214111328125, 0.0, -0.02999591827392578, -1.1444091796875e-05, -0.0014219284057617188, 0.0, -0.045560404658317566, -1.9073486328125e-06, -0.002071380615234375, -0.015336036682128906, -0.0018177032470703125, -0.00167083740234375, -1.33514404296875e-05, -1.9073486328125e-06, -0.000576019287109375, -1.9073486328125e-06, -0.046563148498535156, 0.0, -0.0022592544555664062, -3.576278118089249e-07, -0.000110626220703125, -0.0061702728271484375, -4.00543212890625e-05, -3.814697265625e-05, -3.814697265625e-06, -7.021406054263934e-05, 0.0, -0.18015384674072266, -0.00012969970703125, -1.9073486328125e-06, 0.0, -2.288818359375e-05, 0.0, -0.32527971267700195, 0.0, -0.013842582702636719, -0.007892608642578125, -2.86102294921875e-05, -3.24249267578125e-05, -0.017023086547851562, 0.0, -0.5361490249633789, 0.0, -0.3915729522705078, -0.0002002716064453125, -0.564305305480957, -1.9073486328125e-06, -0.8864297866821289, 0.0, -0.00035858154296875, -0.29924678802490234, 0.0, -0.000301361083984375, -7.62939453125e-06, -0.015089035034179688, -1.9073486328125e-06, -0.0009174346923828125, -0.000171661376953125, -0.013518333435058594, 0.0, -0.2703996002674103, -1.71661376953125e-05, -0.000335693359375, 0.0, -6.67572021484375e-05, -0.013074874877929688, -7.05718994140625e-05, -3.4332275390625e-05, -0.10974502563476562, -1.9073486328125e-05, -0.5019468069076538, 0.0, -0.18102264404296875, -5.7220458984375e-06, -2.09808349609375e-05, -0.00049591064453125, 0.0, -0.6924152374267578, -8.20159912109375e-05, -0.05158531665802002, -0.00046539306640625, -0.001750946044921875, 0.0, -0.00353240966796875, 0.0, -9.5367431640625e-05, -0.4044075012207031, -1.71661376953125e-05, 0.0, -0.5397443771362305, 0.0, -0.00606536865234375, 0.0, -0.15207672119140625, -2.09808349609375e-05, -0.010909080505371094, -1.9073486328125e-06, -0.1818634271621704, -2.1457672119140625e-06, -0.0010223388671875, 0.0, -9.5367431640625e-06, -0.000164031982421875, -5.7220458984375e-06, -1.33514404296875e-05, -0.0714731216430664, 0.0, -0.21540451049804688, -1.9073486328125e-06, -0.4408304691314697, -1.9073486328125e-06, -0.9596242904663086, -9.1552734375e-05, -0.9509052038192749, -1.1920928244535389e-07, -9.1552734375e-05, -1.1626043319702148, -0.0020732879638671875, -0.0021240711212158203, -0.000118255615234375, -0.018920037895441055, -0.010353803634643555, -2.09808349609375e-05, -0.028402814641594887, 0.0, -0.19846153259277344, -0.014202117919921875, -0.11765635013580322, 0.0, -1.9073486328125e-05, -0.2451934814453125, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.9847030639648438, -1.1920928244535389e-07, -1.9073486328125e-06, -0.14450562000274658, -1.7404556274414062e-05, -5.340576171875e-05, -0.0013284683227539062, -0.000537872314453125, -0.21495342254638672, -0.0042743682861328125, -0.0002155303955078125, -0.011706352233886719, -0.04391193389892578, -0.017946243286132812, -1.1444091796875e-05, 0.0, -0.020942263305187225, -6.675719760096399e-06, -7.62939453125e-06, -0.09399700164794922, 0.0, -0.15353596210479736, -1.1920928244535389e-07, -0.0706338882446289, 0.0, -0.0046482086181640625, -0.0043811798095703125, -0.03416252136230469, -0.0041751861572265625, -0.00014495849609375, -0.0026092529296875, 0.0, -0.0022563934326171875, 0.0, -0.6928590536117554, 0.0, -0.00010454654693603516, -1.1920928244535389e-07, -0.2829437255859375, -0.00617218017578125, 0.0, -0.000324249267578125, -0.45582008361816406, -3.814697265625e-06, -1.9073486328125e-06, -0.1396770477294922, 0.0, -0.2214512825012207, 0.0, -0.23432540893554688, -7.62939453125e-06, -0.012752532958984375, 0.0, -0.003055572509765625, -0.0011157989501953125, -1.33514404296875e-05, 0.0, -0.6259727478027344, -5.7220458984375e-06, -0.22585676610469818, -5.316731403581798e-05, -0.017846107482910156, 0.0, -2.288818359375e-05, -1.52587890625e-05, -7.62939453125e-06, -0.006153106689453125, 0.0, -0.000247955322265625, -1.1444091796875e-05, -2.288818359375e-05, -5.841255187988281e-06, -0.41915130615234375, -1.1444091796875e-05, -4.76837158203125e-05, -0.21126937866210938, -5.7220458984375e-06, -0.014681816101074219, 0.0, -0.161615252494812, -1.9073486328125e-06, -0.02640056610107422, 0.0, -0.12436485290527344, -0.009459495544433594, -9.322164987679571e-05, -1.9073486328125e-06, -0.0004405975341796875, -4.00543212890625e-05, -0.0062961578369140625, 0.0, -2.288818359375e-05, -0.41752147674560547, -1.9073486328125e-06, -5.7220458984375e-06, -3.24249267578125e-05, 0.0, -0.7943778038024902, -2.3841855067985307e-07, 0.0, -0.23446333408355713, -3.826618194580078e-05, -4.76837158203125e-05, -0.0016736984252929688, -0.00045871734619140625, -0.1982402801513672, -0.0034055709838867188, -0.00022125244140625, -0.017147064208984375, -0.04242515563964844, -0.022176742553710938, -1.33514404296875e-05, 0.0, -0.019864387810230255, -4.88758041683468e-06, -1.33514404296875e-05, -0.055863380432128906, 0.0, -0.14582312107086182, -1.1920928244535389e-07, -0.06156635284423828, 0.0, -0.0042819976806640625, -0.004996299743652344, -0.038048744201660156, -0.00406646728515625, -0.0001316070556640625, -0.0021619796752929688, 0.0, -0.0021724700927734375, 0.0, -0.7877143621444702, 0.0, -0.004715323448181152, -3.576278118089249e-07, -0.1642169952392578, -0.04407787322998047, 0.0, -0.000133514404296875, -0.5672798156738281, -3.0517578125e-05, 0.0, -0.42220306396484375, 0.0, -0.5314111709594727, -3.814697265625e-06, -0.009756088256835938, 0.0, -0.6404372453689575, -8.583057933719829e-06, -0.023078203201293945, -1.1920928244535389e-07, -0.590070366859436, -3.576278118089249e-07, -0.4267418384552002, -1.33514404296875e-05, -1.71661376953125e-05, -0.021024703979492188, -1.9073486328125e-05, -0.005380093585699797, -7.152555099310121e-07, -0.0022869110107421875, -0.0001621246337890625, -0.0005840063095092773, -5.841253368998878e-06, -0.08138847351074219, -1.9073486328125e-06, -0.20516490936279297, -0.0030803680419921875, -0.12723876535892487, -5.7220458984375e-06, -0.006808280944824219, 0.0, -0.000370025634765625, -0.02368450164794922, -7.05718994140625e-05, -6.103515625e-05, -0.0003185272216796875, 0.0, -0.2600059509277344, 0.0, -0.0011067390441894531, -0.0006961822509765625, -0.02624988555908203, -9.5367431640625e-06, -0.13140583038330078, 0.0, -0.0003414154052734375, -0.0001087188720703125, -1.9073486328125e-06, -0.5476415157318115, 0.0], "choice_history": [80, 159, 295, 88, 138, "Repentance", "<EOS>", 282, 45, 160, "Secret", "Card", "<EOS>", 298, 101, 184, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 91, 143, "_reveal", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "<UNK>", "<EOS>", 268, "attacker", "<EOS>", 295, 92, 146, 15, 139, 14, 136, 19, 160, "len", "<EOS>", 282, 44, 156, 19, 160, "minion", "<EOS>", 280, 270, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 282, 70, 266, 125, 11, 129, 19, 160, "minion", "<EOS>", "<UNK>", "<EOS>", 279, 3, 282, 47, 165, "0", "<EOS>", 298, 85, 128, 282, 45, 160, "target", "<EOS>", 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "extend", "<EOS>", 282, 37, 129, 19, 160, "self", "<EOS>", "player", "<EOS>", 89, 141, 14, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "minion", "<EOS>", "deathrattle", "<EOS>", "add_buff", "<EOS>", 282, 59, 248, "Buff", "<EOS>", "Mana", "Change", "<EOS>", "1", "<EOS>", 91, 143, "_reveal", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "attacker", "<EOS>", 268, "target", "<EOS>", 295, 92, 146, 13, 132, 0, 283, 40, 136, 19, 160, "isinstance", "<EOS>", 283, 45, 160, "attacker", "<EOS>", 45, 160, "Minion", "<EOS>", 70, 266, 125, 11, 129, 19, 160, "attacker", "<EOS>", "<UNK>", "<EOS>", 297, 89, 141, 14, 134, 11, 129, 19, 160, "attacker", "<EOS>", "bounce", "<EOS>", 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 37, 129, 19, 160, "self", "<EOS>", "player", "<EOS>", 20, 162, "Null", "<EOS>", 91, 143, "_reveal", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "attacker", "<EOS>", 268, "target", "<EOS>", 295, 92, 146, 13, 132, 0, 283, 40, 136, 19, 160, "isinstance", "<EOS>", 283, 45, 160, "attacker", "<EOS>", 45, 160, "Minion", "<EOS>", 70, 266, 125, 11, 129, 19, 160, "minion", "<EOS>", "<UNK>", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 19, 160, "attacker", "<EOS>", "player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 283, 47, 165, "1", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 29, 246, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "1", "<EOS>"]}]}
{"gold_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, False)\n\n    def create_minion(self, p):\n        return Minion(0, 1)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "ShadowOfNothing", "_type": "ClassDef", "body": [{"_type": "Template18", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}, {"name": "create_minion", "_type": "FunctionDef", "body": [{"_type": "Return", "value": {"func": {"id": "Minion", "_type": "Name"}, "args": [{"n": 0, "_type": "Num"}, {"n": 1, "_type": "Num"}], "_type": "Call", "keywords": [{"arg": "charge", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}, {"arg": "charge", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}]}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, charge=True, charge=True)\n", "score": -3.179719524276152, "score_history": [-6.29425048828125e-05, -5.53131103515625e-05, -7.43865966796875e-05, -0.0004100799560546875, -7.82012939453125e-05, -4.351044481154531e-05, -0.044845979660749435, -0.22516769170761108, -0.00048805560800246894, -1.1444091796875e-05, 0.0, 0.0, -0.5567009449005127, 0.0, -4.0531158447265625e-06, -0.0001983642578125, -0.04653358459472656, -0.0002803802490234375, -2.2649621314485557e-05, -0.0001298125716857612, -6.341851985780522e-05, -9.5367431640625e-06, -8.869169687386602e-05, 0.0, -0.002594646066427231, 0.0, -0.0012401342391967773, 0.0, -0.00238800048828125, 0.0, -0.8788844347000122, -1.33514404296875e-05, -1.9073486328125e-06, -0.000278472900390625, -5.7220458984375e-06, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -0.00030612945556640625, 0.0, -0.0002689361572265625, -0.0019893646240234375, -1.9073486328125e-05, -0.0033617019653320312, -0.001651763916015625, -2.288818359375e-05, 0.0, -0.0029554367065429688, -1.1444091796875e-05, -0.000171661376953125, -4.00543212890625e-05, -7.62939453125e-06, -0.0001759314618539065, -1.5497207641601562e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.04483669623732567, -1.931190308823716e-05, -0.03586578369140625, -0.000156402587890625, -2.86102294921875e-05, -0.3904533386230469, -0.00115203857421875, -0.0002460479736328125, -8.7738037109375e-05, -2.86102294921875e-05, -1.1444091796875e-05, -0.04766559600830078, -2.86102294921875e-05, -0.8849292993545532, -0.0004367828369140625, -0.0003719329833984375, -0.0015583038330078125, -0.000125885009765625, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Shadow", "Of", "Nothing", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 104, 187, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Minion", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "1", "<EOS>", 291, 79, 271, "charge", "<EOS>", 20, 161, "True", "<EOS>", 79, 271, "charge", "<EOS>", 20, 161, "True", "<EOS>"]}]}
{"gold_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.health > player.effective_spell_damage(2\n            ) or self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(2), self)\n            player.draw()\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Slam", "_type": "ClassDef", "body": [{"hole4": "target_func", "hole8": {"args": {"args": [{"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "_type": "Lambda", "body": {"values": [{"func": {"_type": "Attribute", "attr": "is_minion", "value": {"id": "card", "_type": "Name"}}, "_type": "Call"}, {"comparators": [{"_type": "Attribute", "attr": "BEAST", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "_type": "Compare", "ops": [{"_type": "Eq"}], "left": {"_type": "Attribute", "attr": "minion_type", "value": {"id": "card", "_type": "Name"}}}], "_type": "BoolOp", "op": {"_type": "And"}}}, "hole2": "WARRIOR", "hole1": 2, "hole7": "filter_func", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"id": "hearthbreaker", "_type": "Name"}}, "_type": "Template9", "hole3": "COMMON", "hole6": "find_spell_target", "hole0": "Slam"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}, {"_type": "Expr", "value": {"_type": "Template47", "hole0": 2}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "draw", "value": {"id": "player", "_type": "Name"}}, "_type": "Call"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "SpellCard", "_type": "Name"}]}]}, "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            filter_func=lambda minion: card.is_minion() and card.\n            minion_type == MINION_TYPE.BEAST)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "score": -4.623503493148519, "score_history": [-1.33514404296875e-05, -3.814697265625e-06, -3.24249267578125e-05, -1.52587890625e-05, -3.814697265625e-06, -3.194758028257638e-05, -2.4795524950604886e-05, -0.0001239776611328125, 0.0, -3.814697265625e-06, -4.744528996525332e-05, -3.933906555175781e-06, -2.0265579223632812e-06, -3.62396240234375e-05, -0.21746540069580078, -0.0004138946533203125, -9.643566590966657e-05, -4.6253204345703125e-05, -0.00021276582265272737, 0.0, -0.0019245147705078125, 0.0, -0.0004062652587890625, -1.9073486328125e-06, -0.00035691261291503906, 0.0, -0.0007839202880859375, -1.9073486328125e-06, -4.76837158203125e-05, 0.0, -0.0007038116455078125, -1.9073486328125e-06, -8.96453857421875e-05, 0.0, -0.6090719699859619, -1.9073486328125e-06, -0.4256547689437866, 0.0, -0.011792182922363281, -0.000263214111328125, -0.00046539306640625, -8.392333984375e-05, -3.0517578125e-05, -0.6054583787918091, -3.6954863844584906e-06, -0.006672859191894531, -3.814697265625e-05, -0.014071464538574219, -0.03567028045654297, -0.6739120483398438, -0.0017452239990234375, -0.000446319580078125, -7.62939453125e-05, -0.0001163482666015625, -0.0002536773681640625, -0.056061744689941406, -1.33514404296875e-05, -0.03343486785888672, -4.76837158203125e-05, -0.026960372924804688, -0.0003337860107421875, -0.0121307373046875, -0.0004100799560546875, -0.0004978179931640625, -0.0001010894775390625, -0.01591956615447998, -3.814697265625e-06, -0.13315582275390625, -1.71661376953125e-05, -2.288818359375e-05, -0.02536773681640625, -3.0517578125e-05, -0.00091552734375, 0.0, -3.814697265625e-06, -1.52587890625e-05, -0.001186370849609375, -9.5367431640625e-06, -0.6682329177856445, -3.814697265625e-06, -0.01675128936767578, -0.0004329681396484375, -0.014482498168945312, 0.0, 0.0, -4.9591064453125e-05, -3.814697265625e-06, 0.0, 0.0, 0.0, -2.288818359375e-05, 0.0, -5.340576171875e-05, -3.814697265625e-06, -4.053113570989808e-06, -0.011829376220703125, -4.38690185546875e-05, -1.9073486328125e-06, -4.76837158203125e-05, -1.33514404296875e-05, -1.33514404296875e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -1.0013580322265625e-05, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -1.71661376953125e-05, 0.0, -2.86102294921875e-05, 0.0, -7.62939453125e-06, -3.826618194580078e-05, -0.7408065795898438, 0.0, -0.041851043701171875, -5.91278076171875e-05, -0.16769440472126007, -6.341934204101562e-05, -0.0020809173583984375, -1.9073486328125e-06, -1.9073486328125e-05, -0.04017066955566406, -1.52587890625e-05, 0.0, -0.00072479248046875, 0.0, -0.0016841888427734375, 0.0, -0.0008107423782348633, 0.0], "choice_history": [80, 159, 295, 88, 138, "Slam", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Slam", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "minion", "<EOS>", 13, 132, 0, 283, 40, 134, 11, 129, 19, 160, "card", "<EOS>", "is_minion", "<EOS>", 41, 139, 11, 129, 19, 160, "card", "<EOS>", "minion_type", "<EOS>", 279, 2, 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "2", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}]}
{"gold_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Spellbreaker", "_type": "ClassDef", "body": [{"hole4": "minion_type", "hole8": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"_type": "Template77", "hole0": "Silence"}, {"_type": "Template52", "hole0": "UserPicker"}], "_type": "Call"}, "hole2": "ALL", "hole1": 4, "hole7": "battlecry", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Template9", "hole3": "COMMON", "hole6": "BEAST", "hole0": "Spellbreaker"}, {"_type": "Template27", "hole1": 3, "hole0": 4}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -0.3974979113882, "score_history": [-5.7220458984375e-06, -3.814697265625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.814697265625e-06, -7.712543447269127e-05, -4.434585207491182e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -0.0002804994583129883, -3.933906555175781e-06, -7.62939453125e-06, -0.2520284652709961, -0.000102996826171875, -0.005903190467506647, -2.86102294921875e-05, -0.0024002965074032545, 0.0, -0.00010716915130615234, -8.7738037109375e-05, -0.0054340362548828125, -1.9073486328125e-06, -0.009316802024841309, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.0001544952392578125, -1.9073486328125e-06, -0.060256004333496094, -9.72747802734375e-05, -0.001079559326171875, -1.9073486328125e-06, -0.046561241149902344, -4.1961669921875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000616908073425293, -3.933906555175781e-06, -9.5367431640625e-06, -0.0019121170043945312, -7.05718994140625e-05, -0.006767000537365675, -3.433201345615089e-05, -0.0022983551025390625, -0.0007152557373046875, -0.00034356117248535156, -0.000156402587890625, -3.62396240234375e-05, -5.340576171875e-05, -5.7220458984375e-06, -0.0001748651993693784, 0.0, -0.00019096123287454247, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Spellbreaker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Spellbreaker", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 68, 260, "Silence", "<EOS>", 55, 227, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())),\n            MinionSelector(Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "SunfuryProtector", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole4": [{"func": {"id": "SpellDamage", "_type": "Name"}, "args": [{"n": 1, "_type": "Num"}], "_type": "Call"}], "hole2": "RARE", "hole1": 2, "hole7": [{"arg": "picker", "_type": "keyword", "value": {"_type": "Template77", "hole0": "UserPicker"}}], "hole5": "MinionSelector", "_type": "Template20", "hole3": "Give", "hole0": "Sunfury Protector"}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"_type": "Template27", "hole1": 3, "hole0": 2}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(SpellDamage(1)),\n            MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -1.1855777375558176, "score_history": [-0.00011444091796875, -3.814697265625e-06, -1.9073486328125e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0005322470096871257, -1.0847986231965479e-05, -2.8967540856683627e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -1.1920928244535389e-07, -0.0002557039260864258, -2.145764938177308e-06, -5.53131103515625e-05, -0.005469322204589844, -2.6702880859375e-05, -2.9563900170614943e-05, -2.741813204920618e-06, -9.5367431640625e-06, -0.0003757476806640625, -8.0108642578125e-05, -3.62396240234375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -0.003894805908203125, -0.4202151298522949, -0.0004481264913920313, -2.4557069991715252e-05, -5.9604644775390625e-06, -9.5367431640625e-06, -9.167194366455078e-05, -1.9073486328125e-06, -0.015721440315246582, -0.00016558161587454379, -0.15496064722537994, -0.06255649030208588, -0.024402618408203125, -0.0024213790893554688, -0.0003185272216796875, -3.62396240234375e-05, -7.62939453125e-06, -0.06563127040863037, -0.04595981538295746, -1.3470649719238281e-05, -0.0012187957763671875, -0.000133514404296875, -9.918212890625e-05, -0.006862530950456858, -7.62939453125e-06, -0.018413782119750977, -0.000255584716796875, -9.179088920063805e-06, -0.007770538330078125, -6.103515625e-05, -1.9073486328125e-06, -0.21902823448181152, -1.1920928244535389e-07, -0.0001049041748046875, -0.000141143798828125, -0.12322914600372314, -0.0012983083724975586, -1.1444091796875e-05, -0.0027942657470703125, -1.33514404296875e-05, -7.652907515875995e-05, 0.0, -4.804134005098604e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Sunfury", "Protector", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 107, 197, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 282, 40, 136, 19, 160, "Spell", "Damage", "<EOS>", 282, 47, 165, "1", "<EOS>", "Minion", "Selector", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "2", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "TinkmasterOverspark", "_type": "ClassDef", "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole4": [{"func": {"id": "CardQuery", "_type": "Name"}, "_type": "Call", "keywords": [{"arg": "conditions", "_type": "keyword", "value": {"elts": [{"func": {"id": "ManaCost", "_type": "Name"}, "args": [{"func": {"id": "Attribute", "_type": "Name"}, "args": [{"s": "mana", "_type": "Str"}, {"_type": "Template77", "hole0": "SelfSelector"}], "_type": "Call"}], "_type": "Call"}, {"_type": "Template76_expr_seq", "hole0": "IsMinion"}], "_type": "List"}}]}], "hole2": "LEGENDARY", "hole1": 3, "hole7": [{"arg": "players", "_type": "keyword", "value": {"_type": "Template77", "hole0": "EnemyPlayer"}}], "hole5": "PlayerSelector", "_type": "Template20", "hole3": "Transform", "hole0": "Tinkmaster Overspark"}], "args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}}, {"_type": "Template27", "hole1": 3, "hole0": 3}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaCost(Attribute('mana', SelfSelector())),\n            IsMinion()])), PlayerSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -5.828278773041738, "score_history": [-4.00543212890625e-05, -1.9073486328125e-06, -4.76837158203125e-05, -2.09808349609375e-05, 0.0, -0.0008442493272013962, -1.0609570381348021e-05, -0.00012778602831531316, -3.814697265625e-06, -1.52587890625e-05, 0.0, -1.1920928244535389e-07, -1.52587890625e-05, -2.3841855067985307e-07, -0.0001125335693359375, -0.007149696350097656, -1.52587890625e-05, -3.0040680940146558e-05, -3.933906555175781e-06, -1.9073486328125e-06, -9.5367431640625e-05, -1.71661376953125e-05, -4.291534423828125e-06, 0.0, -7.82012939453125e-05, -0.050009727478027344, -1.9434351921081543, -8.940672159951646e-06, -3.850450593745336e-05, -5.9604644775390625e-06, -5.7220458984375e-06, -6.794949968025321e-06, -1.9073486328125e-06, -0.0043947696685791016, -4.2200084862997755e-05, -0.4520624876022339, -0.0062639713287353516, -0.017503738403320312, -0.038550376892089844, -0.1796550750732422, -0.000507354736328125, -1.9073486328125e-06, -0.006726503372192383, -0.08041214197874069, -5.7220458984375e-06, -0.15834903717041016, -0.01100921630859375, -9.5367431640625e-06, -0.13747940957546234, -2.3841855067985307e-07, -0.02305126190185547, -0.000347137451171875, -0.00429534912109375, -5.340576171875e-05, -0.00504302978515625, -5.7220458984375e-06, -0.000141143798828125, -0.06196073442697525, -0.02347383461892605, -7.748603820800781e-06, -0.0011005401611328125, -0.3141899108886719, -0.0035533905029296875, -7.62939453125e-05, -1.9073486328125e-06, -0.004045962821692228, -0.0001627206802368164, -0.000156402587890625, -1.9073486328125e-05, -5.14984130859375e-05, -0.268508642911911, -1.71661376953125e-05, -0.000202178955078125, 0.0, -0.02722012996673584, -0.0007864236831665039, -2.1457672119140625e-06, -0.39975643157958984, -0.0038003921508789062, -0.024748440831899643, -0.01894119754433632, -3.814697265625e-05, -0.9175477027893066, -0.004601597785949707, 0.0, -0.11035823822021484, -2.288818359375e-05, -1.9073486328125e-06, -0.5112099647521973, -1.6689286894688848e-06, -0.000202178955078125, -1.9073486328125e-06, -0.0006965398788452148, -2.1219253540039062e-05, 0.0, -0.00272369384765625, -5.7220458984375e-06, -1.1920906217710581e-07, -7.152555099310121e-07, -1.549969965708442e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Tinkmaster", "Overspark", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 107, 197, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", 282, 40, 135, 19, 160, "Card", "Query", "<EOS>", 290, 79, 271, "conditions", "<EOS>", 17, 155, 283, 40, 136, 19, 160, "Mana", "Cost", "<EOS>", 282, 40, 136, 19, 160, "Attribute", "<EOS>", 283, 48, 169, "mana", "<EOS>", 68, 260, "Self", "Selector", "<EOS>", 67, 259, "Is", "Minion", "<EOS>", "Player", "Selector", "<EOS>", 290, 79, 271, "players", "<EOS>", 33, 260, "Enemy", "Player", "<EOS>", 110, 202, "3", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and attacker.is_minion(\n            ) and not attacker.removed:\n            attacker.die(self)\n            attacker.game.check_delayed()\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Vaporize", "_type": "ClassDef", "body": [{"_type": "Template16", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Template77", "hole0": "super"}}, "args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "_type": "Call"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}}, {"name": "_reveal", "_type": "FunctionDef", "body": [{"test": {"values": [{"func": {"_type": "Attribute", "attr": "<UNK>", "value": {"id": "card", "_type": "Name"}}, "_type": "Call"}, {"comparators": [{"_type": "NameConstant", "value": "Null"}], "_type": "Compare", "ops": [{"_type": "Is"}], "left": {"id": "index", "_type": "Name"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "If", "body": [{"targets": [{"_type": "Attribute", "attr": "card", "value": {"id": "minion", "_type": "Name"}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}, {"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "reveal", "value": {"_type": "Template77", "hole0": "super"}}, "_type": "Call"}}]}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "attacker", "_type": "arg"}, {"arg": "target", "_type": "arg"}], "_type": "arguments"}}, {"name": "activate", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "bind", "value": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Attribute", "attr": "game", "value": {"id": "player", "_type": "Name"}}}}, "args": [{"s": "character_attack", "_type": "Str"}, {"_type": "Attribute", "attr": "_reveal", "value": {"id": "self", "_type": "Name"}}], "_type": "Call"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}}, {"name": "deactivate", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"_type": "Attribute", "attr": "bind", "value": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Attribute", "attr": "game", "value": {"id": "player", "_type": "Name"}}}}, "args": [{"s": "card_played", "_type": "Str"}, {"_type": "Attribute", "attr": "_reveal", "value": {"id": "self", "_type": "Name"}}], "_type": "Call"}}], "args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}}], "bases": [{"id": "SecretCard", "_type": "Name"}]}]}, "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, target):\n        if card.<UNK>() and index is Null:\n            minion.card = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n", "score": -13.10160707095416, "score_history": [-0.0001506805419921875, -2.6702880859375e-05, -2.86102294921875e-05, -1.33514404296875e-05, -7.43865966796875e-05, -0.00014184899919200689, -9.059892363438848e-06, -8.58306884765625e-05, 0.0, 0.0, -0.0793311595916748, -9.5367431640625e-06, -7.784366607666016e-05, -0.16431331634521484, -0.017601966857910156, -0.0005245208740234375, -7.021180499577895e-05, -3.814697265625e-06, -9.894321010506246e-06, -1.9073486328125e-06, -0.002643585205078125, -0.00022470951080322266, -0.003177642822265625, -1.52587890625e-05, -0.015115737915039062, 0.0, -2.47955322265625e-05, -6.29425048828125e-05, 0.0, -4.1961669921875e-05, -1.52587890625e-05, 0.0, -1.52587890625e-05, 0.0, -3.814697265625e-05, -4.971027374267578e-05, -4.52994936495088e-06, -0.21016693115234375, -0.0015888214111328125, -1.33514404296875e-05, -3.0517578125e-05, -0.0002498626708984375, -4.38690185546875e-05, -3.814697265625e-06, -0.0002269744873046875, -7.62939453125e-05, -1.3709068298339844e-05, -1.9073486328125e-06, -9.918212890625e-05, -1.9073486328125e-06, -0.0001049041748046875, -5.7220458984375e-06, -1.9073486328125e-06, -9.000301361083984e-05, 0.0, -0.00019073486328125, -1.33514404296875e-05, -0.0004138946533203125, -3.0159948437358253e-05, -0.013360977172851562, -2.288818359375e-05, -0.12390899658203125, 0.0, -5.7220458984375e-06, -0.0012273788452148438, 0.0, -2.47955322265625e-05, -2.288818359375e-05, 0.0, -0.6197344064712524, -1.454353241570061e-05, -3.814697265625e-06, -0.02506840229034424, -0.0003311634063720703, -2.6702880859375e-05, -0.001922607421875, -0.004498481750488281, -0.10159111022949219, -0.0013523101806640625, -0.001007080078125, -0.0004482269287109375, -0.6512746810913086, -0.7994499206542969, -0.012204170227050781, -2.6702880859375e-05, -0.10928916931152344, -5.7220458984375e-06, -0.31038403511047363, -2.1219253540039062e-05, -0.44004344940185547, -2.622604142743512e-06, -0.009089469909667969, -2.47955322265625e-05, -0.4168262481689453, -9.5367431640625e-06, -2.1369032859802246, -1.9073486328125e-06, -0.0001316070556640625, -0.26409149169921875, -1.71661376953125e-05, -0.24708175659179688, -2.47955322265625e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.009175300598144531, -0.2092761993408203, -4.9591064453125e-05, -4.00543212890625e-05, -0.5910501480102539, -5.7220458984375e-06, -0.0074367523193359375, 0.0, -0.8267109394073486, -3.814697265625e-06, -0.5025463104248047, -8.7738037109375e-05, -0.38524723052978516, -0.3117856979370117, -6.4849853515625e-05, -1.9073486328125e-06, -0.003177642822265625, -1.9073486328125e-06, -5.7220458984375e-05, -0.04788970947265625, -0.000354766845703125, -1.33514404296875e-05, -0.002410888671875, 0.0, -6.103442865423858e-05, -1.1444091796875e-05, -0.0007190704345703125, -2.491474151611328e-05, -0.005391120910644531, -7.05718994140625e-05, -0.010056614875793457, -1.9073486328125e-06, -2.288818359375e-05, -0.0022144317626953125, -1.9073486328125e-06, -2.6702880859375e-05, -3.814697265625e-06, -9.5367431640625e-06, -1.33514404296875e-05, 0.0, -0.000209808349609375, -0.0001773834228515625, -5.7220458984375e-06, -0.08503150939941406, -0.000732421875, -1.33514404296875e-05, 0.0, -0.01157379150390625, 0.0, -0.053737640380859375, -0.0001621246337890625, -0.018983840942382812, -1.9073486328125e-06, -0.0008833408355712891, -1.1920928244535389e-07, -0.002530336380004883, -5.960462772236497e-07, -0.008009195327758789, 0.0, -0.5082687139511108, -3.814697265625e-06, -0.000244140625, -0.0007381439208984375, -1.9073486328125e-05, -0.8891408443450928, -1.9073486328125e-06, -0.00131988525390625, 0.0, -0.000514984130859375, 0.0, -9.441375732421875e-05, -1.1444091796875e-05, -0.002323150634765625, 0.0, -0.0252838134765625, -0.00026702880859375, -0.2620515823364258, -1.9073486328125e-06, -8.7738037109375e-05, -0.00408935546875, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.62939453125e-06, -2.86102294921875e-05, 0.0, -8.392333984375e-05, -0.000339508056640625, 0.0, -0.0012578964233398438, -0.0004215240478515625, -1.52587890625e-05, -1.9073486328125e-06, -0.019272804260253906, 0.0, -0.02657318115234375, -3.814697265625e-05, -0.03783226013183594, 0.0, -0.0009119510650634766, -1.1920928244535389e-07, -0.00263822078704834, -5.960462772236497e-07, -0.006119251251220703, 0.0, -0.5842239856719971, -1.9073486328125e-06, -0.00011444091796875, -0.00150299072265625, -1.52587890625e-05, -0.8326501846313477, 0.0, -0.0034885406494140625, 0.0, -0.0006923675537109375, 0.0, -6.4849853515625e-05, -9.5367431640625e-06, -0.0018939971923828125, 0.0], "choice_history": [80, 159, 295, 88, 138, "Vaporize", "<EOS>", 282, 45, 160, "Secret", "Card", "<EOS>", 299, 102, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 91, 143, "_reveal", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "attacker", "<EOS>", 268, "target", "<EOS>", 295, 92, 146, 13, 132, 0, 283, 40, 134, 11, 129, 19, 160, "card", "<EOS>", "<UNK>", "<EOS>", 41, 139, 19, 160, "index", "<EOS>", 279, 6, 282, 46, 162, "Null", "<EOS>", 296, 85, 128, 282, 37, 129, 19, 160, "minion", "<EOS>", "card", "<EOS>", 20, 161, "True", "<EOS>", 89, 141, 14, 134, 11, 129, 33, 260, "super", "<EOS>", "reveal", "<EOS>", 91, 143, "activate", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 283, 48, 169, "character_attack", "<EOS>", 37, 129, 19, 160, "self", "<EOS>", "_reveal", "<EOS>", 91, 143, "deactivate", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 283, 48, 169, "card_played", "<EOS>", 37, 129, 19, 160, "self", "<EOS>", "_reveal", "<EOS>"]}]}
{"gold_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "WorgenInfiltrator", "_type": "ClassDef", "body": [{"_type": "Template15", "hole2": "ALL", "hole1": 1, "hole0": "Worgen Infiltrator"}, {"hole3": {"_type": "NameConstant", "value": true}, "_type": "Template23", "hole2": "stealth", "hole1": 1, "hole0": 2}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "score": -0.4293880446384719, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -6.103515625e-05, -3.814697265625e-06, -2.2411095415009186e-05, -2.098061486321967e-05, -1.8477303456165828e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -2.384185791015625e-06, -5.7220458984375e-06, -4.172325134277344e-06, -2.86102294921875e-05, -0.0019435882568359375, -6.29425048828125e-05, -7.033323527139146e-06, -1.931190308823716e-05, -7.033347174001392e-06, 0.0, -0.0002772810112219304, 0.0, -0.00010693073272705078, -3.814697265625e-06, -0.0010528564453125, -0.000827789306640625, -8.606812480138615e-05, -1.9073486328125e-06, -1.2159134712419473e-05, 0.0, -0.42296886444091797, -0.00023865699768066406, -0.001445770263671875, -0.0001201629638671875, -1.3470649719238281e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Worgen", "Infiltrator", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 20, 161, "True", "<EOS>"]}]}
{"gold_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "BlackwingCorruptor", "_type": "ClassDef", "body": [{"hole4": {"_type": "Template59", "hole1": [{"_type": "Template77", "hole0": "BattleAxe"}], "hole0": "MinionDied"}, "hole2": "ALL", "hole1": 5, "_type": "Template11", "hole3": "battlecry", "hole0": "Blackwing Corruptor"}, {"_type": "Template27", "hole1": 4, "hole0": 5}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(MinionDied(BattleAxe()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -1.7189339024161683, "score_history": [-9.34600830078125e-05, -5.7220458984375e-05, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002337421028641984, -8.4638240878121e-06, -7.104660471668467e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -1.1920928244535389e-07, -5.7220458984375e-06, -2.0265579223632812e-06, -3.62396240234375e-05, -0.021086692810058594, -6.67572021484375e-05, -2.3841855067985307e-07, -1.0132789611816406e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.09775412082672119, 0.0, -0.00015079975128173828, 0.0, -0.0004731416702270508, 0.0, -0.16802978515625, -0.004726409912109375, -0.181745707988739, -0.30713367462158203, -0.019715411588549614, -1.71661376953125e-05, -0.34905147552490234, -0.0003337860107421875, -0.35748326778411865, -0.20938213169574738, -2.121920624631457e-05, -0.000293731689453125, -1.9073486328125e-05, -0.000816221465356648, -1.1920928244535389e-07, -7.474263838957995e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Blackwing", "Corruptor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 28, 241, "Minion", "Died", "<EOS>", 282, 68, 260, "Battle", "Axe", "<EOS>", 110, 202, "5", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Attribute('health',\n            HeroSelector(EnemyPlayer())), value=15))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "DrakonidCrusher", "_type": "ClassDef", "body": [{"hole4": "minion_type", "hole8": {"func": {"id": "Battlecry", "_type": "Name"}, "args": [{"func": {"id": "Heal", "_type": "Name"}, "args": [{"n": 6, "_type": "Num"}], "_type": "Call"}, {"func": {"id": "CardSelector", "_type": "Name"}, "_type": "Call", "keywords": [{"arg": "players", "_type": "keyword", "value": {"_type": "Template77", "hole0": "EnemyPlayer"}}]}], "_type": "Call"}, "hole2": "ALL", "hole1": 6, "hole7": "battlecry", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Template9", "hole3": "COMMON", "hole6": "DRAGON", "hole0": "Drakonid Crusher"}, {"_type": "Template27", "hole1": 6, "hole0": 6}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Heal(6), CardSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -2.792460851467901, "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-05, -1.9073486328125e-06, -9.035655966727063e-05, -2.3126376618165523e-05, -1.4662635294371285e-05, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.00022125244140625, -0.03660392761230469, -7.43865966796875e-05, -0.00010847456724150106, -1.0371208190917969e-05, -1.1324837942083832e-05, -1.9073486328125e-06, -8.865821291692555e-05, 0.0, -7.069110870361328e-05, -5.7220458984375e-06, -0.0017910003662109375, -7.62939453125e-06, -2.968311309814453e-05, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -8.58306884765625e-05, -3.814697265625e-06, -0.005572319030761719, -0.000240325927734375, -0.007457852363586426, 0.0, -0.44728755950927734, -0.0001773834228515625, -1.9073486328125e-06, 0.0, -0.0001583099365234375, 0.0, -0.021331787109375, -0.02364826202392578, -0.000507354736328125, -0.0001735687255859375, -1.33514404296875e-05, -0.760774552822113, -0.00017058847879525274, -5.7220458984375e-06, -0.0033206939697265625, -1.1444091796875e-05, -0.009177301079034805, -1.1920928244535389e-07, -0.29045772552490234, -0.005127906799316406, -1.9073486328125e-05, -1.9073486328125e-06, -0.1642134189605713, -0.3506048917770386, 0.0, -0.001041412353515625, -1.52587890625e-05, 0.0, -0.6415042877197266, -1.7881377516459906e-06, -1.9073486328125e-05, 0.0, -0.019256114959716797, -2.0265579223632812e-06, 0.0, -0.0005588531494140625, -3.814697265625e-06, -9.775113539944869e-06, -1.1920928244535389e-07, -0.00026804511435329914, 0.0], "choice_history": [80, 159, 295, 88, 138, "Drakonid", "Crusher", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 40, 136, 19, 160, "Heal", "<EOS>", 282, 47, 165, "6", "<EOS>", 40, 135, 19, 160, "Card", "Selector", "<EOS>", 290, 79, 271, "players", "<EOS>", 33, 260, "Enemy", "Player", "<EOS>", 110, 202, "6", "<EOS>", "6", "<EOS>"]}]}
{"gold_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "Imp", "_type": "ClassDef", "body": [{"hole4": "DEMON", "hole2": "minion_type", "hole1": "RARE", "_type": "Template7", "hole3": {"id": "MINION_TYPE", "_type": "Name"}, "hole0": "Imp"}, {"_type": "Template27", "hole1": 1, "hole0": 1}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -0.05321686440720441, "score_history": [-7.62939453125e-06, -3.62396240234375e-05, -1.71661376953125e-05, -2.288818359375e-05, -0.00023651123046875, -8.821448318485636e-06, -2.50339189733495e-06, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -0.0007652044296264648, -7.2479248046875e-05, -2.09808349609375e-05, -0.0002498626708984375, -0.013623237609863281, -0.000476837158203125, -1.2636104656849056e-05, -1.9073486328125e-06, -0.011357307434082031, -1.33514404296875e-05, -0.0002422332763671875, -1.9073486328125e-05, -3.0517578125e-05, 0.0, -0.00052642822265625, -1.52587890625e-05, -0.0022411346435546875, -0.0008106231689453125, -0.0020923614501953125, -7.43865966796875e-05, -0.01986473798751831, 0.0, -0.00035737938014790416, 0.0], "choice_history": [80, 159, 295, 88, 138, "Imp", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Imp", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}]}
{"gold_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "beams": [{"model_output": {"_type": "Module", "body": [{"name": "TwilightWhelp", "_type": "ClassDef", "body": [{"hole4": {"_type": "Attribute", "attr": "MECH", "value": {"id": "MINION_TYPE", "_type": "Name"}}, "hole2": "PRIEST", "hole1": 1, "_type": "Template11", "hole3": "minion_type", "hole0": "Twilight Whelp"}, {"hole3": {"elts": [{"func": {"id": "Effect", "_type": "Name"}, "args": [{"func": {"id": "TurnStarted", "_type": "Name"}, "_type": "Call", "keywords": [{"arg": "player", "_type": "keyword", "value": {"_type": "Template77", "hole0": "EnemyPlayer"}}]}, {"func": {"id": "ActionTag", "_type": "Name"}, "args": [{"_type": "Template77", "hole0": "Draw"}, {"_type": "Template69", "hole1": "EnemyPlayer", "hole0": "PlayerSelector"}], "_type": "Call"}], "_type": "Call"}], "_type": "List"}, "_type": "Template23", "hole2": "effects", "hole1": 1, "hole0": 2}], "bases": [{"id": "MinionCard", "_type": "Name"}]}]}, "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, effects=[Effect(TurnStarted(player=EnemyPlayer(\n            )), ActionTag(Draw(), PlayerSelector(EnemyPlayer())))])\n", "score": -5.655360484801115, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.00013076403411105275, -5.841247457283316e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -1.33514404296875e-05, 0.0, -7.867813110351562e-06, -5.7220458984375e-06, -3.814697265625e-06, -9.34600830078125e-05, -0.15239334106445312, -0.0001201629638671875, -3.576272320060525e-06, -8.106231689453125e-06, -2.300739288330078e-05, 0.0, -2.2649685433862032e-06, 0.0, -0.26308155059814453, -1.33514404296875e-05, -0.27799224853515625, -1.52587890625e-05, -0.0004711151123046875, -0.0002384185791015625, -5.14984130859375e-05, 0.0, -0.0003337860107421875, -1.9073486328125e-06, -1.1031293869018555, -5.7220458984375e-06, -0.009027481079101562, -7.62939453125e-06, -0.0011042349506169558, 0.0, -0.0003203509550075978, 0.0, -0.028914451599121094, -3.814697265625e-06, -6.29425048828125e-05, -8.0108642578125e-05, -0.060955047607421875, -6.866455078125e-05, -0.00031280517578125, 0.0, 0.0, -0.16438651084899902, -5.7220458984375e-06, -2.288818359375e-05, -2.47955322265625e-05, -0.015018463134765625, -1.71661376953125e-05, -1.9073486328125e-06, -0.6484928131103516, -0.7065963745117188, -0.00038909912109375, -5.14984130859375e-05, -7.2479248046875e-05, -1.9073486328125e-06, -0.018930435180664062, 0.0, -0.029425621032714844, -9.5367431640625e-06, -0.34966766834259033, -0.00031185150146484375, -1.9073486328125e-06, -3.0517578125e-05, -8.20159912109375e-05, -1.9073486328125e-06, 0.0, -0.05736255645751953, -0.0001811981201171875, -1.9073486328125e-06, -0.0003147125244140625, -0.22152233123779297, -4.76837158203125e-05, -1.0036083459854126, -9.489051444688812e-05, -0.13482284545898438, -1.9073486328125e-06, -0.3678092956542969, -5.841255187988281e-06, 0.0, -0.036911606788635254, -6.806678720749915e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Twilight", "Whelp", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 109, 200, "2", "<EOS>", "1", "<EOS>", "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Turn", "Started", "<EOS>", 290, 79, 271, "player", "<EOS>", 33, 260, "Enemy", "Player", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 68, 260, "Draw", "<EOS>", 61, 250, "Player", "Selector", "<EOS>", "Enemy", "Player", "<EOS>"]}]}
