{"gold_code": "class AssassinsBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "beams": [{"score_history": [-0.0002651214599609375, -0.0001773834228515625, -5.7220458984375e-06, -2.6702880859375e-05, -3.62396240234375e-05, -3.7312340282369405e-05, -0.0007785144844092429, -0.00024399164249189198, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, -6.36559707345441e-05, -0.0002493858337402344, -1.1920922133867862e-06, -7.62939453125e-06, -0.019517898559570312, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.38690185546875e-05, 0.0, -3.814697265625e-06, -7.43865966796875e-05, 0.0, -0.0003452301025390625, -0.0135650634765625, -5.7220458984375e-06, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -0.00013184547424316406, -7.82012939453125e-05, -3.814697265625e-06, 0.0, -0.0071926116943359375, -3.814697265625e-06, -1.9073486328125e-05, -0.16702067852020264, -0.0002307891845703125, -2.5868392185657285e-05, -0.0002269744873046875, -7.62939453125e-05, 0.0, -0.05164289474487305, -4.768370445162873e-07, -5.7220458984375e-06, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -4.0531158447265625e-05, -1.5497195136049413e-06, -0.6821072101593018, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -1.52587890625e-05, -3.4332275390625e-05, -5.543231964111328e-05, -5.7220458984375e-06, -0.0004730224609375, -2.6702880859375e-05, -0.001132965087890625, -1.52587890625e-05, 0.0, -0.0001811981201171875, -5.14984130859375e-05, -2.47955322265625e-05, -1.9073486328125e-06, 0.0, -6.866455078125e-05, -1.9073486328125e-06, -0.0001068115234375, -0.0016994476318359375, -7.62939453125e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.000560760498046875, -0.0015039443969726562, -0.0002803802490234375, -1.33514404296875e-05, -1.9073486328125e-06, -0.00022876242292113602, -1.1920928244535389e-07, -1.9073486328125e-06, -1.9073486328125e-06, -1.406669252901338e-05, -2.622604142743512e-06], "score": -0.9511433106304068, "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Gallywix's Blade\", 5, CHARACTER_CLASS.DREAM,\n            CARD_RARITY.COMMON, True)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "WeaponCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Gallywix's Blade"}, {"n": 5, "_type": "Num"}, {"attr": "DREAM", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "_type": "Call", "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"n": 3, "_type": "Num"}, {"n": 4, "_type": "Num"}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}, "_type": "Return"}], "name": "create_weapon"}], "name": "<UNK>Blade"}]}, "choice_history": [50, 111, 176, 58, 90, "<UNK>", "Blade", "<EOS>", 163, 35, 112, "Weapon", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 167, 38, 121, "Gallywix's", " ", "Blade", "<EOS>", 37, 117, "5", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "DREAM", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 36, 113, "False", "<EOS>", 61, 95, "create_weapon", "<EOS>", 150, 157, 149, "self", "<EOS>", 149, "player", "<EOS>", 176, 64, 119, 14, 88, 19, 112, "Weapon", "<EOS>", 164, 37, 117, "3", "<EOS>", 37, 117, "4", "<EOS>"]}]}
{"gold_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "beams": [{"score_history": [0.0, -2.288818359375e-05, -2.09808349609375e-05, -3.24249267578125e-05, -7.62939453125e-06, -0.009970976039767265, -0.0015119798481464386, -9.775130820344202e-06, -2.288818359375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.6093254089355469e-06, -1.9073486328125e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.0001163482666015625, -1.9073486328125e-06, -1.823902130126953e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.3065652847290039, 0.0, -2.86102294921875e-05, -0.0006885528564453125, -0.000141143798828125, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.0251977982989047e-05, -1.1920928244535389e-07, -2.09808349609375e-05, 0.0, -0.00484466552734375, -1.33514404296875e-05, -3.814697265625e-06, -6.3774932641536e-05, -5.161762237548828e-05, -1.7762085917638615e-05, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.040041182190179825, -1.6689286894688848e-06, -1.9073486328125e-05, 0.0, -9.5367431640625e-06, -7.62939453125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.0003014802932739258, 0.0, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -4.57763671875e-05, -4.38690185546875e-05, -0.0053691864013671875, 0.0, -5.7220458984375e-06, -7.62939453125e-06, -0.0001569986343383789, -1.71661376953125e-05, -0.001934051513671875, -9.5367431640625e-06, -0.006050639320164919, -9.65590606938349e-06, -0.004710896871984005, 0.0], "score": -0.3830952151679341, "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Boulderfist Ogre"}, {"n": 6, "_type": "Num"}, {"attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "_type": "Call", "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"_type": "Template5", "hole1": 7, "hole0": 6}], "name": "BoulderfistOgre"}]}, "choice_history": [50, 111, 176, 58, 90, "Boulderfist", "Ogre", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 167, 38, 121, "Boulderfist", " ", "Ogre", "<EOS>", 37, 117, "6", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 36, 113, "False", "<EOS>", 72, 140, "6", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.weapon.base_attack += 2\n        player.hero.change_temp_attack(2)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and player.weapon is not None\n", "beams": [{"score_history": [-7.62939453125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -1.9073468138230965e-06, -1.7881377516459906e-06, -7.533743337262422e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0001925826072692871, -1.7404556274414062e-05, -6.19888032815652e-06, -0.00185394287109375, -0.5280675888061523, -0.000911712646484375, -1.6689240510459058e-05, -2.4795530407573096e-05, -2.0265579223632812e-06, 0.0, -5.7220458984375e-06, -3.2186455882765586e-06, -1.0117274522781372, -7.62939453125e-06, -0.0011826753616333008, 0.0, -0.00012969970703125, -2.09808349609375e-05, -4.1961669921875e-05, 0.0, -3.4332275390625e-05, -4.57763671875e-05, -0.0005645751953125, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -0.0004253387451171875, -1.9073486328125e-05, -1.9073486328125e-06, -0.000102996826171875, -4.291534423828125e-06, -0.6619729995727539, -2.288818359375e-05, -7.62939453125e-06, -1.33514404296875e-05, -1.33514404296875e-05, -1.1444091796875e-05, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -1.823902130126953e-05, -2.09808349609375e-05, -0.0001010894775390625, 0.0, -3.62396240234375e-05, 0.0, 0.0, -5.340576171875e-05, -1.1444091796875e-05, 0.0, -1.52587890625e-05, -0.0008835792541503906, -1.1920928244535389e-07, -0.27228260040283203, -0.015206336975097656, -0.01612377166748047, -0.0012836456298828125, -1.9073486328125e-06, 0.0, -0.3524904251098633, 0.0, -1.9073486328125e-05, 0.0, -0.0114898681640625, 0.0, -0.01196660939604044, -3.6954811548639555e-06, -0.47357824444770813, -2.3841855067985307e-07, -0.002117156982421875, -0.3220491409301758, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -0.00028717517852783203, 0.0, -0.000152587890625, -0.09266185760498047, -0.000102996826171875, -0.0001811981201171875, -3.814697265625e-06, -0.000171661376953125, -3.814697265625e-06, -0.02640247344970703, 0.0, -4.00543212890625e-05, -3.24249267578125e-05, -0.060257911682128906, -1.1444091796875e-05, -0.002272238489240408, -9.894321920000948e-06, -0.3247774839401245, -1.33514404296875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.000102996826171875, -0.7138895392417908, -5.7220458984375e-06, -0.0001659393310546875, -0.020397186279296875, -9.5367431640625e-06, -0.001495361328125, -2.6702880859375e-05, -3.62396240234375e-05, -1.52587890625e-05, -0.0066680908203125, 0.0, -8.0108642578125e-05, -1.9073486328125e-06, -0.019884109497070312, -9.5367431640625e-06, -0.0012302584946155548, -7.033323527139146e-06, -0.3419976234436035, -1.1444091796875e-05, 0.0, -9.5367431640625e-06, -5.91278076171875e-05, -0.3019810914993286, -1.9073486328125e-06], "score": -5.602871238522276, "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.hero.<UNK> > 0:\n            player.hero.change_temp_attack(2)\n        else:\n            player.hero.change_temp_attack(2)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"hole2": "DRUID", "_type": "Template3", "hole1": 1, "hole0": "Deadly Poison", "hole3": "FREE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"attr": "use", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}, {"_type": "If", "body": [{"value": {"args": [{"n": 2, "_type": "Num"}], "_type": "Call", "func": {"attr": "change_temp_attack", "value": {"attr": "hero", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}], "test": {"left": {"attr": "<UNK>", "value": {"attr": "hero", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Compare", "comparators": [{"n": 0, "_type": "Num"}], "ops": [{"_type": "Gt"}]}, "orelse": [{"value": {"args": [{"n": 2, "_type": "Num"}], "_type": "Call", "func": {"attr": "change_temp_attack", "value": {"attr": "hero", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}]}], "name": "use"}], "name": "DeadlyPoison"}]}, "choice_history": [50, 111, 176, 58, 90, "Deadly", "Poison", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 70, 138, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 61, 95, "use", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "player", "<EOS>", 149, "game", "<EOS>", 177, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "use", "<EOS>", 164, 35, 112, "player", "<EOS>", 35, 112, "game", "<EOS>", 62, 99, 15, 91, 11, 81, 11, 81, 19, 112, "player", "<EOS>", "hero", "<EOS>", "<UNK>", "<EOS>", 160, 3, 163, 37, 117, "0", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", 163, 37, 117, "2", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", 163, 37, 117, "2", "<EOS>"]}]}
{"gold_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "beams": [{"score_history": [0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00031859628506936133, -0.0004251299542374909, -3.2186455882765586e-06, -3.62396240234375e-05, -1.9073486328125e-06, 0.0, -2.346048131585121e-05, -9.179114385915454e-06, -8.344646857949556e-07, -9.5367431640625e-06, -1.9073486328125e-06, -2.09808349609375e-05, -5.006789251638111e-06, 0.0, -3.24249267578125e-05, -7.05718994140625e-05, -1.1444091796875e-05, -5.7220458984375e-06, -2.0265579223632812e-06, -0.0028362274169921875, -3.814697265625e-06, 0.0, -3.62396240234375e-05, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000118255615234375, -1.9073486328125e-06, -4.57763671875e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.64774459740147e-05, -8.296966552734375e-05, -2.968311309814453e-05, -1.9073486328125e-06, -2.6702880859375e-05, -3.814697265625e-06, -4.775880370289087e-06, -3.2186049793381244e-05, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.67805938469246e-05, -0.24769294261932373, 0.0, -7.62939453125e-06, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -4.38690185546875e-05, 0.0, -0.28551578521728516, -0.0001277923583984375, -1.71661376953125e-05, -0.00011730194091796875, 0.0, -7.62939453125e-06, 0.0, -3.4332275390625e-05, 0.0, -3.814697265625e-06, 0.0, -0.4496889114379883, 0.0, -0.022195816040039062, -1.33514404296875e-05, -9.918212890625e-05, -1.1920928244535389e-07, -0.001407623291015625, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -0.0012949705123901367, 0.0, -4.38690185546875e-05, -0.002201080322265625, -4.9591064453125e-05, -0.3039834797382355, -2.0265579223632812e-06, -0.0010986328125, -0.1540088653564453, -2.86102294921875e-05, 0.0, -0.00012123584747314453, -0.0002465248107910156, -3.62396240234375e-05, -0.009830474853515625, -1.9073486328125e-06, -1.9073486328125e-06, -0.000278472900390625, -2.09808349609375e-05, -0.0016613006591796875, -1.9073486328125e-06, -0.0005359649658203125, -7.62939453125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.0012456178665161133, -3.814697265625e-06, -0.0023593902587890625, -1.9073486328125e-06, -0.0001468658447265625, -7.987022399902344e-06, -1.1920928244535389e-07, -0.0010204315185546875, -2.86102294921875e-05, -0.0020971298217773438, -6.198863957251888e-06, -0.0007407665252685547, 0.0], "score": -1.4945660711481281, "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Fire Elemental"}, {"n": 6, "_type": "Num"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "DEMON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "_type": "keyword", "arg": "minion_type"}, {"value": {"args": [{"_type": "Template17", "hole0": 1}, {"_type": "Call", "keywords": [{"value": {"_type": "Template18", "hole0": "BothPlayer"}, "_type": "keyword", "arg": "players"}, {"value": {"_type": "Template18", "hole0": "UserPicker"}, "_type": "keyword", "arg": "picker"}], "func": {"_type": "Name", "id": "CharacterSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "_type": "keyword", "arg": "battlecry"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"_type": "Template5", "hole1": 5, "hole0": 6}], "name": "FireElemental"}]}, "choice_history": [50, 111, 176, 58, 90, "Fire", "Elemental", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Fire", " ", "Elemental", "<EOS>", 37, 117, "6", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 172, 49, 152, "minion_type", "<EOS>", 11, 81, 19, 112, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 49, 152, "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 164, 45, 134, "1", "<EOS>", 30, 87, 19, 112, "Character", "Selector", "<EOS>", 172, 49, 152, "players", "<EOS>", 23, 135, "Both", "Player", "<EOS>", 49, 152, "picker", "<EOS>", 23, 135, "User", "Picker", "<EOS>", 72, 140, "6", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "beams": [{"score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, 0.0, -2.3603366571478546e-05, -3.6954811548639555e-06, -5.960446742392378e-06, -7.62939453125e-06, -3.814697265625e-06, 0.0, 0.0, -6.627896800637245e-05, -4.172316494077677e-06, -5.7220458984375e-06, -4.38690185546875e-05, -5.7220458984375e-06, -2.2292029825621285e-05, 0.0, -3.814697265625e-06, -0.000164031982421875, 0.0, -6.711294554406777e-05, -0.00012242782395333052, -0.0001316070556640625, -0.03314208984375, -4.38690185546875e-05, -5.090107151772827e-05, -6.878376007080078e-05, -1.9073486328125e-06, 0.0, -0.001401701127178967, -1.1920928244535389e-07, -0.0001049041748046875, 0.0, -0.004320263862609863, 0.0, -0.0001163482666015625, -5.7220458984375e-06, -1.1444091796875e-05, -0.0001583099365234375, -0.0014203785685822368, 0.0, -9.5367431640625e-06, -0.023859024047851562, -7.62939453125e-06, -9.265798144042492e-05, -0.0022945329546928406, -0.00677490234375, -5.7220458984375e-06, -0.0002958762052003294, -5.5193380831042305e-05, -1.1920928244535389e-07, -0.005748748779296875, -1.52587890625e-05, -2.3841855067985307e-07, -9.536738616588991e-07, -2.384184938364342e-07, -2.3841855067985307e-07], "score": -0.08075230995093818, "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"hole4": {"args": [{"_type": "Template18", "hole0": "Draw"}, {"_type": "Template18", "hole0": "PlayerSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole2": "COMMON", "_type": "Template6", "hole0": "Gnomish Inventor", "hole3": "battlecry", "hole1": 4}], "name": "__init__"}, {"_type": "Template5", "hole1": 4, "hole0": 2}], "name": "GnomishInventor"}]}, "choice_history": [50, 111, 176, 58, 90, "Gnomish", "Inventor", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 73, 141, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 164, 46, 135, "Draw", "<EOS>", 46, 135, "Player", "Selector", "<EOS>", 72, 140, "2", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n", "beams": [{"score_history": [-3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -5.7220458984375e-06, -3.099436753473128e-06, -3.3378546504536644e-06, -9.298280929215252e-06, -1.9073486328125e-06, 0.0, 0.0, -2.9647955670952797e-05, -2.2649757738690823e-05, -5.006789251638111e-06, -0.0001087188720703125, -0.08388805389404297, -0.0005779266357421875, -2.8609872970264405e-05, -4.458399780560285e-05, -5.841255187988281e-06, 0.0, -1.1920928244535389e-07, -1.1920928244535389e-07, -0.036448121070861816, -1.52587890625e-05, -2.288818359375e-05, -2.288818359375e-05, -0.0001926422119140625, -1.9073486328125e-06, -3.814697265625e-06, -5.91278076171875e-05, -0.00037384033203125, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0003070831298828125, -9.5367431640625e-06, -2.09808349609375e-05, -0.0027674436569213867, -2.3841855067985307e-07, -0.0023488998413085938, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008258819580078125, 0.0, -1.1801710570580326e-05, -6.318092346191406e-05, -0.0002155303955078125, 0.0, -2.47955322265625e-05, 0.0, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, 0.0, -1.71661376953125e-05, -0.00016224384307861328, -2.86102294921875e-05, -0.000247955322265625, -4.1961669921875e-05, -3.62396240234375e-05, -1.1444091796875e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0001049041748046875, 0.0, -4.76837158203125e-05, 0.0, -0.014935612678527832, 0.0, -0.00025749183259904385, -5.960462772236497e-07, -0.23389852046966553, -9.5367431640625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.340576171875e-05, -0.005991935729980469, 0.0, -1.9073486328125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.0005235671997070312, -1.9073486328125e-06, -0.0001316070556640625, 0.0, -0.0011821985244750977, 0.0, -0.00034808655618689954, -1.4305104514278355e-06, -0.5245022773742676, -5.7220458984375e-06, -3.814697265625e-06, -0.0004825592041015625, -0.0002574920654296875, -0.010269701480865479, -3.814697265625e-06], "score": -0.9221673201176515, "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"hole2": "DRUID", "_type": "Template2", "hole1": 2, "hole0": "Heroic Strike"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"attr": "use", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"n": 2, "_type": "Num"}], "_type": "Call", "func": {"attr": "change_temp_attack", "value": {"attr": "hero", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"n": 2, "_type": "Num"}], "_type": "Call", "func": {"attr": "increase_armor", "value": {"attr": "hero", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "use"}], "name": "HeroicStrike"}]}, "choice_history": [50, 111, 176, 58, 90, "Heroic", "Strike", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 69, 137, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", 61, 95, "use", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "player", "<EOS>", 149, "game", "<EOS>", 178, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "use", "<EOS>", 164, 35, 112, "player", "<EOS>", 35, 112, "game", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", 163, 37, 117, "2", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 163, 37, 117, "2", "<EOS>"]}]}
{"gold_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "beams": [{"score_history": [0.0, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.08733972162008286, -0.002769213868305087, -1.0728830375228426e-06, -5.7220458984375e-06, 0.0, 0.0, -3.0960654839873314e-06, -2.801384289341513e-05, -3.933898824470816e-06, -0.000110626220703125, -0.020906448364257812, -8.7738037109375e-05, -8.999896090244874e-05, -2.9444683605106547e-05, -7.748586540401448e-06, -1.9073486328125e-06, -1.0125339031219482e-05, -7.152531907195225e-06, -0.9414196610450745, -1.9073486328125e-06, -0.14520645141601562, -3.814697265625e-06, -0.002716064453125, 0.0, 0.0, -9.1552734375e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.5740079879760742, -1.9073486328125e-06, -9.918212890625e-05, -0.0002288818359375, -0.0001544952392578125, -0.00028228759765625, -0.0002460479736328125, -3.814697265625e-05, 0.0, -0.05619525909423828, -7.62939453125e-06, -0.000247955322265625, -2.47955322265625e-05, -1.9073486328125e-06, -9.393251093570143e-05, -1.1444026313256472e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.0010775488335639238, -4.5299530029296875e-06, -0.10238456726074219, -1.9073486328125e-05, -2.86102294921875e-05, -0.06032085418701172, 0.0, -4.76837158203125e-05, -9.5367431640625e-06, -0.0001888275146484375, 0.0, -3.814697265625e-05, -0.000125885009765625, -0.10251140594482422, 0.0, -8.7738037109375e-05, -1.9073486328125e-06, -0.0005435943603515625, 0.0], "score": -2.0999399430928634, "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, charge=True, taunt=True)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"hole2": "DRUID", "_type": "Template1", "hole1": 8, "hole0": "Ironbark Protector"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"n": 8, "_type": "Num"}, {"n": 8, "_type": "Num"}], "_type": "Call", "keywords": [{"value": {"value": true, "_type": "NameConstant"}, "_type": "keyword", "arg": "charge"}, {"value": {"value": true, "_type": "NameConstant"}, "_type": "keyword", "arg": "taunt"}], "func": {"_type": "Name", "id": "Minion"}}, "_type": "Return"}], "name": "create_minion"}], "name": "IronbarkProtector"}]}, "choice_history": [50, 111, 176, 58, 90, "Ironbark", "Protector", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 66, 126, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "DRUID", "<EOS>", 61, 95, "create_minion", "<EOS>", 150, 157, 149, "self", "<EOS>", 149, "player", "<EOS>", 176, 64, 119, 14, 89, 19, 112, "Minion", "<EOS>", 164, 37, 117, "8", "<EOS>", 37, 117, "8", "<EOS>", 172, 49, 152, "charge", "<EOS>", 20, 113, "True", "<EOS>", 49, 152, "taunt", "<EOS>", 20, 113, "True", "<EOS>"]}]}
{"gold_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.taunt = True\n", "beams": [{"score_history": [-7.62939453125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -0.00017547607421875, -0.000110626220703125, -0.0007651500636711717, -0.0003490447998046875, -0.0005761325592175126, -0.00042470922926440835, -0.0011131713399663568, -2.86102294921875e-05, 0.0, -1.9073486328125e-06, -5.833804607391357e-06, -0.00011527537571964785, -2.3841855067985307e-07, -0.00028228759765625, -9.5367431640625e-06, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -2.6702880859375e-05, -1.9073486328125e-06, -0.0001773834228515625, -0.011865615844726562, -3.4332275390625e-05, 0.0, -1.33514404296875e-05, 0.0, -7.867813110351562e-06, -5.924701690673828e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -0.00043275527423247695, -0.0038472414016723633, -0.004799770191311836, -6.687641143798828e-05, -8.14199447631836e-05, -8.0108642578125e-05, -0.0005660048336721957, -0.00241851806640625, -3.814697265625e-06, 0.0, -0.0163893885910511, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -1.1444091796875e-05, 0.0, -1.537799835205078e-05, -2.3841855067985307e-07, -0.31019771099090576, -2.86102294921875e-05, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -4.1961669921875e-05, -5.7220458984375e-06, -0.0006504058837890625, 0.0, -0.0465087890625, -3.814697265625e-06, 0.0, -0.2900686264038086, -0.000164031982421875, -0.0003604888916015625, 0.0, -0.0006618499755859375, 0.0, -1.9073486328125e-06, 0.0, -2.86102294921875e-05, -7.62939453125e-06, -0.00016021728515625, -5.841255187988281e-06, -0.009050846099853516, 0.0, -0.04024505615234375, -5.340576171875e-05, -7.82012939453125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, 0.0, 0.0, -2.6702880859375e-05, -1.71661376953125e-05, 0.0, -5.054473513155244e-05, -5.960462772236497e-07, -0.0066623687744140625, -3.0517578125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -4.00543212890625e-05, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -1.657007851463277e-05, -2.300739288330078e-05, -0.0003108978271484375, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, -4.053115480928682e-05, 0.0, -0.01397705078125, -8.0108642578125e-05, -1.33514404296875e-05, -0.0001049041748046875, -3.814697265625e-06, -0.0002689361572265625, -0.000286102294921875, 0.0, -1.71661376953125e-05, 0.0, -0.0008971691131591797, 0.0, -2.09808349609375e-05, 0.0, -0.2378934621810913, -1.1444091796875e-05, -5.7220458984375e-06, -0.0001888275146484375, -5.53131103515625e-05, -0.16363120079040527, -0.0003261566162109375, -0.0002231597900390625, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0023775100708007812, -5.7220458984375e-06, -6.866455078125e-05, 0.0, -0.030440926551818848, -1.1920928244535389e-07, -3.0517578125e-05, 0.0, -0.3443584442138672, -3.24249267578125e-05, -2.6702880859375e-05, -0.061469078063964844, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -0.0035344362258911133, -0.003489255905151367, -7.43865966796875e-05, -0.6539802551269531, -1.9073486328125e-06, -0.06766237318515778, -0.4386151134967804], "score": -2.7749848648979807, "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.add_buff(Buff(<UNK>()))\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Mark of the Wild"}, {"n": 2, "_type": "Num"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "keyword", "arg": "target_func"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"attr": "use", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"n": 4, "_type": "Num"}], "_type": "Call", "func": {"attr": "change_attack", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"args": [{"_type": "Template18", "hole0": "<UNK>"}], "_type": "Call", "func": {"_type": "Name", "id": "Buff"}}], "_type": "Call", "func": {"attr": "add_buff", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "use"}], "name": "MarkOfTheWild"}]}, "choice_history": [50, 111, 176, 58, 90, "Mark", "Of", "The", "Wild", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 37, 117, "2", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 171, 49, 152, "target_func", "<EOS>", 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 61, 95, "use", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "player", "<EOS>", 149, "game", "<EOS>", 178, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "use", "<EOS>", 164, 35, 112, "player", "<EOS>", 35, 112, "game", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 163, 37, 117, "4", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 163, 30, 88, 19, 112, "Buff", "<EOS>", 163, 46, 135, "<UNK>", "<EOS>"]}]}
{"gold_code": "class MultiShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            target = game.random_choice(targets)\n            targets.remove(target)\n            target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "beams": [{"score_history": [-1.9073486328125e-06, -1.71661376953125e-05, -1.9073486328125e-06, -4.00543212890625e-05, -1.9073486328125e-06, -2.50339189733495e-06, -2.443764969939366e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.476207196712494e-07, -0.00010800361633300781, -7.152555099310121e-07, -0.4314603805541992, -0.027425765991210938, -6.4849853515625e-05, -1.1563301086425781e-05, 0.0, 0.0, 0.0, 0.0, -5.7220458984375e-06, 0.0, -7.05718994140625e-05, -1.52587890625e-05, -5.7220458984375e-06, -0.000118255615234375, -0.000736236572265625, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -5.7220458984375e-06, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, 0.0, -5.340576171875e-05, -1.9073486328125e-06, -2.47955322265625e-05, -2.3841855067985307e-07, -1.1563301086425781e-05, -1.52587890625e-05, -7.62939453125e-06, -9.417489309271332e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -7.987022399902344e-06, -2.3841855067985307e-07, -0.11761367321014404, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -1.33514404296875e-05, -2.86102294921875e-05, -0.02941131591796875, 0.0, -0.5031900405883789, -0.0076389312744140625, -6.866455078125e-05, -3.0517578125e-05, -3.814697265625e-06, -0.002712249755859375, -0.0002384185791015625, -1.52587890625e-05, 0.0, -7.62939453125e-06, 0.0, -0.0001068115234375, -3.814697265625e-06, -0.0004578828811645508, -1.9073486328125e-06, -0.03258037567138672, 0.0, -0.00146484375, -8.20159912109375e-05, -9.5367431640625e-06, 0.0, -3.0517578125e-05, -3.0517578125e-05, -9.918212890625e-05, -2.384185791015625e-06, 0.0, 0.0, -5.841255187988281e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.0006034373654983938, -2.861022494471399e-06, -0.007991790771484375, -1.71661376953125e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -3.24249267578125e-05, -1.9073486328125e-06, -3.4570634852570947e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -1.33514404296875e-05, -3.814697265625e-06, -3.814697265625e-06, -8.34464663057588e-06, -1.9073486328125e-06, -0.0028543472290039062, -5.7220458984375e-05, -3.814697265625e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.016193823888897896, -3.814697265625e-06, -0.0004100799560546875, -0.0001010894775390625, -8.20159912109375e-05, 0.0, -0.4041585922241211, 0.0, -0.0007156133069656789, -5.7220440794480965e-06, -0.0007050037384033203, -9.5367431640625e-06, -3.814697265625e-06, -3.814697265625e-05, -3.0517578125e-05, -1.33514404296875e-05, 0.0, -0.0851449966430664, 0.0, -0.0028420686721801758, -1.9073486328125e-05, -0.002079606056213379, -2.1457672119140625e-06, -6.41181250102818e-05, 0.0, -0.5520076751708984, -0.0002384185791015625, -7.43865966796875e-05, -1.9073486328125e-06, -0.04602015018463135, -4.172325134277344e-06, -5.7220458984375e-05, -6.103515625e-05, -0.0007715225219726562, -3.814697265625e-06, -0.0009844235610216856, -1.6570091247558594e-05, -0.03268146514892578, -0.0017976760864257812, -1.9073486328125e-06, -6.44921965431422e-05, -4.76837158203125e-05, -0.5486059188842773, -0.0024738311767578125, -0.004066762514412403, -2.861022494471399e-06, -0.12097644805908203, -0.0003376007080078125, -1.1444091796875e-05, -1.9073486328125e-06, -0.001922607421875, -0.000385284423828125, -0.3251298666000366, -1.1920928244535389e-07, -5.53131103515625e-05, 0.0, -1.71661376953125e-05, 0.0, -0.003032684326171875, 0.0, -0.0029220518190413713, -2.491474151611328e-05, -0.0008703470230102539, -3.9458274841308594e-05, -1.9073486328125e-06, -0.000141143798828125, -7.62939453125e-06, -0.007395146880298853, -3.814697265625e-06, -7.82012939453125e-05, -0.0009288787841796875, -5.7220458984375e-06, -3.814697265625e-06, -5.7220458984375e-06, -9.1552734375e-05, -4.9591064453125e-05, 0.0, -0.31489118933677673, -2.1457441107486375e-05, -0.005000948905944824, -0.000102996826171875, -1.52587890625e-05, -0.014148712158203125, -9.5367431640625e-05, -0.002479300368577242, -4.88758041683468e-06, -7.62939453125e-06, -7.62939453125e-06, -0.0007677078247070312, -2.503394853192731e-06, -0.577275276184082, -5.7220458984375e-06, -0.0003185272216796875, -0.030216217041015625, -3.814697265625e-06, -2.288818359375e-05, -0.0368804931640625, -1.9073486328125e-06, -0.000850677490234375, 0.0, -0.003328142687678337, -2.0265579223632812e-06, -8.428096771240234e-05, 0.0, -0.1574031114578247, -7.62939453125e-06, -1.71661376953125e-05, -0.2969484329223633, -5.7220458984375e-06, -0.026440957561135292, -1.7881377516459906e-06, -1.9073486328125e-06, 0.0, -0.00021028518676757812, -1.311301275563892e-06], "score": -4.802559464300593, "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, player.effective_spell_damage(3)):\n            target = game.random_choice(targets)\n            target.damage(player.effective_spell_damage(3), self)\n            self.target.damage(4, self)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Multi-Shot"}, {"n": 4, "_type": "Num"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "keyword", "arg": "target_func"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"attr": "use", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call", "func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}}, "_type": "Assign", "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"value": {"args": [{"_type": "Name", "id": "targets"}], "_type": "Call", "func": {"attr": "random_choice", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}}, "_type": "Assign", "targets": [{"_type": "Name", "id": "target"}]}, {"value": {"args": [{"_type": "Template13", "hole0": 3}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"attr": "damage", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"n": 4, "_type": "Num"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"attr": "damage", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}], "iter": {"args": [{"n": 0, "_type": "Num"}, {"_type": "Template13", "hole0": 3}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}}], "name": "use"}], "name": "Multi-Shot"}]}, "choice_history": [50, 111, 176, 58, 90, "Multi-Shot", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Multi-Shot", "<EOS>", 37, 117, "4", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 171, 49, 152, "target_func", "<EOS>", 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 61, 95, "use", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "player", "<EOS>", 149, "game", "<EOS>", 178, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "use", "<EOS>", 164, 35, 112, "player", "<EOS>", 35, 112, "game", "<EOS>", 55, 80, 163, 35, 112, "targets", "<EOS>", 14, 88, 11, 81, 19, 112, "copy", "<EOS>", "copy", "<EOS>", 163, 27, 81, 11, 81, 19, 112, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 60, 94, 19, 112, "i", "<EOS>", 14, 88, 19, 112, "range", "<EOS>", 164, 37, 117, "0", "<EOS>", 42, 130, "3", "<EOS>", 178, 55, 80, 163, 35, 112, "target", "<EOS>", 14, 88, 11, 81, 19, 112, "game", "<EOS>", "random_choice", "<EOS>", 163, 35, 112, "targets", "<EOS>", 59, 93, 14, 88, 11, 81, 19, 112, "target", "<EOS>", "damage", "<EOS>", 164, 42, 130, "3", "<EOS>", 35, 112, "self", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 164, 37, 117, "4", "<EOS>", 35, 112, "self", "<EOS>"]}]}
{"gold_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word: Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(2)\n        player.draw()\n", "beams": [{"score_history": [0.0, 0.0, -3.814697265625e-06, -2.6702880859375e-05, -1.9073486328125e-06, -4.29153169534402e-06, -0.0005938579561188817, -0.011849138885736465, -0.0006442439625971019, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -2.3720087483525276e-05, -0.00010192394256591797, 0.0, -6.866455078125e-05, -3.814697265625e-06, -1.52587890625e-05, -9.655935173213948e-06, 0.0, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -1.71661376953125e-05, -2.503394853192731e-06, -1.9073486328125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -7.62939453125e-06, -0.0001068115234375, -3.814697265625e-06, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -1.3470649719238281e-05, -3.397464024601504e-05, -1.9073486328125e-06, 0.0, -2.09808349609375e-05, 0.0, -5.14984130859375e-05, -0.0013908505206927657, -0.0014781951904296875, -0.0052979327738285065, -0.0012454986572265625, -4.720687138615176e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-06, -2.3841748770792037e-06, -4.768370445162873e-07, -5.7220458984375e-06, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -2.622604142743512e-06, -1.1920928244535389e-07, -0.33005964756011963, -5.7220458984375e-06, -1.9073486328125e-05, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.0002727508544921875, 0.0, -0.00322723388671875, -1.9073486328125e-06, -5.7220458984375e-06, -0.0004787445068359375, -2.09808349609375e-05, -5.340576171875e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, -1.9073486328125e-06, -4.76837158203125e-05, -9.655952453613281e-06, -0.06965506076812744, 0.0, -0.47763729095458984, -7.62939453125e-06, -4.1961669921875e-05, 0.0, -5.7220458984375e-06, -2.6702880859375e-05, -1.9073486328125e-06, -3.838539123535156e-05, -3.576278118089249e-07, 0.0, -0.0002980232238769531, -7.62939453125e-06, -1.9073486328125e-06, -0.0005637404974550009, -1.2397711543599144e-05, -0.0003833770751953125, -4.00543212890625e-05, 0.0, -1.52587890625e-05, -2.288818359375e-05, -7.62939453125e-06, -3.814697265625e-06, -0.0001544952392578125, -1.33514404296875e-05, -3.8146965380292386e-05, -6.711483001708984e-05, -9.918212890625e-05, 0.0, -0.0001354217529296875, -1.9073486328125e-06, 0.0, -6.079673767089844e-06, -3.814697265625e-06, 0.0, 0.0, -1.2993811651540454e-05, 0.0, -0.00148773193359375, -8.0108642578125e-05, -0.002071380615234375, -0.0057220458984375, -2.47955322265625e-05, -2.288818359375e-05, -0.0001354217529296875, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.001617431640625, 0.0, -7.62939453125e-05, 0.0, -0.802664041519165, 0.0, -1.71661376953125e-05, -0.06828022003173828, -0.0001277923583984375, -7.62939453125e-06, 0.0, -0.004175305366516113, -3.266334533691406e-05, -3.0517578125e-05, -0.000202178955078125, -0.00016021728515625, -0.16524598002433777, -7.188061863416806e-05, -0.0001373291015625, -5.7220458984375e-05, -8.7738037109375e-05, -0.002414703369140625, -1.9073486328125e-05, 0.0, -0.0018072128295898438, 0.0, -0.0005213022232055664, 0.0, -0.0008858392247930169, 0.0], "score": -1.9650337667410938, "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        player.draw()\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Power Word Shield"}, {"n": 1, "_type": "Num"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "keyword", "arg": "target_func"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"attr": "use", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"args": [{"_type": "Template18", "hole0": "Frozen"}], "_type": "Call", "func": {"_type": "Name", "id": "Buff"}}], "_type": "Call", "func": {"attr": "add_buff", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"_type": "Call", "func": {"attr": "draw", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "use"}], "name": "PowerWordShield"}]}, "choice_history": [50, 111, 176, 58, 90, "Power", "Word", "Shield", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Power", " ", "Word", " ", "Shield", "<EOS>", 37, 117, "1", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 171, 49, 152, "target_func", "<EOS>", 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 61, 95, "use", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "player", "<EOS>", 149, "game", "<EOS>", 178, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "use", "<EOS>", 164, 35, 112, "player", "<EOS>", 35, 112, "game", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 163, 30, 88, 19, 112, "Buff", "<EOS>", 163, 46, 135, "Frozen", "<EOS>", 59, 93, 14, 86, 11, 81, 19, 112, "player", "<EOS>", "draw", "<EOS>"]}]}
{"gold_code": "class SenjinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "beams": [{"score_history": [-1.9073486328125e-06, -2.6702880859375e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.9073486328125e-06, -0.009604791179299355, -0.0004804172203876078, -7.271765298355604e-06, -9.5367431640625e-06, 0.0, 0.0, -3.573368303477764e-07, -6.43729799776338e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -0.006136894226074219, -0.000171661376953125, -8.702239938429557e-06, -2.3365020751953125e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -4.0531158447265625e-06, -7.152555099310121e-07, -0.13923712074756622, 0.0, -0.0014352750731632113, 0.0, -0.019410133361816406, -7.62939453125e-06, -5.9604644775390625e-06, -1.1920928244535389e-07, -1.0967249181703664e-05, 0.0, -0.04146933555603027, 0.0, -8.20159912109375e-05, 0.0, -5.53131103515625e-05, -1.9073486328125e-06], "score": -0.21824651264817874, "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"hole2": "ALL", "_type": "Template3", "hole1": 4, "hole0": "Sen'jin Shieldmasta", "hole3": "FREE"}, {"hole2": "taunt", "_type": "Template4", "hole1": 5, "hole0": 3, "hole3": {"value": true, "_type": "NameConstant"}}], "name": "Sen'jinShieldmasta"}]}, "choice_history": [50, 111, 176, 58, 90, "Sen'jin", "Shieldmasta", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 70, 138, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", 71, 139, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 20, 113, "True", "<EOS>"]}]}
{"gold_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "beams": [{"score_history": [-3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.0517578125e-05, -1.9073486328125e-06, -5.960462772236497e-07, -5.364403477869928e-06, -1.1920928244535389e-07, -2.47955322265625e-05, 0.0, -5.7220458984375e-06, -2.1408777683973312e-06, -0.0002099274715874344, -6.9141146923357155e-06, -3.0517578125e-05, -0.06229686737060547, -0.0001010894775390625, -1.4066696166992188e-05, 0.0, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.91278076171875e-05, -0.0002384185791015625, -1.9073486328125e-06, 0.0, -8.392333984375e-05, -9.5367431640625e-06, -1.9073486328125e-06, -3.933906555175781e-06, -5.91278076171875e-05, 0.0, -0.00011444091796875, -3.814697265625e-06, -9.5367431640625e-06, -0.00020275443966966122, -3.528594970703125e-05, -7.152555099310121e-07, 0.0, -3.814697265625e-05, -3.814697265625e-06, -2.3126598534872755e-05, -1.4305104514278355e-06, -0.005321502685546875, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -2.1457672119140625e-06, -0.18459641933441162, -1.9073486328125e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, 0.0, -0.000194549560546875, -1.71661376953125e-05, -0.0011959075927734375, 0.0, -0.03548431396484375, -4.00543212890625e-05, -0.000225067138671875, -3.0517578125e-05, -1.9073486328125e-06, -0.00244903564453125, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -5.340576171875e-05, 0.0, -0.00156402587890625, -1.9073486328125e-06, -0.0054187774658203125, -1.9073486328125e-06, -0.7606421709060669, 0.0, -0.032364845275878906, -0.0002899169921875, -0.000102996826171875, 0.0, -1.1444091796875e-05, -5.340576171875e-05, -2.6702880859375e-05, -1.9073486328125e-06, 0.0, 0.0, -0.0001087188720703125, 0.0, -1.9073486328125e-06, -0.0005767345428466797, -1.1920928244535389e-07, -0.001689910888671875, -5.7220458984375e-05, -5.7220458984375e-06, -7.82012939453125e-05, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.001552581787109375, -6.4849853515625e-05, -2.3722410332993604e-05, -7.867813110351562e-06, -0.000469207763671875, 0.0, -4.76837158203125e-05, -1.33514404296875e-05, -9.5367431640625e-06, -2.6702880859375e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -4.76837158203125e-05, -1.33514404296875e-05, -0.0015087127685546875, -0.0001220703125, -0.023036956787109375, -0.00042724609375, -0.01928532123565674, -4.768370445162873e-07, -4.00543212890625e-05, -1.9073486328125e-06, -0.0062351226806640625, -0.007480621337890625, -3.814697265625e-06, -1.9073486328125e-06, -7.05718994140625e-05, 0.0, -0.18357086181640625, 0.0, -0.0003490447998046875, 0.0, -0.008745431900024414, -1.9073486328125e-06, -0.04117321968078613, -9.5367431640625e-06, -0.0018762212712317705, -1.4305104514278355e-06, -0.002362489700317383, 0.0, -3.62396240234375e-05, -0.00183868408203125, -0.0002269744873046875, -0.0018006563186645508, -4.362964682513848e-05, 0.0, -3.814697265625e-06, -2.288818359375e-05, 0.0], "score": -1.398958404083416, "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Sinister Strike"}, {"n": 1, "_type": "Num"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "<UNK>", "value": {"attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "keyword", "arg": "target_func"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"attr": "use", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"_type": "Template9", "hole0": 3}, "_type": "Expr"}, {"value": {"args": [{"_type": "Template13", "hole0": 3}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"attr": "damage", "value": {"attr": "hero", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "use"}], "name": "SinisterStrike"}]}, "choice_history": [50, 111, 176, 58, 90, "Sinister", "Strike", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Sinister", " ", "Strike", "<EOS>", 37, 117, "1", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 171, 49, 152, "target_func", "<EOS>", 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", 61, 95, "use", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "player", "<EOS>", 149, "game", "<EOS>", 178, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "use", "<EOS>", 164, 35, 112, "player", "<EOS>", 35, 112, "game", "<EOS>", 59, 93, 24, 144, "3", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 11, 81, 19, 112, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 164, 42, 130, "3", "<EOS>", 35, 112, "self", "<EOS>"]}]}
{"gold_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"score_history": [0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.007711994927376509, -0.006978750228881836, -1.9073486328125e-06, 0.0, 0.0, -9.532959666103125e-07, -7.629387255292386e-06, -3.576278118089249e-07, -2.47955322265625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -3.933906555175781e-06, -0.0070819854736328125, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-06, -2.288818359375e-05, -1.9073486328125e-06, 0.0, -0.0001697540283203125, -1.9073486328125e-06, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, 0.0, -2.288818359375e-05, 0.0, -3.814697265625e-06, -5.960462772236497e-07, -0.00028228759765625, -3.814697265625e-06, -5.7220458984375e-06, -6.818771362304688e-05, 0.0, -3.814697265625e-06, 0.0, -4.1961669921875e-05, 0.0, -4.9591064453125e-05, -3.4570634852570947e-06, -0.03661394119262695, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -2.0265579223632812e-06, -0.07628166675567627, 0.0, -0.000568389892578125, -1.71661376953125e-05, -0.00011444091796875, -5.245207830739673e-06, 0.0, -1.52587890625e-05, 0.0, -2.86102294921875e-05, 0.0, -5.7220458984375e-06, 0.0, -0.4708977937698364, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.00043523311614990234, -3.576278118089249e-07, -0.031951904296875, -1.9073486328125e-06, -1.9073486328125e-06, -3.24249267578125e-05, -2.6345227524871007e-05, 0.0, -0.00061798095703125, -0.5478582382202148, -5.7220458984375e-05, -4.38690185546875e-05, -3.814697265625e-05, -0.8476459383964539, -1.0845342874526978, -7.867782187531702e-06, -0.0002727508544921875, -0.024361610412597656, -7.05718994140625e-05, -0.11997272074222565, -4.291534423828125e-06, -0.012739181518554688, -4.38690185546875e-05, -0.003047943115234375, -1.1563301086425781e-05, 0.0, -7.62939453125e-06, -4.38690185546875e-05, -0.0003250832960475236, -1.1920928244535389e-07, -2.3484009943786077e-05, 0.0], "score": -3.2813970468125078, "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(MinionDied(3), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Succubus"}, {"n": 2, "_type": "Num"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "DEMON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "_type": "keyword", "arg": "minion_type"}, {"value": {"args": [{"args": [{"n": 3, "_type": "Num"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionDied"}}, {"_type": "Template18", "hole0": "PlayerSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "_type": "keyword", "arg": "battlecry"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"_type": "Template5", "hole1": 3, "hole0": 4}], "name": "Succubus"}]}, "choice_history": [50, 111, 176, 58, 90, "Succubus", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Succubus", "<EOS>", 37, 117, "2", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 172, 49, 152, "minion_type", "<EOS>", 11, 81, 19, 112, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 49, 152, "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 164, 30, 88, 19, 112, "Minion", "Died", "<EOS>", 163, 37, 117, "3", "<EOS>", 46, 135, "Player", "Selector", "<EOS>", 72, 140, "4", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "beams": [{"score_history": [0.0, -2.6702880859375e-05, -2.288818359375e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.13031326234340668, -0.007544430438429117, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.55717134475708e-05, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.07415771484375, -3.814697265625e-06, -4.971027374267578e-05, 0.0, -3.814697265625e-06, -0.0001087188720703125, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.13684558868408203, -3.814697265625e-06, -5.7220458984375e-06, -0.09953498840332031, -5.53131103515625e-05, 0.0, -1.33514404296875e-05, -7.62939453125e-06, -1.990794771700166e-05, -2.0265579223632812e-06, -5.53131103515625e-05, 0.0, -0.6811447143554688, -1.9073486328125e-05, -3.814697265625e-06, -0.0003477922291494906, -6.687641143798828e-05, -3.242486127419397e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.4332275390625e-05, -4.9709167797118425e-05, -1.4305104514278355e-06, -3.0517578125e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -9.894371032714844e-06, -1.9073486328125e-06, -0.0039255619049072266, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -0.000194549560546875, 0.0, -7.62939453125e-06, -1.33514404296875e-05, -0.0002155303955078125, -1.1444091796875e-05, -0.0015649795532226562, -4.1961669921875e-05, -0.013858991675078869, -1.311301275563892e-06, -0.0037567326799035072, 0.0], "score": -1.1542678664426376, "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "War Golem"}, {"n": 7, "_type": "Num"}, {"attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "_type": "Call", "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"_type": "Template5", "hole1": 7, "hole0": 7}], "name": "WarGolem"}]}, "choice_history": [50, 111, 176, 58, 90, "War", "Golem", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 167, 38, 121, "War", " ", "Golem", "<EOS>", 37, 117, "7", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 36, 113, "False", "<EOS>", 72, 140, "7", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(\n            MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(),\n            TargetSelector())])])\n", "beams": [{"score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -0.01845211535692215, -8.249282836914062e-05, -3.814697265625e-06, 0.0, 0.0, -1.5951693058013916e-05, -2.419931479380466e-05, -1.537799835205078e-05, -7.62939453125e-06, -5.7220458984375e-06, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -1.1444091796875e-05, -9.5367431640625e-06, 0.0, -1.33514404296875e-05, -7.43865966796875e-05, 0.0, -4.76837158203125e-05, -7.62939453125e-05, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -2.0265579223632812e-06, -1.9073486328125e-05, -3.814697265625e-06, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -3.2186455882765586e-06, -1.1563301086425781e-05, -0.0001735687255859375, 0.0, -0.05994057655334473, 0.0, 0.0, 0.0, -0.000141143798828125, -3.814697265625e-06, -0.00011110305786132812, -3.87430154660251e-05, -0.12168574333190918, -1.33514404296875e-05, 0.0, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.014505386352539062, -1.1444091796875e-05, -0.0001239776611328125, -3.814697265625e-06, 0.0, -0.0004216432280372828, -1.9073486328125e-06, -5.7220458984375e-05, 0.0, -3.814697265625e-06, 0.0, -8.96453857421875e-05, 0.0, -0.00119781494140625, 0.0, -0.000316619873046875, -3.814697265625e-06, -0.0004750490188598633, -1.1920922133867862e-06, -8.583023372921161e-06, -7.152555099310121e-07, -0.0001888275146484375, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.004441261291503906, -1.33514404296875e-05, -7.62939453125e-05, -1.9073486328125e-06, 0.0, -0.00016236305236816406, -5.841255187988281e-06, -0.000286102294921875, -0.1411304473876953, -1.9073486328125e-06, -0.00792538933455944, -3.862380617647432e-05, -1.33514404296875e-05, 0.0, -3.62396240234375e-05, -5.53131103515625e-05, -0.0001531839370727539, -3.814697265625e-05, 0.0, -6.67572021484375e-05, -0.00084686279296875, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.0013232231140136719, -0.0002567768096923828, -1.71661376953125e-05, -0.37365055084228516, -9.5367431640625e-06, -0.2121139019727707, -0.009552582167088985, -0.0025424957275390625, -1.9073486328125e-06, -0.3695058822631836, -7.987022399902344e-06, 0.0], "score": -1.342830967830423, "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give(\n            Frozen()), TargetSelector()))])\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Acidmaw"}, {"n": 2, "_type": "Num"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "LEGENDARY", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "_type": "keyword", "arg": "minion_type"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"hole2": "effects", "_type": "Template4", "hole1": 2, "hole0": 4, "hole3": {"elts": [{"args": [{"_type": "Template18", "hole0": "Damaged"}, {"args": [{"args": [{"_type": "Template18", "hole0": "Frozen"}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"_type": "Template18", "hole0": "TargetSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}], "_type": "List"}}], "name": "Acidmaw"}]}, "choice_history": [50, 111, 176, 58, 90, "Acidmaw", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Acidmaw", "<EOS>", 37, 117, "2", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 171, 49, 152, "minion_type", "<EOS>", 11, 81, 19, 112, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 71, 139, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 17, 107, 163, 30, 88, 19, 112, "Effect", "<EOS>", 164, 46, 135, "Damaged", "<EOS>", 30, 88, 19, 112, "Action", "Tag", "<EOS>", 164, 30, 88, 19, 112, "Give", "<EOS>", 163, 46, 135, "Frozen", "<EOS>", 46, 135, "Target", "Selector", "<EOS>"]}]}
{"gold_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"score_history": [-1.9073486328125e-06, -0.000102996826171875, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, -0.00042524831951595843, -4.768367489305092e-06, -7.62939453125e-06, 0.0, 0.0, -5.352310836315155e-05, -4.3034386180806905e-05, 0.0, -2.288818359375e-05, -0.011384963989257812, -2.47955322265625e-05, -2.1696090698242188e-05, -1.1920928244535389e-07, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.0009174346923828125, 0.0, -1.33514404296875e-05, -0.008754730224609375, -0.0001506805419921875, 0.0, -5.7220458984375e-06, -1.52587890625e-05, -1.728534698486328e-05, -2.741813204920618e-06, -7.069107959978282e-05, 0.0, -0.001132965087890625, -7.2479248046875e-05, -7.62939453125e-06, -3.576278118089249e-07, -5.7220458984375e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.0001435279700672254, 0.0, -1.9073486328125e-06, 0.0, -2.6702880859375e-05, -9.5367431640625e-06, -1.33514404296875e-05, -9.655952453613281e-06, -0.00019240373512730002, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -0.0001430511474609375, -0.0001888275146484375, -0.000995635986328125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -9.78708267211914e-05, -1.9073486328125e-06, -0.0002079010009765625, -4.00543212890625e-05, -0.000507354736328125, -2.288818359375e-05, 0.0, -6.67572021484375e-05, -3.814697265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0052032470703125, -5.7220458984375e-06, -5.14984130859375e-05, -0.17612934112548828, -0.0005016326904296875, -0.0011280886828899384, -1.1920928244535389e-07, -0.6432035565376282, 0.0], "score": -0.8522981187442582, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True)\n\n    def create_minion(self, p):\n        return Minion(4, 2)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Boar"}, {"n": 3, "_type": "Num"}, {"attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "_type": "Call", "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"_type": "Template14", "hole1": 2, "hole0": 4}], "name": "create_minion"}], "name": "Boar"}]}, "choice_history": [50, 111, 176, 58, 90, "Boar", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 167, 38, 121, "Boar", "<EOS>", 37, 117, "3", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 36, 113, "False", "<EOS>", 61, 95, "create_minion", "<EOS>", 150, 157, 149, "self", "<EOS>", 149, "p", "<EOS>", 176, 68, 131, "4", "<EOS>", "2", "<EOS>"]}]}
{"gold_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[\n            Choice(AttackMode(), Give([Buff(ChangeAttack(1))]),\n            SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))\n            ]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "beams": [{"score_history": [0.0, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -3.576227754820138e-05, -0.006637869402766228, -0.0006087046349421144, -0.005445301067084074, 0.0, -1.9073486328125e-06, 0.0, -9.894283721223474e-06, -2.8490716431406327e-05, -1.1920922133867862e-06, -1.1444091796875e-05, -3.62396240234375e-05, -3.814697265625e-06, -5.9604644775390625e-06, 0.0, 0.0, -0.000453948974609375, -3.814697265625e-05, -1.919269561767578e-05, 0.0, -1.9073486328125e-05, -1.1444091796875e-05, -3.814697265625e-06, -8.7738037109375e-05, -4.76837158203125e-05, -7.62939453125e-06, 0.0, -1.1444091796875e-05, 0.0, -3.147124152746983e-05, -6.198883056640625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -0.0003490447998046875, -5.7220458984375e-06, -5.7220458984375e-06, -0.005624857731163502, -9.620188939152285e-05, -0.0003821231657639146, -0.000598907470703125, -0.00020897388458251953, -0.09566795825958252, -1.1444091796875e-05, 0.0, -2.5476620066910982e-06, 0.0, -3.0517578125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00011288545647403225, -2.861018856492592e-06, -0.35825952887535095, 0.0, 0.0, 0.0, -1.9073486328125e-06, 0.0, -4.839897155761719e-05, -1.33514404296875e-05, -0.00014185899635776877, 0.0, -0.0007762908935546875, -1.9073486328125e-06, 0.0, -0.06257247924804688, -9.775161743164062e-06, -0.000217437744140625, 0.0, -0.000946044921875, -2.86102294921875e-05, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0023443694226443768, -1.2755369425576646e-05, -4.9591064453125e-05, -0.00167083740234375, -7.62939453125e-06, -0.03659789264202118, -0.05900145322084427, -6.67572021484375e-05, -2.6702880859375e-05, -7.62939453125e-06, 0.0, -0.019355449825525284, -2.503394853192731e-06, -3.814697265625e-05, -0.7154607772827148, -1.1444091796875e-05, -0.4827156066894531, -0.1171560287475586, -0.001018524169921875, -0.01358993723988533, -4.160325261182152e-05, -0.18237590789794922, -9.5367431640625e-06, -5.7220458984375e-05, 0.0, -0.001716728089377284, -4.29153169534402e-06, -1.9073486328125e-06, -0.0001583099365234375, -0.00089263916015625, -0.3497377634048462, -0.22769679129123688, -4.207999518257566e-05, -0.0005512237548828125, 0.0, -0.12002701312303543, -0.00010883422510232776, -1.1920928244535389e-07, -7.62939453125e-06, -4.9591064453125e-05, -9.34600830078125e-05, 0.0, -0.0021532773971557617, -0.00046384334564208984, -5.14984130859375e-05, -0.0016937255859375, -3.814697265625e-06, -0.01579391211271286, -0.08271509408950806, -8.20159912109375e-05, -0.0002231597900390625, -1.9073486328125e-06, 0.0, -0.0049293613992631435, -6.556510470545618e-06, -3.814697265625e-06, -0.8114662170410156, -1.33514404296875e-05, -0.1069326400756836, -0.0444488525390625, -0.0004177093505859375, -0.0014331681886687875, -2.0265579223632812e-06, -0.0016536712646484375, 0.0, -0.009028395637869835, -0.0002354383177589625, 0.0, -0.053852081298828125, -3.814697265625e-06, -1.2397687896736898e-05, -1.1920928244535389e-07, -9.536694051348604e-06, 0.0], "score": -4.010123405887477, "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Attack(), Give([Buff(\n            ChangeHealth(2)), Buff(MechHealth())]), SelfSelector()), Choice\n            (Attack(), Give([Buff(ChangeAttack(2))]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"n": 2, "_type": "Num"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"elts": [{"args": [{"_type": "Template18", "hole0": "Attack"}, {"args": [{"elts": [{"_type": "Template10", "hole0": 2}, {"args": [{"_type": "Template18", "hole0": "MechHealth"}], "_type": "Call", "func": {"_type": "Name", "id": "Buff"}}], "_type": "List"}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"_type": "Template18", "hole0": "SelfSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "Choice"}}, {"args": [{"_type": "Template18", "hole0": "Attack"}, {"args": [{"elts": [{"_type": "Template11", "hole0": 2}], "_type": "List"}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"_type": "Template18", "hole0": "SelfSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "Choice"}}], "_type": "List"}, "_type": "keyword", "arg": "choices"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"_type": "Template5", "hole1": 2, "hole0": 2}], "name": "AnodizedRoboCub"}]}, "choice_history": [50, 111, 176, 58, 90, "Anodized", "Robo", "Cub", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 37, 117, "2", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 171, 49, 152, "choices", "<EOS>", 17, 107, 164, 30, 88, 19, 112, "Choice", "<EOS>", 165, 46, 135, "Attack", "<EOS>", 30, 88, 19, 112, "Give", "<EOS>", 163, 33, 107, 164, 40, 127, "2", "<EOS>", 30, 88, 19, 112, "Buff", "<EOS>", 163, 46, 135, "Mech", "Health", "<EOS>", 46, 135, "Self", "Selector", "<EOS>", 30, 88, 19, 112, "Choice", "<EOS>", 165, 46, 135, "Attack", "<EOS>", 30, 88, 19, 112, "Give", "<EOS>", 163, 33, 107, 163, 41, 128, "2", "<EOS>", 46, 135, "Self", "Selector", "<EOS>", 72, 140, "2", "<EOS>", "2", "<EOS>"]}]}
{"gold_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(\n            Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard\n            (query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)),\n            PlayerSelector())), Effect(Drawn(), ActionTag(Draw(),\n            PlayerSelector()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n", "beams": [{"score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, -4.410734163684538e-06, -1.6689286894688848e-06, -3.3378546504536644e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -4.053113116242457e-06, -4.482249278225936e-05, 0.0, -0.0002288818359375, -1.33514404296875e-05, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, 0.0, -7.82012939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.933906555175781e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0001392364501953125, 0.0, -3.814697265625e-06, -0.0001430511474609375, -1.33514404296875e-05, -2.1457672119140625e-06, -2.0265579223632812e-06, -1.71661376953125e-05, 0.0, -0.0001373291015625, -1.9073486328125e-06, -1.9073486328125e-06, -0.00011574551899684593, -5.5432316003134474e-05, -3.6954863844584906e-06, -1.71661376953125e-05, -9.5367431640625e-06, 0.0, -1.1920928244535389e-07, -3.4570680327306036e-06, -2.47955322265625e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.2397744285408407e-05, -2.50339189733495e-06, -0.4150611162185669, -1.9073486328125e-06, 0.0, 0.0, -9.5367431640625e-06, 0.0, -0.0007039308547973633, -1.9073486328125e-06, -0.0004291534423828125, 0.0, -0.24971580505371094, -4.00543212890625e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.288818359375e-05, -9.5367431640625e-06, -9.5367431640625e-05, -3.814697265625e-06, -0.0502244234085083, 0.0, -0.5212440490722656, -0.01762104034423828, 0.0, 0.0, -0.04666900634765625, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.0028989315032958984, 0.0, -1.1444091796875e-05, -0.01241302490234375, -0.0003147125244140625, -0.36485719680786133, -0.03213731199502945, -7.62939453125e-06, -9.918212890625e-05, -0.0004324913024902344, 0.0], "score": -1.7162657087067075, "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(0), self)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Burrowing Mine"}, {"n": 0, "_type": "Num"}, {"attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "keyword", "arg": "target_func"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"hole2": [{"_type": "Template13", "hole0": 0}, {"_type": "Name", "id": "self"}], "_type": "Template0", "hole1": "damage", "hole0": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}}], "name": "BurrowingMine"}]}, "choice_history": [50, 111, 176, 58, 90, "Burrowing", "Mine", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Burrowing", " ", "Mine", "<EOS>", 37, 117, "0", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 171, 49, 152, "target_func", "<EOS>", 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 65, 125, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 164, 42, 130, "explodes", "<EOS>", 35, 112, "self", "<EOS>"]}]}
{"gold_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.random_amount\n            (3, 6)), self)\n", "beams": [{"score_history": [0.0, -4.76837158203125e-05, -1.9073486328125e-06, -5.91278076171875e-05, -3.814697265625e-06, -3.576278118089249e-07, -4.255681051290594e-05, -6.67572021484375e-05, 0.0, -1.1444091796875e-05, -8.344431989826262e-07, -3.325931538711302e-05, -7.152555099310121e-07, -0.001857757568359375, -1.9073486328125e-06, -7.62939453125e-06, -6.4373016357421875e-06, 0.0, -1.52587890625e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -0.000392913818359375, -3.24249267578125e-05, -5.7220458984375e-06, -0.000110626220703125, -0.0001583099365234375, 0.0, -1.9073486328125e-06, -1.71661376953125e-05, -8.20159912109375e-05, -1.1563301086425781e-05, -2.0265579223632812e-06, -1.33514404296875e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.71661376953125e-05, -2.3841855067985307e-07, -3.266334533691406e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.576276412786683e-07, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -1.1801719665527344e-05, -1.1920928244535389e-07, -0.0012301206588745117, 0.0, -1.9073486328125e-06, -2.86102294921875e-05, -3.814697265625e-06, 0.0, -5.340576171875e-05, -1.9073486328125e-05, -6.67572021484375e-05, 0.0, -0.0027866363525390625, -0.0013027191162109375, -0.0001068115234375, -3.4332275390625e-05, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -2.09808349609375e-05, -7.62939453125e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -4.76837158203125e-05, -0.000213623046875, -2.0265579223632812e-06, -0.004935741424560547, 0.0, -0.008723258972167969, -0.0018253326416015625, -0.005193852819502354, 0.0, -0.013569831848144531, -0.000255584716796875, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, 0.0, -4.38690185546875e-05, 0.0, -8.7738037109375e-05, 0.0, -0.0001035909735946916, 0.0, -3.0517578125e-05, -0.001590728759765625, -6.29425048828125e-05, -0.0007890349952504039, -2.47952248173533e-05, 0.0, -0.00119781494140625, -1.9311904907226562e-05, 0.0], "score": -0.04763043804754119, "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=2)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Crackle"}, {"n": 2, "_type": "Num"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "find_spell_target", "value": {"attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "keyword", "arg": "target_func"}, {"_type": "Template19", "hole0": 2}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"hole2": [{"_type": "Template13", "hole0": 6}, {"_type": "Name", "id": "self"}], "_type": "Template0", "hole1": "damage", "hole0": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}}], "name": "Crackle"}]}, "choice_history": [50, 111, 176, 58, 90, "Crackle", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Crackle", "<EOS>", 37, 117, "2", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 172, 49, 152, "target_func", "<EOS>", 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 48, 136, "2", "<EOS>", 65, 125, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 164, 42, 130, "6", "<EOS>", 35, 112, "self", "<EOS>"]}]}
{"gold_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "beams": [{"score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -7.62939453125e-06, -2.47955322265625e-05, -9.5367431640625e-06, -2.9802276912960224e-06, -3.814689989667386e-06, -1.5497195136049413e-06, -1.9073486328125e-06, 0.0, 0.0, -1.6092635632958263e-05, -0.0008645057678222656, 0.0, -0.0001277923583984375, -5.7220458984375e-06, -3.814697265625e-06, -4.172325134277344e-06, 0.0, 0.0, -0.0005893707275390625, -7.62939453125e-06, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.02765655517578125, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -7.62939453125e-06, -5.7220458984375e-06, -3.814697265625e-06, -3.075599670410156e-05, 0.0, -0.007966995239257812, -1.9073486328125e-05, 0.0, -0.0002748588449321687, -3.5405155358603224e-05, -4.0531158447265625e-06, -7.62939453125e-06, 0.0, 0.0, -1.1920923270736239e-07, -7.152555099310121e-07, -5.7220458984375e-06, 0.0, -3.814697265625e-06, 0.0, -0.0002664327621459961, -1.1563301086425781e-05, -0.0030329227447509766, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, -3.814697265625e-06, -5.91278076171875e-05, 0.0, -9.5367431640625e-06, -1.52587890625e-05, -9.34600830078125e-05, 0.0, -1.52587890625e-05, 0.0, -1.71661376953125e-05, -9.5367431640625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -3.24249267578125e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.00543212890625e-05, -7.62939453125e-06, -5.53131103515625e-05, -1.71661376953125e-05, -0.0150604248046875, 0.0, -0.00316619873046875, -0.08540534973144531, 0.0, 0.0, -0.0001087188720703125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -0.15760457515716553, 0.0, -1.9073486328125e-05, -0.00020599365234375, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -0.06252396106719971, -0.00168609619140625, -9.5367431640625e-06, -0.0017795562744140625, -1.52587890625e-05, -0.6552202701568604, -0.013093069195747375], "score": -1.037534630629409, "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Emergency Coolant"}, {"n": 1, "_type": "Num"}, {"attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "_type": "Call", "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "keyword", "arg": "target_func"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"hole2": [{"args": [{"_type": "Template18", "hole0": "<UNK>"}], "_type": "Call", "func": {"_type": "Name", "id": "Buff"}}], "_type": "Template0", "hole1": "add_buff", "hole0": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}}], "name": "EmergencyCoolant"}]}, "choice_history": [50, 111, 176, 58, 90, "Emergency", "Coolant", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 167, 38, 121, "Emergency", " ", "Coolant", "<EOS>", 37, 117, "1", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 36, 113, "False", "<EOS>", 171, 49, 152, "target_func", "<EOS>", 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 65, 125, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 163, 30, 88, 19, 112, "Buff", "<EOS>", 163, 46, 135, "<UNK>", "<EOS>"]}]}
{"gold_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "beams": [{"score_history": [0.0, -1.1444091796875e-05, -4.38690185546875e-05, -2.86102294921875e-05, -9.5367431640625e-06, -0.0047578695230185986, -0.00025555206229910254, -1.1920928244535389e-07, -9.5367431640625e-06, 0.0, 0.0, -2.0265288185328245e-06, -5.245203283266164e-06, -1.1920928244535389e-07, -3.814697265625e-06, -0.0003108978271484375, -1.9073486328125e-06, -5.9604644775390625e-06, 0.0, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -0.00247955322265625, -3.0517578125e-05, -6.9141146923357155e-06, -4.971027374267578e-05, -1.33514404296875e-05, 0.0, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.000148773193359375, 0.0, -5.4717063903808594e-05, 0.0, -1.52587890625e-05, 0.0, -1.9073486328125e-06, 0.0, -7.43865966796875e-05, 0.0, -0.0036340951919555664, -1.1920928244535389e-07, -0.5246238708496094, -6.103515625e-05, -0.0001220703125, -3.814697265625e-06, 0.0, -0.000118255615234375, -1.33514404296875e-05, -7.62939453125e-06, 0.0, -3.814697265625e-06, -0.050988197326660156, -2.3841855067985307e-07, -0.001178741455078125, -0.0003795623779296875, -6.866455078125e-05, -9.1552734375e-05, -6.866455078125e-05, -2.09808349609375e-05, 0.0, -0.0008864395204000175, -1.52587890625e-05, -0.0001373291015625, -0.0001678466796875, -1.1444091796875e-05, -3.814697265625e-06, -5.602820692729438e-06, -7.62939453125e-06, -0.000171661376953125, -6.806846067775041e-05, -1.9073486328125e-06, -0.00109100341796875, -7.62939453125e-06, -0.000209808349609375, -0.013598442077636719, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.159046173095703e-05, 0.0, -8.7738037109375e-05, -4.9591064453125e-05, -0.6951900720596313, 0.0, -0.0001163482666015625, -1.9073486328125e-06, -5.221366518526338e-05, 0.0], "score": -1.3016657377538081, "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, charge=True, taunt=True)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"hole4": {"attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole2": "COMMON", "_type": "Template6", "hole0": "Flying Machine", "hole3": "minion_type", "hole1": 3}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"n": 1, "_type": "Num"}, {"n": 4, "_type": "Num"}], "_type": "Call", "keywords": [{"value": {"value": true, "_type": "NameConstant"}, "_type": "keyword", "arg": "charge"}, {"value": {"value": true, "_type": "NameConstant"}, "_type": "keyword", "arg": "taunt"}], "func": {"_type": "Name", "id": "Minion"}}, "_type": "Return"}], "name": "create_minion"}], "name": "FlyingMachine"}]}, "choice_history": [50, 111, 176, 58, 90, "Flying", "Machine", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 73, 141, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 11, 81, 19, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 61, 95, "create_minion", "<EOS>", 150, 157, 149, "self", "<EOS>", 149, "player", "<EOS>", 176, 64, 119, 14, 89, 19, 112, "Minion", "<EOS>", 164, 37, 117, "1", "<EOS>", 37, 117, "4", "<EOS>", 172, 49, 152, "charge", "<EOS>", 20, 113, "True", "<EOS>", 49, 152, "taunt", "<EOS>", 20, 113, "True", "<EOS>"]}]}
{"gold_code": "class GoblinAutoBarber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "beams": [{"score_history": [-1.9073486328125e-06, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -7.021180499577895e-05, -2.4080030925688334e-05, -8.106198947643861e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.1919473763555288e-07, -3.4331867936998606e-05, -8.4638240878121e-06, -2.288818359375e-05, -5.7220458984375e-06, -3.62396240234375e-05, -4.0531158447265625e-06, 0.0, -5.7220458984375e-06, -0.000118255615234375, -1.9073486328125e-05, -0.000133514404296875, -2.110004425048828e-05, -0.000148773193359375, -2.09808349609375e-05, -5.7220458984375e-05, -5.14984130859375e-05, -4.76837158203125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -9.1552734375e-05, -1.9073486328125e-06, -1.4305104514278355e-06, -9.5367431640625e-06, -1.71661376953125e-05, 0.0, -1.52587890625e-05, 0.0, -5.7220458984375e-06, -2.8967437174287625e-05, -0.00012934199185110629, -2.7060192223871127e-05, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -3.576277322281385e-06, -2.3841855067985307e-07, -3.814697265625e-06, 0.0, -1.9073486328125e-05, 0.0, -1.0848039892152883e-05, -1.2397762475302443e-05, -0.4494483172893524, 0.0, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, 0.0, -2.7894973754882812e-05, 0.0, -0.0023441314697265625, -0.000240325927734375, -0.000293731689453125, -1.609325045137666e-05, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.0035495758056640625, 0.0, -5.7220458984375e-06, 0.0, -0.668919563293457, -1.4305104514278355e-06, -0.0004520416259765625, -5.7220458984375e-06, -1.7523765563964844e-05, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, -8.20159912109375e-05, -1.9073486328125e-06, -6.687641143798828e-05, 0.0, -0.0005741119384765625, -0.05680274963378906, 0.0, -3.62396240234375e-05, 0.0, -0.016210436820983887, -4.41074053014745e-06, -0.0004405975341796875, -0.30977535247802734, -9.72747802734375e-05, -0.0012813799548894167, 0.0, -0.032634735107421875, -0.012098312377929688, -9.918212890625e-05, 0.0, -0.0031415224075317383, -0.0001220703125, 0.0, -9.5367431640625e-06, -0.0033502578735351562, -0.000247955322265625, -0.0005977153778076172, 0.0, -0.0013523101806640625, -5.7220458984375e-06, 0.0, -0.007454037666320801, -7.05718994140625e-05, -0.000209808349609375, 0.0, -0.042688608169555664, -0.00040650367736816406, 0.0, -0.6731929779052734, -3.4332275390625e-05, -0.2933664321899414, 0.0, -3.814697265625e-06, -0.000156402587890625, -0.000133514404296875, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -0.008378028869628906, -1.1920928244535389e-07, -0.000255584716796875, -0.0002231597900390625, -1.71661376953125e-05, -5.7220458984375e-06, -0.0052814483642578125, -1.52587890625e-05, -1.9073486328125e-06, -0.0008831018349155784, -0.0012302398681640625, -2.09808349609375e-05, -3.814697265625e-06, -7.62939453125e-06, -0.00263189896941185, -1.1920928244535389e-07, -0.00017547607421875, -2.6702880859375e-05, -1.5018667909316719e-05, 0.0], "score": -2.602636535142395, "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeAttack(1)), MinionSelector(Null, picker=\n            RandomPicker())))\n\n    def create_weapon(self, player):\n        return Weapon(3, 2)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"n": 2, "_type": "Num"}, {"attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "_type": "keyword", "arg": "minion_type"}, {"value": {"args": [{"args": [{"_type": "Template15", "hole0": 1}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"args": [{"value": "Null", "_type": "NameConstant"}], "_type": "Call", "keywords": [{"value": {"_type": "Template18", "hole0": "RandomPicker"}, "_type": "keyword", "arg": "picker"}], "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "_type": "keyword", "arg": "battlecry"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"n": 3, "_type": "Num"}, {"n": 2, "_type": "Num"}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}, "_type": "Return"}], "name": "create_weapon"}], "name": "GoblinAuto-Barber"}]}, "choice_history": [50, 111, 176, 58, 90, "Goblin", "Auto-Barber", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Goblin", " ", "Auto-Barber", "<EOS>", 37, 117, "2", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 172, 49, 152, "minion_type", "<EOS>", 11, 81, 19, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 49, 152, "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 164, 30, 88, 19, 112, "Give", "<EOS>", 163, 43, 132, "1", "<EOS>", 30, 89, 19, 112, "Minion", "Selector", "<EOS>", 163, 36, 114, "Null", "<EOS>", 171, 49, 152, "picker", "<EOS>", 23, 135, "Random", "Picker", "<EOS>", 61, 95, "create_weapon", "<EOS>", 150, 157, 149, "self", "<EOS>", 149, "player", "<EOS>", 176, 64, 119, 14, 88, 19, 112, "Weapon", "<EOS>", 164, 37, 117, "3", "<EOS>", 37, 117, "2", "<EOS>"]}]}
{"gold_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\n", "beams": [{"score_history": [-7.62939453125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.8530047681415454e-05, -4.768371127283899e-06, -3.2186455882765586e-06, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-05, -2.0265579223632812e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0002040863037109375, -5.7220458984375e-06, -2.110004425048828e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -2.86102294921875e-05, -3.814697265625e-06, -9.918212890625e-05, -3.814697265625e-05, 0.0, -3.814697265625e-06, -0.0001125335693359375, -3.814697265625e-06, -3.4332275390625e-05, -8.96453857421875e-05, -1.9073486328125e-06, -2.0265579223632812e-06, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.3378044463461265e-05, -4.5299530029296875e-05, -4.41074053014745e-06, -1.33514404296875e-05, -3.814697265625e-06, 0.0, -1.2755381249007769e-05, -2.3245658667292446e-05, -1.33514404296875e-05, 0.0, -1.71661376953125e-05, 0.0, -5.245207830739673e-06, -6.198883056640625e-06, -0.24874138832092285, -4.76837158203125e-05, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -6.103515625e-05, -7.867813110351562e-06, -0.01628720760345459, -1.9073486328125e-06, -0.0002841949462890625, -4.00543212890625e-05, -7.62939453125e-06, -0.004697918891906738, 0.0, -2.288818359375e-05, 0.0, -0.000225067138671875, 0.0, -1.52587890625e-05, 0.0, -0.006329536437988281, -3.576278118089249e-07, -0.19915390014648438, -7.62939453125e-06, 0.0, -5.960462772236497e-07, -1.2516915376181714e-05, -1.1920928244535389e-07, -2.300739288330078e-05, 0.0, -3.814697265625e-06, 0.0, -0.0068511962890625, -2.47955322265625e-05, -1.9073486328125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -6.29425048828125e-05, 0.0, -7.2479248046875e-05, -0.00067138671875, -1.9073486328125e-06, -0.00014710424875374883, -0.0016402006149291992, 0.0, -0.0006237030029296875, -1.9073486328125e-06, -0.0001125335693359375, -0.00035858154296875, -1.692770456429571e-05, -6.115436553955078e-05, 0.0, -0.0002689361572265625, -0.38376903533935547, -0.0001163482666015625, -0.4328555166721344, -4.804092168342322e-05, -9.5367431640625e-06, -0.5680856704711914, -1.9073486328125e-05, 0.0, -0.017366409301757812, -5.7220458984375e-05, 0.0, -0.0035295486450195312, -0.019247055053710938, -9.918212890625e-05, -0.0006847381591796875, -1.9073486328125e-06, -0.03867650032043457, -0.006741762161254883, -0.0001373291015625, -0.005024909973144531, -2.86102294921875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00429081916809082, -0.00016450881958007812, -0.00010502338409423828, -0.41515636444091797, -0.0029544830322265625, -0.0001125335693359375, -0.000225067138671875, -3.814697265625e-06, -0.000118255615234375, -1.71661376953125e-05, -0.0044708251953125, -1.9073486328125e-06, -0.0007190704345703125, -0.0002384185791015625, -0.0012969970703125, 0.0, -0.020906448364257812, -5.7220458984375e-06, -0.12994956970214844, -2.9921506211394444e-05, -5.7220458984375e-06, -0.0007724761962890625, 0.0, -0.0030173063278198242, -3.0398352464544587e-05, -5.960462772236497e-07], "score": -2.549076941590826, "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Damage(2\n            ), MinionSelector(Not(IsType(MINION_TYPE.MECH, True)),\n            BothPlayer(), RandomPicker())))])\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Iron Sensei"}, {"n": 3, "_type": "Num"}, {"attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "RARE", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "_type": "keyword", "arg": "minion_type"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"hole2": "effects", "_type": "Template4", "hole1": 2, "hole0": 2, "hole3": {"elts": [{"args": [{"_type": "Template18", "hole0": "TurnEnded"}, {"args": [{"_type": "Template17", "hole0": 2}, {"args": [{"args": [{"args": [{"attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "_type": "Call", "func": {"_type": "Name", "id": "Not"}}, {"_type": "Template18", "hole0": "BothPlayer"}, {"_type": "Template18", "hole0": "RandomPicker"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}], "_type": "List"}}], "name": "IronSensei"}]}, "choice_history": [50, 111, 176, 58, 90, "Iron", "Sensei", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Iron", " ", "Sensei", "<EOS>", 37, 117, "3", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 171, 49, 152, "minion_type", "<EOS>", 11, 81, 19, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 71, 139, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 17, 107, 163, 30, 88, 19, 112, "Effect", "<EOS>", 164, 46, 135, "Turn", "Ended", "<EOS>", 30, 88, 19, 112, "Action", "Tag", "<EOS>", 164, 45, 134, "2", "<EOS>", 30, 88, 19, 112, "Minion", "Selector", "<EOS>", 165, 30, 88, 19, 112, "Not", "<EOS>", 163, 30, 88, 19, 112, "Is", "Type", "<EOS>", 164, 27, 81, 19, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 36, 113, "True", "<EOS>", 46, 135, "Both", "Player", "<EOS>", 46, 135, "Random", "Picker", "<EOS>"]}]}
{"gold_code": "class MalGanis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(\n            IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2),\n            MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(),\n            HeroSelector())])\n", "beams": [{"score_history": [0.0, 0.0, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -0.0031950303819030523, -0.0013053417205810547, -3.814697265625e-06, 0.0, 0.0, -0.000425693579018116, -6.43729799776338e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -5.53131103515625e-05, -3.814697265625e-06, -5.340576171875e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.9591064453125e-05, -0.002689361572265625, 0.0, -3.814697265625e-06, -0.03537559509277344, 0.0, 0.0, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -6.29425048828125e-05, -3.814697265625e-06, 0.0, -8.463859558105469e-06, -6.902217864990234e-05, -7.62939453125e-06, 0.0, -0.026651708409190178, -5.125993993715383e-06, -5.7220458984375e-06, 0.0, -1.71661376953125e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.47111499309539795, 0.0, 0.0, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.00164794921875, -1.9073486328125e-06, -0.2867593765258789, -9.5367431640625e-05, -3.814697265625e-06, -8.344555681105703e-05, -1.33514404296875e-05, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -0.0275115966796875, -1.9073486328125e-06, -0.04578590393066406, -1.9073486328125e-06, -1.1920928244535389e-07, -1.490105023549404e-05, -0.0002650021924637258, -5.364412118069595e-06, -0.04266631603240967, -1.9073486328125e-06, -0.0001583099365234375, -1.33514404296875e-05, -0.07847976684570312, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -0.0004520416259765625, -8.58306884765625e-05, -0.0021152496337890625, -0.025335311889648438, -0.0002307891845703125, -0.5275040864944458, -3.4332275390625e-05, -0.001338958740234375, 0.0, -0.2171405553817749, -5.91278076171875e-05, 0.0], "score": -1.7991088102912371, "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(6), SelfSelector())])\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Mal'Ganis"}, {"n": 9, "_type": "Num"}, {"attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "LEGENDARY", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "_type": "keyword", "arg": "minion_type"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"hole2": "auras", "_type": "Template4", "hole1": 7, "hole0": 9, "hole3": {"elts": [{"args": [{"_type": "Template15", "hole0": 6}, {"_type": "Template18", "hole0": "SelfSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}], "_type": "List"}}], "name": "Mal'Ganis"}]}, "choice_history": [50, 111, 176, 58, 90, "Mal'Ganis", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Mal'Ganis", "<EOS>", 37, 117, "9", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 171, 49, 152, "minion_type", "<EOS>", 11, 81, 19, 112, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 71, 139, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 17, 107, 163, 30, 88, 19, 112, "Aura", "<EOS>", 164, 43, 132, "6", "<EOS>", 46, 135, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(\n            EventValue()), HeroSelector()))])\n", "beams": [{"score_history": [0.0, -4.76837158203125e-05, -1.9073486328125e-06, -4.9591064453125e-05, -1.33514404296875e-05, -0.0003790144401136786, -0.0001744019245961681, -0.020952602848410606, -2.0265579223632812e-06, -0.00067138671875, 0.0, 0.0, -0.0014295941218733788, -8.70227722771233e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -0.000171661376953125, 0.0, -2.3126602172851562e-05, -5.7220458984375e-06, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.000392913818359375, -0.000247955322265625, 0.0, -5.7220458984375e-06, -0.0031948089599609375, -5.7220458984375e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -4.768370445162873e-07, -1.1444091796875e-05, -2.86102294921875e-05, 0.0, -1.33514404296875e-05, -1.33514404296875e-05, -2.47955322265625e-05, -7.784063927829266e-05, -5.817413330078125e-05, -6.914126061019488e-06, -5.14984130859375e-05, -0.014101386070251465, -1.52587890625e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.00014828535495325923, -1.1920928244535389e-07, -2.6702880859375e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -9.655952453613281e-06, -1.0728830375228426e-06, -0.019747138023376465, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.0006810426712036133, -1.1444091796875e-05, -1.52587890625e-05, -5.7220458984375e-06, 0.0, -0.4082871675491333, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -5.7220458984375e-06, 0.0, -3.4332275390625e-05, 0.0, -0.4250088930130005, -1.9073486328125e-06, -0.000301361083984375, -1.9073486328125e-06, -1.1920928244535389e-07, -9.536738616588991e-07, -5.245205557002919e-06, -2.3841855067985307e-07, -0.0011169910430908203, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.0001678466796875, -4.9591064453125e-05, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.0003491640090942383, 0.0, -1.71661376953125e-05, -0.04257965087890625, -1.1444091796875e-05, -0.17655383050441742, -2.4676177417859435e-05, -0.0022182464599609375, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.00010490416752872989, -0.0002040863037109375, 0.0, -0.00124359130859375, -0.0001049041748046875, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -0.08367693424224854, -0.0008882284164428711, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.007037373259663582, -2.0265579223632812e-06, -0.0001163482666015625, -9.5367431640625e-06, -0.002756357192993164, -3.445148468017578e-05, 0.0], "score": -1.2159164418009567, "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(4),\n            HeroSelector()))])\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Mistress of Pain"}, {"n": 2, "_type": "Num"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "RARE", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "_type": "keyword", "arg": "minion_type"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"hole2": "effects", "_type": "Template4", "hole1": 4, "hole0": 1, "hole3": {"elts": [{"args": [{"_type": "Template18", "hole0": "Damaged"}, {"args": [{"args": [{"n": 4, "_type": "Num"}], "_type": "Call", "func": {"_type": "Name", "id": "Heal"}}, {"_type": "Template18", "hole0": "HeroSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}], "_type": "List"}}], "name": "MistressOfPain"}]}, "choice_history": [50, 111, 176, 58, 90, "Mistress", "Of", "Pain", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Mistress", " ", "of", " ", "Pain", "<EOS>", 37, 117, "2", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 171, 49, 152, "minion_type", "<EOS>", 11, 81, 19, 112, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 71, 139, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 17, 107, 163, 30, 88, 19, 112, "Effect", "<EOS>", 164, 46, 135, "Damaged", "<EOS>", 30, 88, 19, 112, "Action", "Tag", "<EOS>", 164, 30, 88, 19, 112, "Heal", "<EOS>", 163, 37, 117, "4", "<EOS>", 46, 135, "Hero", "Selector", "<EOS>"]}]}
{"gold_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=RandomPicker())))\n", "beams": [{"score_history": [-1.9073486328125e-06, -3.62396240234375e-05, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -1.311301275563892e-06, -0.00032814330188557506, 0.0, 0.0, 0.0, -7.60526381782256e-05, -7.82012939453125e-05, -1.1920928244535389e-07, -8.58306884765625e-05, -0.0016632080078125, -0.00020599365234375, -2.0384788513183594e-05, -0.0024300813674926758, -0.0043849945068359375, 0.0, -0.023497939109802246, 0.0, -0.003627777099609375, -3.814697265625e-06, -0.28816330432891846, 0.0, 0.0, -0.0017185211181640625, -2.47955322265625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -0.00012969970703125, -2.1457672119140625e-06, -0.0034923553466796875, -5.53131103515625e-05, -4.1961669921875e-05, -5.7220458984375e-05, -3.4332275390625e-05, -0.0001735687255859375, 0.0, -0.005357861518859863, -1.33514404296875e-05, -0.000141143798828125, -2.6702880859375e-05, 0.0, -5.696056177839637e-05, -2.0265579223632812e-06, -7.62939453125e-06, -1.9073486328125e-06, -6.042749737389386e-05, 0.0, -0.4627542495727539, -0.0015239715576171875, -1.1444091796875e-05, -0.28660571575164795, 0.0, -0.00103759765625, 0.0, -0.007767677307128906, -4.9591064453125e-05, -8.392333984375e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0002292370772920549, -5.495397272170521e-05, -4.76837158203125e-05, -0.38582324981689453, -0.016330718994140625, -1.9073486328125e-05, -1.33514404296875e-05, -0.6681082844734192, -0.14521467685699463, -1.71661376953125e-05, -9.5367431640625e-06, -0.0073757171630859375, -2.47955322265625e-05, -1.1444091796875e-05, -1.1444091796875e-05, -0.7181628942489624, -0.33209285140037537, -0.09482181072235107, -0.009992801584303379, -5.340576171875e-05, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-05, -0.05239769443869591, -1.9073486328125e-06, -0.000843048095703125, -0.20650959014892578, -2.47955322265625e-05, 0.0, -0.0007256268872879446, -0.0001392364501953125, 0.0, -0.000911712646484375, -0.00048160552978515625, -1.9073486328125e-06, -0.0003223419189453125, -1.9073486328125e-06, -0.01649966835975647, -9.441158908884972e-05, -8.20159912109375e-05, -0.020235061645507812, -0.003925323486328125, -0.15064287185668945, -0.0003147125244140625, -0.002124786376953125, -0.030191421508789062, -0.00036716461181640625, 0.0, -0.00021433828806038946, -0.0001361370086669922, -0.0001430511474609375, -0.0006351470947265625, -1.33514404296875e-05, 0.0, -0.00026929378509521484, -4.9591064453125e-05, -4.76837158203125e-05, 0.0, -0.03343653678894043, -2.8491012926679105e-05, -9.536738616588991e-07], "score": -3.996125009800828, "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(MinionPlaced(<UNK>AttackEqualTo\n            (1)), ActionTag(Give(ChangeHealth(3)), MinionSelector(picker=\n            RandomPicker())))])\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "WeaponCard"}], "_type": "ClassDef", "body": [{"hole2": "PRIEST", "_type": "Template2", "hole1": 3, "hole0": "Powermace"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"n": 3, "_type": "Num"}, {"n": 2, "_type": "Num"}], "_type": "Call", "keywords": [{"value": {"elts": [{"args": [{"args": [{"args": [{"n": 1, "_type": "Num"}], "_type": "Call", "func": {"_type": "Name", "id": "<UNK>AttackEqualTo"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionPlaced"}}, {"args": [{"args": [{"_type": "Template16", "hole0": 3}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"_type": "Call", "keywords": [{"value": {"_type": "Template18", "hole0": "RandomPicker"}, "_type": "keyword", "arg": "picker"}], "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}], "_type": "List"}, "_type": "keyword", "arg": "effects"}], "func": {"_type": "Name", "id": "Weapon"}}, "_type": "Return"}], "name": "create_weapon"}], "name": "Powermace"}]}, "choice_history": [50, 111, 176, 58, 90, "Powermace", "<EOS>", 163, 35, 112, "Weapon", "Card", "<EOS>", 177, 69, 137, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", 61, 95, "create_weapon", "<EOS>", 150, 157, 149, "self", "<EOS>", 149, "player", "<EOS>", 176, 64, 119, 14, 89, 19, 112, "Weapon", "<EOS>", 164, 37, 117, "3", "<EOS>", 37, 117, "2", "<EOS>", 171, 49, 152, "effects", "<EOS>", 17, 107, 163, 30, 88, 19, 112, "Effect", "<EOS>", 164, 30, 88, 19, 112, "Minion", "Placed", "<EOS>", 163, 30, 88, 19, 112, "<UNK>", "Attack", "Equal", "To", "<EOS>", 163, 37, 117, "1", "<EOS>", 30, 88, 19, 112, "Action", "Tag", "<EOS>", 164, 30, 88, 19, 112, "Give", "<EOS>", 163, 44, 133, "3", "<EOS>", 30, 87, 19, 112, "Minion", "Selector", "<EOS>", 171, 49, 152, "picker", "<EOS>", 23, 135, "Random", "Picker", "<EOS>"]}]}
{"gold_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "beams": [{"score_history": [-2.47955322265625e-05, -0.000102996826171875, -5.7220458984375e-05, -7.62939453125e-06, -3.814697265625e-06, -0.00024530262453481555, -4.887569048150908e-06, -2.50339189733495e-06, -3.814697265625e-06, 0.0, 0.0, 0.0, -6.675716122117592e-06, -9.775113539944869e-06, -1.9073486328125e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.3589859008789062e-05, 0.0, -1.33514404296875e-05, -3.62396240234375e-05, -3.0517578125e-05, -5.7220458984375e-06, -5.841255187988281e-06, -0.0004634857177734375, -5.7220458984375e-06, -5.7220458984375e-06, -2.6702880859375e-05, -5.53131103515625e-05, -3.814697265625e-06, -9.5367431640625e-06, -4.1961669921875e-05, -1.52587890625e-05, -3.814697265625e-06, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -0.0002302858338225633, -4.172325134277344e-05, -6.914126061019488e-06, -7.62939453125e-06, -7.62939453125e-06, 0.0, -1.5854835510253906e-05, -3.218649908376392e-06, -3.24249267578125e-05, -3.814697265625e-06, -3.814697265625e-05, 0.0, -2.4795524950604886e-05, -0.0001600870309630409, -0.10428309440612793, 0.0, -1.9073486328125e-05, 0.0, -1.9073486328125e-05, 0.0, -7.748603820800781e-06, -1.1920928244535389e-07, -0.001211404800415039, -1.1920928244535389e-07, -0.0009670257568359375, -2.6702880859375e-05, -0.000148773193359375, -0.00551605224609375, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.0018558502197265625, 0.0, -7.62939453125e-06, 0.0, -0.20440971851348877, -5.960462772236497e-07, -8.7738037109375e-05, -3.814697265625e-06, -5.1856040954589844e-05, 0.0, -9.1552734375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.5272369384765625e-05, 0.0, -2.86102294921875e-05, -0.0016498565673828125, -5.7220458984375e-06, -1.9073486328125e-05, 0.0, -0.048448339104652405, -0.00010311110236216336, -0.013535499572753906, -0.026720046997070312, -0.0010385513305664062, -0.01832958124577999, -0.0002728700637817383, -0.0020093917846679688, -0.0015697479248046875, -8.96453857421875e-05, 0.0, -0.00015997886657714844, -9.655952453613281e-06, -3.814697265625e-06, -0.00031280517578125, -0.0007066726684570312, -0.00038909912109375, -1.9073486328125e-06, -5.7220458984375e-06, -0.0006132125854492188, -0.00031185150146484375, -0.0003554821014404297, -9.5367431640625e-06, -8.96453857421875e-05, -3.62396240234375e-05, -0.00141143798828125, -5.7220458984375e-06, -1.1563301086425781e-05, -5.841255187988281e-06, -0.04545116424560547, -1.1920928244535389e-07, -0.0055370330810546875, -2.09808349609375e-05, -2.288818359375e-05, -0.02452671527862549, -7.62939453125e-06, -0.014041900634765625, -1.9073486328125e-06, -0.0005761384963989258, -0.00022696703672409058, -2.3841855067985307e-07, -0.0023403167724609375, -1.1444091796875e-05, -2.014636993408203e-05, -9.298280929215252e-06, -0.0003857612609863281, 0.0], "score": -0.532055631206056, "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"n": 4, "_type": "Num"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "RARE", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "_type": "keyword", "arg": "minion_type"}, {"value": {"args": [{"args": [{"_type": "Template16", "hole0": 4}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"args": [{"args": [{"attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "_type": "Call", "keywords": [{"value": {"_type": "Template18", "hole0": "UserPicker"}, "_type": "keyword", "arg": "picker"}], "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "_type": "keyword", "arg": "battlecry"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"_type": "Template5", "hole1": 5, "hole0": 2}], "name": "ScrewjankClunker"}]}, "choice_history": [50, 111, 176, 58, 90, "Screwjank", "Clunker", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Screwjank", " ", "Clunker", "<EOS>", 37, 117, "4", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 172, 49, 152, "minion_type", "<EOS>", 11, 81, 19, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 49, 152, "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 164, 30, 88, 19, 112, "Give", "<EOS>", 163, 44, 133, "4", "<EOS>", 30, 89, 19, 112, "Minion", "Selector", "<EOS>", 163, 30, 88, 19, 112, "Is", "Type", "<EOS>", 163, 27, 81, 19, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 171, 49, 152, "picker", "<EOS>", 23, 135, "User", "Picker", "<EOS>", 72, 140, "2", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class SneedsOldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])),\n            PlayerSelector()))\n", "beams": [{"score_history": [0.0, -4.57763671875e-05, -5.91278076171875e-05, -2.86102294921875e-05, -1.1444091796875e-05, -0.057216908782720566, -0.21542100608348846, -0.017974285408854485, -0.02356746233999729, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -2.1408777683973312e-06, -2.0265579223632812e-06, -2.0265579223632812e-06, -0.0004940032958984375, -0.000286102294921875, -4.38690185546875e-05, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -1.9073486328125e-06, -0.0001049041748046875, -0.0007171630859375, -7.82012939453125e-05, -0.03616004064679146, -0.0001125335693359375, -0.000248537166044116, -0.000209808349609375, -0.0014728307723999023, -0.10872745513916016, -0.0030629634857177734, 0.0, -0.0005830526351928711, -1.9073486328125e-06, -0.0015308856964111328, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.33514404296875e-05, 0.0, -7.2479248046875e-05, 0.0, -0.01087343692779541, -1.1920928244535389e-07, -0.00701141357421875, -9.5367431640625e-06, -1.1920928244535389e-07, -7.748603820800781e-06, -0.0012725635897368193, -1.1920928244535389e-07, -0.0003784894652199, -5.7220458984375e-06, -7.43865966796875e-05, -1.33514404296875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.00039124421891756356, -4.768370445162873e-07, -3.4332275390625e-05, -1.71661376953125e-05, -0.00060272216796875, -3.0517578125e-05, 0.0, -0.03377165645360947, -0.0007044111844152212, -0.000873565673828125, -0.5238962173461914, -0.0019168853759765625, -7.62939453125e-06, 0.0, -0.0028397843707352877, -0.00110068847425282, -1.9073469957220368e-05, -0.0003376007080078125, -3.24249267578125e-05, -1.9073486328125e-06, -0.05808234214782715, -1.1920928244535389e-07, -8.96453857421875e-05, -0.00028228759765625, -0.0046749114990234375, -6.4849853515625e-05, -0.0008945465087890625, -1.9073486328125e-06, 0.0, -0.07827553898096085, -0.010826826095581055, -7.748603820800781e-06, -6.29425048828125e-05, -0.00019073486328125, -0.000530242919921875, -0.43879401683807373, 0.0, -0.24806690216064453, -0.00043487548828125, -0.006468653678894043, -0.050253868103027344, -5.7220458984375e-06, -0.13369369506835938, 0.0, -0.0001938343048095703, -1.1563301086425781e-05, 0.0], "score": -2.0864888930062477, "inferred_code": "class <UNK><UNK>Shredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"hole4": {"attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "hole2": "LEGENDARY", "_type": "Template6", "hole0": "<UNK> Old Shredder", "hole3": "minion_type", "hole1": 8}], "name": "__init__"}, {"hole2": "deathrattle", "_type": "Template4", "hole1": 7, "hole0": 5, "hole3": {"args": [{"args": [{"_type": "Call", "keywords": [{"value": {"elts": [{"args": [{"n": 2, "_type": "Num"}], "_type": "Call", "func": {"_type": "Name", "id": "ManaCost"}}, {"_type": "Template18", "hole0": "IsMinion"}], "_type": "List"}, "_type": "keyword", "arg": "conditions"}], "func": {"_type": "Name", "id": "CardQuery"}}], "_type": "Call", "func": {"_type": "Name", "id": "Summon"}}, {"_type": "Template18", "hole0": "PlayerSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}}}], "name": "<UNK><UNK>Shredder"}]}, "choice_history": [50, 111, 176, 58, 90, "<UNK>", "<UNK>", "Shredder", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 73, 141, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 11, 81, 19, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 71, 139, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 14, 88, 19, 112, "Deathrattle", "<EOS>", 164, 30, 88, 19, 112, "Summon", "<EOS>", 163, 30, 87, 19, 112, "Card", "Query", "<EOS>", 171, 49, 152, "conditions", "<EOS>", 17, 107, 164, 30, 88, 19, 112, "Mana", "Cost", "<EOS>", 163, 37, 117, "2", "<EOS>", 46, 135, "Is", "Minion", "<EOS>", 46, 135, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n", "beams": [{"score_history": [-3.814697265625e-06, -3.814697265625e-06, -2.86102294921875e-05, -5.7220458984375e-06, -2.6702880859375e-05, -0.0007123936084099114, -0.06788939982652664, 0.0, -1.9073486328125e-06, 0.0, -4.053028533235192e-06, -1.9907789464923553e-05, -2.0265579223632812e-06, 0.0, -4.38690185546875e-05, -9.5367431640625e-06, -1.978873842745088e-05, 0.0, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-05, -1.3709068298339844e-05, -0.000171661376953125, -0.001224517822265625, -0.0003032684326171875, -0.002185458317399025, -1.9073486328125e-06, -7.390960945485858e-06, 0.0, -0.001619577407836914, 0.0, -0.015716195106506348, 0.0, -0.03931617736816406, -1.33514404296875e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0009000301361083984, 0.0, -0.011316299438476562, -0.20414257049560547, -0.0001049041748046875, -3.24249267578125e-05, -3.814697265625e-06, -0.0027619898319244385, -0.0005255885189399123, -0.00012493005488067865, -0.00444793701171875, -0.003063201904296875, -0.0004215240478515625, -0.000591278076171875, -1.33514404296875e-05, -0.00012326223077252507, -0.0010417699813842773, -4.1723224057932384e-06, -0.021593093872070312, -9.5367431640625e-06, -0.0005359649658203125, -0.0011601448059082031, 0.0, -4.38690185546875e-05, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.000720977783203125, -1.52587890625e-05, -0.0036317110061645508, -1.9073486328125e-05, -1.9073486328125e-06, -1.33514404296875e-05, -0.04307079315185547, -4.0531158447265625e-06, -0.000148773193359375, 0.0, -0.030457496643066406, 0.0, -0.1077260971069336, -0.5835790634155273, -1.9073486328125e-06, 0.0, -0.0014640092849731445, -5.14984130859375e-05, 0.0, -0.00011444091796875, -0.0019397735595703125, -5.7220458984375e-06, -0.6604126691818237, -8.821474693831988e-06, -1.1920928244535389e-07, -0.0001983642578125, -5.7220458984375e-06, -6.675719760096399e-06, -1.1920928244535389e-07, -0.001828908221796155, -5.960462772236497e-07], "score": -1.8178659310286065, "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector\n            (BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"hole4": {"args": [{"args": [{"_type": "Call", "keywords": [{"value": {"attr": "LIST", "value": {"_type": "Name", "id": "CARD_SOURCE"}, "_type": "Attribute"}, "_type": "keyword", "arg": "source"}, {"value": {"_type": "Name", "id": "spare_part_list"}, "_type": "keyword", "arg": "source_list"}], "func": {"_type": "Name", "id": "CardQuery"}}], "_type": "Call", "func": {"_type": "Name", "id": "AddCard"}}, {"args": [{"_type": "Template18", "hole0": "BothPlayer"}], "_type": "Call", "func": {"_type": "Name", "id": "PlayerSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole2": "LEGENDARY", "_type": "Template6", "hole0": "Toshley", "hole3": "battlecry", "hole1": 6}], "name": "__init__"}, {"_type": "Template5", "hole1": 7, "hole0": 5}], "name": "Toshley"}]}, "choice_history": [50, 111, 176, 58, 90, "Toshley", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 73, 141, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 164, 30, 88, 19, 112, "Add", "Card", "<EOS>", 163, 30, 87, 19, 112, "Card", "Query", "<EOS>", 172, 49, 152, "source", "<EOS>", 11, 81, 19, 112, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 49, 152, "source_list", "<EOS>", 19, 112, "spare_part_list", "<EOS>", 30, 88, 19, 112, "Player", "Selector", "<EOS>", 163, 46, 135, "Both", "Player", "<EOS>", 72, 140, "5", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "beams": [{"score_history": [-1.9073486328125e-06, -8.392333984375e-05, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -9.298297300119884e-06, -0.0001684407179709524, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -4.764879122376442e-07, -1.5854784578550607e-05, -1.1920922133867862e-06, -5.7220458984375e-06, -0.000118255615234375, -1.33514404296875e-05, -1.7762184143066406e-05, 0.0, -1.9073486328125e-06, -0.000141143798828125, -0.000209808349609375, -1.71661376953125e-05, -3.457069396972656e-05, -1.1444091796875e-05, -8.58306884765625e-05, -2.86102294921875e-05, -3.62396240234375e-05, -4.9591064453125e-05, -3.814697265625e-06, -5.7220458984375e-06, -9.5367431640625e-06, 0.0, -3.516674041748047e-05, -6.675719760096399e-06, -4.589557647705078e-05, 0.0, -0.4781618118286133, -1.9073486328125e-06, -1.71661376953125e-05, -2.2649765014648438e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00014354260929394513, -3.576278118089249e-07, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -3.1828880310058594e-05, -5.9604644775390625e-06, -0.02175319194793701, 0.0, 0.0, 0.0, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -4.57763671875e-05, -2.300739288330078e-05, -1.9073486328125e-06, -0.6612434387207031, -1.1444091796875e-05, -1.33514404296875e-05, -4.398822784423828e-05, 0.0, -7.62939453125e-06, 0.0, -3.814697265625e-06, 0.0, -3.62396240234375e-05, 0.0, -0.08748924732208252, -2.3841855067985307e-07, -0.05776214599609375, -1.1444091796875e-05, -1.0728817869676277e-06, 0.0, -2.1219095287960954e-05, 0.0, -0.018382787704467773, 0.0, -0.0001983642578125, -1.1444091796875e-05, -0.00048828125, -4.1961669921875e-05, -6.67572021484375e-05, 0.0, 0.0, -0.00023245811462402344, -0.0001087188720703125, -0.0001239776611328125, -0.001598358154296875, -0.00075531005859375, -0.062435273081064224, 0.0, -0.24937152862548828, 0.0, -0.02198600582778454, -0.00012218952178955078, 0.0], "score": -1.6639872928286934, "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Warbot"}, {"n": 1, "_type": "Num"}, {"attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "_type": "keyword", "arg": "minion_type"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"hole2": "enrage", "_type": "Template4", "hole1": 3, "hole0": 1, "hole3": {"elts": [{"args": [{"_type": "Template15", "hole0": 1}, {"_type": "Template18", "hole0": "SelfSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}], "_type": "List"}}], "name": "Warbot"}]}, "choice_history": [50, 111, 176, 58, 90, "Warbot", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Warbot", "<EOS>", 37, 117, "1", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 171, 49, 152, "minion_type", "<EOS>", 11, 81, 19, 112, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 71, 139, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 17, 107, 163, 30, 88, 19, 112, "Aura", "<EOS>", 164, 43, 132, "1", "<EOS>", 46, 135, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(\n            CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)),\n            PlayerSelector(EnemyPlayer())))\n", "beams": [{"score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -3.5762212064582855e-05, -0.0014451741008087993, 0.0, 0.0, 0.0, -4.7663343138992786e-07, -3.099440846199286e-06, -7.152555099310121e-07, -5.7220458984375e-06, -0.00113677978515625, -0.0002460479736328125, -1.5497195136049413e-06, -1.1563301086425781e-05, -0.006548047065734863, 0.0, -0.00022327899932861328, 0.0, -0.0004291534423828125, -1.9073486328125e-06, -0.0001735687255859375, -1.52587890625e-05, -3.814697265625e-06, -0.0002079010009765625, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.62396240234375e-05, -1.9073486328125e-06, -0.6937122344970703, -0.0005035400390625, -8.392333984375e-05, -0.0004119873046875, -2.6702880859375e-05, -9.918212890625e-05, 0.0, -0.0012723207473754883, -5.7220458984375e-06, -0.0005245208740234375, -1.1444091796875e-05, 0.0, -0.000181169540155679, 0.0, -5.7220458984375e-06, -1.33514404296875e-05, -0.19061680138111115, -1.9073486328125e-06, -0.0019197463989257812, -0.000286102294921875, -0.0001239776611328125, -0.39670658111572266, 0.0, -0.0006160736083984375, -1.9073486328125e-06, -1.9073486328125e-06, -0.0003757476806640625, -0.02641427330672741, 0.0, -9.5367431640625e-06, -0.13631057739257812, -1.52587890625e-05, -4.1961669921875e-05, -9.5367431640625e-06, -0.5614669322967529, -0.0011641941964626312, -0.0001444815716240555, -0.017208099365234375, -0.009820938110351562, -0.00228118896484375, -0.00081634521484375, -3.4332275390625e-05, -0.0012023444287478924, -0.0010842084884643555, -9.119510650634766e-05, -0.04501533508300781, -1.9073486328125e-05, -4.1961669921875e-05, -0.5233728885650635, -1.1920928244535389e-07, -8.7738037109375e-05, -4.9591064453125e-05, -0.0023660659790039062, -0.00254058837890625, -4.00543212890625e-05, -1.9073486328125e-06, 0.0, -0.26696789264678955, -0.06798458099365234, -1.3470649719238281e-05, -5.91278076171875e-05, -0.0062580108642578125, -0.001453399658203125, -0.05151527374982834, 0.0, -0.2005481719970703, -0.005214691162109375, -0.009938836097717285, -0.005874037742614746, -3.0517578125e-05, -0.08166313171386719, 0.0, -0.007559776306152344, -1.1682508556987159e-05, 0.0, -0.0001277923583984375, -1.9073486328125e-06, -0.20949745178222656, 0.0, -0.00321197509765625, -0.0001163482666015625, -0.0002880096435546875, 0.0], "score": -3.5480345205902424, "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(AddCard(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()),\n            taunt=True)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"hole2": "ALL", "_type": "Template2", "hole1": 3, "hole0": "Deathlord"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"n": 2, "_type": "Num"}, {"n": 8, "_type": "Num"}], "_type": "Call", "keywords": [{"value": {"args": [{"args": [{"_type": "Call", "keywords": [{"value": {"elts": [{"args": [{"n": 2, "_type": "Num"}], "_type": "Call", "func": {"_type": "Name", "id": "ManaCost"}}, {"_type": "Template18", "hole0": "IsMinion"}], "_type": "List"}, "_type": "keyword", "arg": "conditions"}], "func": {"_type": "Name", "id": "CardQuery"}}], "_type": "Call", "func": {"_type": "Name", "id": "AddCard"}}, {"_type": "Template18", "hole0": "PlayerSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}}, "_type": "keyword", "arg": "deathrattle"}, {"value": {"value": true, "_type": "NameConstant"}, "_type": "keyword", "arg": "taunt"}], "func": {"_type": "Name", "id": "Minion"}}, "_type": "Return"}], "name": "create_minion"}], "name": "Deathlord"}]}, "choice_history": [50, 111, 176, 58, 90, "Deathlord", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 69, 137, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 61, 95, "create_minion", "<EOS>", 150, 157, 149, "self", "<EOS>", 149, "player", "<EOS>", 176, 64, 119, 14, 89, 19, 112, "Minion", "<EOS>", 164, 37, 117, "2", "<EOS>", 37, 117, "8", "<EOS>", 172, 49, 152, "deathrattle", "<EOS>", 14, 88, 19, 112, "Deathrattle", "<EOS>", 164, 30, 88, 19, 112, "Add", "Card", "<EOS>", 163, 30, 87, 19, 112, "Card", "Query", "<EOS>", 171, 49, 152, "conditions", "<EOS>", 17, 107, 164, 30, 88, 19, 112, "Mana", "Cost", "<EOS>", 163, 37, 117, "2", "<EOS>", 46, 135, "Is", "Minion", "<EOS>", 46, 135, "Player", "Selector", "<EOS>", 49, 152, "taunt", "<EOS>", 20, 113, "True", "<EOS>"]}]}
{"gold_code": "class NerubarWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(\n            BothPlayer(), HasBattlecry()))])\n", "beams": [{"score_history": [0.0, 0.0, -1.71661376953125e-05, -1.52587890625e-05, -3.814697265625e-06, -0.0006836699321866035, -3.707347059389576e-05, -3.576278118089249e-07, -1.9073486328125e-06, 0.0, 0.0, 0.0, -8.463837730232626e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0003337860107421875, 0.0, -1.537799835205078e-05, 0.0, 0.0, -1.1444091796875e-05, 0.0, -1.52587890625e-05, -2.3841855067985307e-07, 0.0, -0.001903533935546875, -3.0517578125e-05, -4.494089080253616e-05, -4.8041343688964844e-05, -9.655952453613281e-06, 0.0, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.0003261566162109375, 0.0, -0.10508859157562256, 0.0, -0.03223228454589844, 0.0, -9.5367431640625e-06, -2.288818359375e-05, -6.139278411865234e-05, 0.0, -0.00012969970703125, -0.00109100341796875, 0.0, -3.4332275390625e-05, -9.5367431640625e-06, -0.012728193774819374, -0.05445940047502518, -3.516673677950166e-05, -0.00038909912109375, -0.087982177734375, -1.71661376953125e-05, -2.09808349609375e-05, -1.9073486328125e-06, -0.005681372247636318, -0.001742243766784668, -2.5152889065793715e-05, -0.0096435546875, -0.0001201629638671875, -6.4849853515625e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.21566222608089447, -0.00010490370914340019, -1.9073486328125e-06, -0.0001068115234375, -0.5324592590332031, -0.009112358093261719, -0.4979604482650757, -5.841255187988281e-06, -0.0069255828857421875, -0.11477088928222656, -3.24249267578125e-05, -1.9073486328125e-06, -0.0007096529006958008, -0.00218963623046875, 0.0, -1.52587890625e-05, -2.6702880859375e-05, -1.9073486328125e-06, -2.288818359375e-05, -3.814697265625e-06, -0.01573168858885765, -0.00012624262308236212, 0.0, -0.008632659912109375, -0.000823974609375, -3.814697265625e-06, 0.0, -0.0069484710693359375, -8.0108642578125e-05, 0.0, -0.35837268829345703, -0.5847358703613281, -0.000156402587890625, -0.2779160737991333, -0.3093661069869995, -0.003927732817828655, -0.000148773193359375, -0.0002117156982421875, -1.9073486328125e-06, -0.001509547233581543, -1.9073486328125e-06, -0.0002994537353515625, -6.67572021484375e-05, -0.005735395010560751, 0.0, -0.0028934478759765625, -0.001514434814453125, 0.0, 0.0, -0.6743956804275513, -0.0009784698486328125, 0.0, -7.62939453125e-06, -0.0001659393310546875, -9.72747802734375e-05, -0.0001392364501953125, -5.7220458984375e-06, -0.05938791111111641, -0.08600591868162155, -7.62939453125e-06, -0.17908573150634766, -0.0002193450927734375, -4.57763671875e-05, -3.814697265625e-06, -0.07069496810436249, -0.1719512939453125, -1.3947414117865264e-05, -4.76837158203125e-05, -0.09972572326660156, -0.005161285400390625, -0.19588541984558105, -0.23584167659282684, -0.0013542643282562494, -0.2112293243408203, 0.0, -0.423635333776474, -0.011715087108314037, 0.0, -0.0016422271728515625, 0.0, -0.16905057430267334, -0.0001538991928100586, 0.0, -0.0004253387451171875, -0.022436141967773438, 0.0, -3.814697265625e-05, -0.049918174743652344, -0.0004100799560546875, 0.0, -3.62396240234375e-05, -0.0016279220581054688, -3.814697265625e-06, -0.000461578369140625, -5.7220458984375e-06, -0.04897373169660568, -0.051406823098659515, -5.7220458984375e-06, -0.5351810455322266, -6.29425048828125e-05, -5.7220458984375e-05, -1.9073486328125e-05, -0.05174558609724045, -0.40238404273986816, -1.585470999998506e-05, -3.62396240234375e-05, -0.02767658233642578, -0.0041370391845703125, -0.24228310585021973, -0.16473326086997986, -0.0016075760358944535, -0.15116119384765625, 0.0, -0.48449087142944336, -0.013331420719623566, 0.0, -0.003383636474609375, 0.0, -0.14528512954711914, -0.00016927719116210938, 0.0, -0.0002803802490234375, -0.0003147125244140625, -1.1920928244535389e-07, -2.3841855067985307e-07, -1.33514404296875e-05, 0.0], "score": -8.27721404524332, "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(GiveAura(AuraUntil(\n            ManaChange(4), GreaterThan(Count(MinionSelector(IsDamaged())),\n            value=0), ActionTag(Give(BuffUntil(MinionsAttack(), TurnEnded()\n            )), SelfSelector()))), ActionTag(Give(BuffUntil(MinionsAttack(),\n            TurnEnded())), SelfSelector())))\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"hole4": {"args": [{"args": [{"args": [{"args": [{"n": 4, "_type": "Num"}], "_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}}, {"args": [{"args": [{"args": [{"_type": "Template18", "hole0": "IsDamaged"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Count"}}], "_type": "Call", "keywords": [{"value": {"n": 0, "_type": "Num"}, "_type": "keyword", "arg": "value"}], "func": {"_type": "Name", "id": "GreaterThan"}}, {"args": [{"args": [{"args": [{"_type": "Template18", "hole0": "MinionsAttack"}, {"_type": "Template18", "hole0": "TurnEnded"}], "_type": "Call", "func": {"_type": "Name", "id": "BuffUntil"}}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"_type": "Template18", "hole0": "SelfSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}}], "_type": "Call", "func": {"_type": "Name", "id": "GiveAura"}}, {"args": [{"args": [{"args": [{"_type": "Template18", "hole0": "MinionsAttack"}, {"_type": "Template18", "hole0": "TurnEnded"}], "_type": "Call", "func": {"_type": "Name", "id": "BuffUntil"}}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"_type": "Template18", "hole0": "SelfSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole2": "COMMON", "_type": "Template6", "hole0": "Nerub'ar Weblord", "hole3": "battlecry", "hole1": 2}], "name": "__init__"}, {"_type": "Template5", "hole1": 4, "hole0": 1}], "name": "Nerub'arWeblord"}]}, "choice_history": [50, 111, 176, 58, 90, "Nerub'ar", "Weblord", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 73, 141, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 164, 30, 88, 19, 112, "Give", "Aura", "<EOS>", 163, 30, 88, 19, 112, "Aura", "Until", "<EOS>", 165, 30, 88, 19, 112, "Mana", "Change", "<EOS>", 163, 37, 117, "4", "<EOS>", 30, 89, 19, 112, "Greater", "Than", "<EOS>", 163, 30, 88, 19, 112, "Count", "<EOS>", 163, 30, 88, 19, 112, "Minion", "Selector", "<EOS>", 163, 46, 135, "Is", "Damaged", "<EOS>", 171, 49, 152, "value", "<EOS>", 21, 117, "0", "<EOS>", 30, 88, 19, 112, "Action", "Tag", "<EOS>", 164, 30, 88, 19, 112, "Give", "<EOS>", 163, 30, 88, 19, 112, "Buff", "Until", "<EOS>", 164, 46, 135, "Minions", "Attack", "<EOS>", 46, 135, "Turn", "Ended", "<EOS>", 46, 135, "Self", "Selector", "<EOS>", 30, 88, 19, 112, "Action", "Tag", "<EOS>", 164, 30, 88, 19, 112, "Give", "<EOS>", 163, 30, 88, 19, 112, "Buff", "Until", "<EOS>", 164, 46, 135, "Minions", "Attack", "<EOS>", 46, 135, "Turn", "Ended", "<EOS>", 46, 135, "Self", "Selector", "<EOS>", 72, 140, "1", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "beams": [{"score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -1.1444091796875e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0032500862143933773, -0.0008538906695321202, -2.622604142743512e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -1.8358230590820312e-05, -5.996227264404297e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.03160858154296875, -0.000469207763671875, -0.000161038784426637, -3.528594970703125e-05, -3.123283386230469e-05, 0.0, -4.3868836655747145e-05, 0.0, -0.0009312629699707031, 0.0, -0.0012187957763671875, -1.1444091796875e-05, -2.2411340978578664e-05, -5.960462772236497e-07, -3.170942363794893e-05, -3.576278118089249e-07, -0.01776289939880371, 0.0, -0.000591278076171875, -0.000194549560546875, -0.0004082918167114258, 0.0], "score": -0.05778402577698216, "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=True)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"hole2": "ALL", "_type": "Template1", "hole1": 5, "hole0": "Spectral Knight"}, {"hole2": "spell_targetable", "_type": "Template4", "hole1": 6, "hole0": 4, "hole3": {"value": true, "_type": "NameConstant"}}], "name": "SpectralKnight"}]}, "choice_history": [50, 111, 176, 58, 90, "Spectral", "Knight", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 66, 126, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 71, 139, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 20, 113, "False", "<EOS>"]}]}
{"gold_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "beams": [{"score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0060164774768054485, -2.825220326485578e-05, -1.585470999998506e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, 0.0, -0.00010680581908673048, -7.748573807475623e-06, -3.814697265625e-06, -2.288818359375e-05, -4.76837158203125e-05, -0.0002524852752685547, 0.0, -3.0517578125e-05, -0.00012969970703125, -1.9073486328125e-06, -9.179100743494928e-06, -1.58548318722751e-05, -7.62939453125e-05, -0.018646240234375, -4.00543212890625e-05, -6.770858453819528e-05, -5.7220458984375e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -0.0038170814514160156, 0.0, -0.011376737616956234, 0.0, -0.002960205078125, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-05, -0.00024247169494628906, -1.1920928244535389e-07, -0.000102996826171875, -0.8115692138671875, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.012476280331611633, -0.0022192909382283688, -0.23650550842285156, -0.10689258575439453, -1.1444091796875e-05, -0.001728057861328125, -0.0912017822265625, -0.0003185272216796875, -0.07601521909236908, 0.0, -0.010663032531738281, -0.0001811981201171875, -0.6593485474586487, -3.933906555175781e-06, -0.30233192443847656, -0.05786705017089844, -2.09808349609375e-05, 0.0, -7.641315460205078e-05, -4.00543212890625e-05, 0.0, -0.0016117095947265625, -1.9073486328125e-06, -1.9073486328125e-06, -0.5777269601821899, 0.0, -3.24249267578125e-05, 0.0, -0.38532471656799316, -0.00012611706915777177, -2.3841855067985307e-07, -0.000499725341796875, -1.52587890625e-05, -3.814697265625e-06, -5.960462772236497e-07, -2.169608706026338e-05, 0.0], "score": -3.379013597935021, "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(2))]), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"hole4": {"args": [{"args": [{"elts": [{"_type": "Template11", "hole0": 1}, {"_type": "Template10", "hole0": 2}], "_type": "List"}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"_type": "Call", "keywords": [{"value": {"_type": "Template18", "hole0": "UserPicker"}, "_type": "keyword", "arg": "picker"}], "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole2": "RARE", "_type": "Template6", "hole0": "Wailing Soul", "hole3": "battlecry", "hole1": 4}], "name": "__init__"}, {"_type": "Template5", "hole1": 5, "hole0": 3}], "name": "WailingSoul"}]}, "choice_history": [50, 111, 176, 58, 90, "Wailing", "Soul", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 73, 141, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 164, 30, 88, 19, 112, "Give", "<EOS>", 163, 33, 107, 164, 41, 128, "1", "<EOS>", 40, 127, "2", "<EOS>", 30, 87, 19, 112, "Minion", "Selector", "<EOS>", 171, 49, 152, "picker", "<EOS>", 23, 135, "User", "Picker", "<EOS>", 72, 140, "3", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "beams": [{"score_history": [0.0, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.597391747054644e-05, -4.291525328881107e-06, -8.702239938429557e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, -1.4185905456542969e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -0.000667572021484375, -8.58306884765625e-05, -1.0490362910786644e-05, -2.562999361543916e-05, -1.9073468138230965e-06, -1.9073486328125e-06, -0.000603795051574707, 0.0, -2.086153835989535e-05, 0.0, -0.16582107543945312, -3.24249267578125e-05, -1.2040118235745467e-05, 0.0, -0.00011503395217005163, 0.0, -0.013428568840026855, 0.0, -0.0006122589111328125, -1.9073486328125e-06, -0.0003108978271484375, -2.86102294921875e-05, -1.9073486328125e-06, 0.0, 0.0, -0.00048458564560860395, -6.103515625e-05, -0.000408172607421875, -0.000133514404296875, -9.1552734375e-05, -0.09413540363311768, -1.52587890625e-05, -0.000545501708984375, 0.0, -0.001171922660432756, -1.5497207641601562e-05, 0.0], "score": -0.27892670282014365, "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"hole2": "ALL", "_type": "Template1", "hole1": 2, "hole0": "Amani Berserker"}, {"hole2": "enrage", "_type": "Template4", "hole1": 3, "hole0": 2, "hole3": {"elts": [{"args": [{"_type": "Template15", "hole0": 3}, {"_type": "Template18", "hole0": "SelfSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}], "_type": "List"}}], "name": "AmaniBerserker"}]}, "choice_history": [50, 111, 176, 58, 90, "Amani", "Berserker", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 66, 126, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 71, 139, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 17, 107, 163, 30, 88, 19, 112, "Aura", "<EOS>", 164, 43, 132, "3", "<EOS>", 46, 135, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            hearthbreaker.cards.Fireball()), PlayerSelector()))])\n", "beams": [{"score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.0019165972480550408, -0.00036745471879839897, -7.510169325541938e-06, -5.7220458984375e-06, 0.0, 0.0, -4.4815707951784134e-05, -2.2649765014648438e-06, -8.344650268554688e-06, -1.33514404296875e-05, -0.0004482269287109375, -1.71661376953125e-05, -2.1815061700181104e-05, -1.668929871811997e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -0.009293505921959877, -2.3841855067985307e-07, -0.07327008247375488, -1.9073486328125e-06, -0.05221688747406006, 0.0, -0.000335693359375, -0.0002079010009765625, -7.748603820800781e-06, -5.006785613659304e-06, -0.0019140243530273438, -1.5616295058862306e-05, -0.00017785510863177478, -4.768370445162873e-07, -3.814697265625e-06, -3.814697265625e-06, -0.057396888732910156, -3.814697265625e-06, -2.86102294921875e-05, -3.814697265625e-06, 0.0, -1.060962586052483e-05, -1.9073486328125e-06, -3.24249267578125e-05, -0.005107879638671875, -0.018678665161132812, -2.09808349609375e-05, -7.2479248046875e-05, -0.01736675761640072, -0.0005398983485065401, -2.0265579223632812e-06, -0.3846578598022461, -0.0009307861328125, -3.814697265625e-06, -1.9073486328125e-06, -3.24249267578125e-05, -0.07860767841339111, -0.04860544204711914, -0.000738978385925293, -0.0002040863037109375, -1.33514404296875e-05, -9.918212890625e-05, -0.0009391303174197674, -5.7220458984375e-06, -0.0017671585083007812, -2.09808349609375e-05, -1.52587890625e-05, 0.0, -0.0006985664367675781, -0.00048828125, 0.0, -0.0019817352294921875, -0.0018177032470703125, -5.7220458984375e-06, -0.0002613067626953125, -1.52587890625e-05, -0.057705339044332504, -0.00011813168384833261, -0.0009306020219810307, -0.00279998779296875, -0.0022830963134765625, -0.000484466552734375, -2.86102294921875e-05, -7.62939453125e-06, -4.911421274300665e-05, -0.000536676321644336, -6.079669401515275e-05, -0.0016689300537109375, -4.9591064453125e-05, -0.0001735687255859375, -0.07732057571411133, -3.576278118089249e-07, -0.0003261566162109375, -1.71661376953125e-05, -0.027794837951660156, -0.3507823944091797, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -0.0017473697662353516, -0.001458287239074707, -5.125998541188892e-06, -0.0004749298095703125, -2.288818359375e-05, -5.7220458984375e-06, -0.011066436767578125, -1.9073486328125e-06, -0.0004596710205078125, 0.0, -0.012360692024230957, -9.536738616588991e-07, -0.0002155303955078125, -1.9073486328125e-06, -4.398822784423828e-05, -0.0003330707550048828, -2.1457672119140625e-06], "score": -1.3129091566522888, "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector()))])\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"hole2": "PRIEST", "_type": "Template3", "hole1": 7, "hole0": "Archmage Antonidas", "hole3": "LEGENDARY"}, {"hole2": "effects", "_type": "Template4", "hole1": 7, "hole0": 5, "hole3": {"elts": [{"args": [{"args": [{"args": [{"n": 1, "_type": "Num"}], "_type": "Call", "func": {"_type": "Name", "id": "ManaCost"}}], "_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}}, {"args": [{"args": [{"_type": "Call", "keywords": [{"value": {"elts": [{"args": [{"attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "_type": "List"}, "_type": "keyword", "arg": "conditions"}], "func": {"_type": "Name", "id": "CardQuery"}}], "_type": "Call", "func": {"_type": "Name", "id": "AddCard"}}, {"_type": "Template18", "hole0": "PlayerSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}], "_type": "List"}}], "name": "ArchmageAntonidas"}]}, "choice_history": [50, 111, 176, 58, 90, "Archmage", "Antonidas", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 70, 138, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "LEGENDARY", "<EOS>", 71, 139, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 107, 163, 30, 88, 19, 112, "Effect", "<EOS>", 164, 30, 88, 19, 112, "Spell", "Cast", "<EOS>", 163, 30, 88, 19, 112, "Mana", "Cost", "<EOS>", 163, 37, 117, "1", "<EOS>", 30, 88, 19, 112, "Action", "Tag", "<EOS>", 164, 30, 88, 19, 112, "Add", "Card", "<EOS>", 163, 30, 87, 19, 112, "Card", "Query", "<EOS>", 171, 49, 152, "conditions", "<EOS>", 17, 107, 163, 30, 88, 19, 112, "Is", "Type", "<EOS>", 163, 27, 81, 19, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 46, 135, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)\n", "beams": [{"score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -4.9591064453125e-05, -5.7220458984375e-06, 0.0, -9.953480184776708e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, -5.952315405011177e-07, -0.00026213459204882383, 0.0, -0.0001678466796875, -6.4849853515625e-05, -9.5367431640625e-06, -1.1563301086425781e-05, 0.0, -1.9073486328125e-06, -0.000415802001953125, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -6.103515625e-05, -0.0018482208251953125, -3.814697265625e-06, 0.0, -1.9073486328125e-05, 0.0, -5.9604644775390625e-06, -1.9073486328125e-06, -0.00042557716369628906, 0.0, -0.001735687255859375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -0.0006449222564697266, -5.7220458984375e-06, -7.2479248046875e-05, -7.152536909416085e-07, -2.3841855067985307e-07, -5.14984130859375e-05, -1.33514404296875e-05, -1.1444091796875e-05, 0.0, -0.0004800558090209961, 0.0, -0.007863640785217285, 0.0, -3.62396240234375e-05, 0.0, 0.0, 0.0, -1.9431114196777344e-05, -1.9073486328125e-06, -4.1961669921875e-05, 0.0, -1.1444091796875e-05, -4.9591064453125e-05, -0.0001544952392578125, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.1444091796875e-05, -4.38690185546875e-05, -3.814697265625e-06, -9.1552734375e-05, -9.5367431640625e-06, -2.288818359375e-05, -3.814697265625e-06, 0.0, -0.0001010894775390625, -3.814697265625e-06, -0.0005855560302734375, -1.71661376953125e-05, -0.016073226928710938, -1.9073486328125e-06, -0.024866104125976562, -0.004302978515625, 0.0, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -1.9073486328125e-05, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.6128413677215576, -1.1920928244535389e-07, -0.00058746337890625, -0.011968612670898438, -3.814697265625e-06, -8.20159912109375e-05, 0.0, -0.06550478935241699, -0.0012303590774536133, -6.866455078125e-05, -0.011952400207519531, -1.9073486328125e-05, -1.0360196828842163, -0.09572193026542664], "score": -1.8970460469624513, "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(+1/+1()))\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Bananas"}, {"n": 1, "_type": "Num"}, {"attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "_type": "Call", "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "keyword", "arg": "target_func"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"hole2": [{"args": [{"_type": "Template18", "hole0": "+1/+1"}], "_type": "Call", "func": {"_type": "Name", "id": "Buff"}}], "_type": "Template0", "hole1": "add_buff", "hole0": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}}], "name": "Bananas"}]}, "choice_history": [50, 111, 176, 58, 90, "Bananas", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 167, 38, 121, "Bananas", "<EOS>", 37, 117, "1", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 36, 113, "False", "<EOS>", 171, 49, 152, "target_func", "<EOS>", 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 65, 125, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 163, 30, 88, 19, 112, "Buff", "<EOS>", 163, 46, 135, "+1/+1", "<EOS>"]}]}
{"gold_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(DoubleAttack()))\n", "beams": [{"score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -7.62939453125e-06, -4.446407547220588e-05, -2.145764938177308e-06, -1.5497195136049413e-06, -1.9073486328125e-06, 0.0, 0.0, -8.293427526950836e-07, -9.02414321899414e-05, -1.1920928244535389e-07, -0.000274658203125, -5.7220458984375e-05, -3.814697265625e-06, -9.655952453613281e-06, 0.0, 0.0, -0.0001277923583984375, -1.9073486328125e-06, -0.00022125244140625, -1.52587890625e-05, -1.52587890625e-05, -7.62939453125e-05, -5.91278076171875e-05, -8.392333984375e-05, -5.91278076171875e-05, -7.62939453125e-06, -3.814697265625e-06, -0.0001850128173828125, -1.9073486328125e-06, -2.6702880859375e-05, -7.62939453125e-06, -9.34600830078125e-05, 0.0, -4.00543212890625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002952389477286488, -4.661083221435547e-05, -1.4781842764932662e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.0728830375228426e-06, -0.0001842975616455078, -1.1444091796875e-05, 0.0, -4.1961669921875e-05, 0.0, -1.52587890625e-05, -4.768370445162873e-07, -0.17061889171600342, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -3.62396240234375e-05, 0.0, -0.05601692199707031, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -2.09808349609375e-05, -1.9073486328125e-05, -2.288818359375e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -5.14984130859375e-05, -0.000152587890625, -4.9948692321777344e-05, -0.0006949900998733938, 0.0, -0.5860776901245117, -9.5367431640625e-06, -3.814697265625e-05, 0.0, -3.814697265625e-05, -1.71661376953125e-05, -5.7220458984375e-06, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -5.14984130859375e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.00020432472229003906, 0.0, -0.22405338287353516, -2.288818359375e-05, -2.6702880859375e-05, -2.86102294921875e-05, -0.000156402587890625, -1.1444091796875e-05, -3.814697265625e-06, -4.76837158203125e-05, 0.0, -2.5033950805664062e-05, -2.0265579223632812e-06, -7.05718994140625e-05, 0.0, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0002295970916748047, 0.0, -0.03553009033203125, -0.000244140625, -2.09808349609375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.37870919704437256, -2.622600959512056e-06, -0.3229055404663086, -0.0034008026123046875, -0.001277923583984375, 0.0, -0.03496837615966797, -1.9073486328125e-06, -0.00011444091796875, 0.0, -0.0007686614990234375, 0.0, -4.017353057861328e-05, 0.0, -0.02636287920176983, 0.0, -0.005051612854003906, -0.007701873779296875, -0.00173187255859375, -1.9073486328125e-06, 0.0, -0.0002269744873046875, -4.57763671875e-05, -0.0023708343505859375, 0.0, -0.00087738037109375, 0.0, -2.5272369384765625e-05, 0.0, -0.027278179302811623, 0.0, -0.17459392547607422, -3.814697265625e-06, -5.7220458984375e-06, -0.004543304443359375, -3.814697265625e-06, 0.0, -0.0008392333984375, -2.47955322265625e-05, -0.0003604888916015625, 0.0, -0.00042760372161865234, -1.1920928244535389e-07, -3.814697265625e-05, 0.0, -0.8086559772491455, -1.33514404296875e-05, -4.38690185546875e-05, -0.17892169952392578, 0.0, -1.5825555324554443, -0.00034809112548828125, -0.006103515625, -1.9073486328125e-06, -0.0004367828369140625, -0.4396028518676758, -3.814697265625e-06, 0.0, -0.12061786651611328, -0.0003833770751953125, -9.5367431640625e-05, 0.0, -6.103515625e-05, 0.0, -0.00012600421905517578, 0.0, -0.3298511505126953, 0.0], "score": -5.5394722704364625, "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = self.target.health - self.target.calculate_attack()\n        self.target.die(temp_attack)\n        self.target.<UNK>()\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Blessed Champion"}, {"n": 5, "_type": "Num"}, {"attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "RARE", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "keyword", "arg": "target_func"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"attr": "use", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"left": {"attr": "health", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "BinOp", "right": {"_type": "Call", "func": {"attr": "calculate_attack", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}}, "op": {"_type": "Sub"}}, "_type": "Assign", "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"value": {"args": [{"_type": "Name", "id": "temp_attack"}], "_type": "Call", "func": {"attr": "die", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"_type": "Call", "func": {"attr": "<UNK>", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "use"}], "name": "BlessedChampion"}]}, "choice_history": [50, 111, 176, 58, 90, "Blessed", "Champion", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Blessed", " ", "Champion", "<EOS>", 37, 117, "5", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 171, 49, 152, "target_func", "<EOS>", 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 61, 95, "use", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "player", "<EOS>", 149, "game", "<EOS>", 179, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "use", "<EOS>", 164, 35, 112, "player", "<EOS>", 35, 112, "game", "<EOS>", 55, 80, 163, 35, 112, "<UNK>", "<EOS>", 12, 83, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 52, 14, 86, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 163, 35, 112, "temp_attack", "<EOS>", 59, 93, 14, 86, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>"]}]}
{"gold_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(\n            AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "beams": [{"score_history": [0.0, -4.00543212890625e-05, 0.0, -2.09808349609375e-05, 0.0, -0.0010559981456026435, -0.009752573445439339, -0.0049274759367108345, -1.9073486328125e-06, 0.0, 0.0, -4.74369153380394e-06, -2.0265579223632812e-06, 0.0, -0.6424875259399414, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.62396240234375e-05, -1.71661376953125e-05, -3.814697265625e-06, -0.05887794494628906, -7.2479248046875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -6.4849853515625e-05, -9.5367431640625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0020419687498360872, -3.647804260253906e-05, -0.00013530223804991692, -0.2640094757080078, -0.00039344330434687436, -0.0023670196533203125, -5.7220458984375e-06, -1.9073486328125e-06, -1.6093124941107817e-05, -2.6941281248582527e-05, -1.9073486328125e-05, 0.0, -1.9073486328125e-05, 0.0, -2.110004425048828e-05, -8.225431884056889e-06, -0.11296391487121582, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -2.288818359375e-05, 0.0, -3.0517578125e-05, 0.0, -0.5948104858398438, -2.288818359375e-05, -0.0047607421875, -0.00067901611328125, -1.33514404296875e-05, -0.0005130767822265625, 0.0, -6.103515625e-05, -7.62939453125e-06, -4.00543212890625e-05, -4.00543212890625e-05, -9.751319885253906e-05, 0.0, -0.001537322998046875, -0.0013103485107421875, -1.33514404296875e-05, -1.1444091796875e-05, -1.9073486328125e-05, -0.3485576808452606, -0.008791564963757992, -0.00014495849609375, -0.20615768432617188, -4.57763671875e-05, -0.0005893707275390625, -0.28548145294189453, -0.0033416748046875, -0.5151746273040771, 0.0, -0.37834835052490234, -0.00030517578125, -0.21703743934631348, -1.9073486328125e-06, -0.48737049102783203, -0.10754108428955078, -7.62939453125e-06, 0.0, -0.1664135456085205, -2.86102294921875e-05, -7.62939453125e-06, -0.010146141052246094, -0.18822383880615234, -4.76837158203125e-05, -1.9073486328125e-05, 0.0, -0.5009912252426147, -0.27197229862213135, -0.22600960731506348, -7.62939453125e-05, -0.10279464721679688, -4.76837158203125e-05, -0.14324907958507538, -1.9073486328125e-06, -0.2635374069213867, -5.340576171875e-05, -0.0027128737419843674, -9.655952453613281e-06, -0.0028906320221722126, -5.7220458984375e-06], "score": -6.141695472095307, "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(3))]), MinionSelector(Has<UNK>(2))))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Cabal Shadow Priest"}, {"n": 6, "_type": "Num"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "EPIC", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"args": [{"args": [{"elts": [{"_type": "Template11", "hole0": 2}, {"_type": "Template10", "hole0": 3}], "_type": "List"}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"args": [{"args": [{"n": 2, "_type": "Num"}], "_type": "Call", "func": {"_type": "Name", "id": "Has<UNK>"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "_type": "keyword", "arg": "battlecry"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"_type": "Template5", "hole1": 5, "hole0": 4}], "name": "CabalShadow"}]}, "choice_history": [50, 111, 176, 58, 90, "Cabal", "Shadow", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Cabal", " ", "Shadow", " ", "Priest", "<EOS>", 37, 117, "6", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 171, 49, 152, "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 164, 30, 88, 19, 112, "Give", "<EOS>", 163, 33, 107, 164, 41, 128, "2", "<EOS>", 40, 127, "3", "<EOS>", 30, 88, 19, 112, "Minion", "Selector", "<EOS>", 163, 30, 88, 19, 112, "Has", "<UNK>", "<EOS>", 163, 37, 117, "2", "<EOS>", 72, 140, "4", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        index = self.target.index\n        if self.target.index < len(self.target.player.minions) - 1:\n            minion = self.target.player.minions[index + 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target.index > 0:\n            minion = self.target.player.minions[index - 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n", "beams": [{"score_history": [-3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -3.24249267578125e-05, -2.86102294921875e-05, -0.00013422065239865333, -0.00018465201719664037, -0.0007169060409069061, -5.125986263010418e-06, -5.53131103515625e-05, 0.0, -1.9073486328125e-06, 0.0, -4.4465065002441406e-05, 0.0, -0.02858734130859375, -0.134552001953125, -3.814697265625e-06, -1.52587890625e-05, 0.0, -7.62939453125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -1.33514404296875e-05, -3.24249267578125e-05, 0.0, -4.1961669921875e-05, -0.00012969970703125, -3.814697265625e-06, -1.33514404296875e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -5.7220458984375e-06, -1.52587890625e-05, -2.86102294921875e-05, -7.319182623177767e-05, -0.000125885009765625, -5.364416665543104e-06, -4.00543212890625e-05, -0.00015866756439208984, -2.288818359375e-05, -1.71661376953125e-05, -1.9073486328125e-06, -4.768360213347478e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -5.0187110900878906e-05, -2.3841855067985307e-07, -0.2749464511871338, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -0.000202178955078125, 0.0, -3.814697265625e-05, 0.0, -0.10048961639404297, -5.7220458984375e-06, -9.5367431640625e-06, -4.1961669921875e-05, -1.33514404296875e-05, -8.20159912109375e-05, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -3.0517578125e-05, -1.33514404296875e-05, -3.445148468017578e-05, -0.0002504587173461914, -0.028945088386535645, 0.0, -0.0002918243408203125, -7.62939453125e-06, -1.52587890625e-05, 0.0, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, 0.0, -2.6702880859375e-05, 0.0, -1.9073486328125e-06, -0.00012075897393515334, -1.1920928244535389e-07, -0.669651985168457, -0.0001373291015625, 0.0, -7.62939453125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -2.7418097943154862e-06, 0.0, -0.0004062652587890625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.000110626220703125, -2.288818359375e-05, -1.39474832394626e-05, 0.0, -0.6414175033569336, -1.9073486328125e-06, -1.9073486328125e-06, -0.000583648681640625, 0.0, -4.1961669921875e-05, -8.58306884765625e-05, -1.52587890625e-05, -0.0011997222900390625, 0.0, -1.6450881958007812e-05, 0.0, -3.24249267578125e-05, 0.0, -0.8078824281692505, 0.0, -3.814697265625e-06, -0.034000396728515625, -7.62939453125e-06, -0.3514728844165802, 0.0, -7.05718994140625e-05, -3.814697265625e-06, -3.0517578125e-05, 0.0, -0.4110431671142578, -1.9073486328125e-06, -2.288818359375e-05, -0.000156402587890625, -0.0066623687744140625, -4.768370445162873e-07, -0.15151214599609375, -0.0006256103515625, -0.00012969970703125, 0.0, -0.00022125244140625, 0.0, -0.0006542205810546875, -1.52587890625e-05, -0.000453948974609375, -9.5367431640625e-06, -3.62396240234375e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -0.002140045166015625, 0.0, -0.0002460479736328125, -7.62939453125e-06, -0.002197265625, -2.09808349609375e-05, -8.16583342384547e-05, 0.0, -2.09808349609375e-05, -0.0113983154296875, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -2.288818359375e-05, 0.0, -0.000690460205078125, 0.0, -0.030895352363586426, -4.768370445162873e-07, -6.67572021484375e-05, 0.0, -9.34600830078125e-05, -0.030393600463867188, -0.004253387451171875, -4.1961669921875e-05, 0.0, -3.62396240234375e-05, 0.0, -0.01317894458770752, -5.7220458984375e-06, -0.010273933410644531, -2.205355303885881e-05, -0.000392913818359375, -0.16256999969482422, -0.0014162063598632812, -0.0010099411010742188, -3.24249267578125e-05, -0.04967454820871353, -3.576278118089249e-07, -0.5193538665771484, -0.27147674560546875, -0.007549285888671875, -0.0006527528166770935, 0.0, -0.005179405212402344, -3.814697265625e-05, -0.0033369064331054688, 0.0, -0.6624832153320312, -0.007372856140136719, -0.12048625946044922, -0.000118255615234375, -0.0012054443359375, -1.9073486328125e-06, -0.18025779724121094, 0.0, -0.0070896148681640625, 0.0, -0.000797271728515625, 0.0, -3.0517578125e-05, -0.04768085479736328, -1.9073486328125e-06, -0.09013652801513672, 0.0, -0.46446895599365234, 0.0, -0.0002460479736328125, 0.0, -0.037873268127441406, -1.9073486328125e-06, -0.02970707416534424, -5.7220458984375e-06, -0.5769285559654236, 0.0, -7.62939453125e-06, -0.008038520812988281, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.025300979614257812, 0.0, -0.28535890579223633, -4.768370445162873e-07, -7.2479248046875e-05, -1.9073486328125e-06, -9.918212890625e-05, -0.037006378173828125, -0.013570785522460938, -3.4332275390625e-05, 0.0, -3.62396240234375e-05, 0.0, -0.011112332344055176, -3.814697265625e-06, -0.012262344360351562, -3.015960282937158e-05, -0.0003509521484375, -0.13771533966064453, -0.0015888214111328125, -0.0013666152954101562, -2.6702880859375e-05, -0.033992424607276917, -4.768370445162873e-07, -0.5430183410644531, -0.3690671920776367, -0.0063953399658203125, -0.0006260946393013, 0.0, -0.007144927978515625, -3.62396240234375e-05, -0.002887725830078125, 0.0], "score": -8.502664643702374, "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1 - 1), self)\n        if self.target is not game.other_player.minions:\n            minion.damage(player.effective_spell_damage(1 - 1), self)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Cone of Cold"}, {"n": 4, "_type": "Num"}, {"attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "keyword", "arg": "target_func"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"attr": "use", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"n": 4, "_type": "Num"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"attr": "damage", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"value": {"args": [{"args": [{"left": {"n": 1, "_type": "Num"}, "_type": "BinOp", "right": {"n": 1, "_type": "Num"}, "op": {"_type": "Sub"}}], "_type": "Call", "func": {"attr": "effective_spell_damage", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"attr": "damage", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}}, "_type": "Expr"}], "iter": {"args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call", "func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}}}, {"_type": "If", "body": [{"value": {"args": [{"args": [{"left": {"n": 1, "_type": "Num"}, "_type": "BinOp", "right": {"n": 1, "_type": "Num"}, "op": {"_type": "Sub"}}], "_type": "Call", "func": {"attr": "effective_spell_damage", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"attr": "damage", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}}, "_type": "Expr"}], "test": {"left": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Compare", "comparators": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "ops": [{"_type": "IsNot"}]}}], "name": "use"}], "name": "ConeOfCold"}]}, "choice_history": [50, 111, 176, 58, 90, "Cone", "Of", "Cold", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Cone", " ", "of", " ", "Cold", "<EOS>", 37, 117, "4", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 171, 49, 152, "target_func", "<EOS>", 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 61, 95, "use", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "player", "<EOS>", 149, "game", "<EOS>", 179, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "use", "<EOS>", 164, 35, 112, "player", "<EOS>", 35, 112, "game", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 164, 37, 117, "4", "<EOS>", 35, 112, "self", "<EOS>", 60, 94, 19, 112, "minion", "<EOS>", 14, 88, 11, 81, 19, 112, "copy", "<EOS>", "copy", "<EOS>", 163, 27, 81, 11, 81, 19, 112, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 19, 112, "minion", "<EOS>", "damage", "<EOS>", 164, 30, 88, 11, 81, 19, 112, "player", "<EOS>", "effective_spell_damage", "<EOS>", 163, 28, 83, 21, 117, "1", "<EOS>", 52, 21, 117, "1", "<EOS>", 35, 112, "self", "<EOS>", 62, 98, 15, 91, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", 160, 7, 163, 27, 81, 11, 81, 19, 112, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 19, 112, "minion", "<EOS>", "damage", "<EOS>", 164, 30, 88, 11, 81, 19, 112, "player", "<EOS>", "effective_spell_damage", "<EOS>", 163, 28, 83, 21, 117, "1", "<EOS>", 52, 21, 117, "1", "<EOS>", 35, 112, "self", "<EOS>"]}]}
{"gold_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"score_history": [-1.52587890625e-05, -4.00543212890625e-05, -3.814697265625e-06, -1.52587890625e-05, -7.62939453125e-06, -0.0004644507134798914, -0.00015425540914293379, -0.005716286599636078, -0.00020156297250650823, 0.0, 0.0, 0.0, 0.0, -1.549716034787707e-05, -7.152555099310121e-07, -1.1444091796875e-05, -5.340576171875e-05, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -4.57763671875e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.028860092163085938, -2.47955322265625e-05, -0.007492773234844208, -0.0003873109817504883, -5.865095590706915e-05, -6.29425048828125e-05, -5.435943603515625e-05, -3.814697265625e-06, -0.00015532970428466797, -5.960462772236497e-07, -0.0007916688919067383, -5.7220458984375e-06, -0.00017404551908839494, 0.0, -0.03326225280761719, -1.9073486328125e-06, -7.62939453125e-06, -3.0517578125e-05, -5.733966827392578e-05, 0.0, -0.0002346038818359375, -0.000690460205078125, 0.0, -3.814697265625e-05, 0.0, -0.002713393419981003, -0.0011018511140719056, -0.002834320068359375, -0.08077716827392578, 0.0, -0.0005588531494140625, -0.44792747497558594, 0.0, -0.000194549560546875, -1.9073486328125e-06, -0.0006797803798690438, -0.09404242038726807, -0.0003185272216796875, -0.052082061767578125, -0.0003032684326171875, -0.014158954843878746, -0.0018432952929288149, -0.0005512237548828125, -3.814697265625e-06, -3.814697265625e-06, -8.20159912109375e-05, -0.002266049152240157, -0.006244301795959473, -0.0002899169921875, -0.007279396057128906, -4.9591064453125e-05, -0.0011058954987674952, -0.0016228336608037353, -0.0015430450439453125, -0.0010833740234375, -1.1444091796875e-05, -1.9073486328125e-06, -0.0002351986477151513, -3.4332275390625e-05, -5.841255187988281e-06, -0.009787559509277344, -3.24249267578125e-05, 0.0, -0.47194528579711914, 0.0, -0.4765634536743164, -0.00014495849609375, 0.0, -1.9073486328125e-06, -0.8332632780075073, -0.0019378662109375, -7.987022399902344e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.00022125244140625, -1.52587890625e-05, -9.548664093017578e-05, -4.768370445162873e-07, -0.40766048431396484, 0.0, -0.6546316146850586, -5.7220458984375e-06, -1.1920928244535389e-07, 0.0, -3.814688625425333e-06, 0.0, -0.45610761642456055, -0.013034820556640625, -0.000606536865234375, -4.57763671875e-05, -0.002541462192311883, 0.0], "score": -4.129823649172913, "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (Taunt())]), MinionSelector(condition=IsType(MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(2, 3, spell_damage=1)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"hole4": {"args": [{"args": [{"elts": [{"args": [{"_type": "Template18", "hole0": "Taunt"}], "_type": "Call", "func": {"_type": "Name", "id": "Buff"}}, {"args": [{"_type": "Template18", "hole0": "Taunt"}], "_type": "Call", "func": {"_type": "Name", "id": "Buff"}}], "_type": "List"}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"_type": "Call", "keywords": [{"value": {"args": [{"attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}, "_type": "keyword", "arg": "condition"}], "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole2": "RARE", "_type": "Template6", "hole0": "Defender of Argus", "hole3": "battlecry", "hole1": 4}], "name": "__init__"}, {"hole2": "spell_damage", "_type": "Template4", "hole1": 3, "hole0": 2, "hole3": {"n": 1, "_type": "Num"}}], "name": "DefenderOfArgus"}]}, "choice_history": [50, 111, 176, 58, 90, "Defender", "Of", "Argus", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 73, 141, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 164, 30, 88, 19, 112, "Give", "<EOS>", 163, 33, 107, 164, 30, 88, 19, 112, "Buff", "<EOS>", 163, 46, 135, "Taunt", "<EOS>", 30, 88, 19, 112, "Buff", "<EOS>", 163, 46, 135, "Taunt", "<EOS>", 30, 87, 19, 112, "Minion", "Selector", "<EOS>", 171, 49, 152, "condition", "<EOS>", 14, 88, 19, 112, "Is", "Type", "<EOS>", 163, 27, 81, 19, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 71, 139, "2", "<EOS>", "3", "<EOS>", "spell_damage", "<EOS>", 21, 117, "1", "<EOS>"]}]}
{"gold_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, buffs=[Buff(Windfury())])\n", "beams": [{"score_history": [0.0, -5.7220458984375e-05, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -2.5987286790041253e-05, -2.4914475943660364e-05, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0008011291502043605, -2.765655517578125e-05, -3.4570634852570947e-06, -0.00621795654296875, -5.7220458984375e-06, -1.52587890625e-05, -7.271765298355604e-06, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -5.91278076171875e-05, -3.814697265625e-06, -7.152555099310121e-07, -0.05684089660644531, -1.9073486328125e-05, -1.9073486328125e-06, -2.6702880859375e-05, -0.000308990478515625, 0.0, -1.9073486328125e-06, -1.71661376953125e-05, -4.57763671875e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-05, -7.152555099310121e-07, -0.00012612342834472656, -9.5367431640625e-06, 0.0, -0.6871778964996338, 0.0, 0.0, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -0.0005704164505004883, -2.2411320969695225e-05, -0.0009860991267487407, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -4.1961669921875e-05, -1.1920928244535389e-07, -0.5012667179107666, 0.0, -0.09059906005859375, -0.0012836456298828125, -0.000904083251953125, -0.04904172196984291, -1.0728830375228426e-06, -0.11327075958251953, 0.0, -0.16260433197021484, -5.7220458984375e-06, 0.0, -0.0003681182861328125, -2.86102294921875e-05, 0.0, -1.1920928244535389e-07, -1.9073486328125e-06, -8.0108642578125e-05, -1.9073486328125e-06, -0.000301361083984375, -0.000751495361328125, -0.0002307891845703125, -5.53131103515625e-05, -0.11040115356445312, -0.000759124755859375, 0.0, -0.04155433177947998, -1.71661376953125e-05, -0.0002593994140625, -5.7220458984375e-05, -1.9073486328125e-06, -0.0006941173342056572, 0.0, -1.52587890625e-05, -7.62939453125e-06, -0.012188315391540527, 0.0, -0.5681667327880859, -0.0006504058837890625, -9.5367431640625e-06, -0.23164868354797363, -0.0003892183303833008, -0.019596099853515625, -0.0024261474609375, -0.008543968200683594, 0.0], "score": -2.671753264849812, "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 2, windfury=True)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "WeaponCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Doomhammer"}, {"n": 2, "_type": "Num"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "RARE", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"_type": "Template19", "hole0": 2}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"n": 2, "_type": "Num"}, {"n": 2, "_type": "Num"}], "_type": "Call", "keywords": [{"value": {"value": true, "_type": "NameConstant"}, "_type": "keyword", "arg": "windfury"}], "func": {"_type": "Name", "id": "Weapon"}}, "_type": "Return"}], "name": "create_weapon"}], "name": "Doomhammer"}]}, "choice_history": [50, 111, 176, 58, 90, "Doomhammer", "<EOS>", 163, 35, 112, "Weapon", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Doomhammer", "<EOS>", 37, 117, "2", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 171, 48, 136, "2", "<EOS>", 61, 95, "create_weapon", "<EOS>", 150, 157, 149, "self", "<EOS>", 149, "player", "<EOS>", 176, 64, 119, 14, 89, 19, 112, "Weapon", "<EOS>", 164, 37, 117, "2", "<EOS>", 37, 117, "2", "<EOS>", 171, 49, 152, "windfury", "<EOS>", 20, 113, "True", "<EOS>"]}]}
{"gold_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence()\n        self.target.damage(player.effective_spell_damage(1), self)\n", "beams": [{"score_history": [-9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -2.5987286790041253e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -0.00011980532872257754, -1.0728830375228426e-06, -0.0025310516357421875, -0.009006500244140625, -1.1444091796875e-05, -1.609325408935547e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.33514404296875e-05, -3.814697265625e-06, -4.57763671875e-05, -0.00012969970703125, -1.9073486328125e-06, -1.33514404296875e-05, -0.000171661376953125, -1.9073486328125e-06, -5.9604644775390625e-06, -3.826618194580078e-05, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -3.814697265625e-06, -9.5367431640625e-06, -0.00012766500003635883, -3.7431713280966505e-05, -3.3378591979271732e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, 4.768444341607392e-07, -1.1920928244535389e-07, -5.14984130859375e-05, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -5.841255187988281e-06, -1.6212441551033407e-05, -0.6818350553512573, 0.0, 0.0, 0.0, -6.103515625e-05, 0.0, -0.0001125335693359375, -1.9073486328125e-06, -0.0005588531494140625, 0.0, -0.00048065185546875, -0.0012760162353515625, -4.1961669921875e-05, -7.62939453125e-06, -2.288818359375e-05, -4.1961669921875e-05, -1.52587890625e-05, -7.62939453125e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.00014495849609375, -8.58306884765625e-05, -0.00012886524200439453, -0.00026106834411621094, -0.03527820110321045, -1.1920928244535389e-07, -0.010812759399414062, -1.52587890625e-05, -2.86102294921875e-05, 0.0, -2.6702880859375e-05, -3.62396240234375e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, -5.9604644775390625e-06, -1.9073486328125e-06, -0.00010025472147390246, -3.576278118089249e-07, -0.36354541778564453, -0.0002574920654296875, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.05718994140625e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.00014721373736392707, -2.622604142743512e-06, -0.000308990478515625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -2.0265579223632812e-06, -7.62939453125e-06, -0.0003509521484375, -1.1444091796875e-05, -6.091588147683069e-05, -3.814697265625e-06, -0.3151969909667969, -5.7220458984375e-05, -7.62939453125e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.9451577663421631, -0.00010930894495686516, -0.033974647521972656, -0.0030689239501953125, -5.7220458984375e-06, 0.0, -0.001171112060546875, -1.33514404296875e-05, -0.6336326599121094, -1.71661376953125e-05, -0.0024938583374023438, 0.0, -0.002255678176879883, -3.814697265625e-06, -4.76837158203125e-05, 0.0, -0.07273030281066895, -1.9073486328125e-06, -0.6989275217056274, 0.0, -0.0019969940185546875, 0.0, 0.0, -0.000522613525390625, 0.0, -1.9073486328125e-06, -0.04339027404785156, -0.0001277923583984375, -0.00162506103515625, 0.0, -9.071822569239885e-05, -4.0531076592742465e-06, -1.1444091796875e-05, -1.1920928244535389e-07, -0.12370073795318604, -7.748603820800781e-06, -5.7220458984375e-06, -0.51605224609375, 0.0, -0.47901105880737305, -5.7220458984375e-06, -0.0048770904541015625, 0.0, -1.9073486328125e-06, -0.0071582794189453125, -1.9073486328125e-06, -7.62939453125e-06, -0.12130260467529297, -5.53131103515625e-05, -0.10067248344421387, -1.1444026313256472e-05, -0.0014448165893554688, 0.0, -9.5367431640625e-06, -0.223114013671875, -1.9073486328125e-06, -0.06918537616729736, 0.0, -0.002735137939453125, -4.1961669921875e-05, -0.0023162364959716797, 0.0], "score": -5.517293786130956, "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = self.target.player.minions()\n        self.target.change_attack(minion)\n        target.damage(1, self)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Earth Shock"}, {"n": 1, "_type": "Num"}, {"attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "keyword", "arg": "target_func"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"attr": "use", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"_type": "Call", "func": {"attr": "minions", "value": {"attr": "player", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Assign", "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"attr": "change_attack", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"n": 1, "_type": "Num"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"attr": "damage", "value": {"_type": "Name", "id": "target"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "use"}], "name": "EarthShock"}]}, "choice_history": [50, 111, 176, 58, 90, "Earth", "Shock", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Earth", " ", "Shock", "<EOS>", 37, 117, "1", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 171, 49, 152, "target_func", "<EOS>", 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 61, 95, "use", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "player", "<EOS>", 149, "game", "<EOS>", 179, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "use", "<EOS>", 164, 35, 112, "player", "<EOS>", 35, 112, "game", "<EOS>", 55, 80, 163, 35, 112, "<UNK>", "<EOS>", 14, 86, 11, 81, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 163, 35, 112, "minion", "<EOS>", 59, 93, 14, 88, 11, 81, 19, 112, "target", "<EOS>", "damage", "<EOS>", 164, 37, 117, "1", "<EOS>", 35, 112, "self", "<EOS>"]}]}
{"gold_code": "class EyeForAnEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, character, attacker, amount):\n        if character.is_hero():\n            character.player.opponent.hero.damage(amount, self)\n        super().reveal()\n\n    def activate(self, player):\n        player.bind('character_damaged', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('character_damaged', self._reveal)\n", "beams": [{"score_history": [-7.62939453125e-06, -3.62396240234375e-05, -1.33514404296875e-05, -6.4849853515625e-05, -0.0001010894775390625, -0.0034987544640898705, -0.012170436792075634, -0.07696528732776642, -0.00018285684927832335, -4.1961669921875e-05, 0.0, -5.7220458984375e-06, -0.020764708518981934, -0.0008854830521158874, -0.0006376855308189988, -0.07191658020019531, -0.0014476776123046875, -7.2479248046875e-05, -0.07898133993148804, -0.00012826919555664062, -0.00934457778930664, -0.012452125549316406, -5.2690553275169805e-05, -0.00029015541076660156, -1.4424298569792882e-05, -1.1920928244535389e-07, -0.6669706106185913, 0.0, -5.7220458984375e-06, -1.1444091796875e-05, -0.054912567138671875, -1.9073486328125e-06, 0.0, -0.011614799499511719, -1.9073486328125e-06, -2.288818359375e-05, 0.0, 0.0, -0.31391239166259766, -1.1444091796875e-05, -7.62939453125e-06, -0.01970958709716797, -3.576278118089249e-07, -0.39688682556152344, -1.0756359100341797, -0.0001468658447265625, -0.0002079010009765625, -5.7220458984375e-06, -0.46764540672302246, -1.1920928244535389e-07, -5.7220458984375e-05, -0.000102996826171875, -0.00353240966796875, -9.5367431640625e-06, -0.0003728847950696945, 0.0, -1.33514404296875e-05, -2.288818359375e-05, -3.814697265625e-06, -0.0002282838395331055, 0.0, -0.0004215240478515625, -0.0001354217529296875, -0.5698385238647461, 0.0, -0.0055389404296875, -0.43265342712402344, -0.0007991790771484375, -0.02138996124267578, -0.000152587890625, -0.059754371643066406, -5.7220458984375e-06, -0.0002613067626953125, -9.5367431640625e-06, -0.0022127628326416016, -1.1920928244535389e-07, -3.814697265625e-06, -0.0007915496826171875, -7.62939453125e-06, -0.00048065185546875, 0.0, -0.0034732818603515625, 0.0, -0.010823726654052734, -0.00015234944294206798, -0.00157928466796875, -1.9073486328125e-06, -0.3290482759475708, 0.0, -2.47955322265625e-05, -0.00347137451171875, 0.0, -0.0002689361572265625, -4.00543212890625e-05, -0.002340674167498946, -6.711483001708984e-05, -1.0979862213134766, -0.00864410400390625, -2.09808349609375e-05, -0.0005016326904296875, -1.9073486328125e-05, -7.62939453125e-05, -0.7897551655769348, -0.0005159456050023437, -0.0010080337524414062, -0.34795188903808594, -0.12801742553710938, -0.0001392364501953125, -0.008670806884765625, -4.57763671875e-05, -0.03516946732997894, -1.7881393432617188e-05, -1.1444091796875e-05, -0.000255584716796875, -0.000293731689453125, -0.0006551742553710938, 0.0, -0.0025768280029296875, 0.0, -0.0008438825607299805, -4.005430673714727e-05, -0.001773834228515625, -1.9073486328125e-06, -0.1700958013534546, 0.0, -0.4087381362915039, 0.0, 0.0, -0.000232696533203125, -1.9073486328125e-06, 0.0, -0.011518478393554688, -7.62939453125e-06, -0.004467010498046875, 0.0, -0.19385239481925964, -1.013275596051244e-05, -0.058551788330078125, 0.0, -0.4560563564300537, -3.62396240234375e-05, -1.71661376953125e-05, -0.039809226989746094, -3.814697265625e-06, -0.7292485237121582, -1.9073486328125e-05, -6.103515625e-05, 0.0, 0.0, -0.002620697021484375, -8.20159912109375e-05, -1.33514404296875e-05, -0.014180183410644531, -1.71661376953125e-05, -0.05509757995605469, -1.9073486328125e-06, -0.06862497329711914, 0.0, -0.6419460773468018, -1.597404116182588e-05, -0.3256438970565796, -1.1920928955078125e-05, -3.62396240234375e-05, -0.007962226867675781, -3.814697265625e-06, -0.750943660736084, -5.960462772236497e-07, -0.47608280181884766, -1.52587890625e-05, -3.62396240234375e-05, -1.9073486328125e-06, -0.36144328117370605, -1.1920928244535389e-07, -0.0001163482666015625, -1.33514404296875e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0002077810640912503, 0.0, -0.0006732940673828125, -1.1444091796875e-05, -9.5367431640625e-06, -0.00017201864102389663, 0.0, -0.0017337799072265625, -7.2479248046875e-05, -0.2377314567565918, 0.0, -0.04119682312011719, -0.09968757629394531, -4.76837158203125e-05, -9.5367431640625e-06, -0.05859375, -3.24249267578125e-05, -1.52587890625e-05, -0.024886131286621094, -4.76837158203125e-05, -0.35391783714294434, -7.748602001811378e-06, -0.8747472763061523, 0.0, -0.0026712417602539062, -0.00726318359375, -0.0002918243408203125, -0.012556076049804688, 0.0, -0.7293045520782471, -0.005060035269707441, -7.62939453125e-06, -5.91278076171875e-05, -1.9073486328125e-06, -0.10127830505371094, 0.0, -0.0010585784912109375, 0.0, -0.4044843912124634, -4.208087921142578e-05, -0.031140804290771484, -6.914126061019488e-06, -0.10160983353853226, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -0.6194677352905273, -3.24249267578125e-05, 0.0, -0.0005016326904296875, -5.7220458984375e-06, -3.814697265625e-06, 0.0, 0.0, -1.52587890625e-05, -3.254413604736328e-05, -0.0004520416259765625, -0.006763458251953125, 0.0, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.023738861083984375, -1.33514404296875e-05, -0.013538360595703125, -1.9073486328125e-06, -0.00017547607421875, 0.0, -0.0003509521484375, -0.000213623046875, -0.0027343130204826593, -7.43865966796875e-05, -0.011872649192810059, -0.00020897311333101243, -0.6869081258773804, -4.1961669921875e-05, -0.0003814697265625, -3.814697265625e-05, -1.71661376953125e-05, -0.395243763923645, -1.71661376953125e-05, -0.02800750732421875, -3.4332275390625e-05, -1.0771384239196777, 0.0, -0.0001468658447265625, -5.7220458984375e-06, -0.2819852828979492, -0.00030422210693359375, -1.71661376953125e-05, -0.022688865661621094, -1.33514404296875e-05, -4.38690185546875e-05, 0.0, 0.0, -0.3666348457336426, -9.5367431640625e-06, -5.7220458984375e-06, -0.0324249267578125, -2.3841855067985307e-07, -0.082275390625, -0.0011768341064453125, -0.0013408660888671875, -0.19530582427978516, -0.00029754638671875, -0.0002346038818359375, -0.1388111114501953, -0.06102561950683594, -1.1444091796875e-05, -0.28412437438964844, 0.0, -0.31230878829956055, 0.0, -3.62396240234375e-05, -1.2247600555419922, -0.0002613067626953125, -0.01770782470703125, -5.14984130859375e-05, -1.7642974853515625e-05, -3.814697265625e-06, -0.8083877563476562, -0.10647964477539062, -0.0016231536865234375, -1.9073486328125e-06, -1.207403302192688, -3.838539123535156e-05, -0.19711875915527344, -0.00543975830078125, 0.0, -0.05041217803955078, 0.0, -0.0002117156982421875, 0.0, -0.07621502876281738, -1.823902130126953e-05, -0.0019207000732421875, -1.9073486328125e-06, -0.01350104808807373, 0.0, -5.14984130859375e-05, -0.2985191345214844, -0.00127410888671875, -0.00031280517578125, -5.7220458984375e-06, -0.3808603286743164, -1.9073486328125e-06, -0.045101165771484375, -1.1444091796875e-05, -0.000141143798828125, 0.0, -0.0037050247192382812, -1.9073486328125e-06, -0.04337036609649658, 0.0, -0.36947154998779297, -1.9073486328125e-06, -5.7220458984375e-06, -0.9495954513549805, -0.00045013427734375, -0.013829231262207031, -0.3341054916381836, -0.0005207061767578125, -1.9073486328125e-06, -0.42542362213134766, -1.9073486328125e-06, -0.25933122634887695, 0.0, -0.027716755867004395, -2.6702880859375e-05, -0.00016021728515625, -0.002010345458984375, 0.0, 0.0, -0.0002384185791015625, -3.62396240234375e-05, -3.814697265625e-06, -0.14263248443603516, -1.9073486328125e-06, -1.023963451385498, -0.0020825620740652084, -0.08881688117980957, -4.38690185546875e-05, -4.00543212890625e-05, -0.7977657318115234, -5.7220458984375e-05, -0.0011138916015625, 0.0, -0.0001316070556640625, 0.0, -0.09684193134307861, -0.0009130239486694336, -0.649878978729248, -3.9338436181424186e-05, -0.0001277923583984375, -0.11885356903076172, -9.34600830078125e-05, -0.4312972128391266, -0.00020454221521504223, -0.02806854248046875, -1.33514404296875e-05, -0.0018924474716186523, -1.9073486328125e-06], "score": -29.943283415787562, "inferred_code": "class Eye<UNK>Eye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        for c in range(0, 3):\n            if len(self.player.minions) < 7:\n                new_card = type(self.player.minions)()\n                self.target.change_attack(4)\n                player.hand.append(self)\n        for i in range(0, 3):\n            player.<UNK>(len(game.other_player.minions))\n\n    def deactivate(self, player):\n        player.game.current_player.bind('<UNK>', self)\n\n    def _reveal(self, attacker, target):\n        if target is not Null and self(self.player.minions):\n            if self.target.health != character.calculate_max_health():\n                new_card.damage(player.effective_spell_damage(new_card), self)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SecretCard"}], "_type": "ClassDef", "body": [{"hole2": "PALADIN", "_type": "Template1", "hole1": 1, "hole0": "Eye for Eye"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "target"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"_type": "For", "target": {"_type": "Name", "id": "c"}, "body": [{"_type": "If", "body": [{"value": {"_type": "Call", "func": {"args": [{"attr": "minions", "value": {"attr": "player", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call", "func": {"_type": "Name", "id": "type"}}}, "_type": "Assign", "targets": [{"_type": "Name", "id": "new_card"}]}, {"value": {"args": [{"n": 4, "_type": "Num"}], "_type": "Call", "func": {"attr": "change_attack", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"_type": "Name", "id": "self"}], "_type": "Call", "func": {"attr": "append", "value": {"attr": "hand", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}], "test": {"left": {"args": [{"attr": "minions", "value": {"attr": "player", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "_type": "Compare", "comparators": [{"n": 7, "_type": "Num"}], "ops": [{"_type": "Lt"}]}}], "iter": {"args": [{"n": 0, "_type": "Num"}, {"n": 3, "_type": "Num"}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"value": {"args": [{"args": [{"attr": "minions", "value": {"attr": "other_player", "value": {"_type": "Name", "id": "game"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Call", "func": {"attr": "<UNK>", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}}, "_type": "Expr"}], "iter": {"args": [{"n": 0, "_type": "Num"}, {"n": 3, "_type": "Num"}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}}], "name": "_reveal"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"attr": "bind", "value": {"attr": "current_player", "value": {"attr": "game", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "deactivate"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "target"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"_type": "If", "body": [{"_type": "If", "body": [{"value": {"args": [{"args": [{"_type": "Name", "id": "new_card"}], "_type": "Call", "func": {"attr": "effective_spell_damage", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"attr": "damage", "value": {"_type": "Name", "id": "new_card"}, "_type": "Attribute"}}, "_type": "Expr"}], "test": {"left": {"attr": "health", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Compare", "comparators": [{"_type": "Call", "func": {"attr": "calculate_max_health", "value": {"_type": "Name", "id": "character"}, "_type": "Attribute"}}], "ops": [{"_type": "NotEq"}]}}], "test": {"values": [{"left": {"_type": "Name", "id": "target"}, "_type": "Compare", "comparators": [{"value": "Null", "_type": "NameConstant"}], "ops": [{"_type": "IsNot"}]}, {"args": [{"attr": "minions", "value": {"attr": "player", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call", "func": {"_type": "Name", "id": "self"}}], "_type": "BoolOp", "op": {"_type": "And"}}}], "name": "_reveal"}], "name": "Eye<UNK>Eye"}]}, "choice_history": [50, 111, 176, 58, 90, "Eye", "<UNK>", "Eye", "<EOS>", 163, 35, 112, "Secret", "Card", "<EOS>", 179, 66, 126, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 61, 95, "_reveal", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "attacker", "<EOS>", 149, "target", "<EOS>", 177, 60, 94, 19, 112, "c", "<EOS>", 14, 88, 19, 112, "range", "<EOS>", 164, 37, 117, "0", "<EOS>", 37, 117, "3", "<EOS>", 176, 62, 98, 15, 91, 14, 88, 19, 112, "len", "<EOS>", 163, 27, 81, 11, 81, 19, 112, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 160, 8, 163, 37, 117, "7", "<EOS>", 178, 55, 80, 163, 35, 112, "new_card", "<EOS>", 14, 86, 14, 88, 19, 112, "type", "<EOS>", 163, 27, 81, 11, 81, 19, 112, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 163, 37, 117, "4", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "player", "<EOS>", "hand", "<EOS>", "append", "<EOS>", 163, 35, 112, "self", "<EOS>", 60, 94, 19, 112, "i", "<EOS>", 14, 88, 19, 112, "range", "<EOS>", 164, 37, 117, "0", "<EOS>", 37, 117, "3", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 19, 112, "player", "<EOS>", "<UNK>", "<EOS>", 163, 30, 88, 19, 112, "len", "<EOS>", 163, 27, 81, 11, 81, 19, 112, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 61, 95, "deactivate", "<EOS>", 150, 157, 149, "self", "<EOS>", 149, "player", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 11, 81, 11, 81, 19, 112, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 164, 38, 121, "<UNK>", "<EOS>", 35, 112, "self", "<EOS>", 61, 95, "_reveal", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "attacker", "<EOS>", 149, "target", "<EOS>", 176, 62, 98, 13, 84, 0, 164, 31, 91, 19, 112, "target", "<EOS>", 160, 7, 163, 36, 114, "Null", "<EOS>", 30, 88, 19, 112, "self", "<EOS>", 163, 27, 81, 11, 81, 19, 112, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 176, 62, 98, 15, 91, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 160, 10, 163, 30, 86, 11, 81, 19, 112, "character", "<EOS>", "calculate_max_health", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 19, 112, "new_card", "<EOS>", "damage", "<EOS>", 164, 30, 88, 11, 81, 19, 112, "player", "<EOS>", "effective_spell_damage", "<EOS>", 163, 35, 112, "new_card", "<EOS>", 35, 112, "self", "<EOS>"]}]}
{"gold_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in hearthbreaker.targeting.find_minion_spell_target(game,\n            lambda m: m.stealth):\n            minion.stealth = False\n        for secret in game.other_player.secrets:\n            secret.deactivate(game.other_player)\n        game.other_player.secrets = []\n        player.draw()\n", "beams": [{"score_history": [0.0, -5.7220458984375e-06, -1.9073486328125e-06, -4.38690185546875e-05, 0.0, -5.733966827392578e-05, -3.254372131777927e-05, -3.814697265625e-06, 0.0, 0.0, -1.7762111383490264e-05, -0.000905394263099879, -2.145764938177308e-06, -0.000370025634765625, -0.0002765655517578125, -0.0005474090576171875, -1.1920928244535389e-07, -7.17634247848764e-05, -7.152555099310121e-07, 0.0, -1.2730271816253662, 0.0, -0.000171661376953125, -1.33514404296875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.24249267578125e-05, -1.33514404296875e-05, -1.9073457224294543e-05, -3.933906555175781e-06, 0.0, -2.503394853192731e-06, -1.1801719665527344e-05, 0.0, -9.155264706350863e-05, -2.2649765014648438e-06, -0.05829811096191406, -7.05718994140625e-05, 0.0, -5.7220458984375e-06, -7.43865966796875e-05, -1.9073486328125e-06, 0.0, -3.814697265625e-05, 0.0, -4.649158654501662e-06, -1.1563301086425781e-05, -1.9073486328125e-05, 0.0, -5.53131103515625e-05, -1.9073486328125e-06, 0.0, -5.841255187988281e-06, 0.0, 0.0, -3.814697265625e-05, -2.121924626408145e-05, -4.6133995056152344e-05, -0.20660877227783203, -0.0007495880126953125, -0.000186920166015625, -0.0025043487548828125, -3.814697265625e-06, -7.62939453125e-06, -0.001087188720703125, -3.814697265625e-06, -0.019989967346191406, 0.0, -0.08793079853057861, -1.1920928244535389e-07, -4.1961669921875e-05, 0.0, -0.5204548835754395, -1.9073486328125e-06, -1.9073486328125e-06, -0.0011873245239257812, 0.0, -0.0013886690139770508, -2.3841855067985307e-07, -0.3917226791381836, -1.9073486328125e-06, -3.814697265625e-06, -0.45574188232421875, -7.62939453125e-06, -3.0517578125e-05, -0.0077648162841796875, -4.00543212890625e-05, -0.010967254638671875, -1.9073486328125e-06, -0.017821548506617546, -1.1920928244535389e-07, -0.0028441990725696087, -5.876845170860179e-05, -0.8398345708847046, -1.52587890625e-05, -4.38690185546875e-05, -0.9518957138061523, -0.0004596710205078125, -0.6831170320510864, -0.007484096102416515, -1.9073486328125e-06, -0.0005130767822265625, -0.0009101629257202148, -1.3470558769768104e-05], "score": -5.547881838830058, "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        player.hero.damage(player.effective_spell_damage(0), self)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"hole2": "WARLOCK", "_type": "Template2", "hole1": 2, "hole0": "Flare"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"attr": "use", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"_type": "Name", "id": "self"}], "_type": "Call", "func": {"attr": "die", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"_type": "Template13", "hole0": 0}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"attr": "damage", "value": {"attr": "hero", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "use"}], "name": "Flare"}]}, "choice_history": [50, 111, 176, 58, 90, "Flare", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 69, 137, "Flare", "<EOS>", "2", "<EOS>", "WARLOCK", "<EOS>", 61, 95, "use", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "player", "<EOS>", 149, "game", "<EOS>", 178, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "use", "<EOS>", 164, 35, 112, "player", "<EOS>", 35, 112, "game", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 163, 35, 112, "self", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 164, 42, 130, "Stealth", "<EOS>", 35, 112, "self", "<EOS>"]}]}
{"gold_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(),\n            TargetIsMinion())), [ActionTag(IncreaseDurability(),\n            WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1),\n            WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1),\n            AttackCompleted())), HeroSelector())])])\n", "beams": [{"score_history": [0.0, -3.814697265625e-06, 0.0, -1.52587890625e-05, 0.0, -7.510157047363464e-06, -0.001955644693225622, 0.0, 0.0, 0.0, -0.0003632964217104018, -0.00017380714416503906, -1.1920928244535389e-07, -1.33514404296875e-05, -0.001434326171875, -1.1444091796875e-05, -4.0531158447265625e-06, 0.0, 0.0, -1.52587890625e-05, -3.814697265625e-06, -0.00030517578125, -9.5367431640625e-06, -7.62939453125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -2.288818359375e-05, -0.002593994140625, -1.9073486328125e-06, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -3.266334533691406e-05, -1.9073486328125e-06, 0.0, -6.103515625e-05, 0.0, -7.62939453125e-06, -3.933906555175781e-06, -0.014087796211242676, -9.5367431640625e-06, -1.9073486328125e-06, -0.13516223430633545, -2.384185791015625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.00011372566223144531, -1.0132789611816406e-05, -0.34636402130126953, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -4.017353057861328e-05, -1.9073486328125e-06, -0.011816024780273438, -9.5367431640625e-06, -0.16440105438232422, -1.71661376953125e-05, -3.814697265625e-06, -0.26845598220825195, -1.9073486328125e-06, -0.00019073486328125, 0.0, -0.01439666748046875, 0.0, 0.0, 0.0, -0.0001316070556640625, -1.33514404296875e-05, -0.0001983642578125, -7.462501525878906e-05, -0.018030166625976562, 0.0, -0.09757328033447266, -0.0003452301025390625, -2.86102294921875e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -9.72747802734375e-05, -1.9073486328125e-06, -9.918212890625e-05, 0.0, -0.27351272106170654, 0.0, -2.09808349609375e-05, -0.5037059783935547, -0.0005340576171875, -0.03451285511255264, 0.0, -0.0002155303955078125, -0.000720977783203125, -2.09808349609375e-05, 0.0], "score": -1.8920831084551466, "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "WeaponCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Gorehowl"}, {"n": 1, "_type": "Num"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "EPIC", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "keyword", "arg": "target_func"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"hole2": [{"_type": "Template13", "hole0": 1}, {"_type": "Name", "id": "self"}], "_type": "Template0", "hole1": "damage", "hole0": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}}], "name": "Gorehowl"}]}, "choice_history": [50, 111, 176, 58, 90, "Gorehowl", "<EOS>", 163, 35, 112, "Weapon", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Gorehowl", "<EOS>", 37, 117, "1", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 171, 49, 152, "target_func", "<EOS>", 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 65, 125, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 164, 42, 130, "1", "<EOS>", 35, 112, "self", "<EOS>"]}]}
{"gold_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "beams": [{"score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -6.556489552167477e-06, -1.2636180144909304e-05, -1.9073486328125e-05, 0.0, -1.9073486328125e-06, -2.3832544684410095e-06, -6.282154936343431e-05, 0.0, -0.000110626220703125, -2.09808349609375e-05, -2.86102294921875e-05, -8.2254373410251e-06, -3.576278118089249e-07, -1.52587890625e-05, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -0.22546863555908203, -1.9073486328125e-05, -1.9073486328125e-06, -1.52587890625e-05, -9.5367431640625e-06, -1.621246337890625e-05, -3.4570680327306036e-06, -3.933906555175781e-06, 0.0, -0.1575002670288086, -0.0001735687255859375, -0.00030517578125, -1.2755393072438892e-05, -3.814697265625e-06, -0.00095367431640625, -5.7220458984375e-06, -0.0017047578003257513, 0.0, -0.0001850128173828125, -6.866455078125e-05, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.2649765014648438e-06, -0.38882148265838623, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, -8.58306884765625e-05, -0.4999504089355469, 0.0, -0.0001125335693359375, -1.9073486328125e-06, -9.775161743164062e-05, -3.814697265625e-06, -0.0027618408203125, 0.0, -8.20159912109375e-05, 0.0, -0.001041412353515625, 0.0, -0.0010585784912109375, 0.0, -0.011684417724609375, -5.91278076171875e-05, -0.00022327899932861328, -1.9073486328125e-06, 0.0, -0.00019073486328125, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -0.0035142898559570312, -7.867813110351562e-06, -1.1444091796875e-05, -0.021117210388183594, -0.000415802001953125, -0.015533528290688992, -1.0728830375228426e-06, -0.004332558251917362, 0.0], "score": -1.3380217951165037, "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(1, 1)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Hound"}, {"n": 1, "_type": "Num"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}, {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Call", "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"_type": "Template14", "hole1": 1, "hole0": 1}], "name": "create_minion"}], "name": "Hound"}]}, "choice_history": [50, 111, 176, 58, 90, "Hound", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 168, 38, 121, "Hound", "<EOS>", 37, 117, "1", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 36, 113, "False", "<EOS>", 27, 81, 19, 112, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 61, 95, "create_minion", "<EOS>", 150, 157, 149, "self", "<EOS>", 149, "p", "<EOS>", 176, 68, 131, "1", "<EOS>", "1", "<EOS>"]}]}
{"gold_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "beams": [{"score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -0.0002150308428099379, -1.6689160474925302e-05, -8.583047019783407e-06, -7.62939453125e-06, 0.0, 0.0, 0.0, -6.759075040463358e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -3.814697265625e-06, -1.1444091796875e-05, -4.6372402721317485e-05, 0.0, -4.76837158203125e-05, -3.814697265625e-06, 0.0, -4.00543212890625e-05, -2.2649765014648438e-06, -4.00543212890625e-05, -0.005657196044921875, -4.1961669921875e-05, -2.52720492426306e-05, -4.398822784423828e-05, -1.9073486328125e-06, 0.0, -6.699562072753906e-05, 0.0, -0.008642196655273438, 0.0, -0.0020296573638916016, 0.0, -0.000209808349609375, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.00022149085998535156, 0.0, -0.0002498626708984375, -0.0001659393310546875, -2.6702880859375e-05, -0.20001910626888275, -0.00011742114293156192, -0.0001049041748046875, -0.021993637084960938, -3.0517578125e-05, 0.0, -0.009556770324707031, -2.09808349609375e-05, -1.1920928244535389e-07, -0.0008029937744140625, -0.4801626205444336, -6.4849853515625e-05, -7.104873657226562e-05, -8.392333984375e-05, -0.0004425048828125, 0.0, -0.009077072143554688, -0.0003396272659301758, 0.0, -0.0017223358154296875, 0.0, -0.06527960300445557, -0.00018893925880547613, -2.1457672119140625e-06, -0.0004787445068359375, -1.33514404296875e-05, -1.117953797802329e-05, -7.152555099310121e-07, -0.02210545539855957, -1.9073468138230965e-06], "score": -0.8306323755602847, "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Null, EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"hole4": {"args": [{"_type": "Template17", "hole0": 4}, {"args": [{"value": "Null", "_type": "NameConstant"}, {"_type": "Template18", "hole0": "EnemyPlayer"}, {"_type": "Template18", "hole0": "RandomPicker"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole2": "RARE", "_type": "Template6", "hole0": "Injured Blademaster", "hole3": "battlecry", "hole1": 3}], "name": "__init__"}, {"_type": "Template5", "hole1": 7, "hole0": 4}], "name": "InjuredBlademaster"}]}, "choice_history": [50, 111, 176, 58, 90, "Injured", "Blademaster", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 73, 141, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 164, 45, 134, "4", "<EOS>", 30, 88, 19, 112, "Minion", "Selector", "<EOS>", 165, 36, 114, "Null", "<EOS>", 46, 135, "Enemy", "Player", "<EOS>", 46, 135, "Random", "Picker", "<EOS>", 72, 140, "4", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(\n            1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=None)))])\n", "beams": [{"score_history": [-3.814697265625e-06, -1.9073486328125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.876845170860179e-05, -6.318072337307967e-06, -1.2397711543599144e-05, -7.62939453125e-06, 0.0, 0.0, -2.145592588931322e-06, -4.06503640988376e-05, -2.741813204920618e-06, -1.52587890625e-05, -0.00045013427734375, -0.0002288818359375, -0.00022516099852509797, -5.9723854064941406e-05, -9.536738616588991e-07, 0.0, -0.00012469290231820196, 0.0, -0.0003648996353149414, 0.0, -0.006350517272949219, -1.1444091796875e-05, -1.919269561767578e-05, -1.1920928244535389e-07, -0.0007092807209119201, 0.0, -4.112720489501953e-05, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.0012950897216796875, -1.71661376953125e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -8.392333984375e-05, 0.0, -0.0001220703125, -0.066070556640625, -0.0004444122314453125, -6.4849853515625e-05, -2.86102294921875e-05, -0.08073663711547852, -0.6954128742218018, -1.5497207641601562e-05, -0.000125885009765625, -0.0030050277709960938, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.012133955955505371, -0.0005652904510498047, -0.00011157989501953125, -0.022714614868164062, -1.1444091796875e-05, 0.0, -0.0007162094116210938, -1.9073486328125e-06, -0.0001678466796875, -2.09808349609375e-05, -0.6115207672119141, -2.09808349609375e-05, -0.0002574920654296875, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -7.43865966796875e-05, -1.9073486328125e-05, 0.0, -0.000682830810546875, -6.67572021484375e-05, -0.00026702880859375, -2.983585000038147e-05, -7.545663538621739e-05, -1.9073486328125e-05, -0.03895378112792969, -2.09808349609375e-05, 0.0, -0.19810056686401367, -0.033153414726257324, -4.0531158447265625e-06, -0.0005397796630859375, -0.3077077865600586, -0.000102996826171875, -0.00020611286163330078, -1.9073486328125e-06, -0.0023555755615234375, 0.0, -0.001065373420715332, -2.5272369384765625e-05, 0.0, -0.046568870544433594, 0.0, -0.0004289149946998805, -0.0011479835957288742, -2.3841855067985307e-07], "score": -2.1360958683553335, "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionSummoned(IsType(\n            MINION_TYPE.PIRATE)), ActionTag(Damage(1), MinionSelector(Null,\n            EnemyPlayer(), RandomPicker())))])\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"hole2": "ALL", "_type": "Template2", "hole1": 2, "hole0": "Knife Juggler"}, {"hole2": "effects", "_type": "Template4", "hole1": 2, "hole0": 3, "hole3": {"elts": [{"args": [{"args": [{"args": [{"attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSummoned"}}, {"args": [{"_type": "Template17", "hole0": 1}, {"args": [{"value": "Null", "_type": "NameConstant"}, {"_type": "Template18", "hole0": "EnemyPlayer"}, {"_type": "Template18", "hole0": "RandomPicker"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}], "_type": "List"}}], "name": "KnifeJuggler"}]}, "choice_history": [50, 111, 176, 58, 90, "Knife", "Juggler", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 69, 137, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 71, 139, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 17, 107, 163, 30, 88, 19, 112, "Effect", "<EOS>", 164, 30, 88, 19, 112, "Minion", "Summoned", "<EOS>", 163, 30, 88, 19, 112, "Is", "Type", "<EOS>", 163, 27, 81, 19, 112, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 30, 88, 19, 112, "Action", "Tag", "<EOS>", 164, 45, 134, "1", "<EOS>", 30, 88, 19, 112, "Minion", "Selector", "<EOS>", 165, 36, 114, "Null", "<EOS>", 46, 135, "Enemy", "Player", "<EOS>", 46, 135, "Random", "Picker", "<EOS>"]}]}
{"gold_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(condition=IsDamaged(), picker=RandomPicker\n            ())))])\n", "beams": [{"score_history": [-3.814697265625e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, 0.0, -0.0006128423265181482, -0.027389761060476303, -1.9073486328125e-06, 0.0, 0.0, -3.933790139853954e-06, -3.933906555175781e-06, 0.0, -1.9073486328125e-06, -0.0017070770263671875, -5.7220458984375e-05, -1.871574750111904e-05, -0.0020263195037841797, -0.03357827663421631, 0.0, -0.2668919563293457, -7.62939453125e-06, -0.11587142944335938, -0.00055694580078125, -2.7418097943154862e-06, -9.536738616588991e-07, -5.006789251638111e-06, 0.0, -0.02254021167755127, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0071258544921875, -5.53131103515625e-05, -1.71661376953125e-05, -1.1444091796875e-05, 0.0, -0.00033795833587646484, 0.0, -8.58306884765625e-05, -0.000102996826171875, -1.9073486328125e-06, -0.000215172374737449, -0.27772092819213867, 0.0, -1.33514404296875e-05, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-05, -3.099441164522432e-05, -8.392333984375e-05, 0.0, -0.000339508056640625, -0.01584911346435547, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.36689436435699463, -0.0006374117219820619, -1.1444091796875e-05, -0.6457109451293945, -0.0002536773681640625, -0.005734391510486603, -3.4689903259277344e-05, -0.048431396484375, -0.16333484649658203, -0.0002899169921875, 0.0, -2.491474151611328e-05, -0.0001583099365234375, 0.0, -0.41994571685791016, 0.0, -1.9073486328125e-06, -0.0035572052001953125, 0.0, -0.010578155517578125, -7.05718994140625e-05, -2.6702880859375e-05, 0.0, -0.000270843505859375, -4.57763671875e-05, -0.21199607849121094, -1.9073486328125e-06, -0.0001678466796875, 0.0, -0.00025010108947753906, -7.748603820800781e-06, -1.9073486328125e-06], "score": -2.651798655639368, "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Give(\n            ChangeAttack(1)), MinionSelector(condition=Null, players=\n            BothPlayer())))])\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"hole2": "PRIEST", "_type": "Template2", "hole1": 2, "hole0": "Lightwell"}, {"hole2": "effects", "_type": "Template4", "hole1": 5, "hole0": 0, "hole3": {"elts": [{"args": [{"_type": "Template18", "hole0": "TurnStarted"}, {"args": [{"args": [{"_type": "Template15", "hole0": 1}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"_type": "Call", "keywords": [{"value": {"value": "Null", "_type": "NameConstant"}, "_type": "keyword", "arg": "condition"}, {"value": {"_type": "Template18", "hole0": "BothPlayer"}, "_type": "keyword", "arg": "players"}], "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}], "_type": "List"}}], "name": "Lightwell"}]}, "choice_history": [50, 111, 176, 58, 90, "Lightwell", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 69, 137, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 71, 139, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 17, 107, 163, 30, 88, 19, 112, "Effect", "<EOS>", 164, 46, 135, "Turn", "Started", "<EOS>", 30, 88, 19, 112, "Action", "Tag", "<EOS>", 164, 30, 88, 19, 112, "Give", "<EOS>", 163, 43, 132, "1", "<EOS>", 30, 87, 19, 112, "Minion", "Selector", "<EOS>", 172, 49, 152, "condition", "<EOS>", 20, 114, "Null", "<EOS>", 49, 152, "players", "<EOS>", 23, 135, "Both", "Player", "<EOS>"]}]}
{"gold_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n", "beams": [{"score_history": [-1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -4.291525328881107e-06, -6.079655122448457e-06, -8.344646857949556e-07, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -5.839770892634988e-06, -2.7894804588868283e-05, -2.2649765014648438e-06, -3.24249267578125e-05, -0.0001983642578125, -3.814697265625e-06, -1.07287787614041e-05, -0.00015282629465218633, -5.483625955093885e-06, -1.9073486328125e-06, -1.7629936337471008e-05, -1.1920928244535389e-07, -0.642731785774231, 0.0, -0.0001735687255859375, -9.5367431640625e-06, -1.4305101103673223e-06, -1.1920922133867862e-06, -1.1444039046182297e-05, -7.152555099310121e-07, -9.85860824584961e-05, 0.0, -1.71661376953125e-05, -7.62939453125e-06, -0.07249832153320312, -7.2479248046875e-05, -0.00011444091796875, -9.5367431640625e-06, 0.0, -5.9127800341229886e-05, -2.2649765014648438e-06, -0.000308990478515625, -0.0002346038818359375, -0.027631759643554688, -3.0517578125e-05, -3.0517578125e-05, -0.008203982375562191, -0.5802092552185059, -3.24249267578125e-05, -9.918212890625e-05, -0.06662654876708984, -2.288818359375e-05, -5.7220458984375e-06, -1.1444091796875e-05, -0.04164242744445801, -0.0005391835584305227, -0.0007256269454956055, -4.38690185546875e-05, -0.0052051544189453125, 0.0, -8.392333984375e-05, 0.0, -0.0012798309326171875, 0.0, -0.07726097106933594, -4.57763671875e-05, -9.5367431640625e-05, -0.000385284423828125, -1.52587890625e-05, -1.9073486328125e-06, -0.0006003379239700735, -8.034706115722656e-05, 0.0, -0.0003910064697265625, -8.7738037109375e-05, -1.1444091796875e-05, -0.000274658203125, -1.9073486328125e-06, -0.00030779794906266034, -4.053113570989808e-06, -6.866455078125e-05, -0.001140594482421875, -0.0003070831298828125, -8.964537846622989e-05, -3.814697265625e-06, -2.09808349609375e-05, 0.0, -0.0006444045575335622, -9.0000219643116e-05, 0.0], "score": -1.5312052365112478, "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionDied(IsType(MINION_TYPE.\n            BEAST)), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"hole2": "ALL", "_type": "Template1", "hole1": 1, "hole0": "Mana Wyrm"}, {"hole2": "effects", "_type": "Template4", "hole1": 3, "hole0": 1, "hole3": {"elts": [{"args": [{"args": [{"args": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionDied"}}, {"args": [{"args": [{"_type": "Template15", "hole0": 1}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"_type": "Template18", "hole0": "SelfSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}], "_type": "List"}}], "name": "ManaWyrm"}]}, "choice_history": [50, 111, 176, 58, 90, "Mana", "Wyrm", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 66, 126, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 71, 139, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 17, 107, 163, 30, 88, 19, 112, "Effect", "<EOS>", 164, 30, 88, 19, 112, "Minion", "Died", "<EOS>", 163, 30, 88, 19, 112, "Is", "Type", "<EOS>", 163, 27, 81, 19, 112, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 30, 88, 19, 112, "Action", "Tag", "<EOS>", 164, 30, 88, 19, 112, "Give", "<EOS>", 163, 43, 132, "1", "<EOS>", 46, 135, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class MogushanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "beams": [{"score_history": [-9.5367431640625e-06, -3.24249267578125e-05, -3.4332275390625e-05, -3.0517578125e-05, -7.62939453125e-06, -0.0013858010061085224, -0.00030751267331652343, -5.960462772236497e-07, -5.7220458984375e-06, 0.0, 0.0, 0.0, -1.2755393072438892e-05, -2.9802317840221804e-06, -1.71661376953125e-05, -0.0015850067138671875, -3.0517578125e-05, -3.075552376685664e-05, -1.990795135498047e-05, -7.152555099310121e-07, -1.9073486328125e-06, -5.7578086853027344e-05, -2.3841855067985307e-07, -0.0004315366386435926, 0.0, -0.0036792755126953125, -9.5367431640625e-06, -2.765655517578125e-05, -8.344646857949556e-07, -2.491467421350535e-05, -8.344646857949556e-07, -0.0042667388916015625, 0.0, -5.91278076171875e-05, -2.288818359375e-05, -8.96453857421875e-05, -5.7220458984375e-06], "score": -0.012192312696498675, "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"hole2": "ALL", "_type": "Template1", "hole1": 4, "hole0": "Mogu'shan Warden"}, {"hole2": "taunt", "_type": "Template4", "hole1": 7, "hole0": 1, "hole3": {"value": true, "_type": "NameConstant"}}], "name": "Mogu'shanWarden"}]}, "choice_history": [50, 111, 176, 58, 90, "Mogu'shan", "Warden", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 66, 126, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", 71, 139, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 20, 113, "True", "<EOS>"]}]}
{"gold_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class Gain2(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Gain 2 mana crystals', 0, CHARACTER_CLASS\n                    .DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                if player.max_mana < 8:\n                    player.max_mana += 2\n                    player.mana += 2\n                else:\n                    player.max_mana = 10\n                    player.mana += 2\n\n\n        class Draw3(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Draw three cards', 0, CHARACTER_CLASS.\n                    DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                player.draw()\n                player.draw()\n                player.draw()\n        option = player.agent.choose_option([Gain2(), Draw3()], player)\n        option.use(player, game)\n", "beams": [{"score_history": [-1.33514404296875e-05, -7.62939453125e-06, -3.814697265625e-06, -5.53131103515625e-05, -1.9073486328125e-06, -3.302078039268963e-05, -0.00011205107875866815, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -5.244772182777524e-06, -0.00021445749734994024, -1.4305104514278355e-06, -0.0015964508056640625, -0.04180908203125, -3.814697265625e-06, -4.3272972106933594e-05, 0.0, 0.0, -1.9073486328125e-06, -2.288818359375e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.0001239776611328125, -4.38690185546875e-05, -2.09808349609375e-05, -4.9591064453125e-05, -0.000186920166015625, -6.866455078125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -7.867813110351562e-06, -3.5643577575683594e-05, -1.1444091796875e-05, 0.0, -1.33514404296875e-05, -7.62939453125e-06, -0.0001049041748046875, -0.0002735827583819628, -0.30390501022338867, -0.0001392364501953125, 0.0, -1.1444026313256472e-05, 0.0, 0.0, 0.0, -3.814697265625e-05, 0.0, -9.894371032714844e-06, -5.960462772236497e-07, -0.00023209898790810257, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.06849837303161621, -9.5367431640625e-06, -3.0517578125e-05, -7.62939453125e-06, -3.0517578125e-05, -0.10284054279327393, -1.52587890625e-05, -0.0002460479736328125, -1.1444091796875e-05, -2.09808349609375e-05, 0.0, -3.814697265625e-06, 0.0, -7.62939453125e-06, -2.288818359375e-05, -0.0020753145217895508, -0.0004215240478515625, -0.01267903670668602, 0.0, -2.47955322265625e-05, -9.1552734375e-05, -0.0001392364501953125, 0.0, -1.1444091796875e-05, -6.29425048828125e-05, -2.86102294921875e-05, -8.857250213623047e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.537799835205078e-05, -5.841255187988281e-06, -7.62939453125e-06, -0.0007314663962461054, -2.3841855067985307e-07, -0.051695823669433594, -0.0001220703125, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.14984130859375e-05, -5.7220458984375e-06, -0.000244140625, 0.0, -4.41074053014745e-06, -2.2649765014648438e-06, -0.0002307891845703125, 0.0, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, -2.47955322265625e-05, -7.200230174930766e-05, 0.0, -0.009530067443847656, -0.000110626220703125, -0.0003566741943359375, -2.86102294921875e-05, -0.4147982597351074, -2.384185791015625e-06, -7.62939453125e-06, -0.0024747848510742188, -0.000675201416015625, -7.62939453125e-06, -0.0002442598051857203, -3.814697265625e-06, -0.0007915496826171875, -7.62939453125e-06, 0.0, -0.00035795444273389876, -1.1444091796875e-05, -0.0003070831298828125, -1.9073486328125e-06, -0.28215140104293823, -1.9073486328125e-06, -0.01586627960205078, -4.00543212890625e-05, -1.9073486328125e-06, -1.1444091796875e-05, -0.003032684326171875, -0.00392913818359375, -0.8312599658966064, -7.987022399902344e-06, -0.7991600036621094, -0.16440677642822266, -0.00012969970703125, 0.0, -0.02426624298095703, 0.0, -0.5816316604614258, 0.0, -0.03832244873046875, -7.62939453125e-06, -0.006300926208496094, -0.00043487548828125, -0.6601191759109497, -0.00023374991724267602, -0.9226430058479309, -0.049339402467012405, -1.4856168031692505, -0.03982138633728027, -0.2588825225830078, -0.004962921142578125, -1.9073486328125e-05, -0.4951038360595703, -5.53131103515625e-05, -1.662645697593689, -2.0265579223632812e-06, -0.03710174560546875, 0.0, -0.16722488403320312, -7.62939453125e-06, -0.09576702117919922, -1.52587890625e-05, -0.19829657673835754, -1.07287787614041e-05], "score": -9.848483216366873, "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 5):\n            <UNK> = hearthbreaker.powers.Mind.choose_option()\n            player = player.hero\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Nourish"}, {"n": 5, "_type": "Num"}, {"attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "RARE", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "keyword", "arg": "target_func"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"attr": "use", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"value": {"_type": "Call", "func": {"attr": "choose_option", "value": {"attr": "Mind", "value": {"attr": "powers", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Assign", "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"value": {"attr": "hero", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}, "_type": "Assign", "targets": [{"_type": "Name", "id": "player"}]}], "iter": {"args": [{"n": 0, "_type": "Num"}, {"n": 5, "_type": "Num"}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}}], "name": "use"}], "name": "Nourish"}]}, "choice_history": [50, 111, 176, 58, 90, "Nourish", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Nourish", "<EOS>", 37, 117, "5", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 171, 49, 152, "target_func", "<EOS>", 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 61, 95, "use", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "player", "<EOS>", 149, "game", "<EOS>", 177, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "use", "<EOS>", 164, 35, 112, "player", "<EOS>", 35, 112, "game", "<EOS>", 60, 94, 19, 112, "i", "<EOS>", 14, 88, 19, 112, "range", "<EOS>", 164, 37, 117, "0", "<EOS>", 37, 117, "5", "<EOS>", 177, 55, 80, 163, 35, 112, "<UNK>", "<EOS>", 14, 86, 11, 81, 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "powers", "<EOS>", "Mind", "<EOS>", "choose_option", "<EOS>", 55, 80, 163, 35, 112, "player", "<EOS>", 11, 81, 19, 112, "player", "<EOS>", "hero", "<EOS>"]}]}
{"gold_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsSpell()), SpellCast()))\n", "beams": [{"score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -0.023167584091424942, -0.0001935846812557429, -3.0517578125e-05, 0.0, -1.9073486328125e-06, -5.923211574554443e-07, -0.0005146260373294353, -2.3841855067985307e-07, -1.33514404296875e-05, -0.24598407745361328, -9.5367431640625e-06, -8.976458775578067e-05, 0.0, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -3.62396240234375e-05, 0.0, -0.001171112060546875, -0.000110626220703125, -1.9073486328125e-06, -7.62939453125e-06, -0.0004558563232421875, -5.7220458984375e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.814697265625e-06, -2.872943878173828e-05, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.05718994140625e-05, -2.3841830625315197e-06, -0.0009279251098632812, -3.814697265625e-06, -3.814697265625e-06, -3.814689989667386e-06, -2.86102294921875e-05, -1.9073486328125e-05, -3.0517578125e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.0001125335693359375, -4.982941391062923e-05, -0.8377573490142822, -5.91278076171875e-05, -7.62939453125e-06, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -9.72747802734375e-05, -0.00200653076171875, -0.000286102294921875, -0.000701904296875, -9.72747802734375e-05, -0.0004119873046875, -0.0011246204376220703, -2.0265579223632812e-06, -0.0002307891845703125, 0.0, -2.09808349609375e-05, 0.0, -3.814697265625e-06, 0.0, -2.09808349609375e-05, -7.62939453125e-06, -0.0003299713134765625, -1.9073486328125e-06, -0.11993324756622314, 0.0, -0.5828037261962891, -1.1444091796875e-05, -7.62939453125e-05, 0.0, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -3.266334533691406e-05, -1.1920928244535389e-07, 0.0, -6.103515625e-05, -2.288818359375e-05, -5.7220458984375e-06, -0.0016297101974487305, -5.8412379075889476e-06, -0.023906707763671875, -8.96453857421875e-05, 0.0, -9.5367431640625e-06, -0.001071929931640625, -7.62939453125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.110004425048828e-05, -5.841255187988281e-06, -0.000102996826171875, 0.0, -2.288818359375e-05, -3.814697265625e-06, -3.814697265625e-06, -5.841255187988281e-06, -1.52587890625e-05, 0.0, -1.33514404296875e-05, -1.5854835510253906e-05, -1.9073486328125e-06, -0.23845481872558594, -0.0020389556884765625, -5.7220458984375e-06, -1.71661376953125e-05, -7.62939453125e-06, -0.9353369474411011, 0.0, -0.04262733459472656, -0.14165115356445312, -6.67572021484375e-05, 0.0, -0.003349660662934184, -0.006480216979980469, -9.179114385915454e-06, -0.0002384185791015625, -0.0015010833740234375, -0.0002288818359375, -0.09056687355041504, -0.0002547178009990603, -0.01801013946533203, -1.9073486328125e-06, -0.0004100799560546875, -0.001079559326171875, -3.814697265625e-06, -0.0024415994994342327, -0.16063851118087769, -0.00019143716781400144, -0.6866674423217773, -7.62939453125e-06, -5.7220458984375e-06, -0.09300804138183594, -5.7220458984375e-06, -9.5367431640625e-06, -0.0007734298706054688, -0.000102996826171875, -0.3845145106315613, -0.00023472306202165782, -0.4110555648803711, -0.0008497238159179688, -5.7220458984375e-05, -0.0003814697265625, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.020626187324523926, -0.06909680366516113, -0.0001811981201171875, -0.011422157287597656, -9.5367431640625e-06, -7.43865966796875e-05, -5.7220458984375e-06, -0.0030559301376342773, -0.0001366122451145202, -6.318092346191406e-05, -8.0108642578125e-05, -0.0013561248779296875, -0.0001087188720703125, -0.0003223419189453125, -3.4332275390625e-05, -1.1444091796875e-05, -0.0010986067354679108, -2.8252559786778875e-05], "score": -5.177434044947368, "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.EPIC,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        query = CardQuery(conditions=[IsMinion()])\n        new_minon.add_buff(Buff(ManaChange(-3)))\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Preparation"}, {"n": 0, "_type": "Num"}, {"attr": "EPIC", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "EPIC", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "keyword", "arg": "target_func"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"attr": "use", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"_type": "Call", "keywords": [{"value": {"elts": [{"_type": "Template18", "hole0": "IsMinion"}], "_type": "List"}, "_type": "keyword", "arg": "conditions"}], "func": {"_type": "Name", "id": "CardQuery"}}, "_type": "Assign", "targets": [{"_type": "Name", "id": "query"}]}, {"value": {"args": [{"args": [{"args": [{"_type": "UnaryOp", "operand": {"n": 3, "_type": "Num"}, "op": {"_type": "USub"}}], "_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}}], "_type": "Call", "func": {"_type": "Name", "id": "Buff"}}], "_type": "Call", "func": {"attr": "add_buff", "value": {"_type": "Name", "id": "new_minon"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "use"}], "name": "Preparation"}]}, "choice_history": [50, 111, 176, 58, 90, "Preparation", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Preparation", "<EOS>", 37, 117, "0", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "EPIC", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 171, 49, 152, "target_func", "<EOS>", 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 61, 95, "use", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "player", "<EOS>", 149, "game", "<EOS>", 178, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "use", "<EOS>", 164, 35, 112, "player", "<EOS>", 35, 112, "game", "<EOS>", 55, 80, 163, 35, 112, "query", "<EOS>", 14, 87, 19, 112, "Card", "Query", "<EOS>", 171, 49, 152, "conditions", "<EOS>", 17, 107, 163, 46, 135, "Is", "Minion", "<EOS>", 59, 93, 14, 88, 11, 81, 19, 112, "new_minon", "<EOS>", "add_buff", "<EOS>", 163, 30, 88, 19, 112, "Buff", "<EOS>", 163, 30, 88, 19, 112, "Mana", "Change", "<EOS>", 163, 47, 147, 77, 21, 117, "3", "<EOS>"]}]}
{"gold_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion):\n        minion.set_health_to(1)\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "beams": [{"score_history": [-9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, -4.9591064453125e-05, -2.288818359375e-05, -1.4424319488171022e-05, -0.0002441108226776123, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -2.7179708922631107e-05, -0.0010153339244425297, -5.23315102327615e-05, -0.05961036682128906, -0.021930694580078125, -1.1444091796875e-05, -3.743127308553085e-05, -0.003914593253284693, -2.3841789698053617e-07, 0.0, -0.06608319282531738, 0.0, -3.814697265625e-05, 0.0, -0.023977279663085938, -1.9073486328125e-06, -1.9073486328125e-06, -0.06515789031982422, 0.0, -9.250640869140625e-05, -1.9073486328125e-06, 0.0, -0.20693111419677734, 0.0, 0.0, -0.8602533340454102, -2.3841855067985307e-07, -0.11384010314941406, -0.0001678466796875, -0.0003566741943359375, -0.14841842651367188, -4.9591064453125e-05, -0.012339591979980469, -1.9073486328125e-06, -0.000133514404296875, -2.86102294921875e-05, -0.03563082218170166, -6.079673767089844e-06, -0.0006465911865234375, -0.15253925323486328, -0.00571441650390625, -0.008022308349609375, -1.9073486328125e-06, -0.0019466876983642578, -2.2649765014648438e-06, -0.008219718933105469, -0.011610031127929688, -0.03280830383300781, -9.5367431640625e-06, -0.019649863243103027, 0.0, -9.34600830078125e-05, 0.0, -0.0005092620849609375, -3.814697265625e-06, -0.024393081665039062, 0.0, -0.0015439987182617188, -1.1444091796875e-05, -0.001941680908203125, -7.62939453125e-06, -0.0007063120719976723, 0.0, -0.001567840576171875, -0.015215873718261719, -0.001285552978515625, -0.0032787322998046875, -0.0004253387451171875, 0.0, -0.000335693359375, 0.0, -0.0019826889038085938, 0.0, -0.002338409423828125, 0.0, -2.86102294921875e-05, -0.0177459716796875, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.0001417398452758789, -1.9073486328125e-06, -0.0445556640625, -0.0006999969482421875, -4.00543212890625e-05, -0.00090789794921875, -5.7220458984375e-06, -9.5367431640625e-06, -1.1298844814300537, -1.537799835205078e-05, -0.0006237030029296875, -0.05048084259033203, -0.0012836456298828125, 0.0, -0.4277791976928711, -9.5367431640625e-06, -0.0746917724609375, -3.814697265625e-06, -0.16658878326416016, 0.0, -0.6281901597976685, -0.00014972686767578125, -0.063179612159729, -5.960462772236497e-07, -0.6245061159133911, 0.0, -0.5999226570129395, -8.344646857949556e-07, -0.0004787445068359375, -0.0003147125244140625, -0.0001544952392578125, -0.2854137420654297, 0.0, -0.6992082595825195, -5.7220458984375e-06, -0.0025920867919921875, 0.0, -0.35880470275878906, -0.0002880096435546875, -0.345500111579895, 0.0, -0.032311439514160156, 0.0, 0.0, -0.016931533813476562, -5.7220458984375e-06, -1.9073486328125e-06, -0.2932558059692383, -1.9073486328125e-06, -0.38524913787841797, -3.814697265625e-06, -0.0001430511474609375, 0.0, -0.03442966938018799, -1.9073486328125e-06, -0.010639190673828125, 0.0, -0.954933762550354, -2.1457672119140625e-06, -0.7611788511276245, 0.0, -0.008230209350585938, -0.0001773834228515625, -1.71661376953125e-05, -0.40107667446136475, -4.00543212890625e-05, -0.0022258758544921875, -2.09808349609375e-05, -0.000736236572265625, 0.0, -6.4849853515625e-05, 0.0, -0.0016498565673828125, 0.0, -0.01646900177001953, 0.0, 0.0, -0.015005111694335938, -3.24249267578125e-05, -1.9073486328125e-06, -0.31722450256347656, -1.1444091796875e-05, -0.017024993896484375, 0.0, -0.0019044876098632812, -1.1920928244535389e-07, -0.29118549823760986, -1.9073486328125e-06, -0.324078768491745, -1.9073486328125e-06, -0.00016021728515625, -0.001430511474609375, -9.5367431640625e-06, -0.1344459056854248, -1.33514404296875e-05, -0.0003757476806640625, -2.47955322265625e-05, -0.056333065032958984, -1.9073486328125e-06, -1.52587890625e-05, 0.0, 0.0, -0.5499153137207031, -5.7220458984375e-06, 0.0, -0.0001049041748046875, 0.0, -0.00022268241445999593, -1.9073486328125e-06, -0.00035500526428222656, 0.0, -0.00034332275390625, -1.52587890625e-05, -0.006210803985595703, -4.1961669921875e-05, 0.0, -0.0002040863037109375, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -8.0108642578125e-05, -2.86102294921875e-05, -0.5491104125976562, -0.000415802001953125, -7.62939453125e-06, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -0.0031986236572265625, -9.5367431640625e-06, -0.00429534912109375, -7.62939453125e-06, -0.02358245849609375, 0.0, -0.0007401704788208008, -2.86102294921875e-05, -0.001440031104721129, -5.7220458984375e-06, -0.006711840629577637, -4.267692565917969e-05, -0.4768986105918884, -5.841255187988281e-06, -0.0005035400390625, -7.62939453125e-05, -5.91278076171875e-05, -0.7041546106338501, -1.9073486328125e-06, -0.000396728515625, -3.4332275390625e-05, -0.0005855560302734375, 0.0, -5.53131103515625e-05, 0.0, -0.0014400482177734375, 0.0, -0.0011262893676757812, -3.24249267578125e-05, -1.33514404296875e-05, -4.57763671875e-05, 0.0, -0.0003452301025390625, 0.0, -0.000331878662109375, -1.33514404296875e-05, -0.0001983642578125, 0.0, -0.16620922088623047, -0.003482818603515625, -7.82012939453125e-05, 0.0, -0.0009603500366210938, -1.71661376953125e-05, -0.0031614303588867188, -3.814697265625e-06, -1.1444091796875e-05, -0.4902610778808594, -1.9073486328125e-06, -0.0024652481079101562, -1.9073486328125e-06, 0.0, -0.18018817901611328, 0.0, -1.9073486328125e-06, -0.5406380891799927, 0.0, -0.02425384521484375, -0.16444015502929688, -0.0001277923583984375, -0.0001201629638671875, -1.9073486328125e-06, -0.5562551021575928, -1.52587890625e-05, -0.06913471221923828, -0.007061004638671875, -0.0009355545043945312, 0.0, -0.0642557144165039, -7.62939453125e-06, -0.10837090015411377, 0.0, -0.015952110290527344, -1.9073486328125e-06, -0.007770538330078125, -1.9073486328125e-05, -3.814697265625e-06, -0.13596725463867188, 0.0, -0.8046369552612305, 0.0, -0.0022728443145751953, 0.0, -3.814697265625e-06, -0.08713531494140625, 0.0, -1.9073486328125e-06, -0.0004177093505859375, -1.52587890625e-05, -5.7220458984375e-06, -0.16329479217529297, 0.0, -0.0048743486404418945, -1.1920928244535389e-07, -0.3203144073486328, 0.0, -9.34600830078125e-05, -0.008153915405273438, -0.0018634796142578125, -0.00222015380859375, 0.0, -0.0008296966552734375, 0.0, -0.7498124837875366, -4.768370445162873e-07, -0.7951970100402832, 0.0, -9.918212890625e-05, -0.0001087188720703125, 0.0, -0.2474222183227539, 0.0, -0.25921380519866943, -1.3589859008789062e-05, -0.008984565734863281, 0.0, -0.029989242553710938, -1.71661376953125e-05, -0.3859521150588989, -1.1444091796875e-05, -0.1144113540649414, -0.6111631393432617, -0.039521217346191406, -6.866455078125e-05, -0.002643585205078125, -7.62939453125e-06, -0.011211395263671875, -2.6702880859375e-05, -0.001651763916015625, 0.0, -0.0010089874267578125, -1.9073486328125e-06, -0.20812702178955078, 0.0, -0.6082053184509277, 0.0, -1.1444091796875e-05, -0.14345932006835938, -1.9073486328125e-06, -0.014885902404785156, -5.14984130859375e-05, -0.001481175422668457, -0.000164031982421875, -1.0319976806640625, -0.3627815246582031, -1.33514404296875e-05, -0.0001697540283203125, -0.0012111663818359375, -2.288818359375e-05, -0.4804251790046692, -1.7404556274414062e-05, -0.0005712509155273438, -0.07492733001708984, -0.00165557861328125, 0.0, -0.6488704681396484, 0.0, -0.5110615491867065, -2.3841855067985307e-07, -0.01829361915588379, 0.0, -0.0027866363525390625, -5.7220458984375e-05, -1.9073486328125e-06, -0.4043235778808594, 0.0, -0.1782665252685547, -0.0002269744873046875, -0.001800537109375, 0.0, -0.0002269744873046875, 0.0, 0.0, -0.007251739501953125, -3.814697265625e-06, -3.814697265625e-06, -0.44283008575439453, -3.814697265625e-06, -0.00034332275390625, 0.0, -0.6592354774475098, -1.1920928244535389e-07, -0.3431035280227661, -3.814697265625e-06, -0.2693901062011719, -3.814697265625e-06, -6.103515625e-05, -0.0008869171142578125, -7.62939453125e-06, -0.13109779357910156, -3.24249267578125e-05, -0.000568389892578125, -2.47955322265625e-05, -0.052310943603515625, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -0.3402595520019531, -1.9073486328125e-05, -9.5367431640625e-06, -0.0016078948974609375, -1.9073486328125e-06, -0.3149747848510742, -1.33514404296875e-05, -5.14984130859375e-05, 0.0, -0.0017920732498168945, -1.1920928244535389e-07, -0.08089828491210938, 0.0, -0.9277275800704956, -1.9311904907226562e-05, -0.24337458610534668, -7.987022399902344e-06, -4.76837158203125e-05, -0.017327308654785156, -1.52587890625e-05, -1.002254605293274, -1.0251946150674485e-05, -0.000286102294921875, -0.1218557357788086, -5.7220458984375e-06, -4.1961669921875e-05, -0.0028743743896484375, -8.20159912109375e-05, -1.9073486328125e-06, -0.33850574493408203, 0.0, -0.36748218536376953, 0.0, -0.009215235710144043, -3.576278118089249e-07, -0.2369593381881714, -7.62939453125e-06, -1.1181031465530396, -6.318092346191406e-06, -0.00164794921875, -0.0015773773193359375, -5.7220458984375e-06, -0.5160659551620483, -8.20159912109375e-05, -0.052577972412109375, -1.33514404296875e-05, -9.34600830078125e-05, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -0.0016727447509765625, 0.0], "score": -33.35386532995963, "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion, index):\n        if len([minion for minion in self.player.minions if not minion.<UNK>]\n            ) > 0:\n            mirror = (hearthbreaker.cards.minions.\n                find_enemy_minion_battlecry_target(self.player, self))\n            self.player.opponent.unbind('minion_played', self._reveal)\n            minion.player.trigger('<UNK>', mirror)\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = Null\n\n    def _reveal(self, minion, <UNK>):\n        for minion in minion.copy(player.minions):\n            minion.damage(minion.copy(self.player), game)\n        if self.player.minions < 7:\n            mirror = minion.copy(self.player)\n            minion.player.trigger('<UNK>', mirror)\n            self.player.hand.append(new_card)\n        else:\n            minion.player.unbind('minion_played', self._reveal)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SecretCard"}], "_type": "ClassDef", "body": [{"hole2": "PALADIN", "_type": "Template1", "hole1": 1, "hole0": "Repentance"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "minion"}, {"_type": "arg", "arg": "index"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"_type": "If", "body": [{"value": {"args": [{"attr": "player", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"attr": "find_enemy_minion_battlecry_target", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Assign", "targets": [{"_type": "Name", "id": "mirror"}]}, {"value": {"args": [{"_type": "Str", "s": "minion_played"}, {"attr": "_reveal", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}], "_type": "Call", "func": {"attr": "unbind", "value": {"attr": "opponent", "value": {"attr": "player", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "_type": "Call", "func": {"attr": "trigger", "value": {"attr": "player", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"_type": "Call", "func": {"attr": "reveal", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "test": {"left": {"args": [{"generators": [{"_type": "comprehension", "target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "value": {"attr": "player", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}, "ifs": [{"_type": "UnaryOp", "operand": {"attr": "<UNK>", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}, "op": {"_type": "Not"}}]}], "_type": "ListComp", "elt": {"_type": "Name", "id": "minion"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "_type": "Compare", "comparators": [{"n": 0, "_type": "Num"}], "ops": [{"_type": "Gt"}]}}], "name": "_reveal"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}], "_type": "Call", "func": {"attr": "unbind", "value": {"attr": "current_player", "value": {"attr": "game", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign", "targets": [{"attr": "player", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}]}], "name": "activate"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "minion"}, {"_type": "arg", "arg": "<UNK>"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"value": {"args": [{"args": [{"attr": "player", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}], "_type": "Call", "func": {"attr": "copy", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"attr": "damage", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}}, "_type": "Expr"}], "iter": {"args": [{"attr": "minions", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}], "_type": "Call", "func": {"attr": "copy", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}}}, {"_type": "If", "body": [{"value": {"args": [{"attr": "player", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}], "_type": "Call", "func": {"attr": "copy", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}}, "_type": "Assign", "targets": [{"_type": "Name", "id": "mirror"}]}, {"value": {"args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "_type": "Call", "func": {"attr": "trigger", "value": {"attr": "player", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"_type": "Name", "id": "new_card"}], "_type": "Call", "func": {"attr": "append", "value": {"attr": "hand", "value": {"attr": "player", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}], "test": {"left": {"attr": "minions", "value": {"attr": "player", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Compare", "comparators": [{"n": 7, "_type": "Num"}], "ops": [{"_type": "Lt"}]}, "orelse": [{"value": {"args": [{"_type": "Str", "s": "minion_played"}, {"attr": "_reveal", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}], "_type": "Call", "func": {"attr": "unbind", "value": {"attr": "player", "value": {"_type": "Name", "id": "minion"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}]}], "name": "_reveal"}], "name": "Repentance"}]}, "choice_history": [50, 111, 176, 58, 90, "Repentance", "<EOS>", 163, 35, 112, "Secret", "Card", "<EOS>", 179, 66, 126, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 61, 95, "_reveal", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "minion", "<EOS>", 149, "index", "<EOS>", 176, 62, 98, 15, 91, 14, 88, 19, 112, "len", "<EOS>", 163, 34, 108, 19, 112, "minion", "<EOS>", 161, 151, 19, 112, "minion", "<EOS>", 11, 81, 11, 81, 19, 112, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 163, 47, 147, 76, 11, 81, 19, 112, "minion", "<EOS>", "<UNK>", "<EOS>", 160, 3, 163, 37, 117, "0", "<EOS>", 179, 55, 80, 163, 35, 112, "mirror", "<EOS>", 14, 88, 11, 81, 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "find_enemy_minion_battlecry_target", "<EOS>", 164, 27, 81, 19, 112, "self", "<EOS>", "player", "<EOS>", 35, 112, "self", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "player", "<EOS>", "opponent", "<EOS>", "unbind", "<EOS>", 164, 38, 121, "minion_played", "<EOS>", 27, 81, 19, 112, "self", "<EOS>", "_reveal", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 164, 38, 121, "<UNK>", "<EOS>", 35, 112, "mirror", "<EOS>", 59, 93, 14, 86, 11, 81, 23, 135, "super", "<EOS>", "reveal", "<EOS>", 61, 95, "activate", "<EOS>", 150, 157, 149, "self", "<EOS>", 149, "player", "<EOS>", 177, 59, 93, 14, 88, 11, 81, 11, 81, 11, 81, 19, 112, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 164, 38, 121, "card_played", "<EOS>", 27, 81, 19, 112, "self", "<EOS>", "_reveal", "<EOS>", 55, 80, 163, 27, 81, 19, 112, "self", "<EOS>", "player", "<EOS>", 20, 114, "Null", "<EOS>", 61, 95, "_reveal", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "minion", "<EOS>", 149, "<UNK>", "<EOS>", 177, 60, 94, 19, 112, "minion", "<EOS>", 14, 88, 11, 81, 19, 112, "minion", "<EOS>", "copy", "<EOS>", 163, 27, 81, 19, 112, "player", "<EOS>", "minions", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 19, 112, "minion", "<EOS>", "damage", "<EOS>", 164, 30, 88, 11, 81, 19, 112, "minion", "<EOS>", "copy", "<EOS>", 163, 27, 81, 19, 112, "self", "<EOS>", "player", "<EOS>", 35, 112, "game", "<EOS>", 62, 99, 15, 91, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 160, 8, 163, 37, 117, "7", "<EOS>", 178, 55, 80, 163, 35, 112, "mirror", "<EOS>", 14, 88, 11, 81, 19, 112, "minion", "<EOS>", "copy", "<EOS>", 163, 27, 81, 19, 112, "self", "<EOS>", "player", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 164, 38, 121, "<UNK>", "<EOS>", 35, 112, "mirror", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "player", "<EOS>", "hand", "<EOS>", "append", "<EOS>", 163, 35, 112, "new_card", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "minion", "<EOS>", "player", "<EOS>", "unbind", "<EOS>", 164, 38, 121, "minion_played", "<EOS>", 27, 81, 19, 112, "self", "<EOS>", "_reveal", "<EOS>"]}]}
{"gold_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, False)\n\n    def create_minion(self, p):\n        return Minion(0, 1)\n", "beams": [{"score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.0001977572392206639, -0.00726416427642107, -0.004170799627900124, -0.0007004773942753673, -1.1444091796875e-05, 0.0, 0.0, -0.0004571612807922065, -1.5377991076093167e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.028125762939453125, -4.1961669921875e-05, -0.0001354217529296875, -6.40153739368543e-05, -0.016833066940307617, -0.000263214111328125, -4.768371127283899e-06, 0.0, -0.00020870077423751354, 0.0, -0.5323976278305054, 0.0, -0.39703369140625, 0.0, -0.04564857482910156, -3.814697265625e-05, -3.814689989667386e-06, -3.576278118089249e-07, -7.987011485965922e-06, 0.0, -0.33506274223327637, 0.0, -1.9073486328125e-05, 0.0, -0.00054168701171875, -1.1444091796875e-05, -3.814697265625e-06, 0.0, 0.0, -0.2764739990234375, -2.86102294921875e-05, -0.00057220458984375, -0.037878990173339844, -7.2479248046875e-05, -0.32426583766937256, -0.3644157350063324, -0.0007561445236206055, -0.0033397674560546875, 0.0, -0.9638584852218628, -0.00037753573269583285, -2.0265579223632812e-06], "score": -3.3413756814729254, "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(0, 1, effects=[Aura(<UNK>Deathrattle(),\n            MinionSelector())])\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"hole2": "PRIEST", "_type": "Template3", "hole1": 0, "hole0": "Shadow of Nothing", "hole3": "FREE"}, {"hole2": "effects", "_type": "Template4", "hole1": 1, "hole0": 0, "hole3": {"elts": [{"args": [{"_type": "Template18", "hole0": "<UNK>Deathrattle"}, {"_type": "Template18", "hole0": "MinionSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}], "_type": "List"}}], "name": "ShadowOfNothing"}]}, "choice_history": [50, 111, 176, 58, 90, "Shadow", "Of", "Nothing", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 70, 138, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", 71, 139, "0", "<EOS>", "1", "<EOS>", "effects", "<EOS>", 17, 107, 163, 30, 88, 19, 112, "Aura", "<EOS>", 164, 46, 135, "<UNK>", "Deathrattle", "<EOS>", 46, 135, "Minion", "Selector", "<EOS>"]}]}
{"gold_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.health > player.effective_spell_damage(2\n            ) or self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(2), self)\n            player.draw()\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n", "beams": [{"score_history": [0.0, -2.86102294921875e-05, -1.9073486328125e-06, -9.918212890625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -1.7165990357170813e-05, -3.814697265625e-06, 0.0, -1.52587890625e-05, -1.5273690223693848e-06, -0.00015795230865478516, 0.0, -0.000316619873046875, -4.9591064453125e-05, -1.9073486328125e-05, -1.9311904907226562e-05, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -7.62939453125e-06, -8.7738037109375e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0001239776611328125, -9.5367431640625e-06, -5.7220458984375e-06, -5.9604644775390625e-06, -1.9073486328125e-05, 0.0, -7.05718994140625e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -7.104873657226562e-05, -1.33514404296875e-05, -1.9073486328125e-06, -2.384184938364342e-07, 0.0, -9.5367431640625e-06, 0.0, -5.7220458984375e-06, 0.0, -8.702254490344785e-06, -8.344646857949556e-07, -0.8258954286575317, 0.0, 0.0, 0.0, -3.0517578125e-05, 0.0, -3.3020973205566406e-05, -1.52587890625e-05, -2.491474151611328e-05, 0.0, -0.03952598571777344, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-06, 0.0, -1.52587890625e-05, 0.0, -4.57763671875e-05, -1.1444091796875e-05, -3.24249267578125e-05, -1.728534698486328e-05, -0.019779324531555176, 0.0, -6.103515625e-05, -1.1444091796875e-05, -2.6702880859375e-05, 0.0, -3.62396240234375e-05, -5.7220458984375e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, -1.1920928244535389e-07, 0.0, -0.00016748905181884766, -1.1920928244535389e-07, -0.0005779266357421875, -9.5367431640625e-06, -1.9073486328125e-06, -3.4332275390625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -1.52587890625e-05, -0.0001392364501953125, -3.814697265625e-06, -3.4570680327306036e-06, -4.649161837733118e-06, -6.29425048828125e-05, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -4.172325134277344e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -9.894368304230738e-06, 0.0, -0.20713233947753906, -3.4332275390625e-05, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.019784392789006233, -1.9073486328125e-06, -0.0001220703125, -0.0001583099365234375, -1.33514404296875e-05, -1.9073486328125e-06, -0.008387565612792969, 0.0, -0.0001585482677910477, -0.00011861324310302734, -0.0003681182861328125, -3.814697265625e-06, -1.52587890625e-05, -1.52587890625e-05, -5.7220458984375e-06, -1.52587890625e-05, -1.52587890625e-05, -0.6202754974365234, -7.62939453125e-06, -9.5367431640625e-05, 0.0, -0.29946136474609375, 0.0, -0.0033148517832159996, 0.0, -0.009182214736938477, -3.576278118089249e-07, -4.923335291096009e-05, 0.0, -0.010184288024902344, -0.006023406982421875, -0.006587982177734375, -0.00011444091796875, -6.866455078125e-05, -0.0040149688720703125, -0.000209808349609375, -2.86102294921875e-05, -3.814697265625e-06, 0.0, -0.0001888275146484375, -5.7220458984375e-06, -0.2823171615600586, -1.9073486328125e-06, -0.005274772644042969, 0.0, -0.0003886222839355469, -1.9073486328125e-06, -0.0006066560745239258, 0.0, -0.0014306299854069948, -1.859664735093247e-05, -0.005436897277832031, -1.9073486328125e-06, -0.0002002716064453125, -0.062041282653808594, -9.5367431640625e-06, -0.0012187957763671875, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.0006513595581054688, 0.0, -0.5146850347518921, -1.9073486328125e-06, -0.2711153030395508, -0.0005779266357421875, -7.05718994140625e-05, 0.0, -0.00083160400390625, 0.0, -0.0035963058471679688, 0.0, -0.010083436965942383, 0.0, -7.2479248046875e-05, -0.052992820739746094, -3.814697265625e-05, -0.000579833984375, 0.0, -0.001347303157672286, -3.24249267578125e-05, -0.0010986328125, -0.0001983642578125, -0.000274658203125, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -6.29425048828125e-05, -0.00041484832763671875, -1.52587890625e-05, -9.1552734375e-05, 0.0, -8.177536074072123e-05, -4.0531158447265625e-06, -0.00014698505401611328, 0.0, -0.016908884048461914, -1.9073486328125e-06, -1.9073486328125e-05, -0.0031833648681640625, -3.814697265625e-06, -0.08519506454467773, -7.62939453125e-06, -0.0010128021240234375, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.1444091796875e-05, 0.0, -0.00231170654296875, -2.09808349609375e-05, -0.00026702880859375, 0.0, -5.185597183299251e-05, -2.0265579223632812e-06, -0.0001049041748046875, 0.0, -0.6812973022460938, 0.0, -1.1444091796875e-05, -0.0001392364501953125, -3.814697265625e-06, -0.029857516288757324, -7.62939453125e-06, -3.4332275390625e-05, -0.0005035400390625, -2.47955322265625e-05, -0.011171340942382812, -6.103515625e-05, -0.002148927189409733, 0.0], "score": -4.136804079801031, "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.current_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.BEAST and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.change_attack(2)\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SpellCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Slam"}, {"n": 2, "_type": "Num"}, {"attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "find_minion_spell_target", "value": {"attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "keyword", "arg": "target_func"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"attr": "use", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"attr": "minions", "value": {"attr": "current_player", "value": {"attr": "game", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}], "_type": "Call", "func": {"attr": "copy", "value": {"_type": "Name", "id": "copy"}, "_type": "Attribute"}}, "_type": "Assign", "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "If", "body": [{"value": {"args": [{"n": 2, "_type": "Num"}], "_type": "Call", "func": {"attr": "change_attack", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"args": [{"n": 2, "_type": "Num"}], "_type": "Call", "func": {"attr": "change_attack", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}], "test": {"values": [{"left": {"attr": "minion_type", "value": {"attr": "card", "value": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Compare", "comparators": [{"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "ops": [{"_type": "Is"}]}, {"left": {"attr": "target", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Compare", "comparators": [{"_type": "Name", "id": "targets"}], "ops": [{"_type": "In"}]}], "_type": "BoolOp", "op": {"_type": "And"}}, "orelse": [{"value": {"_type": "Template9", "hole0": 2}, "_type": "Expr"}]}], "name": "use"}], "name": "Slam"}]}, "choice_history": [50, 111, 176, 58, 90, "Slam", "<EOS>", 163, 35, 112, "Spell", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Slam", "<EOS>", 37, 117, "2", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 171, 49, 152, "target_func", "<EOS>", 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 61, 95, "use", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "player", "<EOS>", 149, "game", "<EOS>", 178, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "use", "<EOS>", 164, 35, 112, "player", "<EOS>", 35, 112, "game", "<EOS>", 55, 80, 163, 35, 112, "targets", "<EOS>", 14, 88, 11, 81, 19, 112, "copy", "<EOS>", "copy", "<EOS>", 163, 27, 81, 11, 81, 11, 81, 19, 112, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 62, 99, 13, 84, 0, 164, 31, 91, 11, 81, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 160, 6, 163, 27, 81, 19, 112, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 31, 91, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", 160, 5, 163, 35, 112, "targets", "<EOS>", 177, 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 163, 37, 117, "2", "<EOS>", 59, 93, 14, 88, 11, 81, 11, 81, 19, 112, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 163, 37, 117, "2", "<EOS>", 176, 59, 93, 24, 144, "2", "<EOS>"]}]}
{"gold_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"score_history": [0.0, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.00011562632425921038, -0.01462589856237173, -1.9073486328125e-06, -7.62939453125e-06, 0.0, 0.0, -1.7046921129804105e-05, -5.960462772236497e-07, -1.33514404296875e-05, -1.33514404296875e-05, -6.866455078125e-05, -7.152556463552173e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.410743713378906e-06, -2.3961029000929557e-05, -1.9073486328125e-05, -0.49600791931152344, -1.9073486328125e-06, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -1.537799835205078e-05, -4.768370445162873e-07, -1.1444091796875e-05, 0.0, -0.3181743621826172, -2.47955322265625e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0004138946533203125, -2.6702880859375e-05, -5.7220458984375e-06, -0.0005180856678634882, -1.1920928244535389e-07, -3.62396240234375e-05, 0.0, -3.24249267578125e-05, 0.0, -6.985660729696974e-05, -1.9550323486328125e-05, -0.00011348482075845823, 0.0, -0.028446197509765625, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.9087066650390625e-05, -1.9073486328125e-06, -1.1801719665527344e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-05, -0.0004655122756958008, 0.0, -3.24249267578125e-05, -1.33514404296875e-05, 0.0, -0.0005677938461303711, 0.0, -1.1444091796875e-05, 0.0, -0.000164031982421875, 0.0, -0.0001811981201171875, 0.0, -0.008043408393859863, 0.0, -0.009263992309570312, -1.9073486328125e-05, -1.919269561767578e-05, 0.0, -1.5974028428900056e-05, 0.0, -0.5894262790679932, -3.814697265625e-06, -0.0023260116577148438, -0.0001583099365234375, -0.0007668733014725149, 0.0], "score": -1.4704845988186932, "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 3, spell_damage=1)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Spellbreaker"}, {"n": 4, "_type": "Num"}, {"attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "_type": "Call", "keywords": [{"value": {"attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "_type": "keyword", "arg": "minion_type"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"hole2": "spell_damage", "_type": "Template4", "hole1": 3, "hole0": 4, "hole3": {"n": 1, "_type": "Num"}}], "name": "Spellbreaker"}]}, "choice_history": [50, 111, 176, 58, 90, "Spellbreaker", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 167, 38, 121, "Spellbreaker", "<EOS>", 37, 117, "4", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 36, 113, "False", "<EOS>", 171, 49, 152, "minion_type", "<EOS>", 11, 81, 19, 112, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 71, 139, "4", "<EOS>", "3", "<EOS>", "spell_damage", "<EOS>", 21, 117, "1", "<EOS>"]}]}
{"gold_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())),\n            MinionSelector(Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"score_history": [-1.1444091796875e-05, -3.4332275390625e-05, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.002042233245447278, -2.861018856492592e-06, -1.2516897186287679e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -3.1828742066863924e-05, -7.152555099310121e-07, -1.33514404296875e-05, -3.0517578125e-05, -7.62939453125e-06, -0.00037467479705810547, 0.0, -5.7220458984375e-06, -4.76837158203125e-05, 0.0, -0.00016808509826660156, -2.0265579223632812e-06, -7.62939453125e-06, -0.027391433715820312, -9.5367431640625e-05, -0.0003270567976869643, -8.213520050048828e-05, -1.1920928244535389e-07, 0.0, -0.0009701253147795796, -2.3841855067985307e-07, -0.002251267433166504, 0.0, -0.0003347395686432719, 0.0, -0.0055141448974609375, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-05, -0.00013208389282226562, 0.0, -0.000194549560546875, -0.0008106231689453125, 0.0, -1.33514404296875e-05, 0.0, -0.00862164981663227, -0.006274212151765823, -0.0029144287109375, -0.16985416412353516, -3.814697265625e-06, -0.00038909912109375, -7.62939453125e-06, -0.8373638987541199, -1.0440199375152588, -0.014433412812650204, -0.0001983642578125, -0.4741487503051758, -0.0004749298095703125, -0.5222631692886353, -0.05898020416498184, -0.03721468150615692, -0.10590744018554688, -2.288818359375e-05, 0.0, -3.814697265625e-06, -0.09794425964355469, -0.0013333559036254883, -4.291534423828125e-06, -0.01572418212890625, -0.6398134231567383, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -0.050481200218200684, -0.0010768173960968852, -1.978873842745088e-05, -5.7220458984375e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.29425048828125e-05, -1.33514404296875e-05, -0.0002982616424560547, -8.702239938429557e-06, -0.38543999195098877, -1.1920928244535389e-07, -0.04729461669921875, 0.0, -0.014495849609375, -6.270296580623835e-05, -1.9073486328125e-06, -0.0076198577880859375, 0.0, -0.020184148102998734, -8.416153286816552e-05, -1.1920928244535389e-07, -0.7184696197509766, -0.0001983642578125, -2.1457672119140625e-06, 0.0, -2.2172922399477102e-05, 0.0, -0.6167503595352173, -0.009396553039550781, -3.62396240234375e-05, -7.62939453125e-06, -0.009738803841173649, 0.0], "score": -5.960743596734751, "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(TauntUntil(\n            TauntAttack(), MinionSelector(IsType(MINION_TYPE.MECH),\n            BothPlayer()))), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3, spell_damage=1)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"hole4": {"args": [{"args": [{"args": [{"_type": "Template18", "hole0": "TauntAttack"}, {"args": [{"args": [{"attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}, {"_type": "Template18", "hole0": "BothPlayer"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "TauntUntil"}}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"_type": "Template18", "hole0": "PlayerSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole2": "RARE", "_type": "Template6", "hole0": "Sunfury Protector", "hole3": "battlecry", "hole1": 2}], "name": "__init__"}, {"hole2": "spell_damage", "_type": "Template4", "hole1": 3, "hole0": 2, "hole3": {"n": 1, "_type": "Num"}}], "name": "SunfuryProtector"}]}, "choice_history": [50, 111, 176, 58, 90, "Sunfury", "Protector", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 73, 141, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 164, 30, 88, 19, 112, "Give", "<EOS>", 163, 30, 88, 19, 112, "Taunt", "Until", "<EOS>", 164, 46, 135, "Taunt", "Attack", "<EOS>", 30, 88, 19, 112, "Minion", "Selector", "<EOS>", 164, 30, 88, 19, 112, "Is", "Type", "<EOS>", 163, 27, 81, 19, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 46, 135, "Both", "Player", "<EOS>", 46, 135, "Player", "Selector", "<EOS>", 71, 139, "2", "<EOS>", "3", "<EOS>", "spell_damage", "<EOS>", 21, 117, "1", "<EOS>"]}]}
{"gold_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "beams": [{"score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -3.62396240234375e-05, 0.0, -0.009016039781272411, -1.3828182090946939e-05, -4.2556890548439696e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -5.9604644775390625e-06, -4.768370445162873e-07, -1.1444091796875e-05, -7.62939453125e-06, -6.67572021484375e-05, -1.7762184143066406e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -4.1961669921875e-05, -3.933906555175781e-06, -0.0024662017822265625, -0.0006961822509765625, -0.0001392364501953125, -0.00015472168161068112, -4.017353057861328e-05, -2.3841855067985307e-07, -1.9073486328125e-06, -7.73070496506989e-12, 0.0, -0.00767064094543457, 0.0, -4.780256494996138e-05, 0.0, -0.0010089874267578125, 0.0, -1.9073486328125e-05, -2.6702880859375e-05, -0.000164627970661968, 0.0, -0.0016994476318359375, -0.002166748046875, -3.62396240234375e-05, -8.0108642578125e-05, -3.4332275390625e-05, -0.6821006536483765, -0.019838877022266388, -0.0005245208740234375, -0.2184295654296875, 0.0, -0.7058841586112976, -0.3894037902355194, -0.356608122587204, -0.1481429636478424, -0.06347274780273438, -0.013812065124511719, -1.1444091796875e-05, -9.5367431640625e-06, -0.2203540802001953, -8.58306884765625e-05, -1.1444091796875e-05, -0.180816650390625, -9.5367431640625e-06, -3.814697265625e-06, -0.0014629364013671875, 0.0, -0.0006237030029296875, 0.0, -0.5000401735305786, -5.841255187988281e-06, 0.0, 0.0, 0.0, -0.001026153564453125, -5.91278076171875e-05, -0.0003414154052734375, 0.0, -0.06781923770904541, -4.3153722799615934e-05, -2.1457672119140625e-06, -0.0001850128173828125, -7.62939453125e-06, -2.3841835172788706e-07, -1.5497195136049413e-06, -0.00010609637683955953, 0.0], "score": -3.5969946056445394, "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(\n            DevilsaurOversparkOverspark()), MinionSelector(players=\n            EnemyPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"hole4": {"args": [{"args": [{"_type": "Template18", "hole0": "DevilsaurOversparkOverspark"}], "_type": "Call", "func": {"_type": "Name", "id": "Transform"}}, {"_type": "Call", "keywords": [{"value": {"_type": "Template18", "hole0": "EnemyPlayer"}, "_type": "keyword", "arg": "players"}, {"value": {"_type": "Template18", "hole0": "UserPicker"}, "_type": "keyword", "arg": "picker"}], "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole2": "LEGENDARY", "_type": "Template6", "hole0": "Tinkmaster Overspark", "hole3": "battlecry", "hole1": 3}], "name": "__init__"}, {"_type": "Template5", "hole1": 3, "hole0": 3}], "name": "TinkmasterOverspark"}]}, "choice_history": [50, 111, 176, 58, 90, "Tinkmaster", "Overspark", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 73, 141, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 164, 30, 88, 19, 112, "Transform", "<EOS>", 163, 46, 135, "Devilsaur", "Overspark", "Overspark", "<EOS>", 30, 87, 19, 112, "Minion", "Selector", "<EOS>", 172, 49, 152, "players", "<EOS>", 23, 135, "Enemy", "Player", "<EOS>", 49, 152, "picker", "<EOS>", 23, 135, "User", "Picker", "<EOS>", 72, 140, "3", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and attacker.is_minion(\n            ) and not attacker.removed:\n            attacker.die(self)\n            attacker.game.check_delayed()\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "beams": [{"score_history": [-3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001087188720703125, -9.5367431640625e-06, -1.22785213534371e-05, -8.618460560683161e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -0.003496527671813965, -0.00047385599464178085, -1.9192511899746023e-05, -0.43304920196533203, -0.6131973266601562, -2.6702880859375e-05, -0.0006822404102422297, -0.0011310577392578125, -8.344646857949556e-07, 0.0, -0.8594465255737305, 0.0, -9.5367431640625e-06, -0.0001277923583984375, -0.1570749282836914, 0.0, 0.0, -0.0004100799560546875, -3.814697265625e-06, -1.9073486328125e-06, 0.0, 0.0, -0.000270843505859375, -2.0265579223632812e-06, 0.0, -0.0005590914515778422, -2.3841855067985307e-07, -0.8013534545898438, -0.11689567565917969, 0.0, 0.0, -5.14984130859375e-05, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, 0.0, -2.861022494471399e-06, 0.0, -0.000331878662109375, 0.0, -2.6702880859375e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -2.86102294921875e-05, -2.47955322265625e-05, -7.62939453125e-06, -1.1086463018727954e-05, -1.9073486328125e-06, -0.18514537811279297, -7.62939453125e-06, 0.0, -3.814697265625e-06, 0.0, -0.03606131300330162, -1.8715683836489916e-05, -0.11249637603759766, -0.055339813232421875, -1.9073486328125e-05, 0.0, -0.0010356903076171875, 0.0, -0.041014671325683594, -3.814697265625e-06, -0.3496370315551758, 0.0, -0.1700434684753418, -0.0001392364501953125, -0.0018523931503295898, -2.2649765014648438e-06, -0.24328991770744324, 0.0, -0.1252232939004898, -2.145764938177308e-06, -0.7533054351806641, -0.0002689361572265625, -9.5367431640625e-06, -0.0076541900634765625, 0.0, -0.45377862453460693, -5.841255187988281e-06, -0.019754409790039062, -5.7220458984375e-06, -0.003909111022949219, -1.9073486328125e-06, -0.6385030746459961, 0.0, -0.7751245498657227, -4.0531158447265625e-06, -0.007190704345703125, -7.62939453125e-06, -0.7333933115005493, 0.0, -0.08951759338378906, -0.0003452301025390625, -4.1961669921875e-05, -0.021181106567382812, 0.0, -1.6873464584350586, -1.1920928244535389e-07, -0.018965721130371094, -2.6702880859375e-05, -0.0015621185302734375, -1.9073486328125e-06, -0.4585561752319336, 0.0, -0.04295551776885986, -3.933906555175781e-06, -0.009857177734375, -5.7220458984375e-06, -0.519256591796875, 0.0, -0.013701438903808594, 0.0, 0.0, -4.76837158203125e-05, -1.52587890625e-05, 0.0, -0.16289806365966797, 0.0, -1.3689957857131958, -3.278213262092322e-05, -0.024313926696777344, -3.814697265625e-06, -0.0003719329833984375, -0.009172439575195312, 0.0, -0.011023521423339844, -3.24249267578125e-05, -0.19689369201660156, 0.0, -0.00115966796875, 0.0, -0.012775421142578125, -0.0006999969482421875, -0.00031755404779687524, -1.9073486328125e-06, -0.0003833770751953125, -0.0002536773681640625, -0.00078582763671875, 0.0, -0.00042247690726071596, -1.41858699862496e-05, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.031250953674316406, 0.0, -0.01226949691772461, -0.0004429817199707031, -0.0003176926984451711, 0.0, -0.5046176910400391, 0.0, 0.0, -0.0866708755493164, -1.9073486328125e-06, 0.0, -0.0002422332763671875, 0.0, -6.079673767089844e-06, -2.3841855067985307e-07, -0.0019459724426269531, -1.9073486328125e-06, -0.0003814697265625, -9.5367431640625e-06, -0.005090951919555664, -1.71661376953125e-05, 0.0, -0.015982627868652344, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, -5.7220458984375e-06, -0.019319534301757812, -0.008188247680664062, 0.0, 0.0, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.018274307250976562, -1.9073486328125e-06, -0.015378952026367188, 0.0, -7.82012939453125e-05, 0.0, -7.43865966796875e-05, -0.00157928466796875, -0.021426193416118622, -1.33514404296875e-05, -0.013683080673217773, -3.8743019104003906e-05, -0.6235159635543823, -7.62939453125e-06, -0.00017547607421875, -0.0004253387451171875, -5.14984130859375e-05, -0.8236302137374878, 0.0, -0.00083160400390625, -1.52587890625e-05, -1.1444091796875e-05, 0.0, -3.62396240234375e-05, -1.9073486328125e-06, -0.000484466552734375, 0.0, -3.814697265625e-05, -9.5367431640625e-06, -0.3731050491333008, -3.814697265625e-06, 0.0, -0.0032176971435546875, -3.4332275390625e-05, 0.0, 0.0, 0.0, -0.000118255615234375, -3.814697265625e-06, -0.0011577606201171875, -0.03310585021972656, 0.0, 0.0, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.014837265014648438, -1.9073486328125e-06, -0.01136016845703125, 0.0, -0.0001583099365234375, 0.0, -6.4849853515625e-05, -0.001911163330078125, -0.01903068833053112, -1.1444091796875e-05, -0.014571547508239746, -3.6835670471191406e-05, -0.6041171550750732, -5.7220458984375e-06, -0.000232696533203125, -0.0006923675537109375, -5.14984130859375e-05, -0.7217937707901001, -3.814697265625e-06, -0.0008296966552734375, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -2.86102294921875e-05, -3.814697265625e-06, -0.000514984130859375, 0.0], "score": -16.364843946099022, "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = hearthbreaker.cards.minions.<UNK>()\n        player = self.player.game\n        player = self.player.minions\n        card.summon(player, player.game, len(player.minions))\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "SecretCard"}], "_type": "ClassDef", "body": [{"hole2": "PRIEST", "_type": "Template1", "hole1": 3, "hole0": "Vaporize"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"attr": "use", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"_type": "Call", "func": {"attr": "<UNK>", "value": {"attr": "minions", "value": {"attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Assign", "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"value": {"attr": "game", "value": {"attr": "player", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Assign", "targets": [{"_type": "Name", "id": "player"}]}, {"value": {"attr": "minions", "value": {"attr": "player", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Assign", "targets": [{"_type": "Name", "id": "player"}]}, {"value": {"args": [{"_type": "Name", "id": "player"}, {"attr": "game", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}, {"args": [{"attr": "minions", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Call", "func": {"attr": "summon", "value": {"_type": "Name", "id": "card"}, "_type": "Attribute"}}, "_type": "Expr"}, {"value": {"_type": "Call", "func": {"attr": "reveal", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "use"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}], "_type": "Call", "func": {"attr": "unbind", "value": {"attr": "current_player", "value": {"attr": "game", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "activate"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "minion_played"}, {"attr": "_reveal", "value": {"_type": "Name", "id": "self"}, "_type": "Attribute"}], "_type": "Call", "func": {"attr": "unbind", "value": {"attr": "current_player", "value": {"attr": "game", "value": {"_type": "Name", "id": "player"}, "_type": "Attribute"}, "_type": "Attribute"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "deactivate"}], "name": "Vaporize"}]}, "choice_history": [50, 111, 176, 58, 90, "Vaporize", "<EOS>", 163, 35, 112, "Secret", "Card", "<EOS>", 179, 66, 126, "Vaporize", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", 61, 95, "use", "<EOS>", 150, 158, 149, "self", "<EOS>", 149, "player", "<EOS>", 149, "game", "<EOS>", 181, 59, 93, 14, 88, 11, 81, 23, 135, "super", "<EOS>", "use", "<EOS>", 164, 35, 112, "player", "<EOS>", 35, 112, "game", "<EOS>", 55, 80, 163, 35, 112, "<UNK>", "<EOS>", 14, 86, 11, 81, 11, 81, 11, 81, 19, 112, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", 55, 80, 163, 35, 112, "player", "<EOS>", 11, 81, 11, 81, 19, 112, "self", "<EOS>", "player", "<EOS>", "game", "<EOS>", 55, 80, 163, 35, 112, "player", "<EOS>", 11, 81, 11, 81, 19, 112, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 59, 93, 14, 88, 11, 81, 19, 112, "card", "<EOS>", "summon", "<EOS>", 165, 35, 112, "player", "<EOS>", 27, 81, 19, 112, "player", "<EOS>", "game", "<EOS>", 30, 88, 19, 112, "len", "<EOS>", 163, 27, 81, 19, 112, "player", "<EOS>", "minions", "<EOS>", 59, 93, 14, 86, 11, 81, 23, 135, "super", "<EOS>", "reveal", "<EOS>", 61, 95, "activate", "<EOS>", 150, 157, 149, "self", "<EOS>", 149, "player", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 11, 81, 11, 81, 19, 112, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 164, 38, 121, "card_played", "<EOS>", 27, 81, 19, 112, "self", "<EOS>", "_reveal", "<EOS>", 61, 95, "deactivate", "<EOS>", 150, 157, 149, "self", "<EOS>", 149, "player", "<EOS>", 176, 59, 93, 14, 88, 11, 81, 11, 81, 11, 81, 19, 112, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 164, 38, 121, "minion_played", "<EOS>", 27, 81, 19, 112, "self", "<EOS>", "_reveal", "<EOS>"]}]}
{"gold_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "beams": [{"score_history": [-1.9073486328125e-06, -7.62939453125e-06, -2.47955322265625e-05, -2.6702880859375e-05, -5.7220458984375e-06, -0.0003979606262873858, -0.00016330339713022113, -8.344646857949556e-07, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -1.1897645890712738e-07, -1.7285317881032825e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0007171630859375, -7.62939453125e-06, -7.271740287251305e-06, -2.384185791015625e-05, -1.1920928244535389e-07, 0.0, -0.000182316085556522, -1.9073468138230965e-06, -3.886222839355469e-05, 0.0, -0.0007114410400390625, -0.00022125244140625, -7.390974587906385e-06, -4.768370445162873e-07, -5.173502358957194e-05, -9.536738616588991e-07, -0.03626883029937744, -1.9073486328125e-06, -0.0002727508544921875, -1.52587890625e-05, -0.0003376007080078125, -1.33514404296875e-05], "score": -0.03954357915289819, "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"hole2": "ALL", "_type": "Template1", "hole1": 1, "hole0": "Worgen Infiltrator"}, {"hole2": "stealth", "_type": "Template4", "hole1": 1, "hole0": 2, "hole3": {"value": true, "_type": "NameConstant"}}], "name": "WorgenInfiltrator"}]}, "choice_history": [50, 111, 176, 58, 90, "Worgen", "Infiltrator", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 66, 126, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 71, 139, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 20, 113, "True", "<EOS>"]}]}
{"gold_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "beams": [{"score_history": [-3.814697265625e-05, -3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, 0.0, -0.0002926159941125661, -7.510157047363464e-06, -6.318072337307967e-06, -3.0517578125e-05, -3.814697265625e-06, 0.0, 0.0, -7.426529191434383e-05, -2.861018856492592e-06, -1.9073486328125e-06, -6.67572021484375e-05, -9.5367431640625e-06, -2.8848648071289062e-05, 0.0, 0.0, -5.14984130859375e-05, -3.814697265625e-06, -3.4809112548828125e-05, -4.398822784423828e-05, -9.34600830078125e-05, -0.0030193328857421875, -4.57763671875e-05, -1.6331539882230572e-05, -6.67572021484375e-05, -9.5367431640625e-06, 0.0, -0.00012743509432766587, 0.0, -9.34600830078125e-05, 0.0, -0.006078839302062988, 0.0, -0.000171661376953125, -1.9073486328125e-06, -1.1444091796875e-05, -5.14984130859375e-05, -0.0010455846786499023, -8.344646857949556e-07, -0.000232696533203125, -0.31397438049316406, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0018991216784343123, -0.013557433150708675, -0.0006351470947265625, -0.3750476837158203, -9.5367431640625e-06, -0.002529144287109375, -0.000896453857421875, -8.7738037109375e-05, -0.0019866731017827988, -1.9073486328125e-06, -0.001499176025390625, -0.000274658203125, -0.03581202030181885, -1.33514404296875e-05, -0.010675430297851562, 0.0, -0.0004336833953857422, -0.00021147713414393365, -3.814697265625e-06, -3.0517578125e-05, -0.0013141632080078125, -1.1444091796875e-05, 0.0, -0.0028057098388671875, -0.0018520355224609375, -1.33514404296875e-05, -1.71661376953125e-05, -0.0001125335693359375, -5.53131103515625e-05, -1.33514404296875e-05, 0.0, -0.0034362077713012695, -0.0005692235426977277, -1.9073486328125e-06, -0.000988006591796875, -0.16970157623291016, -0.0002613067626953125, 0.0, -0.00014019012451171875, -0.0010318756103515625, -3.814697265625e-06, -0.000377655029296875, -2.6702880859375e-05, -8.7738037109375e-05, -0.015583747997879982, -1.1920928244535389e-07, -2.86102294921875e-05, -0.0003833770751953125, -3.62396240234375e-05, -7.43865966796875e-05, -0.000983595848083496, -0.0003337860107421875, -2.0265579223632812e-06, -0.0001201629638671875, -1.9073486328125e-06, -1.9073486328125e-06, -0.000274658203125, -7.62939453125e-06, -0.0002651214599609375, -4.768370445162873e-07, -0.1356983184814453, -3.814697265625e-06, -0.000202178955078125, -9.5367431640625e-06, -0.000125885009765625, -0.004380941390991211, -9.5367431640625e-06, -0.0003032684326171875, -9.72747802734375e-05, -0.0011876466451212764, -1.9073486328125e-06, -0.0007419586181640625, -0.000324249267578125, -7.986990567587782e-06, 0.0, -0.0009582011261954904, 0.0], "score": -1.1163377340717417, "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"hole4": {"args": [{"args": [{"elts": [{"_type": "Template11", "hole0": 1}, {"_type": "Template10", "hole0": 1}], "_type": "List"}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"_type": "Template18", "hole0": "SelfSelector"}, {"args": [{"args": [{"_type": "Call", "keywords": [{"value": {"args": [{"attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}, "_type": "keyword", "arg": "condition"}], "func": {"_type": "Name", "id": "CardSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Count"}}], "_type": "Call", "keywords": [{"value": {"n": 0, "_type": "Num"}, "_type": "keyword", "arg": "value"}], "func": {"_type": "Name", "id": "GreaterThan"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole2": "COMMON", "_type": "Template6", "hole0": "Blackwing Corruptor", "hole3": "battlecry", "hole1": 5}], "name": "__init__"}, {"_type": "Template5", "hole1": 4, "hole0": 5}], "name": "BlackwingCorruptor"}]}, "choice_history": [50, 111, 176, 58, 90, "Blackwing", "Corruptor", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 73, 141, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 165, 30, 88, 19, 112, "Give", "<EOS>", 163, 33, 107, 164, 41, 128, "1", "<EOS>", 40, 127, "1", "<EOS>", 46, 135, "Self", "Selector", "<EOS>", 30, 89, 19, 112, "Greater", "Than", "<EOS>", 163, 30, 88, 19, 112, "Count", "<EOS>", 163, 30, 87, 19, 112, "Card", "Selector", "<EOS>", 171, 49, 152, "condition", "<EOS>", 14, 88, 19, 112, "Is", "Type", "<EOS>", 163, 27, 81, 19, 112, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 171, 49, 152, "value", "<EOS>", 21, 117, "0", "<EOS>", 72, 140, "5", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Attribute('health',\n            HeroSelector(EnemyPlayer())), value=15))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "beams": [{"score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.000977558782324195, -4.9947539082495496e-05, -2.1457672119140625e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -4.494097447604872e-05, -7.152555099310121e-07, -0.0001392364501953125, -1.9073486328125e-06, -7.2479248046875e-05, -9.417532055522315e-06, 0.0, -3.0517578125e-05, -9.1552734375e-05, -8.96453857421875e-05, -1.33514404296875e-05, -3.24249267578125e-05, -0.0001316070556640625, -0.000640869140625, 0.0, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -1.71661376953125e-05, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.2159273865108844e-05, -6.532669067382812e-05, -3.6954863844584906e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -4.486646503210068e-07, -7.390960945485858e-06, -5.7220458984375e-06, 0.0, -1.52587890625e-05, 0.0, -3.457069396972656e-05, -1.1920928244535389e-07, -0.004006981384009123, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.0001926422119140625, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -0.0005550384521484375, -1.71661376953125e-05, -3.0517578125e-05, -1.8596589143271558e-05, 0.0, -1.9073486328125e-05, 0.0, -7.05718994140625e-05, 0.0, -2.288818359375e-05, 0.0, -0.0984964370727539, 0.0, -4.00543212890625e-05, -1.9073486328125e-06, -1.1563299267436378e-05, 0.0, -9.5367431640625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.00153350830078125, -0.028497695922851562, -7.62939453125e-06, -7.62939453125e-06, 0.0, -0.005775212310254574, -0.00011217594146728516, -0.0017032623291015625, -1.1974506378173828, -1.71661376953125e-05, -0.0026226043701171875, -0.0004634857177734375, -6.4849853515625e-05, -0.16466128826141357, 0.0, -0.0031118392944335938, -0.000507354736328125, -0.07731068134307861, -2.110004425048828e-05, -0.0016918182373046875, 0.0, -0.0006140470504760742, -3.504753112792969e-05, 0.0, -1.9073486328125e-06, -0.011492729187011719, -7.62939453125e-06, -8.7738037109375e-05, -0.056232452392578125, -2.47955322265625e-05, -0.0021209716796875, -0.001270294189453125, -0.000102996826171875, -0.000244140625, -1.9073486328125e-06, -0.008200764656066895, -0.0014706850051879883, 0.0, -3.814697265625e-06, -0.000133514404296875, -0.0003299713134765625, -7.05718994140625e-05, -3.814697265625e-06, -0.0019876956939697266, -6.747235602233559e-05, -1.33514404296875e-05, -0.004840850830078125, -0.0004940032958984375, -0.004399606492370367, -6.174992449814454e-05, 0.0, -5.91278076171875e-05, -6.4849853515625e-05, -0.000186920166015625, -0.011945841833949089, 0.0, -0.0021209716796875, -5.7220458984375e-06, -0.0029083488043397665, -1.9073486328125e-06, -0.0016651153564453125, -3.814697265625e-06, -5.960463568044361e-06, -4.291525328881107e-06, -1.3899174518883228e-05, -2.3841830625315197e-06], "score": -1.7051385923555173, "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Count(CardSelector()), value=0))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"n": 6, "_type": "Num"}, {"attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "_type": "keyword", "arg": "minion_type"}, {"value": {"args": [{"args": [{"elts": [{"_type": "Template11", "hole0": 3}, {"_type": "Template10", "hole0": 3}], "_type": "List"}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"_type": "Template18", "hole0": "SelfSelector"}, {"args": [{"args": [{"args": [{"_type": "Template18", "hole0": "CardSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "Count"}}], "_type": "Call", "keywords": [{"value": {"n": 0, "_type": "Num"}, "_type": "keyword", "arg": "value"}], "func": {"_type": "Name", "id": "GreaterThan"}}], "_type": "Call", "func": {"_type": "Name", "id": "Not"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "_type": "keyword", "arg": "battlecry"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"_type": "Template5", "hole1": 6, "hole0": 6}], "name": "DrakonidCrusher"}]}, "choice_history": [50, 111, 176, 58, 90, "Drakonid", "Crusher", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Drakonid", " ", "Crusher", "<EOS>", 37, 117, "6", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 172, 49, 152, "minion_type", "<EOS>", 11, 81, 19, 112, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 49, 152, "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 165, 30, 88, 19, 112, "Give", "<EOS>", 163, 33, 107, 164, 41, 128, "3", "<EOS>", 40, 127, "3", "<EOS>", 46, 135, "Self", "Selector", "<EOS>", 30, 88, 19, 112, "Not", "<EOS>", 163, 30, 89, 19, 112, "Greater", "Than", "<EOS>", 163, 30, 88, 19, 112, "Count", "<EOS>", 163, 46, 135, "Card", "Selector", "<EOS>", 171, 49, 152, "value", "<EOS>", 21, 117, "0", "<EOS>", 72, 140, "6", "<EOS>", "6", "<EOS>"]}]}
{"gold_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"score_history": [-5.7220458984375e-06, -6.103515625e-05, -2.47955322265625e-05, -1.33514404296875e-05, -1.9073486328125e-06, -7.617183291586116e-05, -1.8954162442241795e-05, -6.4849853515625e-05, -3.814697265625e-06, 0.0, -4.488229751586914e-05, -6.961822509765625e-05, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -2.6702880859375e-05, -8.10622896096902e-06, -3.576278118089249e-07, -0.0002765655517578125, -4.1961669921875e-05, -7.62939453125e-06, -3.933906555175781e-06, -2.3841855067985307e-07, -3.814697265625e-06, -7.2479248046875e-05, -1.9073486328125e-06, -0.0001068115234375, -0.37258243560791016, -5.7220458984375e-06, 0.0, -0.0003414154052734375, -4.57763671875e-05, -9.894371032714844e-06, -3.814697265625e-06, -6.127357482910156e-05, 0.0, -0.0262451171875, -0.00016021728515625, -8.58306884765625e-05, -1.1920928244535389e-07, -0.0002696514129638672, -1.52587890625e-05, -1.9073486328125e-06, -0.00010334896796848625, -2.3841855067985307e-07, -0.0007801055908203125, -9.1552734375e-05, -3.814697265625e-05, -4.57763671875e-05, -0.00015282630920410156, -9.548664093017578e-05, -0.0009566545486450195, 0.0, -6.866455078125e-05, 0.0, -7.62939453125e-06, 0.0, -0.00011444091796875, -1.9073486328125e-06, -0.018964767456054688, 0.0, -4.38690185546875e-05, -1.1444091796875e-05, -2.5153160095214844e-05, 0.0, -8.0108642578125e-05, -9.5367431640625e-06, -3.4332275390625e-05, -3.075599670410156e-05, 0.0, -0.0002269744873046875, 0.0, -0.001621246337890625, 0.0, -8.20159912109375e-05, 0.0, -0.16993331909179688, 0.0, -0.0003795623779296875, -0.0001850128173828125, -3.8384499930543825e-05, -1.9073468138230965e-06, -1.0859660051210085e-06, -7.152555099310121e-07], "score": -0.5949558652508742, "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Imp"}, {"n": 1, "_type": "Num"}, {"attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "RARE", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "_type": "Call", "keywords": [{"value": {"attr": "DEMON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "_type": "keyword", "arg": "minion_type"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"_type": "Template5", "hole1": 1, "hole0": 1}], "name": "Imp"}]}, "choice_history": [50, 111, 176, 58, 90, "Imp", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 167, 38, 121, "Imp", "<EOS>", 37, 117, "1", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 36, 113, "False", "<EOS>", 171, 49, 152, "minion_type", "<EOS>", 11, 81, 19, 112, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 72, 140, "1", "<EOS>", "1", "<EOS>"]}]}
{"gold_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "beams": [{"score_history": [-5.7220458984375e-06, -3.0517578125e-05, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00033361115492880344, -2.729855441430118e-05, -5.722029527532868e-06, -0.0001316070556640625, -7.62939453125e-06, 0.0, -3.573368303477764e-07, -1.2397711543599144e-05, -2.3841855067985307e-07, -0.0001201629638671875, -5.7220458984375e-06, -3.814697265625e-05, -5.245207830739673e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -2.86102294921875e-05, -2.288818359375e-05, -7.62939453125e-06, -0.0001430511474609375, -7.62939453125e-06, -1.9073486328125e-06, -5.340576171875e-05, -9.918212890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.00026702880859375, -1.9073486328125e-06, -7.748603820800781e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-05, -1.8715683836489916e-05, -4.458427065401338e-05, -2.2053714928915724e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -2.837218744389247e-05, -1.7881377516459906e-06, -1.33514404296875e-05, 0.0, -1.52587890625e-05, 0.0, -2.3365020751953125e-05, -1.311301275563892e-06, -0.08249735832214355, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -0.000102996826171875, -5.7220458984375e-06, -4.06503640988376e-05, 0.0, -0.5175619125366211, -2.09808349609375e-05, -9.1552734375e-05, -3.0636769224656746e-05, 0.0, -1.52587890625e-05, 0.0, -0.000335693359375, 0.0, -9.5367431640625e-06, 0.0, -0.14897453784942627, 0.0, -5.14984130859375e-05, -1.9073486328125e-06, -0.00015997886657714844, 0.0, -3.62396240234375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.00027501583099365234, -1.1920928244535389e-07, -5.340576171875e-05, -0.000133514404296875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.001247999258339405, -3.910048326360993e-05, -0.003810882568359375, -0.08284759521484375, -2.6702880859375e-05, -0.0045413970947265625, -0.0011138916015625, -0.0001735687255859375, -0.004885673522949219, -1.1444091796875e-05, -0.5665779113769531, -0.000782012939453125, -0.14063799381256104, -3.814697265625e-06, -0.01404571533203125, 0.0, -0.006958603858947754, -0.0003209114074707031, 0.0, -1.33514404296875e-05, -0.01053619384765625, -3.24249267578125e-05, 0.0, -0.0003490447998046875, -0.0003261566162109375, 0.0, -9.5367431640625e-06, -9.72747802734375e-05, -0.0001373291015625, -3.0517578125e-05, -1.9073486328125e-06, -0.00047969818115234375, -6.866436888230965e-05, -0.0001773834228515625, -0.0028085708618164062, -0.0015439987182617188, -0.0008211135864257812, -1.9073486328125e-06, -7.259845733642578e-05, -0.000641942024230957, -3.24249267578125e-05, -8.392333984375e-05, -7.62939453125e-06, -1.9073486328125e-05, -0.038166046142578125, -2.1457672119140625e-06, -0.0001392364501953125, -0.0029039382934570312, -3.0517578125e-05, -0.000141143798828125, -0.0005723237991333008, -0.0005232095718383789, -5.7220458984375e-06, -0.000156402587890625, -1.33514404296875e-05, -3.814697265625e-06, -0.0006628036499023438, -4.1961669921875e-05, -0.00019276142120361328, 0.0, -0.019832611083984375, -1.9073486328125e-06, -6.67572021484375e-05, 0.0, -1.1444091796875e-05, -0.008802652359008789, -5.841255187988281e-06, -0.001049041748046875, -2.288818359375e-05, -0.00013947444676887244, -1.9073486328125e-06, -0.0005970001220703125, -3.814697265625e-05, -0.00037693968624807894, 0.0, -5.578990749199875e-05, 0.0], "score": -1.6729704734700235, "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "model_output": {"_type": "Module", "body": [{"bases": [{"_type": "Name", "id": "MinionCard"}], "_type": "ClassDef", "body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"args": [{"_type": "Str", "s": "Twilight Whelp"}, {"n": 1, "_type": "Num"}, {"attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "_type": "Attribute"}, {"attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}, "_type": "Attribute"}], "_type": "Call", "keywords": [{"value": {"attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}, "_type": "keyword", "arg": "minion_type"}, {"value": {"args": [{"args": [{"elts": [{"_type": "Template11", "hole0": 1}, {"_type": "Template10", "hole0": 1}], "_type": "List"}], "_type": "Call", "func": {"_type": "Name", "id": "Give"}}, {"_type": "Template18", "hole0": "SelfSelector"}, {"args": [{"args": [{"_type": "Call", "keywords": [{"value": {"args": [{"attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Attribute"}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}, "_type": "keyword", "arg": "condition"}], "func": {"_type": "Name", "id": "CardSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Count"}}], "_type": "Call", "keywords": [{"value": {"n": 0, "_type": "Num"}, "_type": "keyword", "arg": "value"}], "func": {"_type": "Name", "id": "GreaterThan"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "_type": "keyword", "arg": "battlecry"}], "func": {"attr": "__init__", "value": {"_type": "Template18", "hole0": "super"}, "_type": "Attribute"}}, "_type": "Expr"}], "name": "__init__"}, {"_type": "Template5", "hole1": 1, "hole0": 2}], "name": "TwilightWhelp"}]}, "choice_history": [50, 111, 176, 58, 90, "Twilight", "Whelp", "<EOS>", 163, 35, 112, "Minion", "Card", "<EOS>", 177, 61, 95, "__init__", "<EOS>", 150, 156, 149, "self", "<EOS>", 176, 59, 93, 14, 89, 11, 81, 23, 135, "super", "<EOS>", "__init__", "<EOS>", 166, 38, 121, "Twilight", " ", "Whelp", "<EOS>", 37, 117, "1", "<EOS>", 27, 81, 19, 112, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 27, 81, 19, 112, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 172, 49, 152, "minion_type", "<EOS>", 11, 81, 19, 112, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 49, 152, "battlecry", "<EOS>", 14, 88, 19, 112, "Battlecry", "<EOS>", 165, 30, 88, 19, 112, "Give", "<EOS>", 163, 33, 107, 164, 41, 128, "1", "<EOS>", 40, 127, "1", "<EOS>", 46, 135, "Self", "Selector", "<EOS>", 30, 89, 19, 112, "Greater", "Than", "<EOS>", 163, 30, 88, 19, 112, "Count", "<EOS>", 163, 30, 87, 19, 112, "Card", "Selector", "<EOS>", 171, 49, 152, "condition", "<EOS>", 14, 88, 19, 112, "Is", "Type", "<EOS>", 163, 27, 81, 19, 112, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 171, 49, 152, "value", "<EOS>", 21, 117, "0", "<EOS>", 72, 140, "2", "<EOS>", "1", "<EOS>"]}]}
