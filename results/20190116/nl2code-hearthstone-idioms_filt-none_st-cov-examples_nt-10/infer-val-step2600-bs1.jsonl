{"gold_code": "class AssassinsBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "beams": [{"score": -0.0712271551478807, "score_history": [-0.000484466552734375, -9.5367431640625e-06, -0.00024065549951046705, -0.00022456508304458112, -0.00271428469568491, -4.51792984677013e-05, -0.00022125244140625, -1.0728830375228426e-06, -0.000156402587890625, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005931854248046875, -1.9073486328125e-06, -0.0006122589111328125, -7.62939453125e-06, -1.9073486328125e-06, -0.0014925175346434116, -2.86102294921875e-05, -8.165533654391766e-05, -0.0002574920654296875, 0.0, 0.0, -0.0003173343720845878, 0.0, 0.0, 0.0, -4.76837158203125e-05, -1.52587890625e-05, -2.741813204920618e-06, 0.0, -0.05162346363067627, 0.0, 0.0, 0.0, -1.52587890625e-05, -0.008112786337733269, -8.344646857949556e-07, -0.0014569759368896484, 0.0, -2.1457672119140625e-06, 0.0, -0.00112152099609375, -2.09808349609375e-05, -3.814697265625e-06, -4.38690185546875e-05, -0.0009784698486328125, 0.0, -1.9073486328125e-06, -3.71926071238704e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.00020122302521485835, 0.0, -5.7220458984375e-06, 0.0, -3.3374089980497956e-06, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK>Blade", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Weapon"}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}, {"n": 4, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "<UNK> Blade"}, {"n": 5, "_type": "Num"}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}]}}], "hole1": "WeaponCard"}, "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [47, 111, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "<UNK>", " ", "Blade", "<EOS>", 42, 104, "5", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Weapon", "<EOS>", 142, 42, 104, "3", "<EOS>", 42, 104, "4", "<EOS>"]}]}
{"gold_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "beams": [{"score": -0.6736478842009888, "score_history": [-1.9073486328125e-06, -1.52587890625e-05, -0.0003327769518364221, -0.00012623491056729108, -8.22540732769994e-06, -1.1920917586394353e-07, -7.748603820800781e-06, -0.00017212340026162565, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.3653383255004883, -2.288818359375e-05, -0.012203216552734375, -4.57763671875e-05, 0.0, -5.960462772236497e-07, -3.075599670410156e-05, -7.152556463552173e-06, 0.0, 0.0, 0.0, -0.000418834388256073, 0.0, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001068115234375, 0.0, -6.29425048828125e-05, 0.0, -1.9073486328125e-06, 0.0, -7.2479248046875e-05, -0.004675388336181641, 0.0, -8.0108642578125e-05, 0.0, -0.0002593994140625, 0.0, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.004665374755859375, 0.0, -0.2755422592163086, 0.0, -3.24249267578125e-05, 0.0, -4.661083221435547e-05, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.00444793701171875, -1.9073486328125e-06, -1.71661376953125e-05, -2.6210909709334373e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0025635252241045237, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.002285582013428211, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 6, "_type": "Num"}, {"n": 7, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Boulderfist Ogre"}, {"n": 6, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}}}]}}], "hole1": "MinionCard"}, "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.PIRATE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "choice_history": [47, 111, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Boulderfist", " ", "Ogre", "<EOS>", 42, 104, "6", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "FREE", "<EOS>", 149, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "6", "<EOS>", 42, 104, "7", "<EOS>"]}]}
{"gold_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.weapon.base_attack += 2\n        player.hero.change_temp_attack(2)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and player.weapon is not None\n", "beams": [{"score": -2.5197176580294496, "score_history": [-1.9073486328125e-06, -0.001811981201171875, -9.894321920000948e-06, -1.585470999998506e-05, -3.862306402879767e-05, -0.0003855247050523758, -0.0002880096435546875, -1.1920928244535389e-07, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.0001068115234375, -0.0007190704345703125, -3.814697265625e-06, -0.014377593994140625, -1.9073486328125e-06, 0.0, -3.814689989667386e-06, -4.601478576660156e-05, -5.245207830739673e-06, -3.576278118089249e-07, 0.0, 0.0, -0.00010040763299912214, 0.0, 0.0, 0.0, -1.33514404296875e-05, 0.0, -9.5367431640625e-06, 0.0, -0.6573128700256348, 0.0, -1.9073486328125e-06, 0.0, -0.0007915496826171875, -0.0012097358703613281, -4.768370445162873e-07, -0.00176239013671875, 0.0, -2.503394853192731e-06, 0.0, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -2.372264498262666e-05, -3.576278118089249e-07, -0.0025644302368164062, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.00013995147310197353, 0.0, -0.0005123615264892578, 0.0, -3.814697265625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -2.3841855067985307e-07, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, -0.00011837482452392578, -2.3841855067985307e-07, -0.016946792602539062, -1.33514404296875e-05, -7.62939453125e-05, 0.0, -0.007053375244140625, 0.0, -0.5534133911132812, 0.0, -0.0006666183471679688, 0.0, -0.003914833068847656, -2.3841855067985307e-07, -0.02286313846707344, 0.0, -9.72747802734375e-05, -0.5914125442504883, -9.5367431640625e-06, -0.00140380859375, 0.0, -0.0017501115798950195, -6.9141146923357155e-06, -0.6331589221954346, -5.7220458984375e-06, -5.7220458984375e-06, -0.0004730224609375, -7.62939453125e-05, -0.003843726124614477, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "DeadlyPoison", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"body": [{"_type": "Template5", "hole2": [{"n": 2, "_type": "Num"}], "hole1": "change_temp_attack", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "target": {"_type": "Name", "id": "minion"}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Deadly Poison"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Template9"}}]}}], "hole1": "SpellCard"}, "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(2)\n", "choice_history": [47, 113, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Deadly", " ", "Poison", "<EOS>", 42, 104, "1", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 32, 69, 29, "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 155, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 57, 82, 23, 99, "minion", "<EOS>", 15, 69, 23, 99, "player", "<EOS>", "minions", "<EOS>", 154, 63, 120, 23, 99, "minion", "<EOS>", "change_temp_attack", "<EOS>", 141, 42, 104, "2", "<EOS>"]}]}
{"gold_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "beams": [{"score": -1.3735578385432845, "score_history": [-2.288818359375e-05, -1.9073486328125e-06, -0.008004972711205482, -0.0010869521647691727, -6.437280717364047e-06, -2.4434724764432758e-05, -3.24249267578125e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -8.7738037109375e-05, -1.1444091796875e-05, -3.0517578125e-05, -4.38690185546875e-05, -1.9073486328125e-06, -1.52587890625e-05, -5.7220458984375e-06, 0.0, -2.3841855067985307e-07, -6.771086918888614e-05, -3.933906555175781e-06, 0.0, -1.9073486328125e-06, 0.0, -6.61555677652359e-05, 0.0, -7.62939453125e-06, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -2.622600959512056e-06, 0.0, -0.003199577098712325, 0.0, -1.9073486328125e-06, 0.0, -3.0517578125e-05, -0.00013136863708496094, -3.814697265625e-06, -0.10692787170410156, 0.0, -0.7435731887817383, 0.0, -0.004177093505859375, -0.000141143798828125, -9.5367431640625e-06, 0.0, -0.02016162872314453, 0.0, -0.11623096466064453, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, 0.0, -1.9073486328125e-06, -0.0001239776611328125, -1.9073486328125e-06, -7.62939453125e-06, -4.00543212890625e-05, 0.0, -1.52587890625e-05, -0.0002288818359375, -1.33514404296875e-05, -9.5367431640625e-06, -9.5367431640625e-06, -0.00032067298889160156, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -3.62396240234375e-05, -0.34715190529823303, 0.0, -4.00543212890625e-05, -0.0021953582763671875, -0.0001087188720703125, -0.0005321502685546875, -0.003779768943786621, -1.9073486328125e-06, 0.0, -0.005253791809082031, -7.62939453125e-06, -0.0001678466796875, 0.0, -0.0001392364501953125, 0.0, -0.0007114410400390625, -5.7220458984375e-06, -1.9073486328125e-06, -1.1444091796875e-05, -0.00058746337890625, 0.0, -0.0019969940185546875, -7.62939453125e-06, -0.0006607770919799805, -2.86102294921875e-05, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0029506683349609375, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -7.62939453125e-06, -3.814697265625e-06, -0.00131988525390625, -2.09808349609375e-05, -7.43865966796875e-05, -3.5758421290665865e-07, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-06, -0.00020704588678199798, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.0002787921985145658, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 6, "_type": "Num"}, {"n": 5, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Fire Elemental"}, {"n": 6, "_type": "Num"}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Name", "id": "MINION_TYPE"}}}, {"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Damage"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}]}, {"func": {"_type": "Name", "id": "CharacterSelector"}, "_type": "Call", "keywords": [{"arg": "players", "_type": "keyword", "value": {"_type": "Template6", "hole0": "BothPlayer"}}, {"arg": "picker", "_type": "keyword", "value": {"_type": "Template6", "hole0": "UserPicker"}}]}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [47, 111, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Fire", " ", "Elemental", "<EOS>", 42, 104, "6", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 150, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 142, 35, 76, 23, 99, "Damage", "<EOS>", 141, 42, 104, "1", "<EOS>", 35, 75, 23, 99, "Character", "Selector", "<EOS>", 150, 131, "players", "<EOS>", 28, 121, "Both", "Player", "<EOS>", 131, "picker", "<EOS>", 28, 121, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "6", "<EOS>", 42, 104, "5", "<EOS>"]}]}
{"gold_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "beams": [{"score": -0.06355054760089018, "score_history": [-0.0001239776611328125, -6.103515625e-05, -0.00033063223236240447, -1.3470558769768104e-05, -0.0007676529930904508, -2.3841789698053617e-07, -0.00016248224710579962, -1.6093124941107817e-05, -0.0022220611572265625, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-05, -0.000301361083984375, -4.57763671875e-05, -3.4332275390625e-05, -2.288818359375e-05, -1.9073486328125e-06, 0.0, -4.124641418457031e-05, -7.748573807475623e-06, -3.576278118089249e-07, 0.0, 0.0, -0.0005214216653257608, -1.1920928244535389e-07, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -1.1563301086425781e-05, 0.0, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.33514404296875e-05, -0.00012791145127266645, 0.0, -7.2479248046875e-05, 0.0, -0.0004119873046875, -2.3841855067985307e-07, -7.62939453125e-06, -2.47955322265625e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.0011625764891505241, -1.4662635294371285e-05, -4.00543212890625e-05, -0.04571533203125, 0.0, -0.0038189562037587166, -0.00021705696417484432, -0.0012454986572265625, -1.9073486328125e-06, -0.0017375096213072538, -2.2649765014648438e-06, -3.576278118089249e-07, -0.000519747321959585, 0.0, -0.0014074299251660705, 0.0, -0.000415802001953125, -3.814697265625e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.0014324188232421875, -7.62939453125e-06, -1.1444091796875e-05, -7.152493708417751e-07, -1.9073486328125e-06, -5.7220458984375e-06, -2.86102294921875e-05, -5.7220458984375e-06, -3.826613465207629e-05, -8.344646857949556e-07, -3.814697265625e-05, -0.000171661376953125, -3.218598067178391e-06, -2.1099860532558523e-05], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventor", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}, {"n": 4, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Gnomish Inventor"}, {"n": 4, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"_type": "Template6", "hole0": "Draw"}, {"_type": "Template6", "hole0": "PlayerSelector"}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [47, 111, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Gnomish", " ", "Inventor", "<EOS>", 42, 104, "4", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 149, 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 142, 45, 121, "Draw", "<EOS>", 45, 121, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "2", "<EOS>", 42, 104, "4", "<EOS>"]}]}
{"gold_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n", "beams": [{"score": -0.4086404226639573, "score_history": [-6.866455078125e-05, -1.9073486328125e-05, -2.90866428258596e-05, -6.663577369181439e-05, -0.00010692501382436603, -1.4535326045006514e-05, -7.069110870361328e-05, -3.576278118089249e-07, -9.5367431640625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -0.0001277923583984375, -0.0001087188720703125, -1.1444091796875e-05, -0.0004711151123046875, -1.9073486328125e-06, 0.0, -7.867782187531702e-06, -4.4226646423339844e-05, -3.14708158839494e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -2.610648334666621e-05, -6.437280717364047e-06, 0.0, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -2.6702880859375e-05, -3.814697265625e-06, -0.0015300512313842773, 0.0, -9.5367431640625e-06, 0.0, -0.0010967254638671875, -0.001461029052734375, -1.311301275563892e-06, -0.0019207000732421875, 0.0, -7.033347174001392e-06, 0.0, -0.0003910064697265625, -9.5367431640625e-06, -1.9073486328125e-06, -4.363048719824292e-05, -2.3841855067985307e-07, -0.04017353057861328, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00013840149040333927, 0.0, -0.00033962720772251487, -1.1920928244535389e-07, -5.7220458984375e-06, -9.1552734375e-05, -9.5367431640625e-06, -2.861022494471399e-06, -3.576278118089249e-07, 0.0, -3.814697265625e-06, -5.14984130859375e-05, -4.768370445162873e-07, -0.16987895965576172, -4.1961669921875e-05, -4.00543212890625e-05, 0.0, -0.01078033447265625, -1.1920928244535389e-07, -0.00408935546875, -3.814697265625e-06, -0.0001163482666015625, -1.9073486328125e-06, -0.013916015625, -8.344646857949556e-07, -0.0018227810505777597, 0.0, -4.38690185546875e-05, -0.00238037109375, -4.57763671875e-05, -8.7738037109375e-05, 0.0, -0.0006104707717895508, -9.417489309271332e-06, -0.0321507453918457, -6.675719760096399e-06, -9.5367431640625e-06, -4.1961669921875e-05, -5.91278076171875e-05, -0.12392447888851166, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "HeroicStrike", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"body": [{"_type": "Template5", "hole2": [{"n": 3, "_type": "Num"}], "hole1": "change_temp_attack", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "target": {"_type": "Name", "id": "minion"}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Heroic Strike"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Template9"}}]}}], "hole1": "SpellCard"}, "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "choice_history": [47, 113, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Heroic", " ", "Strike", "<EOS>", 42, 104, "2", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 32, 69, 29, "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 155, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 57, 82, 23, 99, "minion", "<EOS>", 15, 69, 23, 99, "player", "<EOS>", "minions", "<EOS>", 154, 63, 120, 23, 99, "minion", "<EOS>", "change_temp_attack", "<EOS>", 141, 42, 104, "3", "<EOS>"]}]}
{"gold_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "beams": [{"score": -0.30913084428532756, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -0.19345051050186157, -0.0012344843707978725, -7.271740287251305e-06, -3.5761295293923467e-06, -9.5367431640625e-06, -2.3841855067985307e-07, -3.24249267578125e-05, -3.62396240234375e-05, -1.9073486328125e-06, -5.14984130859375e-05, -0.00211334228515625, -6.866455078125e-05, -0.000179290771484375, -3.814697265625e-06, 0.0, -1.0490362910786644e-05, -2.491474151611328e-05, -2.2768972485209815e-05, -1.1920928244535389e-07, 0.0, 0.0, -0.00030664820224046707, -7.748603820800781e-06, 0.0, 0.0, -6.67572021484375e-05, -7.62939453125e-06, -1.156325470219599e-05, 0.0, -0.0018506050109863281, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-06, -4.0531158447265625e-05, 0.0, -7.987022399902344e-06, 0.0, -0.10653257369995117, 0.0, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.001312255859375, -2.288818359375e-05, 0.0, 0.0, 0.0, -4.57763671875e-05, -1.9073486328125e-06, 0.0, -2.3603150111739524e-05, -1.847726889536716e-05, 0.0, 0.0, -3.8627462345175445e-05, -4.7563549742335454e-05, -0.0003910064697265625, -3.814697265625e-05, -0.0009615421295166016, 0.0, -1.52587890625e-05, -9.5367431640625e-06, -3.504752748995088e-05, -2.3841855067985307e-07], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronbarkProtector", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 8, "_type": "Num"}, {"n": 8, "_type": "Num"}], "keywords": [{"arg": "taunt", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Ironbark Protector"}, {"n": 8, "_type": "Num"}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}]}}], "hole1": "MinionCard"}, "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "choice_history": [47, 111, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Ironbark", " ", "Protector", "<EOS>", 42, 104, "8", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "8", "<EOS>", 42, 104, "8", "<EOS>", 149, 131, "taunt", "<EOS>", 24, 100, "True", "<EOS>"]}]}
{"gold_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.taunt = True\n", "beams": [{"score": -2.1303416703867484, "score_history": [0.0, -0.00072479248046875, -0.010475648567080498, -0.00016546249389648438, -0.016482098028063774, -0.00015913730021566153, -0.0013310518115758896, -5.517667159438133e-05, -1.52587890625e-05, 0.0, 0.0, -7.62939453125e-06, 0.0, -1.33514404296875e-05, -6.67572021484375e-05, -1.9073486328125e-06, -5.14984130859375e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.172238186583854e-05, -0.000331878662109375, -8.583047019783407e-06, -4.76837158203125e-05, -9.59634780883789e-05, -0.0002651214599609375, -7.879726763349026e-05, -1.9073486328125e-06, 0.0, 0.0, -7.748302596155554e-05, -1.1920928244535389e-07, 0.0, 0.0, -5.7220458984375e-06, 0.0, -7.6293927122605965e-06, 0.0, -0.003302335739135742, 0.0, 0.0, 0.0, -0.000274658203125, -0.0018934011459350586, 0.0, -0.0023651123046875, 0.0, -0.37642478942871094, 0.0, -0.00528717041015625, 0.0, -9.5367431640625e-06, 0.0, -0.00012969970703125, -4.1961669921875e-05, -0.00018310546875, 0.0, -6.139278411865234e-05, -5.7220458984375e-06, -0.010964274406433105, 0.0, -3.933906555175781e-06, 0.0, -1.0490395652595907e-05, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.4901160284352954e-05, -0.00016532962035853416, -0.5526971817016602, -2.6702880859375e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -8.106231689453125e-06, 0.0, -3.933906555175781e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -2.682209014892578e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -2.491474151611328e-05, -1.1920928244535389e-07, -0.0593109130859375, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -6.67572021484375e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -4.291534423828125e-06, -0.0464324951171875, 0.0, -1.52587890625e-05, -0.0035181045532226562, -0.0001125335693359375, -0.010526048019528389, -3.814697265625e-06, -0.0001087188720703125, -3.814697265625e-06, -0.00018310546875, 0.0, -7.2479248046875e-05, 0.0, -3.814697265625e-05, -3.814697265625e-06, -3.814697265625e-06, -2.622604142743512e-06, -0.0763019323348999, 0.0, -3.4332275390625e-05, -0.000652313232421875, -0.0016040802001953125, -9.5367431640625e-06, 0.0, -0.0014483928680419922, -4.291534423828125e-06, -1.9073486328125e-06, -0.31126880645751953, 0.0, -0.634060263633728, -2.264974000354414e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "MarkOfTheWild", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"_type": "Template5", "hole2": [{"n": 2, "_type": "Num"}], "hole1": "change_attack", "hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}, {"_type": "Template5", "hole2": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"_type": "Template6", "hole0": "Taunt"}]}], "hole1": "add_buff", "hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Template9"}}], "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}]}}], "hole1": "SpellCard"}, "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.add_buff(Buff(Taunt()))\n", "choice_history": [47, 113, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 42, 104, "2", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 32, 69, 29, "FREE", "<EOS>", 149, 131, "target_func", "<EOS>", 15, 69, 15, 69, 23, 99, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 156, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 63, 120, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 141, 42, 104, "2", "<EOS>", 63, 120, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 141, 35, 76, 23, 99, "Buff", "<EOS>", 141, 45, 121, "Taunt", "<EOS>"]}]}
{"gold_code": "class MultiShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            target = game.random_choice(targets)\n            targets.remove(target)\n            target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "beams": [{"score": -3.150178378257671, "score_history": [-0.000152587890625, -0.009734153747558594, -0.0008369756978936493, -0.0002051381452474743, -2.3752450942993164e-05, -2.110004425048828e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-05, -2.09808349609375e-05, -1.52587890625e-05, -0.0005283355712890625, -6.103515625e-05, -1.71661376953125e-05, -3.24249267578125e-05, -3.62396240234375e-05, -0.0005203323671594262, 0.0, -1.9073486328125e-06, -3.0517578125e-05, -0.0004070120630785823, 0.0, -7.62939453125e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -2.8848648071289062e-05, 0.0, -0.008306503295898438, 0.0, -3.0517578125e-05, 0.0, -7.05718994140625e-05, -0.17402814328670502, -6.914137884450611e-06, -0.0009937286376953125, 0.0, -1.9073486328125e-05, 0.0, -0.000518798828125, -4.1961669921875e-05, -5.7220458984375e-06, -5.841255187988281e-06, -1.1920928244535389e-07, -0.02688884735107422, -1.71661376953125e-05, -8.0108642578125e-05, -1.9073486328125e-06, 0.0, -7.104873657226562e-05, 0.0, -9.965896606445312e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -3.0517578125e-05, -1.9073486328125e-06, -0.00012969970703125, -0.000102996826171875, -0.00200653076171875, -7.62939453125e-06, -2.288818359375e-05, -0.0035295486450195312, 0.0, -0.0007419586181640625, -7.82012939453125e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.000186920166015625, 0.0, -0.000186920166015625, -1.9073486328125e-05, -0.00011265277862548828, -3.814697265625e-06, -9.72747802734375e-05, -0.000186920166015625, -3.4332275390625e-05, -5.7220458984375e-06, -7.62939453125e-06, -0.006679534912109375, 0.0, -0.0005893707275390625, 0.0, -0.0015844106674194336, 0.0, -0.001960026565939188, 0.0, -0.6843996047973633, -0.00026702880859375, -8.20159912109375e-05, 0.0, -0.010420918464660645, 0.0, -7.62939453125e-06, -2.288818359375e-05, -0.00026702880859375, 0.0, -0.004916191101074219, 0.0, -8.0108642578125e-05, -7.62939453125e-06, -0.0021343231201171875, -0.000975489616394043, 0.0, -0.007308006286621094, -3.814697265625e-06, -1.4716005325317383, 0.0, -0.03827476501464844, -0.016867637634277344, -0.0009822845458984375, -0.006186485290527344, -7.62939453125e-05, -0.23352289199829102, 0.0, -0.0016118288040161133, -1.9073486328125e-06, -5.7220458984375e-06, -2.09808349609375e-05, -0.00011444091796875, -3.62396240234375e-05, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -8.96453857421875e-05, 0.0, -0.0002446174039505422, -3.814697265625e-06, -5.7220458984375e-05, -0.004061698913574219, 0.0, -0.023931264877319336, 0.0, -1.52587890625e-05, -3.814697265625e-06, -0.00022411346435546875, -1.9073486328125e-06, -0.000316619873046875, -0.00054931640625, -6.4849853515625e-05, -0.00042247772216796875, 0.0, -0.0013885498046875, -0.0026397705078125, -0.0007114410400390625, -8.58306884765625e-05, -0.000255584716796875, -0.0004711151123046875, -1.1682510375976562e-05, -4.768370445162873e-07, -0.0006275177001953125, -3.814697265625e-06, -1.3470649719238281e-05, -1.1920928244535389e-07, -8.0108642578125e-05, -0.0032444000244140625, -3.814697265625e-06, -0.00048828125, -5.14984130859375e-05, -7.05718994140625e-05, -2.47955322265625e-05, -7.62939453125e-06, -5.14984130859375e-05, -0.00479888916015625, -1.33514404296875e-05, -4.38690185546875e-05, 0.0, -3.635883331298828e-05, 0.0, -0.0011881589889526367, 0.0, -5.14984130859375e-05, -9.5367431640625e-05, -1.9073486328125e-06, -4.38690185546875e-05, 0.0, -4.38690185546875e-05, 0.0, -7.62939453125e-06, 0.0, -0.0014677047729492188, -0.002696990966796875, -0.0002002716064453125, -0.0008392333984375, -9.5367431640625e-06, -1.9073486328125e-06, -2.8490801923908293e-05, -1.1920928244535389e-07, -4.9591064453125e-05, -9.5367431640625e-06, -3.0517578125e-05, -0.0023937225341796875, -2.6702880859375e-05, -0.0004425048828125, 0.0, -0.001560211181640625, 0.0, -0.0019127130508422852, 0.0, -0.001270817476324737, 0.0, -0.0001468658447265625, -0.12396907806396484, -2.6702880859375e-05, -1.1444091796875e-05, -0.001476287841796875, -0.2425384670495987, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole7": [{"body": [{"_type": "Return", "value": {"_type": "BoolOp", "op": {"_type": "And"}, "values": [{"func": {"_type": "Attribute", "attr": "can_use", "value": {"_type": "Template6", "hole0": "super"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}]}, "_type": "Compare", "comparators": [{"n": 2, "_type": "Num"}], "ops": [{"_type": "GtE"}]}]}}], "name": "can_use", "_type": "FunctionDef", "args": {"_type": "arguments", "args": [{"_type": "Template7"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}}], "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "Multi-Shot", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}, "_type": "Call", "args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}]}}, {"body": [{"_type": "Template5", "hole2": [{"func": {"_type": "Attribute", "attr": "effective_spell_damage", "value": {"_type": "Name", "id": "player"}}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "For", "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"n": 0, "_type": "Num"}, {"_type": "Name", "id": "self"}]}, "target": {"_type": "Name", "id": "i"}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Multi-Shot"}, {"n": 4, "_type": "Num"}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Template9"}}]}}], "hole1": "SpellCard"}, "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, self):\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "choice_history": [47, 114, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Multi-Shot", "<EOS>", 42, 104, "4", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 32, 69, 29, "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 156, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 52, 68, 141, 40, 99, "minions", "<EOS>", 18, 76, 15, 69, 23, 99, "copy", "<EOS>", "copy", "<EOS>", 141, 32, 69, 15, 69, 23, 99, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 57, 82, 23, 99, "i", "<EOS>", 18, 76, 23, 99, "range", "<EOS>", 142, 42, 104, "0", "<EOS>", 40, 99, "self", "<EOS>", 154, 63, 120, 23, 99, "minion", "<EOS>", "damage", "<EOS>", 142, 35, 76, 15, 69, 23, 99, "player", "<EOS>", "effective_spell_damage", "<EOS>", 141, 42, 104, "3", "<EOS>", 40, 99, "self", "<EOS>", 154, 58, 83, "can_use", "<EOS>", 3, 129, 137, 0, 1, 128, "player", "<EOS>", 1, 128, "game", "<EOS>", 154, 61, 106, 17, 72, 4, 142, 35, 76, 15, 69, 28, 121, "super", "<EOS>", "can_use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 36, 79, 18, 76, 23, 99, "len", "<EOS>", 141, 32, 69, 15, 69, 23, 99, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 138, 8, 141, 42, 104, "2", "<EOS>"]}]}
{"gold_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word: Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(2)\n        player.draw()\n", "beams": [{"score": -2.6926461054376745, "score_history": [-3.814697265625e-06, -3.814697265625e-05, -2.0146166207268834e-05, -0.02018403634428978, -0.6232628226280212, -0.019817287102341652, -3.2172829378396273e-06, -1.2159347534179688e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -4.57763671875e-05, -3.814697265625e-06, -7.05718994140625e-05, -0.0004024505615234375, -1.9073486328125e-06, -0.00904083251953125, -3.814697265625e-06, -3.814697265625e-06, -8.34461570775602e-06, -0.0002390146255493164, -0.007188915275037289, -0.005219459533691406, -1.4424319488171022e-05, 0.0, -1.9073486328125e-06, 0.0, -8.344568414031528e-07, -8.344646857949556e-07, 0.0, 0.0, -7.62939453125e-06, 0.0, -9.536714060232043e-06, 0.0, -0.004534482955932617, 0.0, -3.814697265625e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.0008759498596191406, -1.1920928244535389e-07, -0.0040798187255859375, 0.0, -0.005095481872558594, -8.344646857949556e-07, -7.62939453125e-06, 0.0, -0.00037384033203125, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.0008783332305029035, 0.0, -0.029803872108459473, 0.0, -7.748603820800781e-06, 0.0, -1.7881371604744345e-05, 0.0, -1.33514404296875e-05, -1.33514404296875e-05, -4.00543212890625e-05, -5.9246951423119754e-05, -0.0002555525570642203, -0.2664060592651367, -6.29425048828125e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.283687591552734e-05, 0.0, -7.867813110351562e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -5.125993993715383e-06, -7.152555099310121e-07, -1.9073486328125e-06, 0.0, -7.069110870361328e-05, -4.172316494077677e-06, -0.003162384033203125, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -4.57763671875e-05, -0.0004567074356600642, -0.00011169854406034574, -8.344629350176547e-06, -0.5058008432388306, -1.0728823326644488e-05, -4.1961669921875e-05, -0.006073951721191406, -1.33514404296875e-05, -0.24018293619155884, -3.3378591979271732e-06, -6.4849853515625e-05, -0.0006465911865234375, -0.00104522705078125, 0.0, -7.43865966796875e-05, 0.0, -0.0004329681396484375, -9.059865078597795e-06, -1.5497207641601562e-05, -1.9073468138230965e-06, -0.15419459342956543, 0.0, -7.62939453125e-06, -2.6702880859375e-05, -4.9591064453125e-05, -3.814697265625e-06, 0.0, -0.0032711883541196585, -7.200239633675665e-05, -5.7220458984375e-06, -0.004306793212890625, -5.14984130859375e-05, -0.6903094053268433, -0.08343907445669174], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "PowerWordShield", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"_type": "Template5", "hole2": [{"n": 1, "_type": "Num"}], "hole1": "change_attack", "hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}, {"_type": "Template5", "hole2": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"_type": "Template6", "hole0": "<UNK>"}]}], "hole1": "add_buff", "hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Template9"}}], "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}]}}], "hole1": "SpellCard"}, "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [47, 113, "Power", "Word", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Power", " ", "Word", " ", "Shield", "<EOS>", 42, 104, "1", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 32, 69, 29, "FREE", "<EOS>", 149, 131, "target_func", "<EOS>", 15, 69, 15, 69, 23, 99, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 156, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 63, 120, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 141, 42, 104, "1", "<EOS>", 63, 120, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 141, 35, 76, 23, 99, "Buff", "<EOS>", 141, 45, 121, "<UNK>", "<EOS>"]}]}
{"gold_code": "class SenjinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "beams": [{"score": -0.006546195027311796, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -0.0008553183870390058, -0.00012790338951162994, -1.3589766240329482e-05, -4.768344297190197e-07, -1.52587890625e-05, -6.437280717364047e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -2.09808349609375e-05, -0.0014133453369140625, -3.814697265625e-06, -0.000530242919921875, -9.5367431640625e-06, 0.0, -2.9802276912960224e-06, -3.0875205993652344e-05, -1.4305104514278355e-06, -2.3841855067985307e-07, 0.0, 0.0, -0.0008520641713403165, 0.0, 0.0, 0.0, -3.814697265625e-06, 0.0, -5.14984130859375e-05, 0.0, -4.00543212890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -0.00043141841888427734, 0.0, -3.814697265625e-06, 0.0, -6.151199340820312e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.0006694793701171875, -2.09808349609375e-05, 0.0, -1.1918018572032452e-07, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.814697265625e-06, -6.532591942232102e-05, -4.768370445162873e-07, -1.9073486328125e-06, 0.0, -7.343022298300639e-05, -2.50339189733495e-06, -0.00018310546875, -1.9073486328125e-06, -0.0007181167602539062, 0.0, -6.29425048828125e-05, -0.0001354217529296875, -4.2319297790527344e-05, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}, {"n": 5, "_type": "Num"}], "keywords": [{"arg": "taunt", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Sen'jin Shieldmasta"}, {"n": 4, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Template9"}}]}}], "hole1": "MinionCard"}, "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "choice_history": [47, 111, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Sen'jin", " ", "Shieldmasta", "<EOS>", 42, 104, "4", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "3", "<EOS>", 42, 104, "5", "<EOS>", 149, 131, "taunt", "<EOS>", 24, 100, "True", "<EOS>"]}]}
{"gold_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "beams": [{"score": -0.27894797939165983, "score_history": [-1.1444091796875e-05, -0.002803802490234375, -1.8715683836489916e-05, -3.40932747349143e-05, 0.0, -6.1966420616954565e-06, -1.1444091796875e-05, 0.0, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.0001583099365234375, -0.0002040863037109375, -2.09808349609375e-05, -9.5367431640625e-06, 0.0, -2.3841830625315197e-06, -3.349781036376953e-05, -7.152543730626348e-06, 0.0, -5.7220458984375e-06, 0.0, -7.37807058612816e-05, -1.9073486328125e-06, 0.0, 0.0, -3.0517578125e-05, 0.0, -1.33514404296875e-05, 0.0, -0.13976097106933594, 0.0, -9.5367431640625e-06, 0.0, -9.34600830078125e-05, -0.0011706352233886719, -2.384185791015625e-06, -2.09808349609375e-05, 0.0, -9.655952453613281e-06, 0.0, -7.2479248046875e-05, -1.9073486328125e-06, 0.0, -9.655952453613281e-06, -4.768370445162873e-07, -0.005023002624511719, -1.9073486328125e-06, -4.76837158203125e-05, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.00018131732940673828, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -1.9073486328125e-05, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -1.52587890625e-05, -5.340576171875e-05, 0.0, -0.026442527770996094, -3.814697265625e-05, -0.0001888275146484375, -3.814697265625e-06, -0.0003490447998046875, -3.24249267578125e-05, -0.014563560485839844, -1.9073486328125e-06, -0.00418853759765625, 0.0, -0.0014394521713256836, -9.775161743164062e-06, -0.010207796469330788, -4.768370445162873e-07, -0.00140380859375, -1.9073486328125e-06, -1.9073486328125e-06, -0.06716156005859375, -0.00092315673828125, -2.288818359375e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.53131103515625e-05, 0.0, -0.0004260540008544922, -2.0265579223632812e-06, -0.0001773834228515625, -0.0001373291015625, 0.0, -0.0009529776871204376, 0.0, -3.62396240234375e-05, -1.9073486328125e-06, -0.00012969970703125, -3.814697265625e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "SinisterStrike", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"_type": "Template5", "hole2": [{"func": {"_type": "Attribute", "attr": "effective_spell_damage", "value": {"_type": "Name", "id": "player"}}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Template9"}}]}}], "hole1": "SpellCard"}, "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "choice_history": [47, 113, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Sinister", " ", "Strike", "<EOS>", 42, 104, "1", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 32, 69, 29, "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 155, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 63, 120, 15, 69, 15, 69, 23, 99, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 142, 35, 76, 15, 69, 23, 99, "player", "<EOS>", "effective_spell_damage", "<EOS>", 141, 42, 104, "3", "<EOS>", 40, 99, "self", "<EOS>"]}]}
{"gold_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"score": -4.57550562177839, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -0.0037406589835882187, -0.00021610349358525127, -1.6687998140696436e-05, -1.1444091796875e-05, -4.768370445162873e-07, -5.7220458984375e-06, -5.340576171875e-05, -6.29425048828125e-05, -2.288818359375e-05, -4.76837158203125e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -2.264975591970142e-06, 0.0, 0.0, 0.0, -1.1444075425970368e-05, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -9.298007353208959e-05, 0.0, -0.030988216400146484, 0.0, -0.0001201629638671875, 0.0, -5.53131103515625e-05, -0.0033636093139648438, -4.52994936495088e-06, -9.72747802734375e-05, -2.47955322265625e-05, -0.010305404663085938, -3.576278118089249e-07, -3.62396240234375e-05, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -0.0004863739013671875, 0.0, -0.2271413803100586, 0.0, 0.0, -0.0001251697540283203, 0.0, -1.9073486328125e-06, -9.918212890625e-05, 0.0, 0.0, -0.00015664094826206565, 0.0, -3.814697265625e-06, -0.005077362060546875, -0.006740570068359375, 0.0, -1.9073486328125e-06, -0.33924752473831177, -0.6035651564598083, -0.000270843505859375, -0.27374267578125, -0.31392669677734375, -3.0517578125e-05, -7.62939453125e-06, -0.2476557493209839, -0.05025647580623627, -0.11834335327148438, -2.09808349609375e-05, -0.06586170196533203, 0.0, -0.0059680938720703125, -0.0001068115234375, -0.4327220916748047, -0.020343780517578125, -0.00042724609375, 0.0, 0.0, -0.05327332019805908, -0.00020074844360351562, 0.0, -7.62939453125e-06, -9.72747802734375e-05, 0.0, -4.38690185546875e-05, 0.0, -0.0012836456298828125, 0.0, -0.33912086486816406, 0.0, -0.46784210205078125, -0.0028438568115234375, 0.0, 0.0, -0.7839880585670471, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.11276817321777344, 0.0, -0.02952420711517334, -2.5510787963867188e-05, -0.021907806396484375, 0.0, -0.00010371208190917969, -7.62939453125e-06, -1.1920928244535389e-07, -2.8729347832268104e-05, 0.0, -0.0002689360990189016, 0.0, -1.9073486328125e-05, -0.0001430511474609375, -1.33514404296875e-05, -1.1444091796875e-05, -0.000213623046875, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, 0.0, 0.0, -1.52587890625e-05, -1.1920883480343036e-07, -9.536738616588991e-07, -1.9073486328125e-06, -1.71661376953125e-05, -2.1934269170742482e-05, -1.1920928244535389e-07], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 4, "_type": "Num"}, {"n": 3, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Name", "id": "MINION_TYPE"}}}, {"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "<UNK>"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "<UNK>"}, "_type": "Call", "keywords": [{"arg": "conditions", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"_type": "Attribute", "attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}]}}]}]}, {"func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call", "args": [{"_type": "Template6", "hole0": "Draw"}, {"_type": "Template6", "hole0": "PlayerSelector"}]}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(<UNK>(<UNK>(conditions=[IsType(MINION_TYPE.MECH)])),\n            ActionTag(Draw(), PlayerSelector())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [47, 111, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Succubus", "<EOS>", 42, 104, "2", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 32, 69, 29, "FREE", "<EOS>", 150, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 142, 35, 76, 23, 99, "<UNK>", "<EOS>", 141, 35, 75, 23, 99, "<UNK>", "<EOS>", 149, 131, "conditions", "<EOS>", 21, 95, 141, 35, 76, 23, 99, "Is", "Type", "<EOS>", 141, 32, 69, 23, 99, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 35, 76, 23, 99, "Action", "Tag", "<EOS>", 142, 45, 121, "Draw", "<EOS>", 45, 121, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "4", "<EOS>", 42, 104, "3", "<EOS>"]}]}
{"gold_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "beams": [{"score": -0.7663867817827423, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0002320735511602834, -0.00027629052055999637, -2.3841855067985307e-07, 0.0, -7.62939453125e-06, -1.0132738680113107e-05, -1.9073486328125e-06, 0.0, 0.0, -2.86102294921875e-05, -0.6431808471679688, -9.5367431640625e-06, -0.005505561828613281, -1.71661376953125e-05, 0.0, -1.1920928244535389e-07, -7.104873657226562e-05, -8.58306884765625e-06, -1.1920928244535389e-07, 0.0, 0.0, -0.00026899809017777443, 0.0, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.00011646747589111328, 0.0, -4.1961669921875e-05, 0.0, 0.0, 0.0, -1.52587890625e-05, -0.0004426240921020508, 0.0, -1.52587890625e-05, 0.0, -9.775161743164062e-06, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.10422706604003906, -1.9073486328125e-06, -1.1444091796875e-05, -8.342321962118149e-07, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.00718514621257782, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.004656306467950344, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WarGolem", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 7, "_type": "Num"}, {"n": 7, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "War Golem"}, {"n": 7, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}]}}], "hole1": "MinionCard"}, "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "choice_history": [47, 111, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "War", " ", "Golem", "<EOS>", 42, 104, "7", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "7", "<EOS>", 42, 104, "7", "<EOS>"]}]}
{"gold_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(\n            MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(),\n            TargetSelector())])])\n", "beams": [{"score": -1.8130180407641134, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.005497171077877283, -0.00015008266200311482, -1.978417276404798e-05, -1.1444091796875e-05, -1.1920922133867862e-06, -0.0008087158203125, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -7.43865966796875e-05, -1.33514404296875e-05, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, -1.1920928244535389e-07, -2.3841855067985307e-07, 0.0, 0.0, -1.2993798009119928e-05, -3.576278118089249e-07, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -3.313985507702455e-05, 0.0, -0.0015338659286499023, 0.0, -1.1444091796875e-05, 0.0, -3.0517578125e-05, -0.0011427401332184672, 0.0, -0.0002918243408203125, 0.0, -0.00010347366333007812, -3.576278118089249e-07, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0001354217529296875, 0.0, -0.001895904541015625, 0.0, -1.1682510375976562e-05, 0.0, -1.7642974853515625e-05, 0.0, -1.1444091796875e-05, -0.00029754638671875, -3.0517578125e-05, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -9.5367431640625e-06, -1.1920838005607948e-07, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.53131103515625e-05, -2.586841583251953e-05, -2.50339189733495e-06, -1.1444091796875e-05, -1.9073486328125e-06, -1.2636128303711303e-05, -7.152555099310121e-07, -0.0018215179443359375, -7.62939453125e-06, -3.24249267578125e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -0.022180557250976562, -1.9073486328125e-06, -3.4332275390625e-05, -3.24249267578125e-05, -1.9073486328125e-06, -2.3245811462402344e-05, 0.0, -9.918212890625e-05, -0.10021400451660156, -7.62939453125e-06, -0.12964355945587158, -9.536738616588991e-07, -9.5367431640625e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -3.8385362131521106e-05, -0.0002117156982421875, -1.9073486328125e-06, -4.00543212890625e-05, -0.0014629364013671875, -0.0001239776611328125, -2.09808349609375e-05, -3.814697265625e-06, -0.01503002643585205, 0.0, 0.0, -1.0858497619628906, -0.000225067138671875, -0.0001850128173828125, -2.47955322265625e-05, -3.24249267578125e-05, -5.7220458984375e-06, 0.0, -0.0009174346923828125, 0.0, -1.9073486328125e-06, -0.0008792877197265625, -2.09808349609375e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.0002925395965576172, -0.11589443683624268, 0.0, 0.0, -0.0064182281494140625, -3.814697265625e-06, -0.04029190540313721, 0.0, -7.62939453125e-06, -2.288818359375e-05, -3.814697265625e-06, 0.0, -0.004175424575805664, -2.3841855067985307e-07, -5.7220458984375e-06, -0.04868125915527344, -8.7738037109375e-05, -1.9073486328125e-06, -2.09808349609375e-05, -0.0009396029636263847, -0.042137861251831055, 0.0, -1.9073486328125e-06, -0.008749008178710938, -1.52587890625e-05, -0.17303313314914703, 0.0, -0.0004787445068359375, 0.0, -7.68899917602539e-05, -1.71661376953125e-05, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Acidmaw", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 4, "_type": "Num"}, {"n": 2, "_type": "Num"}], "keywords": [{"arg": "effects", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Effect"}, "_type": "Call", "args": [{"_type": "Template6", "hole0": "Damaged"}, {"func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}, {"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}]}]}, {"_type": "Template6", "hole0": "SelfSelector"}]}]}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"n": 7, "_type": "Num"}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "LEGENDARY", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}]}}], "hole1": "MinionCard"}, "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give([Buff\n            (ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])\n", "choice_history": [47, 111, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Acidmaw", "<EOS>", 42, 104, "7", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 32, 69, 29, "LEGENDARY", "<EOS>", 149, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "4", "<EOS>", 42, 104, "2", "<EOS>", 149, 131, "effects", "<EOS>", 21, 95, 141, 35, 76, 23, 99, "Effect", "<EOS>", 142, 45, 121, "Damaged", "<EOS>", 35, 76, 23, 99, "Action", "Tag", "<EOS>", 142, 35, 76, 23, 99, "Give", "<EOS>", 141, 38, 95, 142, 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Attack", "<EOS>", 141, 42, 104, "2", "<EOS>", 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Health", "<EOS>", 141, 42, 104, "2", "<EOS>", 45, 121, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"score": -0.26626543279827786, "score_history": [-3.814697265625e-06, -5.7220458984375e-06, -0.012615167535841465, -9.536741345073096e-06, -3.576255949155893e-07, -0.0001201629638671875, -9.536738616588991e-07, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.176177978515625, -9.5367431640625e-06, -0.004055023193359375, -6.29425048828125e-05, -3.814697265625e-06, -5.722029527532868e-06, 0.0, 0.0, 0.0, -1.0728774213930592e-05, 0.0, -4.00543212890625e-05, 0.0, -1.9073486328125e-06, 0.0, -0.000331878662109375, -9.5367431640625e-06, -0.0002040863037109375, -1.1920928244535389e-07, -9.5367431640625e-06, -1.9073486328125e-06, -1.52587890625e-05, -0.05405139923095703, 0.0, -0.000278472900390625, -7.62939453125e-06, -9.679794311523438e-05, -2.3841855067985307e-07, -0.000244140625, -1.9073486328125e-06, -3.373622530489229e-05, -1.9073468138230965e-06, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -3.24249267578125e-05, -3.814697265625e-06, -0.012154698371887207, 0.0, -2.014631354541052e-05, 0.0, -0.0003677605709526688, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.0007305145263671875, -2.86102294921875e-05, 0.0, -4.7654611989855766e-07, 0.0, -1.52587890625e-05, -1.71661376953125e-05, 0.0, -3.957570515922271e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -1.9073486328125e-06, -0.00018322352843824774, -7.152555099310121e-07, -0.0001544952392578125, -1.1444091796875e-05, -0.003382682101801038, -3.576278118089249e-07, -4.38690185546875e-05, -0.000247955322265625, -0.00036045064916834235, -4.768370445162873e-07], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Boar", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 4, "_type": "Num"}, {"n": 2, "_type": "Num"}], "keywords": [{"arg": "charge", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Boar"}, {"n": 3, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}]}}], "hole1": "MinionCard"}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "choice_history": [47, 111, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 145, 43, 108, "Boar", "<EOS>", 42, 104, "3", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 41, 100, "False", "<EOS>", 149, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "4", "<EOS>", 42, 104, "2", "<EOS>", 149, 131, "charge", "<EOS>", 24, 100, "True", "<EOS>"]}]}
{"gold_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[\n            Choice(AttackMode(), Give([Buff(ChangeAttack(1))]),\n            SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))\n            ]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "beams": [{"score": -3.588832077305625, "score_history": [0.0, -3.814697265625e-06, -0.0007073774468153715, -0.1248975545167923, -0.0032301333267241716, -0.0002818902430590242, -3.576275275918306e-07, -9.655952453613281e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -1.71661376953125e-05, -0.000164031982421875, -3.814697265625e-06, -7.62939453125e-06, -3.24249267578125e-05, -3.814697265625e-06, -0.0009355935617350042, -1.33514404296875e-05, -0.0002731079584918916, -0.0003719329833984375, -2.8848629881395027e-05, 0.0, 0.0, 0.0, -1.5152676496654749e-05, -3.576278118089249e-07, 0.0, 0.0, -2.47955322265625e-05, -5.7220458984375e-06, -2.5748922780621797e-05, 0.0, -0.010645627975463867, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-05, -0.0005676746368408203, -1.1920928244535389e-07, -0.016204833984375, 0.0, -0.44143009185791016, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0001049041748046875, 0.0, -0.1461925506591797, -1.1920928244535389e-07, -4.0531158447265625e-06, 0.0, -0.00011086264566984028, 0.0, -1.9073486328125e-06, -0.0002536773681640625, -3.4332275390625e-05, 0.0, -3.4332275390625e-05, -9.5367431640625e-06, -3.814697265625e-06, -1.1920906217710581e-07, 0.0, -3.0517578125e-05, 0.0, -9.5367431640625e-06, -4.17274895880837e-06, -7.152555099310121e-07, -1.9073486328125e-06, 0.0, -2.8079375624656677e-07, -7.223821739898995e-05, -0.27817726135253906, -0.0001201629638671875, -0.8967863321304321, 0.0, -0.00331878662109375, -4.00543212890625e-05, -1.33514404296875e-05, -1.33514404296875e-05, -0.0001659393310546875, -1.9073486328125e-06, 0.0, -0.006254076957702637, -5.9604644775390625e-06, -2.09808349609375e-05, -0.0026645660400390625, -0.013311386108398438, -1.9073486328125e-06, -1.9073486328125e-06, -0.004832684062421322, -8.20159912109375e-05, 0.0, -7.62939453125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.5296857953071594, 0.0, -0.008420944213867188, -0.935338020324707, 0.0, -3.814697265625e-06, -0.0005789995193481445, -7.62939453125e-05, -1.9073486328125e-06, -0.00293731689453125, -0.022613525390625, 0.0, -0.13426178693771362, -0.0022160655353218317], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}, {"n": 2, "_type": "Num"}], "keywords": [{"arg": "auras", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Aura"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}]}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "args": [{"_type": "Template6", "hole0": "Adjacent"}]}]}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}}}]}}], "hole1": "MinionCard"}, "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, auras=[Aura(ChangeAttack(1), MinionSelector(\n            Adjacent()))])\n", "choice_history": [47, 111, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 42, 104, "2", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 149, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "2", "<EOS>", 42, 104, "2", "<EOS>", 149, 131, "auras", "<EOS>", 21, 95, 141, 35, 76, 23, 99, "Aura", "<EOS>", 142, 35, 76, 23, 99, "Change", "Attack", "<EOS>", 141, 42, 104, "1", "<EOS>", 35, 76, 23, 99, "Minion", "Selector", "<EOS>", 141, 45, 121, "Adjacent", "<EOS>"]}]}
{"gold_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(\n            Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard\n            (query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)),\n            PlayerSelector())), Effect(Drawn(), ActionTag(Draw(),\n            PlayerSelector()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n", "beams": [{"score": -5.3254748097491955, "score_history": [0.0, -7.43865966796875e-05, -0.00024077377747744322, -8.868777513271198e-05, -2.0265558760002023e-06, -2.3836037144064903e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -3.24249267578125e-05, -0.32967567443847656, 0.0, -0.013943672180175781, -1.52587890625e-05, 0.0, -7.152555099310121e-07, -5.2094459533691406e-05, -8.225431884056889e-06, 0.0, 0.0, 0.0, -3.4570634852570947e-06, 0.0, 0.0, 0.0, -6.103515625e-05, -3.814697265625e-06, -1.0728812412708066e-05, 0.0, -0.0005742311477661133, 0.0, -1.9073486328125e-06, 0.0, -1.71661376953125e-05, -0.23106849193572998, 0.0, -1.9073486328125e-06, 0.0, -1.3589859008789062e-05, -1.1920928244535389e-07, -3.24249267578125e-05, -2.86102294921875e-05, -1.9073486328125e-06, -0.0002747774124145508, -1.1920858014491387e-05, -0.8505783081054688, -0.03439903259277344, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -8.726119995117188e-05, 0.0, -1.9073486328125e-06, -7.82012939453125e-05, -1.9073486328125e-06, -1.3351438610698096e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.9073486328125e-06, -4.971027374267578e-05, 0.0, -0.15748023986816406, -2.09808349609375e-05, -2.288818359375e-05, -1.71661376953125e-05, -0.0001316070556640625, 0.0, -4.589557647705078e-05, -2.3841855067985307e-07, -9.918212890625e-05, -2.3841855067985307e-07, -0.5610151290893555, -1.1920928244535389e-07, -3.814697265625e-06, -0.5074949264526367, 0.0, -0.0036572390235960484, -1.919269561767578e-05, -0.00069427490234375, 0.0, -0.0002751350402832031, -1.9073486328125e-06, -0.25440406799316406, -0.000438690185546875, -0.0021963119506835938, -3.62396240234375e-05, -0.0009365081787109375, -3.814697265625e-06, -0.026325225830078125, 0.0, -0.12070655822753906, 0.0, -0.0012093782424926758, 0.0, -1.33514404296875e-05, -0.40221595764160156, -3.4332275390625e-05, -0.1467580795288086, 0.0, -0.03519916534423828, -1.9073486328125e-06, -0.0003204345703125, 0.0, -0.0012454986572265625, 0.0, -7.62939453125e-05, 0.0, -0.03483688831329346, 0.0, -0.000125885009765625, -0.0811929702758789, -1.9073486328125e-06, -0.37099170684814453, 0.0, -0.5586668252944946, -2.7418097943154862e-06, -0.42969441413879395, -5.960462772236497e-07, -7.2479248046875e-05, -0.004525184631347656, -6.4849853515625e-05, -0.0002498626708984375, 0.0, -4.00543212890625e-05, 0.0, -9.167194366455078e-05, -9.536738616588991e-07, -0.0005234479904174805, -3.6954811548639555e-06, -1.52587890625e-05, -0.0018253326416015625, 0.0, -0.004744020756334066, -1.4305104514278355e-06, -0.000141143798828125, -9.5367431640625e-06, -0.0005588531494140625, 0.0, -0.09201717376708984, -0.0039234161376953125, -1.33514404296875e-05, 0.0, -0.0307772159576416, -1.311301275563892e-06, -0.025753140449523926, -1.1920922133867862e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "BurrowingMine", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"_type": "Template5", "hole2": [{"n": 0, "_type": "Num"}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}, {"body": [{"_type": "Template5", "hole2": [{"func": {"_type": "Attribute", "attr": "effective_spell_damage", "value": {"_type": "Name", "id": "player"}}, "_type": "Call", "args": [{"n": 0, "_type": "Num"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "If", "test": {"left": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Compare", "comparators": [{"_type": "Attribute", "attr": "card", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "ops": [{"_type": "Is"}]}}, {"_type": "Template5", "hole1": "draw", "hole0": {"_type": "Name", "id": "player"}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Burrowing Mine"}, {"n": 0, "_type": "Num"}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Template9"}}]}}], "hole1": "SpellCard"}, "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(0, self)\n        if self.target is self.target.card:\n            minion.damage(player.effective_spell_damage(0), self)\n        player.draw()\n", "choice_history": [47, 113, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Burrowing", " ", "Mine", "<EOS>", 42, 104, "0", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 32, 69, 29, "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 157, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 63, 120, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 142, 42, 104, "0", "<EOS>", 40, 99, "self", "<EOS>", 59, 86, 19, 79, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", 138, 10, 141, 32, 69, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", 154, 63, 120, 23, 99, "minion", "<EOS>", "damage", "<EOS>", 142, 35, 76, 15, 69, 23, 99, "player", "<EOS>", "effective_spell_damage", "<EOS>", 141, 42, 104, "0", "<EOS>", 40, 99, "self", "<EOS>", 63, 119, 23, 99, "player", "<EOS>", "draw", "<EOS>"]}]}
{"gold_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.random_amount\n            (3, 6)), self)\n", "beams": [{"score": -0.307331947757838, "score_history": [-1.9073486328125e-06, -7.2479248046875e-05, -0.0026774294674396515, -4.529942543740617e-06, -0.00014173798263072968, -7.62939453125e-06, 0.0, 0.0, -4.9591064453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.000240325927734375, -7.62939453125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.6689286894688848e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.578645141213201e-05, 0.0, 0.0, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0012172460556030273, 0.0, -5.7220458984375e-06, 0.0, -1.52587890625e-05, -0.00038230419158935547, 0.0, -0.021727561950683594, -3.814697265625e-06, -0.0001678466796875, -1.1920928244535389e-07, -7.62939453125e-06, -7.62939453125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -1.71661376953125e-05, -1.9073486328125e-06, -0.0001621246337890625, 0.0, -0.00030517578125, -7.748603820800781e-06, -0.006517887115478516, -4.0650367736816406e-05, -5.7220458984375e-06, -0.014945507049560547, -3.814697265625e-06, -0.0003814697265625, -1.9073486328125e-06, -0.022149085998535156, 0.0, -0.00014495849609375, 0.0, -5.2094459533691406e-05, 0.0, -7.82012939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -8.213520050048828e-05, -1.0490362910786644e-05, -0.0011053085327148438, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.728534698486328e-05, 0.0, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.00011444091796875, -1.1920928244535389e-07, -0.0031347274780273438, -3.0517578125e-05, -1.9073486328125e-06, -3.814697265625e-06, -8.58306884765625e-05, 0.0, -1.1444091796875e-05, -3.933906555175781e-06, -0.0005540847778320312, -4.410743713378906e-06, -0.000232696533203125, 0.0, -1.9073486328125e-06, -0.00049591064453125, -0.00144195556640625, -1.33514404296875e-05, 0.0, -1.52587890625e-05, 0.0, -0.0006103515625, 0.0, -0.00021779535745736212, -5.960462772236497e-07, -0.0001621246337890625, -1.1444091796875e-05, 0.0, -0.226704403758049, -1.1920928244535389e-07, -8.7738037109375e-05, -1.52587890625e-05, -0.000335693359375, -1.9073486328125e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "Crackle", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"_type": "Template5", "hole2": [{"func": {"_type": "Attribute", "attr": "effective_spell_damage", "value": {"_type": "Name", "id": "player"}}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}, {"arg": "overload", "_type": "keyword", "value": {"n": 1, "_type": "Num"}}]}}], "hole1": "SpellCard"}, "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "choice_history": [47, 113, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Crackle", "<EOS>", 42, 104, "2", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 150, 131, "target_func", "<EOS>", 15, 69, 15, 69, 23, 99, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 131, "overload", "<EOS>", 25, 104, "1", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 155, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 63, 120, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 142, 35, 76, 15, 69, 23, 99, "player", "<EOS>", "effective_spell_damage", "<EOS>", 141, 42, 104, "2", "<EOS>", 40, 99, "self", "<EOS>"]}]}
{"gold_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "beams": [{"score": -2.4808051577110675, "score_history": [0.0, -0.000156402587890625, -1.7762025890988298e-05, -1.3232143828645349e-05, -2.0265558760002023e-06, -5.95959136262536e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.86102294921875e-05, -3.814697265625e-06, -5.14984130859375e-05, -0.23094558715820312, -3.814697265625e-06, -0.01157379150390625, -0.00041961669921875, -1.9073486328125e-06, -2.1219027985353023e-05, -2.47955322265625e-05, -8.344646857949556e-07, 0.0, -1.9073486328125e-06, 0.0, -6.794884029659443e-06, -4.768370445162873e-07, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.001399993896484375, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -1.33514404296875e-05, -0.0009703636169433594, 0.0, -0.000385284423828125, -3.0517578125e-05, -0.0003415346145629883, 0.0, -2.6702880859375e-05, 0.0, -0.019207119941711426, -1.7881377516459906e-06, -1.9073486328125e-06, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.00019073486328125, 0.0, -9.489059448242188e-05, -6.198883056640625e-06, -0.0174558162689209, -2.3603439331054688e-05, -4.649161837733118e-06, 0.0, -1.549720036564395e-05, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.185603367863223e-05, -2.4199405743274838e-05, -0.004088401794433594, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.5616416931152344e-05, 0.0, -4.649161928682588e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.09808349609375e-05, 0.0, -0.001316070556640625, -0.00038909912109375, -1.9073486328125e-06, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -5.340576171875e-05, -2.5510591513011605e-05, -8.237361907958984e-05, -3.6597251892089844e-05, -1.4141303300857544, 0.0, -5.7220458984375e-06, -0.17920875549316406, -1.9073486328125e-06, -0.5976516008377075, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "EmergencyCoolant", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"_type": "Template5", "hole2": [{"n": 1, "_type": "Num"}], "hole1": "set_health_to", "hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}]}}], "hole1": "SpellCard"}, "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n", "choice_history": [47, 113, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 145, 43, 108, "Emergency", " ", "Coolant", "<EOS>", 42, 104, "1", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 41, 100, "False", "<EOS>", 149, 131, "target_func", "<EOS>", 15, 69, 15, 69, 23, 99, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 155, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 63, 120, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 141, 42, 104, "1", "<EOS>"]}]}
{"gold_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "beams": [{"score": -0.24816721871896874, "score_history": [0.0, -3.814697265625e-06, -0.0033492918591946363, -0.0001820160250645131, -2.3841855067985307e-07, -2.3841676011215895e-07, -9.655952453613281e-06, -2.861022494471399e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -7.62939453125e-06, -0.0006847381591796875, -3.24249267578125e-05, -7.82012939453125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.2278481335670222e-05, -2.110004425048828e-05, -9.298280929215252e-06, 0.0, 0.0, 0.0, -0.00021564948838204145, -1.1920928244535389e-07, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.0002536773681640625, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.00011277197336312383, 0.0, -0.0001506805419921875, 0.0, -0.000148773193359375, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -1.1444091796875e-05, -1.9073486328125e-06, -9.1552734375e-05, 0.0, -0.016388893127441406, 0.0, -2.288818359375e-05, 0.0, -0.21623432636260986, 0.0, -3.814697265625e-06, -4.00543212890625e-05, -2.86102294921875e-05, -1.9073486328125e-06, -0.0002460479736328125, -1.33514404296875e-05, -1.9073486328125e-06, -5.6726858019828796e-05, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -0.00014006254787091166, -3.576278118089249e-07, -1.9073486328125e-06, -1.9073486328125e-06, -3.504430060274899e-05, -1.728519782773219e-05, -0.0040988922119140625, -3.814697265625e-06, -0.005197644233703613, 0.0, -2.6702880859375e-05, -5.91278076171875e-05, -2.4080276489257812e-05, -3.576278118089249e-07], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}, {"n": 4, "_type": "Num"}], "keywords": [{"arg": "windfury", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"n": 3, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}}}]}}], "hole1": "MinionCard"}, "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "choice_history": [47, 111, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Flying", " ", "Machine", "<EOS>", 42, 104, "3", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 149, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "1", "<EOS>", 42, 104, "4", "<EOS>", 149, 131, "windfury", "<EOS>", 24, 100, "True", "<EOS>"]}]}
{"gold_code": "class GoblinAutoBarber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "beams": [{"score": -2.2353895514651967, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -0.02834423817694187, -0.0009100369061343372, -0.00028224775451235473, -6.19882393948501e-06, -1.33514404296875e-05, -1.4305104514278355e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -6.103515625e-05, -3.814697265625e-06, -7.82012939453125e-05, -0.000152587890625, -3.814697265625e-06, -1.9073468138230965e-06, -2.1219253540039062e-05, -7.867811291362159e-06, -2.3841855067985307e-07, 0.0, 0.0, -1.5616315067745745e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -6.198863957251888e-06, 0.0, -0.24752545356750488, 0.0, -1.52587890625e-05, 0.0, -0.000202178955078125, -0.00014292841660790145, -2.0265579223632812e-06, -0.0013885498046875, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001373291015625, 0.0, -0.2302713394165039, -7.152555099310121e-07, 0.0, -3.0875205993652344e-05, -4.768370445162873e-07, -5.7220458984375e-06, -9.72747802734375e-05, 0.0, 0.0, -0.0008291004924103618, -2.3841830625315197e-06, -1.52587890625e-05, -0.00623321533203125, -1.9073486328125e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.0034076515585184097, -7.6293927122605965e-06, -1.52587890625e-05, -0.010087966918945312, -4.76837158203125e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.06140846386551857, -0.001010059262625873, -3.814697265625e-06, -0.06263256072998047, -7.2479248046875e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.0002182556490879506, -0.0022617578506469727, -1.919269561767578e-05, -1.1444091796875e-05, -0.0001354217529296875, -0.0001239776611328125, -0.0029548329766839743, 0.0, -0.0874948501586914, -0.2127695083618164, -3.814697265625e-06, -6.4849853515625e-05, -0.033682942390441895, -3.814697265625e-05, 0.0, -0.00308990478515625, -9.5367431640625e-06, -0.2606590986251831, 0.0, -0.18077659606933594, 0.0, -0.7308704853057861, -0.0628701001405716, -4.291525328881107e-06, -0.0001697540283203125, 0.0, -3.1590458092978224e-05, 0.0, -3.62396240234375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.001308441162109375, -1.9073486328125e-06, -1.33514404296875e-05, -8.342613000422716e-07, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.2636155588552356e-05, -1.5497195136049413e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.74857198848622e-06, -4.768370445162873e-07], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}, {"n": 2, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}}}, {"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}]}]}]}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "keywords": [{"arg": "condition", "_type": "keyword", "value": {"_type": "Template6", "hole0": "UserPicker"}}]}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(3))), MinionSelector(condition\n            =UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [47, 111, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Goblin", " ", "Auto-Barber", "<EOS>", 42, 104, "2", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 150, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 142, 35, 76, 23, 99, "Give", "<EOS>", 141, 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Attack", "<EOS>", 141, 42, 104, "3", "<EOS>", 35, 75, 23, 99, "Minion", "Selector", "<EOS>", 149, 131, "condition", "<EOS>", 28, 121, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "3", "<EOS>", 42, 104, "2", "<EOS>"]}]}
{"gold_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\n", "beams": [{"score": -2.2096804125616174, "score_history": [-3.814697265625e-06, -5.7220458984375e-06, -0.0026470080483704805, -0.00019393471302464604, -1.1920928244535389e-07, -3.742515400517732e-05, -7.62939453125e-06, -2.3841855067985307e-07, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, -0.0001583099365234375, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.145764938177308e-06, -2.300739288330078e-05, -7.152555099310121e-07, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -5.5786593293305486e-05, -1.1920928244535389e-07, -2.09808349609375e-05, 0.0, -1.52587890625e-05, 0.0, -8.225440979003906e-06, 0.0, -0.04877471923828125, 0.0, -4.9591064453125e-05, -3.814697265625e-06, -2.86102294921875e-05, -0.0003998277534265071, -1.1920928244535389e-07, -0.00012969970703125, 0.0, -5.7220458984375e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -2.288818359375e-05, 0.0, -5.53131103515625e-05, 0.0, -0.0043792724609375, 0.0, -3.814697265625e-06, 0.0, -1.5139577953959815e-05, 0.0, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, 0.0, -6.103515625e-05, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.406659521308029e-05, -1.1920928244535389e-07, -3.4332275390625e-05, 0.0, -0.0006408267072401941, -3.576278118089249e-07, -7.62939453125e-05, 0.0, -9.918212890625e-05, 0.0, -7.62939453125e-06, -7.62939453125e-06, -0.029947280883789062, -2.47955322265625e-05, -7.62939453125e-05, -5.7220458984375e-05, -1.9073486328125e-06, -7.271765298355604e-06, 0.0, -5.340576171875e-05, -0.23590373992919922, -7.62939453125e-06, -0.0010606127325445414, -0.005842326208949089, 0.0, -1.52587890625e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -2.1338453734642826e-05, -0.0001506805419921875, -3.814697265625e-06, -5.7220458984375e-06, -0.000274658203125, -0.0001583099365234375, -5.7220458984375e-06, -1.9073486328125e-06, -0.00046002864837646484, 0.0, 0.0, -0.49453067779541016, -5.14984130859375e-05, -0.0016117095947265625, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.007110714912414551, 0.0, 0.0, -8.96453857421875e-05, -2.47955322265625e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.00010824192577274516, -0.45953941345214844, 0.0, -3.814697265625e-06, -1.52587890625e-05, 0.0, -0.000865936279296875, 0.0, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, 0.0, -0.7178865671157837, -5.960462772236497e-07, -1.9073486328125e-06, -0.0002460479736328125, -3.0517578125e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.034855082631111145, -0.02898991107940674, 0.0, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -0.0004938840866088867, 0.0, -0.128753662109375, 0.0, -0.0020983219146728516, -9.5367431640625e-06, -3.576278118089249e-07], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}, {"n": 2, "_type": "Num"}], "keywords": [{"arg": "effects", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Effect"}, "_type": "Call", "args": [{"_type": "Template6", "hole0": "TurnEnded"}, {"func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}, {"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}]}]}, {"_type": "Template6", "hole0": "SelfSelector"}]}]}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"n": 3, "_type": "Num"}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}}}]}}], "hole1": "MinionCard"}, "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])\n", "choice_history": [47, 111, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Iron", " ", "Sensei", "<EOS>", 42, 104, "3", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 32, 69, 29, "RARE", "<EOS>", 149, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "2", "<EOS>", 42, 104, "2", "<EOS>", 149, 131, "effects", "<EOS>", 21, 95, 141, 35, 76, 23, 99, "Effect", "<EOS>", 142, 45, 121, "Turn", "Ended", "<EOS>", 35, 76, 23, 99, "Action", "Tag", "<EOS>", 142, 35, 76, 23, 99, "Give", "<EOS>", 141, 38, 95, 142, 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Attack", "<EOS>", 141, 42, 104, "2", "<EOS>", 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Health", "<EOS>", 141, 42, 104, "2", "<EOS>", 45, 121, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class MalGanis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(\n            IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2),\n            MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(),\n            HeroSelector())])\n", "beams": [{"score": -2.107744138271009, "score_history": [0.0, -3.814697265625e-06, -0.019482741132378578, -9.262523235520348e-05, -8.270013495348394e-05, -5.7220458984375e-06, -2.3841855067985307e-07, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -3.814697265625e-06, -0.00069427490234375, -1.9073486328125e-06, -4.57763671875e-05, -7.62939453125e-05, 0.0, -3.0159950256347656e-05, 0.0, -7.62939453125e-06, 0.0, -0.0005177047569304705, -2.3841855067985307e-07, 0.0, 0.0, -7.62939453125e-06, 0.0, -0.00010966714035021141, 0.0, -0.0007228851318359375, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -0.060970187187194824, -3.933898824470816e-06, -0.002925872802734375, 0.0, -0.007028698921203613, -1.1920928244535389e-07, -9.5367431640625e-06, 0.0, -1.71661376953125e-05, 0.0, -8.96453857421875e-05, 0.0, -0.4659395217895508, 0.0, -3.075599670410156e-05, 0.0, -1.800059908418916e-05, 0.0, -1.9073486328125e-06, -8.7738037109375e-05, -2.09808349609375e-05, -1.9073486328125e-06, -5.91278076171875e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -4.529942543740617e-06, -1.9073468138230965e-06, -1.33514404296875e-05, 0.0, -6.663794920314103e-05, -7.152555099310121e-07, -0.036373138427734375, -2.86102294921875e-05, -0.010647058486938477, 0.0, -4.00543212890625e-05, -1.9073486328125e-06, -0.10688972473144531, -1.1444091796875e-05, -4.76837158203125e-05, -1.1444091796875e-05, 0.0, -0.0001697540283203125, -7.62939453125e-06, -0.00357818603515625, -0.05903816223144531, -0.0001659393310546875, -3.814697265625e-06, -1.71661376953125e-05, -0.8445805311203003, -0.00630640983581543, -0.0002384185791015625, -6.29425048828125e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.15628406405448914, 0.0, -0.0022602081298828125, 0.0, -0.3217064142227173, -1.52587890625e-05, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 9, "_type": "Num"}, {"n": 7, "_type": "Num"}], "keywords": [{"arg": "auras", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Aura"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}, {"_type": "Template6", "hole0": "SelfSelector"}]}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"n": 9, "_type": "Num"}, {"_type": "Attribute", "attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "LEGENDARY", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}]}}], "hole1": "MinionCard"}, "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), SelfSelector())])\n", "choice_history": [47, 111, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Mal'Ganis", "<EOS>", 42, 104, "9", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 32, 69, 29, "LEGENDARY", "<EOS>", 149, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "9", "<EOS>", 42, 104, "7", "<EOS>", 149, 131, "auras", "<EOS>", 21, 95, 141, 35, 76, 23, 99, "Aura", "<EOS>", 142, 35, 76, 23, 99, "Change", "Attack", "<EOS>", 141, 42, 104, "2", "<EOS>", 45, 121, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(\n            EventValue()), HeroSelector()))])\n", "beams": [{"score": -1.6048252848080153, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -0.0032137196976691484, -0.0012568001402541995, -0.008685109205543995, -1.1920922133867862e-06, -3.0276969482656568e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -0.0001239776611328125, 0.0, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.0967194612021558e-05, -3.24249267578125e-05, -2.3841830625315197e-06, -2.6702880859375e-05, -2.8610213121282868e-05, 0.0, -1.9073486328125e-06, 0.0, -7.152542366384296e-06, -2.503394853192731e-06, 0.0, 0.0, -1.52587890625e-05, 0.0, -7.283672312041745e-05, 0.0, -0.0007266998291015625, 0.0, -2.47955322265625e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00019907852401956916, -7.152555099310121e-07, -0.0008258819580078125, 0.0, -0.05710792541503906, 0.0, -1.1444091796875e-05, 0.0, -0.005524635314941406, 0.0, -0.0054492950439453125, 0.0, -0.5709266662597656, 0.0, -2.47955322265625e-05, 0.0, -0.00011348661791998893, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -2.47955322265625e-05, -3.814697265625e-06, -2.6702880859375e-05, -1.1444091796875e-05, -9.5367431640625e-06, -4.887440809397958e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, -0.00015723705291748047, -1.1563271073100623e-05, -5.7220458984375e-06, 0.0, -1.0728797406045487e-06, -1.3351374946068972e-05, -0.0003204345703125, -9.5367431640625e-06, -9.34600830078125e-05, 0.0, -3.814697265625e-06, -2.288818359375e-05, -2.86102294921875e-05, -1.71661376953125e-05, -7.05718994140625e-05, -2.09808349609375e-05, -2.288818359375e-05, -9.393319487571716e-05, 0.0, -1.71661376953125e-05, -0.04030418395996094, -7.62939453125e-06, -0.011681556701660156, -2.3841855067985307e-07, -0.011797904968261719, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -5.59091531613376e-05, -3.814697265625e-05, 0.0, -4.76837158203125e-05, -0.0001926422119140625, -0.010412216186523438, -0.000392913818359375, -1.1444091796875e-05, -0.7208765745162964, 0.0, -3.814697265625e-06, -0.000823974609375, -3.814697265625e-06, -0.14795039594173431, -1.2040138244628906e-05, -0.0012969970703125, -4.38690185546875e-05, -0.0031720399856567383, -0.000110626220703125, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}, {"n": 4, "_type": "Num"}], "keywords": [{"arg": "effects", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Effect"}, "_type": "Call", "args": [{"_type": "Template6", "hole0": "Damaged"}, {"func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Damage"}, "_type": "Call", "args": [{"n": 4, "_type": "Num"}]}, {"_type": "Template6", "hole0": "HeroSelector"}]}]}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "DEMON", "value": {"_type": "Name", "id": "MINION_TYPE"}}}]}}], "hole1": "MinionCard"}, "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Damage(4),\n            HeroSelector()))])\n", "choice_history": [47, 111, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Mistress", " ", "of", " ", "Pain", "<EOS>", 42, 104, "2", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 32, 69, 29, "RARE", "<EOS>", 149, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "1", "<EOS>", 42, 104, "4", "<EOS>", 149, 131, "effects", "<EOS>", 21, 95, 141, 35, 76, 23, 99, "Effect", "<EOS>", 142, 45, 121, "Damaged", "<EOS>", 35, 76, 23, 99, "Action", "Tag", "<EOS>", 142, 35, 76, 23, 99, "Damage", "<EOS>", 141, 42, 104, "4", "<EOS>", 45, 121, "Hero", "Selector", "<EOS>"]}]}
{"gold_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=RandomPicker())))\n", "beams": [{"score": -0.7198383090066898, "score_history": [0.0, -1.9073486328125e-06, -0.006976533681154251, -0.00015758255904074758, -3.40932747349143e-05, -0.0021916627883911133, -2.3841855067985307e-07, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -5.91278076171875e-05, -0.0075969696044921875, -1.9073486328125e-06, -0.000102996826171875, 0.0, 0.0, -2.1457672119140625e-06, -3.933906555175781e-06, -1.9073486328125e-06, 0.0, -6.603586371056736e-05, -5.960462772236497e-07, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -1.5854784578550607e-05, 0.0, -0.07658898830413818, 0.0, -1.9073486328125e-06, -3.24249267578125e-05, -2.288818359375e-05, -0.0001599780807737261, -4.768370445162873e-07, -0.02339482307434082, 0.0, -1.2040138244628906e-05, 0.0, -1.71661376953125e-05, -8.58306884765625e-05, -3.814697265625e-06, -4.1961669921875e-05, -0.000102996826171875, -6.4849853515625e-05, -1.9073486328125e-06, -2.7418097943154862e-06, -5.006785613659304e-06, -0.0001373291015625, -1.1444091796875e-05, -1.9073486328125e-06, -4.291533514333423e-06, -1.5497195136049413e-06, -5.7220458984375e-06, -1.9073486328125e-06, -4.648918547900394e-06, -3.576278118089249e-07, -0.0001544952392578125, 0.0, -0.001765727298334241, 0.0, -7.43865966796875e-05, -3.814697265625e-05, -7.62939453125e-06, -7.62939453125e-06, -0.0003498862497508526, 0.0, -0.0002193450927734375, -0.0002689361572265625, -7.82012939453125e-05, -7.62939453125e-06, -3.814697265625e-06, -0.16848087310791016, -3.933898824470816e-06, -5.7220458984375e-06, -0.07621192932128906, -0.0001373291015625, -1.9073486328125e-06, -3.814697265625e-06, -0.019807253032922745, -0.14923489093780518, 0.0, -3.814697265625e-05, -1.52587890625e-05, 0.0, -0.003678919281810522, 0.0, -0.0020275115966796875, -0.13167381286621094, -8.20159912109375e-05, -2.6702880859375e-05, -0.04483852535486221, -0.0007171630859375, -3.814697265625e-06, -0.00039196014404296875, -1.9073486328125e-06, -0.0002574920654296875, 0.0, -8.7738037109375e-05, -7.62939453125e-06, -0.0011332035064697266, -3.62396240234375e-05, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Powermace", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Weapon"}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}, {"n": 2, "_type": "Num"}], "keywords": [{"arg": "deathrattle", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "keywords": [{"arg": "picker", "_type": "keyword", "value": {"_type": "Template6", "hole0": "RandomPicker"}}]}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Powermace"}, {"n": 3, "_type": "Num"}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}]}}], "hole1": "WeaponCard"}, "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give(ChangeHealth(2)),\n            MinionSelector(picker=RandomPicker())))\n", "choice_history": [47, 111, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Powermace", "<EOS>", 42, 104, "3", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 32, 69, 29, "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Weapon", "<EOS>", 142, 42, 104, "3", "<EOS>", 42, 104, "2", "<EOS>", 149, 131, "deathrattle", "<EOS>", 18, 76, 23, 99, "Deathrattle", "<EOS>", 142, 35, 76, 23, 99, "Give", "<EOS>", 141, 35, 76, 23, 99, "Change", "Health", "<EOS>", 141, 42, 104, "2", "<EOS>", 35, 75, 23, 99, "Minion", "Selector", "<EOS>", 149, 131, "picker", "<EOS>", 28, 121, "Random", "Picker", "<EOS>"]}]}
{"gold_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "beams": [{"score": -2.4684193852131315, "score_history": [-7.43865966796875e-05, -5.7220458984375e-06, -0.09410448372364044, -0.00045694399159401655, -2.3841855067985307e-07, -4.768339749716688e-07, -1.1444091796875e-05, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -1.1444091796875e-05, -2.09808349609375e-05, -3.814697265625e-05, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.5497195136049413e-06, -1.33514404296875e-05, -1.5497195136049413e-06, 0.0, -1.9073486328125e-06, 0.0, -9.751300240168348e-05, -1.1920928244535389e-07, -1.9073486328125e-05, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -7.462302164640278e-05, 0.0, -0.02901303768157959, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -8.0108642578125e-05, -8.94067925401032e-05, -2.3245811462402344e-05, -0.0001068115234375, -1.9073486328125e-05, -0.000286102294921875, 0.0, -7.62939453125e-06, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, 0.0, -0.02298259735107422, 0.0, 0.0, -9.918212890625e-05, 0.0, -1.9073486328125e-06, -6.4849853515625e-05, -1.9073486328125e-06, 0.0, -3.528478555381298e-05, 0.0, -3.814697265625e-06, -6.4849853515625e-05, -0.000461578369140625, -7.62939453125e-06, -1.9073486328125e-06, -0.0008947253227233887, -5.960462772236497e-07, -1.33514404296875e-05, -0.11866950988769531, -1.71661376953125e-05, -0.11897659301757812, -3.814697265625e-06, -0.0005970001220703125, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002200602466473356, 0.0, -1.9073486328125e-06, -0.0013713836669921875, -4.00543212890625e-05, -1.9073486328125e-06, -1.33514404296875e-05, -7.295501563930884e-05, -0.25718390941619873, -1.9073486328125e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -0.012136545032262802, 0.0, -0.0012559890747070312, -0.0014667510986328125, -1.9073486328125e-06, 0.0, -0.0031778812408447266, 0.0, -1.1444091796875e-05, -0.044544219970703125, -0.000156402587890625, -5.7220458984375e-06, -1.1444091796875e-05, -0.0010802478063851595, -0.4316948652267456, 0.0, -4.1961669921875e-05, -1.52587890625e-05, 0.0, -0.01823626458644867, 0.0, -0.0008287429809570312, -0.0020904541015625, 0.0, 0.0, -0.00888681411743164, 0.0, -1.1444091796875e-05, -0.10425376892089844, -0.0001277923583984375, -5.7220458984375e-06, -9.5367431640625e-06, -0.001522846519947052, -0.45147860050201416, 0.0, -6.67572021484375e-05, -1.9073486328125e-05, 0.0, -0.018780643120408058, 0.0, -6.67572021484375e-05, -0.6052761077880859, -1.33514404296875e-05, -1.9073486328125e-06, -0.0031174449250102043, -0.0029735565185546875, 0.0, -0.0004177093505859375, -0.00038909912109375, -0.0001773834228515625, -1.9073486328125e-06, 0.0, -0.00020599365234375, -0.0014872550964355469, 0.0, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -0.00014495849609375, 0.0, -0.000110626220703125, 0.0, -0.02291393280029297, 0.0, -7.43865966796875e-05, 0.0, -0.011516571044921875, 0.0, -0.002269744873046875, -1.52587890625e-05, -0.06830406188964844, -2.872943878173828e-05, 0.0, -4.76837158203125e-05, 0.0, -1.919269561767578e-05, 0.0, -1.71661376953125e-05, -2.6702880859375e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.000141143798828125, -5.7220458984375e-06, -6.103515625e-05, -1.1920128599740565e-06, 0.0, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -3.8027294067433104e-05, 0.0, -5.7220458984375e-06, 0.0, -6.651747389696538e-05, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ScrewjankClunker", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}, {"n": 5, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"n": 4, "_type": "Num"}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}}}, {"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}, {"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}, {"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}]}]}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"_type": "Attribute", "attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}], "keywords": [{"arg": "picker", "_type": "keyword", "value": {"_type": "Template6", "hole0": "UserPicker"}}]}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2)),\n            Buff(ChangeHealth(2))]), MinionSelector(IsType(MINION_TYPE.MECH\n            ), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [47, 111, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Screwjank", " ", "Clunker", "<EOS>", 42, 104, "4", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 32, 69, 29, "RARE", "<EOS>", 150, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 142, 35, 76, 23, 99, "Give", "<EOS>", 141, 38, 95, 143, 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Attack", "<EOS>", 141, 42, 104, "2", "<EOS>", 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Health", "<EOS>", 141, 42, 104, "2", "<EOS>", 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Health", "<EOS>", 141, 42, 104, "2", "<EOS>", 35, 77, 23, 99, "Minion", "Selector", "<EOS>", 141, 35, 76, 23, 99, "Is", "Type", "<EOS>", 141, 32, 69, 23, 99, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 149, 131, "picker", "<EOS>", 28, 121, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "2", "<EOS>", 42, 104, "5", "<EOS>"]}]}
{"gold_code": "class SneedsOldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])),\n            PlayerSelector()))\n", "beams": [{"score": -1.023359395050143, "score_history": [-3.814697265625e-06, -0.0001277923583984375, -0.003990271128714085, -0.010283559560775757, -0.04088538885116577, -2.50339189733495e-06, -0.0003290290478616953, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -5.53131103515625e-05, -0.0002193450927734375, -1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.12087300419807434, -2.09808349609375e-05, -0.0006519552553072572, -0.005062103271484375, -6.282320828177035e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -0.0004671801580116153, -2.9682672902708873e-05, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.00042331215809099376, 0.0, -7.486343383789062e-05, 0.0, -5.7220458984375e-06, -1.52587890625e-05, -4.9591064453125e-05, -0.0177758876234293, 0.0, -0.0012683868408203125, 0.0, -0.000133514404296875, -2.3841855067985307e-07, -1.1444091796875e-05, 0.0, -1.52587890625e-05, 0.0, -3.814697265625e-05, 0.0, -0.09067916870117188, -1.1920928244535389e-07, -1.3589859008789062e-05, 0.0, -1.1563301086425781e-05, 0.0, -1.9073486328125e-05, -0.000423431396484375, -3.4332275390625e-05, -1.1444091796875e-05, -3.4332275390625e-05, -0.000125885009765625, 0.0, -6.913454853929579e-06, -9.5367431640625e-06, -9.5367431640625e-05, -7.62939453125e-06, -1.33514404296875e-05, -6.794917680963408e-06, -3.85038583772257e-05, -6.67572021484375e-05, -1.9073486328125e-06, -0.009898542426526546, -4.172325134277344e-06, -0.00045013427734375, 0.0, -0.0005330611020326614, 0.0, -0.000179290771484375, -6.866455078125e-05, -1.71661376953125e-05, -2.86102294921875e-05, -1.2874137610197067e-05, -1.1920928244535389e-07, -0.0001010894775390625, -0.0021572113037109375, -0.022009849548339844, -2.09808349609375e-05, -5.7220458984375e-06, -0.0024773692712187767, -0.00027141053578816354, -6.866455078125e-05, -0.0093231201171875, -7.05718994140625e-05, -3.814697265625e-06, -6.29425048828125e-05, -0.01917170360684395, -0.001058816909790039, -2.288818359375e-05, -0.000270843505859375, 0.0, -0.02523660659790039, -5.7816505432128906e-05, -0.0002880096435546875, -4.76837158203125e-05, -0.0068149566650390625, -8.20159912109375e-05, -0.0008697509765625, -3.814697265625e-06, -6.4849853515625e-05, -0.6086359024047852, -0.001923680305480957, -2.2649765014648438e-06, -5.7220458984375e-06, -5.91278076171875e-05, -7.62939453125e-06, -0.0031578196212649345, 0.0, -9.34600830078125e-05, 0.0, -0.0006549358367919922, -0.006822918076068163, 0.0, -0.002410888671875, 0.0, -0.003216385841369629, -6.29425048828125e-05, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 5, "_type": "Num"}, {"n": 7, "_type": "Num"}], "keywords": [{"arg": "deathrattle", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Summon"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "CardQuery"}, "_type": "Call", "keywords": [{"arg": "conditions", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "ManaCost"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}, {"_type": "Template6", "hole0": "IsMinion"}]}}]}]}, {"_type": "Template6", "hole0": "PlayerSelector"}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "<UNK> Old Shredder"}, {"n": 8, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "LEGENDARY", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}}}]}}], "hole1": "MinionCard"}, "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "choice_history": [47, 111, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", 42, 104, "8", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "LEGENDARY", "<EOS>", 149, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "5", "<EOS>", 42, 104, "7", "<EOS>", 149, 131, "deathrattle", "<EOS>", 18, 76, 23, 99, "Deathrattle", "<EOS>", 142, 35, 76, 23, 99, "Summon", "<EOS>", 141, 35, 75, 23, 99, "Card", "Query", "<EOS>", 149, 131, "conditions", "<EOS>", 21, 95, 142, 35, 76, 23, 99, "Mana", "Cost", "<EOS>", 141, 42, 104, "2", "<EOS>", 45, 121, "Is", "Minion", "<EOS>", 45, 121, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n", "beams": [{"score": -1.5927357096220476, "score_history": [-1.9073486328125e-06, -0.0002689361572265625, -0.011060040444135666, -0.00028046677471138537, -2.8609538276214153e-06, -3.9219852624228224e-05, -3.576272320060525e-06, -0.32289981842041016, -3.814697265625e-06, -1.9073486328125e-06, -1.52587890625e-05, -0.009565353393554688, -3.814697265625e-06, -4.76837158203125e-05, 0.0, 0.0, -2.0265579223632812e-06, -2.622600959512056e-06, -1.9073486328125e-06, 0.0, -6.914134246471804e-06, -2.0265558760002023e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -0.00027239322662353516, -1.9073486328125e-06, -0.00016987323760986328, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.47955322265625e-05, -0.0014104840811342, -3.933906555175781e-06, -0.0001239776611328125, 0.0, -1.33514404296875e-05, 0.0, -0.0002231597900390625, -5.53131103515625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0009404526208527386, -2.0265579223632812e-06, -3.24249267578125e-05, -0.6273822784423828, -0.001068115234375, -1.9073486328125e-06, -9.5367431640625e-06, -0.32018017768859863, -0.0038975474890321493, -0.0001277923583984375, -0.005084991455078125, -0.0001049041748046875, -5.7220458984375e-05, -8.0108642578125e-05, 0.0, -0.00023436546325683594, -0.00029206275939941406, 0.0, -0.0010728836059570312, -3.814697265625e-06, -0.002231597900390625, -5.841255187988281e-06, -1.1444091796875e-05, 0.0, -7.62939453125e-06, 0.0, -0.007266998291015625, -1.9073486328125e-06, -0.0119854137301445, 0.0, -2.09808349609375e-05, -0.011816263198852539, -0.00015258177882060409, -5.340576171875e-05, -3.814697265625e-06, -0.025179505348205566, -1.9073486328125e-06, -0.00023651123046875, 0.0, -0.0009111166000366211, -1.9073486328125e-06, 0.0, -1.549716034787707e-05, 0.0, -0.0014505954459309578, 0.0, -0.21080493927001953, -2.47955322265625e-05, -3.24249267578125e-05, -4.57763671875e-05, -0.0020809173583984375, -0.000255584716796875, -3.814697265625e-06, -0.0009137392044067383, -5.14984130859375e-05, -5.14984130859375e-05, 0.0, -7.2479248046875e-05, -2.861018856492592e-06, -4.649158654501662e-06, -1.33514404296875e-05, 0.0, -0.009925246238708496, -5.7220440794480965e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 5, "_type": "Num"}, {"n": 7, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Toshley"}, {"n": 6, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "LEGENDARY", "value": {"_type": "Template9"}}], "keywords": [{"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "AddCard"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "CardQuery"}, "_type": "Call", "keywords": [{"arg": "source", "_type": "keyword", "value": {"_type": "Attribute", "attr": "LIST", "value": {"_type": "Name", "id": "CARD_SOURCE"}}}, {"arg": "source_list", "_type": "keyword", "value": {"_type": "Name", "id": "spare_part_list"}}]}]}, {"_type": "Template6", "hole0": "PlayerSelector"}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "choice_history": [47, 111, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Toshley", "<EOS>", 42, 104, "6", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "LEGENDARY", "<EOS>", 149, 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 142, 35, 76, 23, 99, "Add", "Card", "<EOS>", 141, 35, 75, 23, 99, "Card", "Query", "<EOS>", 150, 131, "source", "<EOS>", 15, 69, 23, 99, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 131, "source_list", "<EOS>", 23, 99, "spare_part_list", "<EOS>", 45, 121, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "5", "<EOS>", 42, 104, "7", "<EOS>"]}]}
{"gold_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "beams": [{"score": -1.899286137416567, "score_history": [0.0, -1.33514404296875e-05, -0.0013685518642887473, -1.561634780955501e-05, -1.6689248241164023e-06, -1.3589859008789062e-05, -2.50339189733495e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.1961669921875e-05, -0.000202178955078125, 0.0, -0.0003337860107421875, -0.0001068115234375, -9.5367431640625e-06, -3.576278118089249e-07, -5.960462772236497e-07, 0.0, 0.0, -0.00019896114827133715, -4.0531076592742465e-06, 0.0, 0.0, -1.52587890625e-05, -2.288818359375e-05, -5.245207830739673e-06, -1.9073486328125e-06, -0.00044846534729003906, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-05, 0.0, -8.20159912109375e-05, 0.0, -0.0002040863037109375, 0.0, -1.1444091796875e-05, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -1.0484333038330078, 0.0, -3.814697265625e-06, 0.0, -1.668929871811997e-05, 0.0, -3.814697265625e-06, -0.0001239776611328125, -5.53131103515625e-05, -3.814697265625e-06, -5.340576171875e-05, -1.52587890625e-05, 0.0, -1.1920838005607948e-07, 0.0, -8.392333984375e-05, -9.5367431640625e-06, -9.5367431640625e-06, -2.169585059164092e-05, -2.3841855067985307e-07, 0.0, -3.814697265625e-06, -0.0012267821002751589, -1.9073468138230965e-06, -0.016999244689941406, -2.47955322265625e-05, -0.17659366130828857, -5.960462772236497e-07, -8.96453857421875e-05, -3.24249267578125e-05, -0.011627197265625, -0.0003681182861328125, -0.000518798828125, -3.814697265625e-06, 0.0, -0.0007232427597045898, -2.0265579223632812e-06, -3.814697265625e-06, -0.0004177093505859375, -0.007309913635253906, -3.814697265625e-06, 0.0, -0.0004596494254656136, -4.3272972106933594e-05, 0.0, -5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -0.016280055046081543, 0.0, -0.06382179260253906, -0.11115837097167969, 0.0, -3.814697265625e-06, -9.143375791609287e-05, -2.09808349609375e-05, 0.0, -0.000446319580078125, -0.02366161346435547, 0.0, -0.4128043055534363, -0.0024780419189482927], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}, {"n": 3, "_type": "Num"}], "keywords": [{"arg": "auras", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Aura"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}]}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "args": [{"_type": "Template6", "hole0": "Adjacent"}]}]}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}}}]}}], "hole1": "MinionCard"}, "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.PIRATE)\n\n    def create_minion(self, player):\n        return Minion(1, 3, auras=[Aura(ChangeAttack(1), MinionSelector(\n            Adjacent()))])\n", "choice_history": [47, 111, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Warbot", "<EOS>", 42, 104, "1", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 149, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "1", "<EOS>", 42, 104, "3", "<EOS>", 149, 131, "auras", "<EOS>", 21, 95, 141, 35, 76, 23, 99, "Aura", "<EOS>", 142, 35, 76, 23, 99, "Change", "Attack", "<EOS>", 141, 42, 104, "1", "<EOS>", 35, 76, 23, 99, "Minion", "Selector", "<EOS>", 141, 45, 121, "Adjacent", "<EOS>"]}]}
{"gold_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(\n            CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)),\n            PlayerSelector(EnemyPlayer())))\n", "beams": [{"score": -1.8457656683785473, "score_history": [0.0, -5.7220458984375e-06, -0.00019251251069363207, -0.00011681974865496159, -2.6225407054880634e-06, -9.5367431640625e-06, -1.9073468138230965e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -5.53131103515625e-05, -0.008489608764648438, -9.5367431640625e-06, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -5.960462772236497e-07, -1.1920928244535389e-07, -3.814697265625e-06, -1.9073486328125e-06, -2.7298434361000545e-05, -1.4185851796355564e-05, 0.0, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.882450103759766e-05, 0.0, -3.814697265625e-05, 0.0, -3.814697265625e-06, -3.814697265625e-06, -9.5367431640625e-06, -0.00015580645413137972, -2.3841855067985307e-07, -3.576278118089249e-07, 0.0, -0.0001593828055774793, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.62396240234375e-05, -0.0001087188720703125, -9.1552734375e-05, -1.9073486328125e-06, -1.192074705613777e-07, 0.0, -3.814697265625e-05, -1.52587890625e-05, -1.33514404296875e-05, -2.4437889805994928e-05, -2.7418097943154862e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.5085247755050659, -2.658331868587993e-05, -0.1659250259399414, -5.7220458984375e-06, -0.0014581676805391908, 0.0, -0.00022125244140625, -0.0001678466796875, -5.7220458984375e-06, -3.24249267578125e-05, -0.000464683398604393, 0.0, -0.0045528411865234375, -0.0014972686767578125, -0.000286102294921875, -4.1961669921875e-05, -6.29425048828125e-05, -0.25162720680236816, -0.1547090709209442, -4.88758041683468e-06, -0.0011930465698242188, -0.00568389892578125, 0.0, -0.05114638805389404, -1.1920928244535389e-07, -0.2268228530883789, -0.0001392364501953125, -0.46131908893585205, -3.826618194580078e-05, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}, {"n": 8, "_type": "Num"}], "keywords": [{"arg": "deathrattle", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "<UNK>deck"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}, {"_type": "Template6", "hole0": "HeroSelector"}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Deathlord"}, {"n": 3, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}]}}], "hole1": "MinionCard"}, "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(<UNK>deck(2),\n            HeroSelector()))\n", "choice_history": [47, 111, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Deathlord", "<EOS>", 42, 104, "3", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "2", "<EOS>", 42, 104, "8", "<EOS>", 149, 131, "deathrattle", "<EOS>", 18, 76, 23, 99, "Deathrattle", "<EOS>", 142, 35, 76, 23, 99, "<UNK>", "deck", "<EOS>", 141, 42, 104, "2", "<EOS>", 45, 121, "Hero", "Selector", "<EOS>"]}]}
{"gold_code": "class NerubarWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(\n            BothPlayer(), HasBattlecry()))])\n", "beams": [{"score": -7.9488282274412825, "score_history": [-7.82012939453125e-05, -7.62939453125e-06, -5.1020273531321436e-05, -4.255681051290594e-05, -4.410734163684538e-06, -1.5497080312343314e-06, -3.814697265625e-06, -4.768370445162873e-07, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -0.001979827880859375, 0.0, -5.91278076171875e-05, -1.1444091796875e-05, -1.9073486328125e-06, -6.6756979322235566e-06, -1.52587890625e-05, -2.264974000354414e-06, 0.0, -1.9073486328125e-06, 0.0, -3.8861606299178675e-05, 0.0, 0.0, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-05, -5.9485384554136544e-05, 0.0, -5.7220458984375e-05, 0.0, -0.02144622802734375, 0.0, -4.76837158203125e-05, -3.814697265625e-05, -1.9073486328125e-06, 0.0, -0.001975417137145996, -1.9073486328125e-06, -1.52587890625e-05, -0.000171661376953125, -4.38690185546875e-05, -7.62939453125e-06, -7.62939453125e-06, -0.04859685152769089, -0.2812296152114868, -0.0005950927734375, -0.011562347412109375, -0.00014495849609375, -3.814697265625e-06, -3.4332275390625e-05, -3.814697265625e-06, -0.010739684104919434, -0.0591433048248291, -5.7220458984375e-06, -0.0046215057373046875, -0.000579833984375, -2.47955322265625e-05, -1.9073486328125e-06, -3.814697265625e-05, -0.013013005256652832, -0.0024895668029785156, -1.9073486328125e-06, -0.000522613525390625, -0.024557113647460938, -1.9073486328125e-06, -0.06497085094451904, -1.9073486328125e-06, -8.7738037109375e-05, -4.57763671875e-05, -1.52587890625e-05, -1.33514404296875e-05, -0.0007266998291015625, -0.000453948974609375, 0.0, -1.9073486328125e-05, -2.86102294921875e-05, -0.0014123916625976562, -2.0265579223632812e-06, -0.0798959732055664, -1.9073486328125e-06, -0.005015850067138672, -0.5326256155967712, -7.62939453125e-06, -3.24249267578125e-05, 0.0, -0.04337608814239502, -0.0009614229202270508, -2.3841855067985307e-07, -0.0008592605590820312, -0.0052204132080078125, -1.9073486328125e-06, -3.814697265625e-06, -0.10425782203674316, -1.9073486328125e-06, 0.0, -0.0003833770751953125, -0.0001163482666015625, -0.005550384521484375, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.02130711078643799, -2.86102294921875e-05, 0.0, -1.9073486328125e-06, 0.0, -0.0008563995361328125, 0.0, -9.5367431640625e-06, -7.62939453125e-05, -5.53131103515625e-05, -1.33514404296875e-05, -0.2197723388671875, -1.9073486328125e-05, 0.0, -2.383312676101923e-07, 0.0, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -1.6689240510459058e-05, -3.576278118089249e-07, 0.0, -5.7220458984375e-06, -2.6225170586258173e-06, -7.152555099310121e-07, -5.14984130859375e-05, 0.0, -1.4679299592971802, 0.0, -0.0001583099365234375, -0.0010089874267578125, -7.62939453125e-06, -3.814697265625e-06, -0.011569458059966564, 0.0, -0.000152587890625, -0.00060272216796875, -1.1444091796875e-05, -6.67572021484375e-05, -4.1961669921875e-05, -1.774846076965332, -0.020376205444335938, -9.5367431640625e-06, -0.0003204345703125, -1.9073486328125e-06, -7.62939453125e-06, -1.52587890625e-05, -0.37964487075805664, -8.094310032902285e-05, -3.814697265625e-06, -0.006900787353515625, -1.9073486328125e-05, -1.9073486328125e-06, -8.392333984375e-05, -0.026598215103149414, -0.0005252361297607422, 0.0, -0.0012645721435546875, -0.4191761016845703, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -0.3035537004470825, -0.000156402587890625, -1.9073486328125e-06, -0.0001087188720703125, -4.1961669921875e-05, -0.1817868947982788, -1.9073486328125e-06, -0.00457000732421875, -0.000164031982421875, -3.814697265625e-06, -1.1444091796875e-05, -1.3937433958053589, -4.76837158203125e-05, 0.0, -1.9073486328125e-05, -0.0003528594970703125, 0.0, -0.2097034454345703, -0.00014531612396240234, 0.0, -0.027246475219726562, 0.0, -0.14314377307891846, -2.0265579223632812e-06, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}, {"n": 4, "_type": "Num"}], "keywords": [{"arg": "deathrattle", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ManaChange"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Attribute"}, "_type": "Call", "args": [{"_type": "Str", "s": "<UNK>"}, {"func": {"_type": "Name", "id": "HeroSelector"}, "_type": "Call", "args": [{"_type": "Template6", "hole0": "EnemyPlayer"}]}]}]}]}]}, {"_type": "Template6", "hole0": "PlayerSelector"}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Nerub'ar Weblord"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "GiveAura"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "AuraUntil"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ManaChange"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}, {"func": {"_type": "Name", "id": "CardSelector"}, "_type": "Call", "keywords": [{"arg": "condition", "_type": "keyword", "value": {"_type": "Template6", "hole0": "IsMinion"}}]}, {"_type": "Template6", "hole0": "TurnEnded"}]}]}, {"func": {"_type": "Name", "id": "PlayerSelector"}, "_type": "Call", "keywords": [{"arg": "players", "_type": "keyword", "value": {"_type": "Template6", "hole0": "EnemyPlayer"}}]}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(GiveAura(AuraUntil(\n            ManaChange(2), CardSelector(condition=IsMinion()), TurnEnded())\n            ), PlayerSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(1, 4, deathrattle=Deathrattle(Give(Buff(ManaChange(\n            Attribute('<UNK>', HeroSelector(EnemyPlayer()))))),\n            PlayerSelector()))\n", "choice_history": [47, 111, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Nerub'ar", " ", "Weblord", "<EOS>", 42, 104, "2", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 149, 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 142, 35, 76, 23, 99, "Give", "Aura", "<EOS>", 141, 35, 76, 23, 99, "Aura", "Until", "<EOS>", 143, 35, 76, 23, 99, "Mana", "Change", "<EOS>", 141, 42, 104, "2", "<EOS>", 35, 75, 23, 99, "Card", "Selector", "<EOS>", 149, 131, "condition", "<EOS>", 28, 121, "Is", "Minion", "<EOS>", 45, 121, "Turn", "Ended", "<EOS>", 35, 75, 23, 99, "Player", "Selector", "<EOS>", 149, 131, "players", "<EOS>", 28, 121, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "1", "<EOS>", 42, 104, "4", "<EOS>", 149, 131, "deathrattle", "<EOS>", 18, 76, 23, 99, "Deathrattle", "<EOS>", 142, 35, 76, 23, 99, "Give", "<EOS>", 141, 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Mana", "Change", "<EOS>", 141, 35, 76, 23, 99, "Attribute", "<EOS>", 142, 43, 108, "<UNK>", "<EOS>", 35, 76, 23, 99, "Hero", "Selector", "<EOS>", 141, 45, 121, "Enemy", "Player", "<EOS>", 45, 121, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "beams": [{"score": -0.0474187186941748, "score_history": [-7.62939453125e-06, -5.7220458984375e-06, -6.16293036728166e-05, -0.00043840528815053403, -5.245207830739673e-06, -2.1217419998720288e-05, -2.6941299438476562e-05, -2.7656224119709805e-05, -8.392333984375e-05, -7.62939453125e-06, 0.0, -0.000347137451171875, -0.000148773193359375, -9.5367431640625e-05, -0.009265899658203125, -1.9073486328125e-06, 0.0, -9.536738616588991e-07, -2.5391578674316406e-05, -0.004990100860595703, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0065847598016262054, -1.1920928244535389e-07, 0.0, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -9.918212890625e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -8.785724639892578e-05, 0.0, -1.71661376953125e-05, 0.0, -1.919269561767578e-05, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -7.05718994140625e-05, -1.52587890625e-05, -0.00016021728515625, -9.5367431640625e-06, -1.9073486328125e-06, -4.7654611989855766e-07, 0.0, -4.00543212890625e-05, 0.0, -1.9073486328125e-06, -0.0005045677535235882, -1.1920928244535389e-07, -1.9073486328125e-06, -6.29425048828125e-05, -0.0015541171887889504, -8.583032467868179e-06, -0.0026874542236328125, -0.000736236572265625, -0.017012596130371094, 0.0, -0.00091552734375, -8.20159912109375e-05, -0.0011276006698608398, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 4, "_type": "Num"}, {"n": 6, "_type": "Num"}], "keywords": [{"arg": "spell_targetable", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Spectral Knight"}, {"n": 5, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}]}}], "hole1": "MinionCard"}, "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=True)\n", "choice_history": [47, 111, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Spectral", " ", "Knight", "<EOS>", 42, 104, "5", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "4", "<EOS>", 42, 104, "6", "<EOS>", 149, 131, "spell_targetable", "<EOS>", 24, 100, "False", "<EOS>"]}]}
{"gold_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "beams": [{"score": -1.0222326293924056, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -0.0010332489619031549, -3.3378044463461265e-05, -7.629365427419543e-06, -1.1920883480343036e-07, -2.288818359375e-05, -1.1920922133867862e-06, -7.2479248046875e-05, -1.52587890625e-05, 0.0, -1.9073486328125e-05, -0.000240325927734375, -5.7220458984375e-06, -1.1444091796875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.576278118089249e-07, -1.9311904907226562e-05, -8.344646857949556e-07, -1.1920928244535389e-07, 0.0, 0.0, -0.00028800961445085704, -2.3841855067985307e-07, 0.0, 0.0, -3.814697265625e-06, 0.0, -1.537799835205078e-05, 0.0, -2.6702880859375e-05, 0.0, -1.33514404296875e-05, 0.0, -1.1444091796875e-05, -0.00027799553936347365, -2.3841855067985307e-07, -0.0002193450927734375, 0.0, -2.300739288330078e-05, -1.1920928244535389e-07, -0.00014495849609375, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -0.00017559526895638555, 0.0, -1.33514404296875e-05, -0.20739078521728516, -0.0002536773681640625, -1.9073486328125e-06, -9.5367431640625e-06, -0.2616921365261078, -2.0980687622795813e-05, -8.392333984375e-05, -0.19336318969726562, -1.9073486328125e-06, -0.005825042724609375, -3.814697265625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -7.62939453125e-06, -0.00064849853515625, 0.0, -1.9073486328125e-06, -0.005680084228515625, -5.91278076171875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.011144040152430534, -0.007844090461730957, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001087188720703125, 0.0, -0.007514472585171461, -9.5367431640625e-06, -2.288818359375e-05, -1.9073486328125e-05, 0.0, 0.0, -0.0001773834228515625, 0.0, -1.1444091796875e-05, -0.03305816650390625, -0.0001087188720703125, -1.9073486328125e-06, -1.1444091796875e-05, -0.004634466953575611, -0.11266005039215088, 0.0, -7.62939453125e-06, -0.00022125244140625, -1.9073486328125e-06, -0.006540760863572359, -5.7220458984375e-06, -0.15918922424316406, 0.0, -0.0006886720657348633, -3.814697265625e-06, 0.0, -1.9669532775878906e-05, 0.0, -1.8477414414519444e-05, 0.0, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0002079010009765625, -1.1444091796875e-05, -1.71661376953125e-05, -3.576060407795012e-07, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, -4.637240635929629e-05, -2.145764938177308e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.549708758830093e-05, -1.1920922133867862e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}, {"n": 5, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"n": 4, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}], "keywords": [{"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}, {"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}]}]}, {"_type": "Template6", "hole0": "SelfSelector"}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(2))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [47, 111, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Wailing", " ", "Soul", "<EOS>", 42, 104, "4", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "RARE", "<EOS>", 149, 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 142, 35, 76, 23, 99, "Give", "<EOS>", 141, 38, 95, 142, 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Attack", "<EOS>", 141, 42, 104, "2", "<EOS>", 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Health", "<EOS>", 141, 42, 104, "2", "<EOS>", 45, 121, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "3", "<EOS>", 42, 104, "5", "<EOS>"]}]}
{"gold_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "beams": [{"score": -1.4321014210708753, "score_history": [0.0, -1.9073486328125e-06, -0.0005521441926248372, -3.218599158572033e-05, -6.198863957251888e-06, -2.3841585061745718e-07, -1.1682510375976562e-05, -1.6689286894688848e-06, -1.9073486328125e-06, 0.0, 0.0, -0.000102996826171875, -0.3746814727783203, -1.9073486328125e-06, -1.52587890625e-05, -5.53131103515625e-05, -3.814697265625e-06, -7.510157047363464e-06, -1.71661376953125e-05, -1.2516897186287679e-05, 0.0, 0.0, 0.0, -7.45034049032256e-05, -1.1920928244535389e-07, 0.0, 0.0, -3.814697265625e-06, 0.0, -1.919269561767578e-05, -1.9073486328125e-06, -5.91278076171875e-05, 0.0, -1.1444091796875e-05, 0.0, -1.71661376953125e-05, -3.24249267578125e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0001964569091796875, -2.3841855067985307e-07, -1.9073486328125e-05, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -3.0517578125e-05, 0.0, -0.47365856170654297, 0.0, -1.1444091796875e-05, 0.0, -1.1563301086425781e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -7.43865966796875e-05, -7.62939453125e-06, 0.0, -5.958427209407091e-07, 0.0, -7.82012939453125e-05, -1.9073486328125e-06, -1.33514404296875e-05, -9.65590606938349e-06, 0.0, -1.9073486328125e-06, 0.0, -3.111340993200429e-05, -9.536738616588991e-07, -0.03192615509033203, -1.9073486328125e-06, -0.014520764350891113, -4.6491513785440475e-06, -7.05718994140625e-05, -1.9073486328125e-06, -0.0020771026611328125, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -0.00039565563201904297, -1.537799835205078e-05, -7.62939453125e-06, -9.72747802734375e-05, -0.006850242614746094, -7.62939453125e-06, -3.814697265625e-06, -0.002217769157141447, -7.641314005013555e-05, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.3100684583187103, 0.0, -0.08196067810058594, 0.0, -0.13171815872192383, -1.1563301086425781e-05, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}, {"n": 3, "_type": "Num"}], "keywords": [{"arg": "enrage", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Aura"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}]}, {"_type": "Template6", "hole0": "SelfSelector"}]}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Amani Berserker"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}}}]}}], "hole1": "MinionCard"}, "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "choice_history": [47, 111, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Amani", " ", "Berserker", "<EOS>", 42, 104, "2", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 149, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "2", "<EOS>", 42, 104, "3", "<EOS>", 149, 131, "enrage", "<EOS>", 21, 95, 141, 35, 76, 23, 99, "Aura", "<EOS>", 142, 35, 76, 23, 99, "Change", "Attack", "<EOS>", 141, 42, 104, "3", "<EOS>", 45, 121, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            hearthbreaker.cards.Fireball()), PlayerSelector()))])\n", "beams": [{"score": -3.724889898241017, "score_history": [-5.7220458984375e-06, -1.71661376953125e-05, -0.008968428708612919, -9.190614218823612e-05, -1.1920922133867862e-06, -3.0994285680208122e-06, -3.814697265625e-06, -4.768370445162873e-07, -1.52587890625e-05, 0.0, -5.7220458984375e-06, -5.14984130859375e-05, -0.002899169921875, -7.62939453125e-06, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -4.0531076592742465e-06, -3.8743019104003906e-05, -1.4662702596979216e-05, 0.0, -5.7220458984375e-06, 0.0, -0.13979770243167877, -1.1920928244535389e-07, 0.0, 0.0, -9.5367431640625e-06, 0.0, -8.702266313775908e-06, 0.0, -0.2119159698486328, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -0.0014399290084838867, 0.0, -1.9073486328125e-06, 0.0, -1.0132789611816406e-05, 0.0, -2.09808349609375e-05, -3.0517578125e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.0001506805419921875, -3.0517578125e-05, 0.0, -5.125824827700853e-06, -1.9073486328125e-06, -5.14984130859375e-05, -5.7220458984375e-06, 0.0, -2.741813204920618e-06, -6.5565000113565475e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.001845836522988975, -6.914134246471804e-06, -7.62939453125e-05, -1.9073486328125e-05, -0.0001316070556640625, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002079010009765625, -1.9073486328125e-06, -3.814697265625e-05, -8.392333984375e-05, -2.47955322265625e-05, -2.1815278159920126e-05, 0.0, -2.6702880859375e-05, -0.0031566619873046875, -0.17592716217041016, -3.814697265625e-06, 0.0, -0.01697595603764057, -0.0027666091918945312, 0.0, -0.010981559753417969, -0.07734107971191406, -2.6702880859375e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.6239743232727051, -0.02365875244140625, -5.841255187988281e-06, -2.288818359375e-05, -0.10706901550292969, -6.29425048828125e-05, -0.012413930147886276, 0.0, -0.009763717651367188, -6.866455078125e-05, -1.52587890625e-05, 0.0, -0.0024241204373538494, -2.6702880859375e-05, -1.9073486328125e-06, -0.0002269744873046875, -0.0001163482666015625, -0.00250244140625, -0.00060272216796875, -6.866455078125e-05, -0.7228637933731079, 0.0, -1.9073486328125e-06, -0.000141143798828125, -1.9073486328125e-06, -0.29497724771499634, -0.49636781215667725, -0.6677582263946533, -0.10418924689292908, -1.1444091796875e-05, -1.9073486328125e-06, -0.00014829635620117188, -2.682209014892578e-05, -1.1920928244535389e-07], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 5, "_type": "Num"}, {"n": 7, "_type": "Num"}], "keywords": [{"arg": "effects", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Effect"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "SpellCast"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ManaCost"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}, {"func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Summon"}, "_type": "Call", "args": [{"_type": "Template6", "hole0": "'FireballAntonidasspell"}]}, {"_type": "Template6", "hole0": "PlayerSelector"}]}]}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Archmage Antonidas"}, {"n": 7, "_type": "Num"}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "LEGENDARY", "value": {"_type": "Template9"}}]}}], "hole1": "MinionCard"}, "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(2)),\n            ActionTag(Summon('FireballAntonidasspell()), PlayerSelector()))])\n", "choice_history": [47, 111, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Archmage", " ", "Antonidas", "<EOS>", 42, 104, "7", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 32, 69, 29, "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "5", "<EOS>", 42, 104, "7", "<EOS>", 149, 131, "effects", "<EOS>", 21, 95, 141, 35, 76, 23, 99, "Effect", "<EOS>", 142, 35, 76, 23, 99, "Spell", "Cast", "<EOS>", 141, 35, 76, 23, 99, "Mana", "Cost", "<EOS>", 141, 42, 104, "2", "<EOS>", 35, 76, 23, 99, "Action", "Tag", "<EOS>", 142, 35, 76, 23, 99, "Summon", "<EOS>", 141, 45, 121, "'Fireball", "Antonidas", "spell", "<EOS>", 45, 121, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)\n", "beams": [{"score": -1.7647072042113123, "score_history": [-1.9073486328125e-06, -4.38690185546875e-05, -3.0636318115284666e-05, -2.4437606043647975e-05, -4.7660432755947113e-07, -4.4226646423339844e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -9.72747802734375e-05, -1.33514404296875e-05, -7.43865966796875e-05, -0.000263214111328125, -3.814697265625e-06, -0.03816032409667969, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.4543426004820503e-05, -7.152555099310121e-07, 0.0, 0.0, -5.7220458984375e-06, 0.0, -6.532502447953448e-05, -1.9073486328125e-06, -0.04454851150512695, 0.0, 0.0, 0.0, -6.67572021484375e-05, -0.0006967781810089946, 0.0, -0.027704238891601562, 0.0, -0.000125885009765625, -2.3841855067985307e-07, -2.09808349609375e-05, -1.9073486328125e-06, -8.7738037109375e-05, 0.0, -2.288818359375e-05, 0.0, -8.392333984375e-05, 0.0, -0.0008389949798583984, 0.0, -0.023065924644470215, 0.0, -5.841255187988281e-06, 0.0, -9.5367431640625e-06, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -3.0517578125e-05, -0.00019097326730843633, -2.229192978120409e-05, -0.009027481079101562, -0.0001354217529296875, -0.0006103515625, -9.5367431640625e-06, -1.9073486328125e-06, -2.7060459615313448e-05, -2.3841855067985307e-07, -9.52482150751166e-05, 0.0, -3.814697265625e-06, -0.0001354217529296875, 0.0, -3.147101233480498e-05, -7.152555099310121e-07, -1.9073486328125e-06, 0.0, -0.0006657838821411133, 0.0, -0.5818614959716797, -1.52587890625e-05, -1.1444091796875e-05, -0.043618202209472656, -1.9073486328125e-06, -0.008516311645507812, 0.0, -0.0001735687255859375, 0.0, -6.4849853515625e-05, 0.0, -7.450580596923828e-05, 0.0, -0.6561214923858643, 0.0, -0.3260793685913086, -0.0001163482666015625, -0.0008809565915726125, -1.311301275563892e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "Bananas", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"targets": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}]}}], "hole1": "SpellCard"}, "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.health = True\n", "choice_history": [47, 113, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Bananas", "<EOS>", 42, 104, "1", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 149, 131, "target_func", "<EOS>", 15, 69, 15, 69, 23, 99, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 155, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 52, 68, 141, 32, 69, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 24, 100, "True", "<EOS>"]}]}
{"gold_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(DoubleAttack()))\n", "beams": [{"score": -1.9954045827338973, "score_history": [-5.7220458984375e-06, -0.00069427490234375, -0.00011383838864276186, -4.339123915997334e-05, -1.4543427823809907e-05, -6.42810482531786e-06, -1.9073486328125e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.33514404296875e-05, -0.10344505310058594, -7.62939453125e-06, -0.0004596710205078125, -1.33514404296875e-05, -1.9073486328125e-06, -1.0490362910786644e-05, -2.09808349609375e-05, -3.0040444471524097e-05, 0.0, 0.0, 0.0, -1.168244216387393e-05, -1.156323378381785e-05, 0.0, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -2.145764938177308e-06, 0.0, -0.005020618438720703, 0.0, -0.0001220703125, -1.9073486328125e-06, -7.82012939453125e-05, -0.004735827445983887, 0.0, -0.0001087188720703125, 0.0, -0.0005397796630859375, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.1444091796875e-05, 0.0, -2.288818359375e-05, 0.0, -6.4849853515625e-05, 0.0, -0.00035202503204345703, -1.9073486328125e-06, -0.0024529695510864258, -1.1563301086425781e-05, -5.9604562920867465e-06, 0.0, -2.396090167167131e-05, 0.0, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -1.7404556274414062e-05, -3.576278118089249e-07, -0.106719970703125, -1.9073486328125e-05, -2.6702880859375e-05, -7.82012939453125e-05, -1.9073486328125e-06, -1.4066685253055766e-05, -2.3841855067985307e-07, -3.6477853427641094e-05, -1.1920928244535389e-07, -3.62396240234375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -6.079673039494082e-05, -1.1920928244535389e-07, -9.5367431640625e-06, 0.0, -5.340576171875e-05, -1.1920928244535389e-07, -0.17076492309570312, -7.05718994140625e-05, -3.814697265625e-06, 0.0, -0.00051116943359375, 0.0, -4.38690185546875e-05, -1.5497195136049413e-06, -0.0003072023391723633, -2.0265579223632812e-06, -0.7623083591461182, -4.88758041683468e-06, -7.62939453125e-06, -0.43099117279052734, -1.9073486328125e-06, -0.4047360420227051, -3.909988299710676e-05], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "BlessedChampion", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"_type": "Template5", "hole2": [{"_type": "Name", "id": "<UNK>"}], "hole1": "change_attack", "hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"n": 5, "_type": "Num"}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}], "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}]}}], "hole1": "SpellCard"}, "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(<UNK>)\n", "choice_history": [47, 113, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Blessed", " ", "Champion", "<EOS>", 42, 104, "5", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 32, 69, 29, "RARE", "<EOS>", 149, 131, "target_func", "<EOS>", 15, 69, 15, 69, 23, 99, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 155, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 63, 120, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 141, 40, 99, "<UNK>", "<EOS>"]}]}
{"gold_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(\n            AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "beams": [{"score": -3.9865938014572606, "score_history": [-1.9073486328125e-06, -7.62939453125e-06, -0.00019453064305707812, -0.10657688230276108, -0.021374821662902832, -1.2993727978027891e-05, -1.1920906217710581e-07, -9.5367431640625e-06, -2.622600959512056e-06, -1.52587890625e-05, -1.1444091796875e-05, 0.0, -4.00543212890625e-05, -8.96453857421875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -7.62939453125e-06, -5.7220458984375e-06, -0.004707326181232929, -1.33514404296875e-05, -9.059898729901761e-05, -0.0009822845458984375, -5.7220313465222716e-05, 0.0, 0.0, 0.0, -9.750873869052157e-05, -3.933906555175781e-06, 0.0, -1.9073486328125e-06, -3.62396240234375e-05, -1.9073486328125e-06, -0.0003141869092360139, 0.0, -0.011407017707824707, 0.0, -3.814697265625e-06, -2.86102294921875e-05, -2.6702880859375e-05, -0.0005092580686323345, -1.9073486328125e-06, -0.0001735687255859375, -1.9073486328125e-06, -7.855892181396484e-05, -5.960462772236497e-07, -0.0001888275146484375, -4.00543212890625e-05, 0.0, -4.38690185546875e-05, -0.001780716935172677, -3.576278118089249e-07, -4.1961669921875e-05, -0.2105846405029297, -2.47955322265625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.06716592609882355, -0.05569171905517578, -2.264974000354414e-06, -0.012791633605957031, -0.028850555419921875, -0.0001583099365234375, -1.9073486328125e-06, 0.0, -1.4642857313156128, -0.002335667610168457, -9.5367431640625e-06, -7.62939453125e-06, -4.00543212890625e-05, -0.9139178395271301, -0.0012608766555786133, -0.003719329833984375, -2.288818359375e-05, -3.814697265625e-06, -7.62939453125e-06, -0.8072291016578674, -0.0007859468460083008, 0.0, -1.9073486328125e-06, -0.0001316070556640625, -3.814697265625e-06, -0.0028442400507628918, -1.955030529643409e-05, 0.0, -0.16216278076171875, 0.0, -0.10096359252929688, -2.1457672119140625e-06, -1.1920928244535389e-07, -1.3351424058782868e-05, 0.0, -3.850458233500831e-05, 0.0, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.0001773834228515625, -5.7220458984375e-06, -9.34600830078125e-05, -3.576060407795012e-07, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0006579087348654866, -1.1920928244535389e-07, -1.9073486328125e-06, -5.7220458984375e-06, -0.001529596047475934, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowPriest", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 4, "_type": "Num"}, {"n": 5, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow Priest"}, {"n": 6, "_type": "Num"}, {"_type": "Attribute", "attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "EPIC", "value": {"_type": "Template9"}}], "keywords": [{"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Attribute"}, "_type": "Call", "args": [{"_type": "Str", "s": "<UNK>"}, {"func": {"_type": "Name", "id": "WeaponSelector"}, "_type": "Call", "args": [{"_type": "Template6", "hole0": "EnemyPlayer"}]}]}]}, {"_type": "Template6", "hole0": "PlayerSelector"}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(MinionSelector(Attribute(\n            '<UNK>', WeaponSelector(EnemyPlayer()))), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [47, 111, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Cabal", " ", "Shadow", " ", "Priest", "<EOS>", 42, 104, "6", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 32, 69, 29, "EPIC", "<EOS>", 149, 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 142, 35, 76, 23, 99, "Minion", "Selector", "<EOS>", 141, 35, 76, 23, 99, "Attribute", "<EOS>", 142, 43, 108, "<UNK>", "<EOS>", 35, 76, 23, 99, "Weapon", "Selector", "<EOS>", 141, 45, 121, "Enemy", "Player", "<EOS>", 45, 121, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "4", "<EOS>", 42, 104, "5", "<EOS>"]}]}
{"gold_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        index = self.target.index\n        if self.target.index < len(self.target.player.minions) - 1:\n            minion = self.target.player.minions[index + 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target.index > 0:\n            minion = self.target.player.minions[index - 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n", "beams": [{"score": -8.333551596483026, "score_history": [-2.47955322265625e-05, -0.0001163482666015625, -0.0004545609117485583, -0.0017552796052768826, -0.0018717439379543066, -4.768370445162873e-07, -2.0261795725673437e-06, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.04275321960449219, -1.9073486328125e-06, -0.0002727508544921875, 0.0, 0.0, -9.536697689327411e-06, -4.38690185546875e-05, -4.52994936495088e-06, -6.866455078125e-05, -1.1682510375976562e-05, 0.0, -5.7220458984375e-06, 0.0, -9.858118573902175e-05, 0.0, 0.0, 0.0, -1.52587890625e-05, 0.0, -5.030632019042969e-05, 0.0, -0.04836273193359375, 0.0, 0.0, -1.9073486328125e-06, -0.0001163482666015625, -0.00023496150970458984, 0.0, -0.000133514404296875, 0.0, -0.0059108734130859375, 0.0, -0.000110626220703125, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -3.0517578125e-05, 0.0, -0.0001773834228515625, 0.0, -0.001556396484375, 0.0, -0.5463658571243286, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.4185851796355564e-05, 0.0, -1.33514404296875e-05, -4.57763671875e-05, -9.34600830078125e-05, -4.7683570301160216e-05, -0.00020799935737159103, -1.2789182662963867, -3.62396240234375e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.0967253729177173e-05, 0.0, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -3.62396240234375e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.08627796173095703, -1.9073486328125e-06, -4.76837158203125e-05, -0.0001468658447265625, -1.9073486328125e-06, -0.763013482093811, -2.3841855067985307e-07, -0.3174161911010742, -0.002834320068359375, -6.461143493652344e-05, 0.0, -0.49893951416015625, -0.3477897644042969, -0.09724807739257812, 0.0, -0.0003871917724609375, 0.0, -0.000247955322265625, 0.0, -1.52587890625e-05, -2.0265579223632812e-06, -0.6329050064086914, 0.0, 0.0, -0.01024627685546875, -0.000171661376953125, -1.71661376953125e-05, 0.0, -3.814697265625e-06, 0.0, -0.00016021728515625, 0.0, -0.0002638101577758789, 0.0, -3.4332275390625e-05, -0.03046703338623047, 0.0, -0.6513190269470215, -2.9802276912960224e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.915496826171875e-05, -3.814697265625e-06, -0.05515003204345703, -0.000675201416015625, -0.000179290771484375, -3.814697265625e-05, -0.10288333892822266, -1.33514404296875e-05, -0.009693145751953125, 0.0, -0.00041961669921875, -1.9073486328125e-05, -0.0005970001220703125, -1.9073486328125e-06, -1.9073486328125e-05, -0.039673805236816406, -4.76837158203125e-05, -0.022319793701171875, 0.0, -0.002902984619140625, 0.0, -0.0012054443359375, 0.0, -0.000209808349609375, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -0.49291181564331055, 0.0, -5.7220458984375e-05, -0.0004787445068359375, -1.9073486328125e-06, -0.17699432373046875, -1.9073486328125e-06, -0.4456367492675781, -4.57763671875e-05, -8.392333984375e-05, 0.0, -6.103515625e-05, 0.0, -1.9073486328125e-06, 0.0, -1.0895123481750488, 0.0, -0.0023555755615234375, 0.0, 0.0, -8.0108642578125e-05, -9.918212890625e-05, -4.76837158203125e-05, 0.0, -1.1444091796875e-05, 0.0, -0.000125885009765625, 0.0, -0.00026988983154296875, 0.0, -1.71661376953125e-05, -0.01733112335205078, 0.0, -0.5010561943054199, -4.768367489305092e-06, -5.7220458984375e-06, -1.9073486328125e-06, -6.008148193359375e-05, -5.7220458984375e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "ConeOfCold", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"targets": [{"_type": "Name", "id": "left_minion"}], "_type": "Assign", "value": {"_type": "NameConstant", "value": "Null"}}, {"_type": "Template5", "hole2": [{"func": {"_type": "Attribute", "attr": "effective_spell_damage", "value": {"_type": "Name", "id": "player"}}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}, {"body": [{"_type": "Template5", "hole2": [{"func": {"_type": "Attribute", "attr": "effective_spell_damage", "value": {"_type": "Name", "id": "player"}}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"_type": "Attribute", "attr": "index", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}], "_type": "If", "test": {"left": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Compare", "comparators": [{"_type": "Attribute", "attr": "index", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "ops": [{"_type": "IsNot"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"n": 4, "_type": "Num"}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}]}}], "hole1": "SpellCard"}, "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        left_minion = Null\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target is not self.target.index:\n            self.target.index.damage(player.effective_spell_damage(1), self)\n", "choice_history": [47, 113, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Cone", " ", "of", " ", "Cold", "<EOS>", 42, 104, "4", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 149, 131, "target_func", "<EOS>", 15, 69, 15, 69, 23, 99, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 157, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 52, 68, 141, 40, 99, "left_minion", "<EOS>", 24, 101, "Null", "<EOS>", 63, 120, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 142, 35, 76, 15, 69, 23, 99, "player", "<EOS>", "effective_spell_damage", "<EOS>", 141, 42, 104, "1", "<EOS>", 40, 99, "self", "<EOS>", 59, 86, 19, 79, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", 138, 11, 141, 32, 69, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "index", "<EOS>", 154, 63, 120, 15, 69, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "index", "<EOS>", "damage", "<EOS>", 142, 35, 76, 15, 69, 23, 99, "player", "<EOS>", "effective_spell_damage", "<EOS>", 141, 42, 104, "1", "<EOS>", 40, 99, "self", "<EOS>"]}]}
{"gold_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"score": -0.8541657281934931, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -0.009139842353761196, -0.010906040668487549, -0.00018440114217810333, -0.00015114595589693636, -1.0728790584835224e-06, -3.933906555175781e-06, -7.152555099310121e-07, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-06, -5.14984130859375e-05, -3.814697265625e-06, -9.5367431640625e-06, -2.288818359375e-05, 0.0, -9.250213042832911e-05, -3.4332275390625e-05, -1.1682462172757369e-05, -3.4332275390625e-05, -6.556510470545618e-06, 0.0, -1.9073486328125e-06, 0.0, -4.696843461715616e-05, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -0.00010156631469726562, 0.0, -4.57763671875e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.00027918803971260786, 0.0, -0.00682830810546875, 0.0, -1.52587890625e-05, 0.0, -4.76837158203125e-05, -3.4332275390625e-05, -1.9073486328125e-06, 0.0, -0.00010788353392854333, 0.0, -9.5367431640625e-06, -0.000209808349609375, -0.000141143798828125, -7.62939453125e-06, 0.0, -0.0027944110333919525, -4.768367489305092e-06, -0.0003070831298828125, -0.002490997314453125, -5.7220458984375e-06, -0.14134883880615234, -1.52587890625e-05, -3.62396240234375e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0014649555087089539, 0.0, -1.9073486328125e-06, -0.0020732879638671875, -2.09808349609375e-05, -3.814697265625e-06, -7.62939453125e-06, -0.006121104583144188, -0.0031251907348632812, -3.0517578125e-05, -1.33514404296875e-05, -4.00543212890625e-05, 0.0, -0.004267246462404728, 0.0, -4.57763671875e-05, -9.5367431640625e-06, 0.0, 0.0, -0.017069213092327118, -2.2649765014648438e-06, -1.33514404296875e-05, -0.0006694793701171875, -3.4332275390625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.13575084507465363, -0.01860332489013672, 0.0, -2.86102294921875e-05, -0.004412651062011719, -1.1444091796875e-05, -0.023937560617923737, 0.0, -3.0517578125e-05, -0.24191856384277344, 0.0, -1.9073486328125e-06, -3.187358379364014e-05, -0.0032634735107421875, 0.0, -0.010126113891601562, -0.000690460205078125, -7.2479248046875e-05, -1.9073486328125e-06, 0.0, -0.021876096725463867, -9.882441372610629e-05, -3.814697265625e-06, -0.003879547119140625, -9.5367431640625e-06, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -0.0002880096435546875, 0.0, -0.17726707458496094, 0.0, -0.00011265277862548828, 0.0, -2.6702880859375e-05, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.00090789794921875, -3.814697265625e-06, -3.814697265625e-06, -2.3836037144064903e-07, 0.0, 0.0, 0.0, -1.9073486328125e-06, -8.83304892340675e-05, 0.0, 0.0, 0.0, -3.2901574741117656e-05, -2.622604142743512e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}, {"n": 3, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"n": 4, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}], "keywords": [{"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}, {"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}]}]}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}]}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(2))]), MinionSelector(IsType(MINION_TYPE.\n            MURLOC))))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [47, 111, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Defender", " ", "of", " ", "Argus", "<EOS>", 42, 104, "4", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "RARE", "<EOS>", 149, 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 142, 35, 76, 23, 99, "Give", "<EOS>", 141, 38, 95, 142, 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Attack", "<EOS>", 141, 42, 104, "2", "<EOS>", 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Health", "<EOS>", 141, 42, 104, "2", "<EOS>", 35, 76, 23, 99, "Minion", "Selector", "<EOS>", 141, 35, 76, 23, 99, "Is", "Type", "<EOS>", 141, 32, 69, 23, 99, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "2", "<EOS>", 42, 104, "3", "<EOS>"]}]}
{"gold_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, buffs=[Buff(Windfury())])\n", "beams": [{"score": -0.6096297389995016, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -0.0006473377579823136, -0.005818693898618221, -7.390948667307384e-06, -0.0003948211669921875, -5.125986263010418e-06, -9.5367431640625e-06, -6.29425048828125e-05, -1.9073486328125e-06, -6.866455078125e-05, -0.0006618499755859375, 0.0, -1.71661376953125e-05, -0.0001506805419921875, -1.9073486328125e-06, -9.536738616588991e-07, -3.814697265625e-06, 0.0, 0.0, -0.00458955205976963, 0.0, 0.0, 0.0, -1.9073486328125e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.000758051872253418, 0.0, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -0.004791617393493652, -4.52994936495088e-06, -0.0033054351806640625, 0.0, -0.01065826416015625, -1.52587890625e-05, -0.0003108978271484375, -7.62939453125e-06, -0.03600144386291504, 0.0, -9.34600830078125e-05, 0.0, -0.00012218952178955078, 0.0, -2.47955322265625e-05, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.0002994537353515625, -1.9073486328125e-06, -1.9073486328125e-06, -0.00010561384988250211, -3.576272320060525e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -0.0001952642051037401, 0.0, 0.0, 0.0, -0.3957937955856323, -5.01871072629001e-05, -0.10239887237548828, -5.7220458984375e-06, -0.03697466850280762, 0.0, -0.0051174163818359375, -1.71661376953125e-05, -3.8623809814453125e-05, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Doomhammer", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Weapon"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}, {"n": 8, "_type": "Num"}], "keywords": [{"arg": "windfury", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"n": 5, "_type": "Num"}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "EPIC", "value": {"_type": "Template9"}}], "keywords": [{"arg": "overload", "_type": "keyword", "value": {"n": 2, "_type": "Num"}}]}}], "hole1": "WeaponCard"}, "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8, windfury=True)\n", "choice_history": [47, 111, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Doomhammer", "<EOS>", 42, 104, "5", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 32, 69, 29, "EPIC", "<EOS>", 149, 131, "overload", "<EOS>", 25, 104, "2", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Weapon", "<EOS>", 142, 42, 104, "2", "<EOS>", 42, 104, "8", "<EOS>", 149, 131, "windfury", "<EOS>", 24, 100, "True", "<EOS>"]}]}
{"gold_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence()\n        self.target.damage(player.effective_spell_damage(1), self)\n", "beams": [{"score": -7.756436979203883, "score_history": [-1.9073486328125e-06, -0.0008296966552734375, -0.0018018929986283183, -0.0001426833332516253, -3.576278118089249e-07, -3.828667104244232e-05, -5.841255187988281e-06, 0.0, -1.9073486328125e-06, -8.58306884765625e-05, -1.1444091796875e-05, -2.47955322265625e-05, -6.866455078125e-05, 0.0, -1.33514404296875e-05, -1.71661376953125e-05, 0.0, -2.3841855067985307e-07, -4.839897155761719e-05, -8.702254490344785e-06, 0.0, 0.0, 0.0, -1.382814662065357e-05, -4.768371127283899e-06, -5.7220458984375e-06, 0.0, -1.1444091796875e-05, 0.0, -3.898088471032679e-05, 0.0, -0.056719064712524414, 0.0, 0.0, 0.0, -0.0033779144287109375, -0.00015151499246712774, 0.0, -0.0001010894775390625, 0.0, -0.0009059906005859375, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -7.62939453125e-06, 0.0, -4.1961669921875e-05, 0.0, -0.00014495849609375, 0.0, -0.0016231536865234375, 0.0, -0.010975837707519531, -0.00014150142669677734, -4.172325134277344e-06, 0.0, -4.29153169534402e-06, 0.0, -5.7220458984375e-06, -1.1444091796875e-05, -2.288818359375e-05, -0.00013863929780200124, -4.5298667828319594e-05, -1.1483268737792969, -4.57763671875e-05, -7.62939453125e-06, -1.33514404296875e-05, -9.5367431640625e-06, -9.298322765971534e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.000659942626953125, 0.0, -2.0265579223632812e-06, -2.861022494471399e-06, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.012987136840820312, -1.9073486328125e-06, -6.866455078125e-05, -0.0003910064697265625, -1.9073486328125e-06, -1.6048647165298462, -1.1920928244535389e-07, -0.14797115325927734, -7.62939453125e-06, -0.030614852905273438, -5.7220458984375e-06, -0.0041351318359375, 0.0, -5.53131103515625e-05, -1.1920928244535389e-07, -0.0009403228759765625, -1.9073486328125e-06, -0.7215766906738281, 0.0, -0.05893993377685547, -0.0036687850952148438, -0.00994873046875, -3.814697265625e-06, -0.02674579620361328, -5.7220458984375e-06, -0.838442325592041, 0.0, -1.9073486328125e-05, -0.050589561462402344, -7.62939453125e-06, -0.0001430511474609375, -1.9073486328125e-06, -0.0027853581123054028, 0.0, -0.2326669692993164, -0.0067310333251953125, -3.814697265625e-06, -7.62939453125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.3509446382522583, -1.5497195136049413e-06, -0.025829315185546875, -0.001842498779296875, -1.71661376953125e-05, -0.001506805419921875, -3.814697265625e-06, -3.814697265625e-06, -0.0153656005859375, 0.0, -0.003490447998046875, 0.0, -0.0018310546875, 0.0, -0.07000446319580078, 0.0, -0.000202178955078125, -2.3841855067985307e-07, -0.0013857947196811438, 0.0, -0.00458526611328125, -0.0005245208740234375, -0.055449485778808594, -0.000949859619140625, -0.00022125244140625, -7.62939453125e-06, -0.0947117805480957, 0.0, -0.3186931610107422, -0.019611358642578125, -2.6702880859375e-05, -0.004926920402795076, 0.0, -0.014616012573242188, -1.71661376953125e-05, -0.6634960174560547, 0.0, -0.18368864059448242, -3.576278118089249e-07, -0.24611568450927734, 0.0, -7.62939453125e-06, -9.918212890625e-05, -3.814697265625e-06, -0.4698731303215027, -1.3470649719238281e-05, -0.06084251403808594, -0.015560150146484375, -0.0026159286499023438, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.0010986328125, 0.0, -0.0006809234619140625, 0.0, -0.10869121551513672, 0.0, -2.6702880859375e-05, -3.62396240234375e-05, -7.62939453125e-06, -0.03559079021215439, -2.0265579223632812e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "EarthShock", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"targets": [{"_type": "Name", "id": "left_minion"}], "_type": "Assign", "value": {"_type": "Attribute", "attr": "index", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}, {"body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"slice": {"_type": "Index", "value": {"left": {"_type": "Name", "id": "index"}, "right": {"n": 1, "_type": "Num"}, "_type": "BinOp", "op": {"_type": "Sub"}}}, "_type": "Subscript", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "player", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}}], "_type": "If", "test": {"left": {"_type": "Name", "id": "index"}, "_type": "Compare", "comparators": [{"n": 0, "_type": "Num"}], "ops": [{"_type": "Gt"}]}}, {"_type": "Template5", "hole2": [{"n": 4, "_type": "Num"}], "hole1": "increase_health", "hole0": {"_type": "Name", "id": "minion"}}, {"_type": "Template5", "hole2": [{"n": 1, "_type": "Num"}], "hole1": "increase_health", "hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}]}}], "hole1": "SpellCard"}, "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        left_minion = self.target.index\n        if index > 0:\n            minion = self.target.player.minions[index - 1]\n        minion.increase_health(4)\n        self.target.increase_health(1)\n", "choice_history": [47, 113, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Earth", " ", "Shock", "<EOS>", 42, 104, "1", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 149, 131, "target_func", "<EOS>", 15, 69, 15, 69, 23, 99, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 158, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 52, 68, 141, 40, 99, "left_minion", "<EOS>", 15, 69, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "index", "<EOS>", 59, 86, 19, 79, 23, 99, "index", "<EOS>", 138, 7, 141, 42, 104, "0", "<EOS>", 154, 52, 68, 141, 40, 99, "minion", "<EOS>", 26, 110, 15, 69, 15, 69, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 50, 90, 16, 71, 23, 99, "index", "<EOS>", 49, 25, 104, "1", "<EOS>", 63, 120, 23, 99, "minion", "<EOS>", "increase_health", "<EOS>", 141, 42, 104, "4", "<EOS>", 63, 120, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 141, 42, 104, "1", "<EOS>"]}]}
{"gold_code": "class EyeForAnEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, character, attacker, amount):\n        if character.is_hero():\n            character.player.opponent.hero.damage(amount, self)\n        super().reveal()\n\n    def activate(self, player):\n        player.bind('character_damaged', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('character_damaged', self._reveal)\n", "beams": [{"score": -6.4784162346264935, "score_history": [-1.9073486328125e-06, -0.10296058654785156, -0.0006339948158711195, -0.19513541460037231, -0.0016022531781345606, -0.0002128855267073959, -0.0011067582527175546, -5.733966827392578e-05, -1.1920928244535389e-07, -0.001087188720703125, -1.9073486328125e-06, -2.09808349609375e-05, -3.814697265625e-06, -0.0036411285400390625, -2.6702880859375e-05, -9.5367431640625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.0021313349716365337, -4.57763671875e-05, -0.003008365398272872, -0.019979476928710938, -0.0002454517234582454, 0.0, -1.9073486328125e-06, 0.0, -1.8238726624986157e-05, -8.344646857949556e-07, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -6.198873961693607e-06, -5.7220458984375e-06, -0.00510716438293457, 0.0, 0.0, -3.814697265625e-06, -0.0001316070556640625, -5.960464113741182e-05, 0.0, -0.02415943145751953, -1.9073486328125e-06, -0.2589540481567383, 0.0, -0.0025615692138671875, -0.00014495849609375, -0.0004253387451171875, -0.24285531044006348, -5.960462772236497e-07, -0.001117706298828125, -0.001125335693359375, -6.4849853515625e-05, -0.30228710174560547, -0.000240325927734375, -0.6961250305175781, -0.003826141357421875, -1.0329389572143555, 0.0, -2.288818359375e-05, -0.05377483367919922, -6.67572021484375e-05, -0.292755126953125, -0.0012664794921875, -1.2755388524965383e-05, -1.2993811651540454e-05, -0.007663726806640625, -0.0003032684326171875, -9.918212890625e-05, -0.0004119873046875, -0.0025997161865234375, -0.5504900217056274, -2.3841855067985307e-07, -0.0009670257568359375, -2.622600959512056e-06, -1.33514404296875e-05, -0.015832901000976562, -0.001140594482421875, -1.52587890625e-05, 0.0, -0.0002079010009765625, 0.0, -0.005993843078613281, -4.172325134277344e-06, -0.00022602081298828125, 0.0, -0.000461578369140625, -3.814697265625e-06, 0.0, -0.015260081738233566, -2.9802276912960224e-06, -9.5367431640625e-05, 0.0, -0.0019750595092773438, -7.62939453125e-06, -0.007128715515136719, -0.4479684829711914, -5.91278076171875e-05, -0.07192039489746094, 0.0, -8.392333984375e-05, -0.000164031982421875, -0.4167308807373047, -0.000102996826171875, -5.340576171875e-05, -9.5367431640625e-06, -0.00012624263763427734, -1.7881377516459906e-06, -1.9073486328125e-05, -0.00357818603515625, -1.1444091796875e-05, -0.04283618927001953, -3.24249267578125e-05, -0.038773536682128906, -1.6689286894688848e-06, -0.5787920951843262, -1.1920928244535389e-07, -3.814697265625e-06, -0.028486251831054688, -0.0002460479736328125, -0.9395692348480225, -1.7881377516459906e-06, -0.04363250732421875, 0.0, -1.71661376953125e-05, 0.0, -0.001201629638671875, -7.62939453125e-06, -0.0010623931884765625, 0.0], "model_output": {"hole4": "attacker", "_type": "Template0", "hole7": [{"body": [{"_type": "Template5", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"_type": "Attribute", "attr": "_reveal", "value": {"_type": "Name", "id": "self"}}], "hole1": "unbind", "hole0": {"_type": "Name", "id": "player"}}], "name": "can_use", "_type": "FunctionDef", "args": {"_type": "arguments", "args": [{"_type": "Template7"}, {"arg": "player", "_type": "arg"}]}}], "hole3": "_reveal", "hole5": [{"arg": "target", "_type": "arg"}], "hole0": "EyeanEye", "hole6": [{"body": [{"_type": "Template5", "hole2": [{"func": {"_type": "Attribute", "attr": "effective_spell_damage", "value": {"_type": "Name", "id": "player"}}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"_type": "Name", "id": "minion"}}], "_type": "If", "test": {"left": {"_type": "Name", "id": "character"}, "_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "ops": [{"_type": "IsNot"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Eye for Eye"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}]}}], "hole1": "SecretCard"}, "inferred_code": "class EyeanEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if character is not Null:\n            minion.damage(player.effective_spell_damage(1), self)\n\n    def can_use(self, player):\n        player.unbind('card_drawn', self._reveal)\n", "choice_history": [47, 114, "Eye", "an", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Eye", " ", "for", " ", "Eye", "<EOS>", 42, 104, "1", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 135, 1, 128, "target", "<EOS>", 154, 59, 86, 19, 79, 23, 99, "character", "<EOS>", 138, 11, 141, 41, 101, "Null", "<EOS>", 154, 63, 120, 23, 99, "minion", "<EOS>", "damage", "<EOS>", 142, 35, 76, 15, 69, 23, 99, "player", "<EOS>", "effective_spell_damage", "<EOS>", 141, 42, 104, "1", "<EOS>", 40, 99, "self", "<EOS>", 154, 58, 83, "can_use", "<EOS>", 3, 129, 136, 0, 1, 128, "player", "<EOS>", 154, 63, 120, 23, 99, "player", "<EOS>", "unbind", "<EOS>", 142, 43, 108, "card_drawn", "<EOS>", 32, 69, 23, 99, "self", "<EOS>", "_reveal", "<EOS>"]}]}
{"gold_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in hearthbreaker.targeting.find_minion_spell_target(game,\n            lambda m: m.stealth):\n            minion.stealth = False\n        for secret in game.other_player.secrets:\n            secret.deactivate(game.other_player)\n        game.other_player.secrets = []\n        player.draw()\n", "beams": [{"score": -4.734933833278845, "score_history": [-5.7220458984375e-06, -6.4849853515625e-05, -0.0005409451550804079, -1.585470999998506e-05, -7.152475518523715e-07, -6.508827209472656e-05, -3.576278118089249e-07, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.918212890625e-05, -0.000110626220703125, -1.33514404296875e-05, -1.33514404296875e-05, -9.5367431640625e-06, 0.0, -3.814689989667386e-06, 0.0, -1.9073486328125e-06, 0.0, -4.8875681386562064e-06, -5.960462772236497e-07, 0.0, 0.0, -5.7220458984375e-06, 0.0, -1.7881320673041046e-05, 0.0, -0.0015225410461425781, 0.0, -2.6702880859375e-05, 0.0, -2.86102294921875e-05, -0.00022947727120481431, 0.0, 0.0, 0.0, -0.00036688396357931197, -1.1920928244535389e-07, -1.33514404296875e-05, -1.1444091796875e-05, -2.6702880859375e-05, -3.731248580152169e-05, -7.6293927122605965e-06, -0.4370756149291992, -4.38690185546875e-05, -0.000186920166015625, -3.814697265625e-06, -1.9073486328125e-06, -2.932548159151338e-05, 0.0, -0.00010716867109294981, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.933906555175781e-06, 0.0, -3.814697265625e-06, 0.0, -0.0001277923583984375, 0.0, -0.3514089584350586, -1.9073486328125e-06, -1.9073486328125e-06, -4.76837158203125e-05, -5.7220458984375e-05, -0.003922581672668457, -6.782778655178845e-05, -0.06470584869384766, -0.0009164810180664062, -0.025918960571289062, -0.0001373291015625, -0.000244140625, -1.9073486328125e-06, -0.008945612236857414, -7.152555099310121e-07, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.05240917205810547, -1.9073486328125e-06, -0.0018463134765625, 0.0, -0.3279905319213867, 0.0, -0.003754287026822567, -2.3841855067985307e-07, -0.6134046912193298, -1.1920928244535389e-07, -0.004494667053222656, -0.17225265502929688, -0.016524314880371094, -1.9073486328125e-06, 0.0, -0.167806014418602, -4.768370445162873e-07, 0.0, -1.9073486328125e-05, -5.7220458984375e-06, -0.001125335693359375, 0.0, -0.0019559860229492188, 0.0, -0.16156572103500366, 0.0, -0.6587114334106445, -5.7220458984375e-06, 0.0, -0.0191497802734375, -7.43865966796875e-05, -0.022985100746154785, -0.0001954841281985864, -1.0740089416503906, 0.0, -0.0738077163696289, 0.0, -0.19101238250732422, -7.152555099310121e-07, -0.2714492380619049, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "Flare", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}]}, "right": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Name", "id": "player"}}]}, "_type": "BinOp", "op": {"_type": "Sub"}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Name", "id": "player"}}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Flare"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}]}}], "hole1": "SpellCard"}, "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = len(game.other_player.minions) - len(player.<UNK>)\n        <UNK> = player.<UNK>\n", "choice_history": [47, 113, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Flare", "<EOS>", 42, 104, "2", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 32, 69, 29, "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 156, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 52, 68, 141, 40, 99, "<UNK>", "<EOS>", 16, 71, 18, 76, 23, 99, "len", "<EOS>", 141, 32, 69, 15, 69, 23, 99, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 49, 18, 76, 23, 99, "len", "<EOS>", 141, 32, 69, 23, 99, "player", "<EOS>", "<UNK>", "<EOS>", 52, 68, 141, 40, 99, "<UNK>", "<EOS>", 15, 69, 23, 99, "player", "<EOS>", "<UNK>", "<EOS>"]}]}
{"gold_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(),\n            TargetIsMinion())), [ActionTag(IncreaseDurability(),\n            WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1),\n            WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1),\n            AttackCompleted())), HeroSelector())])])\n", "beams": [{"score": -4.024247374723075, "score_history": [0.0, -5.7220458984375e-06, -0.006362669635564089, -0.00018499605357646942, -1.5497195136049413e-06, -0.003261566162109375, -9.059865078597795e-06, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, -2.6702880859375e-05, -0.3980083465576172, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, 0.0, -4.9948692321777344e-05, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -2.9206348699517548e-05, -1.311301275563892e-06, 0.0, 0.0, -1.71661376953125e-05, -7.62939453125e-06, -8.106222594506107e-06, -3.814697265625e-06, -0.0009348392486572266, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -2.47955322265625e-05, -0.002964732702821493, -2.9802317840221804e-06, -0.0012695788173004985, 0.0, -2.3484197299694642e-05, 0.0, -0.00030517578125, -0.000194549560546875, -5.7220458984375e-05, -3.0517578125e-05, -7.2479248046875e-05, -1.33514404296875e-05, 0.0, -2.622600959512056e-06, -6.794906312279636e-06, -0.0022420883178710938, -2.6702880859375e-05, -1.9073486328125e-06, -0.006501674652099609, -5.364403477869928e-06, -1.9073486328125e-06, 0.0, -0.49180102348327637, -7.939023635117337e-05, -0.0007715225219726562, -1.9073486328125e-06, -0.7863478660583496, 0.0, -3.814697265625e-06, -3.814697265625e-06, -7.05718994140625e-05, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, 0.0, -0.00014889240264892578, 0.0, -1.52587890625e-05, -0.04090309143066406, -0.006847381591796875, -3.814697265625e-06, -0.0006046295166015625, -0.011015753261744976, -0.19734883308410645, -2.2649765014648438e-06, -0.11324596405029297, -2.288818359375e-05, -0.3361055850982666, -2.3841855067985307e-07, -3.814697265625e-06, -1.9073486328125e-06, -0.7529110908508301, -0.0002931354974862188, -1.7881377516459906e-06, -3.814697265625e-06, -7.62939453125e-06, 0.0, 0.0, -0.00010216186637990177, -2.86102294921875e-05, -1.9073486328125e-06, -6.29425048828125e-05, -0.000522613525390625, -0.0022430419921875, -1.33514404296875e-05, -8.58306884765625e-05, -0.0203324556350708, -9.655952453613281e-06, 0.0, -0.0003032684326171875, -0.0001049041748046875, -1.9073486328125e-06, -3.814697265625e-06, -0.5683846473693848, -0.0070760250091552734, -3.814697265625e-05, -3.814697265625e-06, -0.000453948974609375, -1.9073486328125e-06, -0.054254669696092606, -3.814697265625e-06, -0.11476421356201172, -1.9073486328125e-06, -0.09395897388458252, -8.964340668171644e-05, -2.1934269170742482e-05], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Weapon"}, "_type": "Call", "args": [{"n": 7, "_type": "Num"}, {"n": 1, "_type": "Num"}], "keywords": [{"arg": "effects", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Effect"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "CharacterDamaged"}, "_type": "Call", "keywords": [{"arg": "player", "_type": "keyword", "value": {"_type": "Template6", "hole0": "BothPlayer"}}]}, {"func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}]}]}, {"_type": "Template6", "hole0": "SelfSelector"}]}]}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Gorehowl"}, {"n": 7, "_type": "Num"}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "EPIC", "value": {"_type": "Template9"}}]}}], "hole1": "WeaponCard"}, "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterDamaged(player=\n            BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [47, 111, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Gorehowl", "<EOS>", 42, 104, "7", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 32, 69, 29, "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Weapon", "<EOS>", 142, 42, 104, "7", "<EOS>", 42, 104, "1", "<EOS>", 149, 131, "effects", "<EOS>", 21, 95, 141, 35, 76, 23, 99, "Effect", "<EOS>", 142, 35, 75, 23, 99, "Character", "Damaged", "<EOS>", 149, 131, "player", "<EOS>", 28, 121, "Both", "Player", "<EOS>", 35, 76, 23, 99, "Action", "Tag", "<EOS>", 142, 35, 76, 23, 99, "Give", "<EOS>", 141, 35, 76, 23, 99, "Change", "Attack", "<EOS>", 141, 42, 104, "1", "<EOS>", 45, 121, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "beams": [{"score": -0.5510634692340233, "score_history": [-5.7220458984375e-06, -5.7220458984375e-06, -0.004731904249638319, -6.878261774545535e-05, -1.1920883480343036e-07, -0.00011444091796875, -2.264974000354414e-06, 0.0, -1.1444091796875e-05, -7.62939453125e-06, -3.814697265625e-06, -0.15647506713867188, -1.1444091796875e-05, -0.00249481201171875, -0.0001373291015625, -7.62939453125e-06, -9.65590606938349e-06, -1.6689191397745162e-05, 0.0, 0.0, -5.8412260841578245e-06, -8.344646857949556e-07, -2.288818359375e-05, 0.0, -5.7220458984375e-06, 0.0, -9.775159924174659e-06, 0.0, -0.002314448356628418, -4.768370445162873e-07, -2.288818359375e-05, -5.7220458984375e-06, -2.09808349609375e-05, -0.36935150623321533, -1.1920928244535389e-07, -7.82012939453125e-05, -3.814697265625e-06, -0.00010991096496582031, -3.576278118089249e-07, -0.0001277923583984375, 0.0, -0.0033200979232788086, -1.1920928244535389e-07, -0.004878044128417969, 0.0, -3.62396240234375e-05, -1.9073486328125e-06, -0.0010623931884765625, 0.0, -0.0007610321044921875, 0.0, -7.987013304955326e-06, 0.0, -0.0008677241858094931, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0009326934814453125, -4.00543212890625e-05, -9.5367431640625e-06, -1.1919473763555288e-07, 0.0, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -6.43727207716438e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -4.0550585254095495e-06, -1.9192511899746023e-05, -0.0002918243408203125, -3.814697265625e-06, -0.0024023486766964197, -5.9604562920867465e-06, -1.9073486328125e-05, -4.38690185546875e-05, -0.0001240937999682501, -7.152555099310121e-07], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}, {"n": 1, "_type": "Num"}], "keywords": [{"arg": "charge", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Template9"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}]}}], "hole1": "MinionCard"}, "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            FREE, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "choice_history": [47, 111, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 145, 43, 108, "Hound", "<EOS>", 42, 104, "1", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 32, 69, 29, "FREE", "<EOS>", 41, 100, "False", "<EOS>", 149, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "1", "<EOS>", 42, 104, "1", "<EOS>", 149, 131, "charge", "<EOS>", 24, 100, "True", "<EOS>"]}]}
{"gold_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "beams": [{"score": -1.0055412066377585, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.001354134758003056, -0.00011538793478393927, -7.152555099310121e-07, -2.3841803340474144e-06, -9.5367431640625e-06, -5.125986263010418e-06, -1.9073486328125e-06, -3.814697265625e-05, -7.62939453125e-06, -2.47955322265625e-05, -2.86102294921875e-05, -0.00012969970703125, -2.09808349609375e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0132738680113107e-05, -1.33514404296875e-05, -5.722038622479886e-06, 0.0, 0.0, 0.0, -0.0001269578788196668, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -1.9669532775878906e-05, 0.0, -2.09808349609375e-05, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -0.00012636180326808244, 0.0, -0.011383056640625, 0.0, -2.86102294921875e-05, 0.0, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0001850128173828125, 0.0, -0.0002765655517578125, -6.67572021484375e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -0.0002722731442190707, -6.43729799776338e-06, -1.1444091796875e-05, -0.000194549560546875, 0.0, -0.007684729062020779, -6.449211650760844e-05, -1.33514404296875e-05, -0.5522947311401367, -1.9073486328125e-05, -7.62939453125e-06, -0.03167767450213432, -2.491474151611328e-05, 0.0, -0.0011539459228515625, -0.009542465209960938, -0.0001678466796875, -0.0003910064697265625, 0.0, -0.000164031982421875, 0.0, -0.0837106704711914, 0.0, -0.019983291625976562, -6.866455078125e-05, -0.02981388568878174, -0.00016987323760986328, -7.62939453125e-06, -0.25343549251556396, 0.0, -6.306129944277927e-05, 0.0, -1.1444091796875e-05, -0.0001850128173828125, -1.9073486328125e-06, -3.814697265625e-06, -0.0001964569091796875, -9.5367431640625e-06, -3.62396240234375e-05, -1.1920883480343036e-07, 0.0, -1.9073486328125e-06, 0.0, 0.0, -1.6689295989635866e-06, -4.768370445162873e-07, -7.62939453125e-06, -1.9073486328125e-06, -5.185603731661104e-05, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 4, "_type": "Num"}, {"n": 7, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"n": 3, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}], "keywords": [{"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Damage"}, "_type": "Call", "args": [{"n": 4, "_type": "Num"}]}, {"func": {"_type": "Name", "id": "CharacterSelector"}, "_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "keywords": [{"arg": "picker", "_type": "keyword", "value": {"_type": "Template6", "hole0": "UserPicker"}}]}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4),\n            CharacterSelector(Null, picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [47, 111, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Injured", " ", "Blademaster", "<EOS>", 42, 104, "3", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "RARE", "<EOS>", 149, 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 142, 35, 76, 23, 99, "Damage", "<EOS>", 141, 42, 104, "4", "<EOS>", 35, 77, 23, 99, "Character", "Selector", "<EOS>", 141, 41, 101, "Null", "<EOS>", 149, 131, "picker", "<EOS>", 28, 121, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "4", "<EOS>", 42, 104, "7", "<EOS>"]}]}
{"gold_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(\n            1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=None)))])\n", "beams": [{"score": -2.1516038416705143, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -0.05396096780896187, -0.00032360086333937943, -1.0728830375228426e-06, -8.344640036739293e-07, -3.814697265625e-06, -3.576278118089249e-07, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.24249267578125e-05, -0.01883697509765625, -1.9073486328125e-05, -5.91278076171875e-05, -9.5367431640625e-06, 0.0, -2.622600959512056e-06, -3.2901763916015625e-05, -8.225420970120467e-06, 0.0, -5.7220458984375e-06, 0.0, -1.8000509953708388e-05, -2.622600959512056e-06, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -8.428096771240234e-05, 0.0, -6.67572021484375e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.000146269696415402, -1.1920928244535389e-07, -2.503394853192731e-06, 0.0, -1.931190308823716e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-05, -9.5367431640625e-06, -7.62939453125e-06, -5.14984130859375e-05, -7.43865966796875e-05, -3.814697265625e-06, -2.3841812435421161e-07, -7.62939453125e-06, -2.288818359375e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.00011456012725830078, -5.364403477869928e-06, -3.814697265625e-06, -1.33514404296875e-05, -0.00024878978729248047, -4.529942543740617e-06, -0.000152587890625, -1.33514404296875e-05, -0.0003186464309692383, 0.0, -9.34600830078125e-05, -1.9073486328125e-05, -0.0009365081787109375, -1.9073486328125e-06, -2.09808349609375e-05, -0.0006961822509765625, -1.33514404296875e-05, -1.8358230590820312e-05, 0.0, -5.7220458984375e-05, -0.01563262939453125, -0.011792182922363281, -1.52587890625e-05, -3.0517578125e-05, -0.13590124249458313, -0.02519989013671875, -3.814697265625e-06, -8.392333984375e-05, -0.007890701293945312, -1.52587890625e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.8535313606262207, -0.07562998682260513, -5.960462772236497e-07, -2.288818359375e-05, -2.6702880859375e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -4.1961669921875e-05, 0.0, -0.5165119171142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.963040843605995e-05, -1.1444091796875e-05, -1.9073486328125e-06, -7.62939453125e-05, -3.4332275390625e-05, -1.33514404296875e-05, -9.34600830078125e-05, -0.0025157928466796875, -0.000286102294921875, -4.38690185546875e-05, 0.0, -0.0002536773681640625, 0.0, -0.004420176148414612, -1.9073486328125e-06, -1.9073486328125e-06, -0.031579017639160156, -3.0517578125e-05, -0.0011501312255859375, -0.024449653923511505, -1.5735626220703125e-05, 0.0, -0.2796039581298828, -2.86102294921875e-05, -0.0021518468856811523, 0.0, -0.0001068115234375, 0.0, -0.0005424022674560547, -4.589557647705078e-05, -1.9073486328125e-06, -0.0001392364501953125, -0.05391216278076172, 0.0, -0.0021228790283203125, -3.814697265625e-06, -0.0018713469617068768, -0.0003906488127540797, -5.7220458984375e-06, -0.0003681182861328125, -0.020789146423339844, -5.7220458984375e-06, -0.0027942657470703125, -0.0013866424560546875, -0.001163482666015625, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}, {"n": 2, "_type": "Num"}], "keywords": [{"arg": "effects", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Effect"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "MinionSummoned"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"_type": "Attribute", "attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}]}, {"func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Damage"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}]}, {"func": {"_type": "Name", "id": "CharacterSelector"}, "_type": "Call", "keywords": [{"arg": "players", "_type": "keyword", "value": {"_type": "Template6", "hole0": "EnemyPlayer"}}, {"arg": "picker", "_type": "keyword", "value": {"_type": "Template6", "hole0": "RandomPicker"}}, {"arg": "condition", "_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}}]}]}]}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Knife Juggler"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}]}}], "hole1": "MinionCard"}, "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionSummoned(IsType(\n            MINION_TYPE.PIRATE)), ActionTag(Damage(1), CharacterSelector(\n            players=EnemyPlayer(), picker=RandomPicker(), condition=Null)))])\n", "choice_history": [47, 111, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Knife", " ", "Juggler", "<EOS>", 42, 104, "2", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "3", "<EOS>", 42, 104, "2", "<EOS>", 149, 131, "effects", "<EOS>", 21, 95, 141, 35, 76, 23, 99, "Effect", "<EOS>", 142, 35, 76, 23, 99, "Minion", "Summoned", "<EOS>", 141, 35, 76, 23, 99, "Is", "Type", "<EOS>", 141, 32, 69, 23, 99, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 35, 76, 23, 99, "Action", "Tag", "<EOS>", 142, 35, 76, 23, 99, "Damage", "<EOS>", 141, 42, 104, "1", "<EOS>", 35, 75, 23, 99, "Character", "Selector", "<EOS>", 151, 131, "players", "<EOS>", 28, 121, "Enemy", "Player", "<EOS>", 131, "picker", "<EOS>", 28, 121, "Random", "Picker", "<EOS>", 131, "condition", "<EOS>", 24, 101, "Null", "<EOS>"]}]}
{"gold_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(condition=IsDamaged(), picker=RandomPicker\n            ())))])\n", "beams": [{"score": -0.598099682304813, "score_history": [0.0, -5.7220458984375e-06, -0.0638897716999054, -0.04505879431962967, -7.723736052867025e-05, -1.71661376953125e-05, -3.576272320060525e-06, -0.005003929138183594, 0.0, 0.0, -1.52587890625e-05, -0.010105133056640625, -1.9073486328125e-06, -2.6702880859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -2.3841855067985307e-07, -3.814697265625e-06, 0.0, -0.026745319366455078, -1.1920928244535389e-07, 0.0, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -2.837159627233632e-05, 0.0, -0.011241912841796875, 0.0, -3.62396240234375e-05, -1.9073486328125e-06, -2.288818359375e-05, -0.00018727737187873572, -3.576278118089249e-07, -3.814697265625e-06, 0.0, -0.00032043454120866954, 0.0, -2.47955322265625e-05, -9.5367431640625e-06, -4.76837158203125e-05, -3.814697265625e-06, -0.0001354217529296875, -9.5367431640625e-06, -9.5367431640625e-06, -1.4304987416835502e-06, 0.0, -8.0108642578125e-05, 0.0, -1.9073486328125e-06, -1.3112935448589269e-05, 0.0, -2.09808349609375e-05, -2.47955322265625e-05, -0.00018143621855415404, -9.536738616588991e-07, -7.2479248046875e-05, 0.0, -0.0008106231689453125, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.0517578125e-05, -7.62939453125e-06, -7.82012939453125e-05, -3.814697265625e-05, -7.82012939453125e-05, -2.5391578674316406e-05, -1.9073486328125e-06, -6.29425048828125e-05, -0.018434524536132812, -0.0001163482666015625, -0.0025702714920043945, -0.010240554809570312, -5.7220458984375e-06, -0.00086212158203125, -3.0517578125e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.00011837482452392578, -0.0001354217529296875, -1.9073486328125e-06, -0.000186920166015625, -0.00064849853515625, -0.000522613525390625, -5.53131103515625e-05, -3.24249267578125e-05, -0.008529067039489746, -9.894371032714844e-06, 0.0, -7.2479248046875e-05, -5.7220458984375e-06, -0.06959594041109085, -3.576278118089249e-07, -0.03395271301269531, -5.7220458984375e-06, -0.2872939109802246, -2.09808349609375e-05, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 0, "_type": "Num"}, {"n": 5, "_type": "Num"}], "keywords": [{"arg": "effects", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Effect"}, "_type": "Call", "args": [{"_type": "Template6", "hole0": "TurnStarted"}, {"func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Heal"}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}]}, {"_type": "Template6", "hole0": "HeroSelector"}]}]}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Lightwell"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}]}}], "hole1": "MinionCard"}, "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), HeroSelector()))])\n", "choice_history": [47, 111, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Lightwell", "<EOS>", 42, 104, "2", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 32, 69, 29, "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "0", "<EOS>", 42, 104, "5", "<EOS>", 149, 131, "effects", "<EOS>", 21, 95, 141, 35, 76, 23, 99, "Effect", "<EOS>", 142, 45, 121, "Turn", "Started", "<EOS>", 35, 76, 23, 99, "Action", "Tag", "<EOS>", 142, 35, 76, 23, 99, "Heal", "<EOS>", 141, 42, 104, "3", "<EOS>", 45, 121, "Hero", "Selector", "<EOS>"]}]}
{"gold_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n", "beams": [{"score": -0.5607562340875205, "score_history": [-3.814697265625e-06, -6.866455078125e-05, -0.00015627116954419762, -2.2053514840081334e-05, -6.079655122448457e-06, -4.7683636239526095e-07, -3.933906555175781e-06, -3.576278118089249e-07, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.00014495849609375, -0.009557723999023438, -3.62396240234375e-05, -1.52587890625e-05, -1.52587890625e-05, 0.0, -2.3841855067985307e-07, -0.0002588024362921715, -2.503394853192731e-06, -2.3841855067985307e-07, -1.9073486328125e-05, 0.0, -0.00010605432908050716, -3.2186455882765586e-06, 0.0, 0.0, -5.7220458984375e-06, 0.0, -2.384185791015625e-06, 0.0, -0.22258400917053223, 0.0, -1.9073486328125e-06, 0.0, -0.0001049041748046875, -4.374980926513672e-05, 0.0, -3.933906555175781e-06, 0.0, -1.1682510375976562e-05, 0.0, -5.7220458984375e-06, -5.14984130859375e-05, -1.33514404296875e-05, -7.62939453125e-06, -0.0001220703125, -2.6702880859375e-05, 0.0, -1.7879065126180649e-06, -5.7220458984375e-06, -0.000133514404296875, -2.47955322265625e-05, -5.7220458984375e-06, -6.079447121010162e-05, -1.6689286894688848e-06, -3.814697265625e-06, -5.7220458984375e-06, -0.00021314479818101972, -1.5020257706055418e-05, -4.00543212890625e-05, 0.0, -0.0001087188720703125, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.03166007995605469, -1.9073486328125e-06, -8.0108642578125e-05, -1.33514404296875e-05, -7.62939453125e-06, -1.728534698486328e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.0017108917236328125, -0.004756927490234375, -1.9073486328125e-05, -0.000217437744140625, -0.25889429450035095, -0.004437565803527832, -7.152555099310121e-07, -4.1961669921875e-05, -4.00543212890625e-05, -0.000377655029296875, -1.1920928244535389e-07, -0.0004024505615234375, 0.0, -0.017235875129699707, -0.00046753883361816406, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.52587890625e-05, -8.392333984375e-05, -1.9073486328125e-06, -1.33514404296875e-05, -0.00016021728515625, -5.91278076171875e-05, -0.000164031982421875, -1.1444091796875e-05, -8.034706115722656e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.0006704330444335938, -9.5367431640625e-06, -5.7220458984375e-06, -1.52587890625e-05, -0.00015151457046158612, -0.0010756251867860556, 0.0, -0.0015697479248046875, -1.9073486328125e-05, -1.33514404296875e-05, -0.0020112991333007812, 0.0, -4.38690185546875e-05, 0.0, -0.00010049160482594743, -1.0848044439626392e-05, -2.145764938177308e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}, {"n": 3, "_type": "Num"}], "keywords": [{"arg": "effects", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Effect"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "SpellCast"}, "_type": "Call", "keywords": [{"arg": "player", "_type": "keyword", "value": {"_type": "Template6", "hole0": "EnemyPlayer"}}]}, {"func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}]}]}, {"_type": "Template6", "hole0": "SelfSelector"}]}]}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Mana Wyrm"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}]}}], "hole1": "MinionCard"}, "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(player=EnemyPlayer()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [47, 111, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Mana", " ", "Wyrm", "<EOS>", 42, 104, "1", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "1", "<EOS>", 42, 104, "3", "<EOS>", 149, 131, "effects", "<EOS>", 21, 95, 141, 35, 76, 23, 99, "Effect", "<EOS>", 142, 35, 75, 23, 99, "Spell", "Cast", "<EOS>", 149, 131, "player", "<EOS>", 28, 121, "Enemy", "Player", "<EOS>", 35, 76, 23, 99, "Action", "Tag", "<EOS>", 142, 35, 76, 23, 99, "Give", "<EOS>", 141, 35, 76, 23, 99, "Change", "Attack", "<EOS>", 141, 42, 104, "1", "<EOS>", 45, 121, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class MogushanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "beams": [{"score": -0.005999836386813229, "score_history": [0.0, -7.62939453125e-06, -0.0007697956170886755, -0.00027497802511788905, -1.2278481335670222e-05, -2.3841766960686073e-07, -1.3470649719238281e-05, -1.7881377516459906e-06, -1.9073486328125e-06, -2.288818359375e-05, -1.9073486328125e-06, -7.82012939453125e-05, -0.001308441162109375, -0.0001430511474609375, -0.0001049041748046875, -2.47955322265625e-05, 0.0, -2.145764938177308e-06, -3.325939178466797e-05, -5.125993993715383e-06, -5.960462772236497e-07, -1.9073486328125e-06, -1.9073486328125e-06, -0.0004528909339569509, 0.0, 0.0, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-05, 0.0, -6.103515625e-05, 0.0, -3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.00012409687042236328, 0.0, -1.9073486328125e-06, 0.0, -0.0002028942108154297, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.0002079010009765625, -1.9073486328125e-05, 0.0, 0.0, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -8.463489211862907e-05, -8.940695806813892e-06, 0.0, -1.9073486328125e-06, -0.00026869610883295536, -3.933898824470816e-06, -0.000247955322265625, -1.71661376953125e-05, -0.0011788606643676758, 0.0, -3.0517578125e-05, -6.29425048828125e-05, -7.200241088867188e-05, -1.1920928244535389e-07], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mogu'shanWarden", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}, {"n": 7, "_type": "Num"}], "keywords": [{"arg": "taunt", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Mogu'shan Warden"}, {"n": 4, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}]}}], "hole1": "MinionCard"}, "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "choice_history": [47, 111, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Mogu'shan", " ", "Warden", "<EOS>", 42, 104, "4", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "1", "<EOS>", 42, 104, "7", "<EOS>", 149, 131, "taunt", "<EOS>", 24, 100, "True", "<EOS>"]}]}
{"gold_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class Gain2(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Gain 2 mana crystals', 0, CHARACTER_CLASS\n                    .DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                if player.max_mana < 8:\n                    player.max_mana += 2\n                    player.mana += 2\n                else:\n                    player.max_mana = 10\n                    player.mana += 2\n\n\n        class Draw3(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Draw three cards', 0, CHARACTER_CLASS.\n                    DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                player.draw()\n                player.draw()\n                player.draw()\n        option = player.agent.choose_option([Gain2(), Draw3()], player)\n        option.use(player, game)\n", "beams": [{"score": -2.3740214746920714, "score_history": [0.0, -0.0016727447509765625, -0.0003237200144212693, -1.1324837942083832e-05, -1.0726944310590625e-06, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -7.62939453125e-06, 0.0, -1.52587890625e-05, -0.0018100738525390625, 0.0, -9.5367431640625e-06, 0.0, 0.0, -2.0265558760002023e-06, 0.0, -5.7220458984375e-06, 0.0, -1.0728830375228426e-06, -3.4570680327306036e-06, 0.0, 0.0, -6.866455078125e-05, -1.9073486328125e-06, -5.7100292906397954e-05, 0.0, -0.0008137226104736328, 0.0, -0.000492095947265625, -1.9073486328125e-06, -2.6702880859375e-05, -0.0005318556213751435, -3.576272320060525e-06, -8.0108642578125e-05, 0.0, -0.013092994689941406, -8.34461570775602e-06, -2.288818359375e-05, 0.0, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -5.7220458984375e-06, -0.000247955322265625, 0.0, -7.736653788015246e-05, -1.3589859008789062e-05, -0.09850358963012695, -3.314018249511719e-05, -6.318092346191406e-06, 0.0, -0.0009906301274895668, 0.0, -4.00543212890625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -5.7816494518192485e-05, -0.00010799799201777205, -0.1742706298828125, -0.0001277923583984375, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -2.741813204920618e-06, 0.0, -0.00015354156494140625, 0.0, -3.814697265625e-06, -7.62939453125e-06, 0.0, -5.3882598876953125e-05, 0.0, -7.62939453125e-06, 0.0, -3.62396240234375e-05, -2.264974000354414e-06, -0.3382406234741211, -2.47955322265625e-05, -5.91278076171875e-05, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -3.62396240234375e-05, -5.960462772236497e-07, -1.5258787243510596e-05, -1.1444026313256472e-05, -0.44423115253448486, -7.152555099310121e-07, -5.7220458984375e-06, -0.021875381469726562, -0.0063800811767578125, -2.09808349609375e-05, 0.0, -0.0001354217529296875, 0.0, -0.0008885859861038625, -2.9802317840221804e-06, -0.06121945381164551, -1.1920928244535389e-07, -7.05718994140625e-05, -0.000293731689453125, 0.0, -0.8331997990608215, -5.960462772236497e-07, -5.7220458984375e-06, 0.0, -0.06688165664672852, 0.0, -0.007929801940917969, -0.06480598449707031, -0.000713348388671875, 0.0, -0.0003757476806640625, -1.1920928244535389e-07, -0.0005227327346801758, -1.311301275563892e-06, -0.12188243865966797, -0.006045341491699219, -0.00136566162109375, 0.0, -5.53131103515625e-05, 0.0, -0.0003793239302467555, -5.960462772236497e-07, -0.08000469207763672, -0.021806716918945312, -8.0108642578125e-05, 0.0, -8.809566497802734e-05, 0.0, -0.0004515647597145289, -5.960462772236497e-07], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "Nourish", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"_type": "Template5", "hole2": [{"func": {"_type": "Attribute", "attr": "effective_spell_damage", "value": {"_type": "Name", "id": "player"}}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}, {"_type": "Template5", "hole1": "draw", "hole0": {"_type": "Name", "id": "player"}}, {"_type": "Template5", "hole1": "draw", "hole0": {"_type": "Name", "id": "player"}}, {"_type": "Template5", "hole1": "draw", "hole0": {"_type": "Name", "id": "player"}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"n": 5, "_type": "Num"}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}], "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}]}}], "hole1": "SpellCard"}, "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [47, 113, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Nourish", "<EOS>", 42, 104, "5", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 32, 69, 29, "RARE", "<EOS>", 149, 131, "target_func", "<EOS>", 15, 69, 15, 69, 23, 99, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 158, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 63, 120, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 142, 35, 76, 15, 69, 23, 99, "player", "<EOS>", "effective_spell_damage", "<EOS>", 141, 42, 104, "3", "<EOS>", 40, 99, "self", "<EOS>", 63, 119, 23, 99, "player", "<EOS>", "draw", "<EOS>", 63, 119, 23, 99, "player", "<EOS>", "draw", "<EOS>", 63, 119, 23, 99, "player", "<EOS>", "draw", "<EOS>"]}]}
{"gold_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsSpell()), SpellCast()))\n", "beams": [{"score": -8.93766883252436, "score_history": [-1.9073486328125e-06, -0.398529052734375, -0.008519355207681656, -0.10676579177379608, -1.096658525057137e-05, -0.0006109364330768585, -6.258303619688377e-05, -0.010555267333984375, -6.29425048828125e-05, -0.0006160736083984375, -0.006653785705566406, -1.1444091796875e-05, -5.7220458984375e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -4.053076190757565e-05, -7.152555099310121e-07, -7.62939453125e-06, -1.9073486328125e-06, -4.196086956653744e-05, -2.813339051499497e-05, 0.0, 0.0, -5.14984130859375e-05, -1.9073486328125e-06, -2.884864625229966e-05, -1.9073486328125e-06, -0.03087437152862549, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -7.62939453125e-06, -0.0005424014525488019, -1.0371208190917969e-05, -0.00095367431640625, 0.0, -3.325928992126137e-05, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, 0.0, -1.5974044799804688e-05, -2.264974000354414e-06, -0.14704513549804688, -2.288818359375e-05, -1.1444091796875e-05, -1.9073486328125e-06, -2.6702880859375e-05, -5.364418029785156e-05, 0.0, -1.1920928955078125e-05, 0.0, -3.814697265625e-06, -1.52587890625e-05, -0.000110626220703125, -7.033347174001392e-06, -5.125986263010418e-06, -1.9073486328125e-06, -1.1444091796875e-05, -3.933906555175781e-06, 0.0, -0.4011878967285156, -9.5367431640625e-06, -1.9073486328125e-05, -0.0007762908935546875, -0.0002040863037109375, -0.39088189601898193, -5.364416665543104e-06, -1.1534976959228516, -0.02413177490234375, -0.0006899831350892782, -2.1457672119140625e-06, -0.9812870025634766, -0.006041526794433594, -0.06332874298095703, -8.0108642578125e-05, -0.0093536376953125, -0.005671501159667969, -0.03802013397216797, -0.10454654693603516, -0.00033473968505859375, -7.62939453125e-06, -0.007084846496582031, -0.0001277923583984375, -0.29980385303497314, -1.1920928244535389e-07, -0.007344245910644531, 0.0, -0.0003490447998046875, -9.72747802734375e-05, -0.0729074478149414, -1.1444091796875e-05, -0.0015554428100585938, -4.00543212890625e-05, -0.7251739501953125, -1.9073486328125e-06, -0.8084352016448975, 0.0, -1.1444091796875e-05, -0.19727802276611328, -0.0001983642578125, -0.032380104064941406, 0.0, -1.33514404296875e-05, -9.5367431640625e-06, -0.0021429061889648438, -1.9073486328125e-06, -0.6644687652587891, -1.9073486328125e-06, -0.04352378845214844, -4.57763671875e-05, -3.814697265625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.47521650791168213, -1.1444046322139911e-05, -0.00244295597076416, -2.861022494471399e-06, -1.33514404296875e-05, -5.7220458984375e-06, -3.24249267578125e-05, -7.62939453125e-06, -3.814697265625e-06, -0.3239428997039795, -0.401434063911438, -5.7220458984375e-06, -0.00292205810546875, -0.0002040863037109375, -1.9073486328125e-06, -5.340576171875e-05, -0.00046384334564208984, -0.0015031099319458008, -2.288818359375e-05, -0.0008296966552734375, -0.07068252563476562, -0.0031452178955078125, -0.00072479248046875, -0.0003986358642578125, 0.0, -0.05303317308425903, -0.00010895729064941406, -0.007534027099609375, -0.041749000549316406, -0.00018310546875, -0.00804281234741211, 0.0, -0.000579833984375, -0.000370025634765625, -0.010760307312011719, -0.0002536773681640625, -8.392333984375e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.0490362910786644e-05, -7.82012939453125e-05, -2.47955322265625e-05, -0.0002205371856689453, -1.4305104514278355e-06, -0.0006732940673828125, -0.00118255615234375, -0.0001068115234375, -0.0008449554443359375, -0.0001926422119140625, -0.00045013427734375, -0.000148773193359375, -1.71661376953125e-05, -8.7738037109375e-05, -0.5155181884765625, -0.000431060791015625, -0.014911651611328125, 0.0, -0.0002771615982055664, 0.0, -0.0006219148053787649, 0.0, -6.67572021484375e-05, -2.09808349609375e-05, 0.0, -9.34600830078125e-05, -3.576278118089249e-07, -7.82012939453125e-05, 0.0, -0.0004863739013671875, 0.0, -0.03420257568359375, -0.0005359649658203125, -0.0018596649169921875, -3.62396240234375e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.806848978158087e-05, -1.0728830375228426e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.52587890625e-05, -0.040119171142578125, 0.0, -0.0001220703125, -1.9073486328125e-06, -0.00011205670307390392, 0.0, -4.1961669921875e-05, -0.01838970184326172, -3.814697265625e-06, -0.0001697540283203125, -1.9073486328125e-06, -0.14300954341888428, -3.814697265625e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole7": [{"body": [{"_type": "Return", "value": {"_type": "BoolOp", "op": {"_type": "And"}, "values": [{"func": {"_type": "Attribute", "attr": "can_use", "value": {"_type": "Template6", "hole0": "super"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}]}, "_type": "Compare", "comparators": [{"n": 7, "_type": "Num"}], "ops": [{"_type": "Lt"}]}]}}], "name": "can_use", "_type": "FunctionDef", "args": {"_type": "arguments", "args": [{"_type": "Template7"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}}], "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "Preparation", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"_type": "NameConstant", "value": "Null"}}, {"body": [{"_type": "Template5", "hole2": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ManaChange"}, "_type": "Call", "args": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"n": 3, "_type": "Num"}}]}]}], "hole1": "add_buff", "hole0": {"_type": "Name", "id": "card"}}], "_type": "If", "test": {"_type": "BoolOp", "op": {"_type": "And"}, "values": [{"func": {"_type": "Attribute", "attr": "is_minion", "value": {"_type": "Name", "id": "card"}}, "_type": "Call"}, {"left": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Name", "id": "character"}}, "_type": "Compare", "comparators": [{"_type": "Attribute", "attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "ops": [{"_type": "Eq"}]}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Preparation"}, {"n": 0, "_type": "Num"}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "EPIC", "value": {"_type": "Template9"}}]}}], "hole1": "SpellCard"}, "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = Null\n        if card.is_minion() and character.minion_type == MINION_TYPE.DRAGON:\n            card.add_buff(Buff(ManaChange(-3)))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "choice_history": [47, 114, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Preparation", "<EOS>", 42, 104, "0", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 32, 69, 29, "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 156, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 52, 68, 141, 40, 99, "minions", "<EOS>", 24, 101, "Null", "<EOS>", 59, 86, 17, 72, 4, 142, 35, 74, 15, 69, 23, 99, "card", "<EOS>", "is_minion", "<EOS>", 36, 79, 15, 69, 23, 99, "character", "<EOS>", "minion_type", "<EOS>", 138, 6, 141, 32, 69, 23, 99, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 154, 63, 120, 23, 99, "card", "<EOS>", "add_buff", "<EOS>", 141, 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Mana", "Change", "<EOS>", 141, 46, 126, 65, 25, 104, "3", "<EOS>", 154, 58, 83, "can_use", "<EOS>", 3, 129, 137, 0, 1, 128, "player", "<EOS>", 1, 128, "game", "<EOS>", 154, 61, 106, 17, 72, 4, 142, 35, 76, 15, 69, 28, 121, "super", "<EOS>", "can_use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 36, 79, 18, 76, 23, 99, "len", "<EOS>", 141, 32, 69, 23, 99, "player", "<EOS>", "minions", "<EOS>", 138, 12, 141, 42, 104, "7", "<EOS>"]}]}
{"gold_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion):\n        minion.set_health_to(1)\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "beams": [{"score": -3.103715596239006, "score_history": [-1.9073486328125e-06, -0.006114006042480469, -3.504698179312982e-05, -0.008937947452068329, -1.585482641530689e-05, -0.0003687143325805664, -5.7338023907504976e-05, -0.016622543334960938, -0.0004425048828125, -0.0001068115234375, -7.82012939453125e-05, -0.0002841949462890625, -2.288818359375e-05, -1.9073486328125e-05, -2.6702880859375e-05, 0.0, -2.8371408916427754e-05, -1.0728830375228426e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.0003550601250026375, -3.814689989667386e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -0.00017487068544141948, -1.9073486328125e-06, -0.0343015193939209, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, -0.0001697540283203125, -0.00017213821411132812, -3.814697265625e-06, -0.006790280342102051, 0.0, -0.0002073002833640203, -1.1920928244535389e-07, -0.0007877349853515625, -2.47955322265625e-05, -3.0517578125e-05, -0.0002536773681640625, -8.58306884765625e-05, -0.0008525848388671875, -1.9073486328125e-06, -0.009519577026367188, -1.9073486328125e-06, -0.018697738647460938, -2.503394853192731e-06, -0.00478816032409668, 0.0, -0.0521550178527832, -5.960462772236497e-07, -0.3491402864456177, 0.0, -0.000812530517578125, -2.6702880859375e-05, -0.00012969970703125, -0.12537479400634766, -7.081031799316406e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-05, 0.0, -0.0002536773681640625, -0.00011444091796875, -0.0008068084716796875, -3.814697265625e-06, -0.006618499755859375, -9.1552734375e-05, -0.0002613067626953125, -0.0024871826171875, 0.0, -0.0002956390380859375, -0.000213623046875, -0.000946044921875, -0.0002899169921875, -4.57763671875e-05, -0.0010318756103515625, -0.0003186464309692383, -3.576278118089249e-07, -0.00081634521484375, -5.340576171875e-05, -1.33514404296875e-05, -0.000232696533203125, -5.340576171875e-05, -0.0010776519775390625, 0.0, -0.0089111328125, 0.0, -0.0028533935546875, -3.576278118089249e-07, -0.001610398292541504, 0.0, -0.0017130374908447266, -1.5497195136049413e-06, -0.028939247131347656, -1.0728830375228426e-06, -0.0001392364501953125, -3.24249267578125e-05, -5.340576171875e-05, -0.0972975492477417, -3.254413604736328e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0001926422119140625, -0.000156402587890625, -0.000247955322265625, -9.5367431640625e-06, -0.0001201629638671875, -0.0001678466796875, -0.020172119140625, -0.0002536773681640625, -0.0031337738037109375, -0.001163482666015625, -0.08656120300292969, -8.7738037109375e-05, -0.000606536865234375, -0.000621795654296875, -0.02829563617706299, -2.145764938177308e-06, -0.0031909942626953125, -3.24249267578125e-05, -4.9591064453125e-05, -0.23303985595703125, -1.9073486328125e-06, -0.08634114265441895, -1.1920928244535389e-07, -0.33046913146972656, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0010614395141601562, -1.9073486328125e-06, -0.0004688782792072743, -0.0003335468645673245, -0.6923656463623047, -7.43865966796875e-05, -0.0004177093505859375, 0.0, -0.0039399852976202965, -0.000118255615234375, -0.12705421447753906, -3.814697265625e-06, -0.2926464080810547, -0.0001468658447265625, -3.0517578125e-05, -3.814697265625e-05, -5.7220458984375e-06, -9.918212890625e-05, 0.0, -0.002246856689453125, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.3878202438354492, 0.0, -0.004088401794433594, -2.622600959512056e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole7": [{"body": [{"_type": "Template5", "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "attr": "_reveal", "value": {"_type": "Name", "id": "self"}}], "hole1": "unbind", "hole0": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}}}], "name": "deactivate", "_type": "FunctionDef", "args": {"_type": "arguments", "args": [{"_type": "Template7"}, {"arg": "player", "_type": "arg"}]}}, {"body": [{"_type": "Template5", "hole2": [{"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "_reveal", "value": {"_type": "Name", "id": "self"}}], "hole1": "damage", "hole0": {"_type": "Name", "id": "minion"}}, {"targets": [{"_type": "Attribute", "attr": "player", "value": {"_type": "Name", "id": "self"}}], "_type": "Assign", "value": {"_type": "Name", "id": "player"}}], "name": "_reveal", "_type": "FunctionDef", "args": {"_type": "arguments", "args": [{"_type": "Template7"}, {"arg": "minion", "_type": "arg"}]}}], "hole3": "activate", "hole0": "Repentance", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "attr": "_reveal", "value": {"_type": "Name", "id": "self"}}], "hole1": "bind", "hole0": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Repentance"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}]}}], "hole1": "SecretCard"}, "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion):\n        minion.damage(1, self._reveal)\n        self.player = player\n", "choice_history": [47, 112, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Repentance", "<EOS>", 42, 104, "1", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 154, 63, 120, 15, 69, 15, 69, 23, 99, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 142, 43, 108, "minion_played", "<EOS>", 32, 69, 23, 99, "self", "<EOS>", "_reveal", "<EOS>", 155, 58, 83, "deactivate", "<EOS>", 3, 129, 136, 0, 1, 128, "player", "<EOS>", 154, 63, 120, 15, 69, 15, 69, 23, 99, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 142, 43, 108, "minion_played", "<EOS>", 32, 69, 23, 99, "self", "<EOS>", "_reveal", "<EOS>", 58, 83, "_reveal", "<EOS>", 3, 129, 136, 0, 1, 128, "minion", "<EOS>", 155, 63, 120, 23, 99, "minion", "<EOS>", "damage", "<EOS>", 142, 42, 104, "1", "<EOS>", 32, 69, 23, 99, "self", "<EOS>", "_reveal", "<EOS>", 52, 68, 141, 32, 69, 23, 99, "self", "<EOS>", "player", "<EOS>", 23, 99, "player", "<EOS>"]}]}
{"gold_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, False)\n\n    def create_minion(self, p):\n        return Minion(0, 1)\n", "beams": [{"score": -0.35882965894049335, "score_history": [-5.7220458984375e-06, -4.57763671875e-05, -0.00691281259059906, -0.002056518569588661, -0.03396967425942421, -0.0031211611349135637, -1.9311330106575042e-05, -1.1444091796875e-05, -3.3378546504536644e-06, -2.09808349609375e-05, -3.814697265625e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.0011959075927734375, -7.62939453125e-06, -0.007172584533691406, -3.814697265625e-06, -1.9073486328125e-06, -0.0002029935858445242, -0.00022602081298828125, -1.4066597032069694e-05, -5.7220458984375e-05, -0.00021469563944265246, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0016039907932281494, 0.0, 0.0, 0.0, -1.71661376953125e-05, 0.0, -4.887576324108522e-06, 0.0, -0.0008831024169921875, 0.0, -7.82012939453125e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.04889117181301117, 0.0, -4.291534423828125e-06, 0.0, -2.753734588623047e-05, 0.0, -5.7220458984375e-06, -3.0517578125e-05, -0.000102996826171875, -5.7220458984375e-06, -0.00064849853515625, -1.1444091796875e-05, 0.0, -2.6219349820166826e-06, 0.0, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -4.52994936495088e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.2159288417024072e-05, -0.0001609207974979654, -0.0007457733154296875, 0.0, -0.0023380517959594727, -7.152543730626348e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.0026798248291015625, -2.6702880859375e-05, -0.0008096694946289062, -3.814697265625e-06, 0.0, -0.0008490085601806641, -1.1444091796875e-05, -0.0003147125244140625, -0.060588836669921875, -7.62939453125e-06, -0.014246256090700626, -0.07924778014421463, -1.9073486328125e-06, -0.08149528503417969, 0.0, -0.007528185844421387, -8.821487426757812e-05, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 0, "_type": "Num"}, {"n": 1, "_type": "Num"}], "keywords": [{"arg": "auras", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Aura"}, "_type": "Call", "args": [{"_type": "Template6", "hole0": "<UNK>Deathrattle"}, {"_type": "Template6", "hole0": "PlayerSelector"}]}]}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Shadow of Nothing"}, {"n": 0, "_type": "Num"}, {"_type": "Attribute", "attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "EPIC", "value": {"_type": "Template9"}}]}}], "hole1": "MinionCard"}, "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), PlayerSelector())])\n", "choice_history": [47, 111, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Shadow", " ", "of", " ", "Nothing", "<EOS>", 42, 104, "0", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 32, 69, 29, "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "0", "<EOS>", 42, 104, "1", "<EOS>", 149, 131, "auras", "<EOS>", 21, 95, 141, 35, 76, 23, 99, "Aura", "<EOS>", 142, 45, 121, "<UNK>", "Deathrattle", "<EOS>", 45, 121, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.health > player.effective_spell_damage(2\n            ) or self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(2), self)\n            player.draw()\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n", "beams": [{"score": -1.2201641205053946, "score_history": [-7.62939453125e-06, -2.09808349609375e-05, -6.556495009135688e-06, -8.4638240878121e-06, -2.6189954951405525e-06, -1.9311904907226562e-05, 0.0, 0.0, -8.0108642578125e-05, -1.9073486328125e-06, -3.814697265625e-05, -2.6702880859375e-05, -1.9073486328125e-06, -1.33514404296875e-05, -3.814697265625e-06, 0.0, -2.264974000354414e-06, -1.1920928244535389e-07, 0.0, -9.5367431640625e-06, -4.38640417996794e-05, -2.3841855067985307e-07, 0.0, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -4.0531158447265625e-05, -1.9073486328125e-06, -0.0005400180816650391, 0.0, -1.9073486328125e-06, 0.0, -0.0002727508544921875, -6.890296936035156e-05, 0.0, -0.0006580352783203125, 0.0, -0.000148773193359375, 0.0, -5.7220458984375e-06, 0.0, -3.814697265625e-06, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -0.000217437744140625, 0.0, -9.930133819580078e-05, -3.814697265625e-06, -0.002860426902770996, -5.340576171875e-05, -1.3709068298339844e-05, 0.0, -1.4305078366305679e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -1.52587890625e-05, -0.0007572094327770174, -0.0003383906732778996, -0.1075296401977539, -3.814697265625e-06, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, -1.52587890625e-05, 0.0, -6.079673767089844e-06, -1.9073486328125e-06, -2.86102294921875e-05, -3.4332275390625e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, 0.0, 0.0, -1.71661376953125e-05, 0.0, -0.0506744384765625, -7.62939453125e-06, -0.0002002716064453125, -3.62396240234375e-05, 0.0, -0.07344675064086914, -6.413459777832031e-05, -0.000812530517578125, -0.000499725341796875, -5.14984130859375e-05, 0.0, -0.0031986236572265625, -3.814697265625e-06, -0.040017127990722656, -1.3470649719238281e-05, -0.0007877349853515625, -3.814697265625e-06, -1.52587890625e-05, -2.86102294921875e-05, -1.9073486328125e-05, -0.004215240478515625, -5.7220458984375e-06, -0.15606212615966797, 0.0, -0.0004177093505859375, -3.814697265625e-06, -0.07898902893066406, 0.0, -0.039624571800231934, -2.3841855067985307e-07, -0.006460785865783691, -4.768370445162873e-07, -0.009315252304077148, 0.0, -0.006905555725097656, -0.00386810302734375, -0.023430824279785156, -0.0001277923583984375, -0.000293731689453125, -1.9073486328125e-05, -0.011415481567382812, -1.52587890625e-05, -0.0003662109375, -3.0517578125e-05, -0.00066375732421875, -0.000759124755859375, -0.03647327423095703, -1.33514404296875e-05, -0.0011577606201171875, -0.00012969970703125, -0.000213623046875, 0.0, -0.0001964569091796875, -3.933906555175781e-06, -0.08589565753936768, -2.3841855067985307e-07, -0.0032274723052978516, -1.1920928244535389e-07, -6.67572021484375e-05, -0.0011758804321289062, -6.103515625e-05, -0.00019073486328125, 0.0, -2.288818359375e-05, -7.62939453125e-06, -0.011220932006835938, 0.0, -0.017221450805664062, 0.0, -0.03301429748535156, -7.82012939453125e-05, -0.010477066040039062, -1.9073486328125e-05, -9.5367431640625e-05, -3.814697265625e-06, -0.00029087066650390625, -1.9073486328125e-06, -0.0014848709106445312, 0.0, -6.67572021484375e-05, -0.0553741455078125, -3.0517578125e-05, -0.0020885467529296875, 0.0, -0.0040416717529296875, -1.9073486328125e-06, -0.028664588928222656, -4.00543212890625e-05, -7.82012939453125e-05, -0.036858558654785156, -1.52587890625e-05, -3.0517578125e-05, 0.0, -1.1444091796875e-05, -3.576278118089249e-07, -5.7220458984375e-06, -2.3841855067985307e-07, -0.11590683460235596, -1.9073468138230965e-06, -8.96453857421875e-05, -0.0001392364501953125, -5.7220458984375e-06, -0.0001179305836558342, -5.125998541188892e-06, -4.00543212890625e-05, -0.004536628723144531, -0.001071929931640625, 0.0, -6.29425048828125e-05, 0.0, -1.33514404296875e-05, -4.768370445162873e-07, -2.0265579223632812e-06, -7.152555099310121e-07, -0.1152191162109375, -1.1920928244535389e-07, -1.33514404296875e-05, -3.4332275390625e-05, 0.0, -0.0003395574167370796, -1.5497195136049413e-06, -0.0004062652587890625, -2.09808349609375e-05, -0.0001316070556640625, -0.0006198883056640625, -5.7220458984375e-06, -4.00543212890625e-05, 0.0, -1.1682510375976562e-05, -2.3841855067985307e-07, -2.86102294921875e-05, -1.6689286894688848e-06, -0.0008202791213989258, -2.0265579223632812e-06, -3.814697265625e-05, -8.0108642578125e-05, -0.0001430511474609375, -0.0002346038818359375, 0.0, -3.814697265625e-06, 0.0, -0.00011456012725830078, -2.1457672119140625e-06, -9.02414321899414e-05, -1.0728830375228426e-06, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -0.01793006993830204, -2.264974000354414e-06, -6.29425048828125e-05, 0.0, -0.004651069641113281, -1.9073486328125e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "Slam", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}, {"targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign", "value": {"func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}, "_type": "Call", "args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}}}]}}, {"body": [{"_type": "Template5", "hole2": [{"n": 2, "_type": "Num"}], "hole1": "change_attack", "hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}, {"_type": "Template5", "hole2": [{"n": 2, "_type": "Num"}], "hole1": "increase_health", "hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "If", "orelse": [{"_type": "Template5", "hole2": [{"func": {"_type": "Attribute", "attr": "effective_spell_damage", "value": {"_type": "Name", "id": "player"}}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "test": {"_type": "BoolOp", "op": {"_type": "And"}, "values": [{"left": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}, "_type": "Compare", "comparators": [{"_type": "Attribute", "attr": "DEMON", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "ops": [{"_type": "Is"}]}, {"left": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Compare", "comparators": [{"_type": "Name", "id": "targets"}], "ops": [{"_type": "In"}]}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}]}}], "hole1": "SpellCard"}, "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.current_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.DEMON and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n", "choice_history": [47, 113, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Slam", "<EOS>", 42, 104, "2", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 149, 131, "target_func", "<EOS>", 15, 69, 15, 69, 23, 99, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 156, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 52, 68, 141, 40, 99, "targets", "<EOS>", 18, 76, 15, 69, 23, 99, "copy", "<EOS>", "copy", "<EOS>", 141, 32, 69, 15, 69, 15, 69, 23, 99, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 59, 87, 17, 72, 4, 142, 36, 79, 15, 69, 15, 69, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 138, 10, 141, 32, 69, 23, 99, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 36, 79, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", 138, 9, 141, 40, 99, "targets", "<EOS>", 155, 63, 120, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 141, 42, 104, "2", "<EOS>", 63, 120, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 141, 42, 104, "2", "<EOS>", 154, 63, 120, 15, 69, 23, 99, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 142, 35, 76, 15, 69, 23, 99, "player", "<EOS>", "effective_spell_damage", "<EOS>", 141, 42, 104, "2", "<EOS>", 40, 99, "self", "<EOS>"]}]}
{"gold_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"score": -0.10195469422372838, "score_history": [-1.52587890625e-05, -2.09808349609375e-05, -0.00034570536809042096, -0.0009890745859593153, -5.841007805429399e-06, -0.00013768672943115234, -1.4305104514278355e-06, -3.814697265625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -3.4332275390625e-05, -4.1961669921875e-05, -1.52587890625e-05, -8.7738037109375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.3113021850585938e-06, -2.741813204920618e-06, 0.0, -1.9073486328125e-06, -0.0003621576470322907, -2.3841855067985307e-07, -0.000118255615234375, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-05, 0.0, -2.47955322265625e-05, 0.0, 0.0, -3.814697265625e-06, -2.288818359375e-05, -8.678435551701114e-05, 0.0, -0.0004100799560546875, 0.0, -2.47955322265625e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -3.814697265625e-06, -1.9073486328125e-06, -7.014570292085409e-05, -7.62939453125e-06, -7.62939453125e-06, -0.0025348663330078125, -4.38690185546875e-05, -0.07278158515691757, -0.0014408251736313105, -0.0001773834228515625, -3.4332275390625e-05, -3.814697265625e-06, -3.24249267578125e-05, -0.00029389234259724617, -0.0001392364501953125, -1.9311904907226562e-05, -0.0002498626708984375, -3.814697265625e-05, -0.011966705322265625, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.0031491518020629883, -1.33514404296875e-05, 0.0, -0.0003643035888671875, -0.00041961669921875, 0.0, -4.00543212890625e-05, -1.9073486328125e-06, -0.0015453100204467773, -7.05718994140625e-05, -9.5367431640625e-06, -1.1444091796875e-05, 0.0, -0.0001386404037475586, 0.0, -0.000118255615234375, -8.58306884765625e-05, -3.814697265625e-06, -0.0003452301025390625, -0.000255584716796875, -9.5367431640625e-06, 0.0, -4.768262442667037e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.4332275390625e-05, -1.9073331714025699e-06, -1.1920928244535389e-07, -2.47955322265625e-05, -7.62939453125e-06, -0.002545779338106513, -2.0265579223632812e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 4, "_type": "Num"}, {"n": 3, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"n": 4, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"_type": "Template6", "hole0": "Silence"}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "keywords": [{"arg": "players", "_type": "keyword", "value": {"_type": "Template6", "hole0": "BothPlayer"}}, {"arg": "picker", "_type": "keyword", "value": {"_type": "Template6", "hole0": "UserPicker"}}]}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [47, 111, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Spellbreaker", "<EOS>", 42, 104, "4", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 149, 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 142, 45, 121, "Silence", "<EOS>", 35, 75, 23, 99, "Minion", "Selector", "<EOS>", 150, 131, "players", "<EOS>", 28, 121, "Both", "Player", "<EOS>", 131, "picker", "<EOS>", 28, 121, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "4", "<EOS>", 42, 104, "3", "<EOS>"]}]}
{"gold_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())),\n            MinionSelector(Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"score": -1.5817970753620685, "score_history": [0.0, -3.814697265625e-06, -0.011565305292606354, -5.4834770708112046e-05, -4.887569048150908e-06, -1.1920906217710581e-07, -5.841255187988281e-06, -4.768370445162873e-07, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -4.38690185546875e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -1.311301275563892e-06, -1.52587890625e-05, -4.291525328881107e-06, -1.1920928244535389e-07, 0.0, 0.0, -2.1457641196320765e-05, -1.1920928244535389e-07, 0.0, 0.0, -7.62939453125e-06, 0.0, -4.374978016130626e-05, -1.9073486328125e-06, -3.075599670410156e-05, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, -9.5367431640625e-06, -0.00014781902427785099, 0.0, -0.009073257446289062, 0.0, -1.919269561767578e-05, 0.0, -2.09808349609375e-05, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, -5.757797043770552e-05, 0.0, -1.33514404296875e-05, -0.0004711151123046875, -3.814697265625e-05, -5.7220458984375e-06, 0.0, -0.0043558161705732346, -7.033334895822918e-06, -0.00186920166015625, -0.05872344970703125, -1.9073486328125e-06, -0.3047666549682617, -7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0005787513218820095, 0.0, -1.9073486328125e-06, -0.006381988525390625, -9.5367431640625e-06, -3.814697265625e-06, -1.52587890625e-05, -0.007164306007325649, -0.0025762319564819336, -2.09808349609375e-05, -3.814697265625e-05, -5.7220458984375e-05, 0.0, -0.005671059247106314, 0.0, -9.1552734375e-05, -5.7220458984375e-06, 0.0, 0.0, -0.015188214369118214, -2.2649765014648438e-06, -7.62939453125e-06, -0.0054683685302734375, -1.1444091796875e-05, -1.9073486328125e-06, -1.1444091796875e-05, -0.08933250606060028, -0.05658316612243652, 0.0, -2.288818359375e-05, -0.45258235931396484, -1.9073486328125e-06, -0.0020272070541977882, 0.0, -0.0028133392333984375, -0.06332683563232422, 0.0, -9.5367431640625e-06, -4.935404285788536e-05, -0.00211334228515625, 0.0, -0.009847640991210938, -0.014756202697753906, -6.866455078125e-05, -1.9073486328125e-06, 0.0, -0.026852726936340332, -0.00011777871986851096, -5.960462772236497e-07, -0.004932403564453125, -1.71661376953125e-05, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -0.0002651214599609375, 0.0, -0.4194297790527344, 0.0, -0.0002714395523071289, 0.0, -9.799003601074219e-05, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, -0.00138092041015625, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, 0.0, -1.9073486328125e-06, -1.7046782886609435e-05, 0.0, 0.0, 0.0, -2.205370765295811e-05, -2.503394853192731e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}, {"n": 3, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"n": 2, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}], "keywords": [{"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}, {"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}]}]}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}]}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(2))]), MinionSelector(IsType(MINION_TYPE.\n            MURLOC))))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [47, 111, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Sunfury", " ", "Protector", "<EOS>", 42, 104, "2", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "RARE", "<EOS>", 149, 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 142, 35, 76, 23, 99, "Give", "<EOS>", 141, 38, 95, 142, 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Attack", "<EOS>", 141, 42, 104, "2", "<EOS>", 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Health", "<EOS>", 141, 42, 104, "2", "<EOS>", 35, 76, 23, 99, "Minion", "Selector", "<EOS>", 141, 35, 76, 23, 99, "Is", "Type", "<EOS>", 141, 32, 69, 23, 99, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "2", "<EOS>", 42, 104, "3", "<EOS>"]}]}
{"gold_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "beams": [{"score": -1.8220103512099826, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.08014947921037674, -0.00019214690837543458, -3.576278118089249e-07, -6.794873570470372e-06, -5.841255187988281e-06, -5.960462772236497e-07, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0001316070556640625, -3.814697265625e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.768370445162873e-07, -1.7523765563964844e-05, -4.7563549742335454e-05, 0.0, -1.9073486328125e-06, 0.0, -1.7881388885143679e-06, -4.649161837733118e-06, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -0.00011801718210335821, -1.9073486328125e-06, -6.115436553955078e-05, 0.0, 0.0, -1.9073486328125e-06, -1.52587890625e-05, -0.001602768781594932, -1.9073486328125e-06, -5.340576171875e-05, 0.0, -1.33514404296875e-05, 0.0, -7.62939453125e-06, -2.288818359375e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00031757523538544774, -1.1920928244535389e-07, -0.0006084442138671875, -0.0007991790771484375, -0.0020847320556640625, -9.5367431640625e-06, -4.1961669921875e-05, -0.013205205090343952, -0.0010221758857369423, -2.09808349609375e-05, -0.4095010757446289, -0.013872146606445312, -0.0001220703125, -5.7220458984375e-06, -0.003010602667927742, -0.0036460161209106445, -1.9073486328125e-06, -0.0011310577392578125, -1.9073486328125e-06, -0.2122746706008911, -2.300739288330078e-05, -0.0002269744873046875, -0.00014495849609375, -0.10383415222167969, -0.000125885009765625, -0.007235527038574219, -5.7220458984375e-06, -0.0001430511474609375, -0.27709972858428955, -0.07169926166534424, -1.9073486328125e-06, -0.000217437744140625, -0.14449405670166016, -0.05819225311279297, -3.814697265625e-06, -3.814697265625e-06, -0.008028380572795868, -6.496906280517578e-05, -5.7220458984375e-06, -1.71661376953125e-05, -0.0007762908935546875, -0.2503006160259247, -0.00015366077423095703, -0.005133628845214844, -6.103515625e-05, -0.05847620964050293, -5.53131103515625e-05, 0.0, -0.02413177490234375, 0.0, -0.010728931985795498, -0.025417327880859375, -1.8715853002504446e-05, -0.003559112548828125, -0.000286102294921875, -2.288818359375e-05, -4.57763671875e-05, -0.004359006881713867, -0.000156402587890625, 0.0, -0.009833335876464844, -1.9073486328125e-05, -0.006712436676025391, 0.0, -0.003387451171875, 0.0, -0.0019080638885498047, -3.8743019104003906e-05, -1.1920928244535389e-07, -1.919269561767578e-05, 0.0, -0.0001593827473698184, 0.0, -9.5367431640625e-06, -7.62939453125e-06, -3.814697265625e-06, -1.71661376953125e-05, -0.0002307891845703125, -3.4332275390625e-05, -1.1444091796875e-05, -1.1920565157197416e-07, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -6.4849853515625e-05, -1.53779055835912e-05, -5.960446742392378e-06, 0.0, -1.9073486328125e-06, -1.669149787630886e-05, -1.5616367818438448e-05], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}, {"n": 3, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"n": 3, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "LEGENDARY", "value": {"_type": "Template9"}}], "keywords": [{"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Transform"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "CardQuery"}, "_type": "Call", "keywords": [{"arg": "conditions", "_type": "keyword", "value": {"_type": "List", "elts": [{"func": {"_type": "Name", "id": "ManaCost"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Attribute"}, "_type": "Call", "args": [{"_type": "Str", "s": "mana"}, {"_type": "Template6", "hole0": "SelfSelector"}]}]}, {"_type": "Template6", "hole0": "IsMinion"}]}}]}]}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "keywords": [{"arg": "picker", "_type": "keyword", "value": {"_type": "Template6", "hole0": "UserPicker"}}]}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaCost(Attribute('mana', SelfSelector())),\n            IsMinion()])), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [47, 111, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Tinkmaster", " ", "Overspark", "<EOS>", 42, 104, "3", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "LEGENDARY", "<EOS>", 149, 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 142, 35, 76, 23, 99, "Transform", "<EOS>", 141, 35, 75, 23, 99, "Card", "Query", "<EOS>", 149, 131, "conditions", "<EOS>", 21, 95, 142, 35, 76, 23, 99, "Mana", "Cost", "<EOS>", 141, 35, 76, 23, 99, "Attribute", "<EOS>", 142, 43, 108, "mana", "<EOS>", 45, 121, "Self", "Selector", "<EOS>", 45, 121, "Is", "Minion", "<EOS>", 35, 75, 23, 99, "Minion", "Selector", "<EOS>", 149, 131, "picker", "<EOS>", 28, 121, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "3", "<EOS>", 42, 104, "3", "<EOS>"]}]}
{"gold_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and attacker.is_minion(\n            ) and not attacker.removed:\n            attacker.die(self)\n            attacker.game.check_delayed()\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "beams": [{"score": -2.9336503676113566, "score_history": [-1.9073486328125e-06, -0.2363605499267578, -0.0022982200607657433, -0.00033814023481681943, -0.00010943101369775832, -0.0006829500198364258, -2.372236667724792e-05, -0.03829765319824219, -2.6702880859375e-05, -1.1444091796875e-05, -0.0001773834228515625, -0.0008182525634765625, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0002586507180240005, -2.50339189733495e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.2567527745850384e-05, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -5.7220458984375e-06, 0.0, -5.6624397984705865e-05, -1.9073486328125e-06, -0.02648317813873291, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -2.47955322265625e-05, -0.00083160400390625, 0.0, -0.13367652893066406, 0.0, -0.001789689064025879, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -1.33514404296875e-05, -0.0003387928009033203, -1.9073486328125e-06, -0.0412445068359375, -0.08971023559570312, -1.71661376953125e-05, -0.0003509521484375, -0.0001010894775390625, -0.0001409053656971082, 0.0, -0.0011788606643676758, 0.0, -5.7220458984375e-05, -0.0008668899536132812, -1.9073486328125e-06, -5.7220458984375e-06, -3.933906555175781e-06, -9.34600830078125e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.16482162475585938, -0.0790863037109375, -0.0009860992431640625, -0.005273938179016113, -1.1444091796875e-05, -0.0020008087158203125, -0.00020599365234375, -0.008148193359375, -0.000263214111328125, -1.71661376953125e-05, -2.47955322265625e-05, -0.008200282230973244, -2.4199236577260308e-05, -0.000537872314453125, -7.62939453125e-06, -0.299568772315979, -3.218649908376392e-06, -0.000194549560546875, -0.000804901123046875, -0.0001392364501953125, -0.12750911712646484, -0.09296321868896484, -0.0005426406860351562, -5.7220458984375e-06, -0.0002288818359375, -7.62939453125e-06, -0.00379180908203125, -1.1920928244535389e-07, -0.011066436767578125, 0.0, -0.01776409149169922, -0.0006055831909179688, -3.814697265625e-06, -9.5367431640625e-06, -0.00029468536376953125, -2.6702880859375e-05, -0.0006427764892578125, 0.0, -0.003336191177368164, -1.52587890625e-05, -0.004903912544250488, 0.0, -0.0054721832275390625, -0.00011444091796875, -6.771087646484375e-05, -2.3841855067985307e-07, -0.0023221969604492188, -0.0020656585693359375, -0.0051059722900390625, -7.62939453125e-06, -0.0004011392593383789, 0.0, -0.00019073486328125, 0.0, -0.00017547607421875, -5.91278076171875e-05, -0.0013715028762817383, -1.1920928244535389e-07, -0.001007080078125, -0.000240325927734375, -0.000499725341796875, -0.0002155303955078125, -3.62396240234375e-05, -9.34600830078125e-05, -2.014626625168603e-05, -1.3470558769768104e-05, -0.0059299468994140625, -4.57763671875e-05, -1.33514404296875e-05, -0.00070953369140625, -4.00543212890625e-05, -0.014417648315429688, -1.9073486328125e-06, -0.0006160736083984375, -1.9073486328125e-06, -0.0002956390380859375, -2.503394853192731e-06, -0.005678175948560238, 0.0, -0.0025457104202359915, -1.5497195136049413e-06, -0.12500107288360596, -1.1920928244535389e-07, -0.000667572021484375, -9.5367431640625e-06, -2.86102294921875e-05, -0.6267563104629517, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -0.0001506805419921875, -1.52587890625e-05, -0.001506805419921875, -1.9073486328125e-06, -0.0004119873046875, -0.0002384185791015625, -0.00518798828125, 0.0, -0.000202178955078125, -0.0001220703125, -0.001007080078125, -0.000274658203125, -3.62396240234375e-05, -0.000385284423828125, -8.0108642578125e-05, -2.3841855067985307e-07, -0.001071929931640625, -0.0001621246337890625, -9.5367431640625e-06, -0.00167083740234375, -0.000186920166015625, -0.006427764892578125, -9.5367431640625e-06, -0.0007038116455078125, -1.9073486328125e-06, -0.0019989013671875, -1.1920928244535389e-07, -0.007096052169799805, 0.0, -0.0026744583155959845, -1.7881377516459906e-06, -0.04897880554199219, -1.1920928244535389e-07, -0.00031280517578125, -1.33514404296875e-05, -1.9073486328125e-05, -0.6389650106430054, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -0.000125885009765625, -1.71661376953125e-05, -0.00070953369140625, 0.0], "model_output": {"hole4": "player", "_type": "Template0", "hole7": [{"body": [{"body": [{"targets": [{"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Name", "id": "card"}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}, {"_type": "Template5", "hole1": "reveal", "hole0": {"_type": "Template6", "hole0": "super"}}], "_type": "If", "test": {"func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Name", "id": "card"}}, "_type": "Call"}}], "name": "_reveal", "_type": "FunctionDef", "args": {"_type": "arguments", "args": [{"_type": "Template7"}, {"arg": "card", "_type": "arg"}, {"arg": "target", "_type": "arg"}]}}, {"body": [{"_type": "Template5", "hole2": [{"_type": "Str", "s": "card_played"}, {"_type": "Attribute", "attr": "_reveal", "value": {"_type": "Name", "id": "self"}}], "hole1": "unbind", "hole0": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}}}], "name": "activate", "_type": "FunctionDef", "args": {"_type": "arguments", "args": [{"_type": "Template7"}, {"arg": "player", "_type": "arg"}]}}, {"body": [{"_type": "Template5", "hole2": [{"_type": "Str", "s": "card_played"}, {"_type": "Attribute", "attr": "_reveal", "value": {"_type": "Name", "id": "self"}}], "hole1": "unbind", "hole0": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}}}], "name": "deactivate", "_type": "FunctionDef", "args": {"_type": "arguments", "args": [{"_type": "Template7"}, {"arg": "player", "_type": "arg"}]}}], "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole0": "Vaporize", "hole6": [{"_type": "Template5", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "hole1": "use", "hole0": {"_type": "Template6", "hole0": "super"}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Vaporize"}, {"n": 3, "_type": "Num"}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}]}}], "hole1": "SecretCard"}, "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, card, target):\n        if card.<UNK>():\n            card.<UNK> = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n", "choice_history": [47, 114, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Vaporize", "<EOS>", 42, 104, "3", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 32, 69, 29, "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 135, 1, 128, "game", "<EOS>", 154, 63, 120, 28, 121, "super", "<EOS>", "use", "<EOS>", 142, 40, 99, "player", "<EOS>", 40, 99, "game", "<EOS>", 156, 58, 83, "_reveal", "<EOS>", 3, 129, 137, 0, 1, 128, "card", "<EOS>", 1, 128, "target", "<EOS>", 154, 59, 86, 18, 74, 15, 69, 23, 99, "card", "<EOS>", "<UNK>", "<EOS>", 155, 52, 68, 141, 32, 69, 23, 99, "card", "<EOS>", "<UNK>", "<EOS>", 24, 100, "True", "<EOS>", 63, 119, 28, 121, "super", "<EOS>", "reveal", "<EOS>", 58, 83, "activate", "<EOS>", 3, 129, 136, 0, 1, 128, "player", "<EOS>", 154, 63, 120, 15, 69, 15, 69, 23, 99, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 142, 43, 108, "card_played", "<EOS>", 32, 69, 23, 99, "self", "<EOS>", "_reveal", "<EOS>", 58, 83, "deactivate", "<EOS>", 3, 129, 136, 0, 1, 128, "player", "<EOS>", 154, 63, 120, 15, 69, 15, 69, 23, 99, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 142, 43, 108, "card_played", "<EOS>", 32, 69, 23, 99, "self", "<EOS>", "_reveal", "<EOS>"]}]}
{"gold_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "beams": [{"score": -0.02907762986929896, "score_history": [0.0, -5.7220458984375e-06, -0.0001530530134914443, -3.6000557884108275e-05, -2.50339189733495e-06, -1.1920906217710581e-07, -1.3470649719238281e-05, -8.344646857949556e-07, 0.0, -1.9073486328125e-06, 0.0, -3.0517578125e-05, -0.0069732666015625, -3.814697265625e-06, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -3.6954811548639555e-06, -4.100799560546875e-05, -1.311301275563892e-06, -4.768370445162873e-07, 0.0, 0.0, -0.0002465228026267141, -2.3841855067985307e-07, 0.0, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, 0.0, 0.0, -7.62939453125e-06, -8.07046890258789e-05, 0.0, -1.9073486328125e-06, 0.0, -0.00012600421905517578, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -7.05718994140625e-05, -5.7220458984375e-06, 0.0, -4.764879122376442e-07, 0.0, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.764288026606664e-05, 0.0, 0.0, 0.0, -0.00028228320297785103, -3.6954863844584906e-06, -0.0037593841552734375, -7.62939453125e-06, -0.016911864280700684, 0.0, -1.33514404296875e-05, -0.000102996826171875, -5.4836247727507725e-05, -1.1920928244535389e-07], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}, {"n": 1, "_type": "Num"}], "keywords": [{"arg": "stealth", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Worgen Infiltrator"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}]}}], "hole1": "MinionCard"}, "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "choice_history": [47, 111, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 76, 27, 144, 43, 108, "Worgen", " ", "Infiltrator", "<EOS>", 42, 104, "1", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 77, 23, 99, "Minion", "<EOS>", 142, 42, 104, "2", "<EOS>", 42, 104, "1", "<EOS>", 149, 131, "stealth", "<EOS>", 24, 100, "True", "<EOS>"]}]}
{"gold_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "beams": [{"score": -3.726447671036631, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -0.0015737541252747178, -2.658331868587993e-05, -7.152555099310121e-07, -2.384176468694932e-06, -5.841255187988281e-06, -8.344646857949556e-07, -7.62939453125e-06, -3.814697265625e-06, 0.0, -1.71661376953125e-05, -3.4332275390625e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -2.002716064453125e-05, -1.1444046322139911e-05, 0.0, -1.9073486328125e-06, 0.0, -0.00020111026242375374, -9.536738616588991e-07, 0.0, 0.0, -3.814697265625e-06, 0.0, -9.894371032714844e-06, 0.0, -1.52587890625e-05, 0.0, 0.0, -1.9073486328125e-06, -1.33514404296875e-05, -5.4597850976279005e-05, 0.0, -0.003662109375, 0.0, -3.0517578125e-05, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.00012776754738297313, -1.1920928244535389e-07, -0.017879486083984375, -0.0002899169921875, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.6336148977279663, -2.3841855067985307e-07, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.07844213396310806, 0.0, -0.000278472900390625, -0.003086090087890625, -1.71661376953125e-05, -0.0014247894287109375, -0.003979381639510393, -9.894371032714844e-06, 0.0, -0.20412445068359375, -0.000518798828125, -5.2809715270996094e-05, 0.0, -9.918212890625e-05, 0.0, -0.04761505126953125, -1.52587890625e-05, 0.0, 0.0, -0.0004558563232421875, 0.0, -0.0050296783447265625, -1.9073486328125e-06, -0.009130716323852539, -1.728534698486328e-05, -5.7220458984375e-06, -3.62396240234375e-05, -0.008514404296875, -1.9073486328125e-06, 0.0, -0.40073728561401367, -0.3280515670776367, -0.39992618560791016, -0.8440017700195312, -0.000247955322265625, -0.6919395327568054, -1.537799835205078e-05, -0.00014662738249171525, -1.1920928244535389e-07, -0.04023505002260208, 0.0, -1.9073486328125e-06, -3.0517578125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.0003147125244140625, -1.1444091796875e-05, -4.1961669921875e-05, -2.384149411227554e-07, 0.0, -1.1444091796875e-05, 0.0, -1.52587890625e-05, -1.1086463018727954e-05, -8.535020606359467e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -2.098061486321967e-05], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 5, "_type": "Num"}, {"n": 4, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"n": 5, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Damage"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}]}, {"func": {"_type": "Name", "id": "CharacterSelector"}, "_type": "Call", "keywords": [{"arg": "players", "_type": "keyword", "value": {"_type": "Template6", "hole0": "BothPlayer"}}, {"arg": "picker", "_type": "keyword", "value": {"_type": "Template6", "hole0": "UserPicker"}}]}, {"func": {"_type": "Name", "id": "Opponent"}, "_type": "Call", "args": [{"n": 4, "_type": "Num"}]}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            Opponent(4)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [47, 111, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Blackwing", " ", "Corruptor", "<EOS>", 42, 104, "5", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 149, 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 143, 35, 76, 23, 99, "Damage", "<EOS>", 141, 42, 104, "1", "<EOS>", 35, 75, 23, 99, "Character", "Selector", "<EOS>", 150, 131, "players", "<EOS>", 28, 121, "Both", "Player", "<EOS>", 131, "picker", "<EOS>", 28, 121, "User", "Picker", "<EOS>", 35, 76, 23, 99, "Opponent", "<EOS>", 141, 42, 104, "4", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "5", "<EOS>", 42, 104, "4", "<EOS>"]}]}
{"gold_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Attribute('health',\n            HeroSelector(EnemyPlayer())), value=15))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "beams": [{"score": -3.225511630696694, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -0.00030155404238030314, -1.5139492461457849e-05, -3.933898824470816e-06, -1.1920917586394353e-07, -7.748603820800781e-06, -4.768370445162873e-07, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.62939453125e-06, -1.71661376953125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -2.5868412194540724e-05, -2.622604142743512e-06, 0.0, 0.0, 0.0, -1.335755496256752e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -1.5616416931152344e-05, -1.9073486328125e-06, -5.91278076171875e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -2.09808349609375e-05, -6.77101852488704e-05, -4.0531158447265625e-06, -0.000141143798828125, -7.62939453125e-06, -0.0001811981201171875, 0.0, -1.52587890625e-05, 0.0, -1.9073486328125e-06, 0.0, -0.00122833251953125, 0.0, -0.28868865966796875, 0.0, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -6.866455078125e-05, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.0005487198941409588, 0.0, -0.10801887512207031, -0.003299713134765625, -8.0108642578125e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.00025904166977852583, 0.0, -3.4332275390625e-05, -0.005107879638671875, -3.814697265625e-06, -0.001220703125, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.000408172607421875, 0.0, -1.1444091796875e-05, -0.0001468658447265625, -1.52587890625e-05, -1.9073486328125e-06, -3.24249267578125e-05, -4.589552918332629e-05, -0.4021111726760864, -1.9073486328125e-06, -1.9073486328125e-06, -3.62396240234375e-05, -1.9073486328125e-06, -0.017512023448944092, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0004482269287109375, -2.3841855067985307e-07, -3.814697265625e-06, -0.01946258544921875, -0.0003204345703125, -1.9073486328125e-06, -0.0001201629638671875, -0.00020360643975436687, -0.13777148723602295, 0.0, -5.7220458984375e-06, -8.7738037109375e-05, -1.9073486328125e-06, -0.06572677195072174, 0.0, -0.004772186279296875, 0.0, -0.00010323524475097656, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -0.03602409362792969, -3.814697265625e-06, -1.9073486328125e-06, -0.07126522064208984, -5.7220458984375e-06, -3.814697265625e-06, -0.00696563720703125, -0.2614727020263672, -7.62939453125e-06, -4.76837158203125e-05, -0.7312318086624146, -1.1920928244535389e-07, -9.5367431640625e-06, -0.3506460189819336, -0.0001068115234375, -0.0005550384521484375, -7.62939453125e-06, -9.5367431640625e-06, -9.5367431640625e-06, -3.814697265625e-06, -0.0008831024169921875, 0.0, -1.9073486328125e-06, -0.000263214111328125, -2.6702880859375e-05, -1.9073486328125e-06, -8.0108642578125e-05, -0.00010752661910373718, -0.4142136573791504, -1.9073486328125e-06, -1.9073486328125e-06, -5.340576171875e-05, -1.9073486328125e-06, -0.10992015898227692, 0.0, -1.71661376953125e-05, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -0.000499725341796875, -5.960462772236497e-07, -5.7220458984375e-06, -0.026014328002929688, -0.00029754638671875, -1.9073486328125e-06, -0.00020599365234375, -0.0005026943399570882, -0.022068021818995476, 0.0, -7.62939453125e-06, -8.7738037109375e-05, -1.9073486328125e-06, -0.07338307052850723, 0.0, -0.058605194091796875, 0.0, -0.0001404285430908203, -3.814697265625e-06, 0.0, -3.099439709330909e-05, 0.0, -7.28366503608413e-05, 0.0, -5.7220458984375e-06, -2.47955322265625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001811981201171875, -2.09808349609375e-05, -5.340576171875e-05, -7.145572453737259e-07, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -6.198720802785829e-05, 0.0, 0.0, 0.0, -8.893839549273252e-06, -2.1457672119140625e-06], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 6, "_type": "Num"}, {"n": 6, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"n": 6, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}}}, {"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}]}]}, {"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}]}]}]}]}, {"_type": "Template6", "hole0": "SelfSelector"}, {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}]}]}, {"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call", "args": [{"n": 3, "_type": "Num"}]}]}]}]}, {"_type": "Template6", "hole0": "SelfSelector"}]}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Battlecry(Give([Buff(ChangeAttack(3)), Buff(\n            ChangeHealth(3))]), SelfSelector())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [47, 111, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Drakonid", " ", "Crusher", "<EOS>", 42, 104, "6", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 150, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 143, 35, 76, 23, 99, "Give", "<EOS>", 141, 38, 95, 142, 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Attack", "<EOS>", 141, 42, 104, "3", "<EOS>", 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Health", "<EOS>", 141, 42, 104, "3", "<EOS>", 45, 121, "Self", "Selector", "<EOS>", 35, 76, 23, 99, "Battlecry", "<EOS>", 142, 35, 76, 23, 99, "Give", "<EOS>", 141, 38, 95, 142, 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Attack", "<EOS>", 141, 42, 104, "3", "<EOS>", 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Health", "<EOS>", 141, 42, 104, "3", "<EOS>", 45, 121, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "6", "<EOS>", 42, 104, "6", "<EOS>"]}]}
{"gold_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"score": -0.15289436952792101, "score_history": [-7.62939453125e-06, -2.86102294921875e-05, -0.0018354489002376795, -9.131048864219338e-05, -4.1722378227859735e-06, -1.537799835205078e-05, -7.152555099310121e-07, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -0.013460159301757812, -7.05718994140625e-05, -0.0030260086059570312, -0.000263214111328125, -9.5367431640625e-05, -1.585470999998506e-05, -1.9073468138230965e-06, -1.9073486328125e-06, -3.814697265625e-06, -4.208051905152388e-05, -2.3841855067985307e-07, -1.1444091796875e-05, 0.0, -9.5367431640625e-06, 0.0, -7.152556463552173e-06, 0.0, -0.01376640796661377, -1.1920928244535389e-07, -8.20159912109375e-05, -1.9073486328125e-06, -4.57763671875e-05, -0.0780186653137207, -1.811964830267243e-05, -0.00016021728515625, -5.7220458984375e-06, -5.7935641962103546e-05, -7.152555099310121e-07, -0.0001277923583984375, -1.9073486328125e-06, -0.0003719329833984375, -2.3841855067985307e-07, -1.33514404296875e-05, 0.0, -0.0001201629638671875, -5.7220458984375e-06, -5.14984130859375e-05, 0.0, -0.005296945571899414, 0.0, -4.88758041683468e-06, 0.0, -0.0001370898971799761, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.03543663024902344, -2.6702880859375e-05, -4.1961669921875e-05, -2.14574538404122e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -2.0503746782196686e-05, -9.536738616588991e-07, -1.1444091796875e-05, 0.0, -6.809175829403102e-06, -1.9788545614574105e-05], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}, {"n": 1, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "RARE", "value": {"_type": "Template9"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "DEMON", "value": {"_type": "Name", "id": "MINION_TYPE"}}}]}}], "hole1": "MinionCard"}, "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "choice_history": [47, 111, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 145, 43, 108, "Imp", "<EOS>", 42, 104, "1", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 32, 69, 29, "RARE", "<EOS>", 41, 100, "False", "<EOS>", 149, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "1", "<EOS>", 42, 104, "1", "<EOS>"]}]}
{"gold_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "beams": [{"score": -2.988721156837542, "score_history": [0.0, -1.9073486328125e-06, -0.0004558716027531773, -1.9907753085135482e-05, -1.1920928244535389e-07, -1.0728690540418029e-06, -5.841255187988281e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -3.814697265625e-06, -6.67572021484375e-05, -7.62939453125e-06, -4.1961669921875e-05, -3.814697265625e-05, 0.0, -3.576278118089249e-07, -1.537799835205078e-05, -2.384185791015625e-06, 0.0, 0.0, 0.0, -3.5677076084539294e-05, -2.2649765014648438e-06, 0.0, 0.0, -1.1444091796875e-05, 0.0, -0.00010156115604331717, 0.0, -0.13088977336883545, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -2.288818359375e-05, -4.518021160038188e-05, -1.9073486328125e-06, -0.000476837158203125, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -0.8397340774536133, 0.0, -3.814697265625e-06, -2.09808349609375e-05, 0.0, -2.6702880859375e-05, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.972266080789268e-05, 0.0, -0.0038204193115234375, -0.001354217529296875, -0.000286102294921875, -5.7220458984375e-06, 0.0, -0.0017589187482371926, 0.0, -3.814697265625e-06, -0.00457763671875, -5.7220458984375e-06, -0.000492095947265625, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0004857778549194336, 0.0, -3.814697265625e-06, -8.7738037109375e-05, -1.9073486328125e-05, -1.9073486328125e-06, -3.4332275390625e-05, -0.00016760604921728373, -0.5042173862457275, 0.0, 0.0, -2.47955322265625e-05, 0.0, -0.6664048433303833, 0.0, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -1.9073486328125e-06, -0.0008717775344848633, -7.152555099310121e-07, -5.7220458984375e-06, -0.0047969818115234375, -0.0014677047729492188, -1.9073486328125e-06, -0.000110626220703125, -0.002220862777903676, -0.12123143672943115, 0.0, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.2266758680343628, 0.0, -0.025892257690429688, 0.0, -3.170956551912241e-05, -7.748603820800781e-06, -7.152555099310121e-07, -1.1444091796875e-05, -0.009944915771484375, -2.288818359375e-05, 0.0, -0.0023912398610264063, -0.00025617823121137917, -3.0517578125e-05, -7.62939453125e-06, -0.0001697540283203125, -0.009695053100585938, -3.814697265625e-06, -1.9073486328125e-06, -0.002771615982055664, -1.1920928244535389e-07, -5.7220458984375e-06, -0.00032806396484375, -0.009497642517089844, -1.9073486328125e-05, -0.0001544952392578125, -0.00456082820892334, -5.7220458984375e-05, 0.0, -0.000667572021484375, -3.4332275390625e-05, -0.005831718444824219, -3.814697265625e-06, -0.0006351470947265625, -0.0002899169921875, -0.0003032684326171875, -5.7220458984375e-06, -0.0015392301138490438, -0.00024378290981985629, -8.344646857949556e-07, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -0.0001277923583984375, 0.0, -0.3800392150878906, 0.0, -0.015153884887695312, 0.0, -0.00055694580078125, 0.0, -0.001708984375, -0.000133514404296875, -0.00033438202808611095, 0.0, -7.62939453125e-06, 0.0, -0.0005820869700983167, 0.0, -5.7220458984375e-06, -2.09808349609375e-05, -1.1444091796875e-05, 0.0, -0.0006504058837890625, -3.814697265625e-06, -1.71661376953125e-05, -1.1920565157197416e-07, 0.0, -5.7220458984375e-06, 0.0, -5.7220458984375e-06, -0.0003110166289843619, 0.0, -3.814697265625e-06, 0.0, -1.8596623704070225e-05, -1.025196434056852e-05], "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole6": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Minion"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}, {"n": 1, "_type": "Num"}]}}], "hole2": [{"_type": "Expr", "value": {"func": {"_type": "Template4"}, "_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"n": 1, "_type": "Num"}, {"_type": "Attribute", "attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Template9"}}], "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"_type": "Attribute", "attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}}}, {"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"_type": "List", "elts": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call", "args": [{"n": 1, "_type": "Num"}]}]}, {"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call", "args": [{"n": 2, "_type": "Num"}]}]}]}]}, {"_type": "Template6", "hole0": "SelfSelector"}, {"func": {"_type": "Name", "id": "GreaterThan"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Count"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "CardSelector"}, "_type": "Call", "keywords": [{"arg": "condition", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}}]}]}], "keywords": [{"arg": "value", "_type": "keyword", "value": {"n": 0, "_type": "Num"}}]}]}}]}}], "hole1": "MinionCard"}, "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(1)), Buff(ChangeHealth(2))]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.BEAST))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [47, 111, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 154, 56, 81, 18, 77, 27, 144, 43, 108, "Twilight", " ", "Whelp", "<EOS>", 42, 104, "1", "<EOS>", 32, 69, 23, 99, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 32, 69, 29, "COMMON", "<EOS>", 150, 131, "minion_type", "<EOS>", 15, 69, 23, 99, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 131, "battlecry", "<EOS>", 18, 76, 23, 99, "Battlecry", "<EOS>", 143, 35, 76, 23, 99, "Give", "<EOS>", 141, 38, 95, 142, 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Health", "<EOS>", 141, 42, 104, "1", "<EOS>", 35, 76, 23, 99, "Buff", "<EOS>", 141, 35, 76, 23, 99, "Change", "Health", "<EOS>", 141, 42, 104, "2", "<EOS>", 45, 121, "Self", "Selector", "<EOS>", 35, 77, 23, 99, "Greater", "Than", "<EOS>", 141, 35, 76, 23, 99, "Count", "<EOS>", 141, 35, 75, 23, 99, "Card", "Selector", "<EOS>", 149, 131, "condition", "<EOS>", 18, 76, 23, 99, "Is", "Type", "<EOS>", 141, 32, 69, 23, 99, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 149, 131, "value", "<EOS>", 25, 104, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 154, 61, 106, 18, 76, 23, 99, "Minion", "<EOS>", 142, 42, 104, "2", "<EOS>", 42, 104, "1", "<EOS>"]}]}
