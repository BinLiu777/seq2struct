{"gold_code": "class AssassinsBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "beams": [{"score": -2.0093317458304227, "choice_history": [59, 124, "<UNK>", "Blade", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 177, 68, 94, 34, 139, "<UNK>", " ", "Blade", " ", "Blade", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 177, 75, 143, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_weapon", "hole6": [{"hole1": 3, "hole2": 4, "_type": "Template8", "hole0": "Weapon"}], "hole2": [{"value": {"hole1": 5, "hole2": "SHAMAN", "hole3": "COMMON", "_type": "Template3", "hole0": "<UNK> Blade Blade"}, "_type": "Expr"}], "hole0": "<UNK>BladeBlade", "hole1": "WeaponCard", "_type": "Template0"}, "score_history": [-0.000270843505859375, -0.000125885009765625, -0.0005025863647460938, -0.01528002880513668, -0.440428227186203, -0.0014176041586324573, -0.05941056087613106, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.0517578125e-05, -1.9073486328125e-06, -0.0003223419189453125, -0.00167083740234375, -8.02278082119301e-05, -0.0003070831298828125, -0.028451204299926758, -0.5191259384155273, -5.6743483582977206e-05, -8.0108642578125e-05, -0.007938745431602001, 0.0, -0.5876814126968384, 0.0, -0.3312187194824219, 0.0, -0.002353668212890625, 0.0, -0.0001544952392578125, 0.0, -1.9073486328125e-06, -4.00543212890625e-05, -0.00107574462890625, -0.0019057807512581348, -1.9073486328125e-06, -0.00014971998461987823, 0.0, -0.009241222403943539, 0.0], "inferred_code": "class <UNK>BladeBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade Blade', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n"}]}
{"gold_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "beams": [{"score": -0.5789131544124402, "choice_history": [59, 124, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 34, 139, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "6", "<EOS>", "7", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 6, "hole2": 7, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"hole1": 6, "hole2": "ALL", "hole3": "FREE", "_type": "Template3", "hole0": "Boulderfist Ogre"}, "_type": "Expr"}], "hole0": "BoulderfistOgre", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-1.9073486328125e-06, -4.1961669921875e-05, -0.00012397686077747494, -0.00021610308613162488, -0.000251739751547575, -1.1918018572032452e-07, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -9.5367431640625e-06, 0.0, -0.4056663513183594, -3.814697265625e-06, -4.29153169534402e-06, -2.5272369384765625e-05, -2.1457672119140625e-06, -2.384185791015625e-06, -0.1024467945098877, -2.3841855067985307e-07, -0.0001500816288171336, -1.9073486328125e-06, -0.04945361614227295, 0.0, -7.987022399902344e-06, 0.0, -6.401538848876953e-05, 0.0, 0.0, 0.0, -0.013956069946289062, 0.0, 0.0, -0.006228089332580566, -1.1920928244535389e-07, -0.0002487896999809891, -1.9073486328125e-06], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n"}]}
{"gold_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.weapon.base_attack += 2\n        player.hero.change_temp_attack(2)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and player.weapon is not None\n", "beams": [{"score": -1.7414864647087072, "choice_history": [59, 126, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 34, 139, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 179, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 76, 146, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 164, 55, 76, 146, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 164, 55], "model_output": {"hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"hole1": "change_attack", "hole2": [{"_type": "Template17"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}}, {"hole1": "increase_health", "hole2": [{"_type": "Template17"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}}], "hole2": [{"value": {"hole1": 1, "hole2": "DRUID", "hole3": "FREE", "_type": "Template3", "hole0": "Deadly Poison"}, "_type": "Expr"}], "hole0": "DeadlyPoison", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-0.000202178955078125, -7.62939453125e-05, -3.576278118089249e-07, -4.8040190449682996e-05, -0.00010680816194508225, -0.00023695174604654312, -5.960462772236497e-07, -1.5497207641601562e-05, -9.5367431640625e-06, -3.0517578125e-05, -3.814697265625e-06, -0.0018596649169921875, -1.33514404296875e-05, -2.1576648578047752e-05, -9.822844003792852e-05, -1.1920928244535389e-07, -0.0002976235409732908, -1.8596632799017243e-05, 0.0, -0.09229183197021484, 0.0, -0.011346697807312012, 0.0, -0.0005686283111572266, 0.0, -0.00033915042877197266, 0.0, -0.00011444091796875, -7.62939453125e-06, -1.33514404296875e-05, -3.1590458092978224e-05, -1.537799835205078e-05, -0.010641098022460938, -2.09808349609375e-05, -7.62939453125e-06, -8.20159912109375e-05, -7.62939453125e-06, -5.876866998733021e-05, -3.24249267578125e-05, -1.9788742065429688e-05, 0.0, -0.000324249267578125, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -4.76837158203125e-05, 0.0, -5.7220458984375e-06, -4.76837158203125e-05, -0.062401771545410156, -5.7220458984375e-06, -6.4849853515625e-05, -4.38690185546875e-05, -4.9591064453125e-05, 0.0, -0.010997772216796875, -3.814697265625e-06, -0.000240325927734375, 0.0, -0.5896960496902466, 0.0, -7.62939453125e-06, -0.0002269744873046875, -0.0002765655517578125, -5.340576171875e-05, -3.62396240234375e-05, -3.814697265625e-06, -1.52587890625e-05, 0.0, -0.2788095474243164, -1.9073486328125e-06, -0.0003528594970703125, 0.0, -0.6787109375, 0.0, -2.288818359375e-05, -0.00035858154296875], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n"}]}
{"gold_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "beams": [{"score": -1.5406967224915604, "choice_history": [59, 124, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Fire", " ", "Elemental", "<EOS>", 48, 117, "6", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 52, 172, 154, "battlecry", "<EOS>", 19, 89, 24, 112, "Battlecry", "<EOS>", 165, 41, 89, 24, 112, "Damage", "<EOS>", 164, 57, 51, 130, "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "6", "<EOS>", "5", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 6, "hole2": 5, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Fire Elemental", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template11"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"args": [{"args": [{"_type": "Template19"}], "func": {"_type": "Name", "id": "Damage"}, "_type": "Call"}, {"_type": "Template10", "hole0": "HeroSelector"}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "FireElemental", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-1.9073486328125e-06, -5.53131103515625e-05, -0.004971523303538561, -0.00010692501382436603, -1.8715856640483253e-05, -3.575551090762019e-07, -2.6702880859375e-05, -4.768370445162873e-07, -3.814697265625e-06, -4.57763671875e-05, -5.14984130859375e-05, -2.288818359375e-05, -2.47955322265625e-05, -3.814697265625e-05, -2.6702880859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -2.3841855067985307e-07, -1.1563301086425781e-05, -1.3589840818895027e-05, 0.0, -5.7220458984375e-05, -1.9073486328125e-06, -4.5508379116654396e-05, -1.6689286894688848e-06, -0.000988006591796875, -0.000152587890625, -1.52587890625e-05, -1.9073486328125e-06, -5.53131103515625e-05, 0.0, -1.07742440700531, 0.0, -0.0001926422119140625, -0.0034732818603515625, 0.0, -0.012506484985351562, -1.9073486328125e-06, -0.000408172607421875, -3.814697265625e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.00018203258514404297, 0.0, -3.62396240234375e-05, -0.000354766845703125, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001354217529296875, -0.0041075944900512695, -2.4795384888420813e-05, -1.71661376953125e-05, -0.0058994293212890625, -0.4168663024902344, -1.9073486328125e-06, -0.00270652724429965, -0.0020487308502197266, 0.0, -9.799003601074219e-05, -5.7220458984375e-06, -5.7935030781663954e-05, 0.0, -4.9591064453125e-05, -9.1552734375e-05, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, -6.198883056640625e-06, -4.172316494077677e-06, -0.007187008857727051, -1.1205610462639015e-05], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n"}]}
{"gold_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "beams": [{"score": -0.49745469652196306, "choice_history": [59, 124, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Gnomish", " ", "Inventor", "<EOS>", 48, 117, "4", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 52, 172, 154, "battlecry", "<EOS>", 19, 89, 24, 112, "Battlecry", "<EOS>", 165, 51, 130, "Draw", "<EOS>", 51, 130, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "2", "<EOS>", "4", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": 4, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Gnomish Inventor", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"_type": "Template11"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"args": [{"_type": "Template10", "hole0": "Draw"}, {"_type": "Template10", "hole0": "PlayerSelector"}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "GnomishInventor", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-9.5367431640625e-06, -0.00014495849609375, -3.087478398811072e-05, -7.784063927829266e-05, -1.549711487314198e-05, 0.0, -7.748603820800781e-06, -5.960462203802308e-06, -2.09808349609375e-05, -1.9073486328125e-05, 0.0, -0.49005794525146484, -2.09808349609375e-05, -0.0002574920654296875, -2.288818359375e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.2755313036905136e-05, -7.843971252441406e-05, -1.311301275563892e-06, -1.1444091796875e-05, -5.7220458984375e-06, -3.814697265625e-06, -2.789497739286162e-05, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-05, 0.0, -2.622604142743512e-06, -1.3470649719238281e-05, -6.67572021484375e-05, -3.814697265625e-06, -0.0001373291015625, -0.0001964569091796875, -1.9073486328125e-06, -0.000423431396484375, 0.0, -5.7220458984375e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -5.1021124818362296e-05, -3.814697265625e-06, -8.7738037109375e-05, -0.002704620361328125, -1.9073486328125e-06, -0.0017836252227425575, -5.125993993715383e-06, -0.00014495849609375, -1.9073486328125e-06, -4.0650345908943564e-05, -0.0002536773681640625, 0.0, -3.898143404512666e-05, -1.9073486328125e-06, -0.00041691644582897425, 0.0, -1.52587890625e-05, -4.9591064453125e-05, -4.00543212890625e-05, -1.1919473763555288e-07, -1.1444091796875e-05, -1.5497195136049413e-06, -5.960462772236497e-07, -1.1920928244535389e-07, 0.0], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}]}
{"gold_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n", "beams": [{"score": -1.2733284597611316, "choice_history": [59, 126, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 34, 139, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 179, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 76, 146, 16, 82, 24, 112, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", 164, 55, 76, 146, 16, 82, 24, 112, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", 164, 55], "model_output": {"hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"hole1": "change_temp_attack", "hole2": [{"_type": "Template17"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "player"}, "attr": "hero", "_type": "Attribute"}}, {"hole1": "change_temp_attack", "hole2": [{"_type": "Template17"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "player"}, "attr": "hero", "_type": "Attribute"}}], "hole2": [{"value": {"hole1": 2, "hole2": "DRUID", "hole3": "FREE", "_type": "Template3", "hole0": "Heroic Strike"}, "_type": "Expr"}], "hole0": "HeroicStrike", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-3.62396240234375e-05, -7.05718994140625e-05, -7.152531907195225e-06, -0.0005448763840831816, -0.000792374718002975, -1.8554506823420525e-05, -4.768371127283899e-06, -1.0371208190917969e-05, -3.814697265625e-06, -4.57763671875e-05, -9.34600830078125e-05, -0.000598907470703125, -5.91278076171875e-05, -5.638440416078083e-05, -0.00022792816162109375, -2.3841855067985307e-07, -0.00010693073272705078, -2.8132995794294402e-05, -1.1444091796875e-05, -0.2361621856689453, 0.0, -0.01375877857208252, 0.0, -1.1563301086425781e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -0.0004329681396484375, -2.288818359375e-05, -0.0001163482666015625, -1.6808508007670753e-05, -0.0005418062210083008, -0.4081916809082031, -2.86102294921875e-05, -3.4332275390625e-05, -0.0003261566162109375, -1.33514404296875e-05, -2.0623123418772593e-05, -0.0002765655517578125, -7.474422454833984e-05, 0.0, -0.0009860992431640625, -4.57763671875e-05, -3.814697265625e-06, -2.09808349609375e-05, 0.0, -0.0004405975341796875, 0.0, -9.5367431640625e-06, -2.09808349609375e-05, -0.02515697479248047, -3.814697265625e-06, -0.0001220703125, -2.6702880859375e-05, -7.2479248046875e-05, 0.0, -0.0047550201416015625, 0.0, -0.0082169771194458, 0.0, -0.0031970739364624023, -0.00027370452880859375, -5.7220458984375e-06, -0.09414863586425781, -7.43865966796875e-05, -5.7220458984375e-06, -0.0007457733154296875, -0.0001239776611328125, -7.62939453125e-06, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.03252601623535156, -1.9073486328125e-06, -0.39353954792022705, -0.0020895004272460938, -1.33514404296875e-05, -0.04362297058105469], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.change_temp_attack(2)\n"}]}
{"gold_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "beams": [{"score": -0.691315546859613, "choice_history": [59, 124, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 34, 139, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "8", "<EOS>", "8", "<EOS>", 172, 154, "taunt", "<EOS>", 25, 113, "True", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 8, "hole2": 8, "hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "taunt", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"hole1": 8, "hole2": "SHAMAN", "hole3": "COMMON", "_type": "Template3", "hole0": "Ironbark Protector"}, "_type": "Expr"}], "hole0": "IronbarkProtector", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-3.814697265625e-06, -0.00023651123046875, -0.0004068977141287178, -8.582700684200972e-05, -3.4570680327306036e-06, -3.5762059269472957e-07, -2.3841855067985307e-07, -1.1801719665527344e-05, -1.9073486328125e-06, -3.24249267578125e-05, -2.288818359375e-05, -6.67572021484375e-05, -0.00012969970703125, -4.529942543740617e-06, -1.728534698486328e-05, -2.2649765014648438e-06, -7.05718994140625e-05, -1.118965883506462e-05, 0.0, -0.6861177682876587, -1.9073486328125e-06, -0.0002727508544921875, 0.0, -5.841255187988281e-06, 0.0, -0.0006078471196815372, 0.0, 0.0, -1.33514404296875e-05, -0.0019006729125976562, 0.0, -9.536738616588991e-07, -2.2649765014648438e-06, 0.0, -7.247873145388439e-05, 0.0, -0.00016021728515625, -5.7220458984375e-06, -0.0008736848831176758, -1.71661376953125e-05, -8.58306884765625e-05, -3.0517578125e-05, -3.24249267578125e-05, -5.7220458984375e-06], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n"}]}
{"gold_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.taunt = True\n", "beams": [{"score": -3.4096434800737825, "choice_history": [59, 126, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 55, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 38, 82, 29, "FREE", "<EOS>", 172, 154, "target_func", "<EOS>", 16, 82, 16, 82, 24, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 180, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 76, 146, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 164, 55, 76, 146, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 164, 48, 117, "4", "<EOS>", 76, 146, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 164, 55], "model_output": {"hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"hole1": "change_attack", "hole2": [{"_type": "Template17"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}}, {"hole1": "increase_health", "hole2": [{"n": 4, "_type": "Num"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}}, {"hole1": "increase_health", "hole2": [{"_type": "Template17"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}}], "hole2": [{"value": {"args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template17"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PRIEST", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "FREE", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "MarkOfTheWild", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-0.00011444091796875, -0.0012760162353515625, -0.0007506189867854118, -0.0036063131410628557, -0.001134075690060854, -0.0071913860738277435, -8.130060450639576e-05, -0.001004837453365326, -1.9431114196777344e-05, -2.622604142743512e-06, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -1.71661376953125e-05, -0.00011444091796875, -2.6702880859375e-05, -0.00014495849609375, 0.0, -1.1444091796875e-05, -0.0001012035645544529, -8.058547973632812e-05, -0.0006174726877361536, -0.0005745887756347656, -0.0011174639221280813, -0.004234907682985067, -0.06794442981481552, -0.0005284547805786133, -0.3555259704589844, -0.000270843505859375, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -3.457069396972656e-05, -0.020113825798034668, -0.18651306629180908, -1.9073486328125e-06, -0.07280349731445312, 0.0, -2.6702880859375e-05, -0.004010558128356934, -1.9073486328125e-06, -0.0050678253173828125, -1.52587890625e-05, -0.0024682283401489258, -2.288818359375e-05, -6.67572021484375e-05, -4.38690185546875e-05, -4.9591064453125e-05, -5.7220458984375e-06, -0.000110626220703125, -1.9073486328125e-06, -0.001049041748046875, -5.91278076171875e-05, -0.0003719329833984375, 0.0, -0.0023540258407592773, 0.0, -5.173683166503906e-05, 0.0, -0.0001474618911743164, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -9.655952453613281e-06, -0.0003414154052734375, -0.5771865844726562, -0.0005016326904296875, -1.1444091796875e-05, -1.52587890625e-05, -9.5367431640625e-06, -0.000892964075319469, -0.0003681182861328125, -9.512901306152344e-05, 0.0, -3.0517578125e-05, -3.4332275390625e-05, 0.0, -0.000278472900390625, 0.0, -5.53131103515625e-05, 0.0, -2.384185791015625e-06, -1.9073486328125e-06, -0.02743244171142578, -1.1444091796875e-05, -0.0002689361572265625, 0.0, -1.1444091796875e-05, 0.0, -0.00014984607696533203, -2.09808349609375e-05, -0.0003871917724609375, 0.0, -0.3049309253692627, 0.0, -1.9073486328125e-06, -0.17191123962402344, -0.006786346435546875, -7.62939453125e-06, -0.27885913848876953, 0.0, -3.814697265625e-06, 0.0, -0.000331878662109375, -3.24249267578125e-05, -0.0003681182861328125, 0.0, -0.2163400650024414, 0.0, -3.814697265625e-06, -0.2432727813720703, 0.0, -0.005872869864106178, 0.0, -0.003940582275390625, -1.1444091796875e-05, -0.0035877227783203125, 0.0, 0.0, 0.0, -0.0016309022903442383, -6.29425048828125e-05, -0.00046539306640625, 0.0, -0.23012495040893555, 0.0, -1.9073486328125e-06, -0.5910234451293945], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(4)\n        self.target.increase_health(2)\n"}]}
{"gold_code": "class MultiShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            target = game.random_choice(targets)\n            targets.remove(target)\n            target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "beams": [{"score": -3.052765732525586, "choice_history": [59, 127, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 34, 139, "Multi-Shot", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 178, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 69, 95, 24, 112, "i", "<EOS>", 19, 89, 24, 112, "range", "<EOS>", 165, 48, 117, "0", "<EOS>", 55, 179, 64, 81, 164, 46, 112, "minion", "<EOS>", 19, 89, 16, 82, 24, 112, "game", "<EOS>", "random_choice", "<EOS>", 164, 46, 112, "minions", "<EOS>", 76, 146, 24, 112, "minions", "<EOS>", "remove", "<EOS>", 164, 46, 112, "minion", "<EOS>", 76, 146, 24, 112, "minion", "<EOS>", "damage", "<EOS>", 165, 41, 89, 16, 82, 24, 112, "player", "<EOS>", "effective_spell_damage", "<EOS>", 164, 57, 46, 112, "self", "<EOS>", 177, 70, 96, "can_use", "<EOS>", 4, 152, 160, 0, 1, 151, "player", "<EOS>", 1, 151, "game", "<EOS>", 177, 73, 119, 18, 85, 5, 165, 41, 89, 16, 82, 28, 130, "super", "<EOS>", "can_use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 42, 92, 19, 89, 24, 112, "len", "<EOS>", 164, 38, 82, 16, 82, 24, 112, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 161, 9, 164, 55], "model_output": {"hole7": [{"name": "can_use", "args": {"args": [{"_type": "Template12"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"value": {"_type": "BoolOp", "values": [{"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "func": {"value": {"_type": "Template10", "hole0": "super"}, "attr": "can_use", "_type": "Attribute"}, "_type": "Call"}, {"ops": [{"_type": "GtE"}], "left": {"args": [{"value": {"value": {"_type": "Name", "id": "game"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "func": {"_type": "Name", "id": "len"}, "_type": "Call"}, "_type": "Compare", "comparators": [{"_type": "Template17"}]}], "op": {"_type": "And"}}, "_type": "Return"}]}], "hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"target": {"_type": "Name", "id": "i"}, "iter": {"args": [{"n": 0, "_type": "Num"}, {"_type": "Template17"}], "func": {"_type": "Name", "id": "range"}, "_type": "Call"}, "_type": "For", "body": [{"value": {"args": [{"_type": "Name", "id": "minions"}], "func": {"value": {"_type": "Name", "id": "game"}, "attr": "random_choice", "_type": "Attribute"}, "_type": "Call"}, "_type": "Assign", "targets": [{"_type": "Name", "id": "minion"}]}, {"hole1": "remove", "hole2": [{"_type": "Name", "id": "minion"}], "_type": "Template9", "hole0": {"_type": "Name", "id": "minions"}}, {"hole1": "damage", "hole2": [{"args": [{"_type": "Template19"}], "func": {"value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "_type": "Call"}, {"_type": "Name", "id": "self"}], "_type": "Template9", "hole0": {"_type": "Name", "id": "minion"}}]}], "hole2": [{"value": {"hole1": 4, "hole2": "MAGE", "hole3": "COMMON", "_type": "Template3", "hole0": "Multi-Shot"}, "_type": "Expr"}], "hole0": "Multi-Shot", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-0.0016183853149414062, -0.06723785400390625, -0.00023029703879728913, -5.364416665543104e-06, -0.003191661322489381, -1.1086458471254446e-05, -0.0005627870559692383, -1.1444091796875e-05, -6.67572021484375e-05, -4.1961669921875e-05, -0.0011310577392578125, -0.0001392364501953125, -0.00036311126314103603, -1.7165990357170813e-05, -2.169585604860913e-05, 0.0, -0.9635646343231201, 0.0, -0.22243690490722656, 0.0, -0.0003604888916015625, 0.0, -0.000286102294921875, 0.0, -4.1961669921875e-05, -2.6702880859375e-05, -0.00014495849609375, -1.3470642443280667e-05, -4.410743713378906e-05, -0.7290410995483398, -0.002208709716796875, -1.1444091796875e-05, -0.0016002655029296875, -1.9073486328125e-06, -2.9087066650390625e-05, 0.0, -6.21080253040418e-05, 0.0, -4.38690185546875e-05, -0.000225067138671875, 0.0, -6.866455078125e-05, 0.0, -4.1961669921875e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.11288833618164062, -2.6702880859375e-05, -9.5367431640625e-06, 0.0, -0.020732402801513672, -1.52587890625e-05, -0.000705718994140625, 0.0, -2.6702880859375e-05, 0.0, -0.0025650260504335165, -0.000316619873046875, -0.000133514404296875, -0.0001621246337890625, -1.9073486328125e-05, -0.0005257674492895603, -2.384185791015625e-06, -0.014090538024902344, -0.08109760284423828, -0.030914306640625, -0.000244140625, -5.340576171875e-05, -3.4332275390625e-05, -0.000293731689453125, -0.0519181489944458, -1.0132738680113107e-05, -0.0025205612182617188, -3.24249267578125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0006885528564453125, 0.0, -3.325939178466797e-05, -9.1552734375e-05, -0.004090070724487305, -8.785724639892578e-05, -0.004169464111328125, -0.0010023117065429688, -0.0005016326904296875, -0.2969127893447876, -3.814697265625e-06, -0.0037708282470703125, -0.0006685256958007812, -3.62396240234375e-05, 0.0, -0.024321436882019043, -7.62939453125e-06, -0.08740589767694473, -4.768367489305092e-06, -0.000186920166015625, -0.0031280517578125, -7.62939453125e-06, -0.16571366786956787, -0.0002213471452705562, -0.0021419525146484375, -0.00019073486328125, -7.82012939453125e-05, 0.0, -0.008393526077270508, -0.0003368293691892177, -5.3285304602468386e-05, -3.397406908334233e-05, -3.0517578125e-05, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -3.814697265625e-06, -0.002685546875, 0.0, -0.0032939910888671875, 0.0, -0.0009747743606567383, 0.0, -2.6702880859375e-05, -0.017678260803222656, -0.0007381439208984375, -3.814697265625e-06, -0.00413823127746582, -2.4437820684397593e-05, -0.00051116943359375, -0.0007076263427734375, -7.05718994140625e-05, -0.016295790672302246, -1.9073486328125e-06, -5.91278076171875e-05, -3.62396240234375e-05, -0.00104522705078125, -0.00060272216796875, -5.340576171875e-05, -0.0001201629638671875, -0.00024294696049764752, 0.0, -1.9073486328125e-05, -0.0001468658447265625, -0.001349928672425449, -6.079673767089844e-06, -2.288818359375e-05, -0.000308990478515625, -0.000560760498046875, -0.00037384033203125, -0.0001373291015625, -0.002552032470703125, -0.000133514404296875, -1.33514404296875e-05, -1.1444091796875e-05, -0.0007190704345703125, -9.5367431640625e-06, -0.000125885009765625, 0.0, -7.867813110351562e-06, -1.52587890625e-05, -0.0005397796630859375, -1.33514404296875e-05, -3.814697265625e-06, -0.0070743560791015625, 0.0, -4.1961669921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -9.5367431640625e-06, -1.1444091796875e-05, -5.7220458984375e-06, -0.0016384124755859375, -5.7220458984375e-05, -0.0008554458618164062, -1.9073486328125e-06, -9.918212890625e-05, 0.0, -0.0005515813827514648, -0.0002803802490234375, -0.0003833770751953125, -0.0002422332763671875, -3.814697265625e-06, -0.0001544952392578125, 0.0, -1.33514404296875e-05, 0.0, -3.24249267578125e-05, -0.0001983642578125, -0.0005308389663696289, -3.814697265625e-06, -7.796284626238048e-05, -0.0002079010009765625, -0.0003261566162109375, -0.012697219848632812, -0.0004749298095703125, -0.05175209045410156], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n"}]}
{"gold_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word: Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(2)\n        player.draw()\n", "beams": [{"score": -2.006983524478123, "choice_history": [59, 126, "Power", "Word", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Power", " ", "Word", " ", "Shield", "<EOS>", 56, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 38, 82, 29, "FREE", "<EOS>", 172, 154, "target_func", "<EOS>", 16, 82, 16, 82, 24, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 179, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 76, 146, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 164, 55, 76, 146, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 164, 41, 89, 24, 112, "Buff", "<EOS>", 164, 51, 130, "<UNK>", "<EOS>"], "model_output": {"hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"hole1": "change_attack", "hole2": [{"_type": "Template17"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}}, {"hole1": "add_buff", "hole2": [{"args": [{"_type": "Template10", "hole0": "<UNK>"}], "func": {"_type": "Name", "id": "Buff"}, "_type": "Call"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}}], "hole2": [{"value": {"args": [{"s": "Power Word Shield", "_type": "Str"}, {"_type": "Template18"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "FREE", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "PowerWordShield", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-1.9073486328125e-06, -0.000171661376953125, -6.5565000113565475e-06, -0.004193343687802553, -0.07051244378089905, -6.914134246471804e-06, -0.0003572385758161545, -1.9073486328125e-06, -3.576278118089249e-07, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.0011844635009765625, -4.76837158203125e-05, -0.00020599365234375, -8.96453857421875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.0035567341838032007, -7.641315460205078e-05, -0.0066494932398200035, -0.007649779319763184, -0.0018059015274047852, -1.9073486328125e-06, -0.0002841949462890625, -0.000171661376953125, 0.0, -7.62939453125e-06, 0.0, -5.841255187988281e-06, -8.344646857949556e-07, -0.45853614807128906, -1.1920928244535389e-07, -0.0028858184814453125, 0.0, -0.0006809234619140625, -0.0003935098648071289, 0.0, -0.016275405883789062, 0.0, -0.000209808349609375, -1.9073486328125e-06, -0.000621795654296875, -6.866455078125e-05, -0.0027980804443359375, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0004405975341796875, -7.62939453125e-06, -6.4849853515625e-05, 0.0, -0.15874946117401123, 0.0, -3.3140171581180766e-05, 0.0, -8.428037108387798e-05, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, -4.291534423828125e-06, -2.47955322265625e-05, -0.23095226287841797, -2.47955322265625e-05, -1.33514404296875e-05, -7.62939453125e-06, 0.0, -3.9577233110321686e-05, -6.67572021484375e-05, -3.933906555175781e-06, 0.0, -4.76837158203125e-05, -1.1444091796875e-05, 0.0, -1.71661376953125e-05, 0.0, -6.29425048828125e-05, 0.0, -1.9073486328125e-06, -8.7738037109375e-05, -0.009335517883300781, -3.24249267578125e-05, -1.71661376953125e-05, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00010013580322265625, -1.9073486328125e-06, -0.0001220703125, 0.0, -0.0058502512983977795, 0.0, -1.9073486328125e-06, -0.0076351165771484375, -3.24249267578125e-05, -0.0061931610107421875, -5.340576171875e-05, 0.0, -1.9073486328125e-06, 0.0, -0.0001926422119140625, -1.1444091796875e-05, -0.0004444122314453125, 0.0, -0.48159146308898926, -2.1457672119140625e-06, -1.33514404296875e-05, -3.24249267578125e-05, -0.0002346038818359375, -1.9073486328125e-06, 0.0, -0.06378042697906494, -0.0007865428924560547, -0.000133514404296875, -0.008710861206054688, -1.33514404296875e-05, -0.2496190369129181, -0.20176422595977783], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.add_buff(Buff(<UNK>()))\n"}]}
{"gold_code": "class SenjinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "beams": [{"score": -0.41749192648910594, "choice_history": [59, 124, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 34, 139, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "3", "<EOS>", "5", "<EOS>", 172, 154, "taunt", "<EOS>", 25, 113, "True", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": 5, "hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "taunt", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"hole1": 4, "hole2": "ALL", "hole3": "COMMON", "_type": "Template3", "hole0": "Sen'jin Shieldmasta"}, "_type": "Expr"}], "hole0": "Sen'jinShieldmasta", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-3.4332275390625e-05, -4.38690185546875e-05, -0.00013779645087197423, -0.00034171465085819364, -5.006777428206988e-06, -1.1920838005607948e-07, -5.483625955093885e-06, -2.34842264035251e-05, -1.9073486328125e-06, -0.0001220703125, -1.71661376953125e-05, -0.0005359649658203125, -3.62396240234375e-05, -3.933898824470816e-06, -2.491474151611328e-05, -7.152555099310121e-07, -3.814697265625e-06, -5.161663284525275e-05, 0.0, -5.161762237548828e-05, -1.9073486328125e-06, -0.41086483001708984, 0.0, -3.814697265625e-06, 0.0, -0.0004886388778686523, 0.0, -1.9073486328125e-06, -6.4849853515625e-05, -0.0007343292236328125, 0.0, -2.145764938177308e-06, -0.0009084939956665039, -2.145764938177308e-06, -0.0006539454916492105, -8.344646857949556e-07, -0.00037384033203125, -7.62939453125e-06, -0.0018302202224731445, -1.9073486328125e-06, -2.288818359375e-05, -1.9073486328125e-05, -6.4849853515625e-05, -1.9073486328125e-06], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n"}]}
{"gold_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "beams": [{"score": -0.45742018375147353, "choice_history": [59, 126, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 34, 139, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 178, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 76, 146, 16, 82, 16, 82, 24, 112, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 165, 41, 89, 16, 82, 24, 112, "player", "<EOS>", "effective_spell_damage", "<EOS>", 164, 57, 46, 112, "self", "<EOS>"], "model_output": {"hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"hole1": "damage", "hole2": [{"args": [{"_type": "Template19"}], "func": {"value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "_type": "Call"}, {"_type": "Name", "id": "self"}], "_type": "Template9", "hole0": {"value": {"value": {"_type": "Name", "id": "game"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}}], "hole2": [{"value": {"hole1": 1, "hole2": "PRIEST", "hole3": "FREE", "_type": "Template3", "hole0": "Sinister Strike"}, "_type": "Expr"}], "hole0": "SinisterStrike", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-4.1961669921875e-05, -0.0002574920654296875, -1.0728830375228426e-06, -0.00010656742961145937, -1.2040087312925607e-05, -1.430495103704743e-06, -1.2040087312925607e-05, -3.4570680327306036e-06, -1.1444091796875e-05, -1.71661376953125e-05, -6.67572021484375e-05, -0.05020618438720703, -7.62939453125e-06, -2.9802276912960224e-06, -0.00018513202667236328, 0.0, -5.7220458984375e-06, -7.748603820800781e-06, -5.960462772236497e-07, -0.3019150495529175, -1.1920928244535389e-07, -0.010908006690442562, 0.0, -0.0004578828811645508, -1.9073486328125e-06, -9.286402928410098e-05, -3.814697265625e-06, -5.14984130859375e-05, -0.000148773193359375, -3.814697265625e-06, -3.266334533691406e-05, -0.0005588531494140625, -0.007288932800292969, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -0.00010728300549089909, -9.5367431640625e-06, -0.0001377988955937326, 0.0, -5.7220458984375e-06, -0.0004062652587890625, -1.9073486328125e-06, -0.000202178955078125, 0.0, -5.91278076171875e-05, 0.0, -3.4332275390625e-05, -1.1444091796875e-05, -0.017675399780273438, -3.814697265625e-06, -0.0001506805419921875, -0.008148193359375, -0.02209758758544922, -1.33514404296875e-05, -0.00037384033203125, 0.0, -0.0032558441162109375, -7.62939453125e-06, -0.004452705383300781, 0.0, -0.0036716251634061337, -1.0490406566532329e-05, -9.214517194777727e-05, -6.997340824455023e-05, -9.5367431640625e-06, -3.4332275390625e-05, -3.4332275390625e-05, -1.52587890625e-05, 0.0, -0.006420135498046875, 0.0, -0.007600903511047363, -1.9073486328125e-06, -0.0005124807357788086, -2.741813204920618e-06, -4.57763671875e-05, -0.008923530578613281, -5.7220458984375e-05, -3.4332275390625e-05, -0.0002321004867553711, -5.4597850976279005e-05], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n"}]}
{"gold_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"score": -2.0322956691095158, "choice_history": [59, 124, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Succubus", "<EOS>", 55, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 38, 82, 29, "FREE", "<EOS>", 173, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", 154, "battlecry", "<EOS>", 19, 89, 24, 112, "Battlecry", "<EOS>", 165, 51, 130, "Discard", "<EOS>", 41, 89, 24, 112, "Player", "Selector", "<EOS>", 164, 51, 130, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "4", "<EOS>", "3", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": 3, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Succubus", "_type": "Str"}, {"_type": "Template17"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "FREE", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "<UNK>", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}, {"value": {"args": [{"_type": "Template10", "hole0": "Discard"}, {"args": [{"_type": "Template10", "hole0": "EnemyPlayer"}], "func": {"_type": "Name", "id": "PlayerSelector"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "Succubus", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-1.9073486328125e-06, -0.000247955322265625, -0.0009675204055383801, -2.1457672119140625e-06, -1.1920883480343036e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.288818359375e-05, -3.814697265625e-06, -2.47955322265625e-05, -2.09808349609375e-05, -3.0517578125e-05, -3.0517578125e-05, -7.62939453125e-06, -1.9073486328125e-06, -2.145764938177308e-06, -3.933906555175781e-06, -2.288818359375e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -7.152555099310121e-07, 0.0, -0.6113109588623047, 0.0, -0.001094818115234375, -3.814697265625e-05, -3.4332275390625e-05, -0.0016176700592041016, -1.9073486328125e-06, -0.0029201507568359375, -0.0004901885986328125, -0.004458427429199219, 0.0, -8.392333984375e-05, 0.0, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.5569812059402466, -1.9073486328125e-06, -1.9073486328125e-06, -0.00038421154022216797, 0.0, -0.022751808166503906, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -8.273124694824219e-05, -2.86102294921875e-05, -1.9073486328125e-06, -0.007944107055664062, -3.814697265625e-06, -0.25854426622390747, -0.11320975422859192, -0.11020088195800781, -0.22630691528320312, -1.9073486328125e-06, -1.33514404296875e-05, -0.10758679360151291, -6.127357482910156e-05, 0.0, -5.7220458984375e-06, -2.6702880859375e-05, -5.7220458984375e-06, -0.0002835988998413086, 0.0, 0.0, -1.9073486328125e-05, 0.0, -0.003938794136047363, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.094668500125408e-06, -3.814697265625e-06, -3.790724804275669e-05, 0.0, -0.0003558900789357722, 0.0], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.<UNK>, battlecry=Battlecry(\n            Discard(), PlayerSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}]}
{"gold_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "beams": [{"score": -0.07967438074047095, "choice_history": [59, 124, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 34, 139, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "7", "<EOS>", "7", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 7, "hole2": 7, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"hole1": 7, "hole2": "ALL", "hole3": "COMMON", "_type": "Template3", "hole0": "War Golem"}, "_type": "Expr"}], "hole0": "WarGolem", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-1.9073486328125e-06, -0.0003108978271484375, -0.00038378025055862963, -0.0003953390696551651, -5.149768549017608e-05, -4.7676439862698317e-07, -1.9073486328125e-06, -2.0265579223632812e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.00074005126953125, -7.62939453125e-06, -2.264974000354414e-06, -5.7697296142578125e-05, -7.152555099310121e-07, -9.179114385915454e-06, -9.012917871586978e-05, 0.0, -0.00016081052308436483, 0.0, -0.0007251499337144196, 0.0, -3.266334533691406e-05, 0.0, -6.878376007080078e-05, 0.0, 0.0, 0.0, -0.07478046417236328, -1.5494588296860456e-06, -5.7220458984375e-06, -0.0015763724222779274, -3.814697265625e-06, -0.0002292187709826976, -1.9073486328125e-06], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n"}]}
{"gold_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(\n            MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(),\n            TargetSelector())])])\n", "beams": [{"score": -1.7931801916158463, "choice_history": [59, 124, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Acidmaw", "<EOS>", 48, 117, "7", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 38, 82, 29, "LEGENDARY", "<EOS>", 172, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 172, 154, "effects", "<EOS>", 22, 108, 164, 41, 89, 24, 112, "Effect", "<EOS>", 165, 51, 130, "Damaged", "<EOS>", 41, 89, 24, 112, "Action", "Tag", "<EOS>", 165, 41, 89, 24, 112, "Heal", "<EOS>", 164, 48, 117, "2", "<EOS>", 51, 130, "Hero", "Selector", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": 2, "hole3": [{"value": {"elts": [{"args": [{"_type": "Template10", "hole0": "Damaged"}, {"args": [{"args": [{"n": 2, "_type": "Num"}], "func": {"_type": "Name", "id": "Heal"}, "_type": "Call"}, {"_type": "Template10", "hole0": "HeroSelector"}], "func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Effect"}, "_type": "Call"}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Acidmaw", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "LEGENDARY", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "Acidmaw", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-7.62939453125e-06, -0.000370025634765625, -0.005354349501430988, -6.878374551888555e-05, -1.8711216398514807e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -4.00543212890625e-05, -1.9073486328125e-06, -8.392333984375e-05, -1.1444091796875e-05, -2.86102294921875e-05, -0.00135040283203125, -4.76837158203125e-05, -0.0001277923583984375, -4.386805812828243e-05, -1.9073486328125e-06, -0.0036449432373046875, -3.24249267578125e-05, -0.06578528881072998, -5.006789251638111e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -4.398822784423828e-05, -4.00543212890625e-05, -0.002239227294921875, 0.0, -1.33514404296875e-05, 0.0, -7.62939453125e-05, -0.0091705322265625, -1.9073486328125e-06, -0.0001430511474609375, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -5.7220458984375e-06, 0.0, -4.38690185546875e-05, -0.000209808349609375, -0.0013332366943359375, 0.0, -1.7404556274414062e-05, 0.0, -0.002215927466750145, 0.0, -0.0006809234619140625, -1.33514404296875e-05, -0.001026153564453125, 0.0, -2.3841855067985307e-07, 0.0, -3.2186455882765586e-06, -7.319450378417969e-05, -1.740443622111343e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.00016307830810546875, 0.0, -5.7220458984375e-06, -2.09808349609375e-05, -0.0020580291748046875, -1.9073486328125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -0.0001418590545654297, -1.2040138244628906e-05, -3.24249267578125e-05, -0.31133174896240234, 0.0, -0.004518321715295315, -3.8266178307821974e-05, -0.000102996826171875, 0.0, -1.1444091796875e-05, 0.0, -9.250460425391793e-05, -0.001575469970703125, 0.0, -5.53131103515625e-05, -0.24637413024902344, -0.000408172607421875, -5.7220458984375e-06, 0.0, -0.6429685354232788, -2.539145316404756e-05, -1.9073486328125e-06, -0.002048492431640625, -4.00543212890625e-05, -0.46490421891212463, -1.728529969113879e-05, -0.01041412353515625, 0.0, -0.010622620582580566, -0.00046193599700927734, 0.0], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Heal(2),\n            HeroSelector()))])\n"}]}
{"gold_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"score": -1.3142930103385808, "choice_history": [59, 124, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 168, 49, 121, "Boar", "<EOS>", 57, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 52, 47, 113, "False", "<EOS>", 172, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 172, 154, "charge", "<EOS>", 25, 113, "True", "<EOS>"], "model_output": {"hole4": "p", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": 2, "hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "charge", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template19"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"_type": "Template11"}, {"value": true, "_type": "NameConstant"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "Boar", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -0.00010775939153973013, -0.005528934299945831, -4.291401637601666e-06, -1.9073486328125e-06, -0.00016248224710579962, 0.0, -8.20159912109375e-05, -3.814697265625e-06, -0.31392765045166016, -0.03436088562011719, -0.001544952392578125, -0.005123138427734375, -4.57763671875e-05, -9.5367431640625e-06, -3.933904736186378e-06, -3.814689989667386e-06, -0.05517387390136719, 0.0, 0.0, 0.0, 0.0, -0.00011110305786132812, -7.62939453125e-06, -0.0004730224609375, 0.0, -0.6625204086303711, -3.814697265625e-06, -5.7220458984375e-06, -9.572505950927734e-05, -7.62939453125e-06, -0.0008678436279296875, -2.09808349609375e-05, -4.208087921142578e-05, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -5.340576171875e-05, -4.38690185546875e-05, -0.0018329620361328125, -3.0517578125e-05, -2.09808349609375e-05, 0.0, -0.21421867609024048, -1.1563301086425781e-05, -0.000148773193359375, -0.0028047561645507812, -0.004096031188964844, 0.0, -4.0531158447265625e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -0.00041322092874906957, 0.0, -3.62396240234375e-05, 0.0, -0.009118318557739258, 0.0, -3.4332275390625e-05, -1.71661376953125e-05, -0.0010585784912109375, 0.0], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n"}]}
{"gold_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[\n            Choice(AttackMode(), Give([Buff(ChangeAttack(1))]),\n            SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))\n            ]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "beams": [{"score": -0.9432288176274923, "choice_history": [59, 124, "Anodized", "Robo", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Anodized", " ", "Robo", "<EOS>", 55, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 52, 172, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 172, 154, "taunt", "<EOS>", 25, 113, "True", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": 2, "hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "taunt", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Anodized Robo", "_type": "Str"}, {"_type": "Template17"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template11"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "AnodizedRobo", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [0.0, -3.0517578125e-05, -8.451581379631534e-05, -0.06159114092588425, -0.03567550331354141, 0.0, -3.933906555175781e-06, -4.053113570989808e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.018253326416015625, -5.14984130859375e-05, -7.62939453125e-06, -2.288818359375e-05, -1.33514404296875e-05, -1.33514404296875e-05, -0.006731043104082346, -0.00013554096221923828, -0.01676942966878414, -0.033621788024902344, -0.000293731689453125, -0.0003261566162109375, 0.0, -9.5367431640625e-06, 0.0, -2.3841855067985307e-07, -1.9073468138230965e-06, -0.3479909896850586, -1.9073486328125e-06, -7.05718994140625e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.00010752677917480469, -8.344646857949556e-07, -7.05718994140625e-05, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -7.2479248046875e-05, -5.7220458984375e-06, -0.11938679218292236, 0.0, -0.0001850128173828125, 0.0, -0.2964416742324829, 0.0, -6.29425048828125e-05, -5.7220458984375e-06, -0.0001087188720703125, 0.0, -1.0013530300057027e-05, 0.0, -1.1920922133867862e-06, -0.00021670245041605085, -9.536738616588991e-07, -0.00035858154296875, -1.9073486328125e-06, -0.003985166549682617, -1.1920928244535389e-07, -3.62396240234375e-05, -7.62939453125e-06, -0.000415802001953125, 0.0], "inferred_code": "class AnodizedRobo(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}]}
{"gold_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(\n            Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard\n            (query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)),\n            PlayerSelector())), Effect(Drawn(), ActionTag(Draw(),\n            PlayerSelector()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n", "beams": [{"score": -22.54735302814281, "choice_history": [59, 126, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 34, 139, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 182, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 64, 81, 164, 46, 112, "option", "<EOS>", 19, 89, 16, 82, 16, 82, 24, 112, "player", "<EOS>", "agent", "<EOS>", "choose_option", "<EOS>", 165, 44, 108, 165, 51, 130, "<UNK>", "<EOS>", 51, 130, "<UNK>", "<EOS>", 46, 112, "player", "<EOS>", 64, 81, 164, 46, 112, "<UNK>", "<EOS>", 16, 82, 16, 82, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "divine_shield", "<EOS>", "<UNK>", "<EOS>", 64, 81, 164, 46, 112, "option", "<EOS>", 19, 89, 16, 82, 16, 82, 16, 82, 24, 112, "player", "<EOS>", "game", "<EOS>", "random_choice", "<EOS>", "choose_option", "<EOS>", 165, 44, 108, 165, 51, 130, "<UNK>", "<EOS>", 51, 130, "<UNK>", "<EOS>", 46, 112, "player", "<EOS>", 64, 81, 164, 46, 112, "<UNK>", "<EOS>", 16, 82, 16, 82, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "divine_shield", "<EOS>", "<UNK>", "<EOS>", 64, 81, 164, 46, 112, "option", "<EOS>", 19, 89, 16, 82, 16, 82, 16, 82, 24, 112, "player", "<EOS>", "game", "<EOS>", "random_choice", "<EOS>", "choose_option", "<EOS>", 165, 44, 108, 165, 51, 130, "<UNK>", "<EOS>", 51, 130, "<UNK>", "<EOS>", 46, 112, "player", "<EOS>"], "model_output": {"hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"value": {"args": [{"elts": [{"_type": "Template10", "hole0": "<UNK>"}, {"_type": "Template10", "hole0": "<UNK>"}], "_type": "List"}, {"_type": "Name", "id": "player"}], "func": {"value": {"value": {"_type": "Name", "id": "player"}, "attr": "agent", "_type": "Attribute"}, "attr": "choose_option", "_type": "Attribute"}, "_type": "Call"}, "_type": "Assign", "targets": [{"_type": "Name", "id": "option"}]}, {"value": {"value": {"value": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "attr": "divine_shield", "_type": "Attribute"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "Assign", "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"value": {"args": [{"elts": [{"_type": "Template10", "hole0": "<UNK>"}, {"_type": "Template10", "hole0": "<UNK>"}], "_type": "List"}, {"_type": "Name", "id": "player"}], "func": {"value": {"value": {"value": {"_type": "Name", "id": "player"}, "attr": "game", "_type": "Attribute"}, "attr": "random_choice", "_type": "Attribute"}, "attr": "choose_option", "_type": "Attribute"}, "_type": "Call"}, "_type": "Assign", "targets": [{"_type": "Name", "id": "option"}]}, {"value": {"value": {"value": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "attr": "divine_shield", "_type": "Attribute"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "Assign", "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"value": {"args": [{"elts": [{"_type": "Template10", "hole0": "<UNK>"}, {"_type": "Template10", "hole0": "<UNK>"}], "_type": "List"}, {"_type": "Name", "id": "player"}], "func": {"value": {"value": {"value": {"_type": "Name", "id": "player"}, "attr": "game", "_type": "Attribute"}, "attr": "random_choice", "_type": "Attribute"}, "attr": "choose_option", "_type": "Attribute"}, "_type": "Call"}, "_type": "Assign", "targets": [{"_type": "Name", "id": "option"}]}], "hole2": [{"value": {"hole1": 0, "hole2": "PRIEST", "hole3": "FREE", "_type": "Template3", "hole0": "Burrowing Mine"}, "_type": "Expr"}], "hole0": "BurrowingMine", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-5.7220458984375e-06, -0.0003299713134765625, -3.6954811548639555e-06, -0.0004808938247151673, -0.00022887132945470512, -5.959271220490336e-06, -3.576278118089249e-07, -8.583047019783407e-06, -3.814697265625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.0046100616455078125, -7.62939453125e-06, -1.07287787614041e-05, -9.584426879882812e-05, 0.0, -0.01592254638671875, -3.695486157084815e-06, -1.9073486328125e-06, -0.03507767990231514, 0.0, -0.019533157348632812, 0.0, -1.5854835510253906e-05, 0.0, -3.600119089242071e-05, 0.0, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -1.9430992324487306e-05, -2.1457672119140625e-06, -1.1582574844360352, -0.0022611618041992188, -1.9073486328125e-05, -3.814697265625e-06, -7.62939453125e-06, -2.5987455956055783e-05, -5.7220458984375e-06, -9.894361937767826e-06, 0.0, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, -0.04289531707763672, -1.9073486328125e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.9249073266983032, 0.0, -0.03163719177246094, -0.0001087188720703125, -1.9073486328125e-06, 0.0, -0.0047969818115234375, 0.0, -0.31371307373046875, 0.0, -0.09451591968536377, 0.0, -0.008748769760131836, -0.000202178955078125, -0.04778372123837471, -6.67572021484375e-05, -0.0002002716064453125, -0.13244915008544922, -0.0038890838623046875, -0.0001773834228515625, -0.003086090087890625, -3.814697265625e-06, -0.7916087508201599, -0.085830457508564, -0.022350311279296875, -5.7220458984375e-06, -0.2403871715068817, -0.10096560418605804, -2.47955322265625e-05, 0.0, -0.010803699493408203, 0.0, -0.02305126190185547, 0.0, -1.9073486328125e-05, -3.814697265625e-05, 0.0, -0.41360199451446533, -6.19888032815652e-06, -0.7951784133911133, -1.9073486328125e-06, -0.11820697784423828, -7.62939453125e-06, -0.5987024307250977, -1.9073486328125e-05, -0.01482391357421875, 0.0, -0.2156209945678711, -4.017353057861328e-05, -0.000133514404296875, 0.0, -0.951046347618103, -1.9073486328125e-06, -0.2730536460876465, -0.00016450881958007812, -0.0039310455322265625, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -1.7363791465759277, -1.1920928244535389e-07, -0.3662271499633789, -1.71661376953125e-05, -0.008119583129882812, -1.1444091796875e-05, -0.05989551544189453, 0.0, -0.3032207489013672, 0.0, -0.1477794647216797, 0.0, -0.11928749084472656, 0.0, -0.6832829713821411, -5.7220458984375e-05, -0.5686825513839722, -0.00072479248046875, -0.2592882812023163, -3.62396240234375e-05, -0.0001678466796875, -0.3948478698730469, -0.005610466003417969, -0.0002918243408203125, -0.0014734268188476562, -9.5367431640625e-06, -0.23960934579372406, -0.07801263779401779, -0.001949310302734375, -7.62939453125e-06, -0.20304618775844574, -0.10573127120733261, -1.9073486328125e-05, 0.0, -0.009761214256286621, 0.0, -0.05854034423828125, 0.0, -2.09808349609375e-05, -2.6702880859375e-05, 0.0, -0.2164289951324463, -6.794924956921022e-06, -0.7634677886962891, -1.9073486328125e-06, -0.1112680435180664, -7.62939453125e-06, -0.6469783782958984, -1.52587890625e-05, -0.01190948486328125, 0.0, -0.33938121795654297, -3.826618194580078e-05, -0.0001354217529296875, 0.0, -1.019108772277832, -1.9073486328125e-06, -0.25885188579559326, -0.00016832351684570312, -0.0043697357177734375, -1.9073486328125e-06, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -1.7381161451339722, -1.1920928244535389e-07, -0.3912076950073242, -1.71661376953125e-05, -0.00756072998046875, -1.1444091796875e-05, -0.05805683135986328, 0.0, -0.2992820739746094, 0.0, -0.14942550659179688, 0.0, -0.1209716796875, 0.0, -0.672805905342102, -5.7220458984375e-05, -0.5664714574813843, -0.0007305145263671875, -0.26485368609428406, -3.62396240234375e-05, -0.0001697540283203125, -0.40201282501220703, -0.0056056976318359375, -0.000293731689453125, -0.0014820098876953125, -9.5367431640625e-06, -0.23837321996688843, -0.07819841057062149, -0.0019512176513671875, -7.62939453125e-06, -0.204093798995018, -0.10543584823608398, -1.9073486328125e-05, 0.0, -0.009735465049743652, 0.0], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        option = player.agent.choose_option([<UNK>(), <UNK>()], player)\n        <UNK> = self.target.divine_shield.<UNK>\n        option = player.game.random_choice.choose_option([<UNK>(), <UNK>()],\n            player)\n        <UNK> = self.target.divine_shield.<UNK>\n        option = player.game.random_choice.choose_option([<UNK>(), <UNK>()],\n            player)\n"}]}
{"gold_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.random_amount\n            (3, 6)), self)\n", "beams": [{"score": -0.2874209279751767, "choice_history": [59, 126, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Crackle", "<EOS>", 55, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 52, 173, 154, "target_func", "<EOS>", 16, 82, 16, 82, 24, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 154, "overload", "<EOS>", 32, "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 178, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 76, 146, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 165, 41, 89, 16, 82, 24, 112, "player", "<EOS>", "effective_spell_damage", "<EOS>", 164, 48, 117, "6", "<EOS>", 46, 112, "self", "<EOS>"], "model_output": {"hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"hole1": "damage", "hole2": [{"args": [{"n": 6, "_type": "Num"}], "func": {"value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "_type": "Call"}, {"_type": "Name", "id": "self"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}}], "hole2": [{"value": {"args": [{"s": "Crackle", "_type": "Str"}, {"_type": "Template17"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template11"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}, {"value": {"_type": "Template18"}, "arg": "overload", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "Crackle", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-1.9073486328125e-06, -0.0042705535888671875, -7.390948667307384e-06, -4.29153169534402e-06, -2.38411648751935e-05, -4.1723224057932384e-06, -3.576278118089249e-07, -5.14984130859375e-05, -1.71661376953125e-05, -1.33514404296875e-05, -1.1444091796875e-05, -9.5367431640625e-06, -1.33514404296875e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -6.198863957251888e-06, -1.621246337890625e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -6.0439109802246094e-05, -2.3841855067985307e-07, -0.0028859376907348633, -0.00032639503479003906, -0.00018310546875, -0.018448829650878906, -3.814697265625e-06, -0.002674102783203125, 0.0, -0.000514984130859375, -2.86102294921875e-05, -9.34600830078125e-05, -3.62396240234375e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.00113677978515625, 0.0, -0.000194549560546875, 0.0, -0.0003172020660713315, -4.76837158203125e-05, -9.72747802734375e-05, -0.019107818603515625, -0.0023174285888671875, -0.008826255798339844, -0.00015842914581298828, -1.9073486328125e-06, -0.0004734991816803813, 0.0, -7.82012939453125e-05, -7.05718994140625e-05, -1.1444091796875e-05, -2.384185791015625e-06, -7.557868957519531e-05, -0.006608009338378906, -3.814697265625e-06, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, -1.1801687833212782e-05, -1.1444091796875e-05, -0.00012421581777743995, 0.0, -1.9073486328125e-06, -0.00029754638671875, 0.0, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -0.0001506805419921875, -1.1444091796875e-05, -3.24249267578125e-05, 0.0, -2.86102294921875e-05, 0.0, -1.52587890625e-05, -2.288818359375e-05, -0.0003921985626220703, -5.7220458984375e-06, -0.00013708103506360203, -1.2159273865108844e-05, -5.7220458984375e-06, -0.0001125335693359375, -0.0003509521484375, -3.814697265625e-06, -1.9073486328125e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.0001354217529296875, 0.0, -0.00044739246368408203, -2.3841855067985307e-07, -9.918212890625e-05, -0.21381282806396484, -5.7220458984375e-06, -0.0013823187910020351, -0.00019108926062472165, -3.62396240234375e-05, -1.9073486328125e-06, -0.00017380712961312383, -2.515315827622544e-05], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}]}
{"gold_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "beams": [{"score": -0.7600012949794532, "choice_history": [59, 126, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 168, 49, 121, "Emergency", " ", "Coolant", "<EOS>", 56, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 52, 47, 113, "False", "<EOS>", 172, 154, "target_func", "<EOS>", 16, 82, 16, 82, 24, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 178, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 76, 146, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 164, 46, 112, "self", "<EOS>"], "model_output": {"hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"hole1": "die", "hole2": [{"_type": "Name", "id": "self"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}}], "hole2": [{"value": {"args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template18"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"_type": "Template11"}, {"value": true, "_type": "NameConstant"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "EmergencyCoolant", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-0.0004730224609375, -0.0001697540283203125, -1.1920928244535389e-07, -4.8993817472364753e-05, -5.9126061387360096e-05, 0.0, -1.1920928244535389e-07, -4.0531076592742465e-06, -1.1444091796875e-05, -8.96453857421875e-05, 0.0, -0.016469955444335938, -0.00388336181640625, -7.62939453125e-06, -0.01660919189453125, -0.0001678466796875, -1.9073486328125e-06, -1.1086402082582936e-05, -0.00020575523376464844, -7.152555099310121e-07, -5.7220458984375e-06, -3.24249267578125e-05, -0.000179290771484375, -5.340576171875e-05, -0.000102996826171875, 0.0, -0.00022745132446289062, -1.1920928244535389e-07, -0.001764535903930664, 0.0, -0.00025177001953125, -5.53131103515625e-05, -3.24249267578125e-05, -0.00035607811878435314, 0.0, -0.0001010894775390625, -2.86102294921875e-05, -6.29425048828125e-05, 0.0, -4.00543212890625e-05, -0.0001220703125, -0.000179290771484375, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -0.00018310546875, -1.9073486328125e-06, -4.00543212890625e-05, 0.0, -0.16089844703674316, 0.0, -5.841255187988281e-06, 0.0, -0.00013399124145507812, 0.0, -7.62939453125e-06, 0.0, 0.0, -2.2411331883631647e-05, -2.110004425048828e-05, -0.5001277923583984, -1.9073486328125e-06, -1.52587890625e-05, -1.33514404296875e-05, -5.340576171875e-05, -0.00015163421630859375, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -3.0517578125e-05, -1.1444091796875e-05, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008907318115234375, -1.9073486328125e-05, -5.7220458984375e-06, -0.0004119873046875, -4.00543212890625e-05, 0.0, -4.38690185546875e-05, -4.00543212890625e-05, -0.00025844573974609375, 0.0, -0.04397129639983177, 0.0, -1.52587890625e-05, -0.00597381591796875, -1.9073486328125e-06, -0.0047026872634887695, -3.814697265625e-06], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}]}
{"gold_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "beams": [{"score": -0.3160314859553566, "choice_history": [59, 124, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Flying", " ", "Machine", "<EOS>", 57, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 52, 172, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 172, 154, "windfury", "<EOS>", 25, 113, "True", "<EOS>"], "model_output": {"hole4": "p", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": 4, "hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "windfury", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Flying Machine", "_type": "Str"}, {"_type": "Template19"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"_type": "Template11"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "FlyingMachine", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-3.24249267578125e-05, -4.38690185546875e-05, -0.0023088008165359497, -0.00029297350556589663, -1.3708998267247807e-05, 0.0, 0.0, -1.1920928244535389e-07, 0.0, -7.62939453125e-06, 0.0, -2.86102294921875e-05, -1.33514404296875e-05, -9.5367431640625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.531158240046352e-05, -2.5033950805664062e-05, -3.576272320060525e-06, -7.62939453125e-05, -0.013048171997070312, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, 0.0, -3.933906555175781e-06, -9.655950634623878e-06, -2.5272369384765625e-05, 0.0, -4.9591064453125e-05, -7.05718994140625e-05, -7.62939453125e-06, -7.152557373046875e-05, -4.768370445162873e-07, -3.0517578125e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001811981201171875, -1.1444091796875e-05, -0.004185318946838379, 0.0, -3.814697265625e-05, 0.0, -0.27158987522125244, -0.000110626220703125, -2.288818359375e-05, -0.000461578369140625, -0.00011444091796875, 0.0, -3.3378546504536644e-06, -2.0265579223632812e-06, -8.344646857949556e-07, -1.7404556274414062e-05, -2.7418097943154862e-06, -0.0023365020751953125, -3.4332275390625e-05, -0.020108461380004883, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -0.00038909912109375, 0.0], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, p):\n        return Minion(1, 4, windfury=True)\n"}]}
{"gold_code": "class GoblinAutoBarber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "beams": [{"score": -1.3126900734209386, "choice_history": [59, 124, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Goblin", " ", "Auto-Barber", "<EOS>", 55, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 52, 173, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 154, "battlecry", "<EOS>", 19, 89, 24, 112, "Battlecry", "<EOS>", 165, 41, 89, 24, 112, "Give", "<EOS>", 164, 41, 89, 24, 112, "Change", "Attack", "<EOS>", 164, 56, 41, 89, 24, 112, "Minion", "Selector", "<EOS>", 164, 41, 89, 24, 112, "Is", "Type", "<EOS>", 164, 38, 82, 24, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": 2, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Goblin Auto-Barber", "_type": "Str"}, {"_type": "Template17"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PRIEST", "_type": "Attribute"}, {"_type": "Template11"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}, {"value": {"args": [{"args": [{"args": [{"_type": "Template18"}], "func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Give"}, "_type": "Call"}, {"args": [{"args": [{"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}], "func": {"_type": "Name", "id": "IsType"}, "_type": "Call"}], "func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "GoblinAuto-Barber", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-1.9073486328125e-05, -0.0003528594970703125, -0.0005146132898516953, -0.0004366874636616558, -7.6293927122605965e-06, -2.384149411227554e-07, -3.814697265625e-06, -1.5497195136049413e-06, -5.7220458984375e-06, -3.814697265625e-06, -2.09808349609375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -1.52587890625e-05, -8.96453857421875e-05, 0.0, -1.9073486328125e-06, -0.00013279033009894192, -7.069110870361328e-05, -0.00025567124248482287, -5.352497100830078e-05, -7.62939453125e-06, -1.1444091796875e-05, 0.0, -9.5367431640625e-06, 0.0, -2.0265579223632812e-06, -2.3841855067985307e-07, -0.5343828201293945, 0.0, -2.47955322265625e-05, -0.02720928192138672, -0.0001506805419921875, -0.0002741813659667969, -4.768370445162873e-07, -1.9073486328125e-05, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -9.918212890625e-05, 0.0, -0.00431513786315918, 0.0, -8.20159912109375e-05, -0.009769201278686523, 0.0, -0.001651763916015625, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -2.8729431505780667e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.04038810729980469, -3.24249267578125e-05, -1.9073486328125e-06, 0.0, -0.00244259275496006, -0.001015782356262207, -3.62396240234375e-05, -0.0018863677978515625, -0.0005807876586914062, -1.9073486328125e-06, -1.9073486328125e-06, -0.010680148378014565, -0.0016242259880527854, -0.0002351997682126239, -5.7220458984375e-06, -0.0088348388671875, -8.0108642578125e-05, -0.3133840560913086, -1.9073486328125e-06, -1.9073486328125e-06, -0.04553225636482239, -1.454353241570061e-05, -4.1723224057932384e-06, -4.00543212890625e-05, -0.2223033905029297, -0.0003185272216796875, -1.71661376953125e-05, -1.9073486328125e-06, -0.022426126524806023, -0.0021971436217427254, -6.055753692635335e-05, -3.814697265625e-06, -0.00286102294921875, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.009553909301757812, -1.1920928244535389e-07, -0.008968353271484375, 0.0, -0.001689910888671875, -1.9073486328125e-06, -0.026121973991394043, 0.0, -1.71661376953125e-05, -0.008831024169921875, -1.52587890625e-05, -1.1918018572032452e-07, -5.7220458984375e-06, -0.00026535766664892435, -1.1920928244535389e-07, -7.081031799316406e-05, 0.0], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeAttack(1)), MinionSelector(IsType(\n            MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}]}
{"gold_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\n", "beams": [{"score": -1.9208854303657716, "choice_history": [59, 124, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Iron", " ", "Sensei", "<EOS>", 57, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 38, 82, 29, "RARE", "<EOS>", 172, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 172, 154, "effects", "<EOS>", 22, 108, 164, 41, 89, 24, 112, "Effect", "<EOS>", 165, 51, 130, "Turn", "Ended", "<EOS>", 41, 89, 24, 112, "Action", "Tag", "<EOS>", 165, 41, 89, 24, 112, "Give", "<EOS>", 164, 41, 89, 24, 112, "Change", "Health", "<EOS>", 164, 56, 41, 88, 24, 112, "Minion", "Selector", "<EOS>", 172, 154, "picker", "<EOS>", 28, 130, "Random", "Picker", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": 2, "hole3": [{"value": {"elts": [{"args": [{"_type": "Template10", "hole0": "TurnEnded"}, {"args": [{"args": [{"args": [{"_type": "Template18"}], "func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Give"}, "_type": "Call"}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "keywords": [{"value": {"_type": "Template10", "hole0": "RandomPicker"}, "arg": "picker", "_type": "keyword"}]}], "func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Effect"}, "_type": "Call"}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template19"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "MAGE", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "RARE", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "IronSensei", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-3.814697265625e-06, -0.0001964569091796875, -0.0004990047891624272, -6.341733387671411e-05, -2.694129761948716e-05, -1.1920883480343036e-07, -7.748603820800781e-06, -5.161762237548828e-05, 0.0, -6.866455078125e-05, -3.814697265625e-06, -0.001705169677734375, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0012291265884414315, -4.220008850097656e-05, -0.00015400654228869826, -0.0003319978713989258, -0.000148773193359375, -0.0001544952392578125, 0.0, -5.7220458984375e-06, 0.0, -2.6941299438476562e-05, 0.0, -0.28713512420654297, 0.0, -5.340576171875e-05, 0.0, -3.814697265625e-06, -7.87973403930664e-05, -4.9591064453125e-05, -0.0003509521484375, -1.71661376953125e-05, -0.00011086463928222656, -1.1920928244535389e-07, -2.86102294921875e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -0.004125714302062988, 0.0, -0.000270843505859375, 0.0, -0.0006753206253051758, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -0.000240325927734375, 0.0, -1.1920928244535389e-07, -5.960462772236497e-07, -7.033334895822918e-06, -6.175073212943971e-05, -1.3947414117865264e-05, -4.00543212890625e-05, -1.1444091796875e-05, -0.00014770030975341797, 0.0, -1.71661376953125e-05, -8.58306884765625e-05, -0.07867050170898438, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -9.5367431640625e-06, -2.682209014892578e-05, -3.0517578125e-05, -1.33514404296875e-05, -0.0042476654052734375, 0.0, -0.0012236827751621604, -0.25597333908081055, -4.768370445162873e-07, -9.5367431640625e-06, -7.43865966796875e-05, -2.47955322265625e-05, 0.0, -9.906289051286876e-05, -7.82012939453125e-05, -1.9073486328125e-06, -1.33514404296875e-05, -0.0001277923583984375, -1.9073486328125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.05058181285858154, -0.00029730796813964844, -3.814697265625e-06, -0.00144195556640625, -0.001209259033203125, -4.9591064453125e-05, -3.814697265625e-06, -0.007457533851265907, -0.3907679319381714, -3.3378546504536644e-06, -5.7220458984375e-06, -0.6585416793823242, -0.0010967254638671875, -0.03754901885986328, -3.814697265625e-06, 0.0, -0.004711546003818512, -5.7220458984375e-06, -5.7220458984375e-06, -0.0002422332763671875, -9.5367431640625e-06, -0.08728218078613281, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.040173888206481934, -0.00035068398574367166, -1.9073486328125e-06], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n"}]}
{"gold_code": "class MalGanis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(\n            IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2),\n            MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(),\n            HeroSelector())])\n", "beams": [{"score": -4.7101794757517155, "choice_history": [59, 124, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Mal'Ganis", "<EOS>", 48, 117, "9", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 38, 82, 29, "LEGENDARY", "<EOS>", 172, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "9", "<EOS>", "7", "<EOS>", 172, 154, "effects", "<EOS>", 22, 108, 164, 41, 89, 24, 112, "Effect", "<EOS>", 165, 41, 89, 24, 112, "Character", "Attack", "<EOS>", 164, 51, 130, "Is", "Hero", "<EOS>", 41, 89, 24, 112, "Action", "Tag", "<EOS>", 165, 41, 89, 24, 112, "Give", "<EOS>", 164, 41, 89, 24, 112, "Buff", "Until", "<EOS>", 165, 41, 89, 24, 112, "Change", "Attack", "<EOS>", 164, 55, 41, 89, 24, 112, "Minion", "Selector", "<EOS>", 164, 41, 89, 24, 112, "Is", "Type", "<EOS>", 164, 38, 82, 24, 112, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 51, 130, "Player", "Selector", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 9, "hole2": 7, "hole3": [{"value": {"elts": [{"args": [{"args": [{"_type": "Template10", "hole0": "IsHero"}], "func": {"_type": "Name", "id": "CharacterAttack"}, "_type": "Call"}, {"args": [{"args": [{"args": [{"args": [{"_type": "Template17"}], "func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call"}, {"args": [{"args": [{"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "PIRATE", "_type": "Attribute"}], "func": {"_type": "Name", "id": "IsType"}, "_type": "Call"}], "func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call"}], "func": {"_type": "Name", "id": "BuffUntil"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Give"}, "_type": "Call"}, {"_type": "Template10", "hole0": "PlayerSelector"}], "func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Effect"}, "_type": "Call"}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "LEGENDARY", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "Mal'Ganis", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [0.0, -6.866455078125e-05, -0.0010367813520133495, -6.198883056640625e-05, -4.768307917402126e-07, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -1.9073486328125e-06, 0.0, -0.00853729248046875, -3.814697265625e-05, -7.62939453125e-06, -1.9073486328125e-05, -2.288818359375e-05, -1.1444091796875e-05, -2.3841855067985307e-07, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.08913274109363556, -5.507337846211158e-05, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.6091718673706055, -7.43865966796875e-05, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -0.29767322540283203, -9.5367431640625e-06, -0.00042724609375, 0.0, -0.000400543212890625, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -5.7220458984375e-06, -0.029420852661132812, -5.7220458984375e-06, -0.0001316070556640625, 0.0, -0.00040268898010253906, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -0.00098419189453125, 0.0, -3.933906555175781e-06, -2.3841855067985307e-07, -6.97350042173639e-05, -2.2292137145996094e-05, -3.576278118089249e-07, -5.340576171875e-05, -1.9073486328125e-06, -0.4662371873855591, 0.0, -3.4332275390625e-05, -9.5367431640625e-06, -0.0015926361083984375, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.0003396272659301758, -2.2649765014648438e-06, -1.9073486328125e-06, -0.3531055450439453, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.867082417011261, -0.0056002140045166016, -0.0001354217529296875, -0.001331329345703125, -0.01039886474609375, 0.0, -0.011770278215408325, -0.19405171275138855, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -0.0001621246337890625, -3.814697265625e-05, 0.0, -9.5367431640625e-06, -0.0007610321044921875, 0.0, -3.814697265625e-06, 0.0, -0.04859936237335205, -1.2159347534179688e-05, -7.62939453125e-06, -0.03753948211669922, -1.71661376953125e-05, -1.9073486328125e-06, -4.76837158203125e-05, -0.25940072536468506, -0.17920684814453125, -2.2649765014648438e-06, -1.52587890625e-05, -0.06567859649658203, 0.0, -1.9073486328125e-06, -0.00118255615234375, -0.00010478234617039561, -0.032354116439819336, -4.0531158447265625e-06, 0.0, -0.008303642272949219, -0.4263792037963867, -3.814697265625e-06, 0.0, 0.0, -0.011337281204760075, -4.00543212890625e-05, 0.0, -0.00799560546875, -0.00038909912109375, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -0.01175987720489502, -9.012222290039062e-05, -2.2292137145996094e-05, -0.001422882080078125, -9.5367431640625e-06, -3.814697265625e-06, -7.62939453125e-06, 0.0, -8.022785186767578e-05, 0.0, -0.64448082447052, 0.0, -0.0029048919677734375, 0.0, -0.020030975341796875, -3.814697265625e-05, 0.0], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, effects=[Effect(CharacterAttack(IsHero()),\n            ActionTag(Give(BuffUntil(ChangeAttack(2), MinionSelector(IsType\n            (MINION_TYPE.PIRATE)))), PlayerSelector()))])\n"}]}
{"gold_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(\n            EventValue()), HeroSelector()))])\n", "beams": [{"score": -1.424458214769004, "choice_history": [59, 124, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Mistress", " ", "of", " ", "Pain", "<EOS>", 55, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 38, 82, 29, "RARE", "<EOS>", 172, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 172, 154, "effects", "<EOS>", 22, 108, 164, 41, 89, 24, 112, "Effect", "<EOS>", 165, 51, 130, "Damaged", "<EOS>", 41, 89, 24, 112, "Action", "Tag", "<EOS>", 165, 41, 89, 24, 112, "Heal", "<EOS>", 164, 48, 117, "4", "<EOS>", 51, 130, "Hero", "Selector", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": 4, "hole3": [{"value": {"elts": [{"args": [{"_type": "Template10", "hole0": "Damaged"}, {"args": [{"args": [{"n": 4, "_type": "Num"}], "func": {"_type": "Name", "id": "Heal"}, "_type": "Call"}, {"_type": "Template10", "hole0": "HeroSelector"}], "func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Effect"}, "_type": "Call"}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template17"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "RARE", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "MistressOfPain", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-1.9073486328125e-06, -8.392333984375e-05, -0.004141033627092838, -0.0014310565311461687, -0.00253502675332129, -0.0007655146764591336, -1.5495606930926442e-06, -5.7220458984375e-06, -1.1563301086425781e-05, 0.0, -2.09808349609375e-05, 0.0, -0.24069786071777344, -6.103515625e-05, -9.5367431640625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00010966652916977182, -0.0010684728622436523, -1.3232223864179105e-05, -0.0043898820877075195, -6.556494918186218e-05, -1.9073486328125e-06, -0.0048122406005859375, -0.0010700225830078125, -1.9073486328125e-06, 0.0, 0.0, -5.7220458984375e-06, -3.933906555175781e-06, -0.3569566011428833, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -2.47955322265625e-05, -0.00019621849060058594, -2.09808349609375e-05, -0.0007343292236328125, -1.9073486328125e-06, -0.0001659393310546875, -1.9073486328125e-06, -0.0001697540283203125, 0.0, -5.7220458984375e-06, 0.0, -0.000179290771484375, -5.7220458984375e-06, -0.5078334808349609, -1.9073486328125e-06, -0.000797271728515625, 0.0, -0.0011997222900390625, 0.0, -3.814697265625e-06, -2.6702880859375e-05, -0.0007343292236328125, -4.649098627851345e-06, -3.576278118089249e-07, -9.655952453613281e-06, -2.50339189733495e-06, -3.933906555175781e-06, -1.311301275563892e-06, -0.0004978179931640625, -3.814697265625e-06, -0.00019299983978271484, 0.0, -1.9073486328125e-05, -2.6702880859375e-05, -0.006168365478515625, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, 0.0, -6.67572021484375e-05, -3.576277322281385e-06, -1.33514404296875e-05, -0.0003032684326171875, 0.0, -0.03130350634455681, -0.0035854573361575603, -0.0013141632080078125, -7.62939453125e-06, 0.0, 0.0, -3.457069396972656e-05, -0.0001316070556640625, 0.0, -5.340576171875e-05, -0.003448486328125, -1.9073486328125e-06, 0.0, 0.0, -0.23651456832885742, -0.00022125232499092817, -3.814697265625e-06, -0.00701904296875, -1.33514404296875e-05, -0.0002515033120289445, -8.344646857949556e-07, -0.0024356842041015625, 0.0, -0.000263214111328125, -0.00010347366333007812, 0.0], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(4),\n            HeroSelector()))])\n"}]}
{"gold_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=RandomPicker())))\n", "beams": [{"score": -2.7767179829661472, "choice_history": [59, 124, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 177, 68, 94, 34, 139, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 172, 154, "deathrattle", "<EOS>", 19, 89, 24, 112, "Deathrattle", "<EOS>", 165, 41, 89, 24, 112, "Give", "<EOS>", 164, 41, 89, 24, 112, "Change", "Health", "<EOS>", 164, 55, 41, 89, 24, 112, "Minion", "Selector", "<EOS>", 164, 41, 89, 24, 112, "Is", "Type", "<EOS>", 164, 38, 82, 24, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": 2, "hole3": [{"value": {"args": [{"args": [{"args": [{"_type": "Template17"}], "func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Give"}, "_type": "Call"}, {"args": [{"args": [{"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}], "func": {"_type": "Name", "id": "IsType"}, "_type": "Call"}], "func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call"}, "arg": "deathrattle", "_type": "keyword"}], "_type": "Template8", "hole0": "Weapon"}], "hole2": [{"value": {"hole1": 3, "hole2": "PRIEST", "hole3": "RARE", "_type": "Template3", "hole0": "Powermace"}, "_type": "Expr"}], "hole0": "Powermace", "hole1": "WeaponCard", "_type": "Template0"}, "score_history": [-5.7220458984375e-06, -9.1552734375e-05, -0.0006829596823081374, -0.00010418881720397621, -6.318072337307967e-06, -4.5180280721979216e-05, -3.0398361559491605e-05, -3.814697265625e-06, -6.103515625e-05, -7.62939453125e-06, -0.00018310546875, -1.1444091796875e-05, -1.0728830375228426e-06, -3.898143768310547e-05, -1.931572478497401e-05, -1.9073486328125e-06, -0.665501594543457, 0.0, -0.0002689361572265625, 0.0, -0.003930091857910156, 0.0, -0.0004443430807441473, 0.0, -7.62939453125e-06, -3.814697265625e-05, -5.340576171875e-05, -1.5497195136049413e-06, -0.009707330726087093, -8.34464663057588e-06, -3.135155202471651e-05, -4.363058542367071e-05, -3.671578815556131e-05, -7.2479248046875e-05, 0.0, -0.024176478385925293, 0.0, -8.0108642578125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.0002499818801879883, 0.0, -0.0031528472900390625, -7.62939453125e-06, -3.814697265625e-06, -1.33514404296875e-05, -3.814697265625e-06, -0.5633987784385681, -0.0012802802957594395, -2.86102294921875e-05, -0.0868072509765625, -0.004833221435546875, -1.9073486328125e-06, 0.0, -0.009776437655091286, -0.4584747552871704, -0.00011002412065863609, -3.814697265625e-06, -0.0057773590087890625, -6.29425048828125e-05, -0.00759124755859375, -7.62939453125e-06, -1.1444091796875e-05, -0.44429829716682434, -1.728534698486328e-05, -9.5367431640625e-06, -0.025491714477539062, -0.000614166259765625, -0.00014495849609375, -3.814697265625e-06, -3.814697265625e-06, -0.33831536769866943, -0.0008509159088134766, -7.987013304955326e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.0018291473388671875, -1.9073486328125e-06, -0.11780273914337158, 0.0], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give(ChangeHealth(2)),\n            MinionSelector(IsType(MINION_TYPE.MECH))))\n"}]}
{"gold_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "beams": [{"score": -1.5255778624255, "choice_history": [59, 124, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Screwjank", " ", "Clunker", "<EOS>", 48, 117, "4", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 38, 82, 29, "RARE", "<EOS>", 173, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 154, "battlecry", "<EOS>", 19, 89, 24, 112, "Battlecry", "<EOS>", 165, 41, 89, 24, 112, "Give", "<EOS>", 164, 41, 89, 24, 112, "Change", "Health", "<EOS>", 164, 55, 41, 89, 24, 112, "Minion", "Selector", "<EOS>", 164, 41, 89, 24, 112, "Is", "Type", "<EOS>", 164, 38, 82, 24, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "2", "<EOS>", "5", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": 5, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Screwjank Clunker", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "RARE", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}, {"value": {"args": [{"args": [{"args": [{"_type": "Template17"}], "func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Give"}, "_type": "Call"}, {"args": [{"args": [{"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}], "func": {"_type": "Name", "id": "IsType"}, "_type": "Call"}], "func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "ScrewjankClunker", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [0.0, -7.2479248046875e-05, -0.0017279977910220623, -0.00021455370006151497, -5.6862118071876466e-05, 0.0, -9.5367431640625e-06, -5.602834789897315e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -5.7220458984375e-05, -4.38690185546875e-05, -2.47955322265625e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -1.847726889536716e-05, -3.063678741455078e-05, -1.3947389561508317e-05, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -3.0398361559491605e-05, -3.933906555175781e-06, 0.0, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.0265579223632812e-06, -2.1457672119140625e-06, -0.9397859573364258, -9.5367431640625e-06, -4.00543212890625e-05, -3.814697265625e-05, -7.05718994140625e-05, -0.004247426986694336, 0.0, -0.007153511047363281, -0.00060272216796875, -0.00018405914306640625, 0.0, -0.0002155303955078125, 0.0, -3.814697265625e-06, 0.0, -8.7738037109375e-05, 0.0, -0.0052165985107421875, 0.0, 0.0, -0.0164947509765625, 0.0, -0.000308990478515625, -1.52587890625e-05, -3.814697265625e-06, 0.0, -1.9311904907226562e-05, -1.9073486328125e-06, -0.0005931854248046875, -0.0001087188720703125, -9.5367431640625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -0.049992334097623825, -0.00039504957385361195, -6.866455078125e-05, -0.2483978271484375, -0.000186920166015625, -3.814697265625e-06, 0.0, -0.14870873093605042, -0.05141478404402733, -8.702239938429557e-06, -3.814697265625e-06, -0.000217437744140625, -1.33514404296875e-05, -0.027189254760742188, -9.5367431640625e-06, -3.814697265625e-06, -0.0002810955047607422, -3.933906555175781e-06, 0.0, -0.0013828277587890625, -0.0002288818359375, -0.000164031982421875, -3.814697265625e-06, -1.9073486328125e-06, -0.007032113149762154, -0.0019350051879882812, -1.5258699932019226e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.000244140625, 0.0, -0.0002009868621826172, 0.0, -0.009241104125976562, 0.0, -7.2479248046875e-05, -1.9073486328125e-06, -0.00014960765838623047, 0.0, -1.9073486328125e-06, -0.0002346038818359375, -2.86102294921875e-05, 0.0, -3.24249267578125e-05, -1.811964830267243e-05, -1.1920928244535389e-07, -2.3126602172851562e-05, -9.536738616588991e-07], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeHealth(2)), MinionSelector(IsType(\n            MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n"}]}
{"gold_code": "class SneedsOldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])),\n            PlayerSelector()))\n", "beams": [{"score": -1.1261420517362808, "choice_history": [59, 124, "<UNK>", "<UNK>", "Old", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", 48, 117, "8", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 38, 82, 29, "LEGENDARY", "<EOS>", 172, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 172, 154, "deathrattle", "<EOS>", 19, 89, 24, 112, "Deathrattle", "<EOS>", 165, 41, 89, 24, 112, "Summon", "<EOS>", 164, 41, 88, 24, 112, "Card", "Query", "<EOS>", 172, 154, "conditions", "<EOS>", 22, 108, 165, 41, 89, 24, 112, "Mana", "Cost", "<EOS>", 164, 55, 51, 130, "Is", "Minion", "<EOS>", 51, 130, "Player", "Selector", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": 7, "hole3": [{"value": {"args": [{"args": [{"func": {"_type": "Name", "id": "CardQuery"}, "_type": "Call", "keywords": [{"value": {"elts": [{"args": [{"_type": "Template17"}], "func": {"_type": "Name", "id": "ManaCost"}, "_type": "Call"}, {"_type": "Template10", "hole0": "IsMinion"}], "_type": "List"}, "arg": "conditions", "_type": "keyword"}]}], "func": {"_type": "Name", "id": "Summon"}, "_type": "Call"}, {"_type": "Template10", "hole0": "PlayerSelector"}], "func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call"}, "arg": "deathrattle", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "<UNK> Old Shredder", "_type": "Str"}, {"n": 8, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "LEGENDARY", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "<UNK><UNK>Old", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-4.00543212890625e-05, -0.0002307891845703125, -0.006235312670469284, -0.03183276206254959, -0.2800310254096985, -0.0016723840963095427, -1.549196895211935e-06, -1.9073486328125e-06, 0.0, 0.0, -7.62939453125e-06, 0.0, -0.0001239776611328125, -4.38690185546875e-05, -2.86102294921875e-05, -2.09808349609375e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.21043120324611664, -0.00026702880859375, -0.002300107618793845, -0.00055694580078125, -0.0009845462627708912, -0.0006694793701171875, -0.000209808349609375, -7.43865966796875e-05, -0.03427255153656006, -2.3841855067985307e-07, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -3.814697265625e-06, -5.841255187988281e-06, -0.0010828971862792969, -7.843971252441406e-05, -1.9073486328125e-06, -0.000507354736328125, -2.09808349609375e-05, -0.00116729736328125, -0.0036897659301757812, 0.0, -4.9591064453125e-05, -4.1961669921875e-05, -0.00020325183868408203, -2.3841855067985307e-07, -6.29425048828125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0003948211669921875, -3.814697265625e-06, -0.0030040740966796875, 0.0, -7.62939453125e-06, 0.0, -0.0006878376007080078, 0.0, -8.20159912109375e-05, -5.7220458984375e-06, -0.0025482177734375, -4.2077961552422494e-05, -8.344646857949556e-07, -0.0002785921096801758, -4.887569048150908e-06, -7.629378160345368e-06, -8.821448318485636e-06, -3.62396240234375e-05, -5.7220458984375e-06, -0.00042176246643066406, 0.0, -0.001018524169921875, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, -0.0002595186233520508, -1.9073486328125e-06, -6.4849853515625e-05, -0.0004825592041015625, -2.288818359375e-05, -7.62939453125e-06, -0.0002593994140625, -0.008900039829313755, -7.629378160345368e-06, -0.0013275146484375, -0.09588813781738281, -0.04505634307861328, -1.9073486328125e-06, 0.0, -0.005566477309912443, -0.0011049509048461914, 0.0, -0.00087738037109375, -1.9073486328125e-06, -0.037682533264160156, -3.814697265625e-06, -0.000274658203125, -2.86102294921875e-05, -0.01575183868408203, -0.00339508056640625, -1.9073486328125e-06, 0.0, 0.0, -0.16252338886260986, -0.004194378852844238, 0.0, -1.9073486328125e-06, -0.09637451171875, -0.0020599365234375, 0.0, -0.011029229499399662, -0.04474332928657532, -1.9073486328125e-06, -0.0026416778564453125, 0.0, -2.288818359375e-05, -3.814697265625e-06, 0.0], "inferred_code": "class <UNK><UNK>Old(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n"}]}
{"gold_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n", "beams": [{"score": -1.8019676408884493, "choice_history": [59, 124, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Toshley", "<EOS>", 48, 117, "6", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 38, 82, 29, "LEGENDARY", "<EOS>", 172, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 172, 154, "deathrattle", "<EOS>", 19, 89, 24, 112, "Deathrattle", "<EOS>", 165, 41, 89, 24, 112, "Add", "Card", "<EOS>", 164, 41, 88, 24, 112, "Card", "Query", "<EOS>", 173, 154, "source", "<EOS>", 16, 82, 24, 112, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 154, "source_list", "<EOS>", 24, 112, "<UNK>", "<EOS>", 51, 130, "Player", "Selector", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": 7, "hole3": [{"value": {"args": [{"args": [{"func": {"_type": "Name", "id": "CardQuery"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "LIST", "_type": "Attribute"}, "arg": "source", "_type": "keyword"}, {"value": {"_type": "Name", "id": "<UNK>"}, "arg": "source_list", "_type": "keyword"}]}], "func": {"_type": "Name", "id": "AddCard"}, "_type": "Call"}, {"_type": "Template10", "hole0": "PlayerSelector"}], "func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call"}, "arg": "deathrattle", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Toshley", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "LEGENDARY", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "Toshley", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [0.0, -6.67572021484375e-05, -7.665027806069702e-05, -0.00012707660789601505, -3.576255949155893e-07, -5.7220458984375e-06, -0.0003293752670288086, -0.010494232177734375, -8.58306884765625e-05, -1.9073486328125e-06, -0.09203052520751953, -3.0517578125e-05, -4.9591064453125e-05, -8.0108642578125e-05, -1.52587890625e-05, 0.0, -4.8397800128441304e-05, -2.6941299438476562e-05, -0.0001430511474609375, -1.71661376953125e-05, -0.0003032684326171875, -7.509931310778484e-05, -3.0517578125e-05, -9.5367431640625e-06, -2.6702880859375e-05, -1.9073486328125e-06, -8.106231689453125e-06, -6.508827209472656e-05, -0.0001277923583984375, -1.9073486328125e-06, -0.00091552734375, -1.9073486328125e-06, -0.000133514404296875, -0.00021564960479736328, 0.0, -0.0001506805419921875, -3.814697265625e-06, -0.49481117725372314, 0.0, -0.00142669677734375, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -9.548664093017578e-05, -7.62939453125e-06, -0.0377427339553833, -1.9073486328125e-06, -0.0002480745315551758, -1.9073486328125e-06, -0.001030314713716507, 0.0, -0.5273189544677734, -2.86102294921875e-05, -0.012074470520019531, 0.0, -3.576278118089249e-07, -0.002521514892578125, -8.940656698541716e-06, -5.841247457283316e-06, -3.123234637314454e-05, -0.000347137451171875, 0.0, -0.00487065315246582, 0.0, -0.0055103302001953125, -2.288818359375e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.00017178058624267578, 0.0, -0.00701141357421875, -0.017171859741210938, -0.0034189224243164062, -5.7220458984375e-06, -0.0001373291015625, -0.003407238284125924, -0.00036227318923920393, -0.0001748800277709961, -0.0013256072998046875, -6.4849853515625e-05, -9.72747802734375e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.013549847528338432, -0.000546574592590332, -6.115436553955078e-05, -0.008630752563476562, -0.000118255615234375, -0.0014383791713044047, 0.0, -0.00139617919921875, 0.0, -4.00543212890625e-05, -0.0001201629638671875, -0.000705718994140625, -1.9073486328125e-06, -0.004700779914855957, -3.814697265625e-06, -0.0005054473876953125, -0.005775570869445801, -0.00609588623046875, -0.0018463134765625, -1.9073486328125e-06, -0.5084161758422852, -7.653236389160156e-05, -0.02020549774169922, -7.62939453125e-06, -0.0002995729446411133, -0.000225067138671875, 0.0], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=<UNK>)), PlayerSelector()))\n"}]}
{"gold_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "beams": [{"score": -1.8922247542215587, "choice_history": [59, 124, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Warbot", "<EOS>", 56, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 52, 172, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 172, 154, "enrage", "<EOS>", 22, 108, 164, 41, 89, 24, 112, "Aura", "<EOS>", 165, 41, 89, 24, 112, "Change", "Attack", "<EOS>", 164, 56, 41, 89, 24, 112, "Minion", "Selector", "<EOS>", 164, 41, 89, 24, 112, "Is", "Type", "<EOS>", 164, 38, 82, 24, 112, "MINION_TYPE", "<EOS>", "MECH", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": 3, "hole3": [{"value": {"elts": [{"args": [{"args": [{"_type": "Template18"}], "func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call"}, {"args": [{"args": [{"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}], "func": {"_type": "Name", "id": "IsType"}, "_type": "Call"}], "func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Aura"}, "_type": "Call"}], "_type": "List"}, "arg": "enrage", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Warbot", "_type": "Str"}, {"_type": "Template18"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER", "_type": "Attribute"}, {"_type": "Template11"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "Warbot", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-0.00012969970703125, -9.1552734375e-05, -4.410669862409122e-05, -6.770929030608386e-05, 0.0, -3.814697265625e-06, -1.2278503163543064e-05, 0.0, -1.9073486328125e-06, 0.0, -0.00019073486328125, -2.09808349609375e-05, -1.9073486328125e-06, -0.050334930419921875, -1.9073486328125e-06, -5.7220458984375e-06, -6.794924956921022e-06, -3.3378591979271732e-06, -1.9073486328125e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -2.9802317840221804e-06, -8.344646857949556e-07, -0.7974674701690674, 0.0, -4.38690185546875e-05, -0.0001697540283203125, -2.09808349609375e-05, -2.8848648071289062e-05, -2.1457672119140625e-06, -4.57763671875e-05, 0.0, -1.9073486328125e-06, 0.0, -0.000152587890625, 0.0, -0.0038623809814453125, 0.0, -0.0013886690139770508, 0.0, -0.04048893228173256, 0.0, -5.14984130859375e-05, -7.82012939453125e-05, -0.0063381195068359375, -6.794398359488696e-06, -1.7523643691674806e-05, -8.344646857949556e-07, -3.576278118089249e-07, -5.0066824769601226e-05, -3.576277322281385e-06, -0.00150299072265625, -3.814697265625e-06, -0.17434024810791016, 0.0, -3.4332275390625e-05, -4.57763671875e-05, -0.0041294097900390625, -1.1444091796875e-05, -0.0001888275146484375, 0.0, -1.9073486328125e-06, -0.0015755891799926758, -0.00016868114471435547, -0.0010738372802734375, -5.7220458984375e-06, -1.52587890625e-05, -3.814697265625e-06, 0.0, -0.015900757163763046, -0.0003114938735961914, -1.609325408935547e-05, -3.814697265625e-06, -0.0001888275146484375, -0.050357818603515625, -0.06091594696044922, -9.5367431640625e-06, 0.0, -0.0007254462689161301, -2.47955322265625e-05, -2.3245811462402344e-05, -0.0001392364501953125, -0.6650485992431641, -0.004124641418457031, -5.7220458984375e-06, 0.0, -0.00223246356472373, -0.0006021260633133352, -1.740455445542466e-05, -3.814697265625e-06, -1.71661376953125e-05, 0.0, -3.814697265625e-06, 0.0, -0.00030791759490966797, 0.0, -0.006972312927246094, 0.0], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MECH)))])\n"}]}
{"gold_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(\n            CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)),\n            PlayerSelector(EnemyPlayer())))\n", "beams": [{"score": -5.997635439224439, "choice_history": [59, 124, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 34, 139, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 173, 154, "taunt", "<EOS>", 25, 113, "True", "<EOS>", 154, "buffs", "<EOS>", 22, 108, 164, 41, 89, 24, 112, "Effect", "<EOS>", 165, 51, 130, "Used", "Power", "<EOS>", 41, 89, 24, 112, "Action", "Tag", "<EOS>", 165, 41, 89, 24, 112, "Damage", "<EOS>", 164, 55, 41, 88, 24, 112, "Character", "Selector", "<EOS>", 174, 154, "players", "<EOS>", 28, 130, "Enemy", "Player", "<EOS>", 154, "picker", "<EOS>", 28, 130, "Random", "Picker", "<EOS>", 154, "players", "<EOS>", 28, 130, "Both", "Player", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": 8, "hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "taunt", "_type": "keyword"}, {"value": {"elts": [{"args": [{"_type": "Template10", "hole0": "UsedPower"}, {"args": [{"args": [{"_type": "Template17"}], "func": {"_type": "Name", "id": "Damage"}, "_type": "Call"}, {"func": {"_type": "Name", "id": "CharacterSelector"}, "_type": "Call", "keywords": [{"value": {"_type": "Template10", "hole0": "EnemyPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template10", "hole0": "RandomPicker"}, "arg": "picker", "_type": "keyword"}, {"value": {"_type": "Template10", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}]}], "func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Effect"}, "_type": "Call"}], "_type": "List"}, "arg": "buffs", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"hole1": 3, "hole2": "ALL", "hole3": "RARE", "_type": "Template3", "hole0": "Deathlord"}, "_type": "Expr"}], "hole0": "Deathlord", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-1.1444091796875e-05, -0.000194549560546875, -0.0011688811937347054, -0.00018835056107491255, 0.0, -2.384185791015625e-06, -6.0796710386057384e-06, -1.9073486328125e-06, -6.29425048828125e-05, -3.4332275390625e-05, -0.000133514404296875, -4.9591064453125e-05, -3.2186455882765586e-06, -1.728534698486328e-05, -1.1324880688334815e-05, 0.0, -0.00012409687042236328, 0.0, -0.0003262758255004883, 0.0, -6.914137884450611e-06, 0.0, -0.0027443498838692904, 0.0, -3.814697265625e-06, -3.0517578125e-05, -6.4849853515625e-05, 0.0, -3.576278118089249e-07, 0.0, -6.318072337307967e-06, -0.012592194601893425, -9.536738616588991e-07, -0.2857074737548828, -7.62939453125e-06, -0.12128019332885742, -1.9073486328125e-06, -3.814697265625e-06, -1.33514404296875e-05, -0.00017762184143066406, -1.9073486328125e-06, 0.0, -1.3081269264221191, 0.0, -1.52587890625e-05, -9.5367431640625e-06, -0.0010356903076171875, -5.53131103515625e-05, 0.0, 0.0, 0.0, -0.5968093872070312, -2.0265579223632812e-06, -1.52587890625e-05, -0.0002651214599609375, 0.0, -0.4624650478363037, -0.041191935539245605, -1.9073486328125e-06, -0.00014495849609375, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -9.655952453613281e-06, -0.0001506805419921875, -7.62939453125e-06, -0.0002231597900390625, -0.015604019165039062, -0.0002613067626953125, 0.0, 0.0, -1.177808403968811, -6.914137884450611e-06, 0.0, -0.06348991394042969, -0.1903514862060547, -0.02533721923828125, -9.5367431640625e-06, 0.0, -0.02003098838031292, -2.8848648071289062e-05, 0.0, -0.6415224075317383, -0.0003414154052734375, -0.0029621124267578125, -1.9073486328125e-06, -1.33514404296875e-05, -2.47955322265625e-05, -0.23998653888702393, -3.814697265625e-06, 0.0, -9.5367431640625e-06, -0.0028820037841796875, -3.814697265625e-06, -0.0001773834228515625, 0.0, -0.003919363021850586, -0.00021254688908811659, 0.0, -0.0001392364501953125, -0.5079345703125, -4.57763671875e-05, -0.00528717041015625, 0.0, -0.2636662721633911, -5.7220458984375e-05, 0.0], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, buffs=[Effect(UsedPower(),\n            ActionTag(Damage(2), CharacterSelector(players=EnemyPlayer(),\n            picker=RandomPicker(), players=BothPlayer())))])\n"}]}
{"gold_code": "class NerubarWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(\n            BothPlayer(), HasBattlecry()))])\n", "beams": [{"score": -1.5514994741335997, "choice_history": [59, 124, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 34, 139, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 172, 154, "enrage", "<EOS>", 22, 108, 164, 41, 89, 24, 112, "Aura", "<EOS>", 165, 41, 89, 24, 112, "Mana", "Change", "<EOS>", 164, 58, 149, 78, 32, 41, 88, 24, 112, "Card", "Selector", "<EOS>", 172, 154, "condition", "<EOS>", 28, 130, "Is", "Spell", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": 4, "hole3": [{"value": {"elts": [{"args": [{"args": [{"operand": {"_type": "Template18"}, "_type": "UnaryOp", "op": {"_type": "USub"}}], "func": {"_type": "Name", "id": "ManaChange"}, "_type": "Call"}, {"func": {"_type": "Name", "id": "CardSelector"}, "_type": "Call", "keywords": [{"value": {"_type": "Template10", "hole0": "IsSpell"}, "arg": "condition", "_type": "keyword"}]}], "func": {"_type": "Name", "id": "Aura"}, "_type": "Call"}], "_type": "List"}, "arg": "enrage", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"hole1": 2, "hole2": "ALL", "hole3": "COMMON", "_type": "Template3", "hole0": "Nerub'ar Weblord"}, "_type": "Expr"}], "hole0": "Nerub'arWeblord", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-4.9591064453125e-05, -5.91278076171875e-05, -5.9604562920867465e-06, -3.635817120084539e-05, -2.0265410057618283e-05, 0.0, 0.0, -5.960462772236497e-07, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.003086090087890625, -1.71661376953125e-05, -2.5629668016335927e-05, -3.504753112792969e-05, -9.536738616588991e-07, -6.29425048828125e-05, -0.0002640267484821379, 0.0, -2.586841583251953e-05, 0.0, -0.00020575523376464844, 0.0, -5.841255187988281e-06, 0.0, -1.537799835205078e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.000675201416015625, 0.0, 0.0, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.00014972685312386602, -2.3841855067985307e-07, -4.57763671875e-05, -1.9073486328125e-06, -0.8438854217529297, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -0.0012302398681640625, -7.62939453125e-06, -1.9073486328125e-06, 0.0, 0.0, -0.0006829500198364258, -0.000156402587890625, -0.008213043212890625, -0.0050907135009765625, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.04942941665649414, -0.0058290958404541016, -5.14984130859375e-05, -3.24249267578125e-05, -0.30916500091552734, -0.0001392364501953125, -5.7220458984375e-05, -0.04244518280029297, -3.0517578125e-05, -0.0002651214599609375, -0.0004520416259765625, 0.0, -0.00022745132446289062, -3.24249267578125e-05, 0.0, -6.103515625e-05, -1.52587890625e-05, -0.00133514404296875, -2.288818359375e-05, -0.027553558349609375, 0.0, -0.04429362341761589, -0.20592692494392395, -3.62396240234375e-05], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, enrage=[Aura(ManaChange(-1), CardSelector(\n            condition=IsSpell()))])\n"}]}
{"gold_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "beams": [{"score": -0.48520834450967243, "choice_history": [59, 124, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 34, 139, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "4", "<EOS>", "6", "<EOS>", 172, 154, "spell_targetable", "<EOS>", 25, 113, "False", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": 6, "hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "spell_targetable", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"hole1": 5, "hole2": "ALL", "hole3": "COMMON", "_type": "Template3", "hole0": "Spectral Knight"}, "_type": "Expr"}], "hole0": "SpectralKnight", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-3.814697265625e-06, -0.0001430511474609375, -5.531158240046352e-05, -9.65590606938349e-06, -5.292828427627683e-05, -1.7878774087876081e-06, -1.1920928244535389e-07, -3.802774881478399e-05, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.0047454833984375, -1.9073486328125e-05, -2.3841830625315197e-06, -3.3736188925104216e-05, -2.50339189733495e-06, -1.9073486328125e-06, -0.00013731993385590613, 0.0, -0.00011444085248513147, -1.9073486328125e-06, -7.74860309320502e-05, 0.0, -2.0265579223632812e-05, 0.0, -0.0008767843246459961, 0.0, 0.0, -5.7220458984375e-06, -0.001888275146484375, 0.0, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -0.002420270349830389, -2.3841855067985307e-07, -0.000118255615234375, 0.0, -0.4687138795852661, -1.1920928244535389e-07, -0.005223274230957031, -0.0001201629638671875, -0.0003606081008911133, 0.0], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=True)\n"}]}
{"gold_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "beams": [{"score": -2.167898222162414, "choice_history": [59, 124, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Wailing", " ", "Soul", "<EOS>", 48, 117, "4", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 38, 82, 29, "RARE", "<EOS>", 172, 154, "battlecry", "<EOS>", 19, 89, 24, 112, "Battlecry", "<EOS>", 165, 51, 130, "<UNK>", "<EOS>", 41, 88, 24, 112, "Minion", "Selector", "<EOS>", 172, 154, "players", "<EOS>", 28, 130, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "3", "<EOS>", "5", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": 5, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Wailing Soul", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "RARE", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"args": [{"_type": "Template10", "hole0": "<UNK>"}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "keywords": [{"value": {"_type": "Template10", "hole0": "EnemyPlayer"}, "arg": "players", "_type": "keyword"}]}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "WailingSoul", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-3.4332275390625e-05, -4.00543212890625e-05, -0.00013457823661156, -0.00035637227119877934, -1.7046813809429295e-05, 0.0, -3.933906555175781e-06, -8.344629350176547e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.000980377197265625, -9.1552734375e-05, -0.000293731689453125, -2.86102294921875e-05, -5.7220458984375e-06, 0.0, -1.6569954823353328e-05, -0.00012683868408203125, -1.6689286894688848e-06, -3.814697265625e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.682164267753251e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, -7.62939453125e-05, 0.0, -1.1682510375976562e-05, -3.814697265625e-06, -3.24249267578125e-05, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -0.0008562803268432617, 0.0, -0.012597084045410156, -1.9073486328125e-05, -0.0034580230712890625, 0.0, -0.003314971923828125, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.1563299267436378e-05, -7.62939453125e-06, -0.00019073486328125, -0.06398582458496094, -1.9073486328125e-06, -1.1808762550354004, -0.3614269495010376, -0.000518798828125, -0.014502525329589844, -1.71661376953125e-05, 0.0, -9.476952254772186e-05, -3.933906555175781e-06, 0.0, -0.1475973129272461, -7.2479248046875e-05, -0.005740523338317871, 0.0, -3.0517578125e-05, 0.0, -0.3698716163635254, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -1.9669532775878906e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -4.57763671875e-05, 0.0, 0.0, -8.106225322990213e-06, 0.0, -0.00019860267639160156, 0.0], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(<UNK>(), MinionSelector(\n            players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n"}]}
{"gold_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "beams": [{"score": -0.32944267450846354, "choice_history": [59, 124, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 34, 139, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "2", "<EOS>", "3", "<EOS>", 172, 154, "enrage", "<EOS>", 22, 108, 164, 41, 89, 24, 112, "Aura", "<EOS>", 165, 41, 89, 24, 112, "Change", "Attack", "<EOS>", 164, 57, 51, 130, "Self", "Selector", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": 3, "hole3": [{"value": {"elts": [{"args": [{"args": [{"_type": "Template19"}], "func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call"}, {"_type": "Template10", "hole0": "SelfSelector"}], "func": {"_type": "Name", "id": "Aura"}, "_type": "Call"}], "_type": "List"}, "arg": "enrage", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"hole1": 2, "hole2": "ALL", "hole3": "COMMON", "_type": "Template3", "hole0": "Amani Berserker"}, "_type": "Expr"}], "hole0": "AmaniBerserker", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-1.9073486328125e-05, -0.0001983642578125, -1.4662635294371285e-05, -8.332382276421413e-05, -9.536714060232043e-06, -3.576233211788349e-07, -3.814697265625e-06, -7.867794920457527e-06, -5.7220458984375e-06, -5.7220458984375e-06, -5.7220458984375e-06, -7.43865966796875e-05, -1.52587890625e-05, -4.994744449504651e-05, -4.00543212890625e-05, -1.0728830375228426e-06, -1.1920928244535389e-07, -0.001210313057526946, 0.0, -3.6597251892089844e-05, 0.0, -2.8967857360839844e-05, 0.0, -7.748603820800781e-06, 0.0, -1.3351424058782868e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-05, -9.72747802734375e-05, -1.1920906217710581e-07, 0.0, -5.960462772236497e-07, -3.099436753473128e-06, -0.00010895288869505748, -3.3378591979271732e-06, -0.0012073516845703125, -1.9073486328125e-06, -0.007113337516784668, 0.0, -5.340576171875e-05, -1.71661376953125e-05, -0.08151817321777344, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -0.0004047155089210719, -0.0003377199172973633, -0.0012454986572265625, -0.0001049041748046875, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.044920291751623154, -0.00021600723266601562, -4.291534423828125e-06, 0.0, -0.16997146606445312, -0.01277923583984375, 0.0, -0.007372137624770403, -7.82012939453125e-05, 0.0], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n"}]}
{"gold_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            hearthbreaker.cards.Fireball()), PlayerSelector()))])\n", "beams": [{"score": -3.116901952560397, "choice_history": [59, 124, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 34, 139, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 172, 154, "effects", "<EOS>", 22, 108, 164, 41, 89, 24, 112, "Effect", "<EOS>", 165, 41, 89, 24, 112, "Spell", "Cast", "<EOS>", 165, 41, 89, 24, 112, "Not", "<EOS>", 164, 41, 89, 24, 112, "Mana", "Cost", "<EOS>", 164, 56, 51, 130, "Card", "Selector", "<EOS>", 41, 89, 24, 112, "Action", "Tag", "<EOS>", 165, 41, 89, 24, 112, "Add", "Card", "<EOS>", 164, 41, 88, 24, 112, "Card", "Query", "<EOS>", 172, 154, "source", "<EOS>", 16, 82, 24, 112, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 41, 89, 24, 112, "Player", "Selector", "<EOS>", 164, 51, 130, "Enemy", "Player", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": 7, "hole3": [{"value": {"elts": [{"args": [{"args": [{"args": [{"args": [{"_type": "Template18"}], "func": {"_type": "Name", "id": "ManaCost"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Not"}, "_type": "Call"}, {"_type": "Template10", "hole0": "CardSelector"}], "func": {"_type": "Name", "id": "SpellCast"}, "_type": "Call"}, {"args": [{"args": [{"func": {"_type": "Name", "id": "CardQuery"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "<UNK>", "_type": "Attribute"}, "arg": "source", "_type": "keyword"}]}], "func": {"_type": "Name", "id": "AddCard"}, "_type": "Call"}, {"args": [{"_type": "Template10", "hole0": "EnemyPlayer"}], "func": {"_type": "Name", "id": "PlayerSelector"}, "_type": "Call"}], "func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Effect"}, "_type": "Call"}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"hole1": 7, "hole2": "ROGUE", "hole3": "LEGENDARY", "_type": "Template3", "hole0": "Archmage Antonidas"}, "_type": "Expr"}], "hole0": "ArchmageAntonidas", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [0.0, -4.9591064453125e-05, -0.019978368654847145, -0.0004463391669560224, -5.8054491091752425e-05, -4.7681896830908954e-07, -1.9073486328125e-06, -1.3709068298339844e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.1444091796875e-05, -5.14984130859375e-05, -6.4849853515625e-05, -1.6689160474925302e-05, -2.8967857360839844e-05, -4.768370445162873e-07, -0.0006580352783203125, -0.002138609066605568, -9.5367431640625e-06, -0.3857572078704834, -1.9073486328125e-06, -0.011393308639526367, 0.0, -1.3112994565744884e-05, 0.0, -3.159045081702061e-05, 0.0, -1.9073486328125e-06, -4.00543212890625e-05, -0.0001678466796875, 0.0, -9.417532055522315e-06, -0.00012993812561035156, -1.2040087312925607e-05, -5.841253368998878e-06, -2.4676177417859435e-05, -1.1444091796875e-05, -9.5367431640625e-06, -4.708732740255073e-05, 0.0, -3.814697265625e-06, -5.53131103515625e-05, -0.03278923034667969, -1.9073486328125e-06, -3.814697265625e-06, -4.57763671875e-05, -2.47955322265625e-05, -0.00020229816436767578, -8.606910705566406e-05, -5.340576171875e-05, -0.12751293182373047, -0.15456390380859375, -0.0001354217529296875, -9.5367431640625e-06, -0.03744504973292351, -0.0009785890579223633, -4.5299530029296875e-06, -0.00038909912109375, -3.814697265625e-06, -1.71661376953125e-05, -2.09808349609375e-05, 0.0, -0.652616024017334, -0.0015755891799926758, -1.52587890625e-05, -1.9073486328125e-06, -0.019815444946289062, -2.86102294921875e-05, 0.0, -0.15197861194610596, -0.013688445091247559, 0.0, -0.0023040771484375, -0.004207611083984375, -0.026988983154296875, 0.0, -0.3996129035949707, -0.002342820167541504, 0.0, -0.0012359619140625, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.0004546642303466797, -7.82012939453125e-05, -3.814697265625e-06, -1.71661376953125e-05, -5.340576171875e-05, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -0.035178422927856445, -4.744529724121094e-05, -0.00045680999755859375, -2.86102294921875e-05, -0.0002040863037109375, -0.000408172607421875, -2.86102294921875e-05, 0.0, -9.775161743164062e-05, -0.001068115234375, -1.9073486328125e-05, -0.01442718505859375, -1.9073486328125e-06, -0.21452248096466064, 0.0, -0.00020599365234375, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -0.0002841949462890625, -1.9073486328125e-06, -0.12398719787597656, -1.9073486328125e-06, -0.004573822021484375, -1.9073486328125e-05, 0.0, 0.0, -0.0013903379440307617, -1.9073486328125e-06, 0.0, -3.814697265625e-05, -0.0021953582763671875, -3.814697265625e-05, -0.6649572849273682, -2.4437902538920753e-05, 0.0], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(Not(ManaCost(1)),\n            CardSelector()), ActionTag(AddCard(CardQuery(source=CARD_SOURCE\n            .<UNK>)), PlayerSelector(EnemyPlayer())))])\n"}]}
{"gold_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)\n", "beams": [{"score": -1.413472770022473, "choice_history": [59, 126, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 168, 49, 121, "Bananas", "<EOS>", 56, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 52, 47, 113, "False", "<EOS>", 172, 154, "target_func", "<EOS>", 16, 82, 16, 82, 24, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 178, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 76, 146, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 164, 56], "model_output": {"hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"hole1": "change_attack", "hole2": [{"_type": "Template18"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}}], "hole2": [{"value": {"args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template18"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"_type": "Template11"}, {"value": true, "_type": "NameConstant"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "Bananas", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-0.0009403228759765625, -0.001018524169921875, -5.125999450683594e-06, -5.209310256759636e-05, -1.1920883480343036e-07, -2.503394853192731e-06, -1.1920922133867862e-06, -3.24249267578125e-05, -2.86102294921875e-05, -5.7220458984375e-06, -9.1552734375e-05, -0.00016021728515625, -5.7220458984375e-06, -0.23142623901367188, -0.0002899169921875, -1.9073486328125e-06, -1.537788011773955e-05, -1.1086449376307428e-05, -3.814697265625e-05, -0.0001316070556640625, -1.52587890625e-05, -2.47955322265625e-05, 0.0, -3.039830335183069e-05, -2.3841855067985307e-07, -0.002234816551208496, 0.0, -0.0001926422119140625, -2.288818359375e-05, -7.62939453125e-06, -0.00029647350311279297, -1.9073486328125e-06, -8.20159912109375e-05, -3.0517578125e-05, -3.4332275390625e-05, 0.0, -7.62939453125e-06, -0.0001239776611328125, -6.103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.00020599365234375, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -0.12448978424072266, 0.0, -1.71661376953125e-05, 0.0, -1.5974044799804688e-05, 0.0, -1.71661376953125e-05, -2.47955322265625e-05, -7.62939453125e-06, -7.212162017822266e-05, -1.3589859008789062e-05, -0.6825342178344727, -1.9073486328125e-06, -1.9073486328125e-05, -2.09808349609375e-05, -7.62939453125e-06, -6.103509076638147e-05, -2.6702880859375e-05, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -1.52587890625e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-05, -0.00159454345703125, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -1.9073486328125e-05, 0.0, -2.288818359375e-05, 0.0, -0.000186920166015625, 0.0, -0.1755683422088623, -1.1920928244535389e-07, -5.7220458984375e-06, -0.19083404541015625], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n"}]}
{"gold_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(DoubleAttack()))\n", "beams": [{"score": -2.1440416792738617, "choice_history": [59, 126, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Blessed", " ", "Champion", "<EOS>", 48, 117, "5", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 38, 82, 29, "RARE", "<EOS>", 172, 154, "target_func", "<EOS>", 16, 82, 16, 82, 24, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 178, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 76, 146, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 164, 57], "model_output": {"hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"hole1": "change_attack", "hole2": [{"_type": "Template19"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}}], "hole2": [{"value": {"args": [{"s": "Blessed Champion", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "RARE", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "BlessedChampion", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-3.814697265625e-06, -0.000209808349609375, -2.5987286790041253e-05, -0.000593962671700865, -0.00024268247943837196, -6.674817996099591e-06, -3.4689903259277344e-05, -3.1470757676288486e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -0.03864097595214844, -0.001220703125, -0.00025177001953125, -4.9591064453125e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.00011455356434453279, -0.00018918514251708984, -1.1205629562027752e-05, -0.0003104190400335938, -0.0001888275146484375, -1.52587890625e-05, -6.41325386823155e-05, -1.4424245819100179e-05, 0.0, -1.71661376953125e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.1444091796875e-05, -1.1920928244535389e-07, -0.21590328216552734, -5.7220458984375e-06, -4.9591064453125e-05, 0.0, -0.00313568115234375, -0.23852801322937012, -9.5367431640625e-06, -4.38690185546875e-05, -2.09808349609375e-05, -2.86102294921875e-05, 0.0, -1.71661376953125e-05, -3.0517578125e-05, -8.7738037109375e-05, 0.0, -3.814697265625e-06, 0.0, -0.0001010894775390625, -3.814697265625e-06, -0.00020039081573486328, -9.5367431640625e-06, -0.010940790176391602, -1.52587890625e-05, -2.47955322265625e-05, 0.0, -0.00010967244452331215, 0.0, -3.24249267578125e-05, -2.09808349609375e-05, -6.103515625e-05, -0.00015866756439208984, 0.0, -0.5372552871704102, -1.9073486328125e-06, -0.0001811981201171875, -1.1444091796875e-05, -5.340576171875e-05, -1.2159347534179688e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -0.0001583099365234375, -5.7220458984375e-05, 0.0, -2.6702880859375e-05, 0.0, -1.33514404296875e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.002559661865234375, -0.0003185272216796875, -5.7220458984375e-06, -1.1444091796875e-05, -0.0001049041748046875, 0.0, -0.001293182373046875, 0.0, -8.0108642578125e-05, 0.0, -0.05141186714172363, 0.0, 0.0, -1.0385770797729492], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n"}]}
{"gold_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(\n            AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "beams": [{"score": -2.2564213832347093, "choice_history": [59, 124, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Cabal", " ", "Shadow", " ", "Priest", "<EOS>", 48, 117, "6", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 38, 82, 29, "EPIC", "<EOS>", 172, 154, "battlecry", "<EOS>", 19, 89, 24, 112, "Battlecry", "<EOS>", 165, 51, 130, "Kill", "<EOS>", 41, 89, 24, 112, "Minion", "Selector", "<EOS>", 166, 41, 89, 24, 112, "Attack", "<UNK>", "Than", "<UNK>", "Equal", "To", "<EOS>", 164, 55, 51, 130, "Enemy", "Player", "<EOS>", 51, 130, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "4", "<EOS>", "5", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": 5, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Cabal Shadow Priest", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "EPIC", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"args": [{"_type": "Template10", "hole0": "Kill"}, {"args": [{"args": [{"_type": "Template17"}], "func": {"_type": "Name", "id": "Attack<UNK>Than<UNK>EqualTo"}, "_type": "Call"}, {"_type": "Template10", "hole0": "EnemyPlayer"}, {"_type": "Template10", "hole0": "RandomPicker"}], "func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "CabalShadow", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [0.0, -5.91278076171875e-05, -0.0009465522598475218, -0.08452284336090088, -0.037199899554252625, -1.1920565157197416e-07, 0.0, -2.3841855067985307e-07, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -6.67572021484375e-05, -3.4332275390625e-05, -3.24249267578125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -2.9682672902708873e-05, -3.0517578125e-05, -0.0023508069571107626, -0.37870311737060547, -4.2080762796103954e-05, -6.29425048828125e-05, -2.47955322265625e-05, 0.0, -0.00016294927627313882, -4.172325134277344e-06, 0.0, 0.0, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -0.9895049333572388, -6.29425048828125e-05, -1.9073486328125e-06, -5.53131103515625e-05, -0.00012969970703125, -0.023913860321044922, -6.687641143798828e-05, -0.02037525177001953, 0.0, -0.060092926025390625, 0.0, -0.011304855346679688, 0.0, -1.52587890625e-05, 0.0, -8.82148651726311e-06, -3.814697265625e-06, -0.0005588531494140625, -0.0020627975463867188, 0.0, -0.22693639993667603, -0.00010573344479780644, -0.000156402587890625, -0.0005130767822265625, -6.4849853515625e-05, -2.86102294921875e-05, -0.0005198842845857143, -2.1457672119140625e-06, -7.748603820800781e-06, -0.008893966674804688, -0.000457763671875, -0.000423431396484375, -6.67572021484375e-05, -5.7220458984375e-06, -0.2975656986236572, -0.00031244754791259766, -0.014748799614608288, -0.0009273290634155273, -0.05551469326019287, -0.009356021881103516, -0.00017750263214111328, -0.0002307891845703125, -0.00200653076171875, -0.00031280517578125, -5.7220458984375e-06, -0.0008608096977695823, -3.814697265625e-06, 0.0, -0.000370025634765625, -3.814697265625e-06, -0.022582173347473145, -0.00030575666460208595, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -1.537799835205078e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.1918018572032452e-07, -9.5367431640625e-06, -1.6927462638705038e-05, 0.0, -0.0004082440282218158, 0.0], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            Attack<UNK>Than<UNK>EqualTo(2), EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}]}
{"gold_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        index = self.target.index\n        if self.target.index < len(self.target.player.minions) - 1:\n            minion = self.target.player.minions[index + 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target.index > 0:\n            minion = self.target.player.minions[index - 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n", "beams": [{"score": -7.248539266791795, "choice_history": [59, 126, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Cone", " ", "of", " ", "Cold", "<EOS>", 48, 117, "4", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 52, 172, 154, "target_func", "<EOS>", 16, 82, 16, 82, 24, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 179, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 64, 81, 164, 46, 112, "targets", "<EOS>", 19, 89, 16, 82, 16, 82, 24, 112, "game", "<EOS>", "other_player", "<EOS>", "agent", "<EOS>", 165, 38, 82, 24, 112, "player", "<EOS>", "game", "<EOS>", 43, 106, 3, 141, "x", "<EOS>", 25, 113, "True", "<EOS>", 69, 95, 24, 112, "target", "<EOS>", 24, 112, "targets", "<EOS>", 177, 76, 146, 24, 112, "target", "<EOS>", "change_attack", "<EOS>", 164, 56], "model_output": {"hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"value": {"args": [{"value": {"_type": "Name", "id": "player"}, "attr": "game", "_type": "Attribute"}, {"args": {"_type": "Template6", "hole0": "x"}, "_type": "Lambda", "body": {"value": true, "_type": "NameConstant"}}], "func": {"value": {"value": {"_type": "Name", "id": "game"}, "attr": "other_player", "_type": "Attribute"}, "attr": "agent", "_type": "Attribute"}, "_type": "Call"}, "_type": "Assign", "targets": [{"_type": "Name", "id": "targets"}]}, {"target": {"_type": "Name", "id": "target"}, "iter": {"_type": "Name", "id": "targets"}, "_type": "For", "body": [{"hole1": "change_attack", "hole2": [{"_type": "Template18"}], "_type": "Template9", "hole0": {"_type": "Name", "id": "target"}}]}], "hole2": [{"value": {"args": [{"s": "Cone of Cold", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template11"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "ConeOfCold", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-1.33514404296875e-05, -0.0001850128173828125, -0.00011705678480211645, -0.000420093274442479, -0.0018035657703876495, -8.344650268554688e-06, -2.0265574676159304e-06, -2.0265579223632812e-06, -2.0265558760002023e-06, -0.000141143798828125, -2.86102294921875e-05, 0.0, -0.04335498809814453, -0.0002498626708984375, -7.62939453125e-06, -8.392333984375e-05, 0.0, -0.0001163482666015625, -1.7762025890988298e-05, -0.0005609989166259766, -1.9788731151493266e-05, -0.00014543533325195312, -1.01327859738376e-05, -0.001636505126953125, -0.0002422332763671875, -3.814697265625e-06, -1.4305071545095416e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -7.05718994140625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.36941826343536377, 0.0, -0.0001373291015625, -9.5367431640625e-06, -1.52587890625e-05, -7.62939453125e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.1444091796875e-05, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, 0.0, -0.01320648193359375, 0.0, -0.0005283355712890625, 0.0, -0.00858604907989502, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -4.398822784423828e-05, 0.0, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.05718994140625e-05, -1.013803482055664, -0.000102996826171875, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -1.3470647900248878e-05, -9.5367431640625e-06, -2.0265579223632812e-06, 0.0, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -8.96453857421875e-05, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -0.18083477020263672, -3.814697265625e-06, -7.62939453125e-06, -0.00063323974609375, -1.9073486328125e-06, -0.47366929054260254, 0.0, -0.1315135955810547, -0.1255168914794922, -7.62939453125e-06, -1.9073486328125e-06, -0.3148326873779297, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -0.6975890398025513, -3.814697265625e-06, -0.40146327018737793, -1.9073486328125e-06, -0.3660733699798584, -0.00010442733764648438, -0.023771286010742188, -0.4987640380859375, -2.09808349609375e-05, -0.006936073303222656, 0.0, -0.054932594299316406, 0.0, -0.059546470642089844, -7.62939453125e-06, -0.0016307830810546875, -5.7220458984375e-05, -0.0004253387451171875, -0.00057220458984375, -0.09277462959289551, -0.0016203088453039527, -0.010876655578613281, -0.003943443298339844, -0.00022709369659423828, -0.0003072023391723633, -0.7124233245849609, -0.0004367828369140625, -1.33514404296875e-05, -1.9073486328125e-06, -0.01760125160217285, 0.0, -0.0523834228515625, -0.0002918243408203125, -0.07710659503936768, 0.0, -0.00258636474609375, -0.0005340576171875, -1.33514404296875e-05, -0.0002040863037109375, 0.0, -0.06703591346740723, 0.0, -1.2739062309265137, -4.649158654501662e-06, -9.5367431640625e-06, -0.13969039916992188], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = game.other_player.agent(player.game, lambda x: True)\n        for target in targets:\n            target.change_attack(1)\n"}]}
{"gold_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"score": -3.2728515740552595, "choice_history": [59, 124, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Defender", " ", "of", " ", "Argus", "<EOS>", 48, 117, "4", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 38, 82, 29, "RARE", "<EOS>", 172, 154, "battlecry", "<EOS>", 19, 89, 24, 112, "Battlecry", "<EOS>", 165, 41, 89, 24, 112, "Give", "<EOS>", 164, 44, 108, 165, 41, 89, 24, 112, "Buff", "<EOS>", 164, 41, 89, 24, 112, "Change", "Attack", "<EOS>", 164, 55, 41, 89, 24, 112, "Buff", "<EOS>", 164, 41, 89, 24, 112, "Change", "Health", "<EOS>", 164, 55, 41, 89, 24, 112, "Minion", "Selector", "<EOS>", 165, 51, 130, "Minion", "Has", "and", "<EOS>", 51, 130, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "2", "<EOS>", "3", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": 3, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Defender of Argus", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "RARE", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"args": [{"args": [{"elts": [{"args": [{"args": [{"_type": "Template17"}], "func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Buff"}, "_type": "Call"}, {"args": [{"args": [{"_type": "Template17"}], "func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Buff"}, "_type": "Call"}], "_type": "List"}], "func": {"_type": "Name", "id": "Give"}, "_type": "Call"}, {"args": [{"_type": "Template10", "hole0": "MinionHasand"}, {"_type": "Template10", "hole0": "EnemyPlayer"}], "func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "DefenderOfArgus", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [0.0, -9.5367431640625e-05, -8.332382276421413e-05, -0.04470296949148178, -0.00037222274113446474, -7.748586540401448e-06, 0.0, -3.814697265625e-06, -3.2186455882765586e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -0.002010345458984375, -0.0004119873046875, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.0001510267611593008, -0.0002804994583129883, -1.7523747374070808e-05, -5.9485435485839844e-05, -6.0796710386057384e-06, -0.00041961669921875, -3.0517578125e-05, -9.5367431640625e-06, -3.957567969337106e-05, 0.0, 0.0, 0.0, -3.4332275390625e-05, 0.0, -2.0265579223632812e-06, -3.814697265625e-06, -3.814697265625e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -2.288818359375e-05, -0.03375566005706787, -3.814697265625e-06, -0.00016021728515625, -6.29425048828125e-05, -0.04238319396972656, 0.0, -0.0021572113037109375, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -3.4213022445328534e-05, -3.814697265625e-06, -0.0009002685546875, -0.021322250366210938, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, -0.01556801050901413, -0.006008279975503683, -0.011168479919433594, -0.0040149688720703125, -1.1444091796875e-05, -0.0022735595703125, -1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -0.0011588321067392826, -2.7179718017578125e-05, -0.0002498626708984375, -0.0021686553955078125, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0014758416218683124, -0.08377909660339355, -7.212160562630743e-05, -9.5367431640625e-06, -0.112396240234375, -2.288818359375e-05, -1.9073486328125e-06, 0.0, 0.0, -0.0015649513807147741, -2.5033725250978023e-05, -8.96453857421875e-05, -0.26808738708496094, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0022546793334186077, -0.028253555297851562, -1.7404405298293568e-05, -3.0517578125e-05, -0.4427976608276367, -0.015224456787109375, -0.1493854522705078, -1.1444091796875e-05, 0.0, -0.0002715587615966797, -3.814697265625e-06, -1.1920928244535389e-07, -0.250274658203125, -0.582606315612793, 0.0, -0.06904223561286926, -0.03705883026123047, -0.9323931932449341, -0.02221369743347168, -0.009217262268066406, 0.0, -0.05887866020202637, -5.996227264404297e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -3.504753112792969e-05, 0.0, -1.9073486328125e-06, -1.52587890625e-05, -0.012872695922851562, -1.1920883480343036e-07, 0.0, -7.152543730626348e-06, 0.0, -2.0265579223632812e-06, 0.0], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(2))]), MinionSelector(MinionHasand(),\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}]}
{"gold_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, buffs=[Buff(Windfury())])\n", "beams": [{"score": -1.2621978419670015, "choice_history": [59, 124, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Doomhammer", "<EOS>", 48, 117, "5", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 38, 82, 29, "EPIC", "<EOS>", 172, 154, "overload", "<EOS>", 31, "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": 8, "_type": "Template8", "hole0": "Weapon"}], "hole2": [{"value": {"args": [{"s": "Doomhammer", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "EPIC", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"_type": "Template17"}, "arg": "overload", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "Doomhammer", "hole1": "WeaponCard", "_type": "Template0"}, "score_history": [0.0, -0.000171661376953125, -0.0046306755393743515, -1.1324880688334815e-05, -3.886147169396281e-05, -9.655950634623878e-06, -9.5367431640625e-06, -3.814697265625e-06, -9.34600830078125e-05, 0.0, -0.0023212432861328125, -0.011369705200195312, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -9.536738616588991e-07, -1.52587890625e-05, -0.07848930358886719, -1.9073486328125e-06, -1.3112935448589269e-05, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, -0.000209808349609375, 0.0, -3.814697265625e-06, -3.814697265625e-06, -0.09885978698730469, -0.000396728515625, -1.9073486328125e-06, -9.5367431640625e-06, -0.000125885009765625, -0.2243415117263794, -3.814697265625e-05, -0.03175926208496094, -1.9073486328125e-06, -0.14190387725830078, -0.001659393310546875, -0.34063720703125, -0.0061435699462890625, 0.0, -0.011280298233032227, 0.0, -0.0005130767822265625, -7.62939453125e-06, -0.008554458618164062, -2.384185791015625e-06, -0.0003892183303833008, -5.5193893786054105e-05, 0.0, -0.2980978488922119, 0.0], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8)\n"}]}
{"gold_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence()\n        self.target.damage(player.effective_spell_damage(1), self)\n", "beams": [{"score": -2.906803929522617, "choice_history": [59, 126, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Earth", " ", "Shock", "<EOS>", 56, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 52, 172, 154, "target_func", "<EOS>", 16, 82, 16, 82, 24, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 179, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 76, 146, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 165, 41, 89, 16, 82, 24, 112, "player", "<EOS>", "effective_spell_damage", "<EOS>", 164, 56, 46, 112, "self", "<EOS>", 76, 145, 24, 112, "player", "<EOS>", "draw", "<EOS>"], "model_output": {"hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"hole1": "damage", "hole2": [{"args": [{"_type": "Template18"}], "func": {"value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "_type": "Call"}, {"_type": "Name", "id": "self"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}}, {"hole1": "draw", "_type": "Template9", "hole0": {"_type": "Name", "id": "player"}}], "hole2": [{"value": {"args": [{"s": "Earth Shock", "_type": "Str"}, {"_type": "Template18"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template11"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "EarthShock", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-0.0002002716064453125, -6.4849853515625e-05, -2.3841855067985307e-07, -7.664863369427621e-05, -7.987022399902344e-06, -3.5762423067353666e-07, -4.410743713378906e-06, -2.622604142743512e-06, -1.1444091796875e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.000141143798828125, -2.6702880859375e-05, -3.814697265625e-06, -0.01424407958984375, -5.7220458984375e-06, -8.20159912109375e-05, -4.410734163684538e-06, -7.355213165283203e-05, -4.768370445162873e-07, 0.0, -4.76837158203125e-05, -5.7220458984375e-06, -1.33514404296875e-05, -5.91278076171875e-05, 0.0, -2.193450927734375e-05, -1.1920928244535389e-07, -0.9200440645217896, 0.0, -0.0002307891845703125, -5.53131103515625e-05, 0.0, -2.6702880859375e-05, 0.0, -2.09808349609375e-05, -0.0001850128173828125, -4.00543212890625e-05, 0.0, -1.9073486328125e-06, 0.0, -0.00038909912109375, -1.9073486328125e-06, -6.330013275146484e-05, 0.0, -0.08837342262268066, 0.0, -1.52587890625e-05, 0.0, -4.041194188175723e-05, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-06, -2.6225903638987802e-05, -1.9311904907226562e-05, -1.012075424194336, -1.71661376953125e-05, -3.814697265625e-06, -8.392333984375e-05, -7.62939453125e-06, -8.999962301459163e-05, -4.076957702636719e-05, -8.940672159951646e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -1.33514404296875e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.48385143280029297, -6.67572021484375e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021343231201171875, 0.0, -1.52587890625e-05, -3.814697265625e-06, -1.990795135498047e-05, 0.0, -0.0002568667696323246, -2.9802276912960224e-06, -6.4849853515625e-05, -0.19219398498535156, -0.0023651123046875, -9.5367431640625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.00048065185546875, 0.0, -0.00023329244868364185, 0.0, -0.000118255615234375, -0.0006847381591796875, -3.24249267578125e-05, 0.0, -0.12756133079528809, -0.00017166123143397272, -0.021221160888671875, -0.0003070831298828125, -0.0019683837890625, 0.0, -0.01148998737335205, 0.0, -0.024406909942626953, -7.62939453125e-06], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        player.draw()\n"}]}
{"gold_code": "class EyeForAnEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, character, attacker, amount):\n        if character.is_hero():\n            character.player.opponent.hero.damage(amount, self)\n        super().reveal()\n\n    def activate(self, player):\n        player.bind('character_damaged', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('character_damaged', self._reveal)\n", "beams": [{"score": -4.242560771338489, "choice_history": [59, 125, "Eye", "for", "<EOS>", "Secret", "Card", "<EOS>", 177, 68, 94, 34, 139, "Eye", " ", "for", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "COMMON", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 177, 76, 146, 16, 82, 16, 82, 24, 112, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 165, 49, 121, "minion_played", "<EOS>", 38, 82, 24, 112, "self", "<EOS>", "_reveal", "<EOS>", 178, 70, 96, "deactivate", "<EOS>", 2, 177, 76, 146, 16, 82, 16, 82, 24, 112, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 165, 49, 121, "character_attack", "<EOS>", 38, 82, 24, 112, "self", "<EOS>", "_reveal", "<EOS>", 70, 96, "_reveal", "<EOS>", 4, 152, 159, 0, 1, 151, "minion", "<EOS>", 178, 76, 146, 24, 112, "minion", "<EOS>", "damage", "<EOS>", 165, 48, 117, "4", "<EOS>", 47, 114, "Null", "<EOS>", 76, 145, 28, 130, "super", "<EOS>", "reveal", "<EOS>"], "model_output": {"hole7": [{"name": "deactivate", "args": {"_type": "Template4"}, "_type": "FunctionDef", "body": [{"hole1": "unbind", "hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Name", "id": "self"}, "attr": "_reveal", "_type": "Attribute"}], "_type": "Template9", "hole0": {"value": {"value": {"_type": "Name", "id": "player"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}}]}, {"name": "_reveal", "args": {"args": [{"_type": "Template12"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"hole1": "damage", "hole2": [{"n": 4, "_type": "Num"}, {"value": "Null", "_type": "NameConstant"}], "_type": "Template9", "hole0": {"_type": "Name", "id": "minion"}}, {"hole1": "reveal", "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}]}], "hole4": "player", "hole3": "activate", "hole6": [{"hole1": "bind", "hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Name", "id": "self"}, "attr": "_reveal", "_type": "Attribute"}], "_type": "Template9", "hole0": {"value": {"value": {"_type": "Name", "id": "player"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}}], "hole2": [{"value": {"hole1": 1, "hole2": "PRIEST", "hole3": "COMMON", "_type": "Template3", "hole0": "Eye for"}, "_type": "Expr"}], "hole0": "Eyefor", "hole1": "SecretCard", "_type": "Template0"}, "score_history": [-1.71661376953125e-05, -0.39749908447265625, -4.279521817807108e-05, -0.7699702978134155, -0.0007941678049974144, -0.0007146596326492727, -1.5139551578613464e-05, -1.990795135498047e-05, -0.004756927490234375, -4.9591064453125e-05, -2.86102294921875e-05, -0.0006256103515625, -9.34600830078125e-05, -3.862306402879767e-05, -0.000286102294921875, -0.10399627685546875, -0.35091209411621094, -0.0009292364120483398, -1.537799835205078e-05, -0.5173013210296631, 0.0, -2.133846101060044e-05, 0.0, -0.006215095520019531, 0.0, -0.010320782661437988, 0.0, -0.0022296905517578125, -0.0005950927734375, -9.5367431640625e-06, -0.0037927627563476562, -4.9591064453125e-05, -0.015612602233886719, -0.000118255615234375, -7.62939453125e-06, -1.9073486328125e-06, -0.0009174346923828125, 0.0, -0.0010167360305786133, -9.5367431640625e-06, -0.0049103498458862305, -1.1920928244535389e-07, -0.03453850746154785, 0.0, -1.33514404296875e-05, -0.0001316070556640625, -3.814697265625e-06, -0.8494158983230591, -0.0012722015380859375, -8.0108642578125e-05, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -0.0020999908447265625, -5.7220458984375e-05, -0.000911712646484375, 0.0, -0.0009784698486328125, -0.0002117156982421875, -2.47955322265625e-05, -0.003412008285522461, 0.0, -0.0012111663818359375, -2.47955322265625e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.0099945068359375, -7.62939453125e-06, -0.0001163482666015625, -1.1444091796875e-05, -1.71661376953125e-05, 0.0, -0.0006008148193359375, 0.0, -0.00125885009765625, -7.62939453125e-06, -0.002526521449908614, 0.0, -0.011951354332268238, -2.1457672119140625e-06, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -0.7858223915100098, 0.0, -1.9073486328125e-05, 0.0, -1.1444091796875e-05, 0.0, -0.0017805099487304688, -3.4332275390625e-05, -0.000743865966796875, 0.0, -0.000164031982421875, -9.918212890625e-05, -0.07573890686035156, -1.9073486328125e-06, -0.000553131103515625, -0.0003681182861328125, -0.0370941162109375, -0.004734039306640625, -0.0002117156982421875, -3.24249267578125e-05, -0.024635791778564453, -1.9073486328125e-06, -0.027166366577148438, -0.000301361083984375, -0.0003681182861328125, -0.000125885009765625, 0.0, -0.000590205192565918, -1.1920928244535389e-07, -0.1496487557888031, 0.0, -0.0001773834228515625, -0.0024709701538085938, -3.814697265625e-05, -0.005678136367350817, -3.814697265625e-06, -0.0024394989013671875, -0.0018405914306640625, -0.002977609634399414, -1.33514404296875e-05, -0.000579833984375, -8.20159912109375e-05, -5.14984130859375e-05, -1.9073486328125e-06, -0.0007838779711164534, -2.5510735213174485e-05, -0.00023102758859749883, -3.063678741455078e-05], "inferred_code": "class Eyefor(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for', 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.\n            COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n\n    def _reveal(self, minion):\n        minion.damage(4, Null)\n        super().reveal()\n"}]}
{"gold_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in hearthbreaker.targeting.find_minion_spell_target(game,\n            lambda m: m.stealth):\n            minion.stealth = False\n        for secret in game.other_player.secrets:\n            secret.deactivate(game.other_player)\n        game.other_player.secrets = []\n        player.draw()\n", "beams": [{"score": -2.94582150272754, "choice_history": [59, 126, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 34, 139, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 179, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 64, 81, 164, 46, 112, "targets", "<EOS>", 19, 89, 16, 82, 24, 112, "copy", "<EOS>", "copy", "<EOS>", 164, 38, 82, 16, 82, 24, 112, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 76, 146, 24, 112, "<UNK>", "<EOS>", "summon", "<EOS>", 166, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 41, 89, 24, 112, "len", "<EOS>", 164, 38, 82, 24, 112, "player", "<EOS>", "minions", "<EOS>"], "model_output": {"hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"value": {"args": [{"value": {"value": {"_type": "Name", "id": "game"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "func": {"value": {"_type": "Name", "id": "copy"}, "attr": "copy", "_type": "Attribute"}, "_type": "Call"}, "_type": "Assign", "targets": [{"_type": "Name", "id": "targets"}]}, {"hole1": "summon", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"args": [{"value": {"_type": "Name", "id": "player"}, "attr": "minions", "_type": "Attribute"}], "func": {"_type": "Name", "id": "len"}, "_type": "Call"}], "_type": "Template9", "hole0": {"_type": "Name", "id": "<UNK>"}}], "hole2": [{"value": {"hole1": 2, "hole2": "HUNTER", "hole3": "RARE", "_type": "Template3", "hole0": "Flare"}, "_type": "Expr"}], "hole0": "Flare", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-0.00064849853515625, -7.43865966796875e-05, -4.053113570989808e-06, -2.324580964341294e-05, -6.07810216024518e-06, -6.794917680963408e-06, -2.6702764444053173e-05, -5.7220458984375e-05, -7.82012939453125e-05, -0.0009632110595703125, -0.000102996826171875, -0.0001316070556640625, -4.291525328881107e-06, -8.58306884765625e-06, -2.2291887944447808e-05, -5.7220458984375e-06, -0.1626225709915161, 0.0, -0.0073070526123046875, 0.0, -7.748603820800781e-06, 0.0, -0.000718235969543457, 0.0, -7.62939453125e-06, -3.814697265625e-06, -2.86102294921875e-05, -3.3378591979271732e-06, -1.919269561767578e-05, -0.5920791625976562, -6.4849853515625e-05, -3.814697265625e-06, -0.000576019287109375, -8.20159912109375e-05, -9.894371032714844e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0001678466796875, -2.47955322265625e-05, 0.0, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.4863414764404297, 0.0, -5.7220458984375e-06, -0.000362396240234375, -1.9073486328125e-06, -0.2611992359161377, 0.0, -0.00551605224609375, -0.0002288818359375, -3.814697265625e-06, -3.814697265625e-06, -0.04196739196777344, 0.0, -0.011254191398620605, -1.71661376953125e-05, -0.0016393661499023438, -1.52587890625e-05, -4.9591064453125e-05, -0.017377853393554688, 0.0, -0.0040607452392578125, 0.0, -0.20434856414794922, 0.0, -0.11709022521972656, -5.7220458984375e-06, -0.0017523765563964844, 0.0, -0.05338704213500023, -5.7220458984375e-06, -0.33909130096435547, -0.0016231536865234375, -0.00026702880859375, 0.0, -0.2664656639099121, -0.0019390579545870423, -0.1584073156118393, -0.000835418701171875, -0.000423431396484375, -0.000293731689453125, 0.0, -1.52587890625e-05, 0.0, -0.15047073364257812, 0.0, -0.014666080474853516, 0.0, -0.007521629333496094, -0.00052642822265625, -9.5367431640625e-06, -1.9073486328125e-06, -0.018870830535888672, -2.300739288330078e-05, -2.09808349609375e-05, -0.00011444091796875, 0.0, -0.007663726806640625, 0.0, -5.9604644775390625e-06, 0.0, -0.004001736640930176, -1.9073486328125e-06], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        <UNK>.summon(player, game, len(player.minions))\n"}]}
{"gold_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(),\n            TargetIsMinion())), [ActionTag(IncreaseDurability(),\n            WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1),\n            WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1),\n            AttackCompleted())), HeroSelector())])])\n", "beams": [{"score": -1.7202324145955572, "choice_history": [59, 124, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 177, 68, 94, 34, 139, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 177, 75, 144, "Weapon", "<EOS>", "7", "<EOS>", "7", "<EOS>", 172, 154, "effects", "<EOS>", 22, 108, 164, 41, 89, 24, 112, "Effect", "<EOS>", 165, 51, 130, "Minion", "Summoned", "<EOS>", 41, 89, 24, 112, "Action", "Tag", "<EOS>", 165, 51, 130, "<UNK>", "Durability", "<EOS>", 51, 130, "Weapon", "Selector", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_weapon", "hole6": [{"hole1": 7, "hole2": 7, "hole3": [{"value": {"elts": [{"args": [{"_type": "Template10", "hole0": "MinionSummoned"}, {"args": [{"_type": "Template10", "hole0": "<UNK>Durability"}, {"_type": "Template10", "hole0": "WeaponSelector"}], "func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Effect"}, "_type": "Call"}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "_type": "Template8", "hole0": "Weapon"}], "hole2": [{"value": {"hole1": 7, "hole2": "PRIEST", "hole3": "FREE", "_type": "Template3", "hole0": "Gorehowl"}, "_type": "Expr"}], "hole0": "Gorehowl", "hole1": "WeaponCard", "_type": "Template0"}, "score_history": [-1.9073486328125e-06, -0.003177642822265625, -0.0006375167286023498, -0.39468973875045776, -5.4835247283335775e-05, -3.0040489946259186e-05, -4.410734163684538e-06, -1.9073486328125e-06, -1.71661376953125e-05, -1.9073486328125e-06, -0.1268787384033203, -3.814697265625e-06, -1.311301275563892e-06, -1.668929871811997e-05, -9.326636791229248e-05, -1.5497207641601562e-05, -0.0610041618347168, 0.0, -0.1265113353729248, 0.0, -0.03292489051818848, 0.0, -0.0001022815631586127, 0.0, 0.0, -3.0517578125e-05, -0.05623435974121094, -6.866455078125e-05, -0.0012764210114255548, -5.7220458984375e-05, -2.741813204920618e-06, -0.013150335289537907, -9.894371032714844e-06, -0.0002269744873046875, -1.9073486328125e-06, -0.0004254579544067383, 0.0, -0.0006618499755859375, -2.47955322265625e-05, -0.016357421875, -0.000370025634765625, -7.62939453125e-06, 0.0, 0.0, -0.0001558065414428711, -3.8623758882749826e-05, -1.1444091796875e-05, -0.013883590698242188, 0.0, -0.3007397949695587, -0.04083442687988281, -0.0012270035222172737, -9.5367431640625e-06, 0.0, 0.0, 0.0, -1.4901160284352954e-05, -7.43865966796875e-05, -1.9073486328125e-06, -2.6702880859375e-05, -0.02644824981689453, 0.0, -0.4528946280479431, -0.024905119091272354, -0.0010309217032045126, -0.0002651214599609375, 0.0, -0.02127072587609291, -0.001324246870353818, 0.0], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .FREE)\n\n    def create_weapon(self, player):\n        return Weapon(7, 7, effects=[Effect(MinionSummoned(), ActionTag(\n            <UNK>Durability(), WeaponSelector()))])\n"}]}
{"gold_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "beams": [{"score": -0.6397320457049815, "choice_history": [59, 124, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 168, 49, 121, "Hound", "<EOS>", 56, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 52, 47, 113, "False", "<EOS>", 172, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "1", "<EOS>", "1", "<EOS>", 172, 154, "charge", "<EOS>", 25, 113, "True", "<EOS>"], "model_output": {"hole4": "p", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": 1, "hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "charge", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template18"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER", "_type": "Attribute"}, {"_type": "Template11"}, {"value": true, "_type": "NameConstant"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "Hound", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-0.0003566741943359375, -0.000156402587890625, -0.0001646144810365513, -0.00034970726119354367, -4.410190740600228e-06, -1.9073486328125e-06, -8.583057933719829e-06, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -0.0008563995361328125, -0.20952606201171875, -2.288818359375e-05, -0.00926971435546875, -4.76837158203125e-05, -9.5367431640625e-06, -3.099440846199286e-06, -0.00014065760478843004, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -4.816032014787197e-05, -3.814697265625e-06, -0.030595779418945312, 0.0, -0.10572242736816406, -1.33514404296875e-05, -1.9073486328125e-06, -4.756441921927035e-05, -5.841255187988281e-06, -0.0001773834228515625, -1.33514404296875e-05, -5.91278076171875e-05, -1.1920928244535389e-07, -5.91278076171875e-05, 0.0, -3.814697265625e-06, 0.0, -2.47955322265625e-05, -1.1444091796875e-05, -0.00052642822265625, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.2400972843170166, -3.814697265625e-06, -9.918212890625e-05, -0.0031385421752929688, -0.0006351470947265625, 0.0, -2.622604142743512e-06, 0.0, -1.5497195136049413e-06, -2.2172796889208257e-05, -3.576278118089249e-07, -0.0004863739013671875, -1.9073486328125e-06, -0.0343095064163208, 0.0, -2.86102294921875e-05, -0.0021991729736328125, -0.0003509521484375, 0.0], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n"}]}
{"gold_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "beams": [{"score": -0.5041222306708093, "choice_history": [59, 124, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Injured", " ", "Blademaster", "<EOS>", 57, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 38, 82, 29, "RARE", "<EOS>", 172, 154, "battlecry", "<EOS>", 19, 89, 24, 112, "Battlecry", "<EOS>", 165, 41, 89, 24, 112, "Damage", "<EOS>", 164, 48, 117, "7", "<EOS>", 51, 130, "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "4", "<EOS>", "7", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": 7, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Injured Blademaster", "_type": "Str"}, {"_type": "Template19"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "RARE", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"args": [{"args": [{"n": 7, "_type": "Num"}], "func": {"_type": "Name", "id": "Damage"}, "_type": "Call"}, {"_type": "Template10", "hole0": "HeroSelector"}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "InjuredBlademaster", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -0.003503740532323718, -0.0010986251290887594, -8.344629350176547e-06, 0.0, -7.748603820800781e-06, -2.1457441107486375e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, -3.0517578125e-05, -7.62939453125e-06, -2.6702880859375e-05, -7.62939453125e-06, -9.5367431640625e-06, -7.62939453125e-06, -7.152555099310121e-07, -7.832050323486328e-05, -6.9141146923357155e-06, -7.62939453125e-06, -0.3271970748901367, -0.0001506805419921875, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -6.79492904964718e-06, -3.576278118089249e-07, -0.0016450876137241721, 0.0, -4.1961669921875e-05, 0.0, -0.0002346038818359375, -0.0023592570796608925, -3.576272320060525e-06, -0.005496978759765625, -1.9073486328125e-06, -0.06999599933624268, -1.1920928244535389e-07, -0.011226654052734375, -5.7220458984375e-06, -1.33514404296875e-05, -7.62939453125e-06, -0.0001195669174194336, -1.9073486328125e-06, -0.0001125335693359375, -0.000274658203125, -1.9073486328125e-06, -1.1444091796875e-05, -0.000217437744140625, -0.0011976163368672132, -0.00029583368450403214, -1.9073486328125e-05, -0.00054168701171875, -9.5367431640625e-06, -0.030707716941833496, -0.0003976280859205872, -0.030355453491210938, 0.0, -0.00778444018214941, -0.000531792058609426, 0.0, -0.001202744897454977, 0.0, -0.006874082610011101, 0.0, -1.9073486328125e-06, -2.47955322265625e-05, -2.47955322265625e-05, -1.9073486328125e-06, -3.4570680327306036e-06, -0.000102996826171875, -7.152555099310121e-07, -8.225440979003906e-06, -3.588141771615483e-05], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(7), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n"}]}
{"gold_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(\n            1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=None)))])\n", "beams": [{"score": -0.4820621350797296, "choice_history": [59, 124, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 34, 139, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 172, 154, "effects", "<EOS>", 22, 108, 164, 41, 89, 24, 112, "Effect", "<EOS>", 165, 41, 88, 24, 112, "Character", "<UNK>", "<EOS>", 172, 154, "player", "<EOS>", 28, 130, "Both", "Player", "<EOS>", 41, 89, 24, 112, "Action", "Tag", "<EOS>", 165, 41, 89, 24, 112, "Damage", "<EOS>", 164, 56, 41, 88, 24, 112, "Character", "Selector", "<EOS>", 174, 154, "players", "<EOS>", 28, 130, "Enemy", "Player", "<EOS>", 154, "picker", "<EOS>", 28, 130, "Random", "Picker", "<EOS>", 154, "condition", "<EOS>", 25, 114, "Null", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": 2, "hole3": [{"value": {"elts": [{"args": [{"func": {"_type": "Name", "id": "Character<UNK>"}, "_type": "Call", "keywords": [{"value": {"_type": "Template10", "hole0": "BothPlayer"}, "arg": "player", "_type": "keyword"}]}, {"args": [{"args": [{"_type": "Template18"}], "func": {"_type": "Name", "id": "Damage"}, "_type": "Call"}, {"func": {"_type": "Name", "id": "CharacterSelector"}, "_type": "Call", "keywords": [{"value": {"_type": "Template10", "hole0": "EnemyPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template10", "hole0": "RandomPicker"}, "arg": "picker", "_type": "keyword"}, {"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}]}], "func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Effect"}, "_type": "Call"}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"hole1": 2, "hole2": "ALL", "hole3": "RARE", "_type": "Template3", "hole0": "Knife Juggler"}, "_type": "Expr"}], "hole0": "KnifeJuggler", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-7.62939453125e-06, -2.47955322265625e-05, -4.136476854910143e-05, -0.0002543602604418993, -5.161638546269387e-05, 0.0, -2.3841855067985307e-07, -3.8146954466355965e-06, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.0010833740234375, -2.6702880859375e-05, -1.1801649634435307e-05, -3.254413604736328e-05, -2.3841855067985307e-07, -4.00543212890625e-05, -0.0004069802525918931, 0.0, -5.030632019042969e-05, 0.0, -9.667872654972598e-05, 0.0, -8.106231689453125e-06, 0.0, -5.9366222558310255e-05, 0.0, 0.0, -3.0517578125e-05, -0.00017547607421875, -2.0026876882184297e-05, -3.6954863844584906e-06, -1.4066696166992188e-05, -7.510169325541938e-06, -1.9669532775878906e-05, -2.992119152622763e-05, -3.814697265625e-05, 0.0, -3.6716461181640625e-05, 0.0, -5.340576171875e-05, -9.5367431640625e-06, -0.0028629302978515625, -3.814697265625e-06, -1.9073486328125e-05, -1.9073486328125e-06, -4.1961669921875e-05, -0.0004031658172607422, -3.218649908376392e-06, -5.7220458984375e-06, -0.00350189208984375, -0.0077667236328125, -0.0002689361572265625, 0.0, -0.03015328012406826, -0.03623366355895996, -0.00017034003394655883, -0.0040435791015625, -0.00011444091796875, -0.00586700439453125, 0.0, -0.0002536773681640625, 0.0, -0.008562326431274414, -0.00019073486328125, -1.9073486328125e-06, -9.34600830078125e-05, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.0007137060165405273, -4.00543212890625e-05, -1.52587890625e-05, -1.71661376953125e-05, -0.000102996826171875, -8.96453857421875e-05, -0.0001621246337890625, -1.1444091796875e-05, -0.0003802776336669922, -6.15116223343648e-05, -3.24249267578125e-05, -7.2479248046875e-05, -0.0001316070556640625, -0.008753776550292969, -1.9073486328125e-06, 0.0, -0.04570038616657257, -0.0009236335754394531, -2.47955322265625e-05, -0.21977710723876953, -0.00014495849609375, -0.014481663703918457, -0.0011785030364990234, -0.003482818603515625, 0.0, -0.010493993759155273, -1.3828277587890625e-05, 0.0, -9.5367431640625e-06, -0.03477287292480469, -2.6702880859375e-05, -2.6702880859375e-05, 0.0, -0.01731860637664795, -0.000597714853938669, 0.0, -9.918212890625e-05, -0.014504432678222656, -0.000598907470703125, -0.00316619873046875, -0.00086212158203125, -2.47955322265625e-05, -1.9073486328125e-06], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(Character<UNK>(player=\n            BothPlayer()), ActionTag(Damage(1), CharacterSelector(players=\n            EnemyPlayer(), picker=RandomPicker(), condition=Null)))])\n"}]}
{"gold_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(condition=IsDamaged(), picker=RandomPicker\n            ())))])\n", "beams": [{"score": -1.9246327555802623, "choice_history": [59, 124, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 34, 139, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 172, 154, "effects", "<EOS>", 22, 108, 164, 41, 89, 24, 112, "Effect", "<EOS>", 165, 51, 130, "Turn", "Started", "<EOS>", 41, 89, 24, 112, "Action", "Tag", "<EOS>", 165, 41, 89, 24, 112, "Heal", "<EOS>", 164, 48, 117, "5", "<EOS>", 51, 130, "Hero", "Selector", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 5, "hole3": [{"value": {"elts": [{"args": [{"_type": "Template10", "hole0": "TurnStarted"}, {"args": [{"args": [{"n": 5, "_type": "Num"}], "func": {"_type": "Name", "id": "Heal"}, "_type": "Call"}, {"_type": "Template10", "hole0": "HeroSelector"}], "func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Effect"}, "_type": "Call"}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"hole1": 2, "hole2": "PRIEST", "hole3": "RARE", "_type": "Template3", "hole0": "Lightwell"}, "_type": "Expr"}], "hole0": "Lightwell", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [0.0, -0.0010662078857421875, -0.1229788139462471, -0.12198972702026367, -2.1686428226530552e-05, -1.1444091796875e-05, -2.7179718017578125e-05, -1.9073486328125e-06, -0.0001659393310546875, -2.288818359375e-05, -0.00034332275390625, -6.67572021484375e-05, -5.006777428206988e-06, -4.971027374267578e-05, -0.011224031448364258, -9.5367431640625e-06, -0.44621777534484863, 0.0, -0.0006142854690551758, 0.0, -3.075599670410156e-05, 0.0, -0.0006910562515258789, 0.0, -1.9073486328125e-06, -3.24249267578125e-05, -0.000164031982421875, -6.198875780683011e-06, 0.0, -8.404254913330078e-05, -5.960462772236497e-07, -1.2993727978027891e-05, -2.9802276912960224e-06, -1.33514404296875e-05, -3.814697265625e-06, -0.00018322467803955078, 0.0, -0.00018310546875, -2.47955322265625e-05, -0.00727081298828125, -4.00543212890625e-05, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-05, -3.814697265625e-06, -8.0108642578125e-05, -0.000148773193359375, -1.9073486328125e-06, -0.0007045269012451172, -0.0033016204833984375, 0.0, -7.43865966796875e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000278472900390625, -4.00543212890625e-05, -1.1444091796875e-05, -0.015047073364257812, -0.08946990966796875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.3356741666793823, -0.001189112663269043, -1.9073486328125e-06, -0.1987142562866211, -3.814697265625e-06, -0.04391440749168396, -1.1920922133867862e-06, -0.0072917938232421875, 0.0, -0.5148906707763672, -0.0001697540283203125, 0.0], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(5\n            ), HeroSelector()))])\n"}]}
{"gold_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n", "beams": [{"score": -2.4246298889601903, "choice_history": [59, 124, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 34, 139, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 172, 154, "effects", "<EOS>", 22, 108, 164, 41, 89, 24, 112, "Effect", "<EOS>", 165, 41, 88, 24, 112, "Minion", "Died", "<EOS>", 172, 154, "player", "<EOS>", 28, 130, "Both", "Player", "<EOS>", 41, 89, 24, 112, "Action", "Tag", "<EOS>", 165, 41, 89, 24, 112, "Give", "<EOS>", 164, 41, 89, 24, 112, "Change", "Attack", "<EOS>", 164, 56, 51, 130, "Self", "Selector", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": 3, "hole3": [{"value": {"elts": [{"args": [{"func": {"_type": "Name", "id": "MinionDied"}, "_type": "Call", "keywords": [{"value": {"_type": "Template10", "hole0": "BothPlayer"}, "arg": "player", "_type": "keyword"}]}, {"args": [{"args": [{"args": [{"_type": "Template18"}], "func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Give"}, "_type": "Call"}, {"_type": "Template10", "hole0": "SelfSelector"}], "func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Effect"}, "_type": "Call"}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"hole1": 1, "hole2": "MAGE", "hole3": "COMMON", "_type": "Template3", "hole0": "Mana Wyrm"}, "_type": "Expr"}], "hole0": "ManaWyrm", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-0.0003566741943359375, -9.5367431640625e-05, -8.344646857949556e-07, -4.088873174623586e-05, -9.894321920000948e-06, -5.960409907856956e-07, -1.1920928244535389e-07, -1.6093217709567398e-05, 0.0, -5.7220458984375e-06, -3.0517578125e-05, -0.000274658203125, -0.0004119873046875, -0.00017105070583056659, -0.00034198423963971436, -4.768370445162873e-07, -2.0265579223632812e-06, -0.08698049187660217, 0.0, -0.9521927833557129, 0.0, -0.0004912614822387695, 0.0, -4.589557647705078e-05, 0.0, -9.822844731388614e-05, 0.0, 0.0, -2.47955322265625e-05, -0.000125885009765625, -1.9073486328125e-06, -6.318082796497038e-06, -2.3841855067985307e-07, -2.2768945200368762e-05, -6.1034850659780204e-05, -5.1379160140641034e-05, -2.09808349609375e-05, -3.814697265625e-06, -2.872943878173828e-05, 0.0, -0.0001068115234375, -0.0001068115234375, -0.05886650085449219, -1.9073486328125e-06, -8.20159912109375e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00044810769031755626, -0.0003764628490898758, -2.09808349609375e-05, -0.0005645751953125, -0.430816650390625, -3.62396240234375e-05, 0.0, -0.606484591960907, -0.12444019317626953, -0.0001282634329982102, -0.001445770263671875, -0.000438690185546875, -0.0038013458251953125, 0.0, -3.814697265625e-06, 0.0, -0.1479731798171997, -0.0002422332763671875, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.0003069638623856008, -9.1552734375e-05, -3.62396240234375e-05, -3.4332275390625e-05, -4.1961669921875e-05, -5.7220458984375e-06, 0.0, 0.0, -0.0007914301822893322, -8.976459503173828e-05, -1.9073486328125e-05, -0.0005321502685546875, -5.53131103515625e-05, 0.0, -1.9073486328125e-06, -0.0006381752318702638, -0.001130223274230957, -1.1682510375976562e-05, -3.0517578125e-05, -9.34600830078125e-05, -4.76837158203125e-05, 0.0, -0.00223135226406157, -0.0001093149185180664, 0.0], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionDied(player=BothPlayer()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n"}]}
{"gold_code": "class MogushanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "beams": [{"score": -0.01089559986257882, "choice_history": [59, 124, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 34, 139, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "1", "<EOS>", "7", "<EOS>", 172, 154, "taunt", "<EOS>", 25, 113, "True", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": 7, "hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "taunt", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"hole1": 4, "hole2": "ALL", "hole3": "COMMON", "_type": "Template3", "hole0": "Mogu'shan Warden"}, "_type": "Expr"}], "hole0": "Mogu'shanWarden", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-5.7220458984375e-06, -6.29425048828125e-05, -1.0371186363045126e-05, -7.784063927829266e-05, -2.9802276912960224e-06, 0.0, -4.768370445162873e-07, -5.9604644775390625e-06, -1.9073486328125e-06, -3.814697265625e-05, -2.47955322265625e-05, -7.43865966796875e-05, -2.288818359375e-05, -8.106198947643861e-06, -1.728534698486328e-05, -4.768370445162873e-07, -9.5367431640625e-06, -4.0650331357028335e-05, 0.0, -7.68899917602539e-05, -1.9073486328125e-06, -3.504753112792969e-05, 0.0, -7.867813110351562e-06, 0.0, -0.006535649299621582, 0.0, -1.9073486328125e-06, -1.71661376953125e-05, -0.001964569091796875, 0.0, -1.9073468138230965e-06, -6.330013275146484e-05, -2.503394853192731e-06, -0.0007190635660663247, -2.0265579223632812e-06, -0.000125885009765625, -3.814697265625e-06, -0.000800013542175293, -5.7220458984375e-06, -5.91278076171875e-05, -1.1444091796875e-05, -4.9591064453125e-05, -5.7220458984375e-06], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n"}]}
{"gold_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class Gain2(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Gain 2 mana crystals', 0, CHARACTER_CLASS\n                    .DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                if player.max_mana < 8:\n                    player.max_mana += 2\n                    player.mana += 2\n                else:\n                    player.max_mana = 10\n                    player.mana += 2\n\n\n        class Draw3(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Draw three cards', 0, CHARACTER_CLASS.\n                    DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                player.draw()\n                player.draw()\n                player.draw()\n        option = player.agent.choose_option([Gain2(), Draw3()], player)\n        option.use(player, game)\n", "beams": [{"score": -6.621611540486697, "choice_history": [59, 124, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Nourish", "<EOS>", 48, 117, "5", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 38, 82, 29, "RARE", "<EOS>", 172, 154, "choices", "<EOS>", 22, 108, 165, 41, 89, 24, 112, "Choice", "<EOS>", 166, 51, 130, "<UNK>", "Of", "<UNK>", "<EOS>", 51, 130, "Draw", "<EOS>", 41, 89, 24, 112, "Draw", "<EOS>", 164, 57, 41, 89, 24, 112, "Buff", "<EOS>", 164, 41, 89, 24, 112, "Change", "Health", "<EOS>", 164, 55, "<EOS>", "player", "<EOS>", 177, 75, 143, "Spell", "<EOS>", "5", "<EOS>", "5", "<EOS>"], "model_output": {"hole4": "player", "hole3": "", "hole6": [{"hole1": 5, "hole2": 5, "_type": "Template8", "hole0": "Spell"}], "hole2": [{"value": {"args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "DRUID", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "RARE", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"elts": [{"args": [{"_type": "Template10", "hole0": "<UNK>Of<UNK>"}, {"_type": "Template10", "hole0": "Draw"}, {"args": [{"_type": "Template19"}], "func": {"_type": "Name", "id": "Draw"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Choice"}, "_type": "Call"}, {"args": [{"args": [{"_type": "Template17"}], "func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Buff"}, "_type": "Call"}], "_type": "List"}, "arg": "choices", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "Nourish", "hole1": "SpellCard", "_type": "Template0"}, "score_history": [-3.814697265625e-06, -0.048193931579589844, -0.05878405272960663, -0.016201138496398926, -6.472857057815418e-05, -1.9073486328125e-06, -1.919269561767578e-05, -1.9073486328125e-06, -5.14984130859375e-05, -3.814697265625e-06, -0.03738594055175781, -0.0044231414794921875, -1.71661376953125e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -2.884823152271565e-05, -0.0011464357376098633, -0.001483917236328125, -7.05718994140625e-05, -3.4570634852570947e-06, -4.6491513785440475e-06, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.33514404296875e-05, -0.00194549560546875, -7.62939453125e-06, -7.62939453125e-06, 0.0, -5.7220458984375e-06, -0.05842018127441406, -1.33514404296875e-05, -4.57763671875e-05, -3.0517578125e-05, -0.06485843658447266, -2.47955322265625e-05, -0.0007038116455078125, -0.0009021759033203125, -0.030645370483398438, -0.02181529998779297, -1.9073486328125e-06, -1.1444091796875e-05, -3.24249267578125e-05, -0.0028896331787109375, -0.02728748321533203, -0.00363922119140625, -0.000995635986328125, -2.09808349609375e-05, -0.9448239803314209, -0.056910526007413864, -0.2699980139732361, -0.01523447036743164, -0.48334312438964844, 0.0, -0.5256022214889526, -0.00086246058344841, -0.00238800048828125, -0.45508575439453125, 0.0, -3.0517578125e-05, -0.4999709129333496, -1.0728830375228426e-06, -0.0074310302734375, -0.3253211975097656, -0.0003795623779296875, -0.0006961822509765625, 0.0, 0.0, -0.19080734252929688, 0.0, -1.33514404296875e-05, -0.0076045989990234375, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.5061858892440796, -0.5094635486602783, -3.3378546504536644e-06, -1.52587890625e-05, -0.009242057800292969, -0.0031414031982421875, -1.0060551166534424, 0.0, -1.9073486328125e-06, -4.00543212890625e-05, -0.0001583099365234375, -6.54458999633789e-05, -0.00012826919555664062, -0.4154970347881317, 0.0, -0.0027505159378051758, 0.0], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(<UNK>Of<UNK>(), Draw(), Draw(3)), Buff(\n            ChangeHealth(2))])\n\n    def (self, player):\n        return Spell(5, 5)\n"}]}
{"gold_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsSpell()), SpellCast()))\n", "beams": [{"score": -9.653446713159944, "choice_history": [59, 126, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 34, 139, "Preparation", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 179, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 76, 146, 16, 82, 24, 112, "player", "<EOS>", "hero", "<EOS>", "heal", "<EOS>", 165, 41, 89, 16, 82, 24, 112, "player", "<EOS>", "effective_heal_power", "<EOS>", 164, 41, 89, 24, 112, "Aura", "Until", "<EOS>", 166, 41, 89, 24, 112, "Mana", "Change", "<EOS>", 164, 58, 149, 78, 26, 117, "4", "<EOS>", 41, 88, 24, 112, "Card", "Selector", "<EOS>", 172, 154, "condition", "<EOS>", 28, 130, "Is", "Minion", "<EOS>", 51, 130, "Minion", "Placed", "<EOS>", 46, 112, "player", "<EOS>", 76, 146, 24, 112, "player", "<EOS>", "<UNK>", "<EOS>", 164, 41, 89, 24, 112, "Effect", "<EOS>", 165, 41, 88, 24, 112, "Turn", "Started", "<EOS>", 172, 154, "player", "<EOS>", 28, 130, "Both", "Player", "<EOS>", 41, 89, 24, 112, "Action", "Tag", "<EOS>", 165, 41, 89, 24, 112, "Give", "Aura", "<EOS>", 164, 41, 89, 24, 112, "Aura", "Until", "<EOS>", 166, 41, 89, 24, 112, "Mana", "Change", "<EOS>", 164, 58, 149, 78, 32, 41, 88, 24, 112, "Card", "Selector", "<EOS>", 172, 154, "condition", "<EOS>", 28, 130, "Is", "Minion", "<EOS>", 51, 130, "Minion", "Placed", "<EOS>", 51, 130, "Player", "Selector", "<EOS>"], "model_output": {"hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"hole1": "heal", "hole2": [{"args": [{"args": [{"args": [{"operand": {"n": 4, "_type": "Num"}, "_type": "UnaryOp", "op": {"_type": "USub"}}], "func": {"_type": "Name", "id": "ManaChange"}, "_type": "Call"}, {"func": {"_type": "Name", "id": "CardSelector"}, "_type": "Call", "keywords": [{"value": {"_type": "Template10", "hole0": "IsMinion"}, "arg": "condition", "_type": "keyword"}]}, {"_type": "Template10", "hole0": "MinionPlaced"}], "func": {"_type": "Name", "id": "AuraUntil"}, "_type": "Call"}], "func": {"value": {"_type": "Name", "id": "player"}, "attr": "effective_heal_power", "_type": "Attribute"}, "_type": "Call"}, {"_type": "Name", "id": "player"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "player"}, "attr": "hero", "_type": "Attribute"}}, {"hole1": "<UNK>", "hole2": [{"args": [{"func": {"_type": "Name", "id": "TurnStarted"}, "_type": "Call", "keywords": [{"value": {"_type": "Template10", "hole0": "BothPlayer"}, "arg": "player", "_type": "keyword"}]}, {"args": [{"args": [{"args": [{"args": [{"operand": {"_type": "Template18"}, "_type": "UnaryOp", "op": {"_type": "USub"}}], "func": {"_type": "Name", "id": "ManaChange"}, "_type": "Call"}, {"func": {"_type": "Name", "id": "CardSelector"}, "_type": "Call", "keywords": [{"value": {"_type": "Template10", "hole0": "IsMinion"}, "arg": "condition", "_type": "keyword"}]}, {"_type": "Template10", "hole0": "MinionPlaced"}], "func": {"_type": "Name", "id": "AuraUntil"}, "_type": "Call"}], "func": {"_type": "Name", "id": "GiveAura"}, "_type": "Call"}, {"_type": "Template10", "hole0": "PlayerSelector"}], "func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Effect"}, "_type": "Call"}], "_type": "Template9", "hole0": {"_type": "Name", "id": "player"}}], "hole2": [{"value": {"hole1": 0, "hole2": "PRIEST", "hole3": "EPIC", "_type": "Template3", "hole0": "Preparation"}, "_type": "Expr"}], "hole0": "Preparation", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-4.38690185546875e-05, -0.0006771087646484375, -0.0024117964785546064, -0.034439776092767715, -0.0010283472947776318, -0.00044977664947509766, -1.1920928244535389e-07, -5.7220458984375e-06, -6.4849853515625e-05, -7.62939453125e-06, -0.001514434814453125, -1.52587890625e-05, -0.00324272527359426, -0.0015459060668945312, -2.741813204920618e-06, -9.059880540007725e-06, -0.9303147792816162, 0.0, -0.008702516555786133, 0.0, -2.4199480321840383e-05, 0.0, -7.6293927122605965e-06, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -9.918212890625e-05, -0.0011449564481154084, -2.372257222305052e-05, -0.9334888458251953, -0.0005321502685546875, -1.33514404296875e-05, -0.0031681060791015625, -1.9073486328125e-06, -1.7642971215536818e-05, -0.00012600421905517578, -2.288818359375e-05, 0.0, -2.09808349609375e-05, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -4.38690185546875e-05, -0.055823326110839844, -3.814697265625e-06, -0.14357566833496094, -1.9073486328125e-06, -0.002216339111328125, 0.0, -0.5575923919677734, 0.0, -0.007954120635986328, -2.6702880859375e-05, -0.304511696100235, -7.10484164301306e-05, -0.012041091918945312, -0.012671470642089844, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.20495069026947021, -1.1444091796875e-05, -2.6702880859375e-05, -0.013260841369628906, -0.17399978637695312, -8.7738037109375e-05, -0.0003795623779296875, -0.5531389713287354, -0.005796551704406738, -0.00031125545501708984, -0.06342506408691406, -0.00147247314453125, -2.288818359375e-05, -7.62939453125e-06, -3.814697265625e-06, -0.0032373666763305664, -0.001872658496722579, -0.0001354217529296875, -1.71661376953125e-05, -0.002132415771484375, -5.53131103515625e-05, -0.000125885009765625, -0.6289119720458984, -0.0001392364501953125, -0.2149476706981659, -4.768370445162873e-07, -0.48125743865966797, -0.414703369140625, -1.9073486328125e-06, -9.918212890625e-05, -0.0030167102813720703, -0.015938758850097656, 0.0, -1.33514404296875e-05, -7.05718994140625e-05, -0.04194355010986328, -0.0014867782592773438, -0.001850128173828125, -9.5367431640625e-06, -0.00030684471130371094, -0.16976213455200195, -3.814697265625e-06, -0.0018329620361328125, 0.0, -0.07269728183746338, -0.045505523681640625, -5.14984130859375e-05, -0.08912944793701172, 0.0, -0.40069103240966797, 0.0, -0.0015020370483398438, -0.025836944580078125, -0.0047740936279296875, 0.0, -0.003971099853515625, 0.0, -0.13163280487060547, -3.24249267578125e-05, -0.08332061767578125, -0.1519489288330078, -2.288818359375e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.08113384246826172, -8.80945153767243e-05, -4.00543212890625e-05, -0.0075244903564453125, -0.4736595153808594, 0.0, 0.0, -0.08338034152984619, -0.05525541305541992, -3.62396240234375e-05, -0.00032806396484375, -0.00017547607421875, -0.10278701782226562, 0.0, -0.0002460479736328125, -7.62939453125e-06, -0.740300178527832, -0.0008535385131835938, 0.0, -0.000408172607421875, -5.7220458984375e-06, 0.0, 0.0, -4.57763671875e-05, -0.0002765655517578125, -0.0002269744873046875, -1.52587890625e-05, -0.041472434997558594, -2.6702880859375e-05, -3.814697265625e-06, 0.0, -0.42294883728027344, -0.001097559928894043, -0.003789544105529785, -9.5367431640625e-06, -0.032958030700683594, -1.33514404296875e-05, 0.0, 0.0, -0.11678695678710938, -0.003380298614501953, -6.16312026977539e-05, -0.029430389404296875, -0.00028228759765625, -2.288818359375e-05, -1.1444091796875e-05, -2.09808349609375e-05, -0.0015183687210083008, -0.0018450021743774414, -0.000118255615234375, -2.47955322265625e-05, -0.0002956390380859375, -7.2479248046875e-05, -4.57763671875e-05, -0.13389873504638672, -0.0005245208740234375, -0.001529693603515625, -2.6702880859375e-05, -4.76837158203125e-05, -0.0002551078796386719, -0.007278561592102051, 0.0, -1.33514404296875e-05, -8.7738037109375e-05, -0.0013065338134765625, -0.0004138946533203125, -0.0006961822509765625, -9.5367431640625e-06, -0.000213623046875, -0.13289237022399902, -3.814697265625e-06, -0.0021381378173828125, -1.9073486328125e-06, -0.06963598728179932, -0.04722023010253906, -4.57763671875e-05, -0.004741668701171875, -2.09808349609375e-05, -0.015670061111450195, -7.43865966796875e-05, 0.0], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.heal(player.effective_heal_power(AuraUntil(ManaChange(-\n            4), CardSelector(condition=IsMinion()), MinionPlaced())), player)\n        player.<UNK>(Effect(TurnStarted(player=BothPlayer()), ActionTag(\n            GiveAura(AuraUntil(ManaChange(-1), CardSelector(condition=\n            IsMinion()), MinionPlaced())), PlayerSelector())))\n"}]}
{"gold_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion):\n        minion.set_health_to(1)\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "beams": [{"score": -17.01903487770334, "choice_history": [59, 127, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 177, 68, 94, 34, 139, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 158, 1, 151, "attacker", "<EOS>", 177, 71, 99, 20, 92, 19, 89, 24, 112, "len", "<EOS>", 164, 45, 109, 24, 112, "minion", "<EOS>", 162, 153, 24, 112, "minion", "<EOS>", 16, 82, 16, 82, 24, 112, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 164, 58, 149, 77, 16, 82, 24, 112, "minion", "<EOS>", "<UNK>", "<EOS>", 161, 8, 164, 48, 117, "0", "<EOS>", 180, 64, 81, 164, 46, 112, "target", "<EOS>", 19, 89, 16, 82, 16, 82, 16, 82, 24, 112, "self", "<EOS>", "player", "<EOS>", "game", "<EOS>", "random_choice", "<EOS>", 164, 38, 82, 16, 82, 24, 112, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 76, 146, 24, 112, "target", "<EOS>", "change_attack", "<EOS>", 164, 39, 84, 19, 89, 24, 112, "len", "<EOS>", 164, 38, 82, 16, 82, 24, 112, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 61, 32, 76, 146, 24, 112, "target", "<EOS>", "change_attack", "<EOS>", 164, 58, 149, 77, 16, 82, 24, 112, "minion", "<EOS>", "player", "<EOS>", 76, 146, 24, 112, "mirror", "<EOS>", "<UNK>", "<EOS>", 164, 41, 89, 24, 112, "len", "<EOS>", 164, 38, 82, 16, 82, 24, 112, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 177, 70, 96, "can_use", "<EOS>", 4, 152, 160, 0, 1, 151, "card", "<EOS>", 1, 151, "index", "<EOS>", 177, 71, 99, 18, 85, 5, 165, 41, 87, 16, 82, 24, 112, "card", "<EOS>", "<UNK>", "<EOS>", 42, 92, 16, 82, 24, 112, "card", "<EOS>", "<UNK>", "<EOS>", 161, 7, 164, 38, 82, 24, 112, "minion", "<EOS>", "card", "<EOS>", 178, 76, 146, 24, 112, "minion", "<EOS>", "change_attack", "<EOS>", 164, 57, 76, 145, 28, 130, "super", "<EOS>", "reveal", "<EOS>"], "model_output": {"hole7": [{"name": "can_use", "args": {"args": [{"_type": "Template12"}, {"arg": "card", "_type": "arg"}, {"arg": "index", "_type": "arg"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"test": {"_type": "BoolOp", "values": [{"func": {"value": {"_type": "Name", "id": "card"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "Call"}, {"ops": [{"_type": "Eq"}], "left": {"value": {"_type": "Name", "id": "card"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "Compare", "comparators": [{"value": {"_type": "Name", "id": "minion"}, "attr": "card", "_type": "Attribute"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"hole1": "change_attack", "hole2": [{"_type": "Template19"}], "_type": "Template9", "hole0": {"_type": "Name", "id": "minion"}}, {"hole1": "reveal", "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}]}]}], "hole4": "<UNK>", "hole3": "_reveal", "hole6": [{"test": {"ops": [{"_type": "Gt"}], "left": {"args": [{"elt": {"_type": "Name", "id": "minion"}, "_type": "ListComp", "generators": [{"target": {"_type": "Name", "id": "minion"}, "iter": {"value": {"value": {"_type": "Name", "id": "self"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "comprehension", "ifs": [{"operand": {"value": {"_type": "Name", "id": "minion"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "UnaryOp", "op": {"_type": "Not"}}]}]}], "func": {"_type": "Name", "id": "len"}, "_type": "Call"}, "_type": "Compare", "comparators": [{"n": 0, "_type": "Num"}]}, "_type": "If", "body": [{"value": {"args": [{"value": {"value": {"_type": "Name", "id": "self"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "func": {"value": {"value": {"value": {"_type": "Name", "id": "self"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, "attr": "random_choice", "_type": "Attribute"}, "_type": "Call"}, "_type": "Assign", "targets": [{"_type": "Name", "id": "target"}]}, {"hole1": "change_attack", "hole2": [{"right": {"_type": "Template18"}, "left": {"args": [{"value": {"value": {"_type": "Name", "id": "self"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "func": {"_type": "Name", "id": "len"}, "_type": "Call"}, "_type": "BinOp", "op": {"_type": "Sub"}}], "_type": "Template9", "hole0": {"_type": "Name", "id": "target"}}, {"hole1": "change_attack", "hole2": [{"operand": {"value": {"_type": "Name", "id": "minion"}, "attr": "player", "_type": "Attribute"}, "_type": "UnaryOp", "op": {"_type": "Not"}}], "_type": "Template9", "hole0": {"_type": "Name", "id": "target"}}, {"hole1": "<UNK>", "hole2": [{"args": [{"value": {"value": {"_type": "Name", "id": "self"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "func": {"_type": "Name", "id": "len"}, "_type": "Call"}], "_type": "Template9", "hole0": {"_type": "Name", "id": "mirror"}}]}], "hole2": [{"value": {"hole1": 1, "hole2": "PALADIN", "hole3": "COMMON", "_type": "Template3", "hole0": "Repentance"}, "_type": "Expr"}], "hole0": "Repentance", "hole1": "SecretCard", "hole5": [{"arg": "attacker", "_type": "arg"}], "_type": "Template0"}, "score_history": [-2.47955322265625e-05, -0.4886598587036133, -3.60006233677268e-05, -0.00047638514661230147, -0.0007663576398044825, -5.9843041526619345e-05, -7.62939453125e-06, -0.0003414154052734375, -5.91278076171875e-05, -1.52587890625e-05, -0.0006542205810546875, -1.1444091796875e-05, -2.753696753643453e-05, -3.933906555175781e-06, -2.777580448309891e-05, -3.170967102050781e-05, -0.25183260440826416, -2.3841830625315197e-06, -5.0067850679624826e-05, 0.0, -0.011880636215209961, -6.4849853515625e-05, -0.021008729934692383, -3.814697265625e-06, -0.0007495880126953125, -0.0005035400390625, -1.1444091796875e-05, -0.012186169624328613, -5.340576171875e-05, -9.5367431640625e-06, -0.0002574920654296875, -8.20159912109375e-05, -0.4762125015258789, -0.00029754638671875, -0.008489608764648438, -0.00055694580078125, -1.1444091796875e-05, -9.5367431640625e-06, -0.026208877563476562, -1.9073486328125e-06, -0.00035858154296875, -0.6570491790771484, -0.018105506896972656, -0.000164031982421875, -1.9073486328125e-06, -0.0004408355162013322, -3.6477376852417365e-05, -0.015453338623046875, -0.0021963119506835938, -0.18166255950927734, 0.0, -0.0035639198031276464, -2.0265373677830212e-05, -0.000156402587890625, 0.0, -0.0004425048828125, -7.62939453125e-06, -0.000133514404296875, 0.0, -0.011610031127929688, -1.7642974853515625e-05, -0.00014495849609375, 0.0, -0.00040924549102783203, 0.0, -0.000659942626953125, -0.011843681335449219, -0.0016231536865234375, -0.03229808807373047, -0.0026073455810546875, -1.9073486328125e-06, -0.0001811981201171875, 0.0, -0.0030690431594848633, -1.1920922133867862e-06, -0.0760117620229721, -1.1920928244535389e-07, -7.62939453125e-06, -0.008115768432617188, -5.7220458984375e-06, -7.05718994140625e-05, -2.09808349609375e-05, -0.00019132750458084047, -3.4928310924442485e-05, -0.29976558685302734, -0.0003452301025390625, -0.00016021728515625, -2.86102294921875e-05, -0.000179290771484375, 0.0, -0.053676486015319824, -4.0531158447265625e-06, -0.00130462646484375, -0.0544586181640625, -1.9073486328125e-05, 0.0, -7.43865966796875e-05, 0.0, -0.00638580322265625, -1.71661376953125e-05, -0.05623435974121094, 0.0, -0.033945322036743164, -0.0009088516235351562, -0.017525672912597656, 0.0, -0.0005437135696411133, -1.9073486328125e-06, -0.2957831621170044, -5.340576171875e-05, -0.004978179931640625, -0.005215644836425781, 0.0, -0.0006809234619140625, 0.0, -2.6702880859375e-05, 0.0, -0.0015708208084106445, -0.0005295276641845703, -0.000392913818359375, 0.0, -0.00067138671875, -1.9073486328125e-06, -0.005709648132324219, -5.53131103515625e-05, -0.02541351318359375, 0.0, -0.14426052570343018, 0.0, -0.003432631492614746, -1.9073486328125e-06, -1.9073486328125e-06, -0.9822063446044922, -0.9430751800537109, -0.7060680389404297, -0.0024232864379882812, -0.00038909912109375, -1.9073486328125e-06, -0.00020015239715576172, -3.814697265625e-06, -1.33514404296875e-05, -7.82012939453125e-05, 0.0, -0.0002288818359375, 0.0, -0.0071468353271484375, 0.0, -0.00201416015625, -0.0001462697982788086, -0.000186920166015625, 0.0, -0.0002288818359375, -5.7220458984375e-06, -0.010852813720703125, -0.0019960403442382812, -0.001308441162109375, -0.00177764892578125, -0.0008029937744140625, 0.0, -0.4325672388076782, 0.0, -0.004413100890815258, 0.0, -1.9073486328125e-06, -0.9226579666137695, -0.032703399658203125, -0.49106407165527344, -0.12301063537597656, 0.0, -0.000255584716796875, 0.0, -0.2143937349319458, -4.768370445162873e-07, -0.358090877532959, 0.0, -9.5367431640625e-06, -4.00543212890625e-05, -0.0066852569580078125, 0.0, -1.2304412126541138, -0.00026035308837890625, -0.0028058290481567383, -0.00013554096221923828, -8.20159912109375e-05, -0.15598487854003906, -0.0013818740844726562, 0.0, 0.0, -0.006398439407348633, -2.0265579223632812e-06, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -0.0007266998291015625, -3.814697265625e-06, -0.000179290771484375, 0.0, -0.02189350128173828, -3.135203951387666e-05, -0.000518798828125, 0.0, -0.000225067138671875, -5.7220458984375e-06, -1.71661376953125e-05, -0.0811166763305664, -0.000141143798828125, -0.003212077310308814, -5.9604644775390625e-06, -0.00489044189453125, -0.000152587890625, -0.09876728057861328, -0.000244140625, -1.33514404296875e-05, -1.1444091796875e-05, -0.7170617580413818, -0.0009063482284545898, -3.24249267578125e-05, -3.24249267578125e-05, -1.0927917957305908, -0.00015175342559814453, -2.6702880859375e-05, -0.043160438537597656, -0.0003147125244140625, -0.007974624633789062, -9.5367431640625e-05, -0.0001430511474609375, -0.034096717834472656, -0.06256961822509766, -0.6317777633666992, -2.6702880859375e-05, -2.288818359375e-05, -5.91278076171875e-05, 0.0, -0.0971670150756836, -3.814697265625e-06, -0.25762414932250977, 0.0, -0.0007610321044921875, -9.5367431640625e-05, -0.013378143310546875, 0.0, -0.04120826721191406, 0.0, -0.4727773666381836, -5.7220458984375e-06, -0.18098747730255127, 0.0, -1.9073486328125e-06, -0.2137470245361328, -3.814697265625e-06, -0.0836324691772461, 0.0, -0.002201080322265625, 0.0, -0.19574356079101562, -1.1801719665527344e-05, -0.47904515266418457, 0.0, -0.13512516021728516, -0.3532876968383789, -0.0022487640380859375, -0.25867462158203125, 0.0, -0.00798189640045166, -1.0251946150674485e-05, -0.1562756896018982, 0.0, -7.62939453125e-06, -0.6972627639770508, -5.14984130859375e-05, -0.5763511657714844, -0.0002899169921875, -0.000125885009765625, -0.00010120412480318919, -1.9431114196777344e-05, -4.9591064453125e-05, -2.86102294921875e-05], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len([minion for minion in self.player.minions if not minion.<UNK>]\n            ) > 0:\n            target = self.player.game.random_choice(self.player.minions)\n            target.change_attack(len(self.player.minions) - 1)\n            target.change_attack(not minion.player)\n            mirror.<UNK>(len(self.player.minions))\n\n    def can_use(self, card, index):\n        if card.<UNK>() and card.<UNK> == minion.card:\n            minion.change_attack(3)\n            super().reveal()\n"}]}
{"gold_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, False)\n\n    def create_minion(self, p):\n        return Minion(0, 1)\n", "beams": [{"score": -2.214412791328833, "choice_history": [59, 124, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 34, 139, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "0", "<EOS>", "1", "<EOS>", 172, 154, "auras", "<EOS>", 22, 108, 164, 41, 89, 24, 112, "Aura", "<EOS>", 165, 51, 130, "<UNK>", "Spell", "Target", "<EOS>", 41, 89, 24, 112, "Minion", "Selector", "<EOS>", 164, 51, 130, "Adjacent", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 0, "hole2": 1, "hole3": [{"value": {"elts": [{"args": [{"_type": "Template10", "hole0": "<UNK>SpellTarget"}, {"args": [{"_type": "Template10", "hole0": "Adjacent"}], "func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Aura"}, "_type": "Call"}], "_type": "List"}, "arg": "auras", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"hole1": 0, "hole2": "PRIEST", "hole3": "EPIC", "_type": "Template3", "hole0": "Shadow of Nothing"}, "_type": "Expr"}], "hole0": "ShadowOfNothing", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-5.91278076171875e-05, -0.0771646499633789, -0.0015448967460542917, -0.011661818251013756, -0.0025474107824265957, -0.0003970652469433844, -2.0026593119837344e-05, -5.924701690673828e-05, -9.179100743494928e-06, -5.7220458984375e-06, -0.0001010894775390625, -5.7220458984375e-06, -0.000179290771484375, -0.0003032684326171875, -0.0011554956436157227, -0.00013494380982592702, -0.000492095947265625, -4.267692565917969e-05, -1.9431114196777344e-05, -0.0001010894775390625, -0.1275617778301239, -1.1920928244535389e-07, -0.6658819913864136, 0.0, -0.0033998489379882812, 0.0, -0.017604827880859375, 0.0, -0.0006151199340820312, 0.0, 0.0, -0.0020885467529296875, -0.003589630126953125, -9.5367431640625e-06, -1.0609614946588408e-05, -2.3841855067985307e-07, -0.00010918975021922961, -0.0003546467632986605, -5.245207830739673e-06, -0.0078582763671875, -4.1961669921875e-05, -0.00353240966796875, 0.0, -0.0004291534423828125, -4.76837158203125e-05, -0.006084442138671875, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.0021572113037109375, -0.0004711151123046875, -0.001468658447265625, -0.20606708526611328, -1.1444091796875e-05, -0.0038408623076975346, -0.5117596387863159, -0.09930729866027832, -0.0007241964340209961, -0.00472259521484375, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.03010094165802002, -0.0004119873046875, -1.33514404296875e-05, -0.04089164733886719, -0.0154571533203125, -0.0002193450927734375, -0.35030338168144226, -0.011232486926019192], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            Adjacent()))])\n"}]}
{"gold_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.health > player.effective_spell_damage(2\n            ) or self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(2), self)\n            player.draw()\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n", "beams": [{"score": -2.184350663603368, "choice_history": [59, 126, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Slam", "<EOS>", 55, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 52, 172, 154, "target_func", "<EOS>", 16, 82, 16, 82, 24, 112, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 179, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 64, 81, 164, 46, 112, "targets", "<EOS>", 19, 89, 16, 82, 24, 112, "copy", "<EOS>", "copy", "<EOS>", 164, 38, 82, 16, 82, 16, 82, 24, 112, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 71, 100, 18, 85, 5, 165, 42, 92, 16, 82, 16, 82, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 161, 11, 164, 38, 82, 24, 112, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 42, 92, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", 161, 10, 164, 46, 112, "targets", "<EOS>", 178, 76, 146, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 164, 55, 76, 146, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 164, 55, 177, 76, 146, 16, 82, 24, 112, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 165, 41, 89, 16, 82, 24, 112, "player", "<EOS>", "effective_spell_damage", "<EOS>", 164, 55, 46, 112, "self", "<EOS>"], "model_output": {"hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}, {"value": {"args": [{"value": {"value": {"value": {"_type": "Name", "id": "player"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "func": {"value": {"_type": "Name", "id": "copy"}, "attr": "copy", "_type": "Attribute"}, "_type": "Call"}, "_type": "Assign", "targets": [{"_type": "Name", "id": "targets"}]}, {"test": {"_type": "BoolOp", "values": [{"ops": [{"_type": "Is"}], "left": {"value": {"value": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "attr": "card", "_type": "Attribute"}, "attr": "minion_type", "_type": "Attribute"}, "_type": "Compare", "comparators": [{"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON", "_type": "Attribute"}]}, {"ops": [{"_type": "In"}], "left": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "_type": "Compare", "comparators": [{"_type": "Name", "id": "targets"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"hole1": "change_attack", "hole2": [{"_type": "Template17"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}}, {"hole1": "increase_health", "hole2": [{"_type": "Template17"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}}], "orelse": [{"hole1": "damage", "hole2": [{"args": [{"_type": "Template17"}], "func": {"value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "_type": "Call"}, {"_type": "Name", "id": "self"}], "_type": "Template9", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}}]}], "hole2": [{"value": {"args": [{"s": "Slam", "_type": "Str"}, {"_type": "Template17"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template11"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "Slam", "hole1": "SpellCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-5.7220458984375e-06, -7.43865966796875e-05, -0.00114530383143574, -2.2649765014648438e-06, -2.5913584977388382e-05, -1.9073486328125e-06, -2.741813204920618e-06, -8.7738037109375e-05, -6.29425048828125e-05, -1.9073486328125e-06, -0.16664695739746094, -5.14984130859375e-05, -3.814697265625e-06, -2.6702880859375e-05, 0.0, -1.52587890625e-05, -1.311301275563892e-06, -3.6954863844584906e-06, -2.47955322265625e-05, -1.9073486328125e-05, 0.0, -0.0012264251708984375, 0.0, -1.71661376953125e-05, 0.0, -0.43546974658966064, 0.0, -0.0005950927734375, -0.0001697540283203125, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -6.866455078125e-05, -7.62939453125e-06, -0.0004253387451171875, 0.0, -3.814697265625e-06, 0.0, -0.000152587890625, 0.0, -9.5367431640625e-06, 0.0, -0.004885554313659668, 0.0, -5.14984130859375e-05, 0.0, -0.0004483461380004883, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -2.2649765014648438e-06, -5.7220458984375e-06, -0.018616676330566406, -9.5367431640625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.52587890625e-05, -0.00017249556549359113, -2.86102294921875e-05, -6.079673767089844e-06, 0.0, -1.52587890625e-05, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.20238494873046875, -3.814697265625e-06, -7.62939453125e-06, -0.0001220703125, 0.0, -0.029026150703430176, 0.0, -0.0007305145263671875, -0.001079559326171875, -2.47955322265625e-05, 0.0, -0.6722316741943359, 0.0, -0.0020220279693603516, -1.9073486328125e-06, -0.0008462667465209961, -3.0517578125e-05, -3.0517578125e-05, -1.71661376953125e-05, 0.0, -0.003368377685546875, 0.0, -0.0027904510498046875, -9.5367431640625e-06, -0.000942230224609375, 0.0, -0.052512168884277344, 0.0, -0.00011849403381347656, -0.000156402587890625, -0.028081893920898438, 0.0, -0.03923916816711426, -3.814697265625e-06, -0.04038429260253906, -0.001110076904296875, -0.001453399658203125, -0.00087738037109375, -0.0006237030029296875, -0.0006656646728515625, -0.005786895751953125, -1.1444091796875e-05, -0.00014495849609375, -0.000701904296875, -3.814697265625e-06, -2.09808349609375e-05, -0.0039920806884765625, -5.340576171875e-05, -0.015428543090820312, 0.0, -0.006047248840332031, -2.0265579223632812e-06, -0.000179290771484375, 0.0, -0.0013489637058228254, -4.38690185546875e-05, -0.015651334077119827, -2.9325485229492188e-05, -0.0027875900268554688, -0.07088851928710938, -0.000179290771484375, -0.0003757476806640625, -1.1444091796875e-05, -1.71661376953125e-05, 0.0, -0.001689910888671875, -1.71661376953125e-05, -0.1211390495300293, -1.9073486328125e-06, -0.0018558502197265625, -1.33514404296875e-05, -0.000247955322265625, 0.0, -0.00070953369140625, 0.0, -0.03255176544189453, -4.768370445162873e-07, -0.0002536773681640625, 0.0, -1.33514404296875e-05, -0.006714820861816406, -0.0001773834228515625, -0.0019922256469726562, -3.814697265625e-06, -0.0014606714248657227, 0.0, -0.003574371337890625, -0.028571128845214844, -5.91278076171875e-05, -0.03576946258544922, 0.0, -8.392333984375e-05, 0.0, -9.72747802734375e-05, 0.0, -8.7738037109375e-05, 0.0, -0.0027004277799278498, 0.0, -3.814697265625e-06, -0.0007266998291015625, -0.000301361083984375, -0.000347137451171875, -0.01233673095703125, -1.1444091796875e-05, -4.1961669921875e-05, 0.0, -6.866455078125e-05, 0.0, -4.76837158203125e-05, 0.0, -0.020802106708288193, 0.0, -9.5367431640625e-06, -0.0003108978271484375, -0.0002193450927734375, -5.7220458984375e-06, -3.814697265625e-06, -0.0001087188720703125, 0.0, -4.9591064453125e-05, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -5.53131103515625e-05, 0.0, -0.03976323455572128, 0.0, -4.9591064453125e-05, -0.005244255065917969, -0.0006237030029296875, -5.7220458984375e-06, 0.0, -0.000171661376953125, 0.0, -0.0001926422119140625, 0.0, -0.0003499984450172633, 0.0, -3.814697265625e-06, -0.025450706481933594, -1.52587890625e-05, 0.0, -0.0018267631530761719, -2.861022494471399e-06], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.current_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.DEMON and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n"}]}
{"gold_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"score": -1.7853187227474265, "choice_history": [59, 124, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Spellbreaker", "<EOS>", 48, 117, "4", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 52, 172, 154, "battlecry", "<EOS>", 19, 89, 24, 112, "Battlecry", "<EOS>", 165, 51, 130, "Kill", "<EOS>", 41, 89, 24, 112, "Minion", "Selector", "<EOS>", 164, 51, 130, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "4", "<EOS>", "3", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 4, "hole2": 3, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Spellbreaker", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"_type": "Template11"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"args": [{"_type": "Template10", "hole0": "Kill"}, {"args": [{"_type": "Template10", "hole0": "EnemyPlayer"}], "func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "Spellbreaker", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-0.0001068115234375, -0.000255584716796875, -9.929640509653836e-05, -5.841247457283316e-06, -2.3841312213335186e-07, -1.52587890625e-05, -0.0002184871700592339, -5.14984130859375e-05, -3.814697265625e-06, 0.0, -0.0005550384521484375, -2.288818359375e-05, -0.0008716583251953125, -0.0007953643798828125, -0.0003566741943359375, -7.62939453125e-06, -6.854299135738984e-05, -2.384185791015625e-06, -2.6702880859375e-05, -7.62939453125e-06, -0.0013838037848472595, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, 0.0, -2.9802317840221804e-06, -7.748603820800781e-06, -5.53131103515625e-05, 0.0, -0.0001926422119140625, -0.00025177001953125, -1.9073486328125e-06, -0.0026383399963378906, 0.0, -0.000164031982421875, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -4.2438317905180156e-05, -7.62939453125e-06, -1.1444091796875e-05, -0.0036468505859375, -1.9073486328125e-06, -0.6907092332839966, -0.0001779639715095982, -7.62939453125e-06, -0.07623100280761719, -0.0001125335693359375, -9.5367431640625e-06, -0.0003934665583074093, -1.9073486328125e-06, -3.814697265625e-06, -0.41082191467285156, -0.08307838439941406, -1.9073486328125e-06, -0.497836172580719, -0.008390665054321289, 0.0, -0.0003057718276977539, 0.0, -0.005051264073699713, 0.0, -2.288818359375e-05, -1.9073486328125e-05, -5.7220458984375e-06, -2.501357812434435e-06, -1.9073486328125e-06, -4.5299329940462485e-06, 0.0, -0.0001799975143512711, 0.0], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Kill(), MinionSelector(\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}]}
{"gold_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())),\n            MinionSelector(Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"score": -3.525727253314969, "choice_history": [59, 124, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Sunfury", " ", "Protector", "<EOS>", 55, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 38, 82, 29, "RARE", "<EOS>", 172, 154, "battlecry", "<EOS>", 19, 89, 24, 112, "Battlecry", "<EOS>", 165, 41, 89, 24, 112, "Give", "<EOS>", 164, 44, 108, 165, 41, 89, 24, 112, "Buff", "<EOS>", 164, 41, 89, 24, 112, "Change", "Attack", "<EOS>", 164, 55, 41, 89, 24, 112, "Buff", "<EOS>", 164, 41, 89, 24, 112, "Change", "Health", "<EOS>", 164, 55, 41, 89, 24, 112, "Minion", "Selector", "<EOS>", 165, 51, 130, "Taunt", "Adjacent", "<EOS>", 51, 130, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "2", "<EOS>", "3", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": 3, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Sunfury Protector", "_type": "Str"}, {"_type": "Template17"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "RARE", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"args": [{"args": [{"elts": [{"args": [{"args": [{"_type": "Template17"}], "func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Buff"}, "_type": "Call"}, {"args": [{"args": [{"_type": "Template17"}], "func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Buff"}, "_type": "Call"}], "_type": "List"}], "func": {"_type": "Name", "id": "Give"}, "_type": "Call"}, {"args": [{"_type": "Template10", "hole0": "TauntAdjacent"}, {"_type": "Template10", "hole0": "EnemyPlayer"}], "func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "SunfuryProtector", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-3.814697265625e-06, -8.392333984375e-05, -3.3854863431770355e-05, -0.00011634149996098131, -2.002712426474318e-05, -1.1920883480343036e-07, -9.5367431640625e-06, -3.933904736186378e-06, -5.7220458984375e-06, -7.05718994140625e-05, -3.814697265625e-06, -0.00069427490234375, -0.00264739990234375, -7.82012939453125e-05, -1.71661376953125e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.00042274597217328846, -5.14984130859375e-05, -0.0002503081923350692, -6.318092346191406e-05, -7.62939453125e-06, -7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-05, 0.0, -3.9339050999842584e-05, -1.1920928244535389e-07, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -3.4332275390625e-05, -0.0006763929850421846, -2.288818359375e-05, -0.0008563995361328125, -5.7220458984375e-06, -0.0035829544067382812, 0.0, -0.008091926574707031, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -9.57249867497012e-05, -3.814697265625e-06, -0.0001964569091796875, -0.007842063903808594, -9.5367431640625e-06, -7.62939453125e-06, -2.288818359375e-05, -0.02733568288385868, -0.033872101455926895, -0.20627975463867188, -0.0041675567626953125, -6.103515625e-05, -0.016889572143554688, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.0023504772689193487, -0.00018227100372314453, -0.0002956390380859375, -0.01160430908203125, -1.9073486328125e-06, -1.9073486328125e-06, -2.288818359375e-05, -0.0008948864415287971, -0.05602610111236572, -4.088877540198155e-05, -1.9073486328125e-05, -0.0023441314697265625, -3.0517578125e-05, -1.9073486328125e-06, 0.0, 0.0, -0.001370115322060883, -3.91002104151994e-05, -0.000102996826171875, -0.36866188049316406, -5.7220458984375e-06, -7.62939453125e-06, -0.000118255615234375, -0.0009292510221712291, -0.042967796325683594, -3.4570634852570947e-06, -7.05718994140625e-05, -0.005377769470214844, -0.011280059814453125, -0.0040130615234375, -9.5367431640625e-06, 0.0, -0.00042307376861572266, -7.62939453125e-06, 0.0, -0.2069530487060547, -0.6534795761108398, 0.0, -0.022146016359329224, -1.5974103212356567, -1.1920928244535389e-07, -2.86102294921875e-05, 0.0, -0.22141742706298828, -5.435943603515625e-05, -1.9073486328125e-06, -3.075599670410156e-05, 0.0, -2.3365020751953125e-05, 0.0, -1.9073486328125e-06, -1.71661376953125e-05, -4.9591064453125e-05, 0.0, 0.0, -8.344646857949556e-07, -2.3841855067985307e-07, -7.450580596923828e-05, -2.3841855067985307e-07], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(2))]), MinionSelector(TauntAdjacent(),\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}]}
{"gold_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "beams": [{"score": -2.4731199798834496, "choice_history": [59, 124, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Tinkmaster", " ", "Overspark", "<EOS>", 57, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 38, 82, 29, "LEGENDARY", "<EOS>", 172, 154, "battlecry", "<EOS>", 19, 89, 24, 112, "Battlecry", "<EOS>", 165, 41, 89, 24, 112, "Summon", "<EOS>", 165, 51, 130, "Squirrel", "<EOS>", 55, 51, 130, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "3", "<EOS>", "3", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 3, "hole2": 3, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Tinkmaster Overspark", "_type": "Str"}, {"_type": "Template19"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "LEGENDARY", "_type": "Attribute"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"args": [{"args": [{"_type": "Template10", "hole0": "Squirrel"}, {"_type": "Template17"}], "func": {"_type": "Name", "id": "Summon"}, "_type": "Call"}, {"_type": "Template10", "hole0": "PlayerSelector"}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "TinkmasterOverspark", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-9.34600830078125e-05, -6.67572021484375e-05, -0.0006785474251955748, -0.0013183006085455418, -5.018673982704058e-05, 0.0, -5.7220458984375e-06, -2.1457672119140625e-06, -3.4332275390625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.000186920166015625, -0.0001354217529296875, -0.000286102294921875, -9.5367431640625e-06, -1.9073486328125e-05, -9.5367431640625e-06, -8.4638240878121e-06, -4.887580871582031e-05, -9.894321920000948e-06, -3.647804260253906e-05, -8.58306884765625e-05, -1.9073486328125e-05, 0.0, 0.0, 0.0, -1.3470649719238281e-05, -3.814697265625e-06, -4.9591064453125e-05, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -5.7220458984375e-06, -0.3498520851135254, 0.0, -0.0002880096435546875, 0.0, -0.005863308906555176, 0.0, -0.13505840301513672, -3.814697265625e-06, -3.814697265625e-06, 0.0, -8.32080768304877e-05, 0.0, -3.4332275390625e-05, -0.017353057861328125, -0.00208282470703125, -5.7220458984375e-06, -0.0002689361572265625, -0.07271504402160645, -0.0002131239016307518, -0.45131683349609375, -0.0004425048828125, -1.1444091796875e-05, -0.3742222487926483, -0.7818534970283508, -0.003810882568359375, -0.27246761322021484, 0.0, -0.0006564088398590684, -4.76837158203125e-05, 0.0, -3.552412090357393e-05, 0.0, -8.010817691683769e-05, 0.0, -1.9073486328125e-06, -0.0006542205810546875, -1.33514404296875e-05, 0.0, -2.2649765014648438e-06, -1.2040138244628906e-05, -0.0003761887492146343, -1.330787199549377e-06, -4.422664278536104e-05], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Summon(Squirrel(), 2\n            ), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n"}]}
{"gold_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and attacker.is_minion(\n            ) and not attacker.removed:\n            attacker.die(self)\n            attacker.game.check_delayed()\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "beams": [{"score": -2.221045938656964, "choice_history": [59, 127, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 177, 68, 94, 34, 139, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 158, 1, 151, "game", "<EOS>", 177, 76, 146, 28, 130, "super", "<EOS>", "use", "<EOS>", 165, 46, 112, "player", "<EOS>", 46, 112, "game", "<EOS>", 179, 70, 96, "_reveal", "<EOS>", 4, 152, 160, 0, 1, 151, "card", "<EOS>", 1, 151, "index", "<EOS>", 177, 71, 99, 19, 87, 16, 82, 24, 112, "card", "<EOS>", "<UNK>", "<EOS>", 178, 64, 81, 164, 38, 82, 24, 112, "card", "<EOS>", "<UNK>", "<EOS>", 25, 113, "True", "<EOS>", 76, 145, 28, 130, "super", "<EOS>", "reveal", "<EOS>", 70, 96, "activate", "<EOS>", 2, 177, 76, 146, 16, 82, 16, 82, 24, 112, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 165, 49, 121, "card_played", "<EOS>", 38, 82, 24, 112, "self", "<EOS>", "_reveal", "<EOS>", 70, 96, "deactivate", "<EOS>", 2, 177, 76, 146, 16, 82, 16, 82, 24, 112, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 165, 49, 121, "card_played", "<EOS>", 38, 82, 24, 112, "self", "<EOS>", "_reveal", "<EOS>"], "model_output": {"hole7": [{"name": "_reveal", "args": {"args": [{"_type": "Template12"}, {"arg": "card", "_type": "arg"}, {"arg": "index", "_type": "arg"}], "_type": "arguments"}, "_type": "FunctionDef", "body": [{"test": {"func": {"value": {"_type": "Name", "id": "card"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "Call"}, "_type": "If", "body": [{"value": {"value": true, "_type": "NameConstant"}, "_type": "Assign", "targets": [{"value": {"_type": "Name", "id": "card"}, "attr": "<UNK>", "_type": "Attribute"}]}, {"hole1": "reveal", "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}]}]}, {"name": "activate", "args": {"_type": "Template4"}, "_type": "FunctionDef", "body": [{"hole1": "bind", "hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Name", "id": "self"}, "attr": "_reveal", "_type": "Attribute"}], "_type": "Template9", "hole0": {"value": {"value": {"_type": "Name", "id": "player"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}}]}, {"name": "deactivate", "args": {"_type": "Template4"}, "_type": "FunctionDef", "body": [{"hole1": "unbind", "hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Name", "id": "self"}, "attr": "_reveal", "_type": "Attribute"}], "_type": "Template9", "hole0": {"value": {"value": {"_type": "Name", "id": "player"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}}]}], "hole4": "player", "hole3": "use", "hole6": [{"hole1": "use", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Template9", "hole0": {"_type": "Template10", "hole0": "super"}}], "hole2": [{"value": {"hole1": 3, "hole2": "MAGE", "hole3": "RARE", "_type": "Template3", "hole0": "Vaporize"}, "_type": "Expr"}], "hole0": "Vaporize", "hole1": "SecretCard", "hole5": [{"arg": "game", "_type": "arg"}], "_type": "Template0"}, "score_history": [-5.7220458984375e-05, -0.017991065979003906, -3.421257497393526e-05, -0.0034039439633488655, -0.0004953867755830288, -1.4185901818564162e-05, -7.62939453125e-06, -0.0002079010009765625, -0.0001125335693359375, -7.62939453125e-06, -0.000385284423828125, -9.34600830078125e-05, -7.080780778778717e-05, -9.346007573185489e-05, -6.318072337307967e-06, -1.3709068298339844e-05, -0.045798301696777344, 0.0, -0.0059337615966796875, 0.0, -0.08466243743896484, 0.0, -0.0006628036499023438, 0.0, -0.0003452301025390625, -2.6702880859375e-05, -3.814697265625e-06, -0.003007173538208008, 0.0, -0.0032224655151367188, -0.23067092895507812, -2.288818359375e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.00020263563783373684, -3.814697265625e-06, -8.916854858398438e-05, 0.0, -1.52587890625e-05, -0.00049591064453125, 0.0, -0.00026035308837890625, 0.0, -0.00067901611328125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.036711692810058594, -0.0002117156982421875, -9.1552734375e-05, -0.023038864135742188, -1.1920928244535389e-07, -6.29425048828125e-05, -0.023748397827148438, -0.003543853759765625, -0.0004253387451171875, -3.24249267578125e-05, -1.1444091796875e-05, -0.035538554191589355, 0.0, -1.9073486328125e-06, -0.000179290771484375, -0.030323266983032227, -3.814697265625e-06, -1.1444091796875e-05, -0.017091751098632812, -0.00014495849609375, -0.3350353240966797, -0.0013217926025390625, -0.00022125244140625, -5.7220458984375e-06, -0.0001468658447265625, -1.52587890625e-05, -0.022730588912963867, -5.7220458984375e-06, -0.002457140712067485, -1.3470649719238281e-05, -0.00173187255859375, -0.008715629577636719, -9.5367431640625e-06, -9.5367431640625e-06, -0.0005512237548828125, -1.9073486328125e-06, -0.000659942626953125, 0.0, -0.01410984992980957, 0.0, -0.5925219058990479, 0.0, -0.15016937255859375, -0.02857685089111328, -0.0013054604642093182, 0.0, -7.05718994140625e-05, -0.0028333663940429688, -2.86102294921875e-05, -8.0108642578125e-05, -8.666323992656544e-05, -1.9073486328125e-06, -0.000995635986328125, -6.29425048828125e-05, -0.0015153884887695312, -0.0006694793701171875, -0.0013215540675446391, -1.9073486328125e-06, -0.0007724761962890625, -0.000179290771484375, -1.1444091796875e-05, -1.9073486328125e-05, -0.0052165985107421875, -1.9073486328125e-06, -0.00067138671875, -1.52587890625e-05, -0.000110626220703125, 0.0, -0.0001125335693359375, 0.0, -0.000308990478515625, -2.47955322265625e-05, -0.0009747742442414165, 0.0, -0.11199045181274414, 0.0, -3.814697265625e-06, -5.14984130859375e-05, -9.5367431640625e-06, -0.1489354372024536, 0.0, -1.1444091796875e-05, -5.7220458984375e-06, -2.47955322265625e-05, 0.0, -0.00032711029052734375, -6.29425048828125e-05, -0.000946044921875, 0.0, -0.0002040863037109375, -5.340576171875e-05, -0.029711008071899414, 0.0, -0.0004901885986328125, -0.000202178955078125, -5.7220458984375e-06, -9.5367431640625e-06, -0.022047042846679688, -1.1444091796875e-05, -8.392333984375e-05, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.000263214111328125, 0.0, -0.0004024505615234375, -1.1444091796875e-05, -0.000975608651060611, 0.0, -0.008421540260314941, 0.0, -7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -0.14783692359924316, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, 0.0, -0.00022220611572265625, -4.9591064453125e-05, -0.00084686279296875, 0.0], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, card, index):\n        if card.<UNK>():\n            card.<UNK> = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n"}]}
{"gold_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "beams": [{"score": -0.05110251431178625, "choice_history": [59, 124, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 34, 139, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 144, "Minion", "<EOS>", "2", "<EOS>", "1", "<EOS>", 172, 154, "stealth", "<EOS>", 25, 113, "True", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": 1, "hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "stealth", "_type": "keyword"}], "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"hole1": 1, "hole2": "ALL", "hole3": "COMMON", "_type": "Template3", "hole0": "Worgen Infiltrator"}, "_type": "Expr"}], "hole0": "WorgenInfiltrator", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-3.814697265625e-06, -0.000118255615234375, -2.3841830625315197e-06, -2.7417760065873154e-05, -1.5973972040228546e-05, -2.3841585061745718e-07, 0.0, -2.622604142743512e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.000164031982421875, -1.9073486328125e-05, -2.098061486321967e-05, -5.352497100830078e-05, -2.3841855067985307e-07, -2.47955322265625e-05, -0.0013128984719514847, -1.9073486328125e-06, -6.16312026977539e-05, -1.9073486328125e-06, -0.0002434253692626953, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.003183603286743164, 0.0, 0.0, -1.1444091796875e-05, -0.000232696533203125, -1.1920883480343036e-07, -2.264974000354414e-06, -2.1457672119140625e-06, -3.576278118089249e-07, -0.0003256291674915701, -1.1920928244535389e-07, -0.0363006591796875, -2.47955322265625e-05, -0.008729934692382812, 0.0, -0.0001087188720703125, -4.38690185546875e-05, -2.09808349609375e-05, -7.62939453125e-06], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n"}]}
{"gold_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "beams": [{"score": -0.8302188125686172, "choice_history": [59, 124, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Blackwing", " ", "Corruptor", "<EOS>", 48, 117, "5", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 52, 172, 154, "battlecry", "<EOS>", 19, 89, 24, 112, "Battlecry", "<EOS>", 165, 41, 89, 24, 112, "Damage", "<EOS>", 164, 57, 41, 88, 24, 112, "Character", "Selector", "<EOS>", 173, 154, "players", "<EOS>", 28, 130, "Both", "Player", "<EOS>", 154, "picker", "<EOS>", 28, 130, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "5", "<EOS>", "4", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 5, "hole2": 4, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Blackwing Corruptor", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"_type": "Template11"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"args": [{"args": [{"_type": "Template19"}], "func": {"_type": "Name", "id": "Damage"}, "_type": "Call"}, {"func": {"_type": "Name", "id": "CharacterSelector"}, "_type": "Call", "keywords": [{"value": {"_type": "Template10", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template10", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}]}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "BlackwingCorruptor", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-1.9073486328125e-06, -0.00011444091796875, -9.536697689327411e-06, -6.7470311478246e-05, -2.0265473722247407e-05, -1.192074705613777e-07, -1.1920928244535389e-07, -1.1920928244535389e-07, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -8.58306884765625e-05, -1.1444091796875e-05, -3.4332275390625e-05, -1.52587890625e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.9073468138230965e-06, -7.295608520507812e-05, -3.933904736186378e-06, -7.62939453125e-06, -7.62939453125e-06, 0.0, -0.0016774175455793738, -2.3841855067985307e-07, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.0265579223632812e-06, -2.0265579223632812e-06, -4.57763671875e-05, 0.0, -9.1552734375e-05, -0.000461578369140625, -1.9073486328125e-06, -0.0017023086547851562, 0.0, -0.00043487548828125, -1.1444091796875e-05, -3.0517578125e-05, -7.62939453125e-06, -4.780292510986328e-05, 0.0, -0.10625553131103516, -0.005214691162109375, -3.814697265625e-06, -1.9073486328125e-06, -0.0001583099365234375, -0.06205117702484131, -1.3589766240329482e-05, -7.62939453125e-05, -0.6327705383300781, -0.0023651123046875, -0.0011882781982421875, -1.9073486328125e-06, 0.0, -0.0017046926077455282, -3.814697265625e-05, -0.000171661376953125, -0.0061511993408203125, -2.86102294921875e-05, -0.0004329681396484375, -7.62939453125e-06, -0.0001068115234375, 0.0, -0.0005303621292114258, -0.0002880096435546875, -3.814697265625e-06, -1.9073486328125e-05, -0.001567840576171875, -5.7220458984375e-06, -0.003383636474609375, -1.9073486328125e-06, -0.0002714395523071289, -7.176391227403656e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.62939453125e-06, -2.1576881408691406e-05, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -2.288818359375e-05, -2.8967540856683627e-05, -8.344646857949556e-07, -0.00020599365234375, -1.1444091796875e-05], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n"}]}
{"gold_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Attribute('health',\n            HeroSelector(EnemyPlayer())), value=15))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "beams": [{"score": -3.0529055348249514, "choice_history": [59, 124, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Drakonid", " ", "Crusher", "<EOS>", 48, 117, "6", "<EOS>", 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 52, 173, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 154, "battlecry", "<EOS>", 36, 147, 165, 41, 89, 24, 112, "Battlecry", "<EOS>", 165, 51, 130, "Kill", "<EOS>", 41, 89, 24, 112, "Minion", "Selector", "<EOS>", 165, 41, 89, 24, 112, "Is", "Type", "<EOS>", 164, 38, 82, 24, 112, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 51, 130, "Both", "Player", "<EOS>", 41, 89, 24, 112, "Battlecry", "<EOS>", 165, 51, 130, "Kill", "<EOS>", 41, 89, 24, 112, "Minion", "Selector", "<EOS>", 165, 41, 89, 24, 112, "Is", "Type", "<EOS>", 164, 38, 82, 24, 112, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 51, 130, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "6", "<EOS>", "6", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 6, "hole2": 6, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Drakonid Crusher", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"_type": "Template11"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}, {"value": {"elts": [{"args": [{"_type": "Template10", "hole0": "Kill"}, {"args": [{"args": [{"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MURLOC", "_type": "Attribute"}], "func": {"_type": "Name", "id": "IsType"}, "_type": "Call"}, {"_type": "Template10", "hole0": "BothPlayer"}], "func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}, {"args": [{"_type": "Template10", "hole0": "Kill"}, {"args": [{"args": [{"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MURLOC", "_type": "Attribute"}], "func": {"_type": "Name", "id": "IsType"}, "_type": "Call"}, {"_type": "Template10", "hole0": "BothPlayer"}], "func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}], "_type": "Tuple"}, "arg": "battlecry", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "DrakonidCrusher", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-1.9073486328125e-06, -8.20159912109375e-05, -4.172238186583854e-05, -0.00032419670606032014, -3.933898824470816e-06, 0.0, 0.0, -1.1920928244535389e-07, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.91278076171875e-05, -9.5367431640625e-06, -2.47955322265625e-05, -3.0517578125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -9.179073458653875e-06, -5.0067901611328125e-05, -4.053113570989808e-06, -7.62939453125e-06, -3.814697265625e-05, -3.814697265625e-06, -2.8729471523547545e-05, -2.7418097943154862e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -4.208087921142578e-05, -2.09808349609375e-05, -4.00543212890625e-05, -1.9073486328125e-06, -0.000640869140625, -0.35665416717529297, -0.0001201629638671875, -0.0002079010009765625, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -1.33514404296875e-05, -6.4849853515625e-05, -2.86102294921875e-05, -0.010410308837890625, -3.814697265625e-06, -1.33514404296875e-05, -0.000324249267578125, 0.0, -0.028917312622070312, -0.0007724761962890625, -0.005702972412109375, -8.392333984375e-05, -1.9073486328125e-06, 0.0, 0.0, -0.0009099245071411133, -9.5367431640625e-05, -0.0023193359375, -0.018677711486816406, 0.0, -0.1518469750881195, -1.251697449333733e-05, -0.001331329345703125, -8.7738037109375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.01812732219696045, -1.9073486328125e-06, -7.62939453125e-06, -0.06354236602783203, -0.026477813720703125, -1.52587890625e-05, -9.5367431640625e-06, 0.0, -0.0024908781051635742, -0.005658626556396484, -2.0265579223632812e-06, -0.000213623046875, -0.00016021728515625, 0.0, -2.09808349609375e-05, -7.62939453125e-06, -0.0022525787353515625, -1.9073486328125e-06, -0.45413899421691895, -9.5367431640625e-06, -9.72747802734375e-05, -5.7220458984375e-06, -0.004272580146789551, -4.1961669921875e-05, 0.0, -0.0009098052978515625, -9.1552734375e-05, 0.0, 0.0, -0.010680675506591797, -0.0001049041748046875, -0.001911163330078125, -0.4877777099609375, 0.0, -0.1640847772359848, -6.616029713768512e-05, -0.025274276733398438, -0.000335693359375, -5.7220458984375e-06, -3.814697265625e-06, -0.03074800968170166, -1.9073486328125e-06, -9.5367431640625e-06, -0.4929313659667969, -0.17330455780029297, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -0.009292125701904297, -0.009645819664001465, -1.9073486328125e-06, -3.62396240234375e-05, -0.000133514404296875, 0.0, -2.09808349609375e-05, -9.5367431640625e-06, -0.001567840576171875, -1.9073486328125e-06, -0.4810401201248169, -9.5367431640625e-06, -9.918212890625e-05, -5.7220458984375e-06, -0.004251599311828613, -4.1961669921875e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.00030350685119628906, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -0.00039476618985645473, 0.0, -5.508476169779897e-05, 0.0], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=(\n            Battlecry(Kill(), MinionSelector(IsType(MINION_TYPE.MURLOC),\n            BothPlayer())), Battlecry(Kill(), MinionSelector(IsType(\n            MINION_TYPE.MURLOC), BothPlayer()))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}]}
{"gold_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"score": -0.15024423348563687, "choice_history": [59, 124, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 168, 49, 121, "Imp", "<EOS>", 56, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 38, 82, 29, "RARE", "<EOS>", 47, 113, "False", "<EOS>", 172, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "1", "<EOS>", "1", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 1, "hole2": 1, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template18"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Template14"}, "attr": "RARE", "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "Imp", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-0.000240325927734375, -0.0005626678466796875, -1.2516897186287679e-05, -6.997340824455023e-05, -8.344322850462049e-07, -1.9073486328125e-06, -9.298310033045709e-06, 0.0, -1.9073486328125e-05, -5.7220458984375e-06, -0.0001010894775390625, -0.0009307861328125, -0.000102996826171875, -0.011761665344238281, -7.43865966796875e-05, -1.1444091796875e-05, -5.483612312673358e-06, -3.814697265625e-06, -3.4332275390625e-05, -5.7220458984375e-06, -0.0001506805419921875, -1.9073486328125e-06, -7.62939453125e-06, -2.0265579223632812e-06, 0.0, -0.09125065803527832, 0.0, -0.027736663818359375, -1.33514404296875e-05, -8.20159912109375e-05, -0.0018335580825805664, -7.62939453125e-06, -0.0004291534423828125, -0.0007076263427734375, -4.9829453928396106e-05, -4.5299530029296875e-06, -0.0001392364501953125, -1.33514404296875e-05, -0.0004138946533203125, -1.9073486328125e-06, -5.14984130859375e-05, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0006084442138671875, -1.9073486328125e-06, -0.003922462463378906, -1.9073486328125e-06, -0.000400543212890625, 0.0, -0.008344292640686035, 0.0, -2.09808349609375e-05, -3.24249267578125e-05, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.099436753473128e-06, -5.006777428206988e-06, -2.9803704819642007e-06, -7.033334895822918e-06], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}]}
{"gold_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "beams": [{"score": -0.7597194599983368, "choice_history": [59, 124, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 177, 68, 94, 19, 90, 35, 167, 49, 121, "Twilight", " ", "Whelp", "<EOS>", 56, 38, 82, 24, 112, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 52, 173, 154, "minion_type", "<EOS>", 16, 82, 24, 112, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 154, "battlecry", "<EOS>", 19, 89, 24, 112, "Battlecry", "<EOS>", 166, 41, 89, 24, 112, "Give", "<EOS>", 164, 44, 108, 165, 41, 89, 24, 112, "Buff", "<EOS>", 164, 41, 89, 24, 112, "Change", "Attack", "<EOS>", 164, 55, 41, 89, 24, 112, "Buff", "<EOS>", 164, 41, 89, 24, 112, "Change", "Health", "<EOS>", 164, 56, 51, 130, "Self", "Selector", "<EOS>", 41, 90, 24, 112, "Greater", "Than", "<EOS>", 164, 41, 89, 24, 112, "Count", "<EOS>", 164, 41, 88, 24, 112, "Card", "Selector", "<EOS>", 172, 154, "condition", "<EOS>", 19, 89, 24, 112, "Is", "Type", "<EOS>", 164, 38, 82, 24, 112, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 172, 154, "value", "<EOS>", 26, 117, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 177, 75, 143, "Minion", "<EOS>", "2", "<EOS>", "1", "<EOS>"], "model_output": {"hole4": "player", "hole3": "create_minion", "hole6": [{"hole1": 2, "hole2": 1, "_type": "Template8", "hole0": "Minion"}], "hole2": [{"value": {"args": [{"s": "Twilight Whelp", "_type": "Str"}, {"_type": "Template18"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK", "_type": "Attribute"}, {"_type": "Template11"}], "func": {"_type": "Template7"}, "_type": "Call", "keywords": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}, {"value": {"args": [{"args": [{"elts": [{"args": [{"args": [{"_type": "Template17"}], "func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Buff"}, "_type": "Call"}, {"args": [{"args": [{"_type": "Template18"}], "func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call"}], "func": {"_type": "Name", "id": "Buff"}, "_type": "Call"}], "_type": "List"}], "func": {"_type": "Name", "id": "Give"}, "_type": "Call"}, {"_type": "Template10", "hole0": "SelfSelector"}, {"args": [{"args": [{"func": {"_type": "Name", "id": "CardSelector"}, "_type": "Call", "keywords": [{"value": {"args": [{"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON", "_type": "Attribute"}], "func": {"_type": "Name", "id": "IsType"}, "_type": "Call"}, "arg": "condition", "_type": "keyword"}]}], "func": {"_type": "Name", "id": "Count"}, "_type": "Call"}], "func": {"_type": "Name", "id": "GreaterThan"}, "_type": "Call", "keywords": [{"value": {"n": 0, "_type": "Num"}, "arg": "value", "_type": "keyword"}]}], "func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}]}, "_type": "Expr"}], "hole0": "TwilightWhelp", "hole1": "MinionCard", "_type": "Template0"}, "score_history": [-2.09808349609375e-05, -0.0001239776611328125, -1.0967194612021558e-05, -1.2397689715726301e-05, 0.0, -1.1920201359316707e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -0.0001392364501953125, 0.0, -5.7220458984375e-06, -4.887576324108522e-06, -6.115436553955078e-05, -8.344646857949556e-07, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03351402282714844, -5.14984130859375e-05, -6.4849853515625e-05, -0.09242630004882812, -1.9073486328125e-06, -0.09907817840576172, 0.0, -3.24249267578125e-05, -2.6702880859375e-05, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, -5.7220458984375e-06, -0.0034685134887695312, -7.62939453125e-06, -3.814697265625e-06, -0.0015697479248046875, 0.0, -0.0209808349609375, -3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -0.00024044513702392578, -2.6702880859375e-05, -0.000911712646484375, -5.91278076171875e-05, -0.0001010894775390625, -1.9073486328125e-06, -3.0517578125e-05, -0.0030343292746692896, -5.4120981076266617e-05, -0.0002040863037109375, -0.0008640289306640625, -3.814697265625e-06, -0.0006694793701171875, -1.9073486328125e-06, -0.00090789794921875, -7.62939453125e-06, 0.0, -0.0010231733322143555, -5.7220458984375e-06, -8.0108642578125e-05, -9.72747802734375e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -0.0007945279940031469, -0.013077497482299805, -0.00022900104522705078, -2.47955322265625e-05, -0.06847858428955078, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.00010204307909589261, -7.62939453125e-06, -2.09808349609375e-05, -0.00034332275390625, -8.392333984375e-05, -3.814697265625e-06, 0.0, -0.0017547307070344687, -0.03953659534454346, -7.152555099310121e-07, -3.4332275390625e-05, -0.17433738708496094, -0.012599945068359375, -1.9073486328125e-06, -0.0058019161224365234, -0.0002803802490234375, 0.0, -0.00055694580078125, -0.004985809326171875, -0.00040435791015625, 0.0, -0.0005359649658203125, -0.0005893707275390625, 0.0, -0.015671730041503906, -5.14984130859375e-05, -7.62939453125e-06, 0.0, 0.0, -0.00030744075775146484, -1.33514404296875e-05, -3.814697265625e-06, -0.00042724609375, -0.0025730133056640625, -9.5367431640625e-06, -3.814697265625e-06, -0.0047306641936302185, -4.208087921142578e-05, 0.0, -0.000141143798828125, -8.96453857421875e-05, -0.003154754638671875, -3.0517578125e-05, -0.0003795623779296875, -1.9073486328125e-06, -3.62396240234375e-05, -1.71661376953125e-05, -0.01730632781982422, -0.00023293495178222656, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.71661376953125e-05, 0.0, -0.0016214847564697266, -1.9073486328125e-06, -0.010531425476074219, -3.814697265625e-06, -0.1047525405883789, -0.0001239776611328125, -0.000728607177734375, -1.33514404296875e-05, -0.008311271667480469, -6.4849853515625e-05, -0.00017762184143066406, 0.0, -0.0026416778564453125, -1.9073486328125e-05, -0.0001951456069946289, 0.0, -3.814697265625e-06, -1.9073486328125e-05, -7.62939453125e-06, 0.0, -7.62939453125e-06, -0.0005180268781259656, 0.0, -3.933898824470816e-06, -7.62939453125e-06], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(1))]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}]}
